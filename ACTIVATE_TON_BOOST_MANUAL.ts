#!/usr/bin/env tsx
/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 251 –∏ 255
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –º–µ—Ç–æ–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';

interface ApiResponse {
  success: boolean;
  message?: string;
  error?: string;
  data?: any;
}

async function makeApiRequest(endpoint: string, method: string = 'GET', body?: any): Promise<ApiResponse> {
  try {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Manual-Activation-Script'
      },
      body: body ? JSON.stringify(body) : undefined
    });
    
    const data = await response.json();
    return data as ApiResponse;
  } catch (error) {
    console.error(`API Error for ${endpoint}:`, error);
    return { success: false, error: String(error) };
  }
}

async function getUserInfo(userId: number): Promise<any> {
  console.log(`\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId}...`);
  
  const response = await makeApiRequest(`/api/v2/users/${userId}`);
  if (response.success) {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–π–¥–µ–Ω:`, {
      id: response.data?.id,
      username: response.data?.username,
      tonBalance: response.data?.balance_ton,
      uniBalance: response.data?.balance_uni,
      currentBoostActive: response.data?.ton_boost_active
    });
    return response.data;
  } else {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, response.error);
    return null;
  }
}

async function getAvailablePackages(): Promise<any[]> {
  console.log('\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤...');
  
  const response = await makeApiRequest('/api/v2/boost/packages');
  if (response.success && response.data) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${response.data.length} –ø–∞–∫–µ—Ç–æ–≤`);
    response.data.forEach((pkg: any) => {
      console.log(`  - ${pkg.name}: ${pkg.min_amount} TON, —Å—Ç–∞–≤–∫–∞: ${pkg.daily_rate}`);
    });
    return response.data;
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤:', response.error);
    return [];
  }
}

async function addBalanceToUser(userId: number, amount: number): Promise<boolean> {
  console.log(`\nüí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${amount} TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
  
  const response = await makeApiRequest(`/api/v2/wallet/add-balance`, 'POST', {
    userId,
    amount,
    currency: 'TON',
    reason: 'Manual TON Boost activation preparation'
  });
  
  if (response.success) {
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    return true;
  } else {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, response.error);
    return false;
  }
}

async function purchaseBoostPackage(userId: number, packageId: number): Promise<boolean> {
  console.log(`\nüöÄ –ü–æ–∫—É–ø–∫–∞ TON Boost –ø–∞–∫–µ—Ç–∞ ${packageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  const response = await makeApiRequest(`/api/v2/boost/purchase`, 'POST', {
    userId: userId.toString(),
    boostId: packageId.toString(),
    paymentMethod: 'internal_balance'
  });
  
  if (response.success) {
    console.log(`‚úÖ TON Boost –ø–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏:', {
      message: response.message,
      hasBalanceUpdate: !!response.data?.balanceUpdate
    });
    return true;
  } else {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, response.error || response.message);
    return false;
  }
}

async function verifyActivation(userId: number): Promise<void> {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
  const userInfo = await getUserInfo(userId);
  if (!userInfo) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã
  const boostResponse = await makeApiRequest(`/api/v2/boost/user/${userId}/active`);
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
  console.log(`  TON Boost –∞–∫—Ç–∏–≤–µ–Ω: ${userInfo.ton_boost_active}`);
  console.log(`  –¢–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç: ${userInfo.ton_boost_package || '–ù–µ—Ç'}`);
  console.log(`  –°—Ç–∞–≤–∫–∞: ${userInfo.ton_boost_rate || '–ù–µ—Ç'}`);
  console.log(`  –ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã —á–µ—Ä–µ–∑ API: ${boostResponse.success ? '–ù–∞–π–¥–µ–Ω—ã' : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
  
  const isActivated = userInfo.ton_boost_active === true && userInfo.ton_boost_package;
  console.log(`${isActivated ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${isActivated ? '–£–°–ü–ï–®–ù–û' : '–ù–ï–ü–û–õ–ù–ê–Ø'}`);
}

async function processUser(userId: number, targetPackageId: number): Promise<boolean> {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}`);
  console.log(`${'='.repeat(60)}`);
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userInfo = await getUserInfo(userId);
    if (!userInfo) return false;
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
    const currentBalance = parseFloat(userInfo.balance_ton || '0');
    const requiredBalance = 2; // 2 TON –¥–ª—è –ø–∞–∫–µ—Ç–∞
    
    if (currentBalance < requiredBalance) {
      const needToAdd = requiredBalance - currentBalance + 0.1; // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
      console.log(`üí≥ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON (${currentBalance}), –¥–æ–±–∞–≤–ª—è–µ–º ${needToAdd}`);
      
      const balanceAdded = await addBalanceToUser(userId, needToAdd);
      if (!balanceAdded) return false;
    } else {
      console.log(`üí∞ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON (${currentBalance})`);
    }
    
    // 3. –ü–æ–∫—É–ø–∞–µ–º –±—É—Å—Ç –ø–∞–∫–µ—Ç
    const purchaseSuccess = await purchaseBoostPackage(userId, targetPackageId);
    if (!purchaseSuccess) return false;
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await verifyActivation(userId);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return false;
  }
}

async function main() {
  console.log('üöÄ === –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í ===');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toISOString());
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 251, 255');
  console.log('üí∞ –î–µ–ø–æ–∑–∏—Ç: 2 TON –∫–∞–∂–¥–æ–º—É');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
  const healthCheck = await makeApiRequest('/api/v2/');
  if (!healthCheck.success) {
    console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
    return;
  }
  console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
  const packages = await getAvailablePackages();
  if (packages.length === 0) {
    console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
    return;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è 2 TON
  const suitablePackage = packages.find(pkg => pkg.min_amount <= 2);
  if (!suitablePackage) {
    console.error('‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è 2 TON');
    return;
  }
  
  console.log(`\nüì¶ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞–∫–µ—Ç: ${suitablePackage.name} (ID: ${suitablePackage.id})`);
  
  const targetUsers = [251, 255];
  const results: { userId: number; success: boolean }[] = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const userId of targetUsers) {
    const success = await processUser(userId, suitablePackage.id);
    results.push({ userId, success });
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log(`\n${'='.repeat(60)}`);
  console.log('üìà === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
  console.log(`${'='.repeat(60)}`);
  
  results.forEach(({ userId, success }) => {
    console.log(`${success ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${success ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  });
  
  const successCount = results.filter(r => r.success).length;
  console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã`);
  
  if (successCount === results.length) {
    console.log('üéâ –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å');
  }
}

main().catch(console.error);