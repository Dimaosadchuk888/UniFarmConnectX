/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—á–∏—â–µ–Ω–Ω–æ–π production –±–∞–∑–µ
 */

import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000';
const LAUNCH_TEST_USER = {
  telegram_id: 777000888,
  username: 'launch_test_user',
  first_name: 'Launch',
  last_name: 'Test',
  direct_registration: true
};

async function finalLaunchTest() {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ PRODUCTION –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('===================================');
  
  try {
    // 1. –¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log('üß™ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', LAUNCH_TEST_USER);
    
    const response = await fetch(`${API_BASE}/api/v2/register/telegram`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(LAUNCH_TEST_USER)
    });
    
    const responseText = await response.text();
    console.log('üì• –°—Ç–∞—Ç—É—Å:', response.status, response.statusText);
    console.log('üìÑ –û—Ç–≤–µ—Ç:', responseText);
    
    if (response.ok) {
      const data = JSON.parse(responseText);
      const user = data.data?.user;
      
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:');
      console.log(`   ID: ${user?.id}`);
      console.log(`   Telegram ID: ${user?.telegram_id}`);
      console.log(`   Username: ${user?.username}`);
      console.log(`   Ref Code: ${user?.ref_code}`);
      console.log(`   JWT Token: ${data.data?.token ? '–°–æ–∑–¥–∞–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`   –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.data?.isNewUser}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID = 1 (–ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–∏—â–µ–Ω–Ω–æ–π –±–∞–∑–µ)
      if (user?.id === '1') {
        console.log('‚úÖ ID = 1 - –±–∞–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—â–µ–Ω–∞');
      } else {
        console.log(`‚ö†Ô∏è ID = ${user?.id} - –æ–∂–∏–¥–∞–ª—Å—è ID = 1`);
      }
      
      return user;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response.status, responseText);
      return null;
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return null;
  }
}

async function cleanupTestUser() {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const response = await fetch(`${API_BASE}/api/v2/admin/cleanup-test-user`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ telegram_id: 777000888 })
    });
    
    if (response.ok) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –Ω–µ —É–¥–∞–ª–æ—Å—å, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ SQL');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ SQL');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
finalLaunchTest().then(async (user) => {
  if (user) {
    console.log('üéâ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û');
    console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ production –∑–∞–ø—É—Å–∫—É');
    
    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 2000));
    await cleanupTestUser();
    
    console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£');
  } else {
    console.log('üíî –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ');
  }
}).catch(console.error);