#!/usr/bin/env node

/**
 * –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û TON –î–ï–ü–û–ó–ò–¢–ê
 * –ê–Ω–∞–ª–∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç 24.07.2025, 08:55 —Å blockchain –∫–æ–¥–æ–º
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function investigateSpecificTonDeposit() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û TON –î–ï–ü–û–ó–ò–¢–ê');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - –ø–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç 24.07.2025, 08:55');
  
  const targetDepositInfo = {
    date: '24.07.2025, 08:55',
    blockchainCode: 'te6cckECBAEAAL0AAfGIALKkfhrf64MMekUmJ+6y3nR73Z31+EJ1YuGvDLli2OEIA5tLO3f///iIAAAAAAADRA+weAAAARsdpjnf8k78b5awIXECygukLsVDjjIZBplNNjxVY2rOCB/S79o9Lf85frF8t4jAlEK7SYtyiVgDtr9EvQMjs7gSAQIKDsPIbQMDAgBoQgAy1qPkmESgOZMZ225Yq7Y113tDjkFCFPPWjMth0RWpoqDuaygAAAAAAAAAAAAAAAAAAAAAfBg2bg==',
    type: 'UNI Farming TON deposit'
  };
  
  console.log('üéØ –î–ê–ù–ù–´–ï –î–ï–ü–û–ó–ò–¢–ê –î–õ–Ø –ü–û–ò–°–ö–ê:');
  console.log(`   –î–∞—Ç–∞: ${targetDepositInfo.date}`);
  console.log(`   –¢–∏–ø: ${targetDepositInfo.type}`);
  console.log(`   Blockchain –∫–æ–¥: ${targetDepositInfo.blockchainCode.substring(0, 50)}...`);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ UTC –¥–ª—è –ø–æ–∏—Å–∫–∞
  const searchDate = new Date('2025-07-24T05:55:00.000Z'); // 08:55 MSK = 05:55 UTC
  const searchStart = new Date(searchDate.getTime() - 10 * 60 * 1000); // -10 –º–∏–Ω—É—Ç
  const searchEnd = new Date(searchDate.getTime() + 10 * 60 * 1000);   // +10 –º–∏–Ω—É—Ç
  
  console.log(`\nüïê –í–†–ï–ú–ï–ù–ù–û–ï –û–ö–ù–û –ü–û–ò–°–ö–ê:`);
  console.log(`   –û—Ç: ${searchStart.toISOString()}`);
  console.log(`   –î–æ: ${searchEnd.toISOString()}`);
  
  // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const currentUserId = 184; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  
  // 1. –ü–û–ò–°–ö –ü–û –í–†–ï–ú–ï–ù–ò –ò –û–ü–ò–°–ê–ù–ò–Æ
  console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –í–†–ï–ú–ï–ù–ù–û–ú–£ –û–ö–ù–£');
  console.log('-'.repeat(60));
  
  const { data: timeBasedTransactions, error: timeError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', currentUserId)
    .gte('created_at', searchStart.toISOString())
    .lte('created_at', searchEnd.toISOString())
    .order('created_at', { ascending: false });
  
  if (timeError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:', timeError.message);
  } else {
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ: ${timeBasedTransactions?.length || 0}`);
    
    if (timeBasedTransactions && timeBasedTransactions.length > 0) {
      console.log('\nüìã –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –£–ö–ê–ó–ê–ù–ù–û–ï –í–†–ï–ú–Ø:');
      timeBasedTransactions.forEach((tx, index) => {
        console.log(`${index + 1}. ID: ${tx.id}`);
        console.log(`   –í—Ä–µ–º—è: ${tx.created_at}`);
        console.log(`   –¢–∏–ø: ${tx.type}`);
        console.log(`   TON: ${tx.amount_ton || '0'}`);
        console.log(`   UNI: ${tx.amount_uni || '0'}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`   Metadata: ${JSON.stringify(tx.metadata || {})}`);
        console.log('   ---');
      });
    }
  }
  
  // 2. –ü–û–ò–°–ö –ü–û BLOCKCHAIN –ö–û–î–£ –í METADATA
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–û BLOCKCHAIN –ö–û–î–£ –í METADATA');
  console.log('-'.repeat(60));
  
  const blockchainCodePart = targetDepositInfo.blockchainCode.substring(0, 30);
  
  const { data: metadataTransactions, error: metadataError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', currentUserId)
    .order('created_at', { ascending: false })
    .limit(100); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  
  if (metadataError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ metadata:', metadataError.message);
  } else {
    const matchingTransactions = [];
    
    if (metadataTransactions) {
      metadataTransactions.forEach(tx => {
        const metadata = tx.metadata || {};
        const description = tx.description || '';
        
        // –ò—â–µ–º blockchain –∫–æ–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        const metadataString = JSON.stringify(metadata).toLowerCase();
        const descriptionString = description.toLowerCase();
        const blockchainCodeLower = targetDepositInfo.blockchainCode.toLowerCase();
        
        if (metadataString.includes(blockchainCodePart.toLowerCase()) ||
            descriptionString.includes(blockchainCodePart.toLowerCase()) ||
            metadataString.includes('te6cck') ||
            descriptionString.includes('te6cck')) {
          matchingTransactions.push(tx);
        }
      });
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å blockchain –∫–æ–¥–æ–º: ${matchingTransactions.length}`);
    
    if (matchingTransactions.length > 0) {
      console.log('\nüìã –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° BLOCKCHAIN –ö–û–î–û–ú:');
      matchingTransactions.forEach((tx, index) => {
        console.log(`${index + 1}. ID: ${tx.id}`);
        console.log(`   –í—Ä–µ–º—è: ${tx.created_at}`);
        console.log(`   –¢–∏–ø: ${tx.type}`);
        console.log(`   TON: ${tx.amount_ton || '0'}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
        console.log(`   Metadata: ${JSON.stringify(tx.metadata || {}).substring(0, 100)}...`);
        console.log('   ---');
      });
    }
  }
  
  // 3. –ü–û–ò–°–ö –ü–û –û–ü–ò–°–ê–ù–ò–Æ "TON deposit"
  console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –ü–û –û–ü–ò–°–ê–ù–ò–Æ "TON deposit"');
  console.log('-'.repeat(60));
  
  const { data: descriptionTransactions, error: descError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', currentUserId)
    .or('description.ilike.%TON deposit%,description.ilike.%blockchain%,type.eq.TON_DEPOSIT,type.eq.DEPOSIT')
    .order('created_at', { ascending: false })
    .limit(50);
  
  if (descError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:', descError.message);
  } else {
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "TON deposit": ${descriptionTransactions?.length || 0}`);
    
    if (descriptionTransactions && descriptionTransactions.length > 0) {
      console.log('\nüìã TON DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      descriptionTransactions.slice(0, 10).forEach((tx, index) => {
        console.log(`${index + 1}. ID: ${tx.id}`);
        console.log(`   –í—Ä–µ–º—è: ${tx.created_at}`);
        console.log(`   –¢–∏–ø: ${tx.type}`);
        console.log(`   TON: ${tx.amount_ton || '0'}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
        console.log('   ---');
      });
    }
  }
  
  // 4. –ü–†–û–í–ï–†–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê –í –£–ö–ê–ó–ê–ù–ù–û–ï –í–†–ï–ú–Ø
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
  console.log('-'.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const { data: currentUser, error: userError } = await supabase
    .from('users')
    .select('balance_ton, balance_uni, updated_at')
    .eq('id', currentUserId)
    .single();
  
  if (userError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
  } else {
    console.log(`üìä –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${currentUserId}:`);
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${currentUser?.balance_ton || 0}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${currentUser?.balance_uni || 0}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${currentUser?.updated_at}`);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–µ–ø–æ–∑–∏—Ç–∞
    if (currentUser?.updated_at) {
      const lastUpdate = new Date(currentUser.updated_at);
      const timeDiff = Math.abs(lastUpdate.getTime() - searchDate.getTime());
      const minutesDiff = Math.floor(timeDiff / (1000 * 60));
      
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–µ–ø–æ–∑–∏—Ç–∞: ${minutesDiff} –º–∏–Ω—É—Ç`);
      
      if (minutesDiff < 30) {
        console.log('‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–ª–∏–∑–∫–æ –∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
      } else {
        console.log('‚ö†Ô∏è  –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º');
      }
    }
  }
  
  // 5. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
  console.log('\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–ê');
  console.log('-'.repeat(60));
  
  const foundInTimeWindow = timeBasedTransactions?.length || 0;
  const foundWithBlockchain = (metadataTransactions?.filter(tx => {
    const metadataString = JSON.stringify(tx.metadata || {}).toLowerCase();
    const descriptionString = (tx.description || '').toLowerCase();
    return metadataString.includes('te6cck') || descriptionString.includes('te6cck');
  }) || []).length;
  const foundTonDeposits = descriptionTransactions?.length || 0;
  
  console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:');
  console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ 08:55: ${foundInTimeWindow}`);
  console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å blockchain –∫–æ–¥–æ–º: ${foundWithBlockchain}`);
  console.log(`   –í—Å–µ–≥–æ TON deposit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${foundTonDeposits}`);
  
  if (foundInTimeWindow === 0 && foundWithBlockchain === 0) {
    console.log('\nüö® –î–ï–ü–û–ó–ò–¢ –ù–ï –ù–ê–ô–î–ï–ù –í –°–ò–°–¢–ï–ú–ï!');
    console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   1. –î–µ–ø–æ–∑–∏—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π');
    console.log('   2. –î–µ–ø–æ–∑–∏—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª–µ–Ω/–æ—Ç–∫–∞—á–µ–Ω');
    console.log('   3. –î–µ–ø–æ–∑–∏—Ç –∑–∞–ø–∏—Å–∞–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º user_id');
    console.log('   4. –í—Ä–µ–º—è –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ');
    console.log('   5. –î–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è –Ω–æ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  } else {
    console.log('\n‚úÖ –ù–ê–ô–î–ï–ù–´ –°–í–Ø–ó–ê–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò');
    console.log('   –î–µ–ø–æ–∑–∏—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Ñ–æ—Ä–º–µ');
  }
  
  // 6. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —É —Ç–µ–∫—É—â–µ–≥–æ)
  if (foundInTimeWindow === 0) {
    console.log('\n6Ô∏è‚É£ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –ü–û –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú');
    console.log('-'.repeat(60));
    
    const { data: allTimeTransactions, error: allTimeError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, amount_uni, description, created_at, metadata')
      .gte('created_at', searchStart.toISOString())
      .lte('created_at', searchEnd.toISOString())
      .order('created_at', { ascending: false });
    
    if (allTimeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', allTimeError.message);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ: ${allTimeTransactions?.length || 0}`);
      
      if (allTimeTransactions && allTimeTransactions.length > 0) {
        console.log('\nüìã –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –£–ö–ê–ó–ê–ù–ù–û–ï –í–†–ï–ú–Ø:');
        allTimeTransactions.forEach((tx, index) => {
          console.log(`${index + 1}. User: ${tx.user_id} | ID: ${tx.id}`);
          console.log(`   –í—Ä–µ–º—è: ${tx.created_at}`);
          console.log(`   –¢–∏–ø: ${tx.type}`);
          console.log(`   TON: ${tx.amount_ton || '0'} | UNI: ${tx.amount_uni || '0'}`);
          console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${(tx.description || '').substring(0, 50)}...`);
          console.log('   ---');
        });
      }
    }
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('üìã –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –î–ï–ü–û–ó–ò–¢–ê –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(80));
}

investigateSpecificTonDeposit().catch(console.error);