/**
 * –¢–µ—Å—Ç TON Boost —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ boost –ø–∞–∫–µ—Ç–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
 */

import { supabase } from './core/supabase.ts';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ boost –ø–∞–∫–µ—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
 */
async function checkExistingBoosts() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• BOOST –ü–ê–ö–ï–¢–û–í ===\n');
  
  const { data: boosts, error } = await supabase
    .from('boost_purchases')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost –ø–∞–∫–µ—Ç–æ–≤:', error.message);
    return [];
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${boosts?.length || 0} boost –ø–∞–∫–µ—Ç–æ–≤:`);
  boosts?.forEach(boost => {
    console.log(`  ID: ${boost.id}, User: ${boost.user_id}, Boost: ${boost.boost_id}, Status: ${boost.status}`);
  });
  
  return boosts || [];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π boost –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function createTestBoost(userId, boostId = 1) {
  console.log(`\n=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û BOOST –ü–ê–ö–ï–¢–ê ===\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('id, telegram_id, balance_ton')
    .eq('id', userId)
    .single();
    
  if (userError || !user) {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID ${user.id}, TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
  
  // –°–æ–∑–¥–∞–µ–º boost –ø–∞–∫–µ—Ç
  const boostPackage = {
    user_id: userId,
    boost_id: boostId,
    status: 'confirmed',
    is_active: true,
    start_date: new Date().toISOString(),
    end_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // +1 –≥–æ–¥
    total_earned: '0'
  };
  
  const { data: newBoost, error: boostError } = await supabase
    .from('boost_purchases')
    .insert(boostPackage)
    .select()
    .single();
    
  if (boostError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è boost –ø–∞–∫–µ—Ç–∞:', boostError.message);
    return null;
  }
  
  console.log(`‚úÖ Boost –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ID ${newBoost.id}`);
  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newBoost.user_id}`);
  console.log(`   Boost —Ç–∏–ø: ${newBoost.boost_id}`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${newBoost.status}`);
  
  return newBoost;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
async function testBoostScheduler() {
  console.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON BOOST –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===\n');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    const { tonBoostIncomeScheduler } = await import('./modules/scheduler/tonBoostIncomeScheduler.ts');
    
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const { data: usersBefore } = await supabase
      .from('users')
      .select('id, balance_ton')
      .in('id', [1, 4, 26, 23, 14])
      .order('id');
      
    console.log('\n–ë–∞–ª–∞–Ω—Å—ã TON –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
    usersBefore?.forEach(user => {
      console.log(`  User ${user.id}: ${parseFloat(user.balance_ton || 0).toFixed(6)} TON`);
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\n–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON Boost –¥–æ—Ö–æ–¥–æ–≤...');
    await tonBoostIncomeScheduler.processTonBoostIncome();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const { data: usersAfter } = await supabase
      .from('users')
      .select('id, balance_ton')
      .in('id', [1, 4, 26, 23, 14])
      .order('id');
      
    console.log('\n–ë–∞–ª–∞–Ω—Å—ã TON –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
    let totalIncrease = 0;
    usersAfter?.forEach(user => {
      const userBefore = usersBefore?.find(u => u.id === user.id);
      const before = parseFloat(userBefore?.balance_ton || 0);
      const after = parseFloat(user.balance_ton || 0);
      const increase = after - before;
      totalIncrease += increase;
      
      console.log(`  User ${user.id}: ${after.toFixed(6)} TON ${increase > 0 ? `(+${increase.toFixed(6)})` : ''}`);
    });
    
    console.log(`\nüí∞ –û–±—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${totalIncrease.toFixed(6)} TON`);
    
    return totalIncrease > 0;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function checkNewTransactions() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD —Å TON
  const { data: transactions, error } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'FARMING_REWARD')
    .gt('amount_ton', '0')
    .order('created_at', { ascending: false })
    .limit(5);
    
  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    return [];
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${transactions?.length || 0} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
  transactions?.forEach(tx => {
    console.log(`  ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON`);
    console.log(`  Description: ${tx.description}`);
    console.log(`  Created: ${new Date(tx.created_at).toLocaleString()}`);
    console.log('');
  });
  
  return transactions || [];
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTonBoostSystemTest() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON BOOST –°–ò–°–¢–ï–ú–´\n');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ boost –ø–∞–∫–µ—Ç—ã
    const existingBoosts = await checkExistingBoosts();
    
    // 2. –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
    if (!existingBoosts.some(b => b.status === 'confirmed' && b.is_active)) {
      console.log('\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π...');
      await createTestBoost(4, 1); // –°–æ–∑–¥–∞–µ–º Starter boost –¥–ª—è User 4
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    const schedulerWorked = await testBoostScheduler();
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const newTransactions = await checkNewTransactions();
    
    // 5. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${schedulerWorked ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è: ${newTransactions.length > 0 ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã: ${existingBoosts.filter(b => b.status === 'confirmed').length}`);
    
    if (schedulerWorked && newTransactions.length > 0) {
      console.log('\nüéâ TON BOOST –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
      console.log('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω—ã');
    } else {
      console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã');
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runTonBoostSystemTest();