import dotenv from 'dotenv';
import { SupabaseClient } from '@supabase/supabase-js';
dotenv.config();

// –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
async function createSupabaseClient() {
  const { createClient } = await import('@supabase/supabase-js');
  const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
  const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Supabase credentials not found in environment');
    return null;
  }
  
  return createClient(supabaseUrl, supabaseKey);
}

async function investigateDailyBonus() {
  const supabase = await createSupabaseClient();
  if (!supabase) return;

  console.log('üîç –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï DAILY BONUS - USER 74');
  console.log('=' . repeat(60));
  
  // 1. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\nüìä 1. –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('*')
    .eq('id', 74)
    .single();
    
  if (userError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
    return;
  }
  
  console.log(`  ID: ${user.id}`);
  console.log(`  Telegram ID: ${user.telegram_id}`);
  console.log(`  –ë–∞–ª–∞–Ω—Å UNI: ${user.balance_uni}`);
  console.log(`  –ë–∞–ª–∞–Ω—Å TON: ${user.balance_ton}`);
  console.log(`  Daily Bonus –ø–æ–ª—É—á–µ–Ω: ${user.daily_bonus_claimed_at || '–ù–ò–ö–û–ì–î–ê'}`);
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π daily_bonus
  console.log('\nüí∞ 2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò DAILY BONUS:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–∏–ø–∞
  const { data: dailyBonusTx, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .in('type', ['daily_bonus', 'DAILY_BONUS'])
    .order('created_at', { ascending: false });
    
  if (txError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
  } else {
    console.log(`  –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${dailyBonusTx?.length || 0}`);
    
    if (dailyBonusTx && dailyBonusTx.length > 0) {
      console.log('\n  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      dailyBonusTx.slice(0, 5).forEach(tx => {
        console.log(`    [${tx.created_at}]`);
        console.log(`      ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      –°—É–º–º–∞ UNI: ${tx.amount_uni}`);
        console.log(`      –°—É–º–º–∞ (amount): ${tx.amount}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      });
    }
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ daily_bonus_logs
  console.log('\nüìù 3. –õ–û–ì–ò DAILY BONUS:');
  
  const { data: logs, error: logError } = await supabase
    .from('daily_bonus_logs')
    .select('*')
    .eq('user_id', 74)
    .order('created_at', { ascending: false });
    
  if (logError) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${logError.message}`);
    console.log(`  –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${logs?.length || 0}`);
    
    if (logs && logs.length > 0) {
      console.log('\n  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏:');
      logs.slice(0, 3).forEach(log => {
        console.log(`    [${log.created_at}]`);
        console.log(`      –î–µ–Ω—å: ${log.day_count}`);
        console.log(`      –°—É–º–º–∞: ${log.bonus_amount} UNI`);
        console.log(`      –ë–∞–ª–∞–Ω—Å –¥–æ: ${log.previous_balance}`);
        console.log(`      –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${log.new_balance}`);
        console.log(`      –†–∞–∑–Ω–∏—Ü–∞: ${log.new_balance - log.previous_balance}`);
      });
    }
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤
  console.log('\nüìà 4. –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê 48 –ß–ê–°–û–í:');
  
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
  
  const { data: allTx, error: allTxError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .gte('created_at', twoDaysAgo.toISOString())
    .order('created_at', { ascending: false });
    
  if (allTxError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTxError);
  } else {
    console.log(`  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTx?.length || 0}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const txByType: Record<string, number> = {};
    allTx?.forEach(tx => {
      txByType[tx.type] = (txByType[tx.type] || 0) + 1;
    });
    
    console.log('\n  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:');
    Object.entries(txByType).forEach(([type, count]) => {
      console.log(`    ${type}: ${count}`);
    });
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ/race conditions
  console.log('\nüîÑ 5. –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:');
  
  if (dailyBonusTx && dailyBonusTx.length > 1) {
    const grouped: Record<string, typeof dailyBonusTx> = {};
    
    dailyBonusTx.forEach(tx => {
      const date = tx.created_at.split('T')[0];
      if (!grouped[date]) grouped[date] = [];
      grouped[date].push(tx);
    });
    
    Object.entries(grouped).forEach(([date, txs]) => {
      if (txs.length > 1) {
        console.log(`  ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! ${date}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ–¥–∏–Ω –¥–µ–Ω—å`);
        txs.forEach(tx => {
          console.log(`    - ${tx.created_at}: ${tx.amount_uni} UNI`);
        });
      }
    });
  } else {
    console.log('  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
  }
  
  // 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  console.log('\nüìä 6. –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
  
  const lastClaim = user.daily_bonus_claimed_at ? new Date(user.daily_bonus_claimed_at) : null;
  const now = new Date();
  const hoursSinceLastClaim = lastClaim ? (now.getTime() - lastClaim.getTime()) / (1000 * 60 * 60) : null;
  
  console.log(`  –ü–æ—Å–ª–µ–¥–Ω–∏–π claim: ${lastClaim ? lastClaim.toLocaleString('ru-RU') : '–ù–ò–ö–û–ì–î–ê'}`);
  console.log(`  –ß–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ claim: ${hoursSinceLastClaim?.toFixed(1) || 'N/A'}`);
  console.log(`  –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π: ${!lastClaim || hoursSinceLastClaim! >= 24 ? '–î–ê' : '–ù–ï–¢'}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –±–∞–ª–∞–Ω—Å–∞
  const totalDailyBonusAmount = dailyBonusTx?.reduce((sum, tx) => sum + (tx.amount_uni || 0), 0) || 0;
  console.log(`\n  –°—É–º–º–∞ –≤—Å–µ—Ö daily bonus —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalDailyBonusAmount} UNI`);
  
  console.log('\n' + '=' . repeat(60));
  console.log('–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

investigateDailyBonus().catch(console.error);