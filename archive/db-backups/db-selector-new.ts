/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - Neon DB (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞) - PRODUCTION –†–ï–ñ–ò–ú
 * - PostgreSQL Replit (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) - DEVELOPMENT –†–ï–ñ–ò–ú
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –í production —Ä–µ–∂–∏–º–µ (NODE_ENV=production) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Neon DB
 * - –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ start-with-neon.sh, start-with-neon-db.js –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Neon DB
 * - –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ start-with-replit-db.js –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Replit PostgreSQL
 */

import * as neonDB from './db';
import * as replitDB from './db-replit';

// –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
export type DatabaseProvider = 'neon' | 'replit';

// –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export type TestConnectionResult = boolean | { 
  success: boolean; 
  timestamp?: any; 
  message?: string; 
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —Ö—Ä–∞–Ω—è—â–∞—è —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
let currentDatabaseProvider: DatabaseProvider;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

// –§–û–†–°–ò–†–û–í–ê–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï NEON DB [OVERRIDE]
const determineProvider = (): DatabaseProvider => {
  console.log('[DB-Selector] üöÄ –§–û–†–°–ò–†–û–í–ê–ù–ò–ï NEON DB (override-db-provider.cjs)');
  return 'neon';
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
currentDatabaseProvider = determineProvider();

console.log(`[DB-Selector] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${currentDatabaseProvider}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
const getSelectedModule = () => {
  if (currentDatabaseProvider === 'neon') {
    console.log(`[DB-Selector] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è Neon DB`);
    return neonDB;
  } else {
    console.log(`[DB-Selector] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è Replit PostgreSQL`);
    return replitDB;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç—ã, –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
export let pool = getSelectedModule().pool;
export let db = getSelectedModule().db;
export let query = getSelectedModule().query;
export let queryWithRetry = getSelectedModule().queryWithRetry;
export let dbConnectionStatus = getSelectedModule().dbConnectionStatus;
export let testDatabaseConnection: () => Promise<TestConnectionResult> = getSelectedModule().testDatabaseConnection;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
const updateExports = () => {
  const module = getSelectedModule();
  pool = module.pool;
  db = module.db;
  query = module.query;
  queryWithRetry = module.queryWithRetry;
  dbConnectionStatus = module.dbConnectionStatus;
  testDatabaseConnection = module.testDatabaseConnection as () => Promise<TestConnectionResult>;
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
export const setDatabaseProvider = (provider: DatabaseProvider): void => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const forceNeonDb = process.env.FORCE_NEON_DB === 'true';
  const useLocalDbOnly = process.env.USE_LOCAL_DB_ONLY === 'true';
  
  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
  if (forceNeonDb && provider !== 'neon') {
    console.log(`[DB-Selector] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ ${provider} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (FORCE_NEON_DB=true)`);
    currentDatabaseProvider = 'neon';
  } else if (useLocalDbOnly && provider !== 'replit') {
    console.log(`[DB-Selector] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ ${provider} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (USE_LOCAL_DB_ONLY=true)`);
    currentDatabaseProvider = 'replit';
  } else {
    console.log(`[DB-Selector] –ü—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${provider}`);
    currentDatabaseProvider = provider;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã
  updateExports();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const getCurrentProvider = (): DatabaseProvider => {
  return currentDatabaseProvider;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const testConnection = async (): Promise<boolean> => {
  try {
    const result: TestConnectionResult = await testDatabaseConnection();
    const connected = typeof result === 'boolean' ? result : result.success;
    
    if (connected) {
      console.log(`[DB-Selector] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ${currentDatabaseProvider} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      if (typeof result !== 'boolean' && result.message) {
        console.log(`[DB-Selector] ${result.message}`);
      }
    } else {
      console.error(`[DB-Selector] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${currentDatabaseProvider}`);
      if (typeof result !== 'boolean' && result.message) {
        console.error(`[DB-Selector] ${result.message}`);
      }
    }
    return connected;
  } catch (error) {
    console.error(`[DB-Selector] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:`, error);
    return false;
  }
};