import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const SUPABASE_URL = process.env.SUPABASE_URL!;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function diagnoseBalanceDisappearance() {
  console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—á–µ–º—É –±–∞–ª–∞–Ω—Å –∏—Å—á–µ–∑–∞–µ—Ç –∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è?');
  console.log('='.repeat(70));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);

  const userId = 25; // User ID 25 —Å –ø—Ä–æ–±–ª–µ–º–æ–π

  try {
    // 1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('balance_ton, balance_uni, updated_at')
      .eq('id', userId)
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }

    console.log('\nüìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –í –ë–î:');
    console.log(`   TON: ${user.balance_ton}`);
    console.log(`   UNI: ${user.balance_uni}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.updated_at || 'N/A'}`);

    // 2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 10 –º–∏–Ω—É—Ç
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    
    const { data: recentTx, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false });

    console.log('\nüìù –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (10 –º–∏–Ω—É—Ç):');
    if (recentTx && recentTx.length > 0) {
      recentTx.forEach(tx => {
        const time = new Date(tx.created_at).toLocaleTimeString('ru-RU');
        console.log(`   ${time}: ${tx.type} ${tx.amount} ${tx.currency} (ID: ${tx.id})`);
      });
    } else {
      console.log('   –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: allTx, error: allTxError } = await supabase
      .from('transactions')
      .select('amount, currency, type')
      .eq('user_id', userId)
      .eq('status', 'completed');

    let calculatedTonBalance = 0;
    let calculatedUniBalance = 0;

    if (allTx) {
      allTx.forEach(tx => {
        const amount = parseFloat(tx.amount);
        const isIncome = [
          'FARMING_REWARD', 'REFERRAL_REWARD', 'TON_DEPOSIT', 
          'UNI_DEPOSIT', 'MISSION_REWARD', 'DAILY_BONUS'
        ].includes(tx.type);
        
        const isExpense = [
          'WITHDRAWAL', 'BOOST_PURCHASE', 'BOOST_PAYMENT'
        ].includes(tx.type);

        if (tx.currency === 'TON') {
          if (isIncome) calculatedTonBalance += amount;
          if (isExpense) calculatedTonBalance -= amount;
        } else if (tx.currency === 'UNI') {
          if (isIncome) calculatedUniBalance += amount;
          if (isExpense) calculatedUniBalance -= amount;
        }
      });
    }

    console.log('\nüßÆ –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–° (—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):');
    console.log(`   TON: ${calculatedTonBalance.toFixed(6)} (–ë–î: ${user.balance_ton})`);
    console.log(`   UNI: ${calculatedUniBalance.toFixed(6)} (–ë–î: ${user.balance_uni})`);
    
    const tonDiff = Math.abs(parseFloat(user.balance_ton) - calculatedTonBalance);
    const uniDiff = Math.abs(parseFloat(user.balance_uni) - calculatedUniBalance);
    
    if (tonDiff > 0.01) {
      console.log(`\nüö® –†–ê–°–•–û–ñ–î–ï–ù–ò–ï TON: ${tonDiff.toFixed(6)}`);
    }
    if (uniDiff > 0.01) {
      console.log(`\nüö® –†–ê–°–•–û–ñ–î–ï–ù–ò–ï UNI: ${uniDiff.toFixed(6)}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    console.log('\n‚öôÔ∏è –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:');
    console.log('1. ‚ùå UnifiedTransactionService.updateUserBalance() - –û–¢–ö–õ–Æ–ß–ï–ù');
    console.log('   ‚Üí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –Ω–æ –±–∞–ª–∞–Ω—Å –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('2. ‚ùå TransactionsService.recalculateUserBalance() - –û–¢–ö–õ–Æ–ß–ï–ù');
    console.log('   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    console.log('3. ‚ö†Ô∏è  WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('4. ‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–µ—à (10 —Å–µ–∫) –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏');
    console.log('5. ‚ö†Ô∏è  Race condition –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');

    // 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n‚è±Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô (30 —Å–µ–∫—É–Ω–¥)...');
    
    let previousTonBalance = parseFloat(user.balance_ton);
    let previousUniBalance = parseFloat(user.balance_uni);
    let changeDetected = false;

    const monitorInterval = setInterval(async () => {
      const { data: currentUser } = await supabase
        .from('users')
        .select('balance_ton, balance_uni')
        .eq('id', userId)
        .single();

      if (currentUser) {
        const currentTon = parseFloat(currentUser.balance_ton);
        const currentUni = parseFloat(currentUser.balance_uni);

        if (Math.abs(currentTon - previousTonBalance) > 0.000001 ||
            Math.abs(currentUni - previousUniBalance) > 0.000001) {
          changeDetected = true;
          console.log(`\nüîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û –≤ ${new Date().toLocaleTimeString('ru-RU')}:`);
          console.log(`   TON: ${previousTonBalance} ‚Üí ${currentTon} (${currentTon > previousTonBalance ? '+' : ''}${(currentTon - previousTonBalance).toFixed(6)})`);
          console.log(`   UNI: ${previousUniBalance} ‚Üí ${currentUni} (${currentUni > previousUniBalance ? '+' : ''}${(currentUni - previousUniBalance).toFixed(6)})`);
          
          previousTonBalance = currentTon;
          previousUniBalance = currentUni;
        }
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      clearInterval(monitorInterval);
      if (!changeDetected) {
        console.log('\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
      }
      console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    }, 30000);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseBalanceDisappearance();