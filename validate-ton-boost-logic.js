/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
 */

console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤');
console.log('=====================================');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
const TON_BOOST_PACKAGES = {
  1: {
    name: "Starter Boost",
    price_ton: 1,
    bonus_uni: 10000,
    daily_rate: 0.005 // 0.5% –≤ –¥–µ–Ω—å
  },
  2: {
    name: "Standard Boost", 
    price_ton: 5,
    bonus_uni: 75000,
    daily_rate: 0.01 // 1% –≤ –¥–µ–Ω—å
  },
  3: {
    name: "Advanced Boost",
    price_ton: 15,
    bonus_uni: 250000, 
    daily_rate: 0.02 // 2% –≤ –¥–µ–Ω—å
  },
  4: {
    name: "Premium Boost",
    price_ton: 25,
    bonus_uni: 500000,
    daily_rate: 0.025 // 2.5% –≤ –¥–µ–Ω—å
  }
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∑–∞ —Å–µ–∫—É–Ω–¥—É
function calculateTonRatePerSecond(tonAmount, packageId) {
  const config = TON_BOOST_PACKAGES[packageId];
  if (!config) return "0";

  const amount = parseFloat(tonAmount);
  const dailyRate = config.daily_rate;
  
  const secondsInDay = 24 * 60 * 60; // 86400
  const ratePerSecond = (amount * dailyRate) / secondsInDay;
  
  return ratePerSecond.toFixed(18);
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
function calculateDailyIncome(tonAmount, packageId) {
  const config = TON_BOOST_PACKAGES[packageId];
  if (!config) return "0";

  const amount = parseFloat(tonAmount);
  const dailyIncome = amount * config.daily_rate;
  
  return dailyIncome.toFixed(8);
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
console.log('\nüì¶ –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤');

Object.entries(TON_BOOST_PACKAGES).forEach(([id, config]) => {
  console.log(`–ü–∞–∫–µ—Ç ${id}: ${config.name}`);
  console.log(`  –°—Ç–æ–∏–º–æ—Å—Ç—å: ${config.price_ton} TON`);
  console.log(`  –ë–æ–Ω—É—Å: ${config.bonus_uni.toLocaleString()} UNI`);
  console.log(`  –°—Ç–∞–≤–∫–∞: ${(config.daily_rate * 100).toFixed(1)}% –≤ –¥–µ–Ω—å`);
  console.log('');
});

// –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
console.log('üí∞ –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –ø–∞–∫–µ—Ç–∞–º');

Object.entries(TON_BOOST_PACKAGES).forEach(([id, config]) => {
  const packageId = parseInt(id);
  const tonAmount = config.price_ton.toString();
  
  const dailyIncome = calculateDailyIncome(tonAmount, packageId);
  const ratePerSecond = calculateTonRatePerSecond(tonAmount, packageId);
  
  console.log(`${config.name} (${config.price_ton} TON):`);
  console.log(`  –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyIncome} TON`);
  console.log(`  –î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É: ${ratePerSecond} TON`);
  console.log(`  –°—Ç–∞–≤–∫–∞: ${(config.daily_rate * 100).toFixed(1)}% –≤ –¥–µ–Ω—å`);
  console.log('');
});

// –¢–µ—Å—Ç 3: –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–æ–≤
console.log('üîÑ –¢–µ—Å—Ç 3: –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–æ–≤');

console.log('–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤');
console.log('');

// –î–µ–ø–æ–∑–∏—Ç 1: Starter Boost (1 TON)
const deposit1_amount = "1";
const deposit1_package = 1;
const deposit1_daily = calculateDailyIncome(deposit1_amount, deposit1_package);

console.log(`–î–µ–ø–æ–∑–∏—Ç 1: ${TON_BOOST_PACKAGES[1].name}`);
console.log(`  –°—É–º–º–∞: ${deposit1_amount} TON`);
console.log(`  –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${deposit1_daily} TON (0.5%)`);

// –î–µ–ø–æ–∑–∏—Ç 2: Premium Boost (25 TON)
const deposit2_amount = "25";
const deposit2_package = 4;
const deposit2_daily = calculateDailyIncome(deposit2_amount, deposit2_package);

console.log(`–î–µ–ø–æ–∑–∏—Ç 2: ${TON_BOOST_PACKAGES[4].name}`);
console.log(`  –°—É–º–º–∞: ${deposit2_amount} TON`);
console.log(`  –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${deposit2_daily} TON (2.5%)`);

const totalDaily = parseFloat(deposit1_daily) + parseFloat(deposit2_daily);
console.log(`\n–û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${totalDaily.toFixed(8)} TON`);
console.log('–ö–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–≤–æ–µ–π —Å—Ç–∞–≤–∫–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ!');

// –¢–µ—Å—Ç 4: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å TON Boost
console.log('\nüéØ –¢–µ—Å—Ç 4: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å TON Boost –¥–æ—Ö–æ–¥–æ–≤');

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
const REFERRAL_RATES = {
  1: 1.00,   // 100% —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
  2: 0.02,   // 2% —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
  3: 0.03,   // 3% —Å —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
};

const farmingIncome = totalDaily; // –î–æ—Ö–æ–¥ –æ—Ç TON Boost —Ñ–∞—Ä–º–∏–Ω–≥–∞
console.log(`–î–æ—Ö–æ–¥ –æ—Ç TON Boost —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farmingIncome.toFixed(8)} TON`);
console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã:');

Object.entries(REFERRAL_RATES).forEach(([level, rate]) => {
  const bonus = farmingIncome * rate;
  const percentage = level === '1' ? '100%' : `${(rate * 100).toFixed(0)}%`;
  console.log(`  –£—Ä–æ–≤–µ–Ω—å ${level}: ${bonus.toFixed(8)} TON (${percentage})`);
});

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ—Å—è—Ü
console.log('\nüìÖ –¢–µ—Å—Ç 5: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ –º–µ—Å—è—Ü (30 –¥–Ω–µ–π)');

Object.entries(TON_BOOST_PACKAGES).forEach(([id, config]) => {
  const packageId = parseInt(id);
  const tonAmount = config.price_ton.toString();
  const dailyIncome = parseFloat(calculateDailyIncome(tonAmount, packageId));
  const monthlyIncome = dailyIncome * 30;
  const monthlyPercentage = (monthlyIncome / config.price_ton) * 100;
  
  console.log(`${config.name}:`);
  console.log(`  –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${config.price_ton} TON`);
  console.log(`  –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: ${monthlyIncome.toFixed(8)} TON`);
  console.log(`  –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${monthlyPercentage.toFixed(1)}% –∑–∞ –º–µ—Å—è—Ü`);
  console.log('');
});

console.log('‚úÖ –õ–æ–≥–∏–∫–∞ TON Boost –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:');
console.log('üéØ –°—Ç–∞–≤–∫–∏: 0.5%, 1%, 2%, 2.5% –≤ –¥–µ–Ω—å');
console.log('üîÑ –ö–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ');
console.log('üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å –¥–æ—Ö–æ–¥–æ–≤');

process.exit(0);