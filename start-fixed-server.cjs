/**
 * –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô REFERRALSERVICE
 * –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

require('dotenv').config();
const { exec } = require('child_process');

async function startFixedServer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π...');
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  exec('pkill -f "tsx.*server" || true', () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
      const serverProcess = exec('tsx server/index.ts', {
        cwd: '/home/runner/workspace',
        stdio: 'inherit'
      });
      
      serverProcess.stdout?.on('data', (data) => {
        console.log('üì° SERVER:', data.toString());
      });
      
      serverProcess.stderr?.on('data', (data) => {
        console.error('‚ùå SERVER ERROR:', data.toString());
      });
      
      serverProcess.on('close', (code) => {
        console.log(`üîö –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
      });
      
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID:', serverProcess.pid, ')');
      
      // –¢–µ—Å—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API...');
        
        const { spawn } = require('child_process');
        const testProcess = spawn('curl', [
          '-X', 'GET',
          'http://localhost:3000/api/v2/referrals/debug-stats',
          '-H', 'Content-Type: application/json'
        ]);
        
        let output = '';
        testProcess.stdout.on('data', (data) => {
          output += data.toString();
        });
        
        testProcess.on('close', (code) => {
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:');
          console.log(output || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
          
          if (output.includes('total_uni_earned')) {
            console.log('‚úÖ API –†–ê–ë–û–¢–ê–ï–¢! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
          } else {
            console.log('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
          }
        });
        
      }, 10000);
      
    }, 2000);
  });
}

startFixedServer();