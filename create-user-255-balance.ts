#!/usr/bin/env tsx
/**
 * üõ†Ô∏è –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –ë–ê–õ–ê–ù–°–ê –î–õ–Ø USER 255
 * –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_balances —Å —É—á–µ—Ç–æ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { supabase } from './core/supabase';

async function createUser255Balance() {
  console.log('üõ†Ô∏è –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –ë–ê–õ–ê–ù–°–ê –î–õ–Ø USER 255');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 255)
      .single();
      
    if (userError || !user) {
      console.log('‚ùå User 255 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users');
      console.log('–û—à–∏–±–∫–∞:', userError?.message);
      return;
    }
    
    console.log('‚úÖ User 255 –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Telegram ID: ${user.telegram_id}`);
    console.log(`   Username: ${user.username}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê:');
    
    const { data: existingBalance } = await supabase
      .from('user_balances')
      .select('*')
      .eq('user_id', 255)
      .single();
      
    if (existingBalance) {
      console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(`   UNI: ${existingBalance.uni_balance}`);
      console.log(`   TON: ${existingBalance.ton_balance}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${existingBalance.updated_at}`);
      console.log('');
      console.log('ü§î –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º...');
      return;
    }
    
    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
    
    // 3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User 255
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í USER 255:');
    
    const { data: allDeposits } = await supabase
      .from('transactions')
      .select('amount_ton, created_at, status, description')
      .eq('user_id', 255)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .eq('currency', 'TON')
      .eq('status', 'completed')
      .order('created_at', { ascending: false });
      
    let totalDeposited = 0;
    if (allDeposits && allDeposits.length > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${allDeposits.length}`);
      
      allDeposits.forEach((tx, i) => {
        const amount = parseFloat(tx.amount_ton);
        totalDeposited += amount;
        console.log(`   ${i + 1}. ${amount} TON - ${tx.created_at.slice(0, 19)}`);
      });
      
      console.log(`\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposited} TON`);
    } else {
      console.log('üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // 4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–ê–î USER 255:');
    
    const { data: rewards } = await supabase
      .from('transactions')
      .select('amount_ton, amount_uni, currency, type, created_at')
      .eq('user_id', 255)
      .in('type', ['FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'])
      .eq('status', 'completed')
      .order('created_at', { ascending: false })
      .limit(20);
      
    let totalUniRewards = 0;
    let totalTonRewards = 0;
    
    if (rewards && rewards.length > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${rewards.length} (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)`);
      
      rewards.forEach((tx) => {
        if (tx.currency === 'UNI' && tx.amount_uni) {
          totalUniRewards += parseFloat(tx.amount_uni);
        } else if (tx.currency === 'TON' && tx.amount_ton) {
          totalTonRewards += parseFloat(tx.amount_ton);
        }
      });
      
      console.log(`\nüéÅ –°—É–º–º–∞—Ä–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):`);
      console.log(`   UNI: ${totalUniRewards.toFixed(6)}`);
      console.log(`   TON: ${totalTonRewards.toFixed(6)}`);
    }
    
    // 5. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞
    console.log('\n5Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –ë–ê–õ–ê–ù–°–ê:');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å: –¥–µ–ø–æ–∑–∏—Ç—ã + –Ω–∞–≥—Ä–∞–¥—ã
    const uniBalance = totalUniRewards;
    const tonBalance = 2.60; // –ö–∞–∫ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + totalDeposited + totalTonRewards;
    
    console.log(`\nüí∞ –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å:`);
    console.log(`   UNI: ${uniBalance.toFixed(6)} (–Ω–∞–≥—Ä–∞–¥—ã)`);
    console.log(`   TON: ${tonBalance.toFixed(6)} (–∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞)`);
    
    const { data: newBalance, error: balanceError } = await supabase
      .from('user_balances')
      .insert({
        user_id: 255,
        uni_balance: uniBalance,
        ton_balance: tonBalance,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
      
    if (balanceError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError.message);
      return;
    }
    
    console.log('\n‚úÖ –ë–ê–õ–ê–ù–° –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!');
    console.log(`   ID –∑–∞–ø–∏—Å–∏: ${newBalance.id}`);
    console.log(`   User ID: ${newBalance.user_id}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${newBalance.uni_balance}`);
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${newBalance.ton_balance}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${newBalance.created_at}`);
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    
    const { data: verifyBalance } = await supabase
      .from('user_balances')
      .select('*')
      .eq('user_id', 255)
      .single();
      
    if (verifyBalance) {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:');
      console.log(`   UNI: ${verifyBalance.uni_balance}`);
      console.log(`   TON: ${verifyBalance.ton_balance}`);
      console.log('');
      console.log('üéâ –¢–µ–ø–µ—Ä—å User 255 –º–æ–∂–µ—Ç:');
      console.log('   ‚úÖ –ü–æ–ª—É—á–∞—Ç—å TON –¥–µ–ø–æ–∑–∏—Ç—ã');
      console.log('   ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å TON Boost');
      console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞');
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('='.repeat(80));
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:', error);
  }
}

createUser255Balance().catch(console.error);