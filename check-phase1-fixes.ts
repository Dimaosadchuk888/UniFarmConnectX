/**
 * Phase 1 Fix Verification Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ Phase 1
 */

import { supabase } from './core/supabase.js';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Phase 1...\n');

async function checkPhase1Fixes() {
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (double parseFloat fix)...');
  const { data: boostTransactions, error: boostError } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'BOOST_PURCHASE')
    .order('created_at', { ascending: false })
    .limit(5);

  if (boostError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', boostError);
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostTransactions?.length} BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    boostTransactions?.forEach(tx => {
      const amount = parseFloat(tx.amount);
      console.log(`   - ID ${tx.id}: ${amount} ${tx.currency} (${amount > 0 ? '‚úÖ –°—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' : '‚ùå –°—É–º–º–∞ = 0'})`);
    });
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (transaction creation fix)...');
  const { data: tonDeposits, error: tonError } = await supabase
    .from('transactions')
    .select('*')
    .in('type', ['TON_DEPOSIT', 'FARMING_DEPOSIT'])
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(5);

  if (tonError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', tonError);
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonDeposits?.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    tonDeposits?.forEach(tx => {
      console.log(`   - ID ${tx.id}: ${tx.type} - ${tx.amount} TON`);
    });
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ farming_balance –≤ ton_farming_data
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ farming_balance –≤ ton_farming_data...');
  const { data: tonFarmingData, error: farmingError } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, boost_active, boost_package_id')
    .eq('boost_active', true)
    .limit(10);

  if (farmingError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ton_farming_data:', farmingError);
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonFarmingData?.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    tonFarmingData?.forEach(user => {
      const balance = parseFloat(user.farming_balance || '0');
      console.log(`   - User ${user.user_id}: farming_balance = ${balance} (${balance > 0 ? '‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ë–∞–ª–∞–Ω—Å = 0'})`);
    });
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
  const { data: farmingRewards, error: rewardsError } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'FARMING_REWARD')
    .order('created_at', { ascending: false })
    .limit(10);

  if (rewardsError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ farming rewards:', rewardsError);
  } else {
    const lastRewardTime = farmingRewards?.[0]?.created_at;
    const timeSinceLastReward = lastRewardTime 
      ? Math.floor((Date.now() - new Date(lastRewardTime).getTime()) / 1000 / 60)
      : null;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingRewards?.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö farming rewards`);
    if (timeSinceLastReward !== null) {
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${timeSinceLastReward} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ ${timeSinceLastReward > 10 ? '‚ö†Ô∏è' : '‚úÖ'}`);
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
    const uniRewards = farmingRewards?.filter(r => r.currency === 'UNI').length || 0;
    const tonRewards = farmingRewards?.filter(r => r.currency === 'TON').length || 0;
    console.log(`   - UNI rewards: ${uniRewards}`);
    console.log(`   - TON rewards: ${tonRewards}`);
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ TransactionHistory UI
  console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata –¥–ª—è TransactionHistory UI...');
  const { data: recentTx, error: txError } = await supabase
    .from('transactions')
    .select('id, type, metadata, description')
    .order('created_at', { ascending: false })
    .limit(5);

  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
  } else {
    console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å metadata:');
    recentTx?.forEach(tx => {
      const hasMetadata = tx.metadata && Object.keys(tx.metadata).length > 0;
      console.log(`   - ${tx.type}: ${hasMetadata ? '‚úÖ metadata –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '‚ùå metadata –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      if (hasMetadata && tx.metadata.original_type) {
        console.log(`     original_type: ${tx.metadata.original_type}`);
      }
    });
  }

  console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ Phase 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

checkPhase1Fixes().catch(console.error);