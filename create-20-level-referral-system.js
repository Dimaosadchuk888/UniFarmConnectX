/**
 * –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –î–õ–Ø USER_ID=48
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã UniFarm
 */

import { createClient } from '@supabase/supabase-js';

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function create20LevelReferralSystem() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üéØ –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60));
  
  const baseUserId = 48; // user_id=48 - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const baseUrl = 'http://localhost:3000';
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: baseUser, error: baseUserError } = await supabase
    .from('users')
    .select('ref_code, username')
    .eq('id', baseUserId)
    .single();
  
  if (baseUserError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', baseUserError.message);
    return;
  }
  
  console.log(`üìä –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${baseUser.username} (ID: ${baseUserId})`);
  console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${baseUser.ref_code}`);
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const createdUsers = [];
  let lastRefCode = baseUser.ref_code;
  
  console.log('\nüèóÔ∏è –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –°–¢–†–£–ö–¢–£–†–´:');
  console.log('-'.repeat(60));
  
  for (let level = 1; level <= 20; level++) {
    console.log(`\nüìç –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è ${level}:`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = 777777000 + level; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ telegram_id
    const username = `partner_level_${level}`;
    const firstName = `–ü–∞—Ä—Ç–Ω–µ—Ä`;
    const lastName = `–£—Ä–æ–≤–µ–Ω—å${level}`;
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const registrationData = {
        telegram_id: telegramId,
        username: username,
        first_name: firstName,
        last_name: lastName,
        referrer_ref_code: lastRefCode // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ä–µ—Ñ-–∫–æ–¥—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      };
      
      console.log(`   üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${username} (telegram_id: ${telegramId})`);
      console.log(`   üîó –ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É: ${lastRefCode}`);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      const registrationResponse = await fetch(`${baseUrl}/api/v2/auth/register/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(registrationData)
      });
      
      if (!registrationResponse.ok) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registrationResponse.status}`);
        continue;
      }
      
      const registrationResult = await registrationResponse.json();
      
      if (!registrationResult.success) {
        console.log(`   ‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞:`, registrationResult.error);
        continue;
      }
      
      const newUserId = registrationResult.data.user.id;
      const newRefCode = registrationResult.data.user.ref_code;
      
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${newUserId}`);
      console.log(`   üîó –ù–æ–≤—ã–π —Ä–µ—Ñ-–∫–æ–¥: ${newRefCode}`);
      
      // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å: 100 UNI –∏ 100 TON
      console.log(`   üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...`);
      
      const { data: balanceUpdate, error: balanceError } = await supabase
        .from('users')
        .update({
          balance_uni: '100',
          balance_ton: '100'
        })
        .eq('id', newUserId)
        .select()
        .single();
      
      if (balanceError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:`, balanceError.message);
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: 100 UNI + 100 TON`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      console.log(`   üìà –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...`);
      
      // UNI –¥–µ–ø–æ–∑–∏—Ç
      const { data: uniDeposit, error: uniDepositError } = await supabase
        .from('users')
        .update({
          uni_deposit_amount: '50',
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_rate: '0.01'
        })
        .eq('id', newUserId)
        .select()
        .single();
      
      if (!uniDepositError) {
        console.log(`   ‚úÖ UNI –¥–µ–ø–æ–∑–∏—Ç: 50 UNI (—Å—Ç–∞–≤–∫–∞ 1%)`);
      }
      
      // TON Boost –ø–∞–∫–µ—Ç
      const { data: tonBoost, error: tonBoostError } = await supabase
        .from('users')
        .update({
          ton_boost_package: '1',
          ton_boost_rate: '0.01',
          ton_boost_start_timestamp: new Date().toISOString()
        })
        .eq('id', newUserId)
        .select()
        .single();
      
      if (!tonBoostError) {
        console.log(`   ‚úÖ TON Boost: –ü–∞–∫–µ—Ç 1 (—Å—Ç–∞–≤–∫–∞ 1%)`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const transactions = [
        {
          user_id: newUserId,
          type: 'FARMING_REWARD',
          amount_uni: '0.5',
          description: `UNI farming deposit: 50 UNI`,
          status: 'completed'
        },
        {
          user_id: newUserId,
          type: 'FARMING_REWARD',
          amount_ton: '0.5',
          description: `TON Boost activation: Package 1`,
          status: 'completed'
        }
      ];
      
      const { data: createdTransactions, error: transactionError } = await supabase
        .from('transactions')
        .insert(transactions)
        .select();
      
      if (!transactionError) {
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      createdUsers.push({
        level: level,
        user_id: newUserId,
        telegram_id: telegramId,
        username: username,
        ref_code: newRefCode,
        referrer_ref_code: lastRefCode,
        balance_uni: '100',
        balance_ton: '100',
        uni_deposit: '50',
        ton_boost_package: '1'
      });
      
      // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–æ–¥—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      lastRefCode = newRefCode;
      
      console.log(`   üéØ –£—Ä–æ–≤–µ–Ω—å ${level} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è ${level}:`, error.message);
      continue;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüìä –°–í–û–î–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´:');
  console.log('='.repeat(60));
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${createdUsers.length}/20`);
  console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏:\n`);
  
  console.log('–£—Ä–æ–≤–µ–Ω—å | User ID | Username        | Ref Code                     | Referrer Code');
  console.log('-'.repeat(85));
  console.log(`   0     |   ${baseUserId}   | ${baseUser.username.padEnd(15)} | ${baseUser.ref_code} | (–æ—Å–Ω–æ–≤–Ω–æ–π)`);
  
  createdUsers.forEach(user => {
    console.log(`   ${user.level.toString().padStart(2)}     | ${user.user_id.toString().padStart(7)} | ${user.username.padEnd(15)} | ${user.ref_code} | ${user.referrer_ref_code}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô:');
  console.log('-'.repeat(60));
  
  for (const user of createdUsers.slice(0, 5)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const { data: referralCheck, error: referralError } = await supabase
      .from('users')
      .select('id, username, referred_by, ref_code')
      .eq('id', user.user_id)
      .single();
    
    if (!referralError && referralCheck) {
      console.log(`‚úÖ ${user.username}: referred_by = ${referralCheck.referred_by || 'NULL'}`);
    }
  }
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
  console.log('\n‚ö° –ê–ö–¢–ò–í–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´:');
  console.log('-'.repeat(60));
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    for (const user of createdUsers.slice(0, 3)) { // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —É—Ä–æ–≤–Ω—è
      console.log(`üí∞ –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –¥–ª—è ${user.username}...`);
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { data: farmingTransaction, error: farmingError } = await supabase
        .from('transactions')
        .insert([{
          user_id: user.user_id,
          type: 'FARMING_REWARD',
          amount_uni: '1.0',
          description: `UNI farming income: 1.0 UNI (rate: 0.01)`,
          status: 'completed'
        }])
        .select()
        .single();
      
      if (!farmingError) {
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–∞—Ä–º–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${farmingTransaction.id}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await supabase
          .from('users')
          .update({
            balance_uni: (parseFloat(user.balance_uni) + 1.0).toString()
          })
          .eq('id', user.user_id);
        
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: +1.0 UNI`);
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error.message);
  }
  
  console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô –î–õ–Ø USER_ID=48:');
  console.log('-'.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: referralTransactions, error: refTxError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', baseUserId)
    .ilike('description', '%referral%')
    .order('created_at', { ascending: false })
    .limit(10);
  
  if (!refTxError && referralTransactions?.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralTransactions.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:`);
    referralTransactions.forEach((tx, idx) => {
      console.log(`   ${idx + 1}. ID: ${tx.id} | ${tx.amount_uni || tx.amount_ton} ${tx.amount_uni ? 'UNI' : 'TON'} | ${tx.description}`);
    });
  } else {
    console.log('üìù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)');
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  console.log('\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(60));
  
  const { data: finalStats, error: statsError } = await supabase
    .from('users')
    .select('id, username, balance_uni, balance_ton, referred_by')
    .in('id', createdUsers.map(u => u.user_id))
    .order('id');
  
  if (!statsError) {
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${finalStats.length}`);
    console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å UNI: ${finalStats.reduce((sum, u) => sum + parseFloat(u.balance_uni || 0), 0)} UNI`);
    console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å TON: ${finalStats.reduce((sum, u) => sum + parseFloat(u.balance_ton || 0), 0)} TON`);
    console.log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referrer: ${finalStats.filter(u => u.referred_by).length}`);
  }
  
  console.log('\n‚úÖ –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
  console.log('üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã');
  
  return createdUsers;
}

create20LevelReferralSystem().catch(console.error);