#!/usr/bin/env tsx

/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê WITHDRAWAL ENDPOINT
 * –î–∞—Ç–∞: 28.07.2025 - –ü–æ–∏—Å–∫ –ø—Ä–∏—á–∏–Ω—ã 404 –æ—à–∏–±–∫–∏
 */

import fetch from 'node-fetch';

console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê WITHDRAWAL ENDPOINT');
console.log('='.repeat(80));

async function testAllEndpointVariants() {
  console.log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –í–ê–†–ò–ê–ù–¢–û–í ENDPOINT...');
  
  const endpoints = [
    'http://localhost:3000/api/v2/wallet/withdraw',
    'http://localhost:3000/api/wallet/withdraw', 
    'http://localhost:3000/wallet/withdraw',
    'http://localhost:3000/api/v2/wallet',
    'http://localhost:3000/api/wallet',
    'http://localhost:3000/wallet'
  ];
  
  for (const endpoint of endpoints) {
    try {
      console.log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É—é: ${endpoint}`);
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ test: 'test' })
      });
      
      console.log(`   Status: ${response.status} ${response.statusText}`);
      
      if (response.status !== 404) {
        const text = await response.text();
        console.log(`   Response: ${text.substring(0, 200)}...`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error}`);
    }
  }
}

async function testServerHealth() {
  console.log('\nüíì –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê...');
  
  const healthEndpoints = [
    'http://localhost:3000/api/v2/health',
    'http://localhost:3000/api/health',
    'http://localhost:3000/health',
    'http://localhost:3000/api/v2/test-routes',
    'http://localhost:3000/api/test-routes'
  ];
  
  for (const endpoint of healthEndpoints) {
    try {
      const response = await fetch(endpoint);
      console.log(`${endpoint}: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.text();
        console.log(`   ‚úÖ ${data.substring(0, 100)}...`);
      }
    } catch (error) {
      console.log(`${endpoint}: ‚ùå ${error}`);
    }
  }
}

async function investigateRouteMapping() {
  console.log('\nüîß –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–û–£–¢–ò–ù–ì–ê...');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ routes –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
  try {
    const testResponse = await fetch('http://localhost:3000/api/v2/test-routes');
    console.log(`Test routes: ${testResponse.status}`);
    
    if (testResponse.ok) {
      const data = await testResponse.json();
      console.log('‚úÖ Routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('Available routes:', data.routes);
    }
  } catch (error) {
    console.log('‚ùå Routes test failed:', error);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º wallet endpoints
  try {
    const walletResponse = await fetch('http://localhost:3000/api/v2/wallet');
    console.log(`Wallet root: ${walletResponse.status} ${walletResponse.statusText}`);
    
    if (walletResponse.status === 401) {
      console.log('‚úÖ Wallet routes —Ä–∞–±–æ—Ç–∞—é—Ç (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)');
    }
  } catch (error) {
    console.log('‚ùå Wallet routes test failed:', error);
  }
}

async function analyzeRouteStructure() {
  console.log('\nüìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ ROUTES...');
  
  console.log('üìÅ –û–ñ–ò–î–ê–ï–ú–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:');
  console.log('1. server/index.ts ‚Üí app.use("/api/v2", apiRoutes)');
  console.log('2. server/routes.ts ‚Üí router.use("/wallet", walletRoutes)');
  console.log('3. modules/wallet/routes.ts ‚Üí router.post("/withdraw", ...)');
  console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç: POST /api/v2/wallet/withdraw');
  
  console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –¶–ï–ü–û–ß–ö–ò:');
  console.log('‚úÖ server/index.ts: app.use(apiPrefix, apiRoutes) - —Å—Ç—Ä–æ–∫–∞ 667');
  console.log('‚úÖ server/routes.ts: router.use("/wallet", walletRoutes) - —Å—Ç—Ä–æ–∫–∞ 295');
  console.log('‚úÖ modules/wallet/routes.ts: router.post("/withdraw", ...) - —Å—Ç—Ä–æ–∫–∞ 78');
  console.log('‚ùì –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π path: /api/v2 + /wallet + /withdraw = /api/v2/wallet/withdraw');
  
  console.log('\n‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
  console.log('1. Rate limiting –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ POST –∑–∞–ø—Ä–æ—Å—ã');
  console.log('2. Middleware chain –ø–∞–¥–∞–µ—Ç –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è controller');
  console.log('3. ValidationSchema –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ');
  console.log('4. RequireTelegramAuth –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
}

async function runDiagnostic() {
  await testServerHealth();
  await investigateRouteMapping();
  await testAllEndpointVariants();
  analyzeRouteStructure();
  
  console.log('\n' + '='.repeat(80));
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  console.log('='.repeat(80));
  
  console.log('üìã –§–ê–ö–¢–´:');
  console.log('1. ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
  console.log('2. ‚úÖ Routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ server/index.ts');
  console.log('3. ‚úÖ Wallet routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ server/routes.ts');
  console.log('4. ‚úÖ Withdraw endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ modules/wallet/routes.ts');
  console.log('5. ‚ùå Endpoint /api/v2/wallet/withdraw –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404');
  
  console.log('\nüéØ –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
  console.log('Middleware chain issue - –æ–¥–∏–Ω –∏–∑ middleware –±–ª–æ–∫–∏—Ä—É–µ—Ç');
  console.log('route registration –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–æ controller');
  
  console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å server logs –≤–æ –≤—Ä–µ–º—è withdrawal –ø–æ–ø—ã—Ç–∫–∏');
  console.log('2. –î–æ–±–∞–≤–∏—Ç—å debug logging –≤ modules/wallet/routes.ts');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å validateBody –∏ requireTelegramAuth middleware');
  console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ JWT —Ç–æ–∫–µ–Ω–∞–º–∏');
}

runDiagnostic().catch(console.error);