/**
 * –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function realReferralTest() {
  console.log('=== –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===\n');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    const referralCode = 'REF_1750079004411_nddfp2';
    
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ï–†–ê');
    
    const { data: referrer } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('ref_code', referralCode)
      .single();
    
    if (!referrer) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrer.username} (ID: ${referrer.id})`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testTelegramId = Date.now(); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const testUsername = `TestUser_${testTelegramId}`;
    
    console.log('\nüîç 2. –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    console.log(`Telegram ID: ${testTelegramId}`);
    console.log(`Username: ${testUsername}`);
    console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const testUser = {
      id: testTelegramId,
      username: testUsername,
      first_name: testUsername,
      language_code: 'en',
      auth_date: Math.floor(Date.now() / 1000),
      hash: 'test_hash_' + testTelegramId
    };
    
    const initData = `user=${encodeURIComponent(JSON.stringify(testUser))}&auth_date=${testUser.auth_date}&hash=${testUser.hash}`;
    
    console.log('\nüîç 3. –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ù–ê –°–ï–†–í–ï–†');
    
    const authResponse = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        initData: initData,
        ref_by: referralCode
      })
    });
    
    const authData = await authResponse.json();
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', authResponse.status);
    console.log('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:', authData.success);
    
    if (authData.success && authData.user) {
      const newUserId = authData.user.id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${newUserId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
      console.log('\nüîç 4. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–î');
      
      const { data: createdUser } = await supabase
        .from('users')
        .select('id, telegram_id, username, referred_by, ref_code')
        .eq('id', newUserId)
        .single();
      
      const { data: referralRecord } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', newUserId)
        .single();
      
      console.log('\nüìä 5. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê');
      
      if (createdUser) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:');
        console.log(`   ID: ${createdUser.id}`);
        console.log(`   Telegram ID: ${createdUser.telegram_id}`);
        console.log(`   Username: ${createdUser.username}`);
        console.log(`   referred_by: ${createdUser.referred_by || 'NULL'}`);
        console.log(`   ref_code: ${createdUser.ref_code}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ referred_by
        if (createdUser.referred_by == referrer.id) {
          console.log('‚úÖ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ö–û–†–†–ï–ö–¢–ù–û');
        } else {
          console.log('‚ùå referred_by –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ');
        }
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      }
      
      if (referralRecord) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals –Ω–∞–π–¥–µ–Ω–∞:');
        console.log(`   user_id: ${referralRecord.user_id}`);
        console.log(`   inviter_id: ${referralRecord.inviter_id}`);
        console.log(`   level: ${referralRecord.level}`);
        console.log(`   ref_path: ${JSON.stringify(referralRecord.ref_path)}`);
      } else {
        console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ referrals –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      const referredByCorrect = createdUser?.referred_by == referrer.id;
      const referralRecordExists = !!referralRecord;
      const systemWorking = referredByCorrect && referralRecordExists;
      
      console.log('\nüéØ 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê');
      
      if (systemWorking) {
        console.log('üéâ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã');
        console.log('‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
        console.log('‚úÖ processReferralInline() —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
      } else {
        console.log('‚ùå –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
        console.log(`‚ùå referred_by –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${referredByCorrect}`);
        console.log(`‚ùå referrals –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ${referralRecordExists}`);
      }
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüßπ 7. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
      
      await supabase.from('referrals').delete().eq('user_id', newUserId);
      await supabase.from('users').delete().eq('id', newUserId);
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(authData, null, 2));
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

realReferralTest();