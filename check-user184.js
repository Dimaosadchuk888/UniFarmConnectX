const { supabase } = require('./core/supabase');

async function checkUser184() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184 ===\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 184)
      .single();
      
    if (userError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }
    
    console.log('–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184:');
    console.log('ID:', user.id);
    console.log('Telegram ID:', user.telegram_id);
    console.log('–ë–∞–ª–∞–Ω—Å UNI:', user.balance_uni);
    console.log('–î–µ–ø–æ–∑–∏—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞:', user.uni_deposit_amount);
    console.log('–°—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', user.uni_farming_rate);
    console.log('–§–∞—Ä–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω:', user.uni_farming_active);
    console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', user.uni_farming_last_update);
    console.log();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('id, amount, amount_uni, description, created_at')
      .eq('user_id', 184)
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(15);
      
    if (txError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
      return;
    }
    
    console.log('=== –ü–û–°–õ–ï–î–ù–ò–ï 15 FARMING_REWARD –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    transactions.forEach((tx, index) => {
      const amount = tx.amount || tx.amount_uni || '0';
      const date = new Date(tx.created_at);
      const timeAgo = Math.round((Date.now() - date.getTime()) / (1000 * 60));
      console.log((index + 1) + '. ' + amount + ' UNI (' + timeAgo + ' –º–∏–Ω –Ω–∞–∑–∞–¥) - ' + date.toLocaleString('ru-RU'));
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Å—É–º–º
    const amounts = transactions.map(tx => parseFloat(tx.amount || tx.amount_uni || '0'));
    const uniqueAmounts = [...new Set(amounts.map(a => a.toFixed(6)))];
    
    console.log('\n=== –ê–ù–ê–õ–ò–ó –ù–ê–ß–ò–°–õ–ï–ù–ò–ô ===');
    console.log('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã:', uniqueAmounts);
    console.log('–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞:', (amounts.reduce((a,b) => a+b, 0) / amounts.length).toFixed(6), 'UNI');
    
    // –ü–æ–∏—Å–∫ 1.23
    const around123 = amounts.filter(a => Math.abs(a - 1.23) < 0.1);
    if (around123.length > 0) {
      console.log('\nüîç –ù–ê–ô–î–ï–ù–´ –°–£–ú–ú–´ –û–ö–û–õ–û 1.23 UNI:');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', around123.length);
      console.log('–¢–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:', around123.map(a => a.toFixed(8)));
    }
    
    // –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    const depositAmount = parseFloat(user.uni_deposit_amount || '0');
    const rate = parseFloat(user.uni_farming_rate || '0.01');
    const dailyIncome = depositAmount * rate;
    const incomePerPeriod = dailyIncome / 288; // 288 –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö
    
    console.log('\n=== –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ì–û –î–û–•–û–î–ê ===');
    console.log('–î–µ–ø–æ–∑–∏—Ç:', depositAmount, 'UNI');
    console.log('–°—Ç–∞–≤–∫–∞:', (rate * 100).toFixed(1), '% –≤ –¥–µ–Ω—å');
    console.log('–î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥:', dailyIncome.toFixed(6), 'UNI');
    console.log('–î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç (–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º):', incomePerPeriod.toFixed(6), 'UNI');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\n=== –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ ===');
    console.log('UNI_FARMING_INTERVAL_MODE:', process.env.UNI_FARMING_INTERVAL_MODE);
    
    process.exit(0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

checkUser184();