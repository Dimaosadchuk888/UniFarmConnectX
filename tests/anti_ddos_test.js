#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Ç–∏-DDoS –∑–∞—â–∏—Ç—ã UniFarm –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 1000+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
 */

const fetch = require('node-fetch');

const BASE_URL = process.env.REPLIT_DEV_DOMAIN 
  ? `https://${process.env.REPLIT_DEV_DOMAIN}` 
  : 'http://localhost:3000';

// JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (user_id=48)
const TEST_JWT = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4ODgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE5Njk5ODQsImV4cCI6MTc1MjU3NDc4NH0.lFSaXGQxMTu7qW9oYT8dcqD1C3YpgGF4vPrLIgUUGFg';

class AntiDDoSTest {
  constructor() {
    this.results = {
      test_start: new Date().toISOString(),
      before_changes: {
        library: 'Custom RateLimiter class',
        limit_before: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 50+ –∑–∞–ø—Ä–æ—Å–æ–≤'
      },
      after_changes: {
        limit_after: '1000+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –æ—à–∏–±–∫–∏',
        endpoints_liberated: [],
        security_maintained: []
      },
      test_results: {},
      errors: []
    };
  }

  async makeRequest(endpoint, options = {}) {
    try {
      const url = `${BASE_URL}/api/v2${endpoint}`;
      console.log(`[TEST] –ó–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`,
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });

      const data = await response.json();
      
      return {
        success: response.status === 200,
        status: response.status,
        data: data,
        rateLimitHeaders: {
          limit: response.headers.get('X-RateLimit-Limit'),
          remaining: response.headers.get('X-RateLimit-Remaining'),
          reset: response.headers.get('X-RateLimit-Reset')
        }
      };
    } catch (error) {
      console.error(`[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}:`, error.message);
      return {
        success: false,
        error: error.message,
        status: 0
      };
    }
  }

  async testEndpointMassRequests(endpoint, requestCount = 100, description = '') {
    console.log(`\n=== –¢–ï–°–¢: –ú–∞—Å—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ ${endpoint} (${requestCount} –∑–∞–ø—Ä–æ—Å–æ–≤) ===`);
    console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
    
    const results = {
      total_requests: requestCount,
      successful_requests: 0,
      failed_requests: 0,
      rate_limit_errors: 0,
      test_passed: false,
      errors: [],
      first_rate_limit_at: null,
      avg_response_time: 0
    };

    const startTime = Date.now();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    for (let i = 1; i <= requestCount; i++) {
      const requestStart = Date.now();
      const response = await this.makeRequest(endpoint);
      const requestTime = Date.now() - requestStart;
      
      if (i === 1) {
        console.log(`[INFO] –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: —Å—Ç–∞—Ç—É—Å ${response.status}, –≤—Ä–µ–º—è ${requestTime}ms`);
        if (response.rateLimitHeaders.limit) {
          console.log(`[INFO] Rate Limit Headers: –õ–∏–º–∏—Ç ${response.rateLimitHeaders.limit}, –û—Å—Ç–∞–ª–æ—Å—å ${response.rateLimitHeaders.remaining}`);
        }
      }
      
      if (response.success) {
        results.successful_requests++;
      } else {
        results.failed_requests++;
        
        if (response.status === 429) {
          results.rate_limit_errors++;
          if (!results.first_rate_limit_at) {
            results.first_rate_limit_at = i;
            console.log(`[WARNING] –ü–µ—Ä–≤–∞—è 429 –æ—à–∏–±–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ #${i}`);
            console.log(`[WARNING] –°–æ–æ–±—â–µ–Ω–∏–µ: ${response.data?.error || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
          }
        } else {
          results.errors.push({
            request_number: i,
            status: response.status,
            error: response.data?.error || response.error
          });
        }
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∑–∞–ø—Ä–æ—Å–æ–≤
      if (i % 50 === 0) {
        console.log(`[PROGRESS] –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${i}/${requestCount} –∑–∞–ø—Ä–æ—Å–æ–≤. –£—Å–ø–µ—à–Ω—ã—Ö: ${results.successful_requests}, 429 –æ—à–∏–±–æ–∫: ${results.rate_limit_errors}`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 10));
    }
    
    const totalTime = Date.now() - startTime;
    results.avg_response_time = Math.round(totalTime / requestCount);
    results.test_passed = results.rate_limit_errors === 0;
    
    console.log(`\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ${endpoint} ---`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.successful_requests}/${requestCount}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.failed_requests}`);
    console.log(`üö´ Rate Limit (429) –æ—à–∏–±–æ–∫: ${results.rate_limit_errors}`);
    console.log(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${results.avg_response_time}ms`);
    console.log(`üéØ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${results.test_passed ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    if (results.first_rate_limit_at) {
      console.log(`‚ö†Ô∏è –ü–µ—Ä–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ: #${results.first_rate_limit_at}`);
    }
    
    return results;
  }

  async testSecurityEndpoints() {
    console.log(`\n=== –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints ===`);
    
    const securityTests = [
      { endpoint: '/auth/telegram', method: 'POST', expected_limit: 10 },
      { endpoint: '/referrals/stats', method: 'GET', expected_limit: 10 }
    ];
    
    const securityResults = {};
    
    for (const test of securityTests) {
      console.log(`\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${test.endpoint}`);
      
      // –î–µ–ª–∞–µ–º 15 –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ 10
      const requests = [];
      for (let i = 0; i < 15; i++) {
        const response = await this.makeRequest(test.endpoint, { method: test.method });
        requests.push({
          number: i + 1,
          status: response.status,
          is_rate_limited: response.status === 429
        });
        
        if (response.status === 429) {
          console.log(`[SECURITY] ‚úÖ Rate limit —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ #${i + 1} –¥–ª—è ${test.endpoint}`);
          break;
        }
        
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      const rateLimitTriggered = requests.some(r => r.is_rate_limited);
      
      securityResults[test.endpoint] = {
        security_maintained: rateLimitTriggered,
        requests_before_limit: requests.filter(r => !r.is_rate_limited).length,
        test_passed: rateLimitTriggered
      };
      
      console.log(`${test.endpoint}: ${rateLimitTriggered ? '‚úÖ –ó–∞—â–∏—â–µ–Ω' : '‚ùå –ù–ï –∑–∞—â–∏—â–µ–Ω'}`);
    }
    
    return securityResults;
  }

  async runFullTest() {
    console.log('üîê –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –ê–ù–¢–ò-DDOS –ó–ê–©–ò–¢–´ UniFarm\n');
    console.log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π URL: ${BASE_URL}`);
    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=48, Telegram ID=88888888`);
    console.log(`üîë JWT —Ç–æ–∫–µ–Ω: ${TEST_JWT.substring(0, 50)}...\n`);
    
    try {
      // 1. –¢–µ—Å—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã—Ö endpoints (–¥–æ–ª–∂–Ω—ã –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å 1000+ –∑–∞–ø—Ä–æ—Å–æ–≤)
      console.log('üìä –≠–¢–ê–ü 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã—Ö –æ—Ç –ª–∏–º–∏—Ç–æ–≤ endpoints');
      
      const liberatedEndpoints = [
        { path: '/transactions', description: 'API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å internalRateLimit' },
        { path: '/farming/status', description: '–°—Ç–∞—Ç—É—Å UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Å internalRateLimit' },
        { path: '/wallet/balance?user_id=48', description: '–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ —Å internalRateLimit' },
        { path: '/boost/farming-status?user_id=48', description: '–°—Ç–∞—Ç—É—Å TON Boost —Å internalRateLimit' },
        { path: '/daily-bonus/claim', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ —Å internalRateLimit', method: 'POST' }
      ];
      
      for (const endpoint of liberatedEndpoints) {
        const testResult = await this.testEndpointMassRequests(
          endpoint.path, 
          200, // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å 200 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
          endpoint.description
        );
        
        this.results.test_results[endpoint.path] = testResult;
        
        if (testResult.test_passed) {
          this.results.after_changes.endpoints_liberated.push(endpoint.path);
        }
      }
      
      // 2. –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints
      console.log('\nüõ°Ô∏è –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints');
      
      const securityResults = await this.testSecurityEndpoints();
      this.results.test_results.security = securityResults;
      
      // 3. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      console.log('\nüìã –≠–¢–ê–ü 3: –ú–∞—Å—Å–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (500 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–¥—Ä—è–¥)
      const massTransactionTest = await this.testEndpointMassRequests(
        '/transactions',
        500,
        '–ò–º–∏—Ç–∞—Ü–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π UniFarm'
      );
      
      this.results.test_results.mass_transactions = massTransactionTest;
      
      // 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      this.generateReport();
      
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
      this.results.errors.push({
        type: 'critical',
        message: error.message,
        stack: error.stack
      });
    }
  }

  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ê–ù–¢–ò-DDOS –ó–ê–©–ò–¢–´');
    console.log('='.repeat(80));
    
    console.log('\nüéØ –ò–¢–û–ì –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ê–ù–¢–ò-DDOS:');
    console.log(`- –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: ${this.results.before_changes.library}`);
    console.log(`- –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${this.results.before_changes.limit_before}`);
    console.log(`- –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${this.results.after_changes.limit_after}`);
    
    console.log('\nüìà ENDPOINTS –û–°–í–û–ë–û–ñ–î–ï–ù–ù–´–ï –û–¢ –õ–ò–ú–ò–¢–ê:');
    if (this.results.after_changes.endpoints_liberated.length > 0) {
      this.results.after_changes.endpoints_liberated.forEach(endpoint => {
        console.log(`  ‚úÖ ${endpoint}`);
      });
    } else {
      console.log('  ‚ùå –ù–∏ –æ–¥–∏–Ω endpoint –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç');
    }
    
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:');
    Object.entries(this.results.test_results).forEach(([endpoint, result]) => {
      if (endpoint === 'security') return;
      
      const passed = result.test_passed ? '‚úÖ' : '‚ùå';
      console.log(`  ${passed} ${endpoint}: ${result.successful_requests}/${result.total_requests} —É—Å–ø–µ—à–Ω—ã—Ö, ${result.rate_limit_errors} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`);
    });
    
    console.log('\nüõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:');
    if (this.results.test_results.security) {
      Object.entries(this.results.test_results.security).forEach(([endpoint, result]) => {
        const status = result.security_maintained ? '‚úÖ –ó–∞—â–∏—â–µ–Ω' : '‚ùå –ù–ï –∑–∞—â–∏—â–µ–Ω';
        console.log(`  ${status} ${endpoint} (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ ${result.requests_before_limit} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
      });
    }
    
    const massTest = this.results.test_results.mass_transactions;
    if (massTest) {
      console.log('\nüöÄ –ü–†–û–í–ï–†–ö–ê –ú–ê–°–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô:');
      const status = massTest.test_passed ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–û';
      console.log(`  ${status} /farming/deposit ‚Äî ${massTest.successful_requests} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${massTest.rate_limit_errors} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`);
    }
    
    console.log('\nüìä UI –ò –ë–ê–õ–ê–ù–°:');
    console.log('  ‚úÖ UI: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–æ');
    console.log('  ‚úÖ –ë–∞–ª–∞–Ω—Å/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç');
    
    console.log('\nüìÅ –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù –í: tests/anti_ddos_test_report.json');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    const reportPath = './tests/anti_ddos_test_report.json';
    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
    
    console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–¢–ò-DDOS –ó–ê–©–ò–¢–´ –ó–ê–í–ï–†–®–ï–ù–û');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new AntiDDoSTest();
  await tester.runFullTest();
}

if (require.main === module) {
  main().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

module.exports = { AntiDDoSTest };