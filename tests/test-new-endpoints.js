/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö endpoint'–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ROADMAP.md
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ TON Farming, Referral System, Airdrop System
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000/api/v2';
const JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld190ZXN0IiwiZmlyc3RfbmFtZSI6IlByZXZpZXciLCJyZWZfY29kZSI6IlJFRl8xNzUxNzgwNTIxOTE4X2UxdjYyZCIsImlhdCI6MTc1MTg3MTA2MywiZXhwIjoxNzUyNDc1ODYzfQ.NKbyJiXtLnGzyr0w-C1oR658X5TzDO6EkKU8Ie5zgE0';

const headers = {
  'Authorization': `Bearer ${JWT_TOKEN}`,
  'Content-Type': 'application/json'
};

async function testEndpoint(endpoint, method = 'GET', body = null) {
  try {
    const options = {
      method,
      headers,
      ...(body && { body: JSON.stringify(body) })
    };
    
    const response = await fetch(`${BASE_URL}${endpoint}`, options);
    const data = await response.json();
    
    console.log(`${method} ${endpoint}:`);
    console.log(`  Status: ${response.status} ${response.statusText}`);
    console.log(`  Success: ${data.success}`);
    if (data.success) {
      console.log(`  ‚úÖ ENDPOINT –†–ê–ë–û–¢–ê–ï–¢`);
    } else {
      console.log(`  ‚ùå ENDPOINT –ù–ï –†–ê–ë–û–¢–ê–ï–¢: ${data.error}`);
    }
    console.log('');
    
    return { endpoint, status: response.status, success: data.success };
  } catch (error) {
    console.log(`${method} ${endpoint}:`);
    console.log(`  ‚ùå ERROR: ${error.message}`);
    console.log('');
    return { endpoint, status: 'ERROR', success: false, error: error.message };
  }
}

async function testNewEndpoints() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• ENDPOINT\'–û–í –ü–û–°–õ–ï ROADMAP COMPLIANCE 100%');
  console.log('='.repeat(70));
  
  const results = [];
  
  // TON Farming System - –Ω–æ–≤—ã–π endpoint
  console.log('üìä TON FARMING SYSTEM:');
  results.push(await testEndpoint('/ton-farming/balance'));
  
  // Referral System - –Ω–æ–≤—ã–µ endpoints
  console.log('üîó REFERRAL SYSTEM:');
  results.push(await testEndpoint('/referrals/history'));
  results.push(await testEndpoint('/referrals/chain'));
  
  // Airdrop System - –Ω–æ–≤—ã–µ endpoints
  console.log('üéÅ AIRDROP SYSTEM:');
  results.push(await testEndpoint('/airdrop/active'));
  results.push(await testEndpoint('/airdrop/history'));
  results.push(await testEndpoint('/airdrop/eligibility'));
  
  // –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
  console.log('üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(70));
  
  const working = results.filter(r => r.success).length;
  const total = results.length;
  const percentage = Math.round((working / total) * 100);
  
  console.log(`–í—Å–µ–≥–æ endpoint'–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${total}`);
  console.log(`–†–∞–±–æ—Ç–∞—é—â–∏—Ö endpoint'–æ–≤: ${working}`);
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${percentage}%`);
  
  if (percentage === 100) {
    console.log('üéâ –í–°–ï –ù–û–í–´–ï ENDPOINT\'–´ –†–ê–ë–û–¢–ê–Æ–¢ - ROADMAP COMPLIANCE 100% –î–û–°–¢–ò–ì–ù–£–¢!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoint\'—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  }
  
  return { working, total, percentage };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testNewEndpoints().then(result => {
  process.exit(result.percentage === 100 ? 0 : 1);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  process.exit(1);
});