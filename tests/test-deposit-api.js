/**
 * –¢–µ—Å—Ç API –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
 */

const API_BASE = 'https://uni-farm-connect-unifarm01010101.replit.app';
const JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld190ZXN0IiwiZmlyc3RfbmFtZSI6IlByZXZpZXciLCJyZWZfY29kZSI6IlJFRl8xNzUxNzgwNTIxOTE4X2UxdjYyZCIsImlhdCI6MTc1MTg3MTA2MywiZXhwIjoxNzUyNDc1ODYzfQ.NKbyJiXtLnGzyr0w-C1oR658X5TzDO6EkKU8Ie5zgE0';

async function testDepositAPI() {
  console.log('=== –¢–ï–°–¢ API –î–ï–ü–û–ó–ò–¢–û–í ===');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞
  console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞...');
  
  try {
    const farmingResponse = await fetch(`${API_BASE}/api/v2/uni-farming/status?user_id=62`, {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!farmingResponse.ok) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', farmingResponse.status, farmingResponse.statusText);
      return;
    }
    
    const farmingData = await farmingResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞:', JSON.stringify(farmingData, null, 2));
    
    if (farmingData.success) {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å UNI: ${farmingData.data.balance_uni}`);
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${farmingData.data.uni_deposit_amount}`);
      console.log(`‚úÖ –°—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farmingData.data.uni_farming_rate}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', error);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ wallet API
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ wallet API...');
  
  try {
    const balanceResponse = await fetch(`${API_BASE}/api/v2/wallet/balance?user_id=62`, {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ wallet:', balanceResponse.status);
    
    if (!balanceResponse.ok) {
      const errorText = await balanceResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ wallet API:', balanceResponse.status, errorText);
    } else {
      const balanceData = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ wallet API:', JSON.stringify(balanceData, null, 2));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
  
  try {
    const transactionsResponse = await fetch(`${API_BASE}/api/v2/transactions/history?user_id=62&limit=10`, {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!transactionsResponse.ok) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsResponse.status);
    } else {
      const transactionsData = await transactionsResponse.json();
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', JSON.stringify(transactionsData, null, 2));
      
      if (transactionsData.success && transactionsData.data.transactions) {
        console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
        transactionsData.data.transactions.forEach((tx, i) => {
          console.log(`  ${i + 1}. ${tx.type} - ${tx.amount} ${tx.currency} (${tx.created_at})`);
        });
        
        // –ù–∞–π–¥–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
        const deposits = transactionsData.data.transactions.filter(tx => 
          tx.type === 'FARMING_REWARD' && parseFloat(tx.amount) < 0
        );
        
        console.log('\nüì• –î–ï–ü–û–ó–ò–¢–´:');
        deposits.forEach((deposit, i) => {
          console.log(`  ${i + 1}. ${Math.abs(deposit.amount)} UNI –¥–µ–ø–æ–∑–∏—Ç (${deposit.created_at})`);
        });
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
  }
  
  // 4. –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
  console.log('\n4. –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ 3 UNI...');
  
  try {
    const depositResponse = await fetch(`${API_BASE}/api/v2/uni-farming/deposit`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        amount: '3',
        user_id: 62
      })
    });
    
    if (!depositResponse.ok) {
      const errorText = await depositResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', depositResponse.status, errorText);
    } else {
      const depositData = await depositResponse.json();
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞:', JSON.stringify(depositData, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
      console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞...');
      
      const newFarmingResponse = await fetch(`${API_BASE}/api/v2/uni-farming/status?user_id=62`, {
        headers: {
          'Authorization': `Bearer ${JWT_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (newFarmingResponse.ok) {
        const newFarmingData = await newFarmingResponse.json();
        console.log(`‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å UNI: ${newFarmingData.data.balance_uni}`);
        console.log(`‚úÖ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${newFarmingData.data.uni_deposit_amount}`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ:', error);
  }
  
  console.log('\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { testDepositAPI };
}

// –ó–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  window.testDepositAPI = testDepositAPI;
}

// –ó–∞–ø—É—Å–∫ –≤ Node.js
if (typeof process !== 'undefined' && process.argv[1] === __filename) {
  testDepositAPI().catch(console.error);
}