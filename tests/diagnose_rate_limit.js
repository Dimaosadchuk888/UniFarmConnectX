#!/usr/bin/env node
/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ rate limiting —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */

const fetch = require('node-fetch');

const BASE_URL = process.env.REPLIT_DEV_DOMAIN 
  ? `https://${process.env.REPLIT_DEV_DOMAIN}` 
  : 'http://localhost:3000';

const TEST_JWT = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4ODgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE5Njk5ODQsImV4cCI6MTc1MjU3NDc4NH0.lFSaXGQxMTu7qW9oYT8dcqD1C3YpgGF4vPrLIgUUGFg';

async function diagnoseRateLimiting() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê RATE LIMITING');
  console.log(`üåê Base URL: ${BASE_URL}`);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω endpoint
  const endpoint = '/api/v2/transactions';
  console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint: ${endpoint}`);
  
  try {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${TEST_JWT}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`üìà Status: ${response.status}`);
    console.log(`üìã Headers:`);
    console.log(`  - X-RateLimit-Limit: ${response.headers.get('X-RateLimit-Limit') || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  - X-RateLimit-Remaining: ${response.headers.get('X-RateLimit-Remaining') || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`  - X-RateLimit-Reset: ${response.headers.get('X-RateLimit-Reset') || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    if (response.status === 429) {
      const data = await response.json();
      console.log(`‚ùå Rate Limited: ${data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log('üîß –°—Ç–∞—Ç—É—Å: –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    } else if (response.status === 200) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
      const data = await response.json();
      console.log(`üì¶ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data).substring(0, 100)}...`);
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

if (require.main === module) {
  diagnoseRateLimiting().catch(console.error);
}

module.exports = { diagnoseRateLimiting };