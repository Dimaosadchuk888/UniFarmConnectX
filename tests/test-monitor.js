/**
 * –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö API endpoints
 */

const fetch = require('node-fetch');

async function testMonitoringEndpoint() {
  console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê API ENDPOINTS ===\n');
  
  const port = process.env.PORT || 3000;
  const baseUrl = `http://localhost:${port}`;
  
  try {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint: ${baseUrl}/api/v2/monitor/status`);
    
    const response = await fetch(`${baseUrl}/api/v2/monitor/status`);
    
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      return;
    }
    
    const data = await response.json();
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:');
    console.log(JSON.stringify(data, null, 2));
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    let okCount = 0;
    let failCount = 0;
    
    for (const [endpoint, status] of Object.entries(data)) {
      if (status === 'OK') {
        console.log(`‚úÖ ${endpoint}: ${status}`);
        okCount++;
      } else {
        console.log(`‚ùå ${endpoint}: ${status}`);
        failCount++;
      }
    }
    
    console.log(`\nüìà –ò—Ç–æ–≥–æ: ${okCount} OK, ${failCount} FAIL`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.log('\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMonitoringEndpoint();