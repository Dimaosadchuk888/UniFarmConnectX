/**
 * üé¨ UniFarm E2E Demo Test Run
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
 */

const { PreTestChecker } = require('./pre_test_check');
const { runE2ETests, TestLogger } = require('./full_e2e_check');
const fs = require('fs');
const path = require('path');

class DemoTestRunner {
  constructor() {
    this.step = 0;
    this.startTime = new Date();
  }

  logStep(message) {
    this.step++;
    console.log(`\nüéØ –®–∞–≥ ${this.step}: ${message}`);
    console.log('‚îÄ'.repeat(60));
  }

  async pause(seconds = 2) {
    await new Promise(resolve => setTimeout(resolve, seconds * 1000));
  }

  async runDemo() {
    console.log('üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –ó–ê–ü–£–°–ö E2E –¢–ï–°–¢–û–í UNIFARM');
    console.log('‚ïê'.repeat(70));
    console.log('‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú: –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω');
    console.log('üîí –¢–ï–°–¢–û–í–ê–Ø –°–†–ï–î–ê: –¢–æ–ª—å–∫–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('‚ïê'.repeat(70));

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    this.logStep('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    const checker = new PreTestChecker();
    const isReady = await checker.runAllChecks();
    
    if (!isReady) {
      console.log('\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.');
      console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
      return false;
    }

    await this.pause(3);

    // –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤
    this.logStep('–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('–ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:');
    console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ UNI –∏ TON –±–∞–ª–∞–Ω—Å–æ–≤');
    console.log('‚Ä¢ UNI Farming –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('‚Ä¢ TON Boost —Å–∏—Å—Ç–µ–º–∞');
    console.log('‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞');
    console.log('‚Ä¢ Daily Bonus —Å–∏—Å—Ç–µ–º–∞');
    console.log('‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π');
    console.log('‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤');

    await this.pause(3);
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');

    try {
      await runE2ETests();
      
      // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.logStep('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      await this.analyzeResults();

      // –®–∞–≥ 4: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
      this.logStep('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤');
      await this.demonstrateReports();

      return true;
    } catch (error) {
      console.log(`\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      return false;
    }
  }

  async analyzeResults() {
    const reportPath = path.join(__dirname, 'e2e_test_report.json');
    
    if (!fs.existsSync(reportPath)) {
      console.log('‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
    
    console.log('üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${this.getExecutionTime()}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${report.test_summary.success_rate}%`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${report.test_summary.passed} —Ç–µ—Å—Ç–æ–≤`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${report.test_summary.failed} —Ç–µ—Å—Ç–æ–≤`);

    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ú–û–î–£–õ–Ø–ú:');
    
    const moduleAnalysis = this.analyzeModules(report.test_details);
    Object.entries(moduleAnalysis).forEach(([module, status]) => {
      const symbol = status === 'PASSED' ? '‚úÖ' : '‚ùå';
      console.log(`${symbol} ${module}: ${status}`);
    });

    if (report.test_summary.success_rate >= 90) {
      console.log('\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!');
      console.log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    } else if (report.test_summary.success_rate >= 70) {
      console.log('\n‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢');
      console.log('–°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
    } else {
      console.log('\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê');
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
    }

    await this.pause(2);
  }

  analyzeModules(testDetails) {
    const modules = {
      'User Management': 'UNKNOWN',
      'Wallet System': 'UNKNOWN',
      'UNI Farming': 'UNKNOWN',
      'TON Boost': 'UNKNOWN',
      'Referral System': 'UNKNOWN',
      'Daily Bonus': 'UNKNOWN',
      'Missions': 'UNKNOWN',
      'Transactions': 'UNKNOWN'
    };

    testDetails.forEach(test => {
      if (test.name.includes('User Creation')) {
        modules['User Management'] = test.status;
      } else if (test.name.includes('Balance Deposit')) {
        modules['Wallet System'] = test.status;
      } else if (test.name.includes('UNI Farming')) {
        modules['UNI Farming'] = test.status;
      } else if (test.name.includes('TON Boost')) {
        modules['TON Boost'] = test.status;
      } else if (test.name.includes('Referral')) {
        modules['Referral System'] = test.status;
      } else if (test.name.includes('Daily Bonus')) {
        modules['Daily Bonus'] = test.status;
      } else if (test.name.includes('Missions')) {
        modules['Missions'] = test.status;
      } else if (test.name.includes('Transaction')) {
        modules['Transactions'] = test.status;
      }
    });

    return modules;
  }

  async demonstrateReports() {
    console.log('üìÑ –°–û–ó–î–ê–ù–ù–´–ï –û–¢–ß–ï–¢–´:');
    
    const files = [
      { file: 'e2e_test_report.json', desc: 'JSON –æ—Ç—á–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏' },
      { file: 'test_execution.log', desc: '–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤' }
    ];

    files.forEach(({ file, desc }) => {
      const filePath = path.join(__dirname, file);
      if (fs.existsSync(filePath)) {
        const stats = fs.statSync(filePath);
        console.log(`‚úÖ ${file} (${Math.round(stats.size / 1024)}KB) - ${desc}`);
      } else {
        console.log(`‚ùå ${file} - –Ω–µ —Å–æ–∑–¥–∞–Ω`);
      }
    });

    console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê JSON –û–¢–ß–ï–¢–ê:');
    const reportPath = path.join(__dirname, 'e2e_test_report.json');
    if (fs.existsSync(reportPath)) {
      const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
      console.log('‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
      console.log('‚Ä¢ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤');
      console.log(`‚Ä¢ –î–µ—Ç–∞–ª–∏ ${report.test_details.length} —Ç–µ—Å—Ç–æ–≤`);
      console.log('‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
      console.log('‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      if (report.test_details.length > 0) {
        const firstTest = report.test_details[0];
        console.log('\nüìù –ü–†–ò–ú–ï–† –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò –¢–ï–°–¢–ê:');
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${firstTest.name}`);
        console.log(`–°—Ç–∞—Ç—É—Å: ${firstTest.status}`);
        if (firstTest.details) {
          console.log('–î–µ—Ç–∞–ª–∏:');
          Object.entries(firstTest.details).forEach(([key, value]) => {
            console.log(`  ‚Ä¢ ${key}: ${JSON.stringify(value)}`);
          });
        }
      }
    }

    await this.pause(2);
  }

  getExecutionTime() {
    const endTime = new Date();
    const diffMs = endTime - this.startTime;
    const diffSecs = Math.round(diffMs / 1000);
    const mins = Math.floor(diffSecs / 60);
    const secs = diffSecs % 60;
    return mins > 0 ? `${mins}–º ${secs}—Å` : `${secs}—Å`;
  }

  printFinalSummary() {
    console.log('\n' + '‚ïê'.repeat(70));
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò');
    console.log('‚ïê'.repeat(70));
    console.log('‚úÖ –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ UniFarm');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã');
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã');
    console.log('‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏');
    
    console.log('\nüîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò E2E SUITE:');
    console.log('‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞');
    console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã');
    console.log('‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤');
    console.log('‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –æ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã');

    console.log('\nüöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:');
    console.log('‚Ä¢ –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log('‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    console.log('‚Ä¢ –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–º');
    console.log('‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è');

    console.log('‚ïê'.repeat(70));
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function main() {
  const demo = new DemoTestRunner();
  
  try {
    const success = await demo.runDemo();
    demo.printFinalSummary();
    
    process.exit(success ? 0 : 1);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { DemoTestRunner };