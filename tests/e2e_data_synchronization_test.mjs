/**
 * E2E Test: Complete Data Synchronization between Frontend and Supabase Database
 * 
 * –¶–µ–ª—å: –û–±–µ—Å–ø–µ—á–∏—Ç—å 100% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
 * - UserController API endpoints
 * - BalanceService data transformation  
 * - JWT token authentication
 * - Middleware authorization flow
 * - UserContext state management
 * - Database query results
 * 
 * –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ production
 */

import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';

const API_BASE = 'http://localhost:3000';
const PRODUCTION_USER_ID = 48;
const PRODUCTION_TELEGRAM_ID = 88888888;
const JWT_SECRET = process.env.JWT_SECRET || 'unifarm_jwt_secret_key_2025_production';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testJWT = jwt.sign({
  userId: PRODUCTION_USER_ID,
  telegram_id: PRODUCTION_TELEGRAM_ID,
  username: 'demo_user',
  first_name: 'Demo User',
  ref_code: 'REF_1750952576614_t938vs',
  iat: Math.floor(Date.now() / 1000),
  exp: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60)
}, JWT_SECRET);

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç API –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
async function apiRequest(endpoint, method = 'GET') {
  const response = await fetch(`${API_BASE}${endpoint}`, {
    method,
    headers: {
      'Authorization': `Bearer ${testJWT}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  });
  
  return {
    status: response.status,
    ok: response.ok,
    data: await response.json()
  };
}

/**
 * –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
 */
async function getDatabaseUser() {
  const response = await apiRequest('/debug/user48');
  return response;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è E2E —Ç–µ—Å—Ç–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function runE2EDataSynchronizationTest() {
  console.log('\nüîÑ E2E DATA SYNCHRONIZATION TEST - –ó–ê–ü–£–°–ö');
  console.log('=' .repeat(80));
  
  const results = {
    success: true,
    errors: [],
    tests: {},
    summary: {
      total: 0,
      passed: 0,
      failed: 0
    }
  };
  
  try {
    // =========================================================================
    // –¢–ï–°–¢ 1: UserController /users/profile endpoint
    // =========================================================================
    console.log('\nüìä –¢–ï–°–¢ 1: UserController API endpoint');
    console.log('-'.repeat(50));
    
    const userProfileTest = await apiRequest('/api/v2/users/profile');
    results.tests.userProfile = {
      name: 'UserController /users/profile',
      status: userProfileTest.ok ? 'PASS' : 'FAIL',
      data: userProfileTest.data
    };
    
    if (userProfileTest.ok) {
      const userData = userProfileTest.data.data?.user;
      console.log('‚úÖ UserController –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   User ID:', userData?.id);
      console.log('   Telegram ID:', userData?.telegram_id);  
      console.log('   UNI Balance:', userData?.balance_uni);
      console.log('   TON Balance:', userData?.balance_ton);
      console.log('   Ref Code:', userData?.ref_code);
      results.summary.passed++;
    } else {
      console.log('‚ùå UserController –æ—à–∏–±–∫–∞:', userProfileTest.data);
      results.errors.push('UserController API endpoint failed');
      results.summary.failed++;
    }
    results.summary.total++;
    
    // =========================================================================
    // –¢–ï–°–¢ 2: WalletController /wallet/balance endpoint
    // =========================================================================
    console.log('\nüí∞ –¢–ï–°–¢ 2: WalletController balance endpoint');
    console.log('-'.repeat(50));
    
    const walletBalanceTest = await apiRequest(`/api/v2/wallet/balance?user_id=${PRODUCTION_USER_ID}`);
    results.tests.walletBalance = {
      name: 'WalletController /wallet/balance',
      status: walletBalanceTest.ok ? 'PASS' : 'FAIL',
      data: walletBalanceTest.data
    };
    
    if (walletBalanceTest.ok) {
      const balanceData = walletBalanceTest.data.data;
      console.log('‚úÖ WalletController –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   UNI Balance:', balanceData?.uniBalance);
      console.log('   TON Balance:', balanceData?.tonBalance);
      console.log('   UNI Farming Active:', balanceData?.uniFarmingActive);
      console.log('   UNI Deposit Amount:', balanceData?.uniDepositAmount);
      results.summary.passed++;
    } else {
      console.log('‚ùå WalletController –æ—à–∏–±–∫–∞:', walletBalanceTest.data);
      results.errors.push('WalletController balance endpoint failed');
      results.summary.failed++;
    }
    results.summary.total++;
    
    // =========================================================================
    // –¢–ï–°–¢ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ UserController vs WalletController –¥–∞–Ω–Ω—ã—Ö
    // =========================================================================
    console.log('\nüîÑ –¢–ï–°–¢ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏');
    console.log('-'.repeat(50));
    
    if (userProfileTest.ok && walletBalanceTest.ok) {
      const userBalance = userProfileTest.data.data?.user;
      const walletBalance = walletBalanceTest.data.data;
      
      const userUni = parseFloat(userBalance?.balance_uni || 0);
      const walletUni = parseFloat(walletBalance?.uniBalance || 0);
      const userTon = parseFloat(userBalance?.balance_ton || 0);
      const walletTon = parseFloat(walletBalance?.tonBalance || 0);
      
      const uniSync = Math.abs(userUni - walletUni) < 0.01; // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
      const tonSync = Math.abs(userTon - walletTon) < 0.01;
      
      results.tests.dataSync = {
        name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UserController vs WalletController',
        status: (uniSync && tonSync) ? 'PASS' : 'FAIL',
        details: {
          userController: { uni: userUni, ton: userTon },
          walletController: { uni: walletUni, ton: walletTon },
          synchronized: { uni: uniSync, ton: tonSync }
        }
      };
      
      if (uniSync && tonSync) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏');
        console.log(`   UNI: User(${userUni}) = Wallet(${walletUni})`);
        console.log(`   TON: User(${userTon}) = Wallet(${walletTon})`);
        results.summary.passed++;
      } else {
        console.log('‚ùå –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏');
        console.log(`   UNI: User(${userUni}) ‚â† Wallet(${walletUni}) [${uniSync ? 'OK' : 'FAIL'}]`);
        console.log(`   TON: User(${userTon}) ‚â† Wallet(${walletTon}) [${tonSync ? 'OK' : 'FAIL'}]`);
        results.errors.push('Data synchronization mismatch between controllers');
        results.summary.failed++;
      }
    } else {
      results.tests.dataSync = {
        name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è UserController vs WalletController',
        status: 'SKIP',
        reason: 'Previous tests failed'
      };
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö');
    }
    results.summary.total++;
    
    // =========================================================================
    // –¢–ï–°–¢ 4: JWT Token Validation  
    // =========================================================================
    console.log('\nüîê –¢–ï–°–¢ 4: JWT Token validation');
    console.log('-'.repeat(50));
    
    try {
      const decoded = jwt.verify(testJWT, JWT_SECRET);
      const jwtValid = decoded.userId === PRODUCTION_USER_ID && decoded.telegram_id === PRODUCTION_TELEGRAM_ID;
      
      results.tests.jwtValidation = {
        name: 'JWT Token Validation',
        status: jwtValid ? 'PASS' : 'FAIL',
        details: {
          userId: decoded.userId,
          telegramId: decoded.telegram_id,
          expectedUserId: PRODUCTION_USER_ID,
          expectedTelegramId: PRODUCTION_TELEGRAM_ID
        }
      };
      
      if (jwtValid) {
        console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        console.log('   User ID:', decoded.userId);
        console.log('   Telegram ID:', decoded.telegram_id);
        results.summary.passed++;
      } else {
        console.log('‚ùå JWT —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        results.errors.push('JWT token contains invalid user data');
        results.summary.failed++;
      }
    } catch (error) {
      results.tests.jwtValidation = {
        name: 'JWT Token Validation',
        status: 'FAIL',
        error: error.message
      };
      console.log('‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π:', error.message);
      results.errors.push('JWT token validation failed');
      results.summary.failed++;
    }
    results.summary.total++;
    
    // =========================================================================
    // –¢–ï–°–¢ 5: Transaction History –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // =========================================================================
    console.log('\nüìã –¢–ï–°–¢ 5: Transaction History');
    console.log('-'.repeat(50));
    
    const transactionsTest = await apiRequest('/api/v2/transactions?page=1&limit=5');
    results.tests.transactions = {
      name: 'Transaction History',
      status: transactionsTest.ok ? 'PASS' : 'FAIL',
      data: transactionsTest.data
    };
    
    if (transactionsTest.ok) {
      const transactions = transactionsTest.data.data?.transactions || [];
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactions.length);
      
      if (transactions.length > 0) {
        const lastTx = transactions[0];
        console.log('   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', lastTx.type, lastTx.amount, lastTx.currency);
        console.log('   –î–∞—Ç–∞:', lastTx.created_at);
      }
      results.summary.passed++;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsTest.data);
      results.errors.push('Transaction history endpoint failed');
      results.summary.failed++;
    }
    results.summary.total++;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ E2E —Ç–µ—Å—Ç–µ:', error);
    results.success = false;
    results.errors.push(`Critical error: ${error.message}`);
  }
  
  // =========================================================================
  // –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
  // =========================================================================
  console.log('\n' + '='.repeat(80));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ E2E DATA SYNCHRONIZATION TEST');
  console.log('='.repeat(80));
  
  console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.summary.total}`);
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.summary.passed} ‚úÖ`);
  console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.summary.failed} ‚ùå`);
  console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((results.summary.passed / results.summary.total) * 100)}%`);
  
  if (results.errors.length > 0) {
    console.log(`\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:`);
    results.errors.forEach((error, index) => {
      console.log(`   ${index + 1}. ${error}`);
    });
  }
  
  const overallSuccess = results.summary.failed === 0;
  console.log(`\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${overallSuccess ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}`);
  
  if (overallSuccess) {
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–µ–∂–¥—É frontend –∏ backend!');
    console.log('   - UserController –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   - WalletController —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å UserController');
    console.log('   - JWT —Ç–æ–∫–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('   - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('   - –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
  } else {
    console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.');
  }
  
  console.log('\n' + '='.repeat(80));
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  runE2EDataSynchronizationTest()
    .then(results => {
      process.exit(results.summary.failed === 0 ? 0 : 1);
    })
    .catch(error => {
      console.error('Unhandled error:', error);
      process.exit(1);
    });
}

export { runE2EDataSynchronizationTest };