/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π UniFarm
 * 
 * –ü–æ–∫—Ä—ã—Ç–∏–µ:
 * 1. JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 * 2. –î–µ–ø–æ–∑–∏—Ç—ã (UNI –∏ TON) 
 * 3. –í—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤
 * 4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ wallet
 * 5. –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */

const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
const { config } = require('dotenv');
config();

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000/api/v2';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const TEST_USER_1 = {
  id: 9999,
  telegram_id: 999999999,
  jwt_token: null
};

const TEST_USER_2 = {
  id: 9998,
  telegram_id: 999999998,
  jwt_token: null
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
async function makeRequest(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const response = await fetch(url, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });
  
  const data = await response.json();
  return { response, data };
}

async function generateTestJWT(userId, telegramId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ JWT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { data } = await makeRequest('/auth/telegram', {
    method: 'POST',
    body: JSON.stringify({
      telegram_id: telegramId,
      username: `test_user_${userId}`,
      first_name: 'Test',
      auth_date: Math.floor(Date.now() / 1000),
      hash: 'test_hash'
    })
  });
  
  return data.token;
}

// –¢–µ—Å—Ç—ã JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function testJWTAuth() {
  console.log('\nüîê –¢–ï–°–¢: JWT –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  
  try {
    // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
    const { response: noAuthResponse } = await makeRequest('/wallet/balance');
    console.log(`  ‚îÇ  ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${noAuthResponse.status} ${noAuthResponse.status === 401 ? '‚úÖ' : '‚ùå'}`);
    
    // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
    const { response: badTokenResponse } = await makeRequest('/wallet/balance', {
      headers: { 'Authorization': 'Bearer invalid_token_12345' }
    });
    console.log(`  ‚îÇ  ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${badTokenResponse.status} ${badTokenResponse.status === 401 ? '‚úÖ' : '‚ùå'}`);
    
    // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º...');
    const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImV4cCI6MTYwMDAwMDAwMH0.invalid';
    const { response: expiredResponse } = await makeRequest('/wallet/balance', {
      headers: { 'Authorization': `Bearer ${expiredToken}` }
    });
    console.log(`  ‚îÇ  ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${expiredResponse.status} ${expiredResponse.status === 401 ? '‚úÖ' : '‚ùå'}`);
    
    console.log('  ‚îî‚îÄ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: PASSED ‚úÖ\n');
    return true;
  } catch (error) {
    console.log(`  ‚îî‚îÄ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: FAILED ‚ùå - ${error.message}\n`);
    return false;
  }
}

// –¢–µ—Å—Ç—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
async function testDeposits() {
  console.log('\nüí∞ –¢–ï–°–¢: –î–µ–ø–æ–∑–∏—Ç—ã (UNI –∏ TON)');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    TEST_USER_1.jwt_token = await generateTestJWT(TEST_USER_1.id, TEST_USER_1.telegram_id);
    
    // –¢–µ—Å—Ç 1: –î–µ–ø–æ–∑–∏—Ç UNI
    console.log('  ‚îú‚îÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ 100 UNI...');
    const { response: uniResponse, data: uniData } = await makeRequest('/wallet/deposit', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        amount: 100,
        currency: 'UNI',
        type: 'test_deposit'
      })
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${uniResponse.status} ${uniResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ Transaction ID: ${uniData.transaction_id || 'N/A'}`);
    
    // –¢–µ—Å—Ç 2: –î–µ–ø–æ–∑–∏—Ç TON
    console.log('  ‚îú‚îÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ 10 TON...');
    const { response: tonResponse, data: tonData } = await makeRequest('/wallet/deposit', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        amount: 10,
        currency: 'TON',
        type: 'test_deposit'
      })
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${tonResponse.status} ${tonResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ Transaction ID: ${tonData.transaction_id || 'N/A'}`);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const { data: balanceData } = await makeRequest('/wallet/balance', {
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` }
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ UNI –±–∞–ª–∞–Ω—Å: ${balanceData.uni_balance || 0}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ TON –±–∞–ª–∞–Ω—Å: ${balanceData.ton_balance || 0}`);
    
    console.log('  ‚îî‚îÄ –î–µ–ø–æ–∑–∏—Ç—ã: PASSED ‚úÖ\n');
    return true;
  } catch (error) {
    console.log(`  ‚îî‚îÄ –î–µ–ø–æ–∑–∏—Ç—ã: FAILED ‚ùå - ${error.message}\n`);
    return false;
  }
}

// –¢–µ—Å—Ç—ã –≤—ã–≤–æ–¥–æ–≤
async function testWithdrawals() {
  console.log('\nüí∏ –¢–ï–°–¢: –í—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞
    console.log('  ‚îú‚îÄ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞...');
    const { response: overdraftResponse } = await makeRequest('/wallet/withdraw', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        amount: '1000000',
        currency: 'UNI',
        wallet_address: 'test_wallet_address'
      })
    });
    console.log(`  ‚îÇ  ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${overdraftResponse.status} ${overdraftResponse.status === 400 ? '‚úÖ' : '‚ùå'} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 400)`);
    
    // –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–Ω—ã–π –≤—ã–≤–æ–¥ UNI
    console.log('  ‚îú‚îÄ –í—ã–≤–æ–¥ 50 UNI...');
    const { response: validResponse, data: validData } = await makeRequest('/wallet/withdraw', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        amount: '50',
        currency: 'UNI',
        wallet_address: 'test_wallet_address'
      })
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${validResponse.status} ${validResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ Request ID: ${validData.request_id || 'N/A'}`);
    
    // –¢–µ—Å—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ TON
    console.log('  ‚îú‚îÄ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ 0.5 TON (–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞)...');
    const { response: minResponse } = await makeRequest('/wallet/withdraw', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        amount: '0.5',
        currency: 'TON',
        wallet_address: 'test_ton_wallet'
      })
    });
    console.log(`  ‚îÇ  ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${minResponse.status} ${minResponse.status === 400 ? '‚úÖ' : '‚ùå'} (–º–∏–Ω–∏–º—É–º 1 TON)`);
    
    console.log('  ‚îî‚îÄ –í—ã–≤–æ–¥—ã: PASSED ‚úÖ\n');
    return true;
  } catch (error) {
    console.log(`  ‚îî‚îÄ –í—ã–≤–æ–¥—ã: FAILED ‚ùå - ${error.message}\n`);
    return false;
  }
}

// –¢–µ—Å—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async function testInternalOperations() {
  console.log('\nüîß –¢–ï–°–¢: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ wallet');
  
  try {
    // –¢–µ—Å—Ç 1: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞)
    console.log('  ‚îú‚îÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ 10 UNI (–±–æ–Ω—É—Å)...');
    const { response: creditResponse, data: creditData } = await makeRequest('/wallet/deposit-internal', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        user_id: TEST_USER_1.id,
        amount: 10,
        currency: 'UNI',
        type: 'BONUS',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ–Ω—É—Å'
      })
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${creditResponse.status} ${creditResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${creditData.new_balance || 'N/A'}`);
    
    // –¢–µ—Å—Ç 2: –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ (–∫–æ–º–∏—Å—Å–∏—è)
    console.log('  ‚îú‚îÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ 1 UNI (–∫–æ–º–∏—Å—Å–∏—è)...');
    const { response: debitResponse, data: debitData } = await makeRequest('/wallet/withdraw-internal', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        user_id: TEST_USER_1.id,
        amount: 1,
        currency: 'UNI',
        type: 'FEE',
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è'
      })
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${debitResponse.status} ${debitResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${debitData.new_balance || 'N/A'}`);
    
    // –¢–µ—Å—Ç 3: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    console.log('  ‚îú‚îÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ 5 UNI –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
    const { response: transferResponse, data: transferData } = await makeRequest('/wallet/transfer', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${TEST_USER_1.jwt_token}` },
      body: JSON.stringify({
        to_user_id: TEST_USER_2.id.toString(),
        amount: '5',
        currency: 'UNI'
      })
    });
    console.log(`  ‚îÇ  ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${transferResponse.status} ${transferResponse.status === 200 ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ‚îÇ  ‚îî‚îÄ Transaction ID: ${transferData.transaction_id || 'N/A'}`);
    
    console.log('  ‚îî‚îÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: PASSED ‚úÖ\n');
    return true;
  } catch (error) {
    console.log(`  ‚îî‚îÄ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: FAILED ‚ùå - ${error.message}\n`);
    return false;
  }
}

// –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
async function testReferralCommissions() {
  console.log('\nü§ù –¢–ï–°–¢: –†–∞—Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∫–æ–º–∏—Å—Å–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º...');
    const expectedRates = [
      { level: 1, rate: 5 },
      { level: 2, rate: 3 },
      { level: 3, rate: 2 },
      { level: 4, rate: 1.5 },
      { level: 5, rate: 1 }
    ];
    
    for (const { level, rate } of expectedRates) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      console.log(`  ‚îÇ  ‚îú‚îÄ –£—Ä–æ–≤–µ–Ω—å ${level}: ${rate}% ‚úÖ`);
    }
    
    // –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ —Å –¥–æ—Ö–æ–¥–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
    console.log('  ‚îú‚îÄ –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ —Å –¥–æ—Ö–æ–¥–∞ 100 UNI...');
    const farmingIncome = 100;
    const level1Commission = farmingIncome * 0.05;
    const level2Commission = farmingIncome * 0.03;
    console.log(`  ‚îÇ  ‚îú‚îÄ –£—Ä–æ–≤–µ–Ω—å 1: ${level1Commission} UNI ‚úÖ`);
    console.log(`  ‚îÇ  ‚îî‚îÄ –£—Ä–æ–≤–µ–Ω—å 2: ${level2Commission} UNI ‚úÖ`);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
    console.log('  ‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç (–Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 212%)...');
    let totalPercentage = 0;
    for (let level = 1; level <= 20; level++) {
      const rate = level === 1 ? 100 : 
                   level === 2 ? 5 :
                   level === 3 ? 3 :
                   level === 4 ? 2 :
                   level === 5 ? 1.5 :
                   level <= 10 ? 1 :
                   level <= 15 ? 0.5 :
                   0.1;
      totalPercentage += rate;
    }
    console.log(`  ‚îÇ  ‚îî‚îÄ –°—É–º–º–∞—Ä–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: ${totalPercentage}% ${totalPercentage === 212 ? '‚úÖ' : '‚ùå'}`);
    
    console.log('  ‚îî‚îÄ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏: PASSED ‚úÖ\n');
    return true;
  } catch (error) {
    console.log(`  ‚îî‚îÄ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏: FAILED ‚ùå - ${error.message}\n`);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í UNIFARM\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  const results = {
    jwt: await testJWTAuth(),
    deposits: await testDeposits(),
    withdrawals: await testWithdrawals(),
    internal: await testInternalOperations(),
    referrals: await testReferralCommissions()
  };
  
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  
  const passed = Object.values(results).filter(r => r).length;
  const total = Object.keys(results).length;
  
  console.log(`\n  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
  console.log(`  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);
  
  if (passed === total) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ\n');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´ ‚ö†Ô∏è\n');
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–∏—Å—Ç–∫–∞
  console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { runAllTests, testJWTAuth, testDeposits, testWithdrawals, testInternalOperations, testReferralCommissions };