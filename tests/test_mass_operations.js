#!/usr/bin/env node
/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è rate limiting
 */

const fetch = require('node-fetch');

const BASE_URL = process.env.REPLIT_DEV_DOMAIN 
  ? `https://${process.env.REPLIT_DEV_DOMAIN}` 
  : 'http://localhost:3000';

const TEST_JWT = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4ODgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE5Njk5ODQsImV4cCI6MTc1MjU3NDc4NH0.lFSaXGQxMTu7qW9oYT8dcqD1C3YpgGF4vPrLIgUUGFg';

async function testMassOperations() {
  console.log('üî• –¢–ï–°–¢ –ú–ê–°–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø RATE LIMITING');
  console.log(`üåê URL: ${BASE_URL}`);
  console.log(`üîë JWT —Ç–æ–∫–µ–Ω: ${TEST_JWT.substring(0, 50)}...`);
  console.log('');

  const endpoints = [
    '/api/v2/transactions',
    '/api/v2/farming/status', 
    '/api/v2/wallet/balance?user_id=48',
    '/api/v2/boost/farming-status?user_id=48',
    '/api/v2/daily-bonus/claim'
  ];

  for (const endpoint of endpoints) {
    console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${endpoint}:`);
    
    let successCount = 0;
    let errorCount = 0;
    let rateLimitCount = 0;
    
    // –î–µ–ª–∞–µ–º 50 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for (let i = 1; i <= 50; i++) {
      try {
        const method = endpoint.includes('claim') ? 'POST' : 'GET';
        const response = await fetch(`${BASE_URL}${endpoint}`, {
          method,
          headers: {
            'Authorization': `Bearer ${TEST_JWT}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.status === 200) {
          successCount++;
        } else if (response.status === 429) {
          rateLimitCount++;
          if (rateLimitCount === 1) {
            console.log(`  ‚ö†Ô∏è –ü–µ—Ä–≤–∞—è 429 –æ—à–∏–±–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ #${i}`);
          }
        } else {
          errorCount++;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        if (i % 10 === 0) {
          console.log(`  üìà ${i}/50: ‚úÖ${successCount} ‚ùå${errorCount} üö´${rateLimitCount}`);
        }
        
      } catch (error) {
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      await new Promise(resolve => setTimeout(resolve, 20));
    }
    
    const testPassed = rateLimitCount === 0;
    const status = testPassed ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    console.log(`  üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ${status} (${successCount}/50 —É—Å–ø–µ—à–Ω—ã—Ö, ${rateLimitCount} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)`);
  }
  
  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

if (require.main === module) {
  testMassOperations().catch(console.error);
}

module.exports = { testMassOperations };