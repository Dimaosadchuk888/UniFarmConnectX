/**
 * üîç UniFarm Pre-Test System Check
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
 */

let fetch;

async function initFetch() {
  if (!fetch) {
    const fetchModule = await import('node-fetch');
    fetch = fetchModule.default;
  }
  return fetch;
}

const CHECKS = {
  server_health: 'http://localhost:3000/health',
  api_health: 'http://localhost:3000/api/v2/health',
  auth_endpoint: 'http://localhost:3000/api/v2/auth/telegram',
  user_endpoint: 'http://localhost:3000/api/v2/user/profile',
  wallet_endpoint: 'http://localhost:3000/api/v2/wallet/balance',
  farming_endpoint: 'http://localhost:3000/api/v2/farming/status',
  boost_endpoint: 'http://localhost:3000/api/v2/boost/packages',
  referral_endpoint: 'http://localhost:3000/api/v2/referral/code',
  missions_endpoint: 'http://localhost:3000/api/v2/missions/list',
  transactions_endpoint: 'http://localhost:3000/api/v2/transactions'
};

class PreTestChecker {
  constructor() {
    this.results = {
      passed: 0,
      failed: 0,
      warnings: 0,
      details: []
    };
  }

  log(message, type = 'INFO') {
    const symbols = {
      'SUCCESS': '‚úÖ',
      'ERROR': '‚ùå',
      'WARNING': '‚ö†Ô∏è',
      'INFO': '‚ÑπÔ∏è'
    };
    console.log(`${symbols[type]} ${message}`);
  }

  async checkEndpoint(name, url, method = 'GET', expectedStatus = 200) {
    try {
      await initFetch();
      const response = await fetch(url, {
        method,
        timeout: 5000,
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const isSuccess = response.status === expectedStatus || response.status === 401; // 401 –¥–ª—è protected endpoints
      
      if (isSuccess) {
        this.results.passed++;
        this.log(`${name}: –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`, 'SUCCESS');
        this.results.details.push({
          check: name,
          status: 'PASSED',
          url,
          response_status: response.status
        });
      } else {
        this.results.failed++;
        this.log(`${name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`, 'ERROR');
        this.results.details.push({
          check: name,
          status: 'FAILED',
          url,
          response_status: response.status
        });
      }
      
      return isSuccess;
    } catch (error) {
      this.results.failed++;
      this.log(`${name}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - ${error.message}`, 'ERROR');
      this.results.details.push({
        check: name,
        status: 'ERROR',
        url,
        error: error.message
      });
      return false;
    }
  }

  async checkDatabase() {
    try {
      await initFetch();
      // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ health endpoint
      const response = await fetch('http://localhost:3000/api/v2/health', {
        timeout: 5000
      });

      if (response.ok) {
        const data = await response.json();
        
        if (data.database === 'connected' || data.supabase === 'connected') {
          this.results.passed++;
          this.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'SUCCESS');
          this.results.details.push({
            check: 'database_connection',
            status: 'PASSED',
            details: data
          });
          return true;
        }
      }
      
      this.results.warnings++;
      this.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω', 'WARNING');
      this.results.details.push({
        check: 'database_connection',
        status: 'WARNING',
        details: 'Unable to determine database status'
      });
      return false;
    } catch (error) {
      this.results.failed++;
      this.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ${error.message}`, 'ERROR');
      this.results.details.push({
        check: 'database_connection',
        status: 'ERROR',
        error: error.message
      });
      return false;
    }
  }

  async checkEnvironmentVariables() {
    const requiredVars = [
      'SUPABASE_URL',
      'SUPABASE_KEY',
      'JWT_SECRET',
      'TELEGRAM_BOT_TOKEN'
    ];

    let envChecksPassed = 0;
    
    try {
      await initFetch();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API endpoint, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      const response = await fetch('http://localhost:3000/api/v2/health', {
        timeout: 5000
      });

      if (response.ok) {
        const data = await response.json();
        
        // –ï—Å–ª–∏ health endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
        envChecksPassed = requiredVars.length;
        this.results.passed++;
        this.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'SUCCESS');
        this.results.details.push({
          check: 'environment_variables',
          status: 'PASSED',
          details: 'Environment variables appear to be configured'
        });
        return true;
      }
    } catch (error) {
      // –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API
    }

    this.results.warnings++;
    this.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å', 'WARNING');
    this.results.details.push({
      check: 'environment_variables',
      status: 'WARNING',
      details: 'Unable to verify environment variables'
    });
    return false;
  }

  async runAllChecks() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UniFarm –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    await this.checkEndpoint('–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä', CHECKS.server_health);
    await this.checkEndpoint('API —Å–µ—Ä–≤–µ—Ä', CHECKS.api_health);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await this.checkDatabase();

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    await this.checkEnvironmentVariables();

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints:');
    await this.checkEndpoint('Auth API', CHECKS.auth_endpoint, 'POST', 400); // –û–∂–∏–¥–∞–µ–º 400 –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    await this.checkEndpoint('User API', CHECKS.user_endpoint, 'GET', 401); // –û–∂–∏–¥–∞–µ–º 401 –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    await this.checkEndpoint('Wallet API', CHECKS.wallet_endpoint, 'GET', 401);
    await this.checkEndpoint('Farming API', CHECKS.farming_endpoint, 'GET', 401);
    await this.checkEndpoint('Boost API', CHECKS.boost_endpoint, 'GET', 401);
    await this.checkEndpoint('Referral API', CHECKS.referral_endpoint, 'GET', 401);
    await this.checkEndpoint('Missions API', CHECKS.missions_endpoint, 'GET', 401);
    await this.checkEndpoint('Transactions API', CHECKS.transactions_endpoint, 'GET', 401);

    // 5. –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.generateSummary();
  }

  generateSummary() {
    const total = this.results.passed + this.results.failed + this.results.warnings;
    const successRate = Math.round((this.results.passed / total) * 100);

    console.log('\n' + '='.repeat(50));
    console.log('üìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò –ì–û–¢–û–í–ù–û–°–¢–ò');
    console.log('='.repeat(50));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.results.passed}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${this.results.failed}`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.warnings}`);
    console.log(`üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (successRate >= 80) {
      console.log('\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π: node tests/run_tests.js');
    } else if (successRate >= 60) {
      console.log('\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.');
    } else {
      console.log('\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.');
      console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.');
    }

    console.log('\nüìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    this.results.details.forEach(detail => {
      const symbol = detail.status === 'PASSED' ? '‚úÖ' : 
                   detail.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${symbol} ${detail.check}`);
      if (detail.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
      }
    });

    console.log('='.repeat(50));

    return successRate >= 80;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  const checker = new PreTestChecker();
  
  try {
    const isReady = await checker.runAllChecks();
    process.exit(isReady ? 0 : 1);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { PreTestChecker };