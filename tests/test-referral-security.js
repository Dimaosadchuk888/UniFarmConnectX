#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ referral endpoints
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 */

import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000/api/v2';
const VALID_JWT = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbUlkIjoxMjM0NTY3ODksInVzZXJuYW1lIjoidGVzdHVzZXIiLCJyZWZDb2RlIjoiUkVGXzE3NTA5NTI1NzY2MTRfdDkzOHZzIiwiaWF0IjoxNzM2MDA0NzM1LCJleHAiOjE3MzY2MDk1MzV9._3DiLQJvRsBm8XUrRVaI-j_FX4_f7LNVQAEXfHZhcS0';

// Endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const ENDPOINTS_TO_TEST = [
  '/referral/stats',
  '/referral/debug-stats',
  '/referral/test-routing',
  '/referrals/stats',
  '/referrals/debug-stats',
  '/referrals/test-routing',
  '/referral/levels',
  '/referrals/levels'
];

async function testEndpoint(endpoint, withAuth = false) {
  const headers = withAuth ? {
    'Authorization': `Bearer ${VALID_JWT}`,
    'Content-Type': 'application/json'
  } : {
    'Content-Type': 'application/json'
  };

  try {
    const response = await fetch(`${API_BASE}${endpoint}`, { headers });
    const statusCode = response.status;
    const body = await response.text();
    
    let parsedBody;
    try {
      parsedBody = JSON.parse(body);
    } catch {
      parsedBody = body;
    }

    return {
      endpoint,
      withAuth,
      statusCode,
      body: parsedBody
    };
  } catch (error) {
    return {
      endpoint,
      withAuth,
      error: error.message
    };
  }
}

async function runTests() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ referral endpoints\n');
  console.log('API Base:', API_BASE);
  console.log('=====================================\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  console.log('üìã –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å—ã –ë–ï–ó —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 401 Unauthorized\n');

  for (const endpoint of ENDPOINTS_TO_TEST) {
    const result = await testEndpoint(endpoint, false);
    const isSecure = result.statusCode === 401 || result.statusCode === 404;
    const icon = isSecure ? '‚úÖ' : '‚ùå';
    
    console.log(`${icon} ${endpoint}`);
    console.log(`   Status: ${result.statusCode}`);
    if (result.body && typeof result.body === 'object') {
      console.log(`   Response: ${JSON.stringify(result.body)}`);
    }
    console.log('');
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  console.log('\nüìã –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å—ã –° —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 200 OK –∏–ª–∏ 404 Not Found\n');

  for (const endpoint of ENDPOINTS_TO_TEST.filter(e => e.includes('/stats') || e.includes('/levels'))) {
    const result = await testEndpoint(endpoint, true);
    const icon = result.statusCode === 200 || result.statusCode === 404 ? '‚úÖ' : '‚ùå';
    
    console.log(`${icon} ${endpoint}`);
    console.log(`   Status: ${result.statusCode}`);
    if (result.body && typeof result.body === 'object' && result.statusCode === 200) {
      console.log(`   Has data: ${result.body.success ? 'Yes' : 'No'}`);
    }
    console.log('');
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('=====================================');
  
  const unsecuredEndpoints = [];
  for (const endpoint of ENDPOINTS_TO_TEST) {
    const result = await testEndpoint(endpoint, false);
    if (result.statusCode !== 401 && result.statusCode !== 404) {
      unsecuredEndpoints.push(endpoint);
    }
  }

  if (unsecuredEndpoints.length === 0) {
    console.log('‚úÖ –í—Å–µ endpoints –∑–∞—â–∏—â–µ–Ω—ã!');
    console.log('   –ù–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
  } else {
    console.log('‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints!');
    unsecuredEndpoints.forEach(endpoint => {
      console.log(`   - ${endpoint}`);
    });
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);