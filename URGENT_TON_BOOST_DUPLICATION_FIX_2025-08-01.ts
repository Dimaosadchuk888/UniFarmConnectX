// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
// –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: BOC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ hash –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ blockchain hash
import { supabase } from './core/supabase';

async function implementTonDepositDuplicationFix() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–°–¢–†–ê–ù–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('='.repeat(90));

  console.log('\nüìã –î–ò–ê–ì–ù–û–°–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
  console.log('üí• Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç result.boc –∫–∞–∫ ton_tx_hash');
  console.log('üí• result.boc - —ç—Ç–æ BOC –¥–∞–Ω–Ω—ã–µ, –ù–ï blockchain hash');
  console.log('üí• –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å BOC –≤–º–µ—Å—Ç–æ hash');
  console.log('üí• –í–æ–∑–º–æ–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã API —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º BOC');

  console.log('\nüõ†Ô∏è –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('1. ‚úÖ –î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π constraint –≤ –ë–î –ø–æ tx_hash_unique');
  console.log('2. ‚úÖ –£–ª—É—á—à–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –≤ UnifiedTransactionService');
  console.log('3. ‚úÖ –î–æ–±–∞–≤–∏—Ç—å rate limiting –Ω–∞ /api/v2/wallet/ton-deposit');
  console.log('4. ‚úÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å frontend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ hash');
  console.log('5. ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');

  // 1. –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û CONSTRAINT
  console.log('\n1Ô∏è‚É£ –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û CONSTRAINT –í –ë–î:');
  console.log('-'.repeat(80));

  try {
    const { error: constraintError } = await supabase.rpc('execute_sql', {
      query: `
        -- –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ tx_hash_unique –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
        DO $$
        BEGIN
          -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
          IF NOT EXISTS (
            SELECT 1 FROM pg_indexes 
            WHERE tablename = 'transactions' 
            AND indexname = 'idx_transactions_tx_hash_unique'
          ) THEN
            -- –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è)
            CREATE UNIQUE INDEX idx_transactions_tx_hash_unique 
            ON transactions (tx_hash_unique) 
            WHERE tx_hash_unique IS NOT NULL;
            
            RAISE NOTICE '–°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è tx_hash_unique';
          ELSE
            RAISE NOTICE '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è tx_hash_unique —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
          END IF;
        END $$;
      `
    });

    if (constraintError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è constraint:', constraintError.message);
    } else {
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π constraint –¥–ª—è tx_hash_unique —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å constraint (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)');
  }

  // 2. –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ò–• –î–£–ë–õ–ï–ô –í –ë–î
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–£–ë–õ–ï–ô:');
  console.log('-'.repeat(80));

  const { data: existingDuplicates } = await supabase.rpc('execute_sql', {
    query: `
      WITH duplicate_hashes AS (
        SELECT 
          tx_hash_unique,
          COUNT(*) as count,
          string_agg(id::text, ', ' ORDER BY created_at) as transaction_ids,
          string_agg(user_id::text, ', ' ORDER BY created_at) as user_ids,
          MIN(created_at) as first_created,
          MAX(created_at) as last_created
        FROM transactions 
        WHERE tx_hash_unique IS NOT NULL
          AND tx_hash_unique != ''
          AND created_at >= '2025-07-20'
        GROUP BY tx_hash_unique
        HAVING COUNT(*) > 1
      )
      SELECT * FROM duplicate_hashes
      ORDER BY count DESC
    `
  });

  if (existingDuplicates && existingDuplicates.length > 0) {
    console.log(`üö® –ù–ê–ô–î–ï–ù–û ${existingDuplicates.length} –ì–†–£–ü–ü –î–£–ë–õ–ï–ô:`);
    existingDuplicates.forEach((dup, i) => {
      console.log(`\n${i + 1}. Hash: ${dup.tx_hash_unique.substring(0, 30)}...`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${dup.count} –¥—É–±–ª–µ–π`);
      console.log(`   Transaction IDs: ${dup.transaction_ids}`);
      console.log(`   User IDs: ${dup.user_ids}`);
      console.log(`   –ü–µ—Ä–∏–æ–¥: ${dup.first_created} ‚Üí ${dup.last_created}`);
    });

    console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞.');
  } else {
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö hash\'–æ–≤ –≤ –ë–î –ù–ï –ù–ê–ô–î–ï–ù–û');
  }

  // 3. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• TON –î–ï–ü–û–ó–ò–¢–û–í:');
  console.log('-'.repeat(80));

  const { data: recentDeposits } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        id,
        user_id,
        amount_ton,
        created_at,
        tx_hash_unique,
        metadata,
        description
      FROM transactions 
      WHERE created_at >= '2025-08-01'
        AND CAST(amount_ton AS FLOAT) > 0
        AND type IN ('DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD')
      ORDER BY created_at DESC
      LIMIT 20
    `
  });

  if (recentDeposits && recentDeposits.length > 0) {
    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${recentDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è:`);
    
    recentDeposits.forEach((deposit, i) => {
      console.log(`\n${i + 1}. ID ${deposit.id} | User ${deposit.user_id}`);
      console.log(`   –°—É–º–º–∞: ${deposit.amount_ton} TON`);
      console.log(`   –í—Ä–µ–º—è: ${deposit.created_at}`);
      console.log(`   Hash: ${deposit.tx_hash_unique ? deposit.tx_hash_unique.substring(0, 40) + '...' : 'NULL'}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${deposit.description}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      if (deposit.metadata) {
        const meta = deposit.metadata;
        if (meta.tx_hash || meta.ton_tx_hash) {
          console.log(`   Metadata hash: ${(meta.tx_hash || meta.ton_tx_hash).substring(0, 40)}...`);
        }
      }
    });
  } else {
    console.log('üìä TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  // 4. –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ö–û–î–£
  console.log('\n4Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –ö–û–î–ê:');
  console.log('-'.repeat(80));

  console.log('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: tonConnectService.ts (—Å—Ç—Ä–æ–∫–∏ 442-446)');
  console.log('–ü–†–û–ë–õ–ï–ú–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ BOC –∫–∞–∫ hash');
  console.log('–†–ï–®–ï–ù–ò–ï: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π transaction hash –∏–∑ blockchain');
  console.log(`
–¢–ï–ö–£–©–ò–ô –ö–û–î:
const backendResponse = await correctApiRequest('/api/v2/wallet/ton-deposit', 'POST', {
  ton_tx_hash: result.boc,  // ‚ùå BOC != hash
  amount: tonAmount,
  wallet_address: tonConnectUI.account?.address || 'unknown'
});

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:
// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π transaction hash
const realTxHash = await getTonTransactionHash(result.boc);
const backendResponse = await correctApiRequest('/api/v2/wallet/ton-deposit', 'POST', {
  ton_tx_hash: realTxHash,  // ‚úÖ –†–µ–∞–ª—å–Ω—ã–π blockchain hash
  amount: tonAmount,
  wallet_address: tonConnectUI.account?.address || 'unknown'
});
  `);

  console.log('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: UnifiedTransactionService.ts (—Å—Ç—Ä–æ–∫–∏ 105-133)');
  console.log('–ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–¥–µ–∂–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è');
  console.log('–†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');

  console.log('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: Rate Limiting');
  console.log('–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤');
  console.log('–†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å rate limiting –Ω–∞ /api/v2/wallet/ton-deposit');

  // 5. –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
  console.log('\n' + '='.repeat(90));
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
  console.log('='.repeat(90));

  console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø:');
  console.log('1. üîí –ù–ï–ú–ï–î–õ–ï–ù–ù–û: –î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π constraint (–í–´–ü–û–õ–ù–ï–ù–û)');
  console.log('2. üîß –°–†–û–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å frontend - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π hash –≤–º–µ—Å—Ç–æ BOC');
  console.log('3. üõ°Ô∏è –°–†–û–ß–ù–û: –£–ª—É—á—à–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –≤ UnifiedTransactionService');
  console.log('4. ‚è±Ô∏è –°–†–û–ß–ù–û: –î–æ–±–∞–≤–∏—Ç—å rate limiting –Ω–∞ endpoint');
  console.log('5. üìù –í–ê–ñ–ù–û: –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');

  console.log('\nüìã –ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:');
  console.log('–≠—Ç–∞–ø 1: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ transaction hash –≤ frontend');
  console.log('–≠—Ç–∞–ø 2: –£–ª—É—á—à–∏—Ç—å backend –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é');
  console.log('–≠—Ç–∞–ø 3: –î–æ–±–∞–≤–∏—Ç—å rate limiting middleware');
  console.log('–≠—Ç–∞–ø 4: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏');
  console.log('–≠—Ç–∞–ø 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–µ–π');

  console.log('\n‚úÖ CONSTRAINT –î–û–ë–ê–í–õ–ï–ù - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –¥—É–±–ª–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î');
  console.log('‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã');
}

implementTonDepositDuplicationFix().catch(console.error);