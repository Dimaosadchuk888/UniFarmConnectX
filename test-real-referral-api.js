/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û API ENDPOINT –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´
 */

import fetch from 'node-fetch';

async function testRealReferralAPI() {
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API /api/v2/referrals/stats –î–õ–Ø USER_ID=48');
  console.log('='.repeat(70));
  
  const baseUrl = 'http://localhost:3000'; // Replit Preview URL
  const url = `${baseUrl}/api/v2/referrals/stats?user_id=48`;
  
  try {
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6NDgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE2MTgyNjEsImV4cCI6MTc1MjIyMzA2MX0.-9-tDYq86Imbu-DnOFIx4smMKPR02vFkmKxWS26PT0o'
      }
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', errorText);
      return;
    }
    
    const data = await response.json();
    
    console.log('\n‚úÖ –û–¢–í–ï–¢ API:');
    console.log(JSON.stringify(data, null, 2));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (data.success && data.data) {
      const statsData = data.data;
      
      console.log('\nüìà –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:');
      console.log('-'.repeat(50));
      
      console.log(`üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${statsData.total_referrals}`);
      
      if (statsData.level_income && Object.keys(statsData.level_income).length > 0) {
        console.log('\nüí∞ –î–û–•–û–î–´ –ü–û –£–†–û–í–ù–Ø–ú:');
        Object.keys(statsData.level_income).sort((a, b) => parseInt(a) - parseInt(b)).forEach(level => {
          const income = statsData.level_income[level];
          console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${income.uni.toFixed(6)} UNI + ${income.ton.toFixed(6)} TON`);
        });
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥
        const totalUni = Object.values(statsData.level_income).reduce((sum, income) => sum + income.uni, 0);
        const totalTon = Object.values(statsData.level_income).reduce((sum, income) => sum + income.ton, 0);
        
        console.log(`\nüíé –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalUni.toFixed(6)} UNI + ${totalTon.toFixed(6)} TON`);
      } else {
        console.log('\nüí∞ –î–û–•–û–î–´: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö');
      }
      
      if (statsData.referral_counts && Object.keys(statsData.referral_counts).length > 0) {
        console.log('\nüë• –ü–ê–†–¢–ù–ï–†–´ –ü–û –£–†–û–í–ù–Ø–ú:');
        for (let level = 1; level <= 9; level++) {
          const count = statsData.referral_counts[level] || 0;
          if (count > 0) {
            console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${count} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤`);
          }
        }
      }
      
      console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –î–õ–Ø FRONTEND:');
      console.log(`   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${!!statsData.referral_counts}`);
      console.log(`   ‚úÖ –î–æ—Ö–æ–¥—ã –ø–æ —É—Ä–æ–≤–Ω—è–º: ${!!statsData.level_income}`);
      console.log(`   ‚úÖ –û–±—â–∏–π count –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${!!statsData.total_referrals}`);
      console.log(`   ‚úÖ –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${Array.isArray(statsData.referrals)}`);
      
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
  
  console.log('\n' + '='.repeat(70));
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

testRealReferralAPI().catch(console.error);