/**
 * –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–ê
 * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ —Å–ø–∏—Å–∞–Ω–∏–µ TON
 */

import { supabase } from './core/supabaseClient';

async function deepBalanceDiagnostic() {
  console.log('üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–ê');
  console.log('=' .repeat(80));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–ª—è User 25
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User 25 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å');
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: true });
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
    const boostPurchases = transactions.filter(tx => tx.type === 'BOOST_PURCHASE');
    const withdrawals = transactions.filter(tx => tx.type === 'WITHDRAWAL' || tx.type === 'withdrawal');
    const dailyBonuses = transactions.filter(tx => tx.type === 'DAILY_BONUS');
    
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log(`   üõí BOOST_PURCHASE: ${boostPurchases.length}`);
    console.log(`   üí∏ WITHDRAWAL/withdrawal: ${withdrawals.length}`);
    console.log(`   üéÅ DAILY_BONUS: ${dailyBonuses.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó BOOST_PURCHASE –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    boostPurchases.forEach((tx, index) => {
      console.log(`\n   üìú BOOST_PURCHASE ${index + 1}:`);
      console.log(`      ID: ${tx.id}`);
      console.log(`      Amount: ${tx.amount} ${tx.currency}`);
      console.log(`      Amount_TON: ${tx.amount_ton}`);
      console.log(`      Amount_UNI: ${tx.amount_uni}`);
      console.log(`      Status: ${tx.status}`);
      console.log(`      Description: ${tx.description}`);
      console.log(`      Created: ${tx.created_at}`);
      console.log(`      Metadata: ${JSON.stringify(tx.metadata, null, 6)}`);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞–∫ amount
      const amount = parseFloat(tx.amount || '0');
      const amountTon = parseFloat(tx.amount_ton || '0');
      
      if (amount > 0 || amountTon > 0) {
        console.log(`      üö® –ü–†–û–ë–õ–ï–ú–ê: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–ê–Ø –°–£–ú–ú–ê! –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è`);
      }
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ User 25
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –ë–ê–õ–ê–ù–°–ê User 25');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: currentUser, error: userError } = await supabase
      .from('users')
      .select('id, username, balance_ton, balance_uni, updated_at')
      .eq('id', 25)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
    } else {
      console.log('\nüí∞ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° User 25:');
      console.log(`   TON: ${currentUser.balance_ton}`);
      console.log(`   UNI: ${currentUser.balance_uni}`);
      console.log(`   Last Updated: ${currentUser.updated_at}`);
    }
    
    // 3. –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n3Ô∏è‚É£ –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ì–û –ë–ê–õ–ê–ù–°–ê –ù–ê –û–°–ù–û–í–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    
    let expectedTonBalance = 0;
    let expectedUniBalance = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 25
    const { data: allTransactions, error: allTxError } = await supabase
      .from('transactions')
      .select('type, amount, currency, amount_ton, amount_uni, description, created_at')
      .eq('user_id', 25)
      .order('created_at', { ascending: true });
    
    if (allTxError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTxError.message);
    } else {
      console.log(`\nüßÆ –ü–ï–†–ï–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê (–≤—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions.length})`);
      
      allTransactions.forEach((tx, index) => {
        const tonAmount = parseFloat(tx.amount_ton || '0');
        const uniAmount = parseFloat(tx.amount_uni || '0');
        const generalAmount = parseFloat(tx.amount || '0');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏ —Å—É–º–º—É
        if (tx.currency === 'TON' || tonAmount !== 0) {
          const actualAmount = tonAmount !== 0 ? tonAmount : generalAmount;
          expectedTonBalance += actualAmount;
          
          if (index < 10 || tx.type === 'BOOST_PURCHASE') { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–ª–∏ –≤—Å–µ BOOST_PURCHASE
            console.log(`     ${index + 1}. ${tx.type}: ${actualAmount > 0 ? '+' : ''}${actualAmount} TON | Balance: ${expectedTonBalance.toFixed(6)} TON`);
          }
        }
        
        if (tx.currency === 'UNI' || uniAmount !== 0) {
          const actualAmount = uniAmount !== 0 ? uniAmount : generalAmount;
          expectedUniBalance += actualAmount;
        }
      });
      
      console.log(`\nüìä –ò–¢–û–ì–û–í–´–ï –†–ê–°–ß–ï–¢–´:`);
      console.log(`   üíé –û–∂–∏–¥–∞–µ–º—ã–π TON –±–∞–ª–∞–Ω—Å: ${expectedTonBalance.toFixed(6)} TON`);
      console.log(`   üíé –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π TON –±–∞–ª–∞–Ω—Å: ${currentUser.balance_ton} TON`);
      console.log(`   üí∞ –û–∂–∏–¥–∞–µ–º—ã–π UNI –±–∞–ª–∞–Ω—Å: ${expectedUniBalance.toFixed(6)} UNI`);
      console.log(`   üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π UNI –±–∞–ª–∞–Ω—Å: ${currentUser.balance_uni} UNI`);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô
      const tonDifference = parseFloat(currentUser.balance_ton) - expectedTonBalance;
      const uniDifference = parseFloat(currentUser.balance_uni) - expectedUniBalance;
      
      console.log(`\nüö® –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:`);
      console.log(`   TON —Ä–∞–∑–Ω–∏—Ü–∞: ${tonDifference > 0 ? '+' : ''}${tonDifference.toFixed(6)} TON`);
      console.log(`   UNI —Ä–∞–∑–Ω–∏—Ü–∞: ${uniDifference > 0 ? '+' : ''}${uniDifference.toFixed(6)} UNI`);
      
      if (Math.abs(tonDifference) > 0.01) {
        console.log(`   ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï TON: ${Math.abs(tonDifference).toFixed(6)} TON`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ BOOST_PURCHASE –ø–æ–¥—Ä–æ–±–Ω–æ
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• BOOST_PURCHASE –û–ü–ï–†–ê–¶–ò–ô');
    
    const recentBoosts = boostPurchases.slice(-4); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4
    recentBoosts.forEach((tx, index) => {
      console.log(`\nüõí BOOST_PURCHASE ${index + 1} (ID: ${tx.id}):`);
      console.log(`   –í—Ä–µ–º—è: ${tx.created_at}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`   Amount –ø–æ–ª–µ: ${tx.amount} ${tx.currency}`);
      console.log(`   Amount_TON –ø–æ–ª–µ: ${tx.amount_ton}`);
      console.log(`   Amount_UNI –ø–æ–ª–µ: ${tx.amount_uni}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏
      console.log(`   ‚ùì –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –°–ü–ò–°–ê–ù–ò–ï -1 TON`);
      console.log(`   ‚ùó –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: ${tx.amount > 0 ? '–ù–ê–ß–ò–°–õ–ï–ù–ò–ï' : '–°–ü–ò–°–ê–ù–ò–ï'} ${tx.amount} TON`);
      
      if (parseFloat(tx.amount) > 0) {
        console.log(`   üö® –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –í–ú–ï–°–¢–û –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–û–ô!`);
      }
    });
    
    console.log('\n5Ô∏è‚É£ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
    console.log('=' .repeat(80));
    console.log('üéØ –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê –ù–ê–ô–î–ï–ù–ê:');
    console.log('   BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ú–ò —Å—É–º–º–∞–º–∏ (+1 TON)');
    console.log('   –≤–º–µ—Å—Ç–æ –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–• —Å—É–º–º (-1 TON) –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è');
    console.log('');
    console.log('üìç –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´:');
    console.log('   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞—é—â–∏–π BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('   –ù–ï –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –¥–ª—è amount –ø–æ–ª—è');
    console.log('');
    console.log('üí• –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('   –í–º–µ—Å—Ç–æ —Å–ø–∏—Å–∞–Ω–∏—è -1 TON —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç +1 TON');
    console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–≤–æ–π–Ω—É—é –≤—ã–≥–æ–¥—É: —Ç–æ–≤–∞—Ä + –¥–µ–Ω—å–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ');
    
  } catch (error) {
    console.log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

deepBalanceDiagnostic().catch(console.error);