import { supabase } from './core/supabaseClient';

async function checkUser253() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 253 –í SUPABASE');
  console.log('='.repeat(50));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 253
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 253:');
    const { data: user253, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 253)
      .single();

    if (userError) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 253 –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError.message);
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 253 –Ω–∞–π–¥–µ–Ω:');
      console.log(`   - ID: ${user253.id}`);
      console.log(`   - Telegram ID: ${user253.telegram_id}`);
      console.log(`   - Username: ${user253.username}`);
      console.log(`   - UNI Balance: ${user253.balance_uni}`);
      console.log(`   - TON Balance: ${user253.balance_ton}`);
      console.log(`   - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user253.created_at}`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 253 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    console.log('\n2Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 253 –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 3 –î–ù–Ø:');
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 253)
      .gte('created_at', new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);
      
      if (transactions && transactions.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        const txByType: { [key: string]: any[] } = {};
        transactions.forEach(tx => {
          const type = tx.type || tx.transaction_type || 'UNKNOWN';
          if (!txByType[type]) txByType[type] = [];
          txByType[type].push(tx);
        });

        Object.keys(txByType).forEach(type => {
          const txs = txByType[type];
          console.log(`\n   üìä ${type}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          txs.slice(0, 3).forEach((tx, idx) => {
            console.log(`      ${idx + 1}. ${tx.created_at}`);
            console.log(`         Amount: ${tx.amount || tx.amount_ton || tx.amount_uni || '0'}`);
            console.log(`         Description: ${tx.description || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
            console.log(`         Status: ${tx.status || 'unknown'}`);
          });
        });

        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ TON –¥–µ–ø–æ–∑–∏—Ç—ã
        const tonDeposits = transactions.filter(tx => 
          (tx.type && tx.type.includes('DEPOSIT')) ||
          (tx.description && tx.description.toLowerCase().includes('deposit')) ||
          (tx.description && tx.description.toLowerCase().includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'))
        );

        if (tonDeposits.length > 0) {
          console.log('\nüéØ TON –î–ï–ü–û–ó–ò–¢–´:');
          tonDeposits.forEach((tx, idx) => {
            console.log(`   ${idx + 1}. [${tx.created_at}]`);
            console.log(`      Amount TON: ${tx.amount_ton || '0'}`);
            console.log(`      Amount UNI: ${tx.amount_uni || '0'}`);
            console.log(`      Type: ${tx.type || tx.transaction_type}`);
            console.log(`      Description: ${tx.description}`);
            console.log(`      Status: ${tx.status}`);
            console.log('      ---');
          });
        }
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\n3Ô∏è‚É£ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú:');
    const { count: totalUsers, error: countError } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });

    if (!countError) {
      console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Supabase: ${totalUsers}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ID
    const { data: minMaxUsers, error: minMaxError } = await supabase
      .from('users')
      .select('id')
      .order('id', { ascending: true })
      .limit(1);

    const { data: maxUsers, error: maxError } = await supabase
      .from('users')
      .select('id')
      .order('id', { ascending: false })
      .limit(1);

    if (!minMaxError && !maxError && minMaxUsers && maxUsers) {
      console.log(`üìä –î–∏–∞–ø–∞–∑–æ–Ω ID: –æ—Ç ${minMaxUsers[0]?.id} –¥–æ ${maxUsers[0]?.id}`);
    }

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUser253().catch(console.error);