// –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –ò–º–ø–æ—Ä—Ç ReferralService
const { ReferralService } = require('./modules/referral/service');

async function testDirectReferral() {
  console.log('=== –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===');
  
  const testTelegramId = Date.now();
  const testUsername = `test_${testTelegramId}`;
  const refCode = 'REF_1752755835358_yjrusv'; // User 184
  
  let newUserId = null;
  
  try {
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert({
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: 'Test User',
        ref_code: `REF_${testTelegramId}_test`,
        referred_by: null,
        balance_uni: '0',
        balance_ton: '0',
        created_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (createError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError.message);
      return;
    }
    
    newUserId = newUser.id;
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=${newUserId}`);
    
    // –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º processReferral –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ processReferral...');
    
    const referralService = new ReferralService();
    const result = await referralService.processReferral(refCode, newUserId.toString());
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç processReferral:');
    console.log(`   success: ${result.success}`);
    console.log(`   error: ${result.error || '–Ω–µ—Ç'}`);
    console.log(`   referrerId: ${result.referrerId || '–Ω–µ—Ç'}`);
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º users
    const { data: updatedUser, error: userError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('id', newUserId)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${updatedUser.id}, referred_by=${updatedUser.referred_by}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º referrals
    const { data: referralRecords, error: referralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUserId);
    
    if (referralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referrals:', referralError.message);
    } else {
      console.log(`‚úÖ Referrals: ${referralRecords.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (referralRecords.length > 0) {
        referralRecords.forEach(record => {
          console.log(`   user_id=${record.user_id}, inviter_id=${record.inviter_id}, level=${record.level}`);
        });
      }
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    
    const success = result.success && updatedUser.referred_by === 184 && referralRecords.length > 0;
    
    if (success) {
      console.log('üéâ –£–°–ü–ï–•! processReferral —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê! processReferral –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('   –ü—Ä–æ–±–ª–µ–º—ã:');
      
      if (!result.success) {
        console.log(`   - processReferral –≤–µ—Ä–Ω—É–ª success=false: ${result.error}`);
      }
      
      if (updatedUser.referred_by !== 184) {
        console.log(`   - referred_by –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${updatedUser.referred_by} –≤–º–µ—Å—Ç–æ 184)`);
      }
      
      if (referralRecords.length === 0) {
        console.log('   - –ó–∞–ø–∏—Å–∏ –≤ referrals –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.log('Stack:', error.stack);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    if (newUserId) {
      console.log('\n4. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –£–¥–∞–ª—è–µ–º referrals
      await supabase.from('referrals').delete().eq('user_id', newUserId);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase.from('users').delete().eq('id', newUserId);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
  }
}

testDirectReferral().catch(console.error);