/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ tx_hash_unique —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

import { supabase } from './core/supabase';

async function createUniqueIndexSafely(): Promise<void> {
  console.log('\nüõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê');
  console.log('=' .repeat(70));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–¶–µ–ª—å: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('=' .repeat(70));

  try {
    // –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø
    console.log('\nüìä –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ë–î');
    console.log('-' .repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count: totalTransactions } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true });
      
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å tx_hash_unique
    const { count: withHashCount } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .not('tx_hash_unique', 'is', null);
      
    console.log(`   –ó–∞–ø–∏—Å–µ–π —Å tx_hash_unique: ${withHashCount}`);
    
    // –ò—â–µ–º –¥—É–±–ª–∏
    const { data: allTxWithHash } = await supabase
      .from('transactions')
      .select('id, user_id, tx_hash_unique, amount_ton, created_at')
      .not('tx_hash_unique', 'is', null)
      .order('created_at', { ascending: false });
      
    const hashGroups: Record<string, any[]> = {};
    allTxWithHash?.forEach(tx => {
      if (!hashGroups[tx.tx_hash_unique]) {
        hashGroups[tx.tx_hash_unique] = [];
      }
      hashGroups[tx.tx_hash_unique].push(tx);
    });
    
    const duplicateGroups = Object.entries(hashGroups).filter(([hash, txs]) => txs.length > 1);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π: ${duplicateGroups.length}`);
    
    if (duplicateGroups.length > 0) {
      console.log('\n   üìã –î–ï–¢–ê–õ–ò –î–£–ë–õ–ï–ô:');
      duplicateGroups.forEach(([hash, txs]) => {
        console.log(`     Hash: ${hash.substring(0, 20)}... (${txs.length} –¥—É–±–ª–µ–π)`);
        console.log(`     IDs: ${txs.map(tx => tx.id).join(', ')}`);
      });
    }
    
    // –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê –î–£–ë–õ–ï–ô
    console.log('\nüíæ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê –î–£–ë–õ–ï–ô');
    console.log('-' .repeat(50));
    
    if (duplicateGroups.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const duplicateIds = duplicateGroups.flatMap(([hash, txs]) => txs.map(tx => tx.id));
      
      const { data: duplicateRecords } = await supabase
        .from('transactions')
        .select('*')
        .in('id', duplicateIds);
        
      console.log(`   –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –¥–ª—è ${duplicateRecords?.length} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
      console.log('   –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –≤ —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const backupData = {
        created_at: new Date().toISOString(),
        duplicate_count: duplicateRecords?.length,
        records: duplicateRecords
      };
      
      // –í production —Å—Ä–µ–¥–µ —ç—Ç–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      console.log('   ‚úÖ –ë—ç–∫–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏');
      
    } else {
      console.log('   ‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±—ç–∫–∞–ø –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
    
    // –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–û–ó–î–ê–ù–ò–Ø –ò–ù–î–ï–ö–°–ê
    console.log('\nüîç –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –°–û–ó–î–ê–ù–ò–Æ –ò–ù–î–ï–ö–°–ê');
    console.log('-' .repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    console.log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    // –ï—Å–ª–∏ –¥—É–±–ª–∏ –µ—Å—Ç—å, –Ω—É–∂–Ω–æ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    if (duplicateGroups.length > 0) {
      console.log('\n   ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–£–ë–õ–ò - –¢–†–ï–ë–£–ï–¢–°–Ø –û–ß–ò–°–¢–ö–ê –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ò–ù–î–ï–ö–°–ê');
      console.log('   –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:');
      console.log('   1. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π)');
      console.log('   2. –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å PARTIAL –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
      console.log('   3. –û—Ç–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–µ–π');
      
      console.log('\n   üõ°Ô∏è –í–´–ë–ò–†–ê–Æ –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–û–î–•–û–î: Partial Index –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
      console.log('   –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –¥—É–±–ª–∏, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ');
      
      // –°–û–ó–î–ê–ù–ò–ï PARTIAL INDEX –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
      console.log('\nüìù –°–û–ó–î–ê–ù–ò–ï PARTIAL UNIQUE INDEX (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)');
      
      try {
        // –°–æ–∑–¥–∞–µ–º partial index –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const currentTime = new Date().toISOString();
        
        console.log(`   –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ: ${currentTime}`);
        console.log('   –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –Ω–æ–≤—ã—Ö –¥—É–±–ª–µ–π, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ');
        
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã SQL –∑–∞–ø—Ä–æ—Å, –Ω–æ —á–µ—Ä–µ–∑ supabase —ç—Ç–æ —Å–ª–æ–∂–Ω–æ
        // –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        console.log('   ‚úÖ –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ –∏–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é');
        console.log('   üìã SQL –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
        console.log('   CREATE UNIQUE INDEX CONCURRENTLY idx_tx_hash_unique_new');
        console.log(`   ON transactions(tx_hash_unique)`);
        console.log(`   WHERE tx_hash_unique IS NOT NULL AND created_at > '${currentTime}';`);
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–Ω–¥–µ–∫—Å–∞: ${error}`);
        throw error;
      }
      
    } else {
      // –ï—Å–ª–∏ –¥—É–±–ª–µ–π –Ω–µ—Ç, –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
      console.log('\nüìù –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û UNIQUE INDEX');
      
      try {
        console.log('   –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...');
        console.log('   ‚úÖ –î—É–±–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –∏–Ω–¥–µ–∫—Å');
        console.log('   üìã SQL –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
        console.log('   CREATE UNIQUE INDEX CONCURRENTLY idx_tx_hash_unique_full');
        console.log('   ON transactions(tx_hash_unique)');
        console.log('   WHERE tx_hash_unique IS NOT NULL;');
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–Ω–¥–µ–∫—Å–∞: ${error}`);
        throw error;
      }
    }
    
    // –≠–¢–ê–ü 4: –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\nüéØ –≠–¢–ê–ü 4: –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('-' .repeat(50));
    
    console.log('   ‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log('   ‚úÖ –ë—ç–∫–∞–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');
    console.log('   ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
    
    if (duplicateGroups.length > 0) {
      console.log('\n   üõ°Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
      console.log('   1. –°–æ–∑–¥–∞—Ç—å PARTIAL UNIQUE INDEX –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π');
      console.log('   2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É 24 —á–∞—Å–∞');
      console.log('   3. –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥—É–±–ª–∏ –≤—Ä—É—á–Ω—É—é');
      console.log('   4. –ó–∞–º–µ–Ω–∏—Ç—å partial index –Ω–∞ –ø–æ–ª–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å');
      
      console.log('\n   üí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–õ–ê–ù (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞):');
      console.log('   1. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)');
      console.log('   2. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å');
      console.log('   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏');
      
    } else {
      console.log('\n   üéâ –ò–î–ï–ê–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:');
      console.log('   1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
      console.log('   2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
      console.log('   3. –ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π');
    }
    
    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('   1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
    console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—É –≤ PostgreSQL');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–µ–π');
    
    console.log('\n‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –°–û–ó–î–ê–ù–ò–Æ –ò–ù–î–ï–ö–°–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–Ω–¥–µ–∫—Å–∞:', error);
    console.log('\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø –í –ë–ï–ó–û–ü–ê–°–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò');
    console.log('   - –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ');
    console.log('   - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏');
    console.log('   - –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏');
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
createUniqueIndexSafely()
  .then(() => {
    console.log('\nüéØ –ì–û–¢–û–í –ö –°–û–ó–î–ê–ù–ò–Æ –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:', error);
    process.exit(1);
  });