/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° TON –î–ï–ü–û–ó–ò–¢–ê–ú–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é —Ü–µ–ø–æ—á–∫—É –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';

async function diagnoseTonDepositChain() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° TON –î–ï–ü–û–ó–ò–¢–ê–ú–ò ===');
  console.log('–î–∞—Ç–∞: ' + new Date().toISOString());
  console.log('');
  
  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ USERS
    console.log('1. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –ë–ê–õ–ê–ù–°–ê –í –¢–ê–ë–õ–ò–¶–ï USERS:');
    console.log('=========================================');
    
    const { data: sampleUser, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, ton_wallet_address')
      .limit(1)
      .single();
    
    if (sampleUser) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
      console.log('   - id: ' + typeof sampleUser.id + ' (–∑–Ω–∞—á–µ–Ω–∏–µ: ' + sampleUser.id + ')');
      console.log('   - telegram_id: ' + typeof sampleUser.telegram_id);
      console.log('   - balance_uni: ' + typeof sampleUser.balance_uni + ' (–∑–Ω–∞—á–µ–Ω–∏–µ: ' + sampleUser.balance_uni + ')');
      console.log('   - balance_ton: ' + typeof sampleUser.balance_ton + ' (–∑–Ω–∞—á–µ–Ω–∏–µ: ' + sampleUser.balance_ton + ')');
      console.log('   - ton_wallet_address: ' + typeof sampleUser.ton_wallet_address);
      console.log('');
      console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –î–µ–ø–æ–∑–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª–µ balance_ton!');
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users:', userError);
    }
    
    // 2. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• TON –î–ï–ü–û–ó–ò–¢–û–í
    console.log('\n2. –ü–û–°–õ–ï–î–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–´ –í –°–ò–°–¢–ï–ú–ï:');
    console.log('=====================================');
    
    const { data: tonDeposits, error: depositsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (tonDeposits && tonDeposits.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonDeposits.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:\n`);
      
      for (const deposit of tonDeposits) {
        console.log(`–î–µ–ø–æ–∑–∏—Ç ID: ${deposit.id}`);
        console.log(`  - User ID: ${deposit.user_id}`);
        console.log(`  - –°—É–º–º–∞: ${deposit.amount} TON`);
        console.log(`  - –°—Ç–∞—Ç—É—Å: ${deposit.status}`);
        console.log(`  - –î–∞—Ç–∞: ${new Date(deposit.created_at).toLocaleString('ru-RU')}`);
        console.log(`  - Metadata: ${JSON.stringify(deposit.metadata || {})}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user } = await supabase
          .from('users')
          .select('id, balance_ton, balance_uni')
          .eq('id', deposit.user_id)
          .single();
        
        if (user) {
          console.log(`  - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
          console.log(`    ‚Ä¢ TON: ${user.balance_ton}`);
          console.log(`    ‚Ä¢ UNI: ${user.balance_uni}`);
        } else {
          console.log(`  - ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        }
        console.log('');
      }
    } else {
      console.log('‚ö†Ô∏è TON –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê TON_TRANSACTIONS
    console.log('\n3. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ TON_TRANSACTIONS:');
    console.log('======================================');
    
    const { data: tonTxs, error: txError } = await supabase
      .from('ton_transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (tonTxs && tonTxs.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonTxs.length} –∑–∞–ø–∏—Å–µ–π –≤ ton_transactions:\n`);
      
      for (const tx of tonTxs) {
        console.log(`TON TX ID: ${tx.id}`);
        console.log(`  - User ID: ${tx.user_id}`);
        console.log(`  - Hash: ${tx.ton_tx_hash?.substring(0, 20)}...`);
        console.log(`  - Amount: ${tx.amount} TON`);
        console.log(`  - Wallet: ${tx.wallet_address?.substring(0, 20)}...`);
        console.log(`  - Created: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        console.log('');
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ ton_transactions');
    }
    
    // 4. –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô
    console.log('\n4. –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:');
    console.log('=======================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º –Ω–æ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    const { data: problematicUsers } = await supabase
      .from('users')
      .select(`
        id,
        telegram_id,
        username,
        balance_ton,
        balance_uni,
        transactions!inner(
          id,
          type,
          amount,
          currency,
          created_at
        )
      `)
      .eq('transactions.type', 'TON_DEPOSIT')
      .eq('balance_ton', 0)
      .limit(5);
    
    if (problematicUsers && problematicUsers.length > 0) {
      console.log('‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´:');
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –Ω–æ –Ω—É–ª–µ–≤—ã–º balance_ton:\n');
      
      for (const user of problematicUsers) {
        console.log(`User ID ${user.id} (${user.username || 'no username'}):`);
        console.log(`  - balance_ton: ${user.balance_ton} (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ > 0)`);
        console.log(`  - balance_uni: ${user.balance_uni}`);
        
        if (user.transactions && Array.isArray(user.transactions)) {
          const tonDeposits = user.transactions.filter((t: any) => 
            t.type === 'TON_DEPOSIT' && t.currency === 'TON'
          );
          const totalDeposited = tonDeposits.reduce((sum: number, t: any) => 
            sum + parseFloat(t.amount || 0), 0
          );
          console.log(`  - –ù–∞–π–¥–µ–Ω–æ ${tonDeposits.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
          console.log(`  - –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposited} TON`);
          console.log(`  - ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –æ—Ç—Ä–∞–∂–µ–Ω—ã –≤ balance_ton!`);
        }
        console.log('');
      }
    } else {
      console.log('‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–µ–≤–∏–¥–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏');
    }
    
    // 5. –ü–†–û–í–ï–†–ö–ê –¶–ï–ü–û–ß–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
    console.log('\n5. –ü–†–û–í–ï–†–ö–ê –ú–ï–•–ê–ù–ò–ó–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:');
    console.log('==========================================');
    
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ balance_ton...');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ balance_ton
    const { data: recentlyUpdated } = await supabase
      .from('users')
      .select('id, username, balance_ton, updated_at')
      .gt('balance_ton', 0)
      .order('updated_at', { ascending: false })
      .limit(5);
    
    if (recentlyUpdated && recentlyUpdated.length > 0) {
      console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton:`);
      for (const user of recentlyUpdated) {
        const timeAgo = Date.now() - new Date(user.updated_at).getTime();
        const minutes = Math.floor(timeAgo / 60000);
        console.log(`  - User ${user.id}: ${user.balance_ton} TON (–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π balance_ton');
    }
    
    // 6. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
    console.log('\n6. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log('====================');
    
    console.log('üîç –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:');
    console.log('1. –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è TON –±–∞–ª–∞–Ω—Å–∞: balance_ton (—Ç–∏–ø: ' + typeof sampleUser?.balance_ton + ')');
    console.log('2. TON –¥–µ–ø–æ–∑–∏—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions');
    console.log('3. –ó–∞–ø–∏—Å–∏ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ ton_transactions');
    console.log('4. –ü–†–û–ë–õ–ï–ú–ê: balance_ton –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
    console.log('');
    console.log('‚ö†Ô∏è –í–ï–†–û–Ø–¢–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. BalanceManager –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('2. –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton');
    console.log('3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
    console.log('4. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é balance_ton');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
  
  console.log('\n=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseTonDepositChain();