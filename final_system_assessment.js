/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´ UNIFARM
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á –¥–æ 100% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

/**
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö API endpoints
 */
async function checkAllEndpoints() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê API ENDPOINTS ===');
  
  const criticalEndpoints = [
    '/health',
    '/api/v2/health',
    '/api/v2/auth/telegram',
    '/api/v2/users/profile',
    '/api/v2/farming/start',
    '/api/v2/boost/packages',
    '/api/v2/referral/info',
    '/api/v2/missions/list',
    '/api/v2/daily-bonus/claim',
    '/api/v2/ton-farming/info',
    '/api/v2/admin/stats'
  ];
  
  const results = [];
  
  for (const endpoint of criticalEndpoints) {
    try {
      const response = await fetch(`http://localhost:3000${endpoint}`);
      const status = response.status;
      const isWorking = status !== 404;
      
      results.push({
        endpoint,
        status,
        working: isWorking
      });
      
      console.log(`${isWorking ? '‚úÖ' : '‚ùå'} ${endpoint} - ${status}`);
    } catch (error) {
      results.push({
        endpoint,
        status: 'ERROR',
        working: false,
        error: error.message
      });
      console.log(`‚ùå ${endpoint} - ERROR: ${error.message}`);
    }
  }
  
  const workingCount = results.filter(r => r.working).length;
  const readiness = Math.round((workingCount / criticalEndpoints.length) * 100);
  
  console.log(`\nüìä API Endpoints: ${workingCount}/${criticalEndpoints.length} —Ä–∞–±–æ—Ç–∞—é—Ç (${readiness}%)`);
  
  return {
    total: criticalEndpoints.length,
    working: workingCount,
    readiness,
    results
  };
}

/**
 * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function checkDatabase() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===');
  
  const requiredTables = [
    'users',
    'transactions', 
    'boost_purchases',
    'missions',
    'mission_progress',
    'airdrop_claims',
    'wallet_logs',
    'daily_bonus_history'
  ];
  
  const tableStatus = [];
  
  for (const table of requiredTables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        tableStatus.push({
          table,
          exists: false,
          count: 0,
          error: error.message
        });
        console.log(`‚ùå ${table} - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: ${error.message}`);
      } else {
        tableStatus.push({
          table,
          exists: true,
          count: data?.length || 0
        });
        console.log(`‚úÖ ${table} - ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (err) {
      tableStatus.push({
        table,
        exists: false,
        count: 0,
        error: err.message
      });
      console.log(`‚ùå ${table} - –û–®–ò–ë–ö–ê: ${err.message}`);
    }
  }
  
  const existingTables = tableStatus.filter(t => t.exists).length;
  const dbReadiness = Math.round((existingTables / requiredTables.length) * 100);
  
  console.log(`\nüìä Database: ${existingTables}/${requiredTables.length} —Ç–∞–±–ª–∏—Ü (${dbReadiness}%)`);
  
  return {
    total: requiredTables.length,
    existing: existingTables,
    readiness: dbReadiness,
    tables: tableStatus
  };
}

/**
 * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkUserData() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –î–ê–ù–ù–´–• ===');
  
  try {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*');
    
    if (usersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersError.message}`);
      return { readiness: 0 };
    }
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞—Ä–º–µ—Ä—ã
    const activeFarmers = users.filter(u => 
      u.uni_farming_start_timestamp && 
      u.uni_deposit_amount > 0
    ).length;
    
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ UNI —Ñ–∞—Ä–º–µ—Ä—ã: ${activeFarmers}`);
    
    // TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const tonBoostUsers = users.filter(u => 
      u.ton_boost_package && 
      u.ton_boost_deposit_amount > 0
    ).length;
    
    console.log(`‚úÖ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${tonBoostUsers}`);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: transactions } = await supabase
      .from('transactions')
      .select('*');
    
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactions?.length || 0} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö`);
    
    // –ë–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã
    const totalUNI = users.reduce((sum, u) => sum + (u.balance_uni || 0), 0);
    const totalTON = users.reduce((sum, u) => sum + (u.balance_ton || 0), 0);
    
    console.log(`‚úÖ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalUNI} UNI, ${totalTON} TON`);
    
    const dataHealth = users.length > 0 ? 100 : 0;
    
    return {
      users: users.length,
      activeFarmers,
      tonBoostUsers,
      transactions: transactions?.length || 0,
      totalUNI,
      totalTON,
      readiness: dataHealth
    };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return { readiness: 0 };
  }
}

/**
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–¥–∞
 */
async function checkCodeArchitecture() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ö–û–î–ê ===');
  
  const modulesPath = './modules';
  const requiredFiles = ['controller.ts', 'routes.ts', 'service.ts', 'types.ts', 'model.ts'];
  
  try {
    const modules = fs.readdirSync(modulesPath);
    let totalModules = 0;
    let completeModules = 0;
    
    for (const module of modules) {
      const modulePath = path.join(modulesPath, module);
      if (fs.statSync(modulePath).isDirectory()) {
        totalModules++;
        
        const moduleFiles = fs.readdirSync(modulePath);
        const hasAllFiles = requiredFiles.every(file => 
          moduleFiles.includes(file)
        );
        
        if (hasAllFiles) {
          completeModules++;
          console.log(`‚úÖ ${module} - –ø–æ–ª–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞`);
        } else {
          const missingFiles = requiredFiles.filter(file => 
            !moduleFiles.includes(file)
          );
          console.log(`‚ùå ${module} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingFiles.join(', ')}`);
        }
      }
    }
    
    const architectureReadiness = Math.round((completeModules / totalModules) * 100);
    console.log(`\nüìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${completeModules}/${totalModules} –º–æ–¥—É–ª–µ–π (${architectureReadiness}%)`);
    
    return {
      total: totalModules,
      complete: completeModules,
      readiness: architectureReadiness
    };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: ${error.message}`);
    return { readiness: 0 };
  }
}

/**
 * 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
async function checkTelegramIntegration() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===');
  
  const checks = [
    {
      name: 'TELEGRAM_BOT_TOKEN',
      check: () => !!process.env.TELEGRAM_BOT_TOKEN,
      weight: 30
    },
    {
      name: 'Webhook endpoint',
      check: async () => {
        try {
          const response = await fetch('http://localhost:3000/webhook');
          return response.status !== 404;
        } catch {
          return false;
        }
      },
      weight: 25
    },
    {
      name: 'Telegram auth endpoint',
      check: async () => {
        try {
          const response = await fetch('http://localhost:3000/api/v2/auth/telegram');
          return response.status !== 404;
        } catch {
          return false;
        }
      },
      weight: 25
    },
    {
      name: 'Mini App files',
      check: () => {
        try {
          return fs.existsSync('./client/public/manifest.json');
        } catch {
          return false;
        }
      },
      weight: 20
    }
  ];
  
  let totalScore = 0;
  let maxScore = 0;
  
  for (const check of checks) {
    const result = await check.check();
    const score = result ? check.weight : 0;
    totalScore += score;
    maxScore += check.weight;
    
    console.log(`${result ? '‚úÖ' : '‚ùå'} ${check.name} - ${score}/${check.weight}`);
  }
  
  const telegramReadiness = Math.round((totalScore / maxScore) * 100);
  console.log(`\nüìä Telegram Integration: ${totalScore}/${maxScore} (${telegramReadiness}%)`);
  
  return {
    score: totalScore,
    maxScore,
    readiness: telegramReadiness
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
function generateFinalReport(results) {
  const {
    endpoints,
    database,
    userData,
    architecture,
    telegram
  } = results;
  
  console.log('\n' + '='.repeat(50));
  console.log('–§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò UNIFARM');
  console.log('='.repeat(50));
  
  const components = [
    { name: 'API Endpoints', readiness: endpoints.readiness, weight: 25 },
    { name: 'Database', readiness: database.readiness, weight: 20 },
    { name: 'User Data', readiness: userData.readiness, weight: 15 },
    { name: 'Architecture', readiness: architecture.readiness, weight: 20 },
    { name: 'Telegram Integration', readiness: telegram.readiness, weight: 20 }
  ];
  
  let totalWeightedScore = 0;
  let totalWeight = 0;
  
  console.log('\n–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
  for (const component of components) {
    const weightedScore = (component.readiness * component.weight) / 100;
    totalWeightedScore += weightedScore;
    totalWeight += component.weight;
    
    const status = component.readiness >= 90 ? '‚úÖ' : 
                   component.readiness >= 70 ? 'üü°' : '‚ùå';
    
    console.log(`${status} ${component.name}: ${component.readiness}% (–≤–µ—Å: ${component.weight}%)`);
  }
  
  const overallReadiness = Math.round((totalWeightedScore / totalWeight) * 100);
  
  console.log('\n' + '='.repeat(30));
  console.log(`–û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨: ${overallReadiness}%`);
  console.log('='.repeat(30));
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
  const remainingTasks = [];
  
  if (endpoints.readiness < 100) {
    const brokenEndpoints = endpoints.results.filter(r => !r.working);
    remainingTasks.push({
      priority: 'HIGH',
      task: `–ò—Å–ø—Ä–∞–≤–∏—Ç—å ${brokenEndpoints.length} –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö API endpoints`,
      details: brokenEndpoints.map(e => `${e.endpoint} (${e.status})`).join(', ')
    });
  }
  
  if (database.readiness < 100) {
    const missingTables = database.tables.filter(t => !t.exists);
    remainingTasks.push({
      priority: 'HIGH',
      task: `–°–æ–∑–¥–∞—Ç—å ${missingTables.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
      details: missingTables.map(t => t.table).join(', ')
    });
  }
  
  if (architecture.readiness < 100) {
    remainingTasks.push({
      priority: 'MEDIUM',
      task: `–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ${architecture.total - architecture.complete} –º–æ–¥—É–ª–µ–π`,
      details: '–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã controller.ts, service.ts, types.ts, model.ts'
    });
  }
  
  if (telegram.readiness < 100) {
    remainingTasks.push({
      priority: 'HIGH',
      task: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é',
      details: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, webhook endpoints, auth —Å–∏—Å—Ç–µ–º–∞'
    });
  }
  
  if (remainingTasks.length === 0) {
    console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!');
    console.log('–ù–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.');
  } else {
    console.log('\nüìã –û–°–¢–ê–í–®–ò–ï–°–Ø –ó–ê–î–ê–ß–ò:');
    remainingTasks.forEach((task, index) => {
      console.log(`\n${index + 1}. [${task.priority}] ${task.task}`);
      console.log(`   –î–µ—Ç–∞–ª–∏: ${task.details}`);
    });
  }
  
  // –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞
  if (overallReadiness >= 95) {
    console.log('\nüöÄ –°–¢–ê–¢–£–°: –ì–û–¢–û–í –ö –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ú–£ –ó–ê–ü–£–°–ö–£');
  } else if (overallReadiness >= 85) {
    console.log('\nüü° –°–¢–ê–¢–£–°: –ì–û–¢–û–í –ö BETA –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ');
  } else {
    console.log('\n‚ùå –°–¢–ê–¢–£–°: –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
  }
  
  return {
    overallReadiness,
    remainingTasks,
    components,
    canLaunch: overallReadiness >= 95
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
 */
async function runFinalAssessment() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–∏—Å—Ç–µ–º—ã UniFarm...');
  
  try {
    const endpoints = await checkAllEndpoints();
    const database = await checkDatabase();
    const userData = await checkUserData();
    const architecture = await checkCodeArchitecture();
    const telegram = await checkTelegramIntegration();
    
    const finalReport = generateFinalReport({
      endpoints,
      database,
      userData,
      architecture,
      telegram
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const reportData = {
      timestamp: new Date().toISOString(),
      overallReadiness: finalReport.overallReadiness,
      canLaunch: finalReport.canLaunch,
      components: finalReport.components,
      remainingTasks: finalReport.remainingTasks,
      detailedResults: {
        endpoints,
        database,
        userData,
        architecture,
        telegram
      }
    };
    
    fs.writeFileSync(
      'FINAL_ASSESSMENT_REPORT.json',
      JSON.stringify(reportData, null, 2)
    );
    
    console.log('\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FINAL_ASSESSMENT_REPORT.json');
    
    return finalReport;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error);
    return {
      overallReadiness: 0,
      remainingTasks: [{
        priority: 'CRITICAL',
        task: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É —Å–∏—Å—Ç–µ–º—ã',
        details: error.message
      }],
      canLaunch: false
    };
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏
runFinalAssessment()
  .then(result => {
    process.exit(result.canLaunch ? 0 : 1);
  })
  .catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });