#!/usr/bin/env node
/**
 * –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–¶–ï–ù–ê–†–ò–ï–í –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

console.log('üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–¶–ï–ù–ê–†–ò–ï–í –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
console.log('====================================================\n');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ Telegram initData –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generateTestScenarios() {
    const baseTimestamp = Math.floor(Date.now() / 1000);
    
    const scenarios = [
        {
            name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ —Å start_param',
            user_id: 999999001,
            username: 'test_user_1',
            referral_code: 'REF001',
            initData: null // –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        },
        {
            name: '–°—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ startapp',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç startapp –ø–∞—Ä–∞–º–µ—Ç—Ä',
            user_id: 999999002, 
            username: 'test_user_2',
            referral_code: 'PROMO123',
            param_type: 'startapp'
        },
        {
            name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞',
            description: '–û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞',
            user_id: 999999003,
            username: 'test_user_3',
            referral_code: null
        },
        {
            name: '–î–ª–∏–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥',
            description: '–¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º',
            user_id: 999999004,
            username: 'test_user_4',
            referral_code: 'SUPER_LONG_REFERRAL_CODE_12345'
        },
        {
            name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–¥–µ',
            description: '–¢–µ—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ',
            user_id: 999999005,
            username: 'test_user_5',
            referral_code: 'REF-123_SPECIAL'
        }
    ];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º initData –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    scenarios.forEach(scenario => {
        const user = {
            id: scenario.user_id,
            first_name: 'Test',
            username: scenario.username
        };
        
        let params = `user=${encodeURIComponent(JSON.stringify(user))}&auth_date=${baseTimestamp}`;
        
        if (scenario.referral_code) {
            const paramName = scenario.param_type || 'start_param';
            params += `&${paramName}=${scenario.referral_code}`;
        }
        
        params += '&hash=test_hash_' + scenario.user_id;
        
        scenario.initData = params;
        scenario.expectedResult = {
            valid: true, // (–ø—Ä–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ HMAC –ø—Ä–æ–≤–µ—Ä–∫–∏)
            user: user,
            start_param: scenario.param_type === 'startapp' ? null : scenario.referral_code,
            referral_extracted: scenario.referral_code
        };
    });
    
    return scenarios;
}

// –°–æ–∑–¥–∞–Ω–∏–µ cURL –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generateCurlCommands(scenarios) {
    console.log('üìã CURL –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API:');
    console.log('=====================================\n');
    
    scenarios.forEach((scenario, index) => {
        console.log(`${index + 1}. ${scenario.name}:`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
        
        const curlCommand = `curl -X POST http://localhost:3000/api/auth/telegram \\
  -H "Content-Type: application/json" \\
  -d '{"initData":"${scenario.initData}"}'`;
        
        console.log('   –ö–æ–º–∞–Ω–¥–∞:');
        console.log(`   ${curlCommand}`);
        
        console.log('   –û–∂–∏–¥–∞–µ–º–æ–µ –≤ –ª–æ–≥–∞—Ö:');
        if (scenario.referral_code) {
            console.log(`   - "start_param: ${scenario.referral_code}"`);
            console.log(`   - "ref_by: ${scenario.referral_code}"`);
            console.log('   - "validation.start_param" –≤ AuthService');
        } else {
            console.log('   - "start_param: none" –∏–ª–∏ null');
            console.log('   - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞');
        }
        console.log();
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ JavaScript —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
function generateBrowserTests(scenarios) {
    console.log('üåê JAVASCRIPT –¢–ï–°–¢–´ –î–õ–Ø –ë–†–ê–£–ó–ï–†–ê:');
    console.log('=================================\n');
    
    console.log('// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ DevTools Console –±—Ä–∞—É–∑–µ—Ä–∞:');
    console.log('async function testReferralSystem() {');
    console.log('  const results = [];');
    console.log();
    
    scenarios.forEach((scenario, index) => {
        console.log(`  // –¢–µ—Å—Ç ${index + 1}: ${scenario.name}`);
        console.log(`  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${scenario.name}');`);
        console.log('  try {');
        console.log(`    const response${index} = await fetch('/api/auth/telegram', {`);
        console.log('      method: "POST",');
        console.log('      headers: { "Content-Type": "application/json" },');
        console.log(`      body: JSON.stringify({ initData: "${scenario.initData}" })`);
        console.log('    });');
        console.log(`    const data${index} = await response${index}.json();`);
        console.log(`    results.push({ test: '${scenario.name}', result: data${index} });`);
        console.log(`    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1}:', data${index});`);
        console.log('  } catch (error) {');
        console.log(`    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ ${index + 1}:', error);`);
        console.log(`    results.push({ test: '${scenario.name}', error: error.message });`);
        console.log('  }');
        console.log();
    });
    
    console.log('  return results;');
    console.log('}');
    console.log();
    console.log('// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤:');
    console.log('testReferralSystem().then(results => {');
    console.log('  console.log("üéØ –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:", results);');
    console.log('});');
    console.log();
}

// –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ª–æ–≥–∞—Ö
function generateLogAnalysisPatterns() {
    console.log('üìä –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –õ–û–ì–û–í:');
    console.log('==============================\n');
    
    const patterns = [
        {
            pattern: 'start_param:',
            meaning: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ initData',
            expectation: '–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º'
        },
        {
            pattern: 'validation.start_param',
            meaning: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ start_param –≤ AuthService',
            expectation: '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç'
        },
        {
            pattern: '–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê',
            meaning: '–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏',
            expectation: '–î–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º'
        },
        {
            pattern: 'referred_by:',
            meaning: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è referred_by',
            expectation: '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º'
        },
        {
            pattern: 'processReferral',
            meaning: '–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞',
            expectation: '–î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞'
        }
    ];
    
    patterns.forEach((p, index) => {
        console.log(`${index + 1}. –ü–∞—Ç—Ç–µ—Ä–Ω: "${p.pattern}"`);
        console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ: ${p.meaning}`);
        console.log(`   –û–∂–∏–¥–∞–Ω–∏–µ: ${p.expectation}`);
        console.log();
    });
    
    console.log('üîç –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–ò–°–ö–ê –í –õ–û–ì–ê–•:');
    patterns.forEach(p => {
        console.log(`grep -i "${p.pattern}" logs/* 2>/dev/null || echo "–ü–∞—Ç—Ç–µ—Ä–Ω '${p.pattern}' –Ω–µ –Ω–∞–π–¥–µ–Ω"`);
    });
    console.log();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
function generateVerificationChecklist() {
    console.log('‚úÖ –ß–ï–ö–õ–ò–°–¢ –ü–†–û–í–ï–†–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
    console.log('================================\n');
    
    const checklist = [
        {
            category: '–ö–û–î',
            items: [
                'ValidationResult –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–¥–µ—Ä–∂–∏—Ç start_param?: string',
                'validateTelegramInitData –∏–∑–≤–ª–µ–∫–∞–µ—Ç start_param –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
                'validateTelegramInitData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { valid, user, start_param }',
                'AuthService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç validation.start_param',
                '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ start_param –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ AuthService'
            ]
        },
        {
            category: '–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨',
            items: [
                'API endpoint /api/auth/telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã',
                'initData –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è',
                'start_param –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ initData',
                '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ processReferral',
                '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å referred_by != null'
            ]
        },
        {
            category: '–õ–û–ì–ò',
            items: [
                '–í –ª–æ–≥–∞—Ö –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ "start_param: <–∫–æ–¥>"',
                '–í –ª–æ–≥–∞—Ö –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ "validation.start_param"',
                '–í –ª–æ–≥–∞—Ö –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ "–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê"',
                '–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö initData',
                '–î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö'
            ]
        }
    ];
    
    checklist.forEach(category => {
        console.log(`üìã ${category.category}:`);
        category.items.forEach((item, index) => {
            console.log(`   ${index + 1}. ‚òê ${item}`);
        });
        console.log();
    });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    const scenarios = generateTestScenarios();
    
    console.log('üìä –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:');
    console.log('====================================\n');
    
    scenarios.forEach((scenario, index) => {
        console.log(`${index + 1}. ${scenario.name}`);
        console.log(`   User ID: ${scenario.user_id}`);
        console.log(`   Username: ${scenario.username}`);
        console.log(`   Referral Code: ${scenario.referral_code || '–Ω–µ—Ç'}`);
        console.log(`   InitData: ${scenario.initData.substring(0, 60)}...`);
        console.log();
    });
    
    generateCurlCommands(scenarios);
    generateBrowserTests(scenarios);
    generateLogAnalysisPatterns();
    generateVerificationChecklist();
    
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('==============');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
    console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã cURL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã JavaScript —Ç–µ—Å—Ç—ã –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞');  
    console.log('‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —á–µ–∫–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    console.log('\n‚ö†Ô∏è  –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã –∏ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã!');
}

main();