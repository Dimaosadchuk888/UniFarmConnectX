#!/usr/bin/env tsx

/**
 * üéØ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AdminBotService
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import fetch from 'node-fetch';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function testWithdrawalIntegration() {
  console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í');
  console.log('=' .repeat(55));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú WEBHOOK ENDPOINT
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint...');
    
    const appUrl = process.env.APP_DOMAIN || 'https://uni-farm-connect-unifarm01010101.replit.app';
    const webhookUrl = `${appUrl}/api/v2/admin-bot/webhook`;
    
    try {
      const testResponse = await fetch(webhookUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          update_id: 999999999,
          message: {
            message_id: 1,
            from: { id: 123, username: 'test_user', first_name: 'Test' },
            chat: { id: 123, type: 'private' },
            date: Math.floor(Date.now() / 1000),
            text: '/test'
          }
        })
      });
      
      console.log(`üì° Webhook response: ${testResponse.status} ${testResponse.statusText}`);
      
      if (testResponse.status === 200) {
        console.log('‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('‚ùå Webhook endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook:', error);
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú TELEGRAM WEBHOOK INFO
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook –≤ Telegram...');
    
    const adminBotToken = process.env.ADMIN_BOT_TOKEN;
    if (adminBotToken) {
      try {
        const webhookResponse = await fetch(`https://api.telegram.org/bot${adminBotToken}/getWebhookInfo`);
        const webhookInfo = await webhookResponse.json();
        
        if (webhookInfo.ok) {
          console.log(`üì° Webhook URL: ${webhookInfo.result.url || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
          console.log(`üì° Pending Updates: ${webhookInfo.result.pending_update_count || 0}`);
          console.log(`üì° Last Error: ${webhookInfo.result.last_error_message || '–ù–ï–¢'}`);
          
          if (webhookInfo.result.last_error_message) {
            console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ webhook, –Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –µ–µ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å');
          } else {
            console.log('‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫');
          }
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook info:', error);
      }
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –ú–ï–¢–û–î–û–í –í –ö–û–î–ï
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AdminBotService...');
    
    const fs = await import('fs');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AdminBotService
    if (fs.existsSync('modules/adminBot/service.ts')) {
      const adminService = fs.readFileSync('modules/adminBot/service.ts', 'utf8');
      
      const hasNotifyMethod = adminService.includes('notifyWithdrawal');
      const hasUiKeyboard = adminService.includes('inline_keyboard');
      const hasTelegramIdLookup = adminService.includes('telegram_id');
      
      console.log(`‚úÖ –ú–µ—Ç–æ–¥ notifyWithdrawal: ${hasNotifyMethod ? '–î–û–ë–ê–í–õ–ï–ù' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${hasUiKeyboard ? '–î–û–ë–ê–í–õ–ï–ù–´' : '–û–¢–°–£–¢–°–¢–í–£–Æ–¢'}`);
      console.log(`‚úÖ –ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–æ–≤: ${hasTelegramIdLookup ? '–†–ï–ê–õ–ò–ó–û–í–ê–ù' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º WalletService
    if (fs.existsSync('modules/wallet/service.ts')) {
      const walletService = fs.readFileSync('modules/wallet/service.ts', 'utf8');
      
      const hasAdminBotImport = walletService.includes('AdminBotService');
      const hasNotificationCall = walletService.includes('notifyWithdrawal');
      const hasErrorHandling = walletService.includes('notificationError');
      
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç AdminBotService: ${hasAdminBotImport ? '–î–û–ë–ê–í–õ–ï–ù' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ –í—ã–∑–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${hasNotificationCall ? '–î–û–ë–ê–í–õ–ï–ù' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ${hasErrorHandling ? '–î–û–ë–ê–í–õ–ï–ù–ê' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    }

    // 4. –ü–†–û–í–ï–†–Ø–ï–ú WEBHOOK ROUTES
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook...');
    
    if (fs.existsSync('modules/adminBot/routes.ts')) {
      const routes = fs.readFileSync('modules/adminBot/routes.ts', 'utf8');
      
      const hasImprovedErrorHandling = routes.includes('res.status(200).send(\'OK\')');
      const hasAsyncProcessing = routes.includes('updateId: req.body.update_id');
      const hasStackTrace = routes.includes('stack:');
      
      console.log(`‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ${hasImprovedErrorHandling ? '–î–û–ë–ê–í–õ–ï–ù–ê' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: ${hasAsyncProcessing ? '–î–û–ë–ê–í–õ–ï–ù–û' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫: ${hasStackTrace ? '–î–û–ë–ê–í–õ–ï–ù–´' : '–û–¢–°–£–¢–°–¢–í–£–Æ–¢'}`);
    }

    // 5. –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–ó–£ –î–ê–ù–ù–´–•
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...');
    
    const { data: admins, error: adminsError } = await supabase
      .from('users')
      .select('username, telegram_id, is_admin')
      .eq('is_admin', true);
      
    if (adminsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–æ–≤:', adminsError.message);
    } else {
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –≤ –ë–î: ${admins?.length || 0}`);
      admins?.forEach(admin => {
        console.log(`   - @${admin.username} (ID: ${admin.telegram_id})`);
      });
    }

    const { data: recentRequests, error: requestsError } = await supabase
      .from('withdraw_requests')
      .select('id, user_id, amount_ton, status, created_at')
      .order('created_at', { ascending: false })
      .limit(3);
      
    if (requestsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞—è–≤–æ–∫:', requestsError.message);
    } else {
      console.log(`üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥: ${recentRequests?.length || 0}`);
      recentRequests?.forEach(req => {
        console.log(`   - ID: ${req.id}, User: ${req.user_id}, Amount: ${req.amount_ton} TON, Status: ${req.status}`);
      });
    }

    // 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\n6Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò...');
    
    const integrationChecks = {
      adminBotMethod: fs.existsSync('modules/adminBot/service.ts') && 
                      fs.readFileSync('modules/adminBot/service.ts', 'utf8').includes('notifyWithdrawal'),
      walletIntegration: fs.existsSync('modules/wallet/service.ts') && 
                         fs.readFileSync('modules/wallet/service.ts', 'utf8').includes('AdminBotService'),
      webhookFixed: fs.existsSync('modules/adminBot/routes.ts') && 
                    fs.readFileSync('modules/adminBot/routes.ts', 'utf8').includes('res.status(200).send(\'OK\')'),
      adminsInDatabase: admins && admins.length > 0
    };
    
    const passedChecks = Object.values(integrationChecks).filter(Boolean).length;
    const totalChecks = Object.keys(integrationChecks).length;
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: ${passedChecks}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedChecks === totalChecks) {
      console.log('üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('\n‚úÖ –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:');
      console.log('   1. –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ notifyWithdrawal –≤ AdminBotService');
      console.log('   2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ WalletService.processWithdrawal');
      console.log('   3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ webhook –æ—à–∏–±–∫–∞ 500 (–≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK)');
      console.log('   4. –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      console.log('   5. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤');
      
      console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:');
      console.log('   - –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥');
      console.log('   - –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      console.log('   - Webhook –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 500 –æ—à–∏–±–æ–∫');
      console.log('   - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
      
    } else {
      console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´');
      
      Object.entries(integrationChecks).forEach(([check, passed]) => {
        console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check}`);
      });
    }

    return {
      passed_checks: passedChecks,
      total_checks: totalChecks,
      integration_complete: passedChecks === totalChecks,
      issues_remaining: totalChecks - passedChecks
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê');
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}\n`);
    
    const result = await testWithdrawalIntegration();
    
    console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`–ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: ${result.passed_checks}/${result.total_checks}`);
    console.log(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.integration_complete ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–ü—Ä–æ–±–ª–µ–º –æ—Å—Ç–∞–ª–æ—Å—å: ${result.issues_remaining}`);
    
    process.exit(result.integration_complete ? 0 : 1);
    
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();