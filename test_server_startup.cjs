/**
 * –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–ø—É—Å–∫–æ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

const fs = require('fs');
const path = require('path');

async function testServerStartup() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê ===\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:');
    
    const files = [
      'start-unifarm.cjs',
      'modules/auth/service.ts',
      'modules/referral/service.ts',
      'server/index.ts'
    ];
    
    for (const file of files) {
      if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`‚ùå ${file} –ù–ï –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å TypeScript
    console.log('\nüîç 2. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê:');
    
    const { execSync } = require('child_process');
    
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ modules/auth/service.ts...');
      const result = execSync('tsx --check modules/auth/service.ts', { encoding: 'utf8', timeout: 5000 });
      console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å auth/service.ts –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ auth/service.ts:', error.message);
    }
    
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ modules/referral/service.ts...');
      const result = execSync('tsx --check modules/referral/service.ts', { encoding: 'utf8', timeout: 5000 });
      console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å referral/service.ts –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ referral/service.ts:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    console.log('\nüîç 3. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í:');
    
    const authContent = fs.readFileSync('modules/auth/service.ts', 'utf8');
    
    if (authContent.includes('import { ReferralService }')) {
      console.log('‚ùå –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ReferralService');
    } else {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ReferralService —É–¥–∞–ª–µ–Ω');
    }
    
    if (authContent.includes('processReferralInline')) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ processReferralInline');
    } else {
      console.log('‚ùå –ú–µ—Ç–æ–¥ processReferralInline –ù–ï –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüîç 4. –ü–û–ü–´–¢–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê:');
    
    try {
      console.log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
      const { spawn } = require('child_process');
      
      const server = spawn('node', ['start-unifarm.cjs'], {
        stdio: 'pipe',
        timeout: 10000
      });
      
      let output = '';
      let errorOutput = '';
      
      server.stdout.on('data', (data) => {
        output += data.toString();
      });
      
      server.stderr.on('data', (data) => {
        errorOutput += data.toString();
      });
      
      setTimeout(() => {
        server.kill();
        
        console.log('üìã –í—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(output);
        
        if (errorOutput) {
          console.log('üìã –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:');
          console.log(errorOutput);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä
        if (output.includes('listening on port') || output.includes('Server running')) {
          console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
        } else {
          console.log('‚ùå –°–µ—Ä–≤–µ—Ä –ù–ï –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
        }
        
      }, 8000);
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testServerStartup();