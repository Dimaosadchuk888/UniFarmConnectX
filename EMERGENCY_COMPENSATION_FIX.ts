#!/usr/bin/env tsx

/**
 * üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–í–¢–û–†–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø USER 251 –ò 255
 * 
 * –ë–∞–ª–∞–Ω—Å—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–∂–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º - –ø–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function emergencyCompensationFix() {
  console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–í–¢–û–†–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø');
  console.log('=' .repeat(50));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï
    console.log('1Ô∏è‚É£ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    
    const { data: currentUsers, error } = await supabase
      .from('users')
      .select('id, username, balance_ton, balance_uni')
      .in('id', [251, 255])
      .order('id');

    if (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•:', error.message);
      return;
    }

    console.log('\nüìä –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´:');
    currentUsers?.forEach(user => {
      console.log(`User ${user.id} (@${user.username}): ${user.balance_ton} TON`);
    });

    // 2. –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–û–ü–´–¢–ö–ò –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò
    console.log('\n2Ô∏è‚É£ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏...');
    
    const compensationAmount = 2.0;
    
    for (const userId of [251, 255]) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ User ${userId}...`);
      
      const currentUser = currentUsers?.find(u => u.id === userId);
      if (!currentUser) {
        console.log(`‚ùå User ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }

      const currentBalance = Number(currentUser.balance_ton) || 0;
      const targetBalance = currentBalance + compensationAmount;
      
      console.log(`   –ë–∞–ª–∞–Ω—Å –¥–æ: ${currentBalance} TON`);
      console.log(`   –¶–µ–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å: ${targetBalance} TON`);
      
      // –ü–û–ü–´–¢–ö–ê 1: –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      console.log('   –ü–æ–ø—ã—Ç–∫–∞ 1: –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
      const { error: updateError1 } = await supabase
        .from('users')
        .update({ balance_ton: targetBalance })
        .eq('id', userId);

      await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞

      // –ü–û–ü–´–¢–ö–ê 2: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ  
      console.log('   –ü–æ–ø—ã—Ç–∫–∞ 2: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
      const { error: updateError2 } = await supabase
        .rpc('increment_user_balance', {
          user_id: userId,
          amount: compensationAmount,
          currency: 'TON'
        });

      if (updateError2) {
        console.log('   RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQL...');
        
        // –ü–û–ü–´–¢–ö–ê 3: Raw SQL —á–µ—Ä–µ–∑ rpc
        const { error: sqlError } = await supabase
          .rpc('execute_sql', {
            query: `UPDATE users SET balance_ton = balance_ton + ${compensationAmount} WHERE id = ${userId}`
          });

        if (sqlError) {
          console.log('   SQL RPC —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º upsert...');
          
          // –ü–û–ü–´–¢–ö–ê 4: Upsert
          const { error: upsertError } = await supabase
            .from('users')
            .upsert({
              id: userId,
              balance_ton: targetBalance
            }, {
              onConflict: 'id',
              ignoreDuplicates: false
            });

          if (upsertError) {
            console.error(`   ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏—Å—å –¥–ª—è User ${userId}`);
          } else {
            console.log(`   ‚úÖ Upsert —É—Å–ø–µ—à–µ–Ω –¥–ª—è User ${userId}`);
          }
        } else {
          console.log(`   ‚úÖ SQL —É—Å–ø–µ—à–µ–Ω –¥–ª—è User ${userId}`);
        }
      } else {
        console.log(`   ‚úÖ RPC —É—Å–ø–µ—à–µ–Ω –¥–ª—è User ${userId}`);
      }

      if (updateError1) {
        console.log('   ‚ö†Ô∏è  –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
      } else {
        console.log('   ‚úÖ –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      }
    }

    // 3. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    console.log('\n3Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    const { data: finalUsers, error: finalError } = await supabase
      .from('users')
      .select('id, username, balance_ton')
      .in('id', [251, 255])
      .order('id');

    if (finalError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò:', finalError.message);
      return;
    }

    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚îÅ'.repeat(50));
    
    let successCount = 0;
    finalUsers?.forEach(user => {
      const originalUser = currentUsers?.find(u => u.id === user.id);
      const originalBalance = Number(originalUser?.balance_ton || 0);
      const finalBalance = Number(user.balance_ton || 0);
      const change = finalBalance - originalBalance;
      const success = change >= 1.5; // –•–æ—Ç—è –±—ã –±–ª–∏–∑–∫–æ –∫ 2 TON
      
      console.log(`User ${user.id} (@${user.username}):`);
      console.log(`   –ë—ã–ª–æ: ${originalBalance} TON`);
      console.log(`   –°—Ç–∞–ª–æ: ${finalBalance} TON`);
      console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +${change.toFixed(6)} TON`);
      console.log(`   ${success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ü–†–û–í–ê–õ'}`);
      console.log('');
      
      if (success) successCount++;
    });

    if (successCount === 2) {
      console.log('üéâ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
    } else {
      console.log(`‚ö†Ô∏è  –£—Å–ø–µ—à–Ω–æ —Ç–æ–ª—å–∫–æ ${successCount}/2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û');
    }

    return {
      success: successCount === 2,
      results: finalUsers
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ô –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await emergencyCompensationFix();
    
    if (result?.success) {
      console.log('\n‚úÖ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
    } else {
      console.log('\n‚ùå –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –î–ï–ô–°–¢–í–ò–ô');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('\nüí• –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();