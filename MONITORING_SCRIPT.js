#!/usr/bin/env node

/**
 * –°–ö–†–ò–ü–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –î–ï–ü–û–ó–ò–¢–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
 * –¢–û–õ–¨–ö–û –ú–û–ù–ò–¢–û–†–ò–ù–ì - –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –î–ê–ù–ù–´–ï
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function startMonitoring() {
  console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–ï–ü–û–ó–ò–¢–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò');
  console.log('='.repeat(60));
  console.log(`üìÖ –ó–∞–ø—É—Å–∫: ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –¢–û–õ–¨–ö–û –ú–û–ù–ò–¢–û–†–ò–ù–ì - –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢ –î–ê–ù–ù–´–ï');
  
  // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { data: initialUsers } = await supabase
    .from('users')
    .select('id, balance_ton, balance_uni')
    .gt('balance_ton', 0)
    .order('id');
  
  console.log(`\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ${initialUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º`);
  
  const userBalances = {};
  initialUsers?.forEach(user => {
    userBalances[user.id] = {
      ton: parseFloat(user.balance_ton || '0'),
      uni: parseFloat(user.balance_uni || '0')
    };
  });
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
  const usersChannel = supabase
    .channel('users-changes')
    .on('postgres_changes', {
      event: 'UPDATE',
      schema: 'public',
      table: 'users',
      filter: 'balance_ton.gt.0'
    }, (payload) => {
      const { new: newRecord, old: oldRecord } = payload;
      const userId = newRecord.id;
      
      const oldTon = parseFloat(oldRecord?.balance_ton || '0');
      const newTon = parseFloat(newRecord?.balance_ton || '0');
      const oldUni = parseFloat(oldRecord?.balance_uni || '0');
      const newUni = parseFloat(newRecord?.balance_uni || '0');
      
      const tonChange = newTon - oldTon;
      const uniChange = newUni - oldUni;
      
      if (Math.abs(tonChange) > 0.000001 || Math.abs(uniChange) > 0.01) {
        console.log(`\nüîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê User ${userId}:`);
        console.log(`   TON: ${oldTon.toFixed(6)} ‚Üí ${newTon.toFixed(6)} (${tonChange > 0 ? '+' : ''}${tonChange.toFixed(6)})`);
        console.log(`   UNI: ${oldUni.toFixed(2)} ‚Üí ${newUni.toFixed(2)} (${uniChange > 0 ? '+' : ''}${uniChange.toFixed(2)})`);
        console.log(`   –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        userBalances[userId] = { ton: newTon, uni: newUni };
      }
    })
    .subscribe();
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions
  const transactionsChannel = supabase
    .channel('transactions-changes')
    .on('postgres_changes', {
      event: 'INSERT',
      schema: 'public',
      table: 'transactions'
    }, (payload) => {
      const tx = payload.new;
      const tonAmount = parseFloat(tx.amount_ton || '0');
      const uniAmount = parseFloat(tx.amount_uni || '0');
      
      if (tonAmount > 0 || uniAmount > 0) {
        console.log(`\n‚úÖ –ù–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø:`);
        console.log(`   User: ${tx.user_id} | ID: ${tx.id}`);
        console.log(`   –¢–∏–ø: ${tx.type}`);
        console.log(`   TON: ${tonAmount.toFixed(6)} | UNI: ${uniAmount.toFixed(2)}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${(tx.description || '').substring(0, 50)}...`);
        console.log(`   –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
      }
    })
    .on('postgres_changes', {
      event: 'DELETE',
      schema: 'public',
      table: 'transactions'
    }, (payload) => {
      const tx = payload.old;
      console.log(`\n‚ùå –£–î–ê–õ–ï–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø:`);
      console.log(`   User: ${tx.user_id} | ID: ${tx.id}`);
      console.log(`   –¢–∏–ø: ${tx.type}`);
      console.log(`   –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
      console.log(`   üö® –í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê –ò–°–ß–ï–ó–ê–Æ–©–ò–• –î–ï–ü–û–ó–ò–¢–û–í!`);
    })
    .subscribe();
  
  console.log('\nüéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ï–ù. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º:');
  console.log('   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  console.log('   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∏—Å—á–µ–∑–∞—é—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã)');
  console.log('\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  setInterval(async () => {
    const now = new Date();
    if (now.getSeconds() === 0) { // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
      console.log(`\nüìä ${now.toLocaleTimeString('ru-RU')} | –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const { data: recentTx } = await supabase
        .from('transactions')
        .select('created_at, type, user_id')
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (recentTx && recentTx.length > 0) {
        const lastTx = recentTx[0];
        const timeDiff = Math.floor((now.getTime() - new Date(lastTx.created_at).getTime()) / 1000);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${timeDiff}—Å –Ω–∞–∑–∞–¥ (User ${lastTx.user_id}, ${lastTx.type})`);
      }
    }
  }, 1000);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\n\nüìã –ó–ê–í–ï–†–®–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
    console.log(`   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${new Date().toLocaleString('ru-RU')}`);
    usersChannel.unsubscribe();
    transactionsChannel.unsubscribe();
    process.exit(0);
  });
}

startMonitoring().catch(console.error);