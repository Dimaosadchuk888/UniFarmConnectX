import { supabase } from './core/supabaseClient';

async function finalCodeAnalysis() {
  console.log('üî¨ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê - 100% –¢–û–ß–ù–û–°–¢–¨');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ó–ê –í–°–Æ –ò–°–¢–û–†–ò–Æ
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON_DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –í–°–Æ –ò–°–¢–û–†–ò–Æ:');
    
    const { data: allTonDeposits, error: tonDepositError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, created_at')
      .eq('type', 'TON_DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(10);

    if (!tonDepositError) {
      console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ–≥–æ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTonDeposits?.length || 0}`);
      
      if (!allTonDeposits || allTonDeposits.length === 0) {
        console.log(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ò –û–î–ù–û–ô TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ó–ê –í–°–Æ –ò–°–¢–û–†–ò–Æ!`);
        console.log(`   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ processTonDeposit() –ù–ò–ö–û–ì–î–ê –ù–ï –†–ê–ë–û–¢–ê–õ!`);
      } else {
        console.log(`   ‚úÖ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:`);
        allTonDeposits.slice(0, 5).forEach(tx => {
          console.log(`     User ${tx.user_id}: ${tx.amount_ton} TON [${tx.created_at.split('T')[0]}]`);
        });
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    console.log('\n2Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–°–ï–• –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: txTypes, error: typesError } = await supabase
      .rpc('get_transaction_stats'); // –ï—Å–ª–∏ –Ω–µ—Ç RPC, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –µ—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    const { data: allTransactions, error: allTxError } = await supabase
      .from('transactions')
      .select('type, currency, COUNT(*)')
      .limit(1000);

    if (!allTxError && allTransactions) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
      const typeStats: { [key: string]: number } = {};
      const { data: individualTx } = await supabase
        .from('transactions')
        .select('type')
        .limit(10000);

      individualTx?.forEach(tx => {
        typeStats[tx.type] = (typeStats[tx.type] || 0) + 1;
      });

      console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
      Object.keys(typeStats).forEach(type => {
        console.log(`   ${type}: ${typeStats[type]} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
    }

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º –ë–ï–ó TON_DEPOSIT
    console.log('\n3Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON –ë–ê–õ–ê–ù–°–û–ú –ë–ï–ó TON_DEPOSIT:');
    
    const { data: usersWithTon, error: usersError } = await supabase
      .from('users')
      .select('id, balance_ton, created_at')
      .gt('balance_ton', 0)
      .gte('id', 191)
      .lte('id', 303)
      .order('id', { ascending: true });

    if (!usersError && usersWithTon) {
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithTon.length}`);
      
      let usersWithoutDeposit = 0;
      
      for (const user of usersWithTon.slice(0, 10)) {
        const { data: userDeposits } = await supabase
          .from('transactions')
          .select('id')
          .eq('user_id', user.id)
          .eq('type', 'TON_DEPOSIT');

        const hasDeposit = userDeposits && userDeposits.length > 0;
        
        if (!hasDeposit) {
          usersWithoutDeposit++;
        }
        
        console.log(`   User ${user.id}: –±–∞–ª–∞–Ω—Å=${user.balance_ton}, TON_DEPOSIT=${hasDeposit ? '–î–ê' : '–ù–ï–¢'}`);
      }
      
      console.log(`\nüìä –ò–¢–û–ì–û: ${usersWithoutDeposit}/${Math.min(10, usersWithTon.length)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó TON_DEPOSIT`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
    console.log('\n4Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• 7 –î–ù–ï–ô:');
    
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
    
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('type, user_id, amount_ton, created_at')
      .gte('created_at', sevenDaysAgo)
      .order('created_at', { ascending: false });

    if (!recentError && recentTx) {
      const txByType: { [key: string]: number } = {};
      recentTx.forEach(tx => {
        txByType[tx.type] = (txByType[tx.type] || 0) + 1;
      });

      console.log(`üìÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: ${recentTx.length}`);
      Object.keys(txByType).forEach(type => {
        console.log(`   ${type}: ${txByType[type]}`);
      });

      const tonDeposits = recentTx.filter(tx => tx.type === 'TON_DEPOSIT');
      console.log(`\nüí∞ TON_DEPOSIT –∑–∞ 7 –¥–Ω–µ–π: ${tonDeposits.length}`);
      
      if (tonDeposits.length === 0) {
        console.log(`   üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ù–ò –û–î–ù–û–ì–û TON_DEPOSIT –∑–∞ –Ω–µ–¥–µ–ª—é!`);
      }
    }

    // 5. –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢ - 100% –¢–û–ß–ù–û–°–¢–¨:');
    
    const hasTonDepositsEver = allTonDeposits && allTonDeposits.length > 0;
    const hasTonDepositsRecent = recentTx?.some(tx => tx.type === 'TON_DEPOSIT') || false;
    
    console.log(`\nüîç –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´:`);
    console.log(`   TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ${hasTonDepositsEver ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   TON_DEPOSIT –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: ${hasTonDepositsRecent ? '–î–ê' : '–ù–ï–¢'}`);
    
    console.log(`\nüéØ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ì–ê–†–ê–ù–¢–ò–Ø –î–õ–Ø –ù–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í:`);
    
    if (!hasTonDepositsEver) {
      console.log(`   ‚ùå –ì–ê–†–ê–ù–¢–ò–Ø: 0%`);
      console.log(`   –î–ò–ê–ì–ù–û–ó: processTonDeposit() –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –í–û–û–ë–©–ï`);
      console.log(`   –ü–†–û–ë–õ–ï–ú–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –∏–ª–∏ API`);
      console.log(`   –ü–û–°–õ–ï–î–°–¢–í–ò–ï: –í–°–ï –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –±—É–¥—É—Ç "–Ω–µ–≤–∏–¥–∏–º—ã–º–∏"`);
    } else if (!hasTonDepositsRecent) {
      console.log(`   ‚ö†Ô∏è –ì–ê–†–ê–ù–¢–ò–Ø: 10-30%`);
      console.log(`   –î–ò–ê–ì–ù–û–ó: processTonDeposit() —Ä–∞–±–æ—Ç–∞–ª —Ä–∞–Ω—å—à–µ, –Ω–æ –°–õ–û–ú–ê–õ–°–Ø`);
      console.log(`   –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ —Å–ª–æ–º–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å`);
      console.log(`   –ü–û–°–õ–ï–î–°–¢–í–ò–ï: –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –ë–£–î–£–¢ –ø–æ–ª—É—á–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
    } else {
      console.log(`   ‚úÖ –ì–ê–†–ê–ù–¢–ò–Ø: 85-95%`);
      console.log(`   –î–ò–ê–ì–ù–û–ó: processTonDeposit() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      console.log(`   –ü–†–û–ë–õ–ï–ú–ê: –¢–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
      console.log(`   –ü–û–°–õ–ï–î–°–¢–í–ò–ï: –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
    }

    console.log(`\nüìã –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    
    if (!hasTonDepositsEver) {
      console.log(`   1. ‚ùå –ù–ï –ò–ì–ù–û–†–ò–†–û–í–ê–¢–¨ –ø—Ä–æ–±–ª–µ–º—É - –æ–Ω–∞ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø`);
      console.log(`   2. üîß –°–†–û–ß–ù–û –∏—Å–ø—Ä–∞–≤–∏—Ç—å processTonDeposit()`);
      console.log(`   3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º`);
      console.log(`   4. üìä –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ`);
    } else if (!hasTonDepositsRecent) {
      console.log(`   1. ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –ê–ö–¢–ò–í–ù–ê - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å`);
      console.log(`   2. üîç –ù–∞–π—Ç–∏ —á—Ç–æ —Å–ª–æ–º–∞–ª–æ processTonDeposit() –Ω–µ–¥–∞–≤–Ω–æ`);
      console.log(`   3. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç`);
      console.log(`   4. üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
    } else {
      console.log(`   1. ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   2. üìä –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ`);
      console.log(`   3. üìà –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–π`);
    }

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

finalCodeAnalysis().catch(console.error);