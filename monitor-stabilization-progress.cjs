const { createClient } = require('@supabase/supabase-js');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.SUPABASE_URL || process.env.DATABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

let previousBalance = null;
let checkCount = 0;

async function monitorStabilization() {
  checkCount++;
  const timestamp = new Date().toLocaleTimeString();
  
  console.log(`\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì #${checkCount} - ${timestamp}`);
  console.log('=' + '='.repeat(45));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('created_at, amount, user_id, type, currency')
      .order('created_at', { ascending: false })
      .limit(8);

    if (error || !transactions) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error?.message);
      return;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    const intervals = [];
    for (let i = 1; i < Math.min(transactions.length, 6); i++) {
      const prev = new Date(transactions[i-1].created_at);
      const curr = new Date(transactions[i].created_at);
      const diffMs = prev.getTime() - curr.getTime();
      const diffMin = diffMs / (1000 * 60);
      intervals.push(diffMin);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üîÑ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    transactions.slice(0, 3).forEach((t, i) => {
      const time = new Date(t.created_at);
      const amount = parseFloat(t.amount);
      const timeStr = time.toLocaleTimeString();
      console.log(`   ${i+1}. ${timeStr} | User ${t.user_id} | ${amount.toFixed(4)} ${t.currency || 'UNI'}`);
    });

    // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    if (intervals.length > 0) {
      const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
      const maxInterval = Math.max(...intervals);
      const minInterval = Math.min(...intervals);
      
      console.log('\n‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):');
      intervals.forEach((interval, i) => {
        const status = interval > 4 ? '‚úÖ' : (interval > 2 ? 'üü°' : 'üî¥');
        console.log(`   ${status} ${interval.toFixed(2)} –º–∏–Ω`);
      });
      
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   –ú–∏–Ω: ${minInterval.toFixed(2)} | –°—Ä–µ–¥: ${avgInterval.toFixed(2)} | –ú–∞–∫—Å: ${maxInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
      if (avgInterval > 4) {
        console.log('üéâ –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø –î–û–°–¢–ò–ì–ù–£–¢–ê! –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∏—Å—å');
      } else if (maxInterval > 3) {
        console.log('üîÑ –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ—è–≤–∏–ª–∏—Å—å –¥–ª–∏–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã');
      } else if (avgInterval > 1) {
        console.log('‚è≥ –ü–†–û–ì–†–ï–°–°: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è');
      } else {
        console.log('üî¥ –ê–ù–û–ú–ê–õ–ò–Ø: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ User 184
    const { data: user184 } = await supabase
      .from('users')
      .select('balance_uni, balance_ton')
      .eq('id', 184)
      .single();

    if (user184) {
      const currentBalance = parseFloat(user184.balance_uni);
      console.log(`\nüë§ USER 184 –ë–ê–õ–ê–ù–°: ${currentBalance.toFixed(6)} UNI`);
      
      if (previousBalance !== null) {
        const growth = currentBalance - previousBalance;
        if (Math.abs(growth) > 0.001) {
          const ratePerMin = growth / 1; // –ó–∞ 1 –º–∏–Ω—É—Ç—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
          console.log(`   üìä –†–æ—Å—Ç: +${growth.toFixed(6)} UNI (+${ratePerMin.toFixed(6)}/–º–∏–Ω)`);
          
          if (growth > 100) {
            console.log('   üö® –ê–ù–û–ú–ê–õ–¨–ù–´–ô –†–û–°–¢ - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã');
          } else if (growth > 10) {
            console.log('   ‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–´–ô –†–û–°–¢ - —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
          } else if (growth > 0) {
            console.log('   ‚úÖ –ù–û–†–ú–ê–õ–¨–ù–´–ô –†–û–°–¢ - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è');
          } else {
            console.log('   ‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–û - –Ω–µ—Ç —Ä–æ—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞');
          }
        } else {
          console.log('   ‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–û - –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }
      }
      previousBalance = currentBalance;
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
console.log('üîç –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–ò');
console.log('üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤');
console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥');
console.log('\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C');

monitorStabilization(); // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É

setInterval(monitorStabilization, 60000); // –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥