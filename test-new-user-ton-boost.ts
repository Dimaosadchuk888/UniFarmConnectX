/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON Boost –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */

import { supabase } from './core/supabase.js';

async function testNewUserFlow() {
  console.log('=== –¢–ï–°–¢ TON BOOST –î–õ–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
  console.log('–î–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', new Date().toISOString());
  console.log('\n');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
  const timestamp = Date.now();
  const testUserId = 90000 + Math.floor(Math.random() * 9999);
  const testTelegramId = 900000000 + Math.floor(Math.random() * 99999999);
  
  console.log('üß™ –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô');
  console.log('=' .repeat(50));
  console.log(`Test User ID: ${testUserId}`);
  console.log(`Test Telegram ID: ${testTelegramId}`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    await supabase.from('transactions').delete().eq('user_id', testUserId);
    await supabase.from('ton_farming_data').delete().eq('user_id', testUserId);
    await supabase.from('users').delete().eq('id', testUserId);
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const { data: newUser, error: userError } = await supabase
      .from('users')
      .insert({
        id: testUserId,
        telegram_id: testTelegramId,
        username: 'test_ton_boost_user',
        balance_uni: 1000,
        balance_ton: 100,
        created_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    console.log(`   balance_ton: ${newUser.balance_ton}`);
    
    // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É TON Boost
    console.log('\nüìã –®–∞–≥ 3: –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ TON Boost (5 TON)');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
    const { data: firstBoost, error: boost1Error } = await supabase
      .from('ton_farming_data')
      .upsert({
        user_id: testUserId,
        farming_balance: 5,
        farming_rate: 0.015,
        boost_package_id: 2,
        farming_start_timestamp: new Date().toISOString(),
        farming_last_update: new Date().toISOString()
      }, {
        onConflict: 'user_id'
      })
      .select()
      .single();
    
    if (boost1Error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è boost:', boost1Error);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
    await supabase.from('transactions').insert({
      user_id: testUserId,
      type: 'BOOST_PURCHASE',
      amount: '5',
      amount_ton: '5',
      currency: 'TON',
      status: 'completed',
      description: '–ü–æ–∫—É–ø–∫–∞ TON Boost "Standard Boost" (-5 TON)',
      metadata: JSON.stringify({
        boost_package_id: 2,
        package_name: 'Standard Boost',
        daily_rate: 0.015,
        original_type: 'TON_BOOST_PURCHASE'
      })
    });
    
    console.log('‚úÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log(`   farming_balance: ${firstBoost.farming_balance} TON`);
    
    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∫—É–ø–∫—É (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
    console.log('\nüìã –®–∞–≥ 4: –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ TON Boost (10 TON)');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º farming_balance —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º
    const { data: secondBoost, error: boost2Error } = await supabase
      .from('ton_farming_data')
      .update({
        farming_balance: 15, // 5 + 10
        farming_rate: 0.02,
        boost_package_id: 3,
        farming_last_update: new Date().toISOString()
      })
      .eq('user_id', testUserId)
      .select()
      .single();
    
    if (boost2Error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è boost:', boost2Error);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ç–æ—Ä–æ–π –ø–æ–∫—É–ø–∫–∏
    await supabase.from('transactions').insert({
      user_id: testUserId,
      type: 'BOOST_PURCHASE',
      amount: '10',
      amount_ton: '10',
      currency: 'TON',
      status: 'completed',
      description: '–ü–æ–∫—É–ø–∫–∞ TON Boost "Advanced Boost" (-10 TON)',
      metadata: JSON.stringify({
        boost_package_id: 3,
        package_name: 'Advanced Boost',
        daily_rate: 0.02,
        original_type: 'TON_BOOST_PURCHASE'
      })
    });
    
    console.log('‚úÖ –í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log(`   farming_balance: ${secondBoost.farming_balance} TON (–Ω–∞–∫–æ–ø–ª–µ–Ω–æ)`);
    
    // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
    console.log('\nüìã –®–∞–≥ 5: –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');
    
    const expectedIncome = 15 * 0.02 * 5 / 1440; // 15 TON * 2% * 5 –º–∏–Ω—É—Ç
    
    await supabase.from('transactions').insert({
      user_id: testUserId,
      type: 'FARMING_REWARD',
      amount: expectedIncome.toString(),
      amount_ton: expectedIncome.toString(),
      currency: 'TON',
      status: 'completed',
      description: `TON Boost –¥–æ—Ö–æ–¥ (–ø–∞–∫–µ—Ç 3): ${expectedIncome.toFixed(6)} TON`,
      metadata: JSON.stringify({
        original_type: 'TON_BOOST_INCOME',
        transaction_source: 'ton_boost_scheduler',
        boost_package_id: 3
      })
    });
    
    console.log('‚úÖ –î–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω');
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${expectedIncome.toFixed(6)} TON`);
    console.log(`   –†–∞—Å—á–µ—Ç: 15 TON * 2% * 5 –º–∏–Ω / 1440 –º–∏–Ω`);
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüìã –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: allTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', testUserId)
      .order('created_at');
    
    console.log(`\n‚úÖ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTx?.length || 0}`);
    
    if (allTx) {
      let totalPurchased = 0;
      let totalIncome = 0;
      
      for (const tx of allTx) {
        const amount = parseFloat(tx.amount_ton || tx.amount || '0');
        if (tx.type === 'BOOST_PURCHASE') {
          totalPurchased += amount;
          console.log(`   - –ü–æ–∫—É–ø–∫–∞: ${amount} TON`);
        } else if (tx.type === 'FARMING_REWARD') {
          totalIncome += amount;
          console.log(`   + –î–æ—Ö–æ–¥: ${amount.toFixed(6)} TON`);
        }
      }
      
      console.log(`\nüìä –ò–¢–û–ì–û:`);
      console.log(`   –ö—É–ø–ª–µ–Ω–æ: ${totalPurchased} TON`);
      console.log(`   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalIncome.toFixed(6)} TON`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const { data: finalState } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', testUserId)
      .single();
    
    if (finalState) {
      console.log(`\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ton_farming_data:`);
      console.log(`   farming_balance: ${finalState.farming_balance} TON`);
      console.log(`   farming_rate: ${finalState.farming_rate} (${finalState.farming_rate * 100}% –≤ –¥–µ–Ω—å)`);
      console.log(`   boost_package_id: ${finalState.boost_package_id}`);
    }
    
    // 7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã –®–∞–≥ 7: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    await supabase.from('transactions').delete().eq('user_id', testUserId);
    await supabase.from('ton_farming_data').delete().eq('user_id', testUserId);
    await supabase.from('users').delete().eq('id', testUserId);
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
  console.log('\n‚úÖ –í–´–í–û–î: –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  console.log('   - –ü–æ–∫—É–ø–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞—é—Ç –∑–∞–ø–∏—Å–∏');
  console.log('   - –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('   - –î–æ—Ö–æ–¥—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞');
  console.log('   - –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ metadata');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNewUserFlow()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', err);
    process.exit(1);
  });