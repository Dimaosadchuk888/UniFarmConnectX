
/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–û–¢–ê–õ–¨–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ –°–ò–°–¢–ï–ú–´ UNIFARM CONNECT
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π, API, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤, —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 * –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 15 –∏—é–Ω—è 2025
 */

import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

class FinalTotalSystemChecklist {
  constructor() {
    this.results = {
      environment: { status: 'unknown', checks: [] },
      database: { status: 'unknown', checks: [] },
      modules: { status: 'unknown', checks: [] },
      api: { status: 'unknown', checks: [] },
      controllers: { status: 'unknown', checks: [] },
      services: { status: 'unknown', checks: [] },
      security: { status: 'unknown', checks: [] },
      telegram: { status: 'unknown', checks: [] },
      frontend: { status: 'unknown', checks: [] },
      system: { status: 'unknown', checks: [] },
      deployment: { status: 'unknown', checks: [] }
    };
    
    this.baseUrl = `https://${process.env.REPLIT_DEV_DOMAIN}`;
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    console.log('üîç –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–û–¢–ê–õ–¨–ù–û–ì–û –ß–ï–ö-–õ–ò–°–¢–ê UniFarm Connect');
    console.log(`URL: ${this.baseUrl}\n`);
  }

  /**
   * 1. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
   */
  async checkEnvironmentVariables() {
    console.log('üîê –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø...');
    
    const requiredVars = [
      'SUPABASE_URL', 'SUPABASE_KEY', 'TELEGRAM_BOT_TOKEN',
      'JWT_SECRET', 'SESSION_SECRET', 'REPLIT_DEV_DOMAIN'
    ];
    
    const deprecatedVars = [
      'DATABASE_URL', 'PGHOST', 'PGUSER', 'PGPASSWORD', 
      'PGDATABASE', 'PGPORT', 'NEON_URL'
    ];

    let envScore = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (const varName of requiredVars) {
      if (process.env[varName]) {
        this.results.environment.checks.push({
          check: `${varName}`,
          status: '‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù–ê',
          details: `–î–ª–∏–Ω–∞: ${process.env[varName].length} —Å–∏–º–≤–æ–ª–æ–≤`
        });
        envScore++;
      } else {
        this.results.environment.checks.push({
          check: `${varName}`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (const varName of deprecatedVars) {
      if (process.env[varName]) {
        this.results.environment.checks.push({
          check: `${varName} (deprecated)`,
          status: '‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ê',
          details: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å'
        });
      } else {
        this.results.environment.checks.push({
          check: `${varName} (deprecated)`,
          status: '‚úÖ –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
        });
        envScore++;
      }
    }

    this.results.environment.status = envScore >= 10 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : envScore >= 8 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø';
  }

  /**
   * 2. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE
   */
  async checkSupabaseDatabase() {
    console.log('üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE...');
    
    try {
      const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const { data: connectionTest, error: connectionError } = await supabase
        .from('users')
        .select('count')
        .limit(1);
      
      if (connectionError) {
        this.results.database.checks.push({
          check: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase',
          status: '‚ùå –û–®–ò–ë–ö–ê',
          details: connectionError.message
        });
      } else {
        this.results.database.checks.push({
          check: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase',
          status: '‚úÖ –£–°–ü–ï–®–ù–û',
          details: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
      const requiredTables = ['users', 'transactions', 'referrals', 'farming_sessions', 'user_sessions'];
      
      for (const table of requiredTables) {
        try {
          const { data, error } = await supabase
            .from(table)
            .select('*')
            .limit(1);
          
          if (error) {
            this.results.database.checks.push({
              check: `–¢–∞–±–ª–∏—Ü–∞ ${table}`,
              status: '‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê',
              details: error.message
            });
          } else {
            this.results.database.checks.push({
              check: `–¢–∞–±–ª–∏—Ü–∞ ${table}`,
              status: '‚úÖ –î–û–°–¢–£–ü–ù–ê',
              details: `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`
            });
          }
        } catch (tableError) {
          this.results.database.checks.push({
            check: `–¢–∞–±–ª–∏—Ü–∞ ${table}`,
            status: '‚ùå –û–®–ò–ë–ö–ê',
            details: tableError.message
          });
        }
      }
      
      this.results.database.status = '‚úÖ –ê–ö–¢–ò–í–ù–ê';
      
    } catch (error) {
      this.results.database.checks.push({
        check: '–û–±—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        status: '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
        details: error.message
      });
      this.results.database.status = '‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê';
    }
  }

  /**
   * 3. –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô
   */
  async checkModules() {
    console.log('üì¶ –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô...');
    
    const modules = [
      'auth', 'user', 'farming', 'wallet', 'boost', 
      'missions', 'referral', 'dailyBonus', 'telegram',
      'tonFarming', 'transactions', 'admin', 'monitor'
    ];
    
    for (const module of modules) {
      const modulePath = `modules/${module}`;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
      if (!fs.existsSync(modulePath)) {
        this.results.modules.checks.push({
          check: `–ú–æ–¥—É–ª—å ${module}`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ü–∞–ø–∫–∞ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª—è
      const requiredFiles = ['controller.ts', 'service.ts', 'routes.ts', 'types.ts'];
      const optionalFiles = ['model.ts'];
      
      let moduleScore = 0;
      const moduleDetails = [];
      
      for (const file of requiredFiles) {
        if (fs.existsSync(`${modulePath}/${file}`)) {
          moduleDetails.push(`${file} ‚úÖ`);
          moduleScore++;
        } else {
          moduleDetails.push(`${file} ‚ùå`);
        }
      }
      
      for (const file of optionalFiles) {
        if (fs.existsSync(`${modulePath}/${file}`)) {
          moduleDetails.push(`${file} ‚úÖ`);
        }
      }
      
      const status = moduleScore === 4 ? '‚úÖ –ü–û–õ–ù–´–ô' : moduleScore >= 3 ? '‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô' : '‚ùå –ù–ï–ü–û–õ–ù–´–ô';
      
      this.results.modules.checks.push({
        check: `–ú–æ–¥—É–ª—å ${module}`,
        status: status,
        details: moduleDetails.join(', ')
      });
    }
    
    const completeModules = this.results.modules.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.modules.status = completeModules >= 10 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : completeModules >= 8 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò';
  }

  /**
   * 4. –ü–†–û–í–ï–†–ö–ê API ENDPOINTS
   */
  async checkAPIEndpoints() {
    console.log('üì° –ü–†–û–í–ï–†–ö–ê API ENDPOINTS...');
    
    const endpoints = [
      // –ü—É–±–ª–∏—á–Ω—ã–µ endpoints
      { path: '/health', method: 'GET', auth: false, expected: 200 },
      { path: '/api/v2/health', method: 'GET', auth: false, expected: 200 },
      
      // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints
      { path: '/api/v2/users/profile', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/auth/telegram', method: 'POST', auth: false, expected: [400, 401] },
      { path: '/api/v2/farming/info', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/farming/status', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/wallet/balance', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/boost/packages', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/missions/list', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/referral/info', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/daily-bonus/status', method: 'GET', auth: true, expected: 401 },
      { path: '/api/v2/ton-farming/info', method: 'GET', auth: true, expected: 401 }
    ];
    
    for (const endpoint of endpoints) {
      try {
        const options = {
          method: endpoint.method,
          headers: { 'Content-Type': 'application/json' }
        };
        
        if (endpoint.method === 'POST') {
          options.body = JSON.stringify({
            telegram_id: 'test_user',
            username: 'test'
          });
        }
        
        const response = await fetch(`${this.baseUrl}${endpoint.path}`, options);
        const expectedStatuses = Array.isArray(endpoint.expected) ? endpoint.expected : [endpoint.expected];
        
        if (expectedStatuses.includes(response.status)) {
          this.results.api.checks.push({
            check: `${endpoint.method} ${endpoint.path}`,
            status: '‚úÖ –ö–û–†–†–ï–ö–¢–ù–´–ô',
            details: `HTTP ${response.status} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${endpoint.expected})`
          });
        } else {
          this.results.api.checks.push({
            check: `${endpoint.method} ${endpoint.path}`,
            status: '‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô',
            details: `HTTP ${response.status} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${endpoint.expected})`
          });
        }
        
      } catch (error) {
        this.results.api.checks.push({
          check: `${endpoint.method} ${endpoint.path}`,
          status: '‚ùå –û–®–ò–ë–ö–ê',
          details: error.message
        });
      }
    }
    
    const workingEndpoints = this.results.api.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.api.status = workingEndpoints >= 10 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : workingEndpoints >= 8 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –ü–†–û–ë–õ–ï–ú–´';
  }

  /**
   * 5. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í
   */
  async checkControllers() {
    console.log('üéÆ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í...');
    
    const modules = [
      'auth', 'user', 'farming', 'wallet', 'boost',
      'missions', 'referral', 'dailyBonus', 'telegram',
      'tonFarming', 'transactions', 'admin', 'monitor'
    ];
    
    for (const module of modules) {
      const controllerPath = `modules/${module}/controller.ts`;
      
      if (!fs.existsSync(controllerPath)) {
        this.results.controllers.checks.push({
          check: `${module} Controller`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–§–∞–π–ª –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        continue;
      }
      
      try {
        const content = fs.readFileSync(controllerPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        const hasBaseController = content.includes('BaseController');
        const hasExports = content.includes('export');
        const hasMethods = content.includes('async ') || content.includes('function');
        const hasErrorHandling = content.includes('try') && content.includes('catch');
        
        const issues = [];
        if (!hasBaseController) issues.push('–ù–µ—Ç BaseController');
        if (!hasExports) issues.push('–ù–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–æ–≤');
        if (!hasMethods) issues.push('–ù–µ—Ç –º–µ—Ç–æ–¥–æ–≤');
        if (!hasErrorHandling) issues.push('–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
        
        const status = issues.length === 0 ? '‚úÖ –ö–û–†–†–ï–ö–¢–ù–´–ô' : 
                      issues.length <= 2 ? '‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô' : '‚ùå –ü–†–û–ë–õ–ï–ú–´';
        
        this.results.controllers.checks.push({
          check: `${module} Controller`,
          status: status,
          details: issues.length === 0 ? '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã' : issues.join(', ')
        });
        
      } catch (error) {
        this.results.controllers.checks.push({
          check: `${module} Controller`,
          status: '‚ùå –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø',
          details: error.message
        });
      }
    }
    
    const goodControllers = this.results.controllers.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.controllers.status = goodControllers >= 10 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : goodControllers >= 8 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò';
  }

  /**
   * 6. –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í
   */
  async checkServices() {
    console.log('‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í...');
    
    const modules = [
      'auth', 'user', 'farming', 'wallet', 'boost',
      'missions', 'referral', 'dailyBonus', 'telegram',
      'tonFarming', 'admin'
    ];
    
    for (const module of modules) {
      const servicePath = `modules/${module}/service.ts`;
      
      if (!fs.existsSync(servicePath)) {
        this.results.services.checks.push({
          check: `${module} Service`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        continue;
      }
      
      try {
        const content = fs.readFileSync(servicePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        const hasSupabase = content.includes('supabase') || content.includes('createClient');
        const hasClass = content.includes('class') || content.includes('export');
        const hasAsyncMethods = content.includes('async ');
        const hasErrorHandling = content.includes('try') && content.includes('catch');
        const hasTypes = content.includes('interface') || content.includes('type');
        
        const checks = [
          { name: 'Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', status: hasSupabase },
          { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞', status: hasClass },
          { name: 'Async –º–µ—Ç–æ–¥—ã', status: hasAsyncMethods },
          { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', status: hasErrorHandling },
          { name: '–¢–∏–ø–∏–∑–∞—Ü–∏—è', status: hasTypes }
        ];
        
        const passedChecks = checks.filter(c => c.status).length;
        const status = passedChecks >= 4 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : 
                      passedChecks >= 3 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò';
        
        this.results.services.checks.push({
          check: `${module} Service`,
          status: status,
          details: `${passedChecks}/5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`
        });
        
      } catch (error) {
        this.results.services.checks.push({
          check: `${module} Service`,
          status: '‚ùå –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø',
          details: error.message
        });
      }
    }
    
    const goodServices = this.results.services.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.services.status = goodServices >= 8 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : goodServices >= 6 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò';
  }

  /**
   * 7. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
   */
  async checkSecurity() {
    console.log('üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
    const middlewareFiles = [
      'core/middleware/auth.ts',
      'core/middleware/telegramAuth.ts',
      'core/middleware/adminAuth.ts',
      'core/middleware/cors.ts',
      'core/middleware/errorHandler.ts'
    ];
    
    for (const filePath of middlewareFiles) {
      if (fs.existsSync(filePath)) {
        this.results.security.checks.push({
          check: `Middleware ${path.basename(filePath)}`,
          status: '‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢',
          details: '–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      } else {
        this.results.security.checks.push({
          check: `Middleware ${path.basename(filePath)}`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const protectedEndpoints = [
      '/api/v2/users/profile',
      '/api/v2/farming/start',
      '/api/v2/wallet/balance',
      '/api/v2/admin/stats'
    ];
    
    for (const endpoint of protectedEndpoints) {
      try {
        const response = await fetch(`${this.baseUrl}${endpoint}`);
        
        if (response.status === 401) {
          this.results.security.checks.push({
            check: `–ó–∞—â–∏—Ç–∞ ${endpoint}`,
            status: '‚úÖ –ó–ê–©–ò–©–ï–ù',
            details: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
          });
        } else {
          this.results.security.checks.push({
            check: `–ó–∞—â–∏—Ç–∞ ${endpoint}`,
            status: '‚ùå –ù–ï –ó–ê–©–ò–©–ï–ù',
            details: `–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ${response.status} –≤–º–µ—Å—Ç–æ 401`
          });
        }
      } catch (error) {
        this.results.security.checks.push({
          check: `–ó–∞—â–∏—Ç–∞ ${endpoint}`,
          status: '‚ö†Ô∏è –û–®–ò–ë–ö–ê',
          details: error.message
        });
      }
    }
    
    const securityScore = this.results.security.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.security.status = securityScore >= 7 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : securityScore >= 5 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –£–Ø–ó–í–ò–ú–û–°–¢–ò';
  }

  /**
   * 8. –ü–†–û–í–ï–†–ö–ê TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
   */
  async checkTelegramIntegration() {
    console.log('üì± –ü–†–û–í–ï–†–ö–ê TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Webhook
      const webhookResponse = await fetch(`https://api.telegram.org/bot${this.botToken}/getWebhookInfo`);
      const webhookData = await webhookResponse.json();
      
      if (webhookData.ok) {
        const webhookUrl = webhookData.result.url;
        
        if (webhookUrl.includes(process.env.REPLIT_DEV_DOMAIN)) {
          this.results.telegram.checks.push({
            check: 'Webhook URL',
            status: '‚úÖ –ö–û–†–†–ï–ö–¢–ù–´–ô',
            details: webhookUrl
          });
        } else if (webhookUrl === '') {
          this.results.telegram.checks.push({
            check: 'Webhook URL',
            status: '‚ö†Ô∏è –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù',
            details: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º'
          });
        } else {
          this.results.telegram.checks.push({
            check: 'Webhook URL',
            status: '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô',
            details: webhookUrl
          });
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Bot API
      const botResponse = await fetch(`https://api.telegram.org/bot${this.botToken}/getMe`);
      const botData = await botResponse.json();
      
      if (botData.ok) {
        this.results.telegram.checks.push({
          check: 'Bot API',
          status: '‚úÖ –†–ê–ë–û–¢–ê–ï–¢',
          details: `Bot: @${botData.result.username}`
        });
      } else {
        this.results.telegram.checks.push({
          check: 'Bot API',
          status: '‚ùå –û–®–ò–ë–ö–ê',
          details: botData.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
      
    } catch (error) {
      this.results.telegram.checks.push({
        check: 'Telegram API',
        status: '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù',
        details: error.message
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const telegramFiles = [
      'modules/telegram/controller.ts',
      'modules/telegram/service.ts',
      'core/middleware/telegramAuth.ts'
    ];
    
    for (const filePath of telegramFiles) {
      if (fs.existsSync(filePath)) {
        this.results.telegram.checks.push({
          check: `–§–∞–π–ª ${path.basename(filePath)}`,
          status: '‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢',
          details: '–§–∞–π–ª –Ω–∞–π–¥–µ–Ω'
        });
      } else {
        this.results.telegram.checks.push({
          check: `–§–∞–π–ª ${path.basename(filePath)}`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        });
      }
    }
    
    const telegramScore = this.results.telegram.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.telegram.status = telegramScore >= 4 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : telegramScore >= 3 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –ü–†–û–ë–õ–ï–ú–´';
  }

  /**
   * 9. –ü–†–û–í–ï–†–ö–ê FRONTEND
   */
  async checkFrontend() {
    console.log('üåê –ü–†–û–í–ï–†–ö–ê FRONTEND...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const response = await fetch(this.baseUrl);
      const html = await response.text();
      
      const checks = [
        { name: 'HTML –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', status: response.status === 200 },
        { name: 'React root div', status: html.includes('id="root"') },
        { name: 'Telegram WebApp script', status: html.includes('telegram-web-app.js') },
        { name: 'Manifest', status: html.includes('rel="manifest"') },
        { name: 'Meta —Ç–µ–≥–∏', status: html.includes('viewport') && html.includes('theme-color') }
      ];
      
      for (const check of checks) {
        this.results.frontend.checks.push({
          check: check.name,
          status: check.status ? '‚úÖ –û–ö' : '‚ùå –ü–†–û–ë–õ–ï–ú–ê',
          details: check.status ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞' : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
      const staticFiles = [
        '/client/manifest.json',
        '/client/public/tonconnect-manifest.json'
      ];
      
      for (const file of staticFiles) {
        try {
          const fileResponse = await fetch(`${this.baseUrl}${file}`);
          this.results.frontend.checks.push({
            check: `–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª ${path.basename(file)}`,
            status: fileResponse.status === 200 ? '‚úÖ –î–û–°–¢–£–ü–ï–ù' : '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù',
            details: `HTTP ${fileResponse.status}`
          });
        } catch (error) {
          this.results.frontend.checks.push({
            check: `–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª ${path.basename(file)}`,
            status: '‚ùå –û–®–ò–ë–ö–ê',
            details: error.message
          });
        }
      }
      
    } catch (error) {
      this.results.frontend.checks.push({
        check: 'Frontend –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
        status: '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê',
        details: error.message
      });
    }
    
    const frontendScore = this.results.frontend.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.frontend.status = frontendScore >= 6 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : frontendScore >= 4 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –ü–†–û–ë–õ–ï–ú–´';
  }

  /**
   * 10. –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –§–ê–ô–õ–û–í
   */
  async checkSystemFiles() {
    console.log('‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –§–ê–ô–õ–û–í...');
    
    const criticalFiles = [
      { path: 'server/index.ts', name: '–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä' },
      { path: 'server/routes.ts', name: '–ú–∞—Ä—à—Ä—É—Ç—ã API' },
      { path: 'core/config.ts', name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è' },
      { path: 'core/supabaseClient.ts', name: 'Supabase –∫–ª–∏–µ–Ω—Ç' },
      { path: 'core/logger.ts', name: '–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è' },
      { path: 'shared/schema.ts', name: '–°—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö' },
      { path: 'package.json', name: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' },
      { path: 'client/package.json', name: 'Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' }
    ];
    
    for (const file of criticalFiles) {
      if (fs.existsSync(file.path)) {
        try {
          const stats = fs.statSync(file.path);
          this.results.system.checks.push({
            check: file.name,
            status: '‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢',
            details: `–†–∞–∑–º–µ—Ä: ${Math.round(stats.size / 1024)}KB, –ò–∑–º–µ–Ω–µ–Ω: ${stats.mtime.toLocaleDateString()}`
          });
        } catch (error) {
          this.results.system.checks.push({
            check: file.name,
            status: '‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –ß–¢–ï–ù–ò–Ø',
            details: error.message
          });
        }
      } else {
        this.results.system.checks.push({
          check: file.name,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
    const criticalDirs = ['core', 'modules', 'server', 'client/src', 'shared'];
    
    for (const dir of criticalDirs) {
      if (fs.existsSync(dir)) {
        const files = fs.readdirSync(dir);
        this.results.system.checks.push({
          check: `–ü–∞–ø–∫–∞ ${dir}`,
          status: '‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢',
          details: `–§–∞–π–ª–æ–≤: ${files.length}`
        });
      } else {
        this.results.system.checks.push({
          check: `–ü–∞–ø–∫–∞ ${dir}`,
          status: '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢',
          details: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
    }
    
    const systemScore = this.results.system.checks.filter(c => c.status.includes('‚úÖ')).length;
    this.results.system.status = systemScore >= 11 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : systemScore >= 9 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´';
  }

  /**
   * 11. –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ
   */
  async checkDeploymentReadiness() {
    console.log('üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ...');
    
    const deploymentChecks = [
      {
        name: '–í—Å–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
        check: () => {
          const required = ['SUPABASE_URL', 'SUPABASE_KEY', 'TELEGRAM_BOT_TOKEN'];
          return required.every(v => process.env[v]);
        }
      },
      {
        name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞',
        check: () => this.results.database.status.includes('‚úÖ')
      },
      {
        name: 'API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç',
        check: () => this.results.api.status.includes('‚úÖ') || this.results.api.status.includes('‚ö†Ô∏è')
      },
      {
        name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
        check: () => this.results.security.status.includes('‚úÖ')
      },
      {
        name: 'Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç',
        check: () => this.results.telegram.status.includes('‚úÖ') || this.results.telegram.status.includes('‚ö†Ô∏è')
      },
      {
        name: 'Frontend –¥–æ—Å—Ç—É–ø–µ–Ω',
        check: () => this.results.frontend.status.includes('‚úÖ') || this.results.frontend.status.includes('‚ö†Ô∏è')
      },
      {
        name: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ',
        check: () => this.results.system.status.includes('‚úÖ')
      }
    ];
    
    let deploymentScore = 0;
    
    for (const check of deploymentChecks) {
      const passed = check.check();
      
      this.results.deployment.checks.push({
        check: check.name,
        status: passed ? '‚úÖ –ì–û–¢–û–í–û' : '‚ùå –ù–ï –ì–û–¢–û–í–û',
        details: passed ? '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã' : '–¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
      });
      
      if (passed) deploymentScore++;
    }
    
    this.results.deployment.status = deploymentScore >= 6 ? 'üü¢ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ' : 
                                   deploymentScore >= 4 ? 'üü° –ü–û–ß–¢–ò –ì–û–¢–û–í–û' : 'üî¥ –ù–ï –ì–û–¢–û–í–û';
  }

  /**
   * –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê
   */
  generateFinalReport() {
    const currentDate = new Date().toLocaleString('ru-RU');
    
    console.log('\n\nüõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –¢–û–¢–ê–õ–¨–ù–´–ô –ß–ï–ö-–õ–ò–°–¢ UniFarm Connect');
    console.log(`–î–∞—Ç–∞: ${currentDate}`);
    console.log('–°—Ä–µ–¥–∞: Replit / Supabase / Telegram WebApp\n');
    
    const sections = [
      { name: 'üîê –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø', key: 'environment' },
      { name: 'üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•', key: 'database' },
      { name: 'üì¶ –ú–û–î–£–õ–ò', key: 'modules' },
      { name: 'üì° API ENDPOINTS', key: 'api' },
      { name: 'üéÆ –ö–û–ù–¢–†–û–õ–õ–ï–†–´', key: 'controllers' },
      { name: '‚öôÔ∏è –°–ï–†–í–ò–°–´', key: 'services' },
      { name: 'üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨', key: 'security' },
      { name: 'üì± TELEGRAM', key: 'telegram' },
      { name: 'üåê FRONTEND', key: 'frontend' },
      { name: '‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –§–ê–ô–õ–´', key: 'system' },
      { name: 'üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –î–ï–ü–õ–û–Æ', key: 'deployment' }
    ];
    
    for (const section of sections) {
      console.log(`${section.name}: ${this.results[section.key].status}`);
      
      this.results[section.key].checks.forEach(check => {
        console.log(`‚Ä¢ ${check.check}: ${check.status}`);
        if (check.details) {
          console.log(`  ‚îî‚îÄ ${check.details}`);
        }
      });
      console.log();
    }
    
    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const greenSections = Object.values(this.results).filter(r => r.status.includes('‚úÖ')).length;
    const yellowSections = Object.values(this.results).filter(r => r.status.includes('‚ö†Ô∏è')).length;
    const redSections = Object.values(this.results).filter(r => r.status.includes('‚ùå') || r.status.includes('üî¥')).length;
    
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Å–µ–∫—Ü–∏–∏: ${greenSections}/11`);
    console.log(`‚ö†Ô∏è –¢—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è: ${yellowSections}/11`);
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${redSections}/11`);
    
    let overallStatus;
    if (greenSections >= 8 && redSections === 0) {
      overallStatus = 'üü¢ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù';
    } else if (greenSections >= 6 && redSections <= 2) {
      overallStatus = 'üü° –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê (–¢–†–ï–ë–£–ï–¢–°–Ø –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –î–û–†–ê–ë–û–¢–ö–ê)';
    } else {
      overallStatus = 'üî¥ –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –°–ï–†–¨–ï–ó–ù–û–ô –î–û–†–ê–ë–û–¢–ö–ò –ü–ï–†–ï–î –ü–†–û–î–ê–ö–®–ï–ù';
    }
    
    console.log(`\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°: ${overallStatus}\n`);
    
    return {
      timestamp: currentDate,
      overallStatus,
      sections: this.results,
      statistics: { green: greenSections, yellow: yellowSections, red: redSections },
      recommendations: this.generateRecommendations()
    };
  }

  /**
   * –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
   */
  generateRecommendations() {
    const recommendations = [];
    
    Object.entries(this.results).forEach(([section, data]) => {
      if (data.status.includes('‚ùå') || data.status.includes('üî¥')) {
        const issues = data.checks.filter(c => c.status.includes('‚ùå'));
        if (issues.length > 0) {
          recommendations.push({
            priority: '–ö–†–ò–¢–ò–ß–ù–û',
            section: section.toUpperCase(),
            issues: issues.map(i => i.check),
            description: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ${issues.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Å–µ–∫—Ü–∏–∏ ${section}`
          });
        }
      } else if (data.status.includes('‚ö†Ô∏è') || data.status.includes('üü°')) {
        const warnings = data.checks.filter(c => c.status.includes('‚ö†Ô∏è'));
        if (warnings.length > 0) {
          recommendations.push({
            priority: '–í–ê–ñ–ù–û',
            section: section.toUpperCase(),
            issues: warnings.map(w => w.check),
            description: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å ${warnings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ ${section}`
          });
        }
      }
    });
    
    return recommendations;
  }

  /**
   * –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–ò
   */
  async runFullChecklist() {
    try {
      console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ß–ï–ö-–õ–ò–°–¢–ê...\n');
      
      await this.checkEnvironmentVariables();
      await this.checkSupabaseDatabase();
      await this.checkModules();
      await this.checkAPIEndpoints();
      await this.checkControllers();
      await this.checkServices();
      await this.checkSecurity();
      await this.checkTelegramIntegration();
      await this.checkFrontend();
      await this.checkSystemFiles();
      await this.checkDeploymentReadiness();
      
      const report = this.generateFinalReport();
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      fs.writeFileSync(
        'FINAL_TOTAL_SYSTEM_CHECKLIST_REPORT.json', 
        JSON.stringify(report, null, 2)
      );
      
      console.log('üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FINAL_TOTAL_SYSTEM_CHECKLIST_REPORT.json');
      
      return report;
      
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –ß–ï–ö-–õ–ò–°–¢–ê:', error.message);
      throw error;
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  const checklist = new FinalTotalSystemChecklist();
  await checklist.runFullChecklist();
}

main().catch(console.error);
