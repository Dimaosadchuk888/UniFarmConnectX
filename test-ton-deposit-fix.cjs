const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
const supabaseUrl = process.env.DATABASE_URL?.replace('postgresql://', 'https://').replace(':5432', '') || 'https://localhost';
const supabaseKey = 'dummy'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ JWT
const supabase = createClient(supabaseUrl, supabaseKey);

async function testTonDepositFix() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('=' * 70);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ö–µ—à–µ–º
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: existingTxs, error: searchError } = await supabase
      .from('transactions')
      .select('*')
      .or('description.ilike.%00a1ba3c2614f4d65cc346805feea960%,metadata->>tx_hash.eq.00a1ba3c2614f4d65cc346805feea960')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (searchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', searchError.message);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${existingTxs?.length || 0}`);
    
    existingTxs?.forEach((tx, index) => {
      console.log(`\nüìù –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø #${index + 1}:`);
      console.log(`   ID: ${tx.id}`);
      console.log(`   User: ${tx.user_id}`);
      console.log(`   –¢–∏–ø: ${tx.type}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata || {}, null, 2)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const hasPrefix = tx.description?.includes('TON deposit from blockchain:');
      const hasOriginalType = tx.metadata?.original_type === 'TON_DEPOSIT';
      
      console.log(`   ‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${hasPrefix ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   ‚úÖ –¢–∏–ø –≤ metadata: ${hasOriginalType ? '–î–ê' : '–ù–ï–¢'}`);
      
      if (hasPrefix && hasOriginalType) {
        console.log('   üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û!');
      } else if (!hasPrefix || !hasOriginalType) {
        console.log('   ‚è≥ –°—Ç–∞—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)');
      }
    });
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint
    console.log('\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT –¥–ª—è User 25
    const testToken = jwt.sign(
      {
        userId: 25,
        telegram_id: 425855744,
        username: 'DimaOsadchuk',
        ref_code: 'V4pOrI'
      },
      process.env.JWT_SECRET || 'unifarm-jwt-secret-key-2025',
      { expiresIn: '1h' }
    );
    
    console.log('üîë JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è User 25');
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await fetch('http://localhost:3000/api/v2/transactions?page=1&limit=20', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${testToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.log(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status} ${response.statusText}`);
      console.log('‚è≥ –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      return;
    }
    
    const apiData = await response.json();
    
    if (!apiData.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', apiData.error);
      return;
    }
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ API: ${apiData.data?.transactions?.length || 0}`);
    
    // –ò—â–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const tonTransactions = apiData.data?.transactions?.filter(tx => 
      tx.currency === 'TON' || tx.amount_ton > 0
    ) || [];
    
    console.log(`üíé TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${tonTransactions.length}`);
    
    tonTransactions.forEach((tx, index) => {
      console.log(`\nüíé TON –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø #${index + 1}:`);
      console.log(`   ID: ${tx.id}`);
      console.log(`   –¢–∏–ø: ${tx.type}`);
      console.log(`   –°—É–º–º–∞: ${tx.amount || tx.amount_ton} TON`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      
      const hasNewFormat = tx.description?.includes('TON deposit from blockchain:');
      const hasMetadata = tx.metadata?.original_type === 'TON_DEPOSIT';
      
      console.log(`   üîß –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: ${hasNewFormat ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      console.log(`   üè∑Ô∏è Metadata —Ç–∏–ø: ${hasMetadata ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (hasNewFormat && hasMetadata) {
        console.log('   üéä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–û!');
      }
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–∏–∫—É
    console.log('\n3Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø FRONTEND –ü–ê–†–°–ò–ù–ì–ê:');
    
    tonTransactions.forEach((tx, index) => {
      console.log(`\nüñ•Ô∏è FRONTEND –ü–ê–†–°–ò–ù–ì –î–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò #${index + 1}:`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É getTransactionConfig
      let transactionType = tx.type;
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: metadata.original_type
      if (tx.metadata?.original_type) {
        transactionType = tx.metadata.original_type;
        console.log(`   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è metadata.original_type: ${transactionType}`);
      }
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ description –¥–ª—è FARMING_REWARD
      else if (tx.type === 'FARMING_REWARD' && tx.description) {
        if (tx.description.includes('Deposit')) {
          if (tx.description.includes('UNI')) {
            transactionType = 'UNI_DEPOSIT';
          } else {
            transactionType = 'TON_DEPOSIT';
          }
          console.log(`   üîç –ü–∞—Ä—Å–∏–Ω–≥ description: ${transactionType}`);
        }
      }
      else {
        console.log(`   üîÑ Fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–∏–ø—É: ${transactionType}`);
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const finalDisplay = transactionType === 'TON_DEPOSIT' 
        ? 'üíé TON –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å–∏–Ω–∏–π —Å—Ç–∏–ª—å)' 
        : transactionType === 'FARMING_REWARD' 
        ? 'üåæ UNI Farming (–∑–µ–ª–µ–Ω—ã–π —Å—Ç–∏–ª—å)'
        : `üìù ${transactionType}`;
        
      console.log(`   üé® –ò–¢–û–ì–û–í–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï: ${finalDisplay}`);
      
      if (transactionType === 'TON_DEPOSIT') {
        console.log('   üèÜ –£–°–ü–ï–•! TON –¥–µ–ø–æ–∑–∏—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      } else if (tx.currency === 'TON' && transactionType !== 'TON_DEPOSIT') {
        console.log('   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      }
    });
    
    console.log('\n' + '=' * 70);
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ backend –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    console.log('‚úÖ –ù–æ–≤—ã–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('üí° –°—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTonDepositFix().catch(console.error);