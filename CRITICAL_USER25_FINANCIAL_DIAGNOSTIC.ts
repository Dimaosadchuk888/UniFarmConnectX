/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ 25 - –§–ò–ù–ê–ù–°–û–í–´–ô –£–†–û–ù
 * –î–∞—Ç–∞: 28 –∏—é–ª—è 2025
 * 
 * –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª 4 TON Boost –ø–∞–∫–µ—Ç–∞ –ø–æ 1 TON, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å–∞–ª–∏—Å—å
 * –°–¢–ê–¢–£–°: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–ò–ù–ê–ù–°–û–í–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨
 */

import { supabase } from './core/supabaseClient';

async function criticalUser25Diagnostic() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25');
  console.log('=' .repeat(60));
  console.log('‚ö†Ô∏è  –§–ò–ù–ê–ù–°–û–í–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –î–ï–ù–¨–ì–ò –ù–ï –°–ü–ò–°–ê–õ–ò–°–¨ –ó–ê TON BOOST');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25...');
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, username, balance_ton, balance_uni, ton_boost_active, ton_boost_package, ton_boost_rate')
      .eq('id', 25)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25:');
    console.log(`   Username: ${userData.username}`);
    console.log(`   üíé TON Balance: ${userData.balance_ton} TON`);
    console.log(`   üí∞ UNI Balance: ${userData.balance_uni} UNI`);
    console.log(`   üöÄ TON Boost Active: ${userData.ton_boost_active}`);
    console.log(`   üì¶ TON Boost Package: ${userData.ton_boost_package}`);
    console.log(`   üìà TON Boost Rate: ${userData.ton_boost_rate}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25...');
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('id, type, amount, currency, description, created_at, metadata')
      .eq('user_id', 25)
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç: ${transactions.length}`);
      
      transactions.forEach((tx, index) => {
        console.log(`\n   üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
        console.log(`      ID: ${tx.id}`);
        console.log(`      Type: ${tx.type}`);
        console.log(`      Amount: ${tx.amount} ${tx.currency}`);
        console.log(`      Description: ${tx.description}`);
        console.log(`      Created: ${tx.created_at}`);
        console.log(`      Metadata: ${JSON.stringify(tx.metadata, null, 8)}`);
      });
      
      // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const boostPurchases = transactions.filter(tx => 
        tx.type === 'BOOST_PURCHASE' || 
        tx.description?.includes('TON Boost') ||
        (tx.metadata && JSON.stringify(tx.metadata).includes('boost'))
      );
      
      const withdrawals = transactions.filter(tx => 
        tx.type === 'WITHDRAWAL' ||
        tx.amount < 0
      );
      
      console.log(`\nüìä –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
      console.log(`   üõí TON Boost –ø–æ–∫—É–ø–∫–∏: ${boostPurchases.length}`);
      console.log(`   üí∏ –°–ø–∏—Å–∞–Ω–∏—è (withdrawal): ${withdrawals.length}`);
      
      if (boostPurchases.length > 0 && withdrawals.length === 0) {
        console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–û–ö–£–ü–ö–ò –ë–ï–ó –°–ü–ò–°–ê–ù–ò–ô!');
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Farming –¥–∞–Ω–Ω—ã–µ
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Farming –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25...');
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_active, created_at, updated_at')
      .eq('user_id', '25');
    
    if (farmingError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è farming –¥–∞–Ω–Ω—ã—Ö:', farmingError.message);
    } else {
      console.log(`üöú TON Farming –∑–∞–ø–∏—Å–∏: ${farmingData.length}`);
      farmingData.forEach((record, index) => {
        console.log(`\n   üåæ –ó–∞–ø–∏—Å—å ${index + 1}:`);
        console.log(`      User ID: ${record.user_id}`);
        console.log(`      Farming Balance: ${record.farming_balance} TON`);
        console.log(`      Farming Rate: ${record.farming_rate}`);
        console.log(`      Boost Active: ${record.boost_active}`);
        console.log(`      Created: ${record.created_at}`);
        console.log(`      Updated: ${record.updated_at}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ boost –ø–æ–∫—É–ø–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON Boost –ø–æ–∫—É–ø–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ...');
    const { data: recentBoosts, error: boostError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, description, created_at')
      .or('type.eq.BOOST_PURCHASE,description.ilike.%TON Boost%')
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (boostError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost –ø–æ–∫—É–ø–æ–∫:', boostError.message);
    } else {
      console.log(`üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON Boost –ø–æ–∫—É–ø–∫–∏: ${recentBoosts.length}`);
      recentBoosts.forEach((boost, index) => {
        console.log(`\n   üí≥ –ü–æ–∫—É–ø–∫–∞ ${index + 1}:`);
        console.log(`      User ID: ${boost.user_id}`);
        console.log(`      Type: ${boost.type}`);
        console.log(`      Amount: ${boost.amount} ${boost.currency}`);
        console.log(`      Description: ${boost.description}`);
        console.log(`      Created: ${boost.created_at}`);
      });
    }
    
    // 5. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î
    console.log('\n5Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´');
    console.log('=' .repeat(60));
    
    console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('1. processWithdrawal() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true, –Ω–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞');
    console.log('2. –û—à–∏–±–∫–∞ –≤ WalletService - —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('3. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç –±–æ–Ω—É—Å—ã –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏–π');
    console.log('4. –ö—ç—à –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ "—Å–ø–∏—Å–∞–Ω–∏—è"');
    console.log('5. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ amounts –≤–º–µ—Å—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö');
    
    console.log('\nüö® –§–ò–ù–ê–ù–°–û–í–´–ô –£–©–ï–†–ë:');
    if (userData.ton_boost_active && userData.balance_ton > 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª TON Boost –ë–ï–ó –æ–ø–ª–∞—Ç—ã');
      console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã —Å "–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ" –±—É—Å—Ç–∞');
      console.log('‚ùå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è');
    }
    
    console.log('\n‚ö†Ô∏è  –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('1. –û–°–¢–ê–ù–û–í–ò–¢–¨ –≤—Å–µ TON Boost –ø–æ–∫—É–ø–∫–∏');
    console.log('2. –ò–°–°–õ–ï–î–û–í–ê–¢–¨ WalletService.processWithdrawal()');
    console.log('3. –ü–†–û–í–ï–†–ò–¢–¨ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã –Ω–∞ –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç—å');
    console.log('4. –ö–û–ú–ü–ï–ù–°–ò–†–û–í–ê–¢–¨ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—â–µ—Ä–±');
    
  } catch (error) {
    console.log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
criticalUser25Diagnostic().catch(console.error);