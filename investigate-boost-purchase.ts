import { supabase } from './core/supabase.js';

async function investigateBoostPurchase() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–ö–ò TON BOOST –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô\n');
  console.log('='*60 + '\n');
  
  const userId = 74;
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('1Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 74:\n');
  
  const { data: recentTransactions } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false })
    .limit(10);
    
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${recentTransactions?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n`);
  
  // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å TON Boost
  const boostRelatedTransactions = recentTransactions?.filter(tx => 
    tx.description?.includes('TON Boost') || 
    tx.type === 'BOOST_PURCHASE' ||
    tx.metadata?.original_type === 'BOOST_PURCHASE'
  );
  
  boostRelatedTransactions?.forEach((tx, index) => {
    console.log(`${index + 1}. ID: ${tx.id}`);
    console.log(`   –¢–∏–ø: ${tx.type}`);
    console.log(`   –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
    console.log(`   –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString()}`);
    if (tx.metadata) {
      console.log(`   Metadata: ${JSON.stringify(tx.metadata)}`);
    }
    console.log('');
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã
  console.log('='*60);
  console.log('\n2Ô∏è‚É£ –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–ê–ö–ï–¢–´:\n');
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId.toString())
    .eq('boost_active', true);
    
  if (tonFarmingData && tonFarmingData.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${tonFarmingData.length}\n`);
    
    tonFarmingData.forEach((farming, index) => {
      console.log(`–ü–∞–∫–µ—Ç ${index + 1}:`);
      console.log(`- ID –ø–∞–∫–µ—Ç–∞: ${farming.boost_package_id}`);
      console.log(`- –ê–∫—Ç–∏–≤–µ–Ω: ${farming.boost_active}`);
      console.log(`- –°—Ç–∞–≤–∫–∞: ${farming.farming_rate * 100}% –≤ –¥–µ–Ω—å`);
      console.log(`- –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farming.farming_balance} TON`);
      console.log(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(farming.farming_last_update).toLocaleString()}`);
      console.log('');
    });
  } else {
    console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤');
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç TON Boost
  console.log('='*60);
  console.log('\n3Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –î–û–•–û–î–û–í TON BOOST:\n');
  
  const { data: incomeTransactions, count: incomeCount } = await supabase
    .from('transactions')
    .select('*', { count: 'exact' })
    .eq('user_id', userId)
    .like('description', '%TON Boost –¥–æ—Ö–æ–¥%')
    .order('created_at', { ascending: false })
    .limit(20);
    
  console.log(`–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–æ–≤: ${incomeCount || 0}`);
  
  if (incomeTransactions && incomeTransactions.length > 0) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–∫–µ—Ç–∞–º
    const packageGroups = new Map<string, any[]>();
    
    incomeTransactions.forEach(tx => {
      const match = tx.description?.match(/–ø–∞–∫–µ—Ç (\d+)/);
      const packageId = match ? match[1] : 'unknown';
      
      if (!packageGroups.has(packageId)) {
        packageGroups.set(packageId, []);
      }
      packageGroups.get(packageId)?.push(tx);
    });
    
    console.log('\n–î–æ—Ö–æ–¥—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º:');
    packageGroups.forEach((transactions, packageId) => {
      const totalIncome = transactions.reduce((sum, tx) => sum + parseFloat(tx.amount || '0'), 0);
      console.log(`\n–ü–∞–∫–µ—Ç ${packageId}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: ${totalIncome.toFixed(6)} TON`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      transactions.slice(0, 3).forEach(tx => {
        console.log(`  - ${new Date(tx.created_at).toLocaleString()}: ${tx.amount} TON`);
      });
    });
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE
  console.log('\n' + '='*60);
  console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê BOOST_PURCHASE:\n');
  
  const { data: boostPurchases, count: purchaseCount } = await supabase
    .from('transactions')
    .select('*', { count: 'exact' })
    .eq('type', 'BOOST_PURCHASE')
    .order('created_at', { ascending: false })
    .limit(10);
    
  console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–∏–ø–æ–º BOOST_PURCHASE: ${purchaseCount || 0}`);
  
  if (boostPurchases && boostPurchases.length > 0) {
    console.log('\n‚úÖ –ù–û–í–´–ô –¢–ò–ü –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:');
    boostPurchases.forEach(tx => {
      console.log(`- ${new Date(tx.created_at).toLocaleString()}: ${tx.description}`);
    });
  } else {
    console.log('\n‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–∏–ø–æ–º BOOST_PURCHASE');
    console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('1. –ö–æ–¥ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞');
    console.log('2. –°–µ—Ä–≤–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞');
    console.log('3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å —Ç–∏–ø–æ–º FARMING_REWARD');
  }
  
  // 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('\n' + '='*60);
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:\n');
  
  const { data: allBoostPackages } = await supabase
    .from('boost_packages')
    .select('*')
    .order('id');
    
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã:');
  allBoostPackages?.forEach(pkg => {
    console.log(`- ${pkg.name} (ID: ${pkg.id}): ${pkg.cost} TON, –¥–æ—Ö–æ–¥ ${pkg.daily_rate}% –≤ –¥–µ–Ω—å`);
  });
  
  console.log('\nüí° –í–´–í–û–î:');
  console.log('–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ TON Boost —Å–æ–∑–¥–∞–µ—Ç—Å—è –û–î–ù–ê —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏.');
  console.log('–î–æ—Ö–æ–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.');
  console.log('–ï—Å–ª–∏ —É –≤–∞—Å 7 –¥–µ–ø–æ–∑–∏—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
  console.log('1. –¢–∞–±–ª–∏—Ü—É ton_farming_data - —Ç–∞–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∏ –æ –∫–∞–∂–¥–æ–º –ø–∞–∫–µ—Ç–µ');
  console.log('2. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ - –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ');
}

investigateBoostPurchase();