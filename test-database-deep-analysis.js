#!/usr/bin/env node

/**
 * –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
 */

import http from 'http';

const API_BASE = 'http://localhost:3000/api/v2';

async function apiRequest(path, method = 'GET', body = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: `/api/v2${path}`,
      method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(data) });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    
    if (body) {
      req.write(JSON.stringify(body));
    }
    
    req.end();
  });
}

async function analyzeDatabaseTables() {
  console.log('=== –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE ===\n');
  console.log('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toLocaleString('ru-RU'));
  console.log('='.repeat(60) + '\n');

  const report = {
    tables: {},
    issues: [],
    recommendations: []
  };

  // 1. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ USERS
  console.log('üìä –¢–ê–ë–õ–ò–¶–ê USERS');
  console.log('-'.repeat(40));
  
  try {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 1
    const userTest = await apiRequest('/users/1');
    
    if (userTest.status === 200 && userTest.data.success) {
      const user = userTest.data.data;
      
      report.tables.users = {
        status: '‚úÖ –ê–ö–¢–ò–í–ù–ê',
        fields: {
          'id': user.id ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ü—É—Å—Ç–æ–µ',
          'telegram_id': user.telegram_id ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ü—É—Å—Ç–æ–µ',
          'username': user.username ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ü—É—Å—Ç–æ–µ',
          'ref_code': user.ref_code ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ü—É—Å—Ç–æ–µ',
          'balance_uni': user.balance_uni !== undefined ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          'balance_ton': user.balance_ton !== undefined ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          'referred_by': '‚úÖ –ü–æ–ª–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏',
          'created_at': user.created_at ? '‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùì –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          'uni_farming_start_timestamp': user.uni_farming_start_timestamp !== undefined ? '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' : '‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ',
          'ton_farming_balance': user.ton_farming_balance !== undefined ? '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' : '‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
        }
      };
      
      console.log('–ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        id: user.id,
        telegram_id: user.telegram_id,
        username: user.username,
        ref_code: user.ref_code,
        balance_uni: user.balance_uni,
        balance_ton: user.balance_ton
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ref_code
      if (!user.ref_code || user.ref_code === '') {
        report.issues.push('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
      
    } else {
      report.tables.users = { status: '‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê' };
      report.issues.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è');
    }
  } catch (error) {
    report.tables.users = { status: '‚ùå –û–®–ò–ë–ö–ê', error: error.message };
  }

  // 2. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ TRANSACTIONS
  console.log('\nüí∞ –¢–ê–ë–õ–ò–¶–ê TRANSACTIONS');
  console.log('-'.repeat(40));
  
  try {
    const txHistory = await apiRequest('/wallet/history?limit=10');
    
    if (txHistory.status === 200 && txHistory.data.success) {
      const transactions = txHistory.data.data || [];
      
      report.tables.transactions = {
        status: '‚úÖ –ê–ö–¢–ò–í–ù–ê',
        recordsCount: transactions.length,
        types: {}
      };
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const txTypes = {};
      transactions.forEach(tx => {
        txTypes[tx.type] = (txTypes[tx.type] || 0) + 1;
      });
      
      report.tables.transactions.types = txTypes;
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
      console.log('–¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txTypes);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (transactions.length > 0) {
        const tx = transactions[0];
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          id: tx.id ? '‚úÖ' : '‚ùå',
          user_id: tx.user_id ? '‚úÖ' : '‚ùå',
          type: tx.type ? '‚úÖ' : '‚ùå',
          amount_uni: tx.amount_uni !== undefined ? '‚úÖ' : '‚ùå',
          amount_ton: tx.amount_ton !== undefined ? '‚úÖ' : '‚ùå',
          created_at: tx.created_at ? '‚úÖ' : '‚ùå'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const deposits = transactions.filter(tx => 
        tx.type === 'DEPOSIT' || 
        tx.type === 'TON_DEPOSIT' || 
        tx.type === 'UNI_DEPOSIT'
      );
      
      if (deposits.length === 0) {
        report.issues.push('‚ùì –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
      }
      
    } else {
      report.tables.transactions = { status: '‚ùì –ü–£–°–¢–ê–Ø –ò–õ–ò –ù–ï–î–û–°–¢–£–ü–ù–ê' };
    }
  } catch (error) {
    report.tables.transactions = { status: '‚ùå –û–®–ò–ë–ö–ê', error: error.message };
  }

  // 3. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ BOOST_PURCHASES
  console.log('\nüöÄ –¢–ê–ë–õ–ò–¶–ê BOOST_PURCHASES');
  console.log('-'.repeat(40));
  
  try {
    const activeBoosts = await apiRequest('/boost/active');
    
    if (activeBoosts.status === 200 && activeBoosts.data.success) {
      const boosts = activeBoosts.data.data || [];
      
      report.tables.boost_purchases = {
        status: boosts.length > 0 ? '‚úÖ –ê–ö–¢–ò–í–ù–ê' : '‚ùì –ü–£–°–¢–ê–Ø',
        recordsCount: boosts.length
      };
      
      console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö Boost –ø–∞–∫–µ—Ç–æ–≤: ${boosts.length}`);
      
      if (boosts.length > 0) {
        const boost = boosts[0];
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Boost –∑–∞–ø–∏—Å–∏:', {
          id: boost.id ? '‚úÖ' : '‚ùå',
          user_id: boost.user_id ? '‚úÖ' : '‚ùå',
          package_id: boost.package_id ? '‚úÖ' : '‚ùå',
          amount: boost.amount ? '‚úÖ' : '‚ùå',
          rate: boost.rate ? '‚úÖ' : '‚ùå',
          status: boost.status ? '‚úÖ' : '‚ùå',
          expires_at: boost.expires_at ? '‚úÖ' : '‚ùå'
        });
      } else {
        report.issues.push('‚ùì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∫—É–ø–∫–∏ –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è');
      }
      
    } else {
      report.tables.boost_purchases = { status: '‚ùì –ù–ï–î–û–°–¢–£–ü–ù–ê' };
    }
  } catch (error) {
    report.tables.boost_purchases = { status: '‚ùå –û–®–ò–ë–ö–ê', error: error.message };
  }

  // 4. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ REFERRALS
  console.log('\nüë• –¢–ê–ë–õ–ò–¶–ê REFERRALS / –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê');
  console.log('-'.repeat(40));
  
  try {
    const refInfo = await apiRequest('/referral/1');
    const refList = await apiRequest('/referral/1/list');
    
    if (refInfo.status === 200 && refInfo.data.success) {
      const refData = refInfo.data.data;
      const referrals = refList.data?.data || [];
      
      report.tables.referral_system = {
        status: '‚úÖ –†–ê–ë–û–¢–ê–ï–¢',
        ref_code_generation: refData.ref_code ? '‚úÖ –ö–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è' : '‚ùå –ö–æ–¥—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è',
        referrals_count: referrals.length,
        stats: refData.stats
      };
      
      console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:', {
        ref_code: refData.ref_code || '–ù–ï –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù',
        total_referrals: refData.stats?.totalReferrals || 0,
        total_earned_uni: refData.stats?.totalEarned?.UNI || '0',
        total_earned_ton: refData.stats?.totalEarned?.TON || '0'
      });
      
      if (referrals.length === 0) {
        report.issues.push('‚ùì –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—É—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–≤—è–∑–∏ –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ referred_by');
      }
      
    } else {
      report.tables.referral_system = { status: '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢' };
    }
  } catch (error) {
    report.tables.referral_system = { status: '‚ùå –û–®–ò–ë–ö–ê', error: error.message };
  }

  // 5. –ê–ù–ê–õ–ò–ó FARMING –î–ê–ù–ù–´–•
  console.log('\nüåæ FARMING –î–ê–ù–ù–´–ï');
  console.log('-'.repeat(40));
  
  try {
    const farmingStatus = await apiRequest('/farming/status');
    
    if (farmingStatus.status === 200 && farmingStatus.data.success) {
      const farming = farmingStatus.data.data;
      
      report.tables.farming_data = {
        status: '‚úÖ –ê–ö–¢–ò–í–ù–´',
        storage: '–í —Ç–∞–±–ª–∏—Ü–µ users',
        fields: {
          'uni_farming_start_timestamp': farming.uni_farming_start_timestamp !== null ? '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' : '‚ùì –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
          'uni_deposit_amount': farming.depositAmount ? '‚úÖ –•—Ä–∞–Ω–∏—Ç—Å—è' : '‚ùì –ü—É—Å—Ç–æ–π',
          'rate': farming.rate ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          'accumulated': farming.accumulated !== undefined ? '‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è' : '‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ'
        }
      };
      
      console.log('–°—Ç–∞—Ç—É—Å farming:', {
        isActive: farming.isActive,
        depositAmount: farming.depositAmount,
        rate: farming.rate,
        dailyIncomeUni: farming.dailyIncomeUni
      });
      
      if (!farming.isActive && farming.depositAmount === '0') {
        report.issues.push('‚ùì Farming –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –¥–µ–ø–æ–∑–∏—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è');
      }
      
    } else {
      report.tables.farming_data = { status: '‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´' };
    }
  } catch (error) {
    report.tables.farming_data = { status: '‚ùå –û–®–ò–ë–ö–ê', error: error.message };
  }

  // 6. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ MISSIONS
  console.log('\nüéØ –¢–ê–ë–õ–ò–¶–ê MISSIONS');
  console.log('-'.repeat(40));
  
  try {
    const missions = await apiRequest('/missions/list');
    const userMissions = await apiRequest('/missions/user/1');
    
    if (missions.status === 200 && missions.data.success) {
      const missionList = missions.data.data || [];
      const userProgress = userMissions.data?.data || [];
      
      report.tables.missions = {
        status: '‚úÖ –ê–ö–¢–ò–í–ù–ê',
        missionsCount: missionList.length,
        userProgressCount: userProgress.length
      };
      
      console.log(`–í—Å–µ–≥–æ –º–∏—Å—Å–∏–π: ${missionList.length}`);
      console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userProgress.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (userProgress.length === 0 && missionList.length > 0) {
        report.issues.push('‚ùì –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–π –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ mission_progress');
      }
      
    } else {
      report.tables.missions = { status: '‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê' };
    }
  } catch (error) {
    report.tables.missions = { status: '‚ùå –û–®–ò–ë–ö–ê', error: error.message };
  }

  // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ü–û –°–û–°–¢–û–Ø–ù–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('='.repeat(60) + '\n');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
  console.log('üìä –°–û–°–¢–û–Ø–ù–ò–ï –¢–ê–ë–õ–ò–¶:');
  for (const [table, info] of Object.entries(report.tables)) {
    console.log(`\n${table.toUpperCase()}:`);
    console.log(`  –°—Ç–∞—Ç—É—Å: ${info.status}`);
    if (info.recordsCount !== undefined) {
      console.log(`  –ó–∞–ø–∏—Å–µ–π: ${info.recordsCount}`);
    }
    if (info.fields) {
      console.log('  –ü–æ–ª—è:');
      for (const [field, status] of Object.entries(info.fields)) {
        console.log(`    - ${field}: ${status}`);
      }
    }
  }

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (report.issues.length > 0) {
    console.log('\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    report.issues.forEach(issue => console.log(`  ${issue}`));
  }

  // –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:');
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö:');
  console.log('  - users: –ø—Ä–æ—Ñ–∏–ª–∏, –±–∞–ª–∞–Ω—Å—ã, farming –¥–∞–Ω–Ω—ã–µ');
  console.log('  - transactions: –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
  console.log('  - boost_purchases: –ø–æ–∫—É–ø–∫–∏ TON Boost');
  console.log('  - missions/mission_progress: –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å');
  
  console.log('\n‚ùì –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('  - –ë–∞–ª–∞–Ω—Å—ã –≤ users vs –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ wallets');
  console.log('  - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ referred_by vs —Ç–∞–±–ª–∏—Ü–∞ referrals');
  console.log('  - Farming –¥–∞–Ω–Ω—ã–µ –≤ users vs —Ç–∞–±–ª–∏—Ü–∞ farming_sessions');
  
  console.log('\nüìå –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é ref_code –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('  2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–µ–ø–æ–∑–∏—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∑–∞–ø–∏—Å–∏ –≤ transactions');
  console.log('  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏—é –ø–æ–∫—É–ø–æ–∫ TON Boost –≤ boost_purchases');
  console.log('  4. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏—Å—Å–∏–π –≤ mission_progress');
  console.log('  5. –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
  
  console.log('\n' + '='.repeat(60));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeDatabaseTables().catch(console.error);