#!/usr/bin/env tsx

/**
 * üîç –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í USER 233
 * 
 * –¶–µ–ª—å: –≤—ã—è—Å–Ω–∏—Ç—å –æ—Ç–∫—É–¥–∞ User 233 –ø–æ–ª—É—á–∏–ª 731,347 UNI –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å
 * –†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function checkUser233DuplicateSource() {
  console.log('üîç –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í USER 233');
  console.log('=' .repeat(80));
  
  const report: string[] = [];
  report.push('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í USER 233');
  report.push('='.repeat(50));
  report.push('–†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï, –ù–ò–ö–ê–ö–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô');
  report.push('');
  
  try {
    // 1. –ê–ù–ê–õ–ò–ó USER 233 - –ö–¢–û –û–ù –ò –û–¢–ö–£–î–ê –î–ï–ù–¨–ì–ò
    console.log('1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ User 233...');
    
    const { data: user233, error: user233Error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 233)
      .single();

    if (user233Error) {
      report.push(`‚ùå USER 233 –ù–ï –ù–ê–ô–î–ï–ù: ${user233Error.message}`);
    } else {
      report.push('1Ô∏è‚É£ –î–ê–ù–ù–´–ï USER 233:');
      report.push(`   User ID: ${user233.id}`);
      report.push(`   Username: ${user233.username}`);
      report.push(`   First Name: ${user233.first_name}`);
      report.push(`   UNI Balance: ${user233.balance_uni} UNI`);
      report.push(`   TON Balance: ${user233.balance_ton} TON`);
      report.push(`   UNI Deposit: ${user233.uni_deposit_amount}`);
      report.push(`   Referred By: ${user233.referred_by}`);
      report.push(`   Ref Code: ${user233.ref_code}`);
      report.push(`   Created: ${user233.created_at}`);
      report.push(`   Is Admin: ${user233.is_admin}`);
      
      if (user233.balance_uni > 1000000) {
        report.push(`   üö® USER 233 –¢–û–ñ–ï –ò–ú–ï–ï–¢ –ê–ù–û–ú–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–°!`);
      }
      report.push('');
    }

    // 2. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 233 - –û–¢–ö–£–î–ê 731K UNI
    console.log('2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 233...');
    
    const { data: user233Tx, error: tx233Error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', '233')
      .gt('amount', 100000)
      .order('created_at', { ascending: false });

    if (tx233Error) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 233: ${tx233Error.message}`);
    } else {
      report.push('2Ô∏è‚É£ –ö–†–£–ü–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 233 (>100K):');
      if (user233Tx && user233Tx.length > 0) {
        user233Tx.forEach((tx: any, index: number) => {
          report.push(`   [${index + 1}] ${tx.created_at} | ${tx.type} | ${tx.amount} ${tx.currency}`);
          report.push(`       Description: ${tx.description}`);
          
          if (tx.amount == 731347.47) {
            report.push(`       üéØ –≠–¢–û –ò–°–¢–û–ß–ù–ò–ö –î–£–ë–õ–ò–ö–ê–¢–û–í! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ...`);
          }
        });
      } else {
        report.push('   ‚ùå –ö–†–£–ü–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´');
        report.push('   ‚ö†Ô∏è  USER 233 –ù–ï –ü–û–õ–£–ß–ê–õ –ö–†–£–ü–ù–´–ï –°–£–ú–ú–´ –ù–ê–ü–†–Ø–ú–£–Æ');
      }
      report.push('');
    }

    // 3. –ü–û–ò–°–ö –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –°–£–ú–ú–û–ô 731347.47
    console.log('3Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å—É–º–º–æ–π 731347.47...');
    
    const { data: duplicateTx, error: dupError } = await supabase
      .from('transactions')
      .select('*')
      .eq('amount', '731347.47')
      .order('created_at', { ascending: true });

    if (dupError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í: ${dupError.message}`);
    } else {
      report.push('3Ô∏è‚É£ –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –°–£–ú–ú–û–ô 731347.47 UNI:');
      if (duplicateTx && duplicateTx.length > 0) {
        report.push(`   üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: ${duplicateTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        report.push(`   üí∞ –û–ë–©–ê–Ø –°–£–ú–ú–ê: ${(duplicateTx.length * 731347.47).toLocaleString()} UNI`);
        report.push('');
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const userGroups: { [key: string]: any[] } = {};
        duplicateTx.forEach(tx => {
          if (!userGroups[tx.user_id]) userGroups[tx.user_id] = [];
          userGroups[tx.user_id].push(tx);
        });
        
        report.push('   –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú:');
        Object.entries(userGroups).forEach(([userId, txs]) => {
          report.push(`   User ${userId}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π = ${(txs.length * 731347.47).toLocaleString()} UNI`);
        });
        report.push('');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        report.push('   –•–†–û–ù–û–õ–û–ì–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í (–ø–µ—Ä–≤—ã–µ 10):');
        duplicateTx.slice(0, 10).forEach((tx: any, index: number) => {
          report.push(`   [${index + 1}] ${tx.created_at} | User ${tx.user_id} | ${tx.description.slice(0, 60)}...`);
        });
        
        // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if (duplicateTx.length > 1) {
          const firstTime = new Date(duplicateTx[0].created_at);
          const lastTime = new Date(duplicateTx[duplicateTx.length - 1].created_at);
          const duration = lastTime.getTime() - firstTime.getTime();
          const avgInterval = duration / (duplicateTx.length - 1);
          
          report.push('');
          report.push('   ‚è±Ô∏è  –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:');
          report.push(`   –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${firstTime.toISOString()}`);
          report.push(`   –ü–æ—Å–ª–µ–¥–Ω—è—è: ${lastTime.toISOString()}`);
          report.push(`   –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(duration / 1000 / 60)} –º–∏–Ω—É—Ç`);
          report.push(`   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(avgInterval / 1000)} —Å–µ–∫—É–Ω–¥`);
          
          if (avgInterval < 60000) { // –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
            report.push(`   üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ß–ê–°–¢–´–ï –î–£–ë–õ–ò–ö–ê–¢–´! –í–æ–∑–º–æ–∂–Ω–æ –±–∞–≥ –≤ –∫–æ–¥–µ`);
          }
        }
      } else {
        report.push('   ‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –¢–ê–ö–û–ô –°–£–ú–ú–û–ô –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      report.push('');
    }

    // 4. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –î–£–ë–õ–ò–ö–ê–¢–û–í –°–ï–ô–ß–ê–°
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    const { data: recentDuplicates, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('amount', '731347.47')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('created_at', { ascending: false });

    if (recentError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ï–î–ê–í–ù–ò–• –î–£–ë–õ–ò–ö–ê–¢–û–í: ${recentError.message}`);
    } else {
      report.push('4Ô∏è‚É£ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –î–£–ë–õ–ò–ö–ê–¢–û–í –í –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
      if (recentDuplicates && recentDuplicates.length > 0) {
        report.push(`   üö® –ù–ê–ô–î–ï–ù–û ${recentDuplicates.length} –ù–û–í–´–• –î–£–ë–õ–ò–ö–ê–¢–û–í!`);
        report.push(`   ‚ö†Ô∏è  –ò–°–¢–û–ß–ù–ò–ö –î–£–ë–õ–ò–ö–ê–¢–û–í –í–°–ï –ï–©–ï –ê–ö–¢–ò–í–ï–ù!`);
        recentDuplicates.forEach((tx: any, index: number) => {
          report.push(`   [${index + 1}] ${tx.created_at} | User ${tx.user_id}`);
        });
      } else {
        report.push('   ‚úÖ –ù–û–í–´–• –î–£–ë–õ–ò–ö–ê–¢–û–í –ù–ï –ù–ê–ô–î–ï–ù–û');
        report.push('   üí° –ò–°–¢–û–ß–ù–ò–ö –î–£–ë–õ–ò–ö–ê–¢–û–í –ù–ï–ê–ö–¢–ò–í–ï–ù –ò–õ–ò –ò–°–ü–†–ê–í–õ–ï–ù');
      }
      report.push('');
    }

    // 5. –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
    console.log('5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    const { data: referralAnalysis, error: refError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .gt('amount', 100000)
      .order('created_at', { ascending: false })
      .limit(50);

    if (refError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´: ${refError.message}`);
    } else {
      report.push('5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–†–£–ü–ù–´–• –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ì–†–ê–î:');
      if (referralAnalysis && referralAnalysis.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–∞–º
        const amountGroups: { [key: string]: number } = {};
        referralAnalysis.forEach(tx => {
          const amount = tx.amount.toString();
          amountGroups[amount] = (amountGroups[amount] || 0) + 1;
        });
        
        report.push('   –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–£–ú–ú–ê–ú:');
        Object.entries(amountGroups)
          .sort(([,a], [,b]) => b - a)
          .forEach(([amount, count]) => {
            report.push(`   ${amount} UNI: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
            if (count > 5) {
              report.push(`       üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ú–ù–û–ì–û –ü–û–í–¢–û–†–û–í!`);
            }
          });
      } else {
        report.push('   ‚ùå –ö–†–£–ü–ù–´–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´ –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      report.push('');
    }

    // –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    report.push('üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    report.push('=' .repeat(40));
    
    const hasRecentDuplicates = recentDuplicates && recentDuplicates.length > 0;
    const totalDuplicates = duplicateTx ? duplicateTx.length : 0;
    const totalImpact = totalDuplicates * 731347.47;
    
    // –°–æ–∑–¥–∞–µ–º userGroups –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
    let userGroups: { [key: string]: any[] } = {};
    if (duplicateTx && duplicateTx.length > 0) {
      duplicateTx.forEach(tx => {
        if (!userGroups[tx.user_id]) userGroups[tx.user_id] = [];
        userGroups[tx.user_id].push(tx);
      });
    }
    
    if (hasRecentDuplicates) {
      report.push('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –î–£–ë–õ–ò–ö–ê–¢–´ –í–°–ï –ï–©–ï –°–û–ó–î–ê–Æ–¢–°–Ø!');
      report.push('   –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
      report.push('   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É');
      report.push('   2. –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –∫–æ–¥–µ');
      report.push('   3. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else {
      report.push('‚úÖ –•–û–†–û–®–ê–Ø –ù–û–í–û–°–¢–¨: –ù–æ–≤—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è');
      report.push('   –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã');
    }
    
    report.push('');
    report.push('üìä –ú–ê–°–®–¢–ê–ë –ü–†–û–ë–õ–ï–ú–´:');
    report.push(`   –í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`);
    report.push(`   –û–±—â–∏–π —É—â–µ—Ä–±: ${totalImpact.toLocaleString()} UNI`);
    report.push(`   –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(userGroups).length}`);
    
    report.push('');
    report.push('üìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
    if (hasRecentDuplicates) {
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –±–∞–≥ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 3: –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã');
    } else {
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–æ–∑–¥–∞—Ç—å backup –¥–∞–Ω–Ω—ã—Ö');
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–º–µ—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      report.push('   –ü–†–ò–û–†–ò–¢–ï–¢ 4: –í–Ω–µ–¥—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportContent = report.join('\n');
    const filename = `USER233_DUPLICATE_SOURCE_ANALYSIS_${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.md`;
    
    fs.writeFileSync(filename, reportContent, 'utf8');
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
    
    console.log('\n' + reportContent);
    
    return {
      success: true,
      reportFile: filename,
      hasRecentDuplicates,
      totalDuplicates,
      totalImpact,
      affectedUsers: Object.keys(userGroups || {}).length
    };
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  try {
    const result = await checkUser233DuplicateSource();
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –ê–ù–ê–õ–ò–ó –ü–†–û–í–ê–õ–ï–ù:', error);
    process.exit(1);
  }
}

main();

export { checkUser233DuplicateSource };