#!/usr/bin/env tsx
/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó TON –ë–ê–õ–ê–ù–°–ê - –û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´
 * 27 –∏—é–ª—è 2025 - –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
 */

import { supabase } from './core/supabase';

async function criticalTonBalanceAnalysis() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó TON –ë–ê–õ–ê–ù–°–ê - –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ê–ù–û–ú–ê–õ–ò–ò');
  console.log('=' .repeat(80));

  try {
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏
    const problematicUsers = [185, 187, 188, 189, 190];
    
    for (const userId of problematicUsers) {
      console.log(`\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}:`);
      await analyzeProblematicUser(userId);
    }

    // –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüîÑ –ü–û–ò–°–ö –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    await findDuplicatePatterns();

    // –ê–Ω–∞–ª–∏–∑ TON Boost –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\nüì¶ –ê–ù–ê–õ–ò–ó TON BOOST –û–ü–ï–†–ê–¶–ò–ô:');
    await analyzeTonBoostOperations();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

async function analyzeProblematicUser(userId: number) {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single();

  console.log(`   üí∞ DB –±–∞–ª–∞–Ω—Å: ${user.balance_ton} TON`);
  console.log(`   üì¶ TON Boost: ${user.ton_boost_package || '–Ω–µ—Ç'}, —Å—Ç–∞–≤–∫–∞: ${user.ton_boost_rate || 0}`);

  // –í—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: transactions } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('currency', 'TON')
    .order('created_at', { ascending: true });

  console.log(`   üìä –í—Å–µ–≥–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);

  let calculatedBalance = 0;
  const operationsByType: { [key: string]: number } = {};

  transactions?.forEach((tx, index) => {
    const amount = parseFloat(tx.amount);
    operationsByType[tx.type] = (operationsByType[tx.type] || 0) + 1;

    if (['TON_DEPOSIT', 'FARMING_REWARD'].includes(tx.type)) {
      calculatedBalance += amount;
      console.log(`   ${index + 1}. ‚úÖ +${amount} TON (${tx.type}) - ${tx.description?.slice(0, 50) || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`);
    } else if (['BOOST_PURCHASE', 'WITHDRAWAL'].includes(tx.type)) {
      calculatedBalance -= amount;
      console.log(`   ${index + 1}. ‚ùå -${amount} TON (${tx.type}) - ${tx.description?.slice(0, 50) || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`);
    } else {
      console.log(`   ${index + 1}. ‚ùì ${amount} TON (${tx.type}) - –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (amount > 1) {
      console.log(`      ‚è∞ –í—Ä–µ–º—è: ${tx.created_at}`);
      if (tx.metadata) {
        try {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          console.log(`      üìù Metadata: ${JSON.stringify(metadata, null, 2).slice(0, 200)}`);
        } catch (e) {
          console.log(`      üìù Raw metadata: ${JSON.stringify(tx.metadata).slice(0, 100)}`);
        }
      }
    }
  });

  console.log(`   üìà –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º: ${JSON.stringify(operationsByType, null, 2)}`);
  console.log(`   üíé –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${calculatedBalance.toFixed(6)} TON`);
  console.log(`   ‚ö†Ô∏è  –†–∞–∑–Ω–∏—Ü–∞ —Å DB: ${Math.abs(user.balance_ton - calculatedBalance).toFixed(6)} TON`);

  if (Math.abs(user.balance_ton - calculatedBalance) > 0.01) {
    console.log(`   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ë–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Farming –¥–∞–Ω–Ω—ã–µ
    const { data: tonFarming } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId.toString());

    if (tonFarming?.length) {
      console.log(`   üå± TON Farming –±–∞–ª–∞–Ω—Å: ${tonFarming[0].farming_balance} TON`);
      console.log(`   üîÑ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ TON Farming —Å–∏—Å—Ç–µ–º—É`);
    }
  }
}

async function findDuplicatePatterns() {
  // –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏ –≤ –±–ª–∏–∑–∫–æ–µ –≤—Ä–µ–º—è
  const { data: recentTx } = await supabase
    .from('transactions')
    .select('*')
    .eq('currency', 'TON')
    .gte('created_at', new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString())
    .order('created_at', { ascending: false });

  const duplicateGroups = new Map();
  
  recentTx?.forEach(tx => {
    const key = `${tx.user_id}-${tx.amount}-${tx.type}`;
    if (!duplicateGroups.has(key)) {
      duplicateGroups.set(key, []);
    }
    duplicateGroups.get(key).push(tx);
  });

  duplicateGroups.forEach((txGroup, key) => {
    if (txGroup.length > 1) {
      console.log(`   üîÑ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏ –¥–ª—è ${key}:`);
      txGroup.forEach((tx: any) => {
        console.log(`      ${tx.id}: ${tx.created_at} - ${tx.description?.slice(0, 50) || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      for (let i = 0; i < txGroup.length - 1; i++) {
        const timeDiff = (new Date(txGroup[i + 1].created_at).getTime() - new Date(txGroup[i].created_at).getTime()) / 1000;
        if (timeDiff < 300) { // –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç
          console.log(`      ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${timeDiff.toFixed(1)} —Å–µ–∫ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏`);
        }
      }
    }
  });
}

async function analyzeTonBoostOperations() {
  // –ê–Ω–∞–ª–∏–∑ TON Boost –ø–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
  const { data: boostPurchases } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'BOOST_PURCHASE')
    .eq('currency', 'TON')
    .gte('created_at', new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString())
    .order('created_at', { ascending: false });

  console.log(`   üì¶ TON Boost –ø–æ–∫—É–ø–æ–∫ –∑–∞ 3 –¥–Ω—è: ${boostPurchases?.length || 0}`);

  const userPurchases = new Map();
  boostPurchases?.forEach(purchase => {
    if (!userPurchases.has(purchase.user_id)) {
      userPurchases.set(purchase.user_id, []);
    }
    userPurchases.get(purchase.user_id).push(purchase);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏
  userPurchases.forEach((purchases, userId) => {
    if (purchases.length > 1) {
      console.log(`   üë§ User ${userId}: ${purchases.length} TON Boost –ø–æ–∫—É–ø–æ–∫`);
      purchases.forEach((purchase: any, index: number) => {
        console.log(`      ${index + 1}. ${purchase.amount} TON - ${purchase.created_at}`);
        
        // –ò—â–µ–º –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∏–µ FARMING_REWARD
        setTimeout(async () => {
          const { data: rewards } = await supabase
            .from('transactions')
            .select('*')
            .eq('user_id', userId)
            .eq('type', 'FARMING_REWARD')
            .eq('currency', 'TON')
            .eq('amount', purchase.amount)
            .gte('created_at', purchase.created_at)
            .lte('created_at', new Date(new Date(purchase.created_at).getTime() + 30 * 60 * 1000).toISOString());

          if (rewards?.length) {
            console.log(`        üîÑ –ù–∞–π–¥–µ–Ω–æ ${rewards.length} FARMING_REWARD –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ–π –∂–µ —Å—É–º–º–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω`);
          }
        }, 100);
      });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
  await analyzeSpecificBoostIssues();
}

async function analyzeSpecificBoostIssues() {
  console.log(`\nüéØ –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–†–û–ë–õ–ï–ú TON BOOST:`);

  // –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –≥–¥–µ –ø–æ–∫—É–ø–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  const { data: suspiciousPatterns } = await supabase
    .from('transactions')
    .select('*')
    .eq('currency', 'TON')
    .in('type', ['BOOST_PURCHASE', 'FARMING_REWARD'])
    .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
    .order('user_id, created_at');

  const userTimeline = new Map();
  suspiciousPatterns?.forEach(tx => {
    if (!userTimeline.has(tx.user_id)) {
      userTimeline.set(tx.user_id, []);
    }
    userTimeline.get(tx.user_id).push(tx);
  });

  userTimeline.forEach((timeline, userId) => {
    for (let i = 0; i < timeline.length - 1; i++) {
      const current = timeline[i];
      const next = timeline[i + 1];
      
      if (current.type === 'BOOST_PURCHASE' && next.type === 'FARMING_REWARD' && 
          current.amount === next.amount) {
        const timeDiff = (new Date(next.created_at).getTime() - new Date(current.created_at).getTime()) / 1000;
        if (timeDiff < 60) { // –ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã
          console.log(`   üö® User ${userId}: BOOST_PURCHASE -${current.amount} TON —Å—Ä–∞–∑—É –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è FARMING_REWARD +${next.amount} TON —á–µ—Ä–µ–∑ ${timeDiff.toFixed(1)}—Å–µ–∫`);
          console.log(`      Purchase: ${current.created_at}`);
          console.log(`      Reward: ${next.created_at}`);
          console.log(`      Description: ${current.description || '–Ω–µ—Ç'} / ${next.description || '–Ω–µ—Ç'}`);
        }
      }
    }
  });
}

// –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
criticalTonBalanceAnalysis()
  .then(() => {
    console.log('\nüéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
    process.exit(1);
  });