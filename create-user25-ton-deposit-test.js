/**
 * –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û TON –î–ï–ü–û–ó–ò–¢–ê –î–õ–Ø USER #25
 * –ò–º–∏—Ç–∏—Ä—É–µ–º frontend –≤—ã–∑–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º
 */

import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function createUser25TonDepositTest() {
  console.log('üß™ –¢–ï–°–¢ TON –î–ï–ü–û–ó–ò–¢–ê –î–õ–Ø USER #25');
  console.log('==================================');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ User #25
    const { data: user25, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 25)
      .single();
    
    if (userError || !user25) {
      console.log('‚ùå User #25 –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return;
    }
    
    console.log('‚úÖ User #25 –Ω–∞–π–¥–µ–Ω:');
    console.log(`   - ID: ${user25.id}`);
    console.log(`   - Telegram ID: ${user25.telegram_id}`);
    console.log(`   - Username: ${user25.username}`);
    console.log(`   - Current TON Balance: ${user25.balance_ton}`);
    
    // 2. –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è User #25
    const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';
    
    const jwtPayload = {
      userId: user25.id,
      telegram_id: user25.telegram_id,
      username: user25.username,
      ref_code: user25.ref_code
    };
    
    const jwtToken = jwt.sign(jwtPayload, JWT_SECRET, { expiresIn: '7d' });
    console.log(`‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è User #25 (–¥–ª–∏–Ω–∞: ${jwtToken.length})`);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ TON deposit endpoint
    console.log('\nüöÄ –¢–ï–°–¢–û–í–´–ô –í–´–ó–û–í /api/v2/wallet/ton-deposit:');
    
    const testDepositData = {
      ton_tx_hash: 'test_hash_user25_' + Date.now(),
      amount: 0.1,
      wallet_address: 'EQTest_User25_Address_12345'
    };
    
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞:', testDepositData);
    
    try {
      const response = await fetch('http://localhost:3000/api/v2/wallet/ton-deposit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${jwtToken}`
        },
        body: JSON.stringify(testDepositData)
      });
      
      console.log(`üì° Response Status: ${response.status} ${response.statusText}`);
      
      const responseText = await response.text();
      console.log('üìÑ Response Body:');
      console.log(responseText);
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log('\nüíæ –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      
      const { data: newTxs, error: txError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', 25)
        .ilike('description', `%${testDepositData.ton_tx_hash}%`)
        .order('created_at', { ascending: false });
      
      if (txError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
      } else {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${newTxs?.length || 0}`);
        newTxs?.forEach(tx => {
          console.log(`   - ID: ${tx.id}, Amount: ${tx.amount} ${tx.currency}, Status: ${tx.status}`);
        });
      }
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      console.log('\nüí≥ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:');
      
      const { data: updatedUser, error: balanceError } = await supabase
        .from('users')
        .select('balance_ton')
        .eq('id', 25)
        .single();
      
      if (balanceError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError.message);
      } else {
        console.log(`   - TON –±–∞–ª–∞–Ω—Å –¥–æ: ${user25.balance_ton}`);
        console.log(`   - TON –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${updatedUser.balance_ton}`);
        console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +${updatedUser.balance_ton - user25.balance_ton} TON`);
      }
      
    } catch (fetchError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API:', fetchError.message);
    }
    
    // 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ê:');
    console.log('=========================');
    console.log('–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:');
    console.log('1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å User #25 –≤ –ë–î');  
    console.log('2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞');
    console.log('3. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ POST /api/v2/wallet/ton-deposit');
    console.log('4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î (–µ—Å–ª–∏ backend —Ä–∞–±–æ—Ç–∞–µ—Ç)');
    console.log('5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ service —Ä–∞–±–æ—Ç–∞–µ—Ç)');
    
    console.log('\n–ï—Å–ª–∏ —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 200 OK –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è - –ø—Ä–æ–±–ª–µ–º–∞ –≤ frontend integration');
    console.log('–ï—Å–ª–∏ —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É - –ø—Ä–æ–±–ª–µ–º–∞ –≤ backend logic');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
  }
}

createUser25TonDepositTest();