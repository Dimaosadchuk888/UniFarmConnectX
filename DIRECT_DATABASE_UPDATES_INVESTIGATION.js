#!/usr/bin/env node

/**
 * –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–Ø–ú–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–î - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê
 * –ò—â–µ—Ç –º–µ—Å—Ç–∞ –≥–¥–µ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function investigateDirectDatabaseUpdates() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–Ø–ú–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–î');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - –ø–æ–∏—Å–∫ –ø—Ä—è–º—ã—Ö UPDATE –∑–∞–ø—Ä–æ—Å–æ–≤');
  
  const currentUserId = 184;
  
  // 1. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
  console.log('\n1Ô∏è‚É£ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–Ø–ú–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê (20 —Å–µ–∫)');
  console.log('-'.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const { data: initialBalance } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', currentUserId)
    .single();
  
  console.log(`üìä –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:`);
  console.log(`   TON: ${initialBalance?.balance_ton || 0}`);
  console.log(`   UNI: ${initialBalance?.balance_uni || 0}`);
  
  let changeCount = 0;
  let previousBalance = { 
    ton: parseFloat(initialBalance?.balance_ton || '0'), 
    uni: parseFloat(initialBalance?.balance_uni || '0')
  };
  
  console.log('\n‚è±Ô∏è  –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ë–î...');
  
  const detectedChanges = [];
  
  const monitoringInterval = setInterval(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const { data: currentBalance } = await supabase
        .from('users')
        .select('balance_ton, balance_uni')
        .eq('id', currentUserId)
        .single();
      
      if (currentBalance) {
        const tonCurrent = parseFloat(currentBalance.balance_ton);
        const uniCurrent = parseFloat(currentBalance.balance_uni);
        
        const tonChanged = Math.abs(tonCurrent - previousBalance.ton) > 0.000001;
        const uniChanged = Math.abs(uniCurrent - previousBalance.uni) > 0.000001;
        
        if (tonChanged || uniChanged) {
          changeCount++;
          const now = new Date();
          const timestamp = now.toLocaleString('ru-RU');
          
          const tonDiff = tonCurrent - previousBalance.ton;
          const uniDiff = uniCurrent - previousBalance.uni;
          
          console.log(`\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–ï #${changeCount} - ${timestamp}`);
          console.log(`   TON: ${previousBalance.ton.toFixed(6)} ‚Üí ${tonCurrent.toFixed(6)} (${tonDiff > 0 ? '+' : ''}${tonDiff.toFixed(6)})`);
          console.log(`   UNI: ${previousBalance.uni.toFixed(6)} ‚Üí ${uniCurrent.toFixed(6)} (${uniDiff > 0 ? '+' : ''}${uniDiff.toFixed(6)})`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const oneMinuteAgo = new Date(now.getTime() - 60000).toISOString();
          
          const { data: recentTransactions } = await supabase
            .from('transactions')
            .select('id, type, amount_ton, amount_uni, description, created_at')
            .eq('user_id', currentUserId)
            .gte('created_at', oneMinuteAgo)
            .order('created_at', { ascending: false });
          
          let foundMatchingTransaction = false;
          
          if (recentTransactions && recentTransactions.length > 0) {
            console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –º–∏–Ω—É—Ç—É: ${recentTransactions.length}`);
            
            // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä—è—Å–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            for (const tx of recentTransactions) {
              const txTon = parseFloat(tx.amount_ton || '0');
              const txUni = parseFloat(tx.amount_uni || '0');
              
              const isTonMatch = Math.abs(txTon - Math.abs(tonDiff)) < 0.000001;
              const isUniMatch = Math.abs(txUni - Math.abs(uniDiff)) < 0.000001;
              
              if ((tonDiff !== 0 && isTonMatch) || (uniDiff !== 0 && isUniMatch)) {
                console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù–ê —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ID:${tx.id} | ${tx.type}`);
                console.log(`      TON:${tx.amount_ton} UNI:${tx.amount_uni} | ${(tx.description || '').substring(0, 40)}`);
                foundMatchingTransaction = true;
                break;
              }
            }
          }
          
          if (!foundMatchingTransaction) {
            console.log(`   üö® –ù–ï –ù–ê–ô–î–ï–ù–ê —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è!`);
            console.log(`   ‚ùó –≠—Ç–æ –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–î –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!`);
            
            detectedChanges.push({
              timestamp: now,
              tonChange: tonDiff,
              uniChange: uniDiff,
              hasTransaction: false
            });
          } else {
            detectedChanges.push({
              timestamp: now,
              tonChange: tonDiff,
              uniChange: uniDiff,
              hasTransaction: true
            });
          }
          
          previousBalance = { ton: tonCurrent, uni: uniCurrent };
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
  setTimeout(async () => {
    clearInterval(monitoringInterval);
    
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
    console.log('-'.repeat(60));
    console.log(`üìä –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞: ${changeCount}`);
    
    const directUpdates = detectedChanges.filter(c => !c.hasTransaction);
    const transactionUpdates = detectedChanges.filter(c => c.hasTransaction);
    
    console.log(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${transactionUpdates.length}`);
    console.log(`üö® –ü—Ä—è–º—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ë–î: ${directUpdates.length}`);
    
    if (directUpdates.length > 0) {
      console.log('\nüö® –î–ï–¢–ê–õ–ò –ü–†–Ø–ú–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–î (–ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô):');
      directUpdates.forEach((change, i) => {
        console.log(`${i + 1}. ${change.timestamp.toLocaleString('ru-RU')}`);
        console.log(`   TON: ${change.tonChange > 0 ? '+' : ''}${change.tonChange.toFixed(6)}`);
        console.log(`   UNI: ${change.uniChange > 0 ? '+' : ''}${change.uniChange.toFixed(6)}`);
      });
      
      console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –ü–†–Ø–ú–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô:');
      console.log('1. BalanceManager.updateUserBalance() - –ø—Ä—è–º—ã–µ UPDATE –∫ users');
      console.log('2. BatchBalanceProcessor.processBulkSubtract() - –º–∞—Å—Å–æ–≤—ã–µ UPDATE');
      console.log('3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤');
      console.log('4. WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      console.log('5. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ (schedulers) –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é');
    }
    
    if (changeCount === 0) {
      console.log('\nüìù –ó–∞ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // 3. –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó
    console.log('\n3Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´ –°–ü–ò–°–ê–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê');
    console.log('='.repeat(60));
    
    if (directUpdates.length > 0) {
      console.log('‚úÖ –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê:');
      console.log(`   ${directUpdates.length} –ø—Ä—è–º—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ë–î –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log('   –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –≤–µ–¥–µ—Ç—Å—è');
      console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞—Å—á–µ—Ç–Ω—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º');
    } else {
      console.log('‚ÑπÔ∏è  –ó–∞ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä—è–º—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      console.log('   –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    }
    
    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ù–∞–π—Ç–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –≤ –∫–æ–¥–µ —Å –ø—Ä—è–º—ã–º–∏ UPDATE users SET balance_*');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å BalanceManager –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    console.log('3. –ê—É–¥–∏—Ç BatchBalanceProcessor –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º');
    console.log('4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ farming –∏ boost —Å–∏—Å—Ç–µ–º');
    
    console.log('\n' + '='.repeat(80));
    console.log('üìã –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–Ø–ú–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–î –ó–ê–í–ï–†–®–ï–ù–û');
    console.log('='.repeat(80));
    
  }, 20000); // 20 —Å–µ–∫—É–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
}

investigateDirectDatabaseUpdates().catch(console.error);