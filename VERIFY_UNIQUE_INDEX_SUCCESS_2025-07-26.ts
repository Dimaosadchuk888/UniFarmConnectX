/**
 * ‚úÖ –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–ª—Å—è –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–µ–π
 */

import { supabase } from './core/supabase';

async function verifyUniqueIndexSuccess(): Promise<void> {
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê');
  console.log('=' .repeat(70));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('=' .repeat(70));

  try {
    // –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ï–ô
    console.log('\nüß™ –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ï–ô');
    console.log('-' .repeat(50));
    
    const testTxHash = 'test_index_verification_' + Date.now();
    console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π hash: ${testTxHash}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π user_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: testUser } = await supabase
      .from('users')
      .select('id')
      .limit(1)
      .single();
      
    if (!testUser) {
      console.log('   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º User ID: ${testUser.id}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('\n   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏...');
    const { error: firstError } = await supabase
      .from('transactions')
      .insert({
        user_id: testUser.id,
        type: 'FARMING_REWARD',
        amount: '0.001',
        amount_uni: '0',
        amount_ton: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'Index verification test 1',
        tx_hash_unique: testTxHash,
        metadata: { test: true, verification: true }
      });
      
    if (firstError) {
      console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å: ${firstError.message}`);
      return;
    }
    
    console.log('   ‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
    console.log('\n   üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏...');
    const { error: duplicateError } = await supabase
      .from('transactions')
      .insert({
        user_id: testUser.id,
        type: 'FARMING_REWARD',
        amount: '0.002',
        amount_uni: '0',
        amount_ton: '0.002',
        currency: 'TON',
        status: 'completed',
        description: 'Index verification test 2 (should fail)',
        tx_hash_unique: testTxHash,
        metadata: { test: true, verification: true, duplicate: true }
      });
      
    if (duplicateError) {
      if (duplicateError.message.includes('duplicate') || 
          duplicateError.message.includes('unique') ||
          duplicateError.message.includes('constraint') ||
          duplicateError.message.includes('already exists')) {
        console.log('   üéâ –û–¢–õ–ò–ß–ù–û! –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ò–ù–î–ï–ö–° –†–ê–ë–û–¢–ê–ï–¢!');
        console.log(`   üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${duplicateError.message}`);
        console.log('   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
      } else {
        console.log(`   ‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${duplicateError.message}`);
        console.log('   üí° –í–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–æ–º');
      }
    } else {
      console.log('   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –î—É–±–ª–∏–∫–∞—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω!');
      console.log('   üí° –ò–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    }
    
    // –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–£–ë–õ–ï–ô
    console.log('\nüìä –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–£–ë–õ–ï–ô');
    console.log('-' .repeat(50));
    
    // –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å tx_hash_unique
    const { data: allTxWithHash } = await supabase
      .from('transactions')
      .select('id, user_id, tx_hash_unique, amount_ton, created_at, description')
      .not('tx_hash_unique', 'is', null)
      .order('created_at', { ascending: false })
      .limit(50);
      
    console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å tx_hash_unique: ${allTxWithHash?.length || 0}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash_unique –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
    const hashGroups: Record<string, any[]> = {};
    allTxWithHash?.forEach(tx => {
      if (!hashGroups[tx.tx_hash_unique]) {
        hashGroups[tx.tx_hash_unique] = [];
      }
      hashGroups[tx.tx_hash_unique].push(tx);
    });
    
    const duplicateGroups = Object.entries(hashGroups).filter(([hash, txs]) => txs.length > 1);
    console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π: ${duplicateGroups.length}`);
    
    if (duplicateGroups.length > 0) {
      console.log('\n   üìã –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –î–£–ë–õ–ò (–¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏):');
      duplicateGroups.forEach(([hash, txs]) => {
        if (!hash.includes('test_')) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏
          console.log(`     Hash: ${hash.substring(0, 25)}... (${txs.length} –¥—É–±–ª–µ–π)`);
          console.log(`     –î–∞—Ç—ã: ${txs.map(tx => new Date(tx.created_at).toLocaleString()).join(', ')}`);
        }
      });
      
      console.log('\n   ‚úÖ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥—É–±–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è');
      console.log('   üí° –ò–Ω–¥–µ–∫—Å –∑–∞—â–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –ù–û–í–´–• –¥—É–±–ª–µ–π');
    }
    
    // –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô
    console.log('\nüîç –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ó–ê–©–ò–¢–´ –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô');
    console.log('-' .repeat(50));
    
    const indexTimestamp = '2025-07-26T12:57:00.311Z';
    const { data: newRecords } = await supabase
      .from('transactions')
      .select('id, tx_hash_unique, created_at')
      .not('tx_hash_unique', 'is', null)
      .gte('created_at', indexTimestamp);
      
    console.log(`   üìä –ó–∞–ø–∏—Å–µ–π —Å tx_hash –ø–æ—Å–ª–µ ${indexTimestamp}: ${newRecords?.length || 0}`);
    
    if (newRecords && newRecords.length > 1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
      const newHashGroups: Record<string, any[]> = {};
      newRecords.forEach(tx => {
        if (!newHashGroups[tx.tx_hash_unique]) {
          newHashGroups[tx.tx_hash_unique] = [];
        }
        newHashGroups[tx.tx_hash_unique].push(tx);
      });
      
      const newDuplicates = Object.entries(newHashGroups).filter(([hash, txs]) => txs.length > 1);
      
      if (newDuplicates.length === 0) {
        console.log('   ‚úÖ –°—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥—É–±–ª–µ–π –ù–ï–¢');
        console.log('   üéØ –ò–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ');
      } else {
        console.log(`   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${newDuplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
        console.log('   üí° –í–æ–∑–º–æ–∂–Ω–æ –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–µ –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º');
      }
    }
    
    // –≠–¢–ê–ü 4: –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
    console.log('\nüßπ –≠–¢–ê–ü 4: –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
    console.log('-' .repeat(50));
    
    const { error: cleanupError } = await supabase
      .from('transactions')
      .delete()
      .eq('tx_hash_unique', testTxHash);
      
    if (cleanupError) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${cleanupError.message}`);
    } else {
      console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    }
    
    // –≠–¢–ê–ü 5: –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\nüéØ –≠–¢–ê–ü 5: –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ó–ê–©–ò–¢–´');
    console.log('-' .repeat(50));
    
    if (duplicateError && (
      duplicateError.message.includes('duplicate') || 
      duplicateError.message.includes('unique') ||
      duplicateError.message.includes('constraint')
    )) {
      console.log('   üéâ –£–°–ü–ï–•! –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   ‚úÖ –ù–æ–≤—ã–µ –¥—É–±–ª–∏ –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      console.log('   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥—É–±–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏');
      console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ User 25 —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–µ—à–µ–Ω–∞');
      
      console.log('\n   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–©–ò–¢–´:');
      console.log('   - –ó–∞—â–∏—â–µ–Ω—ã: –í—Å–µ –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞');
      console.log('   - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥—É–±–ª–∏: –û—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å');
      console.log('   - –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã: Database-level (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)');
      console.log('   - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ');
      
    } else {
      console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω–¥–µ–∫—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è');
      console.log('   üîß –¢–†–ï–ë–£–ï–¢–°–Ø: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
      console.log('   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      console.log('     1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ Supabase Dashboard');
      console.log('     2. –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ');
      console.log('     3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤ Supabase');
    }
    
    console.log('\nüíæ –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–¥–µ–∫—Å–∞:', error);
    console.log('\nüõ°Ô∏è –≠–¢–û –ù–ï –ö–†–ò–¢–ò–ß–ù–û');
    console.log('   - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('   - –î–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    console.log('   - –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∂–µ');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
verifyUniqueIndexSuccess()
  .then(() => {
    console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    process.exit(1);
  });