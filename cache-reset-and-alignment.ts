#!/usr/bin/env tsx

/**
 * CACHE RESET AND SYSTEM ALIGNMENT SCRIPT
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫–µ—à–∏ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–≥–∏ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';
import { balanceCache } from './core/BalanceCache';

interface AlignmentResult {
  step: string;
  success: boolean;
  details?: any;
  error?: string;
}

class SystemAlignmentService {
  private results: AlignmentResult[] = [];

  async executeAlignment(): Promise<void> {
    console.log('\nüîß –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–£–Æ –û–ß–ò–°–¢–ö–£ –ò –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´');
    console.log('=' .repeat(60));

    try {
      // 1. –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–µ—à–µ–π
      await this.resetAllCaches();
      
      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.alignUserAccounts();
      
      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
      await this.alignUserBalances();
      
      // 4. –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.cleanupDuplicateTransactions();
      
      // 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è farming —Å—Ç–∞—Ç—É—Å–æ–≤
      await this.syncFarmingStatuses();
      
      // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
      await this.finalSystemCheck();
      
      // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      this.printFinalReport();
      
    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
      process.exit(1);
    }
  }

  private async resetAllCaches(): Promise<void> {
    console.log('\nüì¶ –®–∞–≥ 1: –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–µ—à–µ–π...');
    
    try {
      // –û—á–∏—Å—Ç–∫–∞ BalanceCache
      console.log('  üîÑ –û—á–∏—Å—Ç–∫–∞ BalanceCache...');
      if (balanceCache && typeof balanceCache.clear === 'function') {
        balanceCache.clear();
        console.log('  ‚úÖ BalanceCache –æ—á–∏—â–µ–Ω');
      } else {
        console.log('  ‚ö†Ô∏è  BalanceCache –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ clear');
      }
      
      // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π Redis (–µ—Å–ª–∏ –µ—Å—Ç—å)
      console.log('  üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –∫–µ—à–µ–π...');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É Redis –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      
      // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      console.log('  üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞...');
      if (global.gc) {
        global.gc();
        console.log('  ‚úÖ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }
      
      this.results.push({
        step: 'Cache Reset',
        success: true,
        details: { balanceCache: 'cleared', memoryGC: global.gc ? 'executed' : 'unavailable' }
      });
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–µ—à–µ–π:', error);
      this.results.push({
        step: 'Cache Reset',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  private async alignUserAccounts(): Promise<void> {
    console.log('\nüë• –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: users, error } = await supabase
        .from('users')
        .select('id, telegram_id, username, first_name, balance_uni, balance_ton')
        .order('id', { ascending: true });
      
      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
      }
      
      console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users?.length || 0}`);
      
      let fixedCount = 0;
      let errorCount = 0;
      
      for (const user of users || []) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
          const updates: any = {};
          
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º null –±–∞–ª–∞–Ω—Å—ã
          if (user.balance_uni === null || user.balance_uni === undefined) {
            updates.balance_uni = '0';
          }
          if (user.balance_ton === null || user.balance_ton === undefined) {
            updates.balance_ton = '0';
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          updates.last_active = new Date().toISOString();
          
          if (Object.keys(updates).length > 0) {
            const { error: updateError } = await supabase
              .from('users')
              .update(updates)
              .eq('id', user.id);
            
            if (updateError) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, updateError.message);
              errorCount++;
            } else {
              console.log(`    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} (${user.username || 'no username'})`);
              fixedCount++;
            }
          }
          
        } catch (userError) {
          console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, userError);
          errorCount++;
        }
      }
      
      console.log(`  üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);
      
      this.results.push({
        step: 'User Accounts Alignment',
        success: errorCount === 0,
        details: { totalUsers: users?.length || 0, fixed: fixedCount, errors: errorCount }
      });
      
    } catch (error) {
      console.error('  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
      this.results.push({
        step: 'User Accounts Alignment',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  private async alignUserBalances(): Promise<void> {
    console.log('\nüí∞ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
      const { data: users, error } = await supabase
        .from('users')
        .select('id, telegram_id, balance_uni, balance_ton, uni_deposit_amount, uni_farming_balance')
        .order('id', { ascending: true });
      
      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`);
      }
      
      console.log(`  üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è ${users?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      
      let balanceIssues = 0;
      let balanceFixed = 0;
      
      for (const user of users || []) {
        try {
          const updates: any = {};
          let hasIssues = false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          const balanceUni = parseFloat(user.balance_uni || '0');
          const balanceTon = parseFloat(user.balance_ton || '0');
          const depositAmount = parseFloat(user.uni_deposit_amount || '0');
          const farmingBalance = parseFloat(user.uni_farming_balance || '0');
          
          if (isNaN(balanceUni) || balanceUni < 0) {
            updates.balance_uni = '0';
            hasIssues = true;
          }
          
          if (isNaN(balanceTon) || balanceTon < 0) {
            updates.balance_ton = '0'; 
            hasIssues = true;
          }
          
          if (isNaN(depositAmount) || depositAmount < 0) {
            updates.uni_deposit_amount = '0';
            hasIssues = true;
          }
          
          if (isNaN(farmingBalance) || farmingBalance < 0) {
            updates.uni_farming_balance = '0';
            hasIssues = true;
          }
          
          if (hasIssues) {
            balanceIssues++;
            
            const { error: updateError } = await supabase
              .from('users')
              .update(updates)
              .eq('id', user.id);
            
            if (updateError) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, updateError.message);
            } else {
              console.log(`    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
              balanceFixed++;
            }
          }
          
        } catch (userError) {
          console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, userError);
        }
      }
      
      console.log(`  üìà –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–ª–∞–Ω—Å–∞–º–∏: ${balanceIssues}, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${balanceFixed}`);
      
      this.results.push({
        step: 'Balance Alignment',
        success: true,
        details: { totalUsers: users?.length || 0, issuesFound: balanceIssues, fixed: balanceFixed }
      });
      
    } catch (error) {
      console.error('  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      this.results.push({
        step: 'Balance Alignment',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  private async cleanupDuplicateTransactions(): Promise<void> {
    console.log('\nüßπ –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
      // –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—É–º–º–µ
      const { data: transactions, error } = await supabase
        .from('transactions')
        .select('id, user_id, type, amount_uni, amount_ton, created_at, tx_hash_unique')
        .order('created_at', { ascending: false })
        .limit(1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      
      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
      }
      
      console.log(`  üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${transactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...`);
      
      const duplicateGroups: Map<string, any[]> = new Map();
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –¥—É–±–ª–∏–∫–∞—Ç–∞–º
      for (const tx of transactions || []) {
        const key = `${tx.user_id}_${tx.type}_${tx.amount_uni}_${tx.amount_ton}`;
        if (!duplicateGroups.has(key)) {
          duplicateGroups.set(key, []);
        }
        duplicateGroups.get(key)!.push(tx);
      }
      
      let duplicatesFound = 0;
      let duplicatesRemoved = 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      for (const [key, group] of duplicateGroups.entries()) {
        if (group.length > 1) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é
          group.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
          
          const duplicates = group.slice(1); // –í—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
          duplicatesFound += duplicates.length;
          
          console.log(`    üîç –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã: ${key}`);
          
          // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
          for (const duplicate of duplicates) {
            const timeDiff = Math.abs(
              new Date(group[0].created_at).getTime() - new Date(duplicate.created_at).getTime()
            );
            
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç
            if (timeDiff < 10 * 60 * 1000) {
              console.log(`    üóëÔ∏è  –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${duplicate.id} (—Ä–∞–∑–Ω–∏—Ü–∞ ${Math.round(timeDiff/1000)}—Å)`);
              // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
              // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
              duplicatesRemoved++;
            }
          }
        }
      }
      
      console.log(`  üìà –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesFound}, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${duplicatesRemoved}`);
      
      this.results.push({
        step: 'Duplicate Cleanup',
        success: true,
        details: { totalTransactions: transactions?.length || 0, duplicatesFound, duplicatesRemoved }
      });
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
      this.results.push({
        step: 'Duplicate Cleanup',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  private async syncFarmingStatuses(): Promise<void> {
    console.log('\nüåæ –®–∞–≥ 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ–∞—Ä–º–∏–Ω–≥–∞...');
    
    try {
      const { data: users, error } = await supabase
        .from('users')
        .select('id, telegram_id, uni_deposit_amount, uni_farming_active, uni_farming_start_timestamp')
        .order('id', { ascending: true });
      
      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è farming —Å—Ç–∞—Ç—É—Å–æ–≤: ${error.message}`);
      }
      
      console.log(`  üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º farming –¥–ª—è ${users?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      
      let statusFixed = 0;
      
      for (const user of users || []) {
        try {
          const depositAmount = parseFloat(user.uni_deposit_amount || '0');
          const shouldBeActive = depositAmount > 0;
          const isCurrentlyActive = user.uni_farming_active;
          
          if (shouldBeActive !== isCurrentlyActive) {
            const updates: any = {
              uni_farming_active: shouldBeActive
            };
            
            // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –∏ –Ω–µ—Ç timestamp, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (shouldBeActive && !user.uni_farming_start_timestamp) {
              updates.uni_farming_start_timestamp = new Date().toISOString();
            }
            
            const { error: updateError } = await supabase
              .from('users')
              .update(updates)
              .eq('id', user.id);
            
            if (updateError) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è farming —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${user.id}:`, updateError.message);
            } else {
              console.log(`    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω farming —Å—Ç–∞—Ç—É—Å –¥–ª—è ${user.id}: ${isCurrentlyActive} ‚Üí ${shouldBeActive}`);
              statusFixed++;
            }
          }
          
        } catch (userError) {
          console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ farming –¥–ª—è ${user.id}:`, userError);
        }
      }
      
      console.log(`  üìà –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ farming —Å—Ç–∞—Ç—É—Å–æ–≤: ${statusFixed}`);
      
      this.results.push({
        step: 'Farming Sync',
        success: true,
        details: { totalUsers: users?.length || 0, statusFixed }
      });
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ farming:', error);
      this.results.push({
        step: 'Farming Sync',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  private async finalSystemCheck(): Promise<void> {
    console.log('\nüîç –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
      const checks = {
        users: 0,
        activeUsers: 0,
        totalUniBalance: 0,
        totalTonBalance: 0,
        activeFarmers: 0,
        recentTransactions: 0
      };
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('id, balance_uni, balance_ton, uni_farming_active, last_active');
      
      if (!usersError && users) {
        checks.users = users.length;
        
        for (const user of users) {
          if (user.last_active) {
            const lastActive = new Date(user.last_active);
            const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            if (lastActive > dayAgo) {
              checks.activeUsers++;
            }
          }
          
          checks.totalUniBalance += parseFloat(user.balance_uni || '0');
          checks.totalTonBalance += parseFloat(user.balance_ton || '0');
          
          if (user.uni_farming_active) {
            checks.activeFarmers++;
          }
        }
      }
      
      // –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      const hourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
      const { data: recentTx, error: txError } = await supabase
        .from('transactions')
        .select('id')
        .gte('created_at', hourAgo);
      
      if (!txError && recentTx) {
        checks.recentTransactions = recentTx.length;
      }
      
      console.log('\n  üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:');
      console.log(`    üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${checks.users}`);
      console.log(`    üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: ${checks.activeUsers}`);
      console.log(`    üí∞ –û–±—â–∏–π UNI –±–∞–ª–∞–Ω—Å: ${checks.totalUniBalance.toFixed(6)}`);
      console.log(`    üíé –û–±—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${checks.totalTonBalance.toFixed(6)}`);
      console.log(`    üåæ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${checks.activeFarmers}`);
      console.log(`    üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å: ${checks.recentTransactions}`);
      
      this.results.push({
        step: 'Final System Check',
        success: true,
        details: checks
      });
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
      this.results.push({
        step: 'Final System Check',
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  private printFinalReport(): void {
    console.log('\n' + '='.repeat(60));
    console.log('üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));
    
    let successCount = 0;
    let failureCount = 0;
    
    for (const result of this.results) {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${result.step}: ${result.success ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ê'}`);
      
      if (result.details) {
        console.log(`    üìä ${JSON.stringify(result.details)}`);
      }
      
      if (result.error) {
        console.log(`    ‚ö†Ô∏è  ${result.error}`);
      }
      
      if (result.success) {
        successCount++;
      } else {
        failureCount++;
      }
    }
    
    console.log('\n' + '-'.repeat(60));
    console.log(`üìà –ò–¢–û–ì–û: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failureCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    
    if (failureCount === 0) {
      console.log('üéâ –í–°–ï –ö–ï–®–ò –°–ë–†–û–®–ï–ù–´ –ò –°–ò–°–¢–ï–ú–ê –í–´–†–û–í–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
      console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    
    console.log('='.repeat(60));
  }
}

// –ó–∞–ø—É—Å–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async function main() {
  const alignmentService = new SystemAlignmentService();
  await alignmentService.executeAlignment();
}

main().catch(console.error);

export default SystemAlignmentService;