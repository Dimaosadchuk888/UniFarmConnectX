/**
 * –ö–†–ò–¢–ò–ß–ù–ò–ô –°–ö–†–ò–ü–¢ - –ü–†–ò–ú–£–°–û–í–ï –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø –ù–ê –ü–†–ê–í–ò–õ–¨–ù–£ –ë–î
 * 
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç —Ñ–æ—Ä—Å—É—î –í–°–Ü –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–≤–∫–ª—é—á–∞—é—á–∏ SQL —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç) 
 * –Ω–∞ –≤–∞—à—É –ø—Ä–∞–≤–∏–ª—å–Ω—É –±–∞–∑—É –∑ 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
 */

const { Pool } = require('pg');

// –í–ê–®–ê –ü–†–ê–í–ò–õ–¨–ù–ê –ë–ê–ó–ê (10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
const CORRECT_DB_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

// –°–¢–ê–†–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê –ë–ê–ó–ê (29 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤) - –ë–õ–û–ö–£–Ñ–ú–û
const WRONG_DB_HOST = 'ep-old-bonus-a67dnvju.us-west-2.aws.neon.tech';

async function forceCorrectDatabase() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ù–ï –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø: –§–æ—Ä—Å—É—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±–∞–∑–∏');
  
  // –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
  process.env.DATABASE_URL = CORRECT_DB_URL;
  process.env.PGHOST = 'ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech';
  process.env.PGUSER = 'neondb_owner';
  process.env.PGPASSWORD = 'npg_SpgdNBV70WKl';
  process.env.PGDATABASE = 'neondb';
  process.env.PGPORT = '5432';
  
  // –ë–ª–æ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ä–æ—ó –±–∞–∑–∏
  const originalConnect = Pool.prototype.connect;
  Pool.prototype.connect = function(...args) {
    if (this.options.host && this.options.host.includes(WRONG_DB_HOST)) {
      console.log('üö´ –ë–õ–û–ö–£–Æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±–∞–∑–∏:', this.options.host);
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –±–∞–∑—É
      this.options.connectionString = CORRECT_DB_URL;
      this.options.host = 'ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech';
    }
    return originalConnect.apply(this, args);
  };
  
  // –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±–∞–∑–∏
  const correctPool = new Pool({ connectionString: CORRECT_DB_URL });
  try {
    const result = await correctPool.query('SELECT COUNT(*) as count FROM users');
    const userCount = parseInt(result.rows[0].count);
    console.log(`‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê –ë–ê–ó–ê –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ê! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${userCount}`);
    
    if (userCount === 10) {
      console.log('üéØ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û: –¶–µ –≤–∞—à–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –±–∞–∑–∞!');
    } else {
      console.log(`‚ö†Ô∏è –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∑–Ω–∞–π–¥–µ–Ω–æ: ${userCount}`);
    }
    
    await correctPool.end();
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –±–∞–∑–∏:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä—Å—É–≤–∞–Ω–Ω—è
forceCorrectDatabase().then(success => {
  if (success) {
    console.log('‚úÖ –§–æ—Ä—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
  } else {
    console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä—Å—É–≤–∞–Ω–Ω—ñ');
  }
});

module.exports = { forceCorrectDatabase };