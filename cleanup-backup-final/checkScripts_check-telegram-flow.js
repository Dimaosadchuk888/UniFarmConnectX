/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Mini App
 * –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
 */

import { Pool } from 'pg';
import fs from 'fs';
import path from 'path';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
function findFiles(startPath, pattern) {
  let results = [];
  if (!fs.existsSync(startPath)) {
    return results;
  }

  const files = fs.readdirSync(startPath);
  for (let i = 0; i < files.length; i++) {
    const filename = path.join(startPath, files[i]);
    const stat = fs.lstatSync(filename);
    if (stat.isDirectory()) {
      results = results.concat(findFiles(filename, pattern));
    } else if (pattern.test(filename)) {
      results.push(filename);
    }
  }
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function readFileContent(filepath) {
  try {
    return fs.readFileSync(filepath, 'utf8');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filepath}:`, error.message);
    return '';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUserTable() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    const tableInfoResult = await pool.query(`
      SELECT column_name, data_type, character_maximum_length
      FROM information_schema.columns
      WHERE table_name = 'users'
      ORDER BY ordinal_position
    `);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tableInfoResult.rows.length} –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users:`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
    const requiredFields = ['id', 'username', 'telegram_id', 'ref_code', 'parent_ref_code'];
    const foundFields = tableInfoResult.rows.map(row => row.column_name);
    
    console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram:');
    let allFieldsFound = true;
    
    for (const field of requiredFields) {
      const found = foundFields.includes(field);
      console.log(`- ${field}: ${found ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      if (!found) allFieldsFound = false;
    }
    
    if (allFieldsFound) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram');
    } else {
      console.log('‚ùå –í —Ç–∞–±–ª–∏—Ü–µ users –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
function analyzeTelegramAuthFlow() {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram...');
  
  try {
    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Telegram
    console.log('–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Telegram:');
    
    const authFiles = findFiles('./client/src', /auth|login|telegram|tg/i);
    const telegramFiles = findFiles('./client/src', /telegram|ton/i);
    
    const allRelevantFiles = [...new Set([...authFiles, ...telegramFiles])];
    
    if (allRelevantFiles.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Telegram');
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${allRelevantFiles.length} —Ñ–∞–π–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Telegram –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π`);
    allRelevantFiles.forEach(file => console.log(`- ${file}`));
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram:');
    
    const patterns = [
      { name: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp', pattern: /telegram\.WebApp|window\.Telegram\.WebApp/ },
      { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram', pattern: /initData|initDataUnsafe|WebApp\.initData/ },
      { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', pattern: /validate|verify|checkTelegramAuth/ },
      { name: '–°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID', pattern: /createUser|getUserByTelegramId|findUserByTelegramId/ },
      { name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', pattern: /generateRefCode|createRefCode/ }
    ];
    
    let foundPatterns = {};
    let missingPatterns = [];
    
    for (const file of allRelevantFiles) {
      const content = readFileContent(file);
      
      for (const { name, pattern } of patterns) {
        if (pattern.test(content) && !foundPatterns[name]) {
          foundPatterns[name] = file;
        }
      }
    }
    
    for (const { name } of patterns) {
      if (foundPatterns[name]) {
        console.log(`- ${name}: ‚úÖ –Ω–∞–π–¥–µ–Ω–æ –≤ ${foundPatterns[name]}`);
      } else {
        console.log(`- ${name}: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        missingPatterns.push(name);
      }
    }
    
    if (missingPatterns.length === 0) {
      console.log('‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log('‚ùå –ù–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–æ–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function checkApiEndpoints() {
  console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
  
  try {
    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å API —Ä–æ—É—Ç–∞–º–∏
    console.log('–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å API —Ä–æ—É—Ç–∞–º–∏:');
    
    const routesFiles = findFiles('./server', /routes|api|controllers/i);
    
    if (routesFiles.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å API —Ä–æ—É—Ç–∞–º–∏');
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${routesFiles.length} —Ñ–∞–π–ª–æ–≤ —Å API —Ä–æ—É—Ç–∞–º–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    const requiredEndpoints = [
      { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', pattern: /\/auth\/telegram|\/api\/auth\/telegram|\/api\/telegram\/auth/ },
      { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', pattern: /\/users\/create|\/api\/users|\/api\/register/ },
      { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', pattern: /\/users\/profile|\/api\/profile|\/api\/me/ },
      { name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', pattern: /\/referral\/generate|\/api\/referral|\/ref-code/ }
    ];
    
    let foundEndpoints = {};
    let missingEndpoints = [];
    
    for (const file of routesFiles) {
      const content = readFileContent(file);
      
      for (const { name, pattern } of requiredEndpoints) {
        if (pattern.test(content) && !foundEndpoints[name]) {
          foundEndpoints[name] = file;
        }
      }
    }
    
    for (const { name } of requiredEndpoints) {
      if (foundEndpoints[name]) {
        console.log(`- ${name}: ‚úÖ –Ω–∞–π–¥–µ–Ω–æ –≤ ${foundEndpoints[name]}`);
      } else {
        console.log(`- ${name}: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        missingEndpoints.push(name);
      }
    }
    
    if (missingEndpoints.length === 0) {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log('‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
async function checkReferralSystem() {
  console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã referrals
    const tableExistsResult = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'referrals'
      ) as exists
    `);
    
    if (!tableExistsResult.rows[0].exists) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ referrals –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ referrals —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã referrals
    const tableInfoResult = await pool.query(`
      SELECT column_name, data_type
      FROM information_schema.columns
      WHERE table_name = 'referrals'
      ORDER BY ordinal_position
    `);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tableInfoResult.rows.length} –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals:`);
    tableInfoResult.rows.forEach(row => {
      console.log(`- ${row.column_name} (${row.data_type})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const countResult = await pool.query('SELECT COUNT(*) FROM referrals');
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals: ${countResult.rows[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
    const refCodesResult = await pool.query(`
      SELECT ref_code, COUNT(*) 
      FROM users 
      WHERE ref_code IS NOT NULL 
      GROUP BY ref_code 
      HAVING COUNT(*) > 1
    `);
    
    if (refCodesResult.rows.length > 0) {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã:');
      refCodesResult.rows.forEach(row => {
        console.log(`- ${row.ref_code}: ${row.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function checkTelegramIntegration() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Mini App');
  console.log('================================================');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await checkUserTable();
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
    analyzeTelegramAuthFlow();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    await checkApiEndpoints();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    await checkReferralSystem();
    
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('================================================');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è');
    console.log('‚úÖ –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log('\nüîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤ Telegram Mini App');
    
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkTelegramIntegration().catch(console.error);