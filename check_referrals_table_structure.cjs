// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã referrals
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function checkReferralsTableStructure() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ REFERRALS ===');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ referrals
    const { data: referrals, error } = await supabase
      .from('referrals')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return;
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${referrals.length}`);
    
    if (referrals.length > 0) {
      console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏:');
      console.log(JSON.stringify(referrals[0], null, 2));
      
      console.log('\nüîç –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ:');
      Object.keys(referrals[0]).forEach(key => {
        const value = referrals[0][key];
        console.log(`  ${key}: ${typeof value} = ${value}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    const requiredFields = ['user_id', 'referred_user_id', 'inviter_id', 'level', 'reward_uni', 'reward_ton', 'ref_path'];
    
    if (referrals.length > 0) {
      const existingFields = Object.keys(referrals[0]);
      const missingFields = requiredFields.filter(field => !existingFields.includes(field));
      
      if (missingFields.length > 0) {
        console.log('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:');
        missingFields.forEach(field => console.log(`  - ${field}`));
      } else {
        console.log('\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    if (referrals.length > 0) {
      console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:');
      
      const userIds = referrals.map(r => r.user_id).filter(id => id !== null);
      const uniqueUserIds = [...new Set(userIds)];
      
      console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id: ${uniqueUserIds.length}`);
      console.log(`  –ü–µ—Ä–≤—ã–µ 5: ${uniqueUserIds.slice(0, 5).join(', ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (uniqueUserIds.length > 0) {
        const { data: users } = await supabase
          .from('users')
          .select('id, telegram_id, username, referred_by')
          .in('id', uniqueUserIds.slice(0, 5));
          
        console.log(`  –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users ? users.length : 0}`);
        
        if (users && users.length > 0) {
          console.log('\nüë• –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
          users.forEach(user => {
            console.log(`    ID ${user.id}: telegram_id=${user.telegram_id}, referred_by=${user.referred_by}`);
          });
        }
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkReferralsTableStructure().catch(console.error);