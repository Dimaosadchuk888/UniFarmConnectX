/**
 * –ì–õ–£–ë–û–ö–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–†–û–¶–ï–°–°–ê TON –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
 * –ü–æ—à–∞–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
 */

import { supabase } from './core/supabaseClient';

async function debugTonDepositFlow() {
  console.log('üîß –ì–õ–£–ë–û–ö–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–†–û–¶–ï–°–°–ê TON –ü–û–ü–û–õ–ù–ï–ù–ò–Ø');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 1910979');
  console.log('='.repeat(80));

  try {
    // 1. –ü–û–õ–£–ß–ê–ï–ú –î–ï–¢–ê–õ–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò 1910979:');
    
    const { data: tx, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('id', 1910979)
      .single();

    if (txError || !tx) {
      console.error('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', txError);
      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    console.log(`   ID: ${tx.id}`);
    console.log(`   User ID: ${tx.user_id}`);
    console.log(`   Type: ${tx.type}`);
    console.log(`   Amount TON: ${tx.amount_ton}`);
    console.log(`   Amount UNI: ${tx.amount_uni}`);
    console.log(`   Currency: ${tx.currency}`);
    console.log(`   Status: ${tx.status}`);
    console.log(`   Created: ${tx.created_at}`);
    console.log(`   Updated: ${tx.updated_at}`);

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –õ–û–ì–ò–ö–£ shouldUpdateBalance
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê shouldUpdateBalance():');
    
    const incomeTypes = [
      'FARMING_REWARD',
      'REFERRAL_REWARD', 
      'MISSION_REWARD',
      'DAILY_BONUS',
      'TON_BOOST_INCOME',
      'UNI_DEPOSIT',
      'TON_DEPOSIT',
      'AIRDROP_REWARD',
      'DEPOSIT'
    ];
    
    const shouldUpdate = incomeTypes.includes(tx.type);
    console.log(`   Type "${tx.type}" –≤ —Å–ø–∏—Å–∫–µ incomeTypes: ${shouldUpdate}`);
    
    if (!shouldUpdate) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å!');
      console.log('   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –≤ incomeTypes –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥');
      return;
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    console.log('\n3Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni')
      .eq('id', tx.user_id)
      .single();

    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return;
    }

    console.log(`   –¢–µ–∫—É—â–∏–π balance_ton: ${user.balance_ton}`);
    console.log(`   –¢–µ–∫—É—â–∏–π balance_uni: ${user.balance_uni}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π balance_ton: ${user.balance_ton + tx.amount_ton}`);

    // 4. –°–ò–ú–£–õ–ò–†–£–ï–ú BalanceManager.addBalance()
    console.log('\n4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø BalanceManager.addBalance():');
    
    console.log(`   –í—ã–∑–æ–≤: addBalance(${tx.user_id}, 0, ${tx.amount_ton})`);
    console.log(`   –û–ø–µ—Ä–∞—Ü–∏—è: ${user.balance_ton} + ${tx.amount_ton} = ${user.balance_ton + tx.amount_ton}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Supabase update —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('\n5Ô∏è‚É£ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó SUPABASE:');
    
    const testBalance = user.balance_ton + 0.000001; // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç–µ—Å—Ç–∞
    
    console.log(`   –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.balance_ton} ‚Üí ${testBalance}`);
    
    const { data: updateResult, error: updateError } = await supabase
      .from('users')
      .update({ balance_ton: testBalance })
      .eq('id', tx.user_id)
      .select('balance_ton')
      .single();

    if (updateError) {
      console.error('‚ùå –ü–†–û–ë–õ–ï–ú–ê –° SUPABASE UPDATE:', updateError);
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö balance_ton');
      console.log('   - RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î');
    } else {
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: ${updateResult.balance_ton}`);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      const { error: rollbackError } = await supabase
        .from('users')
        .update({ balance_ton: user.balance_ton })
        .eq('id', tx.user_id);

      if (rollbackError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:', rollbackError);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—á–µ–Ω–æ');
      }
    }

    // 6. –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê –ö –¢–ê–ë–õ–ò–¶–ï
    console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê:');
    
    const { data: tableAccess, error: accessError } = await supabase
      .from('users')
      .select('id, balance_ton')
      .eq('id', tx.user_id)
      .single();

    if (accessError) {
      console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users:', accessError);
    } else {
      console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // 7. –ê–ù–ê–õ–ò–ó METADATA –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    console.log('\n7Ô∏è‚É£ –ê–ù–ê–õ–ò–ó METADATA:');
    
    if (tx.metadata) {
      console.log('‚úÖ Metadata –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:');
      console.log(JSON.stringify(tx.metadata, null, 2));
      
      if (tx.metadata.tx_hash) {
        console.log(`‚úÖ tx_hash: ${tx.metadata.tx_hash}`);
      }
      
      if (tx.metadata.hash_extracted) {
        console.log(`‚úÖ hash_extracted: ${tx.metadata.hash_extracted}`);
      }
    } else {
      console.log('‚ùå Metadata –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    // 8. –ü–û–ò–°–ö –î–†–£–ì–ò–• –£–°–ü–ï–®–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø
    console.log('\n8Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò TON –î–ï–ü–û–ó–ò–¢–ê–ú–ò:');
    
    const { data: otherDeposits, error: otherError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'completed')
      .eq('amount_ton', 1)
      .neq('id', 1910979)
      .limit(3)
      .order('created_at', { ascending: false });

    if (otherError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', otherError);
    } else if (otherDeposits && otherDeposits.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${otherDeposits.length} –ø–æ—Ö–æ–∂–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:`);
      
      for (const deposit of otherDeposits) {
        console.log(`\n--- –î–µ–ø–æ–∑–∏—Ç ID ${deposit.id} ---`);
        console.log(`   User ID: ${deposit.user_id}`);
        console.log(`   Amount: ${deposit.amount_ton} TON`);
        console.log(`   Created: ${deposit.created_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: otherUser, error: otherUserError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', deposit.user_id)
          .single();

        if (!otherUserError && otherUser) {
          console.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${otherUser.balance_ton} TON`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ –≤—Å–µ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
          const { data: userDeposits, error: userDepositError } = await supabase
            .from('transactions')
            .select('amount_ton')
            .eq('user_id', deposit.user_id)
            .eq('type', 'TON_DEPOSIT')
            .eq('status', 'completed');

          if (!userDepositError && userDeposits) {
            const totalDeposits = userDeposits.reduce((sum, d) => sum + d.amount_ton, 0);
            console.log(`   –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits} TON`);
            console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${otherUser.balance_ton - totalDeposits} TON`);
            
            if (Math.abs(otherUser.balance_ton - totalDeposits) < 0.1) {
              console.log('‚úÖ –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞–º');
            } else {
              console.log('‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∂–µ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è!');
            }
          }
        }
      }
    }

    // 9. –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\n' + '='.repeat(80));
    console.log('9Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
    
    console.log('\n‚úÖ –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢:');
    console.log('   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ë–î');
    console.log('   - Type TON_DEPOSIT –≤—Ö–æ–¥–∏—Ç –≤ incomeTypes');
    console.log('   - shouldUpdateBalance() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true');
    console.log('   - Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    console.log('\n‚ùì –ß–¢–û –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨:');
    console.log('   1. –ü—Ä–∞–≤–∞ RLS –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users');
    console.log('   2. –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ BalanceManager.addBalance() –≤ runtime');
    console.log('   3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∏ –≤ updateUserBalance()');
    console.log('   4. –ï—Å—Ç—å –ª–∏ race conditions –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
    
    console.log('\nüîß –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   1. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ BalanceManager');
    console.log('   2. –°–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∞—Ç–æ–º–∞—Ä–Ω–æ–π (–æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞)');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏');
    console.log('   4. –î–æ–±–∞–≤–∏—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugTonDepositFlow().then(() => {
  console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});