#!/usr/bin/env node

/**
 * üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ USER #25
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –ø–æ—á–µ–º—É TON Boost –ø–∞–∫–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
 * 
 * –ó–∞–¥–∞—á–∏:
 * 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
 * 2. –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
 * 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 * 4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è frontend
 * 5. –ù–∞–π—Ç–∏ —Ç–æ—á–∫–∏ –æ—Ç–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

const USER_ID = 25; // User #25 –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω

async function investigateUser25BoostIssue() {
  console.log('üîç –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ USER #25 TON BOOST –ü–ê–ö–ï–¢–ê');
  console.log('=' * 70);
  console.log('');

  try {
    // 1. –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
    console.log('1Ô∏è‚É£ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø #25:');
    console.log('-'.repeat(50));
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', USER_ID)
      .single();

    if (userError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError.message}`);
      return;
    }

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #25 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    console.log(`- ID: ${user.id}`);
    console.log(`- Telegram ID: ${user.telegram_id}`);
    console.log(`- Username: ${user.username || 'N/A'}`);
    console.log(`- –ë–∞–ª–∞–Ω—Å UNI: ${user.balance_uni} UNI`);
    console.log(`- –ë–∞–ª–∞–Ω—Å TON: ${user.balance_ton} TON`);
    console.log(`- TON Boost Package: ${user.ton_boost_package || '–ù–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù'}`);
    console.log(`- TON Boost Rate: ${user.ton_boost_rate || 'N/A'}`);
    console.log(`- –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString()}`);
    
    // 2. –ü–†–û–í–ï–†–ö–ê TON FARMING DATA
    console.log('\\n2Ô∏è‚É£ TON FARMING DATA:');
    console.log('-'.repeat(50));
    
    const { data: tonFarmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', USER_ID);

    if (farmingError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data: ${farmingError.message}`);
    } else if (!tonFarmingData || tonFarmingData.length === 0) {
      console.log('‚ùå –ó–∞–ø–∏—Å–∏ –≤ ton_farming_data –ù–ï –ù–ê–ô–î–ï–ù–´');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å, –ø–æ—á–µ–º—É –ø–∞–∫–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è!');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${tonFarmingData.length}`);
      
      tonFarmingData.forEach((farming, index) => {
        console.log(`\\n  –ó–∞–ø–∏—Å—å ${index + 1}:`);
        console.log(`  - Boost –∞–∫—Ç–∏–≤–µ–Ω: ${farming.boost_active}`);
        console.log(`  - Boost Package ID: ${farming.boost_package_id}`);
        console.log(`  - Farming Balance: ${farming.farming_balance} TON`);
        console.log(`  - Farming Rate: ${farming.farming_rate}% –≤ –¥–µ–Ω—å`);
        console.log(`  - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(farming.farming_last_update).toLocaleString()}`);
        console.log(`  - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${new Date(farming.farming_start_timestamp).toLocaleString()}`);
      });
    }

    // 3. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–ö–£–ü–ö–ò BOOST
    console.log('\\n3Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–ö–£–ü–ö–ò TON BOOST:');
    console.log('-'.repeat(50));
    
    const { data: boostTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', USER_ID)
      .or('type.eq.BOOST_PURCHASE,description.ilike.%boost%,description.ilike.%TON Boost%')
      .order('created_at', { ascending: false })
      .limit(10);

    if (txError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txError.message}`);
    } else if (!boostTransactions || boostTransactions.length === 0) {
      console.log('‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–ö–£–ü–ö–ò BOOST –ù–ï –ù–ê–ô–î–ï–ù–´');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–∞–∑—É!');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${boostTransactions.length}`);
      
      boostTransactions.forEach((tx, index) => {
        console.log(`\\n  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
        console.log(`  - ID: ${tx.id}`);
        console.log(`  - –¢–∏–ø: ${tx.type}`);
        console.log(`  - –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`  - –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`  - –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`  - –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString()}`);
        
        if (tx.metadata) {
          console.log(`  - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(tx.metadata, null, 4));
        }
      });
    }

    // 4. –ü–†–û–í–ï–†–ö–ê BOOST_PURCHASES –¢–ê–ë–õ–ò–¶–´
    console.log('\\n4Ô∏è‚É£ BOOST_PURCHASES –ó–ê–ü–ò–°–ò:');
    console.log('-'.repeat(50));
    
    const { data: boostPurchases, error: purchaseError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('user_id', USER_ID)
      .order('created_at', { ascending: false });

    if (purchaseError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost_purchases: ${purchaseError.message}`);
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ boost_purchases –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    } else if (!boostPurchases || boostPurchases.length === 0) {
      console.log('‚ùå –ó–ê–ü–ò–°–ò –í BOOST_PURCHASES –ù–ï –ù–ê–ô–î–ï–ù–´');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${boostPurchases.length}`);
      
      boostPurchases.forEach((purchase, index) => {
        console.log(`\\n  –ü–æ–∫—É–ø–∫–∞ ${index + 1}:`);
        console.log(`  - ID: ${purchase.id}`);
        console.log(`  - Boost ID: ${purchase.boost_id}`);
        console.log(`  - –ò—Å—Ç–æ—á–Ω–∏–∫: ${purchase.source}`);
        console.log(`  - –°—Ç–∞—Ç—É—Å: ${purchase.status}`);
        console.log(`  - TX Hash: ${purchase.tx_hash || 'N/A'}`);
        console.log(`  - –î–∞—Ç–∞: ${new Date(purchase.created_at).toLocaleString()}`);
      });
    }

    // 5. –ê–ù–ê–õ–ò–ó UNI –ë–û–ù–£–°–û–í
    console.log('\\n5Ô∏è‚É£ UNI –ë–û–ù–£–°–´ –ó–ê BOOST:');
    console.log('-'.repeat(50));
    
    const { data: uniBonus, error: bonusError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', USER_ID)
      .or('type.eq.DAILY_BONUS,description.ilike.%UNI –±–æ–Ω—É—Å%,description.ilike.%boost%')
      .eq('currency', 'UNI')
      .order('created_at', { ascending: false })
      .limit(5);

    if (!bonusError && uniBonus && uniBonus.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ UNI –±–æ–Ω—É—Å–æ–≤: ${uniBonus.length}`);
      
      uniBonus.forEach((bonus, index) => {
        console.log(`\\n  –ë–æ–Ω—É—Å ${index + 1}:`);
        console.log(`  - –°—É–º–º–∞: ${bonus.amount} UNI`);
        console.log(`  - –û–ø–∏—Å–∞–Ω–∏–µ: ${bonus.description}`);
        console.log(`  - –î–∞—Ç–∞: ${new Date(bonus.created_at).toLocaleString()}`);
      });
    } else {
      console.log('‚ùå UNI –ë–û–ù–£–°–´ –ù–ï –ù–ê–ô–î–ï–ù–´');
      console.log('   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
    }

    // 6. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú
    console.log('\\n6Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:');
    console.log('-'.repeat(50));
    
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ –≤ users
    if (!user.ton_boost_package) {
      issues.push({
        severity: '–ö–†–ò–¢–ò–ß–ù–û',
        issue: 'users.ton_boost_package –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        impact: 'Frontend –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç',
        solution: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É BoostService.createBoostPurchase()'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ton_farming_data
    if (!tonFarmingData || tonFarmingData.length === 0) {
      issues.push({
        severity: '–ö–†–ò–¢–ò–ß–ù–û',
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data',
        impact: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ—Ö–æ–¥',
        solution: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É TonFarmingRepository.activateBoost()'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (!boostTransactions || boostTransactions.length === 0) {
      issues.push({
        severity: '–°–†–ï–î–ù–ï',
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏',
        impact: '–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏',
        solution: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ BoostService'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ UNI –±–æ–Ω—É—Å–∞
    if (!uniBonus || uniBonus.length === 0) {
      issues.push({
        severity: '–°–†–ï–î–ù–ï',
        issue: 'UNI –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω',
        impact: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª –æ–±–µ—â–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å',
        solution: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É BoostService.awardUniBonus()'
      });
    }

    if (issues.length === 0) {
      console.log('‚úÖ –°–ï–†–¨–ï–ó–ù–´–• –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û');
      console.log('   –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
    } else {
      console.log(`‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–û–ë–õ–ï–ú: ${issues.length}`);
      
      issues.forEach((issue, index) => {
        console.log(`\\n  –ü—Ä–æ–±–ª–µ–º–∞ ${index + 1} [${issue.severity}]:`);
        console.log(`  üî∏ ${issue.issue}`);
        console.log(`  üìä –í–ª–∏—è–Ω–∏–µ: ${issue.impact}`);
        console.log(`  üîß –†–µ—à–µ–Ω–∏–µ: ${issue.solution}`);
      });
    }

    // 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\\n7Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
    console.log('-'.repeat(50));
    
    console.log('1. –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    if (!user.ton_boost_package) {
      console.log('   - –í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ton_boost_package –≤ —Ç–∞–±–ª–∏—Ü–µ users');
    }
    if (!tonFarmingData || tonFarmingData.length === 0) {
      console.log('   - –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ ton_farming_data –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    }
    
    console.log('\\n2. –î–û–õ–ì–û–°–†–û–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ BoostService.purchaseWithInternalWallet()');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å rollback –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –Ω–µ—É–¥–∞—á–∞—Ö');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ò:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
investigateUser25BoostIssue()
  .then(() => {
    console.log('\\n‚úÖ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–†–ò–ü–¢–ê:', error);
    process.exit(1);
  });