#!/usr/bin/env node

/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –ò–°–ß–ï–ó–ê–Æ–©–ò–• –î–ï–ü–û–ó–ò–¢–û–í User #25
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤: –ë–î ‚Üí API ‚Üí Frontend
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;

console.log('SUPABASE URL variants:');
console.log('- VITE_SUPABASE_URL:', process.env.VITE_SUPABASE_URL ? '‚úÖ' : '‚ùå');
console.log('- SUPABASE_URL:', process.env.SUPABASE_URL ? '‚úÖ' : '‚ùå');
console.log('SUPABASE KEY variants:');
console.log('- VITE_SUPABASE_ANON_KEY:', process.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå');
console.log('- SUPABASE_ANON_KEY:', process.env.SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå');
console.log('- SUPABASE_KEY:', process.env.SUPABASE_KEY ? '‚úÖ' : '‚ùå');

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase. –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ core/supabaseClient');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ core/supabaseClient —Ñ–∞–π–ª–∞
  try {
    const { readFileSync } = await import('fs');
    const supabaseClientCode = readFileSync('./core/supabaseClient.ts', 'utf8');
    console.log('üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ core/supabaseClient.ts (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(supabaseClientCode.substring(0, 500));
    process.exit(1);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è core/supabaseClient.ts:', error.message);
    process.exit(1);
  }
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticUser25DepositFlow() {
  console.log('='.repeat(80));
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: User #25 TON –¥–µ–ø–æ–∑–∏—Ç—ã');
  console.log('='.repeat(80));

  // 1. –ü–†–û–í–ï–†–Ø–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –ë–î
  console.log('\n1Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò User #25 –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
  console.log('-'.repeat(50));
  
  const { data: dbTransactions, error: dbError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 25)
    .order('created_at', { ascending: false })
    .limit(10);

  if (dbError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ë–î:', dbError.message);
    return;
  }

  console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25: ${dbTransactions.length}`);
  
  if (dbTransactions.length > 0) {
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    dbTransactions.forEach((tx, index) => {
      console.log(`${index + 1}. ID: ${tx.id}`);
      console.log(`   Type: ${tx.type}`);
      console.log(`   Currency: ${tx.currency}`);
      console.log(`   Amount: ${tx.amount_uni ? tx.amount_uni + ' UNI' : tx.amount_ton + ' TON'}`);
      console.log(`   Status: ${tx.status}`);
      console.log(`   Created: ${tx.created_at}`);
      console.log(`   Source: ${tx.source || 'N/A'}`);
      console.log(`   Description: ${tx.description || 'N/A'}`);
      console.log('   ---');
    });
  }

  // 2. –§–ò–õ–¨–¢–†–£–ï–ú TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–∫–∞–∫ –≤ fetchTonTransactions)
  console.log('\n2Ô∏è‚É£ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (FRONTEND LOGIC):');
  console.log('-'.repeat(50));
  
  const tonTransactions = dbTransactions.filter(tx => {
    const currency = (tx.currency || '').toUpperCase();
    const type = (tx.type || '').toLowerCase();
    const source = (tx.source || '').toLowerCase();
    
    const isTonTransaction = currency === 'TON' || 
                            type.includes('ton') ||
                            source.includes('ton') ||
                            type === 'boost_purchase' ||
                            type === 'ton_farming_reward';
    
    if (isTonTransaction) {
      console.log(`‚úÖ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ID ${tx.id}, type: ${tx.type}, currency: ${tx.currency}`);
    }
    
    return isTonTransaction;
  });

  console.log(`üéØ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${tonTransactions.length}`);

  // 3. –ü–†–û–í–ï–†–Ø–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ FARMING_REWARD —Å currency TON
  console.log('\n3Ô∏è‚É£ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê FARMING_REWARD:');
  console.log('-'.repeat(50));
  
  const farmingRewards = dbTransactions.filter(tx => 
    tx.type === 'FARMING_REWARD' && tx.currency === 'TON'
  );
  
  if (farmingRewards.length > 0) {
    console.log(`üåü –ù–∞–π–¥–µ–Ω–æ FARMING_REWARD —Å currency TON: ${farmingRewards.length}`);
    farmingRewards.forEach(tx => {
      console.log(`   - ID: ${tx.id}, Amount: ${tx.amount_ton} TON, Created: ${tx.created_at}`);
    });
  } else {
    console.log('‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ FARMING_REWARD —Å currency TON');
  }

  // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –ª–∏ TON –¥–µ–ø–æ–∑–∏—Ç—ã –≤–æ–æ–±—â–µ
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –í–û–ó–ú–û–ñ–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í:');
  console.log('-'.repeat(50));
  
  const possibleTonDeposits = dbTransactions.filter(tx => {
    return (tx.amount_ton && parseFloat(tx.amount_ton) > 0) ||
           (tx.currency === 'TON') ||
           (tx.type && tx.type.toLowerCase().includes('deposit')) ||
           (tx.source && tx.source.toLowerCase().includes('deposit'));
  });
  
  console.log(`üí∞ –í–æ–∑–º–æ–∂–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${possibleTonDeposits.length}`);
  possibleTonDeposits.forEach(tx => {
    console.log(`   - ID: ${tx.id}, Type: ${tx.type}, Currency: ${tx.currency}, Amount: ${tx.amount_ton || 'N/A'} TON`);
  });

  // 5. –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–õ–ê–ù–° User #25
  console.log('\n5Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° User #25:');
  console.log('-'.repeat(50));
  
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('id, username, balance_uni, balance_ton')
    .eq('id', 25)
    .single();

  if (userError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
  } else {
    console.log(`üë§ User #25 (@${user.username || 'N/A'})`);
    console.log(`üí∞ UNI Balance: ${user.balance_uni || 0}`);
    console.log(`ü™ô TON Balance: ${user.balance_ton || 0}`);
  }

  // 6. –ü–†–û–í–ï–†–Ø–ï–ú API –û–¢–í–ï–¢ (—Å–∏–º—É–ª—è—Ü–∏—è backend API)
  console.log('\n6Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø API –û–¢–í–ï–¢–ê /api/v2/transactions?currency=TON:');
  console.log('-'.repeat(50));
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–∫ UnifiedTransactionService.getUserTransactions()
  const apiFilteredTransactions = dbTransactions.filter(tx => {
    // –õ–æ–≥–∏–∫–∞ –∏–∑ UnifiedTransactionService - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ currency
    return tx.currency === 'TON';
  });
  
  console.log(`üì° API –≤–µ—Ä–Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å currency=TON: ${apiFilteredTransactions.length}`);
  apiFilteredTransactions.forEach(tx => {
    console.log(`   - ID: ${tx.id}, Type: ${tx.type}, Amount: ${tx.amount_ton} TON`);
  });

  // 7. –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó
  console.log('\nüèÅ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:');
  console.log('='.repeat(50));
  
  const hasTonTransactions = tonTransactions.length > 0;
  const hasFarmingRewardTon = farmingRewards.length > 0;
  const hasApiTonTransactions = apiFilteredTransactions.length > 0;
  
  if (hasTonTransactions && hasApiTonTransactions) {
    console.log('‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í –§–ò–õ–¨–¢–†–ê–¶–ò–ò - TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å—Ç—å –∏ –≤ –ë–î –∏ –≤ API');
  } else if (hasTonTransactions && !hasApiTonTransactions) {
    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –í API –§–ò–õ–¨–¢–†–ê–¶–ò–ò - Frontend –≤–∏–¥–∏—Ç TON, API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç');
  } else if (!hasTonTransactions && hasFarmingRewardTon) {
    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –í FRONTEND –§–ò–õ–¨–¢–†–ê–¶–ò–ò - FARMING_REWARD –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ TON');
  } else {
    console.log('‚ùì –ù–ï–Ø–°–ù–ê –ü–†–ò–ß–ò–ù–ê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
  }
  
  console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (!hasTonTransactions && hasFarmingRewardTon) {
    console.log('1. –î–æ–±–∞–≤–∏—Ç—å –≤ fetchTonTransactions() –ø—Ä–æ–≤–µ—Ä–∫—É: type === "farming_reward" && currency === "TON"');
  }
  if (hasTonTransactions && !hasApiTonTransactions) {
    console.log('2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ UnifiedTransactionService');
  }
  
  console.log('\n' + '='.repeat(80));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnosticUser25DepositFlow().catch(console.error);