#!/usr/bin/env npx tsx

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONSTRAINT VIOLATIONS 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è idx_tx_hash_unique_safe –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è 
 * –ø–æ—á–µ–º—É TON –¥–µ–ø–æ–∑–∏—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseConstraintViolations() {
  console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONSTRAINT VIOLATIONS');
  console.log('='.repeat(60));
  console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  console.log('üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –∏—Å—á–µ–∑–∞—é—â–∏—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User #25\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º constraint –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò CONSTRAINT idx_tx_hash_unique_safe:');
    
    const { data: constraints, error: constraintError } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT 
            conname as constraint_name,
            contype as constraint_type,
            pg_get_constraintdef(oid) as definition
          FROM pg_constraint 
          WHERE conname LIKE '%tx_hash%';
        `
      });

    if (!constraintError && constraints) {
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ TX_HASH constraints:');
      constraints.forEach((c: any) => {
        console.log(`   ${c.constraint_name}: ${c.definition}`);
      });
    } else {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ constraints');
    }

    // 2. –ò—â–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è tx_hash –≤ metadata
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø TX_HASH –í METADATA:');
    
    const { data: duplicates, error: duplicateError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, metadata, created_at')
      .not('metadata', 'is', null)
      .order('created_at', { ascending: false })
      .limit(100);

    if (!duplicateError && duplicates) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash –∏–∑ metadata
      const txHashGroups: { [key: string]: any[] } = {};
      
      duplicates.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' 
          ? JSON.parse(tx.metadata) 
          : tx.metadata;
        
        if (metadata?.tx_hash) {
          const txHash = metadata.tx_hash;
          if (!txHashGroups[txHash]) {
            txHashGroups[txHash] = [];
          }
          txHashGroups[txHash].push(tx);
        }
      });

      // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const duplicateHashes = Object.entries(txHashGroups)
        .filter(([_, txs]) => txs.length > 1);

      if (duplicateHashes.length > 0) {
        console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${duplicateHashes.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è tx_hash:`);
        
        duplicateHashes.forEach(([txHash, transactions]) => {
          console.log(`\nüìÑ TX_HASH: ${txHash.substring(0, 20)}...`);
          transactions.forEach(tx => {
            console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Type: ${tx.type}, Amount: ${tx.amount_ton}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
          });
        });
      } else {
        console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è tx_hash –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
      }
    }

    // 3. –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User #25
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER #25 –° TX_HASH:');
    
    const { data: user25Txs, error: user25Error } = await supabase
      .from('transactions')
      .select('id, type, amount_ton, metadata, created_at, status')
      .eq('user_id', 25)
      .not('metadata', 'is', null)
      .order('created_at', { ascending: false })
      .limit(20);

    if (!user25Error && user25Txs && user25Txs.length > 0) {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${user25Txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25 —Å metadata:`);
      
      user25Txs.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' 
          ? JSON.parse(tx.metadata) 
          : tx.metadata;
        
        const txHash = metadata?.tx_hash || '–ù–ï–¢';
        console.log(`   ID: ${tx.id}, Type: ${tx.type}, Amount: ${tx.amount_ton}, TX_HASH: ${txHash.substring(0, 30)}..., Status: ${tx.status}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User #25 —Å metadata –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ï–î–ê–í–ù–ò–• TON_DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: tonDeposits, error: tonDepositError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, metadata, created_at, status')
      .in('type', ['TON_DEPOSIT', 'FARMING_REWARD'])
      .gt('amount_ton', 0)
      .gt('created_at', new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤
      .order('created_at', { ascending: false });

    if (!tonDepositError && tonDeposits) {
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${tonDeposits.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤:`);
      
      tonDeposits.slice(0, 10).forEach(tx => {
        const metadata = typeof tx.metadata === 'string' 
          ? JSON.parse(tx.metadata) 
          : tx.metadata;
          
        const txHash = metadata?.tx_hash || '–ù–ï–¢';
        const source = metadata?.source || '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
        console.log(`   User ${tx.user_id}: ${tx.amount_ton} TON, Source: ${source}, TX_HASH: ${txHash.substring(0, 20)}..., Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
      });
    }

    console.log('\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã constraint violations –∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

diagnoseConstraintViolations();