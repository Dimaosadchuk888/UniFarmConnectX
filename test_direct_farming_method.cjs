#!/usr/bin/env node
/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ depositUniForFarming
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// –≠–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ FarmingService
async function testDirectDeposit() {
  console.log('üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô...\n');

  try {
    const userId = 184;
    const depositAmount = 250; // –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç

    console.log('üìä BEFORE - –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ BEFORE
    const { data: beforeTransactions, error: beforeTxError } = await supabase
      .from('transactions')
      .select('id')
      .eq('user_id', userId)
      .eq('type', 'FARMING_DEPOSIT');

    if (beforeTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BEFORE:', beforeTxError);
      return;
    }

    console.log(`   –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${beforeTransactions.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount')
      .eq('id', userId)
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }

    console.log(`   Balance UNI: ${user.balance_uni}`);
    console.log(`   Deposit Amount: ${user.uni_deposit_amount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    if (user.balance_uni < depositAmount) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞');
      return;
    }

    console.log('\nüîß –ü–†–Ø–ú–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò...');

    // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ FarmingService
    const transactionPayload = {
      user_id: userId,
      type: 'FARMING_DEPOSIT',
      amount: depositAmount.toString(),
      amount_uni: depositAmount.toString(),
      amount_ton: '0',
      currency: 'UNI',
      status: 'completed',
      description: `UNI farming deposit: ${depositAmount}`
    };

    console.log('üìù Payload —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionPayload);

    const { data: transactionData, error: transactionError } = await supabase
      .from('transactions')
      .insert([transactionPayload])
      .select()
      .single();

    if (transactionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
      return;
    }

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    console.log(`   Transaction ID: ${transactionData.id}`);
    console.log(`   Type: ${transactionData.type}`);
    console.log(`   Amount: ${transactionData.amount}`);

    // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø...');

    const newBalanceUni = user.balance_uni - depositAmount;
    const newDepositAmount = user.uni_deposit_amount + depositAmount;

    const { data: updatedUser, error: updateError } = await supabase
      .from('users')
      .update({
        balance_uni: newBalanceUni,
        uni_deposit_amount: newDepositAmount,
        uni_farming_active: true,
        uni_farming_start_timestamp: new Date().toISOString()
      })
      .eq('id', userId)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await supabase
        .from('transactions')
        .delete()
        .eq('id', transactionData.id);
      
      console.log('üóëÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω!');
    console.log(`   New Balance UNI: ${updatedUser.balance_uni}`);
    console.log(`   New Deposit Amount: ${updatedUser.uni_deposit_amount}`);
    console.log(`   Farming Active: ${updatedUser.uni_farming_active}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AFTER
    console.log('\nüìä AFTER - –ü—Ä–æ–≤–µ—Ä—è—é –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    
    const { data: afterTransactions, error: afterTxError } = await supabase
      .from('transactions')
      .select('id, amount, description, created_at')
      .eq('user_id', userId)
      .eq('type', 'FARMING_DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(3);

    if (afterTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π AFTER:', afterTxError);
      return;
    }

    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${afterTransactions.length}`);
    console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    
    afterTransactions.forEach((tx, i) => {
      const created = new Date(tx.created_at);
      const now = new Date();
      const diffMinutes = (now - created) / (1000 * 60);
      
      console.log(`   ${i + 1}. ID: ${tx.id}, Amount: ${tx.amount}, Created: ${diffMinutes.toFixed(1)} min ago`);
    });

    console.log('\n‚úÖ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!');
    console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ ‚úì');
    console.log('   –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úì');
    console.log('   –î–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω ‚úì');

  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–µ:', error);
  }
}

testDirectDeposit();