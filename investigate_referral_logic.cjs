// –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
const http = require('http');
const jwt = require('jsonwebtoken');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
const token = jwt.sign(
  { userId: 184, telegram_id: 184, username: 'test' },
  process.env.JWT_SECRET || 'fallback_secret',
  { expiresIn: '1h' }
);

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function investigateReferralLogic() {
  console.log('üîç –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ì–†–ê–î');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ REFERRAL_REWARD
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó REFERRAL_REWARD –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(50));
    
    const transactions = await makeRequest('/api/v2/transactions?limit=50');
    if (transactions.data.success) {
      const referralTxs = transactions.data.data.transactions
        .filter(t => t.type === 'REFERRAL_REWARD')
        .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${referralTxs.length} REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      const sourceMap = {};
      referralTxs.forEach(tx => {
        const match = tx.description.match(/from User (\d+):/);
        if (match) {
          const sourceUser = match[1];
          if (!sourceMap[sourceUser]) sourceMap[sourceUser] = [];
          sourceMap[sourceUser].push(tx);
        }
      });
      
      console.log('\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
      Object.entries(sourceMap).forEach(([userId, txs]) => {
        console.log(`  User ${userId}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        console.log(`    –ü–æ—Å–ª–µ–¥–Ω—è—è: ${txs[0].created_at}`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô TON BOOST:');
    console.log('-'.repeat(50));
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ endpoint –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const tonBoostStatus = await makeRequest('/api/v2/boost/ton-farming/status');
    console.log('TON Boost —Å—Ç–∞—Ç—É—Å:', JSON.stringify(tonBoostStatus.data, null, 2));
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò:');
    console.log('-'.repeat(50));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (transactions.data.success) {
      const referralTxs = transactions.data.data.transactions
        .filter(t => t.type === 'REFERRAL_REWARD');
      
      console.log('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      referralTxs.slice(0, 5).forEach((tx, i) => {
        console.log(`  ${i+1}. ${tx.description}`);
        console.log(`     –í—Ä–µ–º—è: ${tx.created_at}`);
        console.log(`     –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log('');
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º timestamp —Å–≤—è–∑—å —Å TON Boost
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –°–í–Ø–ó–ï–ô:');
    console.log('-'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
    const tonTransactions = await makeRequest('/api/v2/transactions?currency=TON&limit=20');
    if (tonTransactions.data.success) {
      const tonTxs = tonTransactions.data.data.transactions
        .filter(t => t.type !== 'REFERRAL_REWARD')
        .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
      
      console.log('TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ):');
      tonTxs.slice(0, 5).forEach((tx, i) => {
        console.log(`  ${i+1}. ${tx.type}: ${tx.amount} TON (${tx.created_at})`);
      });
    }
    
    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('=' .repeat(60));
    console.log('1. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('2. –û–ø–∏—Å–∞–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ User 186-190, –Ω–æ API –∏—Ö –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç');
    console.log('3. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î, –Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API');
    console.log('4. –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º');
    console.log('5. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

investigateReferralLogic();