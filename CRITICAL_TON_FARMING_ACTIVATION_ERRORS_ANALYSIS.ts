/**
 * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö –ê–ö–¢–ò–í–ê–¶–ò–ò ton_farming_data
 * 
 * –†–ï–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—á–µ–º—É activateBoost() –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { supabase } from './core/supabase';

async function analyzeTonFarmingActivationErrors() {
  console.log('\nüö® === –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö –ê–ö–¢–ò–í–ê–¶–ò–ò ton_farming_data ===\n');
  
  try {
    // 1. –¢–ï–°–¢: –ü–æ–ø—Ä–æ–±—É–µ–º –í–†–£–ß–ù–£–Æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∫–∞–∫ TonFarmingRepository
    console.log('1Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ò –í–†–£–ß–ù–£–Æ:');
    console.log('===============================');
    
    const testUserId = 290;
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è User ${testUserId}...`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ activateBoost()
    const testData = {
      user_id: testUserId,  // INTEGER –∫–∞–∫ –≤ –∫–æ–¥–µ
      boost_active: true,
      boost_package_id: 1,
      farming_rate: '0.01',
      farming_balance: '1',  // 1 TON
      boost_expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      farming_start_timestamp: new Date().toISOString(),
      farming_last_update: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      created_at: new Date().toISOString(),
      total_earned: 0
    };
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:');
    Object.entries(testData).forEach(([key, value]) => {
      console.log(`   ${key}: ${value} (${typeof value})`);
    });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
    console.log('\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º INSERT...');
    const { data: insertResult, error: insertError } = await supabase
      .from('ton_farming_data')
      .insert(testData)
      .select();
    
    if (insertError) {
      console.log('‚ùå –û–®–ò–ë–ö–ê INSERT:');
      console.log(`   –ö–æ–¥: ${insertError.code}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${insertError.message}`);
      console.log(`   –î–µ—Ç–∞–ª–∏: ${insertError.details}`);
      console.log(`   –ü–æ–¥—Å–∫–∞–∑–∫–∞: ${insertError.hint}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å —á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–ª—è–º–∏
      if (insertError.message.includes('duplicate') || insertError.code === '23505') {
        console.log('   üîç –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏–∫–∞—Ç –∫–ª—é—á–∞ - –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else if (insertError.message.includes('null') || insertError.code === '23502') {
        console.log('   üîç –ü–†–û–ë–õ–ï–ú–ê: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ');
      } else if (insertError.message.includes('type') || insertError.code === '22P02') {
        console.log('   üîç –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö');
      } else if (insertError.code === '42P01') {
        console.log('   üîç –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    } else {
      console.log('‚úÖ INSERT –£–°–ü–ï–®–ï–ù!');
      console.log(`   –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: ${JSON.stringify(insertResult)}`);
      
      // –°—Ä–∞–∑—É —É–¥–∞–ª–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('ton_farming_data')
        .delete()
        .eq('user_id', testUserId);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }
    
    // 2. –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –¢–ê–ë–õ–ò–¶–´
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –¢–ê–ë–õ–ò–¶–´:');
    console.log('========================');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É ton_farming_data...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—É—Å—Ç–æ–π SELECT —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
    const { data: schemaTest, error: schemaError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .limit(1);
    
    if (schemaError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ö–µ–º–µ: ${schemaError.message}`);
      if (schemaError.code === '42P01') {
        console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!');
        console.log('   TonFarmingRepository –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É');
        return;
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      if (schemaTest && schemaTest.length > 0) {
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:');
        Object.keys(schemaTest[0]).forEach(field => {
          console.log(`   - ${field}`);
        });
      }
    }
    
    // 3. –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö –í –ö–û–î–ï TonFarmingRepository
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –í –ö–û–î–ï:');
    console.log('=========================');
    
    console.log('üîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –í TonFarmingRepository.activateBoost():');
    console.log('   1. user_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ STRING, –∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è INTEGER');
    console.log('   2. –ü–æ–ª—è –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('   3. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    console.log('   4. –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ PRIMARY KEY –∏–ª–∏ UNIQUE');
    console.log('   5. –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ fallback –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç');
    
    // 4. –ü–†–û–í–ï–†–Ø–ï–ú user_id –¢–ò–ü–´
    console.log('\n4Ô∏è‚É£ –¢–ï–°–¢ –¢–ò–ü–û–í user_id:');
    console.log('=======================');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤
    const { data: existingRecords, error: existingError } = await supabase
      .from('ton_farming_data')
      .select('user_id')
      .limit(3);
    
    if (!existingError && existingRecords) {
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö user_id:');
      existingRecords.forEach((record, index) => {
        console.log(`   –ó–∞–ø–∏—Å—å ${index + 1}: user_id = "${record.user_id}" (${typeof record.user_id})`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å STRING?
      const sampleUserId = existingRecords[0]?.user_id;
      if (typeof sampleUserId === 'string') {
        console.log('üîç –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å STRING, –∞ –Ω–µ INTEGER!');
        
        // –ü—Ä–æ–±—É–µ–º —Å STRING
        console.log('\nüîÑ –ü–û–í–¢–û–†–ù–´–ô –¢–ï–°–¢ —Å user_id –∫–∞–∫ STRING...');
        const testDataString = {
          ...testData,
          user_id: testUserId.toString()  // STRING –≤–º–µ—Å—Ç–æ INTEGER
        };
        
        const { data: stringInsert, error: stringError } = await supabase
          .from('ton_farming_data')
          .insert(testDataString)
          .select();
        
        if (stringError) {
          console.log(`‚ùå –í—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞: ${stringError.message}`);
        } else {
          console.log('‚úÖ –†–ê–ë–û–¢–ê–ï–¢! user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å STRING!');
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç
          await supabase
            .from('ton_farming_data')
            .delete()
            .eq('user_id', testUserId.toString());
          console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
        }
      }
    }
    
    // 5. –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó:');
    console.log('======================');
    console.log('');
    console.log('üîß –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–ù–´–ï:');
    console.log('   1. TonFarmingRepository.activateBoost() –ø–µ—Ä–µ–¥–∞–µ—Ç user_id –∫–∞–∫ INTEGER');
    console.log('   2. –ù–æ ton_farming_data.user_id —Ç—Ä–µ–±—É–µ—Ç STRING —Ç–∏–ø');
    console.log('   3. –ü–æ—ç—Ç–æ–º—É INSERT –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   4. –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –∑–∞–ø–∏—Å–∏');
    console.log('   5. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏—Ö –Ω–µ –≤–∏–¥–∏—Ç');
    console.log('');
    console.log('üö® –°–†–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:');
    console.log('   –í TonFarmingRepository.activateBoost() —Å—Ç—Ä–æ–∫–∞ 286:');
    console.log('   –ë–´–õ–û: user_id: parseInt(userId)');
    console.log('   –ù–ê–î–û: user_id: userId.toString()');

    console.log('\n‚úÖ === –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö –ó–ê–í–ï–†–®–ï–ù ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
analyzeTonFarmingActivationErrors();