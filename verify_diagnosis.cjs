/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function verifyDiagnosis() {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  console.log('='.repeat(50));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –° —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π...');
    
    const { data: workingReferrals, error: workingError } = await supabase
      .from('users')
      .select('*')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false })
      .limit(10);

    if (workingError) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', workingError.message);
    } else {
      console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –° —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏: ${workingReferrals?.length || 0}`);
      
      if (workingReferrals && workingReferrals.length > 0) {
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –†–ê–ë–û–¢–ê–Æ–©–ò–• —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π:');
        workingReferrals.forEach((user, index) => {
          console.log(`   ${index + 1}. ID: ${user.id}, –†–µ—Ñ–µ—Ä–µ—Ä: ${user.referred_by}, –¢–∏–ø: ${typeof user.referred_by}, –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        });
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è referred_by
    console.log('\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ referred_by...');
    
    const { data: allUsers, error: allError } = await supabase
      .from('users')
      .select('id, referred_by, created_at')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false });

    if (allError) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', allError.message);
    } else {
      const stringReferrals = allUsers?.filter(u => typeof u.referred_by === 'string') || [];
      const numberReferrals = allUsers?.filter(u => typeof u.referred_by === 'number') || [];
      
      console.log(`üìä STRING —Ñ–æ—Ä–º–∞—Ç (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã): ${stringReferrals.length}`);
      console.log(`üìä NUMBER —Ñ–æ—Ä–º–∞—Ç (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): ${numberReferrals.length}`);
      
      if (stringReferrals.length > 0) {
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã STRING referred_by:');
        stringReferrals.slice(0, 3).forEach(user => {
          console.log(`   ID: ${user.id}, referred_by: "${user.referred_by}" (${typeof user.referred_by})`);
        });
      }
      
      if (numberReferrals.length > 0) {
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã NUMBER referred_by:');
        numberReferrals.slice(0, 3).forEach(user => {
          console.log(`   ID: ${user.id}, referred_by: ${user.referred_by} (${typeof user.referred_by})`);
        });
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    console.log('\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤...');
    
    const { data: refCodes, error: refError } = await supabase
      .from('users')
      .select('ref_code, id, username, first_name')
      .order('created_at', { ascending: false })
      .limit(20);

    if (refError) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', refError.message);
    } else {
      console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${refCodes?.length || 0}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–æ–¥ REF_1750079004411_nddfp2 –≤ referred_by
      const usageCheck = allUsers?.filter(u => u.referred_by === 'REF_1750079004411_nddfp2') || [];
      console.log(`üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞ REF_1750079004411_nddfp2: ${usageCheck.length}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ referral
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const { data: refTransactions, error: refTransError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(5);

    if (refTransError) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', refTransError.message);
    } else {
      console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${refTransactions?.length || 0}`);
      
      if (refTransactions && refTransactions.length > 0) {
        console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:');
        refTransactions.forEach((tx, index) => {
          console.log(`   ${index + 1}. User ${tx.user_id}: ${tx.amount} ${tx.currency}, ${tx.created_at}`);
        });
      }
    }

    // 5. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è VS –≤—Ä–µ–º–µ–Ω–∏ –≤ referrals
    console.log('\n5Ô∏è‚É£ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑...');
    
    const { data: recentUsers, error } = await supabase
      .from('users')
      .select('*')
      .gte('created_at', '2025-07-16')
      .order('created_at', { ascending: false });

    const { data: recentReferrals } = await supabase
      .from('referrals')
      .select('*')
      .gte('created_at', '2025-07-16')
      .order('created_at', { ascending: false });

    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 16 –∏—é–ª—è: ${recentUsers?.length || 0}`);
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ referrals —Å 16 –∏—é–ª—è: ${recentReferrals?.length || 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    const usersWithReferrer = recentUsers?.filter(u => u.referred_by !== null) || [];
    const successRate = recentUsers?.length > 0 ? (usersWithReferrer.length / recentUsers.length * 100).toFixed(1) : 0;
    
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –° —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º: ${usersWithReferrer.length}`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${successRate}%`);

    console.log('\nüìã –ò–¢–û–ì –ü–†–û–í–ï–†–ö–ò:');
    console.log('='.repeat(30));
    
    if (successRate < 50) {
      console.log('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –°–µ—Ä—å–µ–∑–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏');
      console.log(`   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–≤—è–∑–µ–π: ${successRate}% (–∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–∞—è)`);
      console.log('   - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ë–ï–ó —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
    } else {
      console.log('‚úÖ –†–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      console.log(`   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–≤—è–∑–µ–π: ${successRate}% (–ø—Ä–∏–µ–º–ª–µ–º–æ)`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

verifyDiagnosis().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
});