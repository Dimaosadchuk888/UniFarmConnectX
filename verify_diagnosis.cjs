/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function verifyReferralChain() {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–ü–û–ß–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–û–í');
  console.log('='.repeat(60));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ processReferral –≤ auth/service.ts
    console.log('\nüìã 1. –ü–†–û–í–ï–†–ö–ê –í–´–ó–û–í–ê processReferral()');
    
    // –ù–∞–π–¥–µ–º User 197 (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    const { data: user197 } = await supabase
      .from('users')
      .select('*')
      .eq('id', 197)
      .single();
    
    if (!user197) {
      console.log('‚ùå User 197 –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    console.log(`‚úÖ User 197 –Ω–∞–π–¥–µ–Ω: ${user197.username}`);
    console.log(`   Referred By: ${user197.referred_by}`);
    console.log(`   Ref Code: ${user197.ref_code}`);
    console.log(`   Created: ${user197.created_at}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ API /api/v2/referrals/stats
    console.log('\nüìã 2. –ü–†–û–í–ï–†–ö–ê API /api/v2/referrals/stats');
    
    const { data: apiStats } = await supabase
      .from('referrals')
      .select(`
        *,
        referred_user:users!referrals_user_id_fkey(
          id,
          username,
          telegram_id,
          ref_code,
          created_at
        )
      `)
      .eq('referrer_id', 184);
    
    console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ referrals –¥–ª—è User 184: ${apiStats?.length || 0}`);
    
    if (apiStats && apiStats.length > 0) {
      apiStats.forEach((ref, index) => {
        console.log(`   ${index + 1}. Level ${ref.level}: ${ref.referred_user?.username} (ID: ${ref.referred_user?.id})`);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ getRealReferralStats
    console.log('\nüìã 3. –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–ê getRealReferralStats');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ getRealReferralStats
    const { data: userInfo } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('id', 184)
      .single();
    
    const { data: partnersCount } = await supabase
      .from('referrals')
      .select('id', { count: 'exact' })
      .eq('referrer_id', 184);
    
    console.log(`   User Info: ${userInfo?.username || 'Unknown'}`);
    console.log(`   Partners Count: ${partnersCount?.length || 0}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ReferralStats
    console.log('\nüìã 4. –ê–ù–ê–õ–ò–ó –§–†–û–ù–¢–ï–ù–î –ö–û–ú–ü–û–ù–ï–ù–¢–ê');
    console.log('   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: ReferralStats.tsx');
    console.log('   API Endpoint: /api/v2/referrals/stats');
    console.log('   –ú–µ—Ç–æ–¥: getRealReferralStats');
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É
    console.log('\nüìã 5. –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê');
    
    if (user197.referred_by === null) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: processReferral() –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø!');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ processReferral() –≤ auth/service.ts');
      console.log('   –ú–µ—Å—Ç–æ: –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ authenticateUser()');
    } else {
      console.log('‚úÖ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    }
    
    if (!apiStats || apiStats.length === 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ referrals –ø—É—Å—Ç–∞!');
      console.log('   –†–µ—à–µ–Ω–∏–µ: processReferral() –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ referrals');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ referrals —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ');
    }

    return {
      user197,
      apiStats,
      partnersCount: partnersCount?.length || 0
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    return null;
  }
}

verifyReferralChain().then((result) => {
  if (result) {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ processReferral() –≤ auth/service.ts');
  }
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
});