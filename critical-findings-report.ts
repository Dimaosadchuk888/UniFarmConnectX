import { supabase } from './core/supabaseClient';

async function criticalFindingsReport() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò - –ü–û–õ–ù–ê–Ø –ö–ê–†–¢–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(80));

  try {
    console.log('\n1Ô∏è‚É£ –û–ë–ù–ê–†–£–ñ–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê API:');
    console.log('   ‚úÖ API Endpoint: POST /api/v2/wallet/ton-deposit –°–£–©–ï–°–¢–í–£–ï–¢');
    console.log('   ‚úÖ Controller: modules/wallet/controller.ts:439 tonDeposit() –ù–ê–ô–î–ï–ù');
    console.log('   ‚úÖ Service: modules/wallet/service.ts:358 processTonDeposit() –ù–ê–ô–î–ï–ù');
    console.log('   ‚úÖ UnifiedTransactionService: core/TransactionService.ts –ù–ê–ô–î–ï–ù');
    console.log('   ‚úÖ Mapping: TON_DEPOSIT -> DEPOSIT –ö–û–†–†–ï–ö–¢–ï–ù');

    console.log('\n2Ô∏è‚É£ –ü–û–õ–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê –í–´–ó–û–í–û–í:');
    console.log('   Frontend: TON Connect -> /api/v2/wallet/ton-deposit');
    console.log('   Controller: tonDeposit() -> walletService.processTonDeposit()');
    console.log('   Service: processTonDeposit() -> UnifiedTransactionService.createTransaction()');
    console.log('   TransactionService: createTransaction() -> –°–æ–∑–¥–∞–µ—Ç DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    console.log('   BalanceManager: –û–±–Ω–æ–≤–ª—è–µ—Ç balance_ton —á–µ—Ä–µ–∑ UnifiedTransactionService');

    console.log('\n3Ô∏è‚É£ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î vs –æ–∂–∏–¥–∞–µ–º—ã–µ
    const { data: actualTransactionTypes, error: typesError } = await supabase
      .from('transactions')
      .select('type, COUNT(*)::integer as count')
      .gte('user_id', 191)
      .lte('user_id', 303);

    if (!typesError && actualTransactionTypes) {
      const typeStats: { [key: string]: number } = {};
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
      const { data: allTx } = await supabase
        .from('transactions')
        .select('type')
        .gte('user_id', 191)
        .lte('user_id', 303);

      allTx?.forEach(tx => {
        typeStats[tx.type] = (typeStats[tx.type] || 0) + 1;
      });

      console.log('   üìä –†–ï–ê–õ–¨–ù–´–ï –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ë–î:');
      Object.keys(typeStats).forEach(type => {
        console.log(`     ${type}: ${typeStats[type]} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });

      console.log('\n   üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
      if (!typeStats['DEPOSIT'] && !typeStats['TON_DEPOSIT']) {
        console.log('   ‚ùå –ù–ò –û–î–ù–û–ô DEPOSIT/TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
        console.log('   üîç –ü–†–ò–ß–ò–ù–ê: API /ton-deposit –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
      } else if (typeStats['DEPOSIT'] > 0) {
        console.log('   ‚úÖ DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –°–£–©–ï–°–¢–í–£–Æ–¢');
        console.log('   üîç –ü–†–ò–ß–ò–ù–ê: API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∫–æ');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –≤—ã–∑–æ–≤–æ–≤ API
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API –ê–ö–¢–ò–í–ù–û–°–¢–ò:');
    
    // –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ TON_DEPOSIT
    const { data: criticalLogs, error: logsError } = await supabase
      .from('server_logs')
      .select('message, level, timestamp')
      .like('message', '%TON_DEPOSIT_PROCESSING%')
      .order('timestamp', { ascending: false })
      .limit(5);

    if (!logsError && criticalLogs && criticalLogs.length > 0) {
      console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏ –≤—ã–∑–æ–≤–æ–≤ TON_DEPOSIT:');
      criticalLogs.forEach(log => {
        console.log(`     ${log.timestamp}: ${log.message}`);
      });
    } else {
      console.log('   ‚ùå –ù–ï–¢ –ª–æ–≥–æ–≤ TON_DEPOSIT_PROCESSING');
      console.log('   üîç –ü–†–ò–ß–ò–ù–ê: API —ç–Ω–¥–ø–æ–∏–Ω—Ç –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø –∏–ª–∏ –ª–æ–≥–∏ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è');
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É—Ç—Å—è TON –±–∞–ª–∞–Ω—Å—ã
    console.log('\n5Ô∏è‚É£ –ò–°–¢–û–ß–ù–ò–ö TON –ë–ê–õ–ê–ù–°–û–í:');
    
    const { data: usersWithBalance, error: balanceError } = await supabase
      .from('users')
      .select('id, balance_ton, created_at, updated_at')
      .gt('balance_ton', 0)
      .gte('id', 191)
      .lte('id', 303)
      .limit(5);

    if (!balanceError && usersWithBalance) {
      console.log('   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –±–∞–ª–∞–Ω—Å–∞–º–∏:');
      
      for (const user of usersWithBalance) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const { data: deposits } = await supabase
          .from('transactions')
          .select('type, amount_ton, created_at')
          .eq('user_id', user.id)
          .in('type', ['DEPOSIT', 'TON_DEPOSIT', 'BOOST_PURCHASE']);

        console.log(`     User ${user.id}: –±–∞–ª–∞–Ω—Å=${user.balance_ton}, –æ–±–Ω–æ–≤–ª–µ–Ω=${user.updated_at.split('T')[0]}`);
        console.log(`       –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${deposits?.length || 0}`);
        
        if (deposits && deposits.length > 0) {
          deposits.forEach(dep => {
            console.log(`         ${dep.type}: ${dep.amount_ton} TON [${dep.created_at.split('T')[0]}]`);
          });
        } else {
          console.log(`         ‚ùå –ù–ò –û–î–ù–û–ô –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
        }
      }
    }

    console.log('\n6Ô∏è‚É£ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó:');
    
    console.log('\nüéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
    console.log('   1. API /api/v2/wallet/ton-deposit –°–£–©–ï–°–¢–í–£–ï–¢ –∏ –†–ê–ë–û–¢–ê–ï–¢');
    console.log('   2. processTonDeposit() –°–£–©–ï–°–¢–í–£–ï–¢ –∏ –ü–†–ê–í–ò–õ–¨–ù–´–ô');
    console.log('   3. UnifiedTransactionService –°–£–©–ï–°–¢–í–£–ï–¢ –∏ –ù–ê–°–¢–†–û–ï–ù');
    console.log('   4. –ù–û: API –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!');
    
    console.log('\nüí° –ò–°–¢–ò–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
    console.log('   ‚ùå Frontend –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /api/v2/wallet/ton-deposit');
    console.log('   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–ª–∞—é—Ç –¥–µ–ø–æ–∑–∏—Ç—ã –ú–ò–ú–û —ç—Ç–æ–≥–æ API');
    console.log('   ‚ùå –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –î–†–£–ì–ò–ú —Å–ø–æ—Å–æ–±–æ–º (scheduler, webhook, etc)');
    
    console.log('\nüîç –ß–¢–û –ù–£–ñ–ù–û –ù–ê–ô–¢–ò:');
    console.log('   1. –ö–ê–ö —Ä–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è TON –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   2. –ï–°–¢–¨ –ª–∏ –¥—Ä—É–≥–æ–π API –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   3. –†–ê–ë–û–¢–ê–ï–¢ –ª–∏ webhook –æ—Ç TON –±–ª–æ–∫—á–µ–π–Ω–∞');
    console.log('   4. –ï–°–¢–¨ –ª–∏ scheduler, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–ª–æ–∫—á–µ–π–Ω');
    
    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫–æ–¥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   2. –ù–∞–π—Ç–∏ scheduler –∏–ª–∏ webhook –¥–ª—è TON');
    console.log('   3. –ü–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ /api/v2/wallet/ton-deposit –≤–æ–æ–±—â–µ');

    console.log('\nüéØ –ì–ê–†–ê–ù–¢–ò–Ø –î–õ–Ø –ù–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í:');
    console.log('   ‚ùå 0% - –µ—Å–ª–∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ API');
    console.log('   ‚úÖ 95% - –µ—Å–ª–∏ –∑–∞—Å—Ç–∞–≤–∏—Ç—å frontend –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

criticalFindingsReport().catch(console.error);