/**
 * –û–¢–õ–ê–î–ö–ê processTonDeposit() - –ü–û–ò–°–ö –ü–†–ò–ß–ò–ù–´ –û–¢–ö–ê–¢–ê –ë–ê–õ–ê–ù–°–ê
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function debugProcessTonDeposit() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê processTonDeposit()');
  console.log('='.repeat(50));
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É processTonDeposit() –ø–æ—à–∞–≥–æ–≤–æ
    const user_id = 25;
    const ton_tx_hash = 'test_debug_' + Date.now();
    const amount = 0.01; // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
    const wallet_address = 'test_wallet';
    
    console.log('üìä –í–•–û–î–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:');
    console.log(`   User ID: ${user_id}`);
    console.log(`   Amount: ${amount} TON`);
    console.log(`   TX Hash: ${ton_tx_hash}`);
    
    // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüîç –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    const existingTransaction = await supabase
      .from('transactions')
      .select('*')
      .eq('description', ton_tx_hash)
      .eq('type', 'DEPOSIT')
      .single();
    
    if (existingTransaction.data) {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è');
      return;
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí∞ –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞');
    const { data: user, error: getUserError } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', user_id)
      .single();
    
    if (getUserError || !user) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', getUserError?.message);
      return;
    }
    
    const currentBalance = parseFloat(user.balance_ton || '0');
    const newBalance = currentBalance + amount;
    
    console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} TON`);
    console.log(`   –î–æ–±–∞–≤–ª—è–µ–º: ${amount} TON`);
    console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} TON`);
    
    // –®–ê–ì 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüîÑ –®–ê–ì 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
    const { error: updateError } = await supabase
      .from('users')
      .update({ balance_ton: newBalance })
      .eq('id', user_id);
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError.message);
      return;
    } else {
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    console.log('\nüîç –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê:');
    const { data: checkUser, error: checkError } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', user_id)
      .single();
    
    if (checkError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError.message);
    } else {
      console.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${checkUser.balance_ton} TON`);
      if (parseFloat(checkUser.balance_ton) === newBalance) {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      } else {
        console.log('‚ùå –ë–ê–õ–ê–ù–° –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ú–£!');
      }
    }
    
    // –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìù –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    const { data: transaction, error: transactionError } = await supabase
      .from('transactions')
      .insert({
        user_id,
        amount_ton: amount,
        amount_uni: 0,
        type: 'DEPOSIT',
        currency: 'TON',
        status: 'completed',
        description: `TON deposit from blockchain: ${ton_tx_hash}`,
        metadata: {
          source: 'ton_deposit',
          original_type: 'TON_DEPOSIT',
          wallet_address,
          tx_hash: ton_tx_hash
        }
      })
      .select()
      .single();
    
    if (transactionError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–∫–∞—Ç–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
      console.log('\nüîÑ –í–´–ü–û–õ–ù–Ø–ï–ú –û–¢–ö–ê–¢ –ë–ê–õ–ê–ù–°–ê (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)');
      await supabase
        .from('users')
        .update({ balance_ton: parseFloat(user.balance_ton || '0') })
        .eq('id', user_id);
      
      console.log('‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è!');
      return;
    } else {
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
    }
    
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
    const { data: finalUser, error: finalError } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', user_id)
      .single();
    
    if (finalError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError.message);
    } else {
      console.log(`   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalUser.balance_ton} TON`);
      
      if (parseFloat(finalUser.balance_ton) === newBalance) {
        console.log('‚úÖ –ü–†–û–¶–ï–°–° –£–°–ü–ï–®–ï–ù - –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      } else {
        console.log('‚ùå –ü–†–û–¶–ï–°–° –ü–†–û–í–ê–õ–ï–ù - –±–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç');
      }
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    if (transaction) {
      await supabase
        .from('transactions')
        .delete()
        .eq('id', transaction.id);
      console.log('üßπ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
  }
}

debugProcessTonDeposit().catch(console.error);