/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –∂–∏–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

const https = require('https');

const GREEN = '\x1b[32m';
const RED = '\x1b[31m';
const YELLOW = '\x1b[33m';
const RESET = '\x1b[0m';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
const config = {
  jwt: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjE4NCIsInVzZXJuYW1lIjoiRGltYU9zYWRjaHVrIiwicmVmX2NvZGUiOiJVU0VSMTM1IiwiaWF0IjoxNzUzMTgzNzk0LCJleHAiOjE3NTM3ODg1OTR9.dFnGo6p8z7I4m6aBKLY4-qGmP_LkgjP9qmrOjjNT2jA',
  testTxHash: `live_test_${Date.now()}`,
  amount: 2.0
};

// –í–æ–∑–º–æ–∂–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testUrls = [
  'https://uni-farm-connect-x-w81846064.replit.app',
  'http://localhost:3000',
  'http://0.0.0.0:3000',
  'http://127.0.0.1:3000'
];

function makeHttpsRequest(url, options = {}) {
  return new Promise((resolve) => {
    const urlObj = new URL(url);
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (urlObj.protocol === 'https:' ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Authorization': `Bearer ${config.jwt}`,
        'Content-Type': 'application/json',
        'User-Agent': 'TON-Deposit-Test/1.0',
        ...options.headers
      }
    };

    const req = (urlObj.protocol === 'https:' ? https : require('http')).request(requestOptions, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const json = JSON.parse(body);
          resolve({ status: res.statusCode, body: json, raw: body });
        } catch (e) {
          resolve({ status: res.statusCode, body: null, raw: body });
        }
      });
    });

    req.on('error', (error) => {
      resolve({ error: error.message });
    });

    req.setTimeout(5000, () => {
      req.destroy();
      resolve({ error: 'Timeout' });
    });

    if (options.data) {
      req.write(JSON.stringify(options.data));
    }

    req.end();
  });
}

async function findWorkingUrl() {
  console.log(`${YELLOW}üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${RESET}`);
  
  for (const baseUrl of testUrls) {
    try {
      console.log(`\n–ü—Ä–æ–≤–µ—Ä–∫–∞: ${baseUrl}`);
      const result = await makeHttpsRequest(`${baseUrl}/api/v2/wallet/balance?user_id=184`);
      
      if (result.error) {
        console.log(`   ${RED}‚ùå ${result.error}${RESET}`);
      } else if (result.status === 200) {
        console.log(`   ${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π URL!${RESET}`);
        return baseUrl;
      } else {
        console.log(`   ${RED}‚ùå HTTP ${result.status}${RESET}`);
      }
    } catch (e) {
      console.log(`   ${RED}‚ùå –û—à–∏–±–∫–∞: ${e.message}${RESET}`);
    }
  }
  
  return null;
}

async function testTonDeposit(baseUrl) {
  console.log(`\n${YELLOW}üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–∞...${RESET}`);
  
  // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const balanceBefore = await makeHttpsRequest(`${baseUrl}/api/v2/wallet/balance?user_id=184`);
  
  if (balanceBefore.error || balanceBefore.status !== 200) {
    console.log(`${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å${RESET}`);
    return;
  }
  
  const oldTonBalance = parseFloat(balanceBefore.body.data.tonBalance);
  console.log(`üìä –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${oldTonBalance}`);
  
  // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
  const depositResult = await makeHttpsRequest(`${baseUrl}/api/v2/wallet/ton-deposit`, {
    method: 'POST',
    data: {
      ton_tx_hash: config.testTxHash,
      amount: config.amount,
      wallet_address: 'UQLiveTest...Example'
    }
  });
  
  console.log(`üì° HTTP Status: ${depositResult.status}`);
  
  if (depositResult.status === 200 && depositResult.body.success) {
    console.log(`${GREEN}‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!${RESET}`);
    console.log(`üìù Transaction ID: ${depositResult.body.transaction_id}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const balanceAfter = await makeHttpsRequest(`${baseUrl}/api/v2/wallet/balance?user_id=184`);
    
    if (balanceAfter.status === 200) {
      const newTonBalance = parseFloat(balanceAfter.body.data.tonBalance);
      const expectedBalance = oldTonBalance + config.amount;
      
      console.log(`üìä –ù–æ–≤—ã–π TON –±–∞–ª–∞–Ω—Å: ${newTonBalance}`);
      console.log(`üìä –û–∂–∏–¥–∞–ª—Å—è: ${expectedBalance}`);
      
      if (Math.abs(newTonBalance - expectedBalance) < 0.001) {
        console.log(`${GREEN}üéØ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${RESET}`);
      } else {
        console.log(`${RED}‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ${RESET}`);
      }
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...`);
    const duplicateResult = await makeHttpsRequest(`${baseUrl}/api/v2/wallet/ton-deposit`, {
      method: 'POST',
      data: {
        ton_tx_hash: config.testTxHash, // –¢–æ—Ç –∂–µ hash
        amount: config.amount,
        wallet_address: 'UQLiveTest...Example'
      }
    });
    
    if (duplicateResult.status === 200 && duplicateResult.body.success === false) {
      console.log(`${GREEN}‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${duplicateResult.body.error}${RESET}`);
    } else {
      console.log(`${RED}‚ùå –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${RESET}`);
    }
    
  } else {
    console.log(`${RED}‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:${RESET}`);
    console.log(JSON.stringify(depositResult.body || depositResult.raw, null, 2));
  }
}

async function runLiveTest() {
  console.log(`${GREEN}üß™ LIVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–û–í${RESET}`);
  console.log('='.repeat(60));
  
  const workingUrl = await findWorkingUrl();
  
  if (workingUrl) {
    await testTonDeposit(workingUrl);
    
    console.log(`\n${GREEN}‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û –í –ñ–ò–í–û–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–ò${RESET}`);
    console.log('–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
    console.log('UnifiedTransactionService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production');
  } else {
    console.log(`\n${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è${RESET}`);
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
  }
}

runLiveTest();