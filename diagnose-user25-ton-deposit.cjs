/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í USER 25 (TELEGRAM –ê–ö–ö–ê–£–ù–¢)
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseUser25TonDeposit() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER 25 - TELEGRAM –ê–ö–ö–ê–£–ù–¢');
  console.log('='.repeat(50));
  
  const userId = 25;
  
  try {
    // 1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (userError || !user) {
      console.log('‚ùå User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return;
    }
    
    console.log('üë§ USER 25 (TELEGRAM –ê–ö–ö–ê–£–ù–¢):');
    console.log(`   Telegram ID: ${user.telegram_id}`);
    console.log(`   Username: ${user.username}`);
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_active}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
    
    // 2. –í—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    
    const { data: recentTonTx, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('currency', 'TON')
      .gte('created_at', yesterday)
      .order('created_at', { ascending: false });
    
    console.log(`\nüìä TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê 24 –ß–ê–°–ê (${recentTonTx?.length || 0}):`);
    
    if (recentTonTx && recentTonTx.length > 0) {
      let totalBalance = 0;
      
      recentTonTx.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const hoursAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60 / 60);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60) % 60;
        const amount = parseFloat(tx.amount || 0);
        
        console.log(`\n   ${i + 1}. ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      –°—É–º–º–∞: ${amount} TON`);
        console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${hoursAgo}—á ${minutesAgo}–º –Ω–∞–∑–∞–¥)`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        
        if (tx.metadata) {
          console.log(`      Metadata: ${JSON.stringify(tx.metadata)}`);
        }
        
        // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
        if (tx.type === 'DEPOSIT' || tx.description.includes('deposit') || tx.description.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')) {
          console.log(`      üéØ –í–û–ó–ú–û–ñ–ù–´–ô –î–ï–ü–û–ó–ò–¢!`);
        }
        
        // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if (tx.description.includes('compensation') || tx.description.includes('restoration')) {
          console.log(`      üîß –ö–û–ú–ü–ï–ù–°–ê–¶–ò–û–ù–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø`);
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞
        if (tx.type === 'DEPOSIT' || tx.type === 'FARMING_REWARD' || tx.type === 'REFERRAL_REWARD') {
          totalBalance += amount;
        } else if (tx.type === 'WITHDRAWAL') {
          totalBalance -= amount;
        }
      });
      
      console.log(`\nüí∞ –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê –ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
      console.log(`   –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞ 24—á: ${totalBalance} TON`);
      console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${user.balance_ton} TON`);
      
      const diff = parseFloat(user.balance_ton) - totalBalance;
      if (Math.abs(diff) > 0.001) {
        console.log(`   ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${diff} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        const { data: allTonTx } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', userId)
          .eq('currency', 'TON')
          .order('created_at', { ascending: false });
        
        if (allTonTx) {
          let fullBalance = 0;
          allTonTx.forEach(tx => {
            const amount = parseFloat(tx.amount || 0);
            if (tx.type === 'DEPOSIT' || tx.type === 'FARMING_REWARD' || tx.type === 'REFERRAL_REWARD') {
              fullBalance += amount;
            } else if (tx.type === 'WITHDRAWAL') {
              fullBalance -= amount;
            }
          });
          
          console.log(`   –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${fullBalance} TON`);
          const fullDiff = parseFloat(user.balance_ton) - fullBalance;
          console.log(`   –ü–æ–ª–Ω–æ–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${fullDiff} TON`);
        }
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∑–∞ 24—á`);
      }
      
    } else {
      console.log('   ‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      if (parseFloat(user.balance_ton) > 0) {
        console.log(`   ü§î –ù–û –±–∞–ª–∞–Ω—Å ${user.balance_ton} TON —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
        console.log('   –í–æ–∑–º–æ–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç—ã –±—ã–ª–∏ –¥–∞–≤–Ω–æ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø–∏—Å—å—é');
      }
    }
    
    // 3. –ü–æ–∏—Å–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    console.log('\nüîç –ü–û–ò–°–ö –í–û–ó–ú–û–ñ–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const { data: possibleDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .or('description.ilike.%0.1%,description.ilike.%deposit%,description.ilike.%–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ%,description.ilike.%blockchain%')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (possibleDeposits && possibleDeposits.length > 0) {
      console.log(`   üìÑ –ù–∞–π–¥–µ–Ω–æ ${possibleDeposits.length} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      possibleDeposits.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const hoursAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60 / 60);
        console.log(`      ${i + 1}. ${tx.type}: ${tx.amount} ${tx.currency} (${hoursAgo}—á –Ω–∞–∑–∞–¥) - ${tx.description}`);
      });
    } else {
      console.log('   ‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\nüîÑ –°–ò–°–¢–ï–ú–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:');
    
    const { data: systemActivity } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at')
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()) // –ó–∞ 2 —á–∞—Å–∞
      .order('created_at', { ascending: false });
    
    if (systemActivity && systemActivity.length > 0) {
      console.log(`   üìä TON –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞ 2 —á–∞—Å–∞ (${systemActivity.length}):`);
      systemActivity.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`      ${i + 1}. User ${tx.user_id}: ${tx.amount} TON (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        
        if (tx.user_id === userId) {
          console.log(`         üéØ –≠–¢–û –í–ê–® –ê–ö–ö–ê–£–ù–¢!`);
        }
      });
    } else {
      console.log('   ‚ùå TON –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞ 2 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   ü§î –ï—Å–ª–∏ –≤—ã –¥–µ–ª–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç, –æ–Ω –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –ë–î');
    }
    
    console.log('\nüéØ –í–´–í–û–î–´ –î–õ–Ø USER 25:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ –¥–µ–ø–æ–∑–∏—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('2. –ï—Å–ª–∏ –¥–∞ - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ backend');
    console.log('3. –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ —Å TON Connect –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
    console.log('4. –ë–∞–ª–∞–Ω—Å –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

diagnoseUser25TonDeposit().catch(console.error);