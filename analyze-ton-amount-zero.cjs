/**
 * –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ amount = 0 –≤–º–µ—Å—Ç–æ 0.22 TON
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeTonAmountZero() {
  console.log('üí∞ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ amount = 0 –≤–º–µ—Å—Ç–æ 0.22 TON');
  console.log('='.repeat(45));
  
  try {
    // 1. –í—Å–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    
    const { data: tonDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .gte('created_at', oneDayAgo)
      .order('created_at', { ascending: false });
    
    console.log(`\nüìä TON –î–ï–ü–û–ó–ò–¢–´ –ó–ê 24 –ß–ê–°–ê (${tonDeposits?.length || 0}):`);
    console.log('='.repeat(40));
    
    let zeroAmountCount = 0;
    let nonZeroAmountCount = 0;
    
    if (tonDeposits && tonDeposits.length > 0) {
      tonDeposits.forEach((tx, i) => {
        const amount = parseFloat(tx.amount);
        const time = new Date(tx.created_at);
        const hoursAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60 / 60);
        
        console.log(`\n   ${i + 1}. ID: ${tx.id} | User: ${tx.user_id}`);
        console.log(`      Amount: ${tx.amount} TON`);
        console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${hoursAgo}—á –Ω–∞–∑–∞–¥)`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description.substring(0, 80)}...`);
        
        if (amount === 0) {
          zeroAmountCount++;
          console.log(`      üö® AMOUNT = 0!`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BOC –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
          if (tx.description.includes('te6')) {
            console.log(`      üîç BOC –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É`);
            
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ BOC –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É
            const bocMatch = tx.description.match(/te6[A-Za-z0-9+/=]+/);
            if (bocMatch) {
              console.log(`      üì¶ BOC: ${bocMatch[0].substring(0, 50)}...`);
            }
          }
        } else {
          nonZeroAmountCount++;
          console.log(`      ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: ${amount} TON`);
        }
        
        if (tx.metadata) {
          console.log(`      üìã Metadata: ${JSON.stringify(tx.metadata)}`);
        }
      });
      
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–£–ú–ú:`);
      console.log(`   Amount = 0: ${zeroAmountCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`   Amount > 0: ${nonZeroAmountCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      if (zeroAmountCount > 0) {
        console.log(`   üö® ${Math.round(zeroAmountCount / tonDeposits.length * 100)}% –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–º–µ—é—Ç amount = 0!`);
      }
    }
    
    // 2. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ User 227 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log(`\nüë§ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó USER 227 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
    console.log('='.repeat(40));
    
    const { data: user227Tx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 227)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (user227Tx && user227Tx.length > 0) {
      user227Tx.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      Amount: "${tx.amount}" (—Ç–∏–ø: ${typeof tx.amount})`);
        console.log(`      Parsed Float: ${parseFloat(tx.amount)}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏–Ω–∞: ${tx.description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ description
        if (tx.description.includes('te6')) {
          console.log(`      üì¶ BOC –ê–ù–ê–õ–ò–ó:`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—É–º–º –≤ BOC
          const bocContent = tx.description;
          
          // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          const numberMatches = bocContent.match(/\d+/g);
          if (numberMatches) {
            console.log(`      üî¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ BOC: ${numberMatches.slice(0, 10).join(', ')}`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ 0.22 –∏–ª–∏ 22 –∏–ª–∏ 220000000 (–Ω–∞–Ω–æ—Ç–æ–Ω—ã)
          if (bocContent.includes('22') || bocContent.includes('220')) {
            console.log(`      üéØ –ù–∞–π–¥–µ–Ω–æ "22" –≤ BOC - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏—Å–∫–æ–º–∞—è —Å—É–º–º–∞!`);
          }
          
          console.log(`      üìù BOC —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${bocContent.substring(0, 200)}...`);
        }
        
        console.log(`      ‚è∞ –°–æ–∑–¥–∞–Ω–∞: ${tx.created_at}`);
        console.log(`      üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${tx.updated_at}`);
      });
    }
    
    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log(`\n‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –° –£–°–ü–ï–®–ù–´–ú–ò –î–ï–ü–û–ó–ò–¢–ê–ú–ò:`);
    console.log('='.repeat(40));
    
    const { data: successfulDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .gt('amount', 0)
      .gte('created_at', oneDayAgo)
      .order('amount', { ascending: false })
      .limit(5);
    
    if (successfulDeposits && successfulDeposits.length > 0) {
      console.log('\n–£—Å–ø–µ—à–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã —Å amount > 0:');
      successfulDeposits.forEach((tx, i) => {
        console.log(`   ${i + 1}. User ${tx.user_id}: ${tx.amount} TON`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description.substring(0, 100)}...`);
      });
    } else {
      console.log('\n‚ùå –ù–ï–¢ —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å amount > 0 –∑–∞ 24 —á–∞—Å–∞!');
      console.log('üö® –í–°–ï TON –¥–µ–ø–æ–∑–∏—Ç—ã –∏–º–µ—é—Ç amount = 0!');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    console.log(`\nüóÉÔ∏è –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í –ë–î:`);
    console.log('='.repeat(40));
    
    if (tonDeposits && tonDeposits.length > 0) {
      const firstTx = tonDeposits[0];
      console.log('\n–¢–∏–ø—ã –ø–æ–ª–µ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      console.log(`   amount: "${firstTx.amount}" (${typeof firstTx.amount})`);
      console.log(`   user_id: ${firstTx.user_id} (${typeof firstTx.user_id})`);
      console.log(`   id: ${firstTx.id} (${typeof firstTx.id})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      const parsedAmount = parseFloat(firstTx.amount);
      console.log(`   parseFloat(amount): ${parsedAmount}`);
      console.log(`   Number(amount): ${Number(firstTx.amount)}`);
      console.log(`   +amount: ${+firstTx.amount}`);
    }
    
    // 5. –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    console.log(`\nüîç –ê–ù–ê–õ–ò–ó –ú–ï–¢–ê–î–ê–ù–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í:`);
    console.log('='.repeat(40));
    
    const depositsWithMetadata = tonDeposits?.filter(tx => tx.metadata) || [];
    
    if (depositsWithMetadata.length > 0) {
      console.log(`\n–î–µ–ø–æ–∑–∏—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${depositsWithMetadata.length}`);
      
      depositsWithMetadata.slice(0, 3).forEach((tx, i) => {
        console.log(`\n   ${i + 1}. ID: ${tx.id} | Amount: ${tx.amount}`);
        try {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          console.log(`      Metadata: ${JSON.stringify(metadata, null, 2)}`);
          
          // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—É–º–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          if (metadata.amount || metadata.value || metadata.sum) {
            console.log(`      üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö!`);
          }
        } catch (e) {
          console.log(`      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${e.message}`);
        }
      });
    } else {
      console.log('\n–ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏');
    }
    
    console.log('\nüéØ –í–´–í–û–î–´ –ü–û –ê–ù–ê–õ–ò–ó–£ AMOUNT = 0:');
    console.log('='.repeat(35));
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º—ã –∏–∑ BOC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('2. –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ amount –≤ backend –æ–±—Ä–∞–±–æ—Ç–∫–µ');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å precision –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î');
    console.log('4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å metadata –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—É–º–º—ã');
    console.log('5. –°—Ä–∞–≤–Ω–∏—Ç—å —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ amount:', error.message);
  }
}

analyzeTonAmountZero().catch(console.error);