/**
 * Verification script for T8 API endpoints implementation
 * Confirms that all 3 new endpoints are accessible and properly secured
 */

const BASE_URL = 'http://localhost:3000/api/v2';

async function checkEndpoint(path, method = 'GET', body = null) {
  const url = `${BASE_URL}${path}`;
  const options = {
    method,
    headers: { 'Content-Type': 'application/json' }
  };
  
  if (body && method !== 'GET') {
    options.body = JSON.stringify(body);
  }
  
  try {
    const response = await fetch(url, options);
    const data = await response.text();
    
    return {
      status: response.status,
      data: data ? JSON.parse(data) : null,
      success: response.ok
    };
  } catch (error) {
    return {
      status: 500,
      error: error.message,
      success: false
    };
  }
}

async function verifyEndpoints() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ó–ê–î–ê–ß–ò T8');
  console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É –Ω–æ–≤—ã—Ö API endpoints\n');
  
  const endpoints = [
    { path: '/me', method: 'GET', description: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
    { path: '/farming/history', method: 'GET', description: '–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞' },
    { path: '/airdrop/register', method: 'POST', body: { telegram_id: 123 }, description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ airdrop' }
  ];
  
  const results = [];
  
  for (const endpoint of endpoints) {
    console.log(`üìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${endpoint.method} ${endpoint.path}`);
    
    const result = await checkEndpoint(endpoint.path, endpoint.method, endpoint.body);
    
    // Check if endpoint exists and is properly secured
    const isImplemented = result.status !== 404;
    const isSecured = result.status === 401 && result.data?.error?.includes('Telegram');
    
    console.log(`   ${isImplemented ? '‚úÖ' : '‚ùå'} Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: ${result.status}`);
    console.log(`   ${isSecured ? '‚úÖ' : '‚ùå'} –ó–∞—â–∏—â–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: ${isSecured}`);
    
    if (result.data?.error) {
      console.log(`   üìù –û—Ç–≤–µ—Ç: ${result.data.error}`);
    }
    
    results.push({
      endpoint: endpoint.path,
      method: endpoint.method,
      description: endpoint.description,
      implemented: isImplemented,
      secured: isSecured,
      status: result.status
    });
    
    console.log('');
  }
  
  // Summary
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
  console.log('=' .repeat(50));
  
  results.forEach(result => {
    const status = result.implemented && result.secured ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ü–†–û–ë–õ–ï–ú–ê';
    console.log(`${status} ${result.method} ${result.endpoint} - ${result.description}`);
  });
  
  const allWorking = results.every(r => r.implemented && r.secured);
  
  console.log('\n' + '='.repeat(50));
  
  if (allWorking) {
    console.log('üéâ –ó–ê–î–ê–ß–ê T8 –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–ê!');
    console.log('‚úÖ –í—Å–µ 3 –Ω–æ–≤—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã');
    console.log('‚úÖ –í—Å–µ endpoints –∑–∞—â–∏—â–µ–Ω—ã Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');  
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  } else {
    console.log('‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
  
  return allWorking;
}

verifyEndpoints();