#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env.neon –∏ 
 * –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Neon DB.
 */

import { exec } from 'child_process';
import { readFileSync, existsSync, writeFileSync } from 'fs';
import { resolve } from 'path';
import { createInterface } from 'readline';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  NEON_ENV_FILE: '.env.neon',
  NEON_IMPORT_FILE: 'server/db-neon-direct.ts',
  PORT: process.env.PORT || 3000,
  NODE_ENV: process.env.NODE_ENV || 'production'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
function checkFiles() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...', colors.blue);
  
  const neonEnvExists = existsSync(CONFIG.NEON_ENV_FILE);
  const neonImportExists = existsSync(CONFIG.NEON_IMPORT_FILE);
  
  if (!neonEnvExists) {
    log(`‚ùå –§–∞–π–ª ${CONFIG.NEON_ENV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é —Ñ–∞–π–ª —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...`, colors.yellow);
    
    const defaultNeonEnv = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
DATABASE_PROVIDER=neon
USE_LOCAL_DB_ONLY=false
FORCE_NEON_DB=true
DISABLE_REPLIT_DB=true
OVERRIDE_DB_PROVIDER=neon
DISABLE_AUTO_PARTITIONING=true

# URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
DATABASE_URL=postgresql://neondb_owner:npg_PASSWORD@ep-your-db-name.us-east-1.aws.neon.tech/neondb?sslmode=require
`;
    
    writeFileSync(CONFIG.NEON_ENV_FILE, defaultNeonEnv);
    log(`‚úÖ –§–∞–π–ª ${CONFIG.NEON_ENV_FILE} —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL.`, colors.green);
    return false;
  }
  
  if (!neonImportExists) {
    log(`‚ùå –§–∞–π–ª ${CONFIG.NEON_IMPORT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB.`, colors.red);
    return false;
  }
  
  log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã', colors.green);
  return true;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
function loadNeonEnv() {
  log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env.neon...', colors.blue);
  
  try {
    const envContent = readFileSync(CONFIG.NEON_ENV_FILE, 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (line.trim() && !line.startsWith('#')) {
        const [key, value] = line.split('=').map(part => part.trim());
        
        if (key && value) {
          envVars[key] = value;
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
          process.env[key] = value;
        }
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è DATABASE_URL
    if (!envVars.DATABASE_URL) {
      log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DATABASE_URL –≤ .env.neon. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB.', colors.yellow);
      return false;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!envVars.FORCE_NEON_DB) process.env.FORCE_NEON_DB = 'true';
    if (!envVars.DISABLE_REPLIT_DB) process.env.DISABLE_REPLIT_DB = 'true';
    if (!envVars.OVERRIDE_DB_PROVIDER) process.env.OVERRIDE_DB_PROVIDER = 'neon';
    
    // –í—ã–≤–æ–¥–∏–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', colors.green);
    Object.keys(envVars).forEach(key => {
      const value = key === 'DATABASE_URL' 
        ? envVars[key].replace(/:[^:]*@/, ':***@')
        : envVars[key];
      
      log(`  ${key}=${value}`, colors.reset);
    });
    
    return true;
  } catch (err) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${err.message}`, colors.red);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function startApp() {
  log('\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Neon DB...', colors.magenta);
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const startCommand = `NODE_ENV=${CONFIG.NODE_ENV} PORT=${CONFIG.PORT} node dist/index.js`;
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const child = exec(startCommand);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
  child.stdout.on('data', (data) => {
    process.stdout.write(data);
  });
  
  child.stderr.on('data', (data) => {
    process.stderr.write(data);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  child.on('exit', (code, signal) => {
    if (code !== 0) {
      log(`\n‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º ${code}`, colors.red);
    } else {
      log('\n‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É', colors.green);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
  process.on('SIGINT', () => {
    log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)', colors.yellow);
    child.kill('SIGINT');
  });
  
  return child;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('üåü –ó–∞–ø—É—Å–∫ UniFarm —Å Neon DB', colors.magenta);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  if (!checkFiles()) {
    log('\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤', colors.red);
    process.exit(1);
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!loadNeonEnv()) {
    log('\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env.neon —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.', colors.yellow);
    
    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏
    const rl = createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const answer = await new Promise(resolve => {
      rl.question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏? (y/n): ', resolve);
    });
    
    rl.close();
    
    if (answer.toLowerCase() !== 'y') {
      log('–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', colors.yellow);
      process.exit(1);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const appProcess = startApp();
  
  // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  log('\nüëâ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C', colors.cyan);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  log(`\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
  process.exit(1);
});