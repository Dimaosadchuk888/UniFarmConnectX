/**
 * –û–¢–õ–ê–î–ö–ê –°–û–ó–î–ê–ù–ò–Ø TON –î–ï–ü–û–ó–ò–¢–ê –° amount = 0
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function debugTonDepositAmount() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –°–û–ó–î–ê–ù–ò–Ø TON –î–ï–ü–û–ó–ò–¢–ê –° amount = 0');
  console.log('='.repeat(45));
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 227
    const { data: latestTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 227)
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(1);
    
    if (latestTx && latestTx.length > 0) {
      const tx = latestTx[0];
      console.log('\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 227:');
      console.log(`   ID: ${tx.id}`);
      console.log(`   amount: "${tx.amount}" (—Ç–∏–ø: ${typeof tx.amount})`);
      console.log(`   amount_ton: "${tx.amount_ton}" (—Ç–∏–ø: ${typeof tx.amount_ton})`);
      console.log(`   amount_uni: "${tx.amount_uni}" (—Ç–∏–ø: ${typeof tx.amount_uni})`);
      console.log(`   currency: "${tx.currency}"`);
      console.log(`   type: "${tx.type}"`);
      console.log(`   description –¥–ª–∏–Ω–∞: ${tx.description.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      if (tx.metadata) {
        console.log('\nüìã –ú–ï–¢–ê–î–ê–ù–ù–´–ï:');
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
        console.log(`   source: ${metadata.source}`);
        console.log(`   wallet_address: ${metadata.wallet_address}`);
        console.log(`   tx_hash –¥–ª–∏–Ω–∞: ${metadata.tx_hash?.length || '–Ω–µ—Ç'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—É–º–º–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        Object.keys(metadata).forEach(key => {
          if (key.includes('amount') || key.includes('value') || key.includes('sum')) {
            console.log(`   ${key}: ${metadata[key]}`);
          }
        });
      }
      
      console.log('\nüîç –ö–õ–Æ–ß–ï–í–ê–Ø –ù–ê–•–û–î–ö–ê:');
      if (tx.amount_ton && parseFloat(tx.amount_ton) > 0) {
        console.log(`‚úÖ amount_ton = ${tx.amount_ton} (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –µ—Å—Ç—å!)`);
        console.log(`‚ùå amount = ${tx.amount} (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 0)`);
        console.log(`üö® –ü–†–û–ë–õ–ï–ú–ê: Frontend —á–∏—Ç–∞–µ—Ç –ø–æ–ª–µ "amount", –∞ Backend –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç "amount_ton"`);
      } else {
        console.log(`‚ùå amount_ton = ${tx.amount_ton} (—Ç–æ–∂–µ 0)`);
        console.log(`üö® –ü–†–û–ë–õ–ï–ú–ê: Backend –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç 0 –≤ amount_ton`);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã transactions
    console.log('\nüóÉÔ∏è –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –¢–ê–ë–õ–ò–¶–´ transactions:');
    
    const { data: schema, error } = await supabase.rpc('get_table_schema', { table_name: 'transactions' });
    if (!error && schema) {
      const amountFields = schema.filter(col => col.column_name.includes('amount'));
      console.log('\n–ü–æ–ª—è amount –≤ —Ç–∞–±–ª–∏—Ü–µ:');
      amountFields.forEach(field => {
        console.log(`   ${field.column_name}: ${field.data_type} (nullable: ${field.is_nullable})`);
      });
    } else {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä–∫—É
      const { data: sampleTx } = await supabase
        .from('transactions')
        .select('*')
        .limit(1);
      
      if (sampleTx && sampleTx.length > 0) {
        console.log('\n–ü–æ–ª—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ –æ–±—Ä–∞–∑—Ü—É):');
        Object.keys(sampleTx[0]).forEach(key => {
          if (key.includes('amount')) {
            console.log(`   ${key}: ${typeof sampleTx[0][key]}`);
          }
        });
      }
    }
    
    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π User 25
    const { data: user25Tx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('currency', 'TON')
      .gt('amount', 0)
      .order('created_at', { ascending: false })
      .limit(1);
    
    if (user25Tx && user25Tx.length > 0) {
      const tx = user25Tx[0];
      console.log('\n‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –° –£–°–ü–ï–®–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ï–ô USER 25:');
      console.log(`   amount: "${tx.amount}" (${typeof tx.amount})`);
      console.log(`   amount_ton: "${tx.amount_ton}" (${typeof tx.amount_ton})`);
      console.log(`   amount_uni: "${tx.amount_uni}" (${typeof tx.amount_uni})`);
      console.log(`   description: ${tx.description.substring(0, 50)}...`);
      
      if (tx.metadata) {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
        console.log(`   metadata.source: ${metadata.source}`);
        console.log(`   metadata.original_type: ${metadata.original_type}`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è amount –≤ –∫–æ–¥–µ
    console.log('\nüîß –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    console.log('–í modules/wallet/service.ts —Å—Ç—Ä–æ–∫–∞ 418:');
    console.log('amount_ton: amount,  // amount –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä');
    console.log('amount_uni: 0,');
    console.log('–ù–æ –ø–æ–ª–µ "amount" –ù–ï –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è!');
    
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ amount = 0:');
    console.log('1. Frontend —á–∏—Ç–∞–µ—Ç –ø–æ–ª–µ "amount", –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è Backend');
    console.log('2. amount_ton –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –Ω–µ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ amount');
    console.log('3. –¢–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç calculated –ø–æ–ª–µ amount –∏–ª–∏ trigger');
    console.log('4. –ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º—ã –º–µ–∂–¥—É Frontend –∏ Backend');
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤ API –¥–ª—è User 227
    console.log('\nüì° –ü–†–û–í–ï–†–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –í–´–ó–û–í–ê API:');
    
    // –ò—â–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–≥–æ –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å
    if (latestTx && latestTx.length > 0) {
      const desc = latestTx[0].description;
      
      if (desc.includes('te6')) {
        console.log('‚úÖ BOC –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ description');
        
        // –ò—â–µ–º —Ü–∏—Ñ—Ä—ã –≤ BOC –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–º–º–æ–π
        const bocData = desc;
        const numberMatches = bocData.match(/\d{1,10}/g);
        if (numberMatches) {
          console.log(`üî¢ –¶–∏—Ñ—Ä—ã –≤ BOC: ${numberMatches.slice(0, 15).join(', ')}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ 22, 220000000 (0.22 TON –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö)
          const possibleAmounts = numberMatches.filter(n => 
            n === '22' || 
            n === '220000000' || 
            n.includes('22') ||
            parseInt(n) > 100000000 && parseInt(n) < 1000000000
          );
          
          if (possibleAmounts.length > 0) {
            console.log(`üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—É–º–º—ã –≤ BOC: ${possibleAmounts.join(', ')}`);
          }
        }
      }
    }
    
    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('1. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ "amount" –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('2. –í–æ–∑–º–æ–∂–Ω–æ Frontend –æ–∂–∏–¥–∞–µ—Ç "amount", –∞ Backend –∑–∞–ø–æ–ª–Ω—è–µ—Ç "amount_ton"');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å—É–º–º–∞ –∏–∑ BOC –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ amount');
    console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ parseFloat(amount) –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
  }
}

debugTonDepositAmount().catch(console.error);