/**
 * –ê–ù–ê–õ–ò–ó –ö–û–î–ê TON BOOST –°–ò–°–¢–ï–ú–´ - 25 –∏—é–ª—è 2025
 * –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∫–æ–¥–µ
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª–µ–π –∏–∑ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function analyzeCodeDatabaseMismatch() {
    console.log('\nüîß –ê–ù–ê–õ–ò–ó –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô –ö–û–î–ê –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('=' .repeat(70));
    
    try {
        // –†–ê–ó–î–ï–õ 1: –ê–Ω–∞–ª–∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö vs —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ users
        console.log('\nüìä –†–ê–ó–î–ï–õ 1: –ü–û–õ–Ø USERS - –û–ñ–ò–î–ê–ï–ú–´–ï VS –†–ï–ê–õ–¨–ù–´–ï');
        console.log('-' .repeat(60));
        
        const { data: userSample, error: userError } = await supabase
            .from('users')
            .select('*')
            .gt('ton_boost_package', 0)
            .limit(1)
            .single();
            
        if (userSample) {
            console.log('\nüîç 1.1 –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô TON BOOST –í USERS:');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ–ª–µ–π boost
            const boostFieldVariations = [
                'boost_package_level',    // –û–∂–∏–¥–∞–µ–º–æ–µ –≤ –¢–ó
                'ton_boost_package',      // –†–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ
                'ton_boost_package_id',   // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                'ton_boost_active',       // –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'ton_boost_rate',         // –°—Ç–∞–≤–∫–∞
                'ton_boost_expires_at'    // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            ];
            
            boostFieldVariations.forEach(field => {
                if (userSample.hasOwnProperty(field)) {
                    console.log(`   ‚úÖ ${field}: ${userSample[field]} (${typeof userSample[field]})`);
                } else {
                    console.log(`   ‚ùå ${field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –±–∞–ª–∞–Ω—Å–∞ TON
            const tonBalanceFields = [
                'ton_balance',           // –û–∂–∏–¥–∞–µ–º–æ–µ –≤ –¢–ó
                'balance_ton',           // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                'ton_farming_balance',   // –§–∞—Ä–º–∏–Ω–≥ –±–∞–ª–∞–Ω—Å
                'ton_farming_rate'       // –§–∞—Ä–º–∏–Ω–≥ —Å—Ç–∞–≤–∫–∞
            ];
            
            console.log('\nüîç 1.2 –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô TON –ë–ê–õ–ê–ù–°–ê –í USERS:');
            tonBalanceFields.forEach(field => {
                if (userSample.hasOwnProperty(field)) {
                    console.log(`   ‚úÖ ${field}: ${userSample[field]} (${typeof userSample[field]})`);
                } else {
                    console.log(`   ‚ùå ${field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
            });
        }
        
        // –†–ê–ó–î–ï–õ 2: –ê–Ω–∞–ª–∏–∑ ton_farming_data –ø–æ–ª–µ–π
        console.log('\nüìä –†–ê–ó–î–ï–õ 2: –ü–û–õ–Ø TON_FARMING_DATA - –û–ñ–ò–î–ê–ï–ú–´–ï VS –†–ï–ê–õ–¨–ù–´–ï');
        console.log('-' .repeat(60));
        
        const { data: farmingSample, error: farmingError } = await supabase
            .from('ton_farming_data')
            .select('*')
            .limit(1)
            .single();
            
        if (farmingSample) {
            console.log('\nüîç 2.1 –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô TON_FARMING_DATA:');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –∏–∑ –¢–ó
            const expectedFarmingFields = [
                { field: 'user_id', expected: 'string', description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                { field: 'amount', expected: 'number', description: '–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ (–æ–∂–∏–¥–∞–µ–º–æ–µ)' },
                { field: 'farming_balance', expected: 'number', description: '–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ (—Ä–µ–∞–ª—å–Ω–æ–µ)' },
                { field: 'source', expected: 'string', description: '–ò—Å—Ç–æ—á–Ω–∏–∫ (–æ–∂–∏–¥–∞–µ–º–æ–µ)' },
                { field: 'boost_package_id', expected: 'number', description: 'ID –ø–∞–∫–µ—Ç–∞ (—Ä–µ–∞–ª—å–Ω–æ–µ)' },
                { field: 'is_active', expected: 'boolean', description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ–∂–∏–¥–∞–µ–º–æ–µ)' },
                { field: 'boost_active', expected: 'boolean', description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–µ–∞–ª—å–Ω–æ–µ)' },
                { field: 'start_time', expected: 'string', description: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–æ–∂–∏–¥–∞–µ–º–æ–µ)' },
                { field: 'farming_start_timestamp', expected: 'string', description: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ä–µ–∞–ª—å–Ω–æ–µ)' },
                { field: 'package_level', expected: 'number', description: '–£—Ä–æ–≤–µ–Ω—å –ø–∞–∫–µ—Ç–∞ (–æ–∂–∏–¥–∞–µ–º–æ–µ)' }
            ];
            
            expectedFarmingFields.forEach(({ field, expected, description }) => {
                if (farmingSample.hasOwnProperty(field)) {
                    const actualType = typeof farmingSample[field];
                    const typeMatch = actualType === expected ? '‚úÖ' : '‚ö†Ô∏è';
                    console.log(`   ${typeMatch} ${field}: ${farmingSample[field]} (${actualType}) - ${description}`);
                } else {
                    console.log(`   ‚ùå ${field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢ - ${description}`);
                }
            });
        }
        
        // –†–ê–ó–î–ï–õ 3: –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_boost_package
        console.log('\nüìä –†–ê–ó–î–ï–õ 3: –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ï–ô –¢–ê–ë–õ–ò–¶–´ USER_BOOST_PACKAGE');
        console.log('-' .repeat(60));
        
        try {
            const { data: boostPackageData, error: boostPackageError } = await supabase
                .from('user_boost_package')
                .select('*')
                .limit(1);
                
            if (boostPackageError) {
                console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê USER_BOOST_PACKAGE –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢');
                console.log('üìù –û–ñ–ò–î–ê–ï–ú–´–ï –ü–û–õ–Ø –ò–ó –¢–ó:');
                console.log('   - user_id: INTEGER');
                console.log('   - level: INTEGER');
                console.log('   - timestamp: TIMESTAMP');
                console.log('   - source: STRING');
                console.log('\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
                console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è users.ton_boost_package –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã');
                console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ton_farming_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
            }
        } catch (error) {
            console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê USER_BOOST_PACKAGE –ù–ï–î–û–°–¢–£–ü–ù–ê');
        }
        
        // –†–ê–ó–î–ï–õ 4: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        console.log('\nüìä –†–ê–ó–î–ï–õ 4: –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í');
        console.log('-' .repeat(60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É –∏ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫—É
        const { data: recentPurchase, error: purchaseError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
            
        if (recentPurchase) {
            console.log('\nüîç 4.1 –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ö–£–ü–ö–ê TON BOOST:');
            console.log(`   üí∞ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${recentPurchase.id}`);
            console.log(`   üë§ User ID: ${recentPurchase.user_id}`);
            console.log(`   üìÖ –í—Ä–µ–º—è: ${new Date(recentPurchase.created_at).toLocaleString('ru-RU')}`);
            console.log(`   üí∏ –°—É–º–º–∞: ${recentPurchase.amount} ${recentPurchase.currency}`);
            
            if (recentPurchase.metadata) {
                console.log('\nüîó METADATA –ü–û–ö–£–ü–ö–ò:');
                Object.keys(recentPurchase.metadata).forEach(key => {
                    console.log(`   - ${key}: ${recentPurchase.metadata[key]}`);
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π farming –∑–∞–ø–∏—Å–∏
            const { data: correspondingFarming, error: farmingCheckError } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', recentPurchase.user_id.toString())
                .order('created_at', { ascending: false })
                .limit(1)
                .single();
                
            console.log('\nüîç 4.2 –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ê–Ø FARMING –ó–ê–ü–ò–°–¨:');
            if (correspondingFarming) {
                console.log('   ‚úÖ FARMING –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:');
                console.log(`      üì¶ Package ID: ${correspondingFarming.boost_package_id}`);
                console.log(`      üí∞ Farming Balance: ${correspondingFarming.farming_balance}`);
                console.log(`      ‚ö° Rate: ${correspondingFarming.farming_rate}`);
                console.log(`      üîÑ Active: ${correspondingFarming.boost_active}`);
                console.log(`      üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(correspondingFarming.created_at).toLocaleString('ru-RU')}`);
                
                // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏
                const purchaseTime = new Date(recentPurchase.created_at).getTime();
                const farmingTime = new Date(correspondingFarming.created_at).getTime();
                const timeDiff = Math.abs(purchaseTime - farmingTime) / 1000;
                
                console.log(`      ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: ${timeDiff.toFixed(1)} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–æ–π –∏ farming`);
                
                if (timeDiff < 60) {
                    console.log('      ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢');
                } else {
                    console.log('      ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞');
                }
            } else {
                console.log('   ‚ùå FARMING –ó–ê–ü–ò–°–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê');
                console.log('   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∫—É–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –¥–µ–ø–æ–∑–∏—Ç!');
            }
        }
        
        // –†–ê–ó–î–ï–õ 5: –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        console.log('\nüìä –†–ê–ó–î–ï–õ 5: –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò');
        console.log('-' .repeat(60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        const { data: schedulerCandidates, error: schedulerError } = await supabase
            .from('ton_farming_data')
            .select('user_id, farming_balance, boost_active, farming_rate, created_at')
            .eq('boost_active', true)
            .gt('farming_balance', 0);
            
        console.log('\nüîç 5.1 –ö–ê–ù–î–ò–î–ê–¢–´ –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
        console.log(`   üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö farming –∑–∞–ø–∏—Å–µ–π: ${schedulerCandidates?.length || 0}`);
        
        if (schedulerCandidates && schedulerCandidates.length > 0) {
            console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:');
            schedulerCandidates.slice(0, 5).forEach(record => {
                console.log(`   User ${record.user_id}: Balance ${record.farming_balance}, Rate ${record.farming_rate}`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å users —Ç–∞–±–ª–∏—Ü–µ–π
            console.log('\nüîç 5.2 –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –° USERS –¢–ê–ë–õ–ò–¶–ï–ô:');
            const userIds = schedulerCandidates.map(r => parseInt(r.user_id)).slice(0, 5);
            
            const { data: correspondingUsers, error: usersCheckError } = await supabase
                .from('users')
                .select('id, ton_boost_package, ton_boost_rate')
                .in('id', userIds);
                
            if (correspondingUsers) {
                correspondingUsers.forEach(user => {
                    const farmingRecord = schedulerCandidates.find(f => f.user_id === user.id.toString());
                    if (farmingRecord) {
                        const rateMatch = Math.abs(user.ton_boost_rate - farmingRecord.farming_rate) < 0.001;
                        const rateSymbol = rateMatch ? '‚úÖ' : '‚ö†Ô∏è';
                        console.log(`   User ${user.id}: ${rateSymbol} Package ${user.ton_boost_package}, Rate users=${user.ton_boost_rate} farming=${farmingRecord.farming_rate}`);
                    }
                });
            }
        }
        
        // –†–ê–ó–î–ï–õ 6: –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        console.log('\nüìä –†–ê–ó–î–ï–õ 6: –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´ –ü–û –ê–†–•–ò–¢–ï–ö–¢–£–†–ï');
        console.log('-' .repeat(60));
        
        console.log('\n‚úÖ 6.1 –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û:');
        console.log('   ‚úÖ transactions —Ç–∞–±–ª–∏—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ BOOST_PURCHASE');
        console.log('   ‚úÖ users —Ç–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å ton_boost_package –∏ ton_boost_rate');
        console.log('   ‚úÖ ton_farming_data —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–ª—è farming –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        console.log('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω—ã–º farming –∑–∞–ø–∏—Å—è–º');
        
        console.log('\n‚ö†Ô∏è 6.2 –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:');
        console.log('   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ user_boost_package (–æ–∂–∏–¥–∞–ª–∞—Å—å –≤ –¢–ó)');
        console.log('   ‚ö†Ô∏è –ü–æ–ª–µ boost_package_level –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ users (–æ–∂–∏–¥–∞–ª–æ—Å—å –≤ –¢–ó)');
        console.log('   ‚ö†Ô∏è –ü–æ–ª—è amount, source, is_active –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ ton_farming_data');
        console.log('   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π (farming_balance –≤–º–µ—Å—Ç–æ amount)');
        
        console.log('\n‚ùå 6.3 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (–µ—Å–ª–∏ –µ—Å—Ç—å):');
        const activeFarmingCount = schedulerCandidates?.length || 0;
        const { data: activeUsersCount } = await supabase
            .from('users')
            .select('id', { count: 'exact' })
            .gt('ton_boost_package', 0);
        
        if (activeFarmingCount === 0) {
            console.log('   ‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ê–ö–¢–ò–í–ù–´–ï FARMING –ó–ê–ü–ò–°–ò');
        } else {
            console.log('   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ farming –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }
        
        console.log('\nüí° 6.4 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('   1. –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–π –∏–∑ –¢–ó');
        console.log('   2. ton_farming_data —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é user_boost_package');
        console.log('   3. –¢–µ–∫—É—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç farming –¥–µ–ø–æ–∑–∏—Ç—ã');
        console.log('   4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeCodeDatabaseMismatch().then(() => {
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–æ–¥–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});