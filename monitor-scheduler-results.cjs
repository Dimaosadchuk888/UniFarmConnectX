#!/usr/bin/env node

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

const { supabase } = require('./core/supabase');

async function monitorSchedulerResults() {
  console.log('üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    const periods = [
      { name: '5 –º–∏–Ω—É—Ç', minutes: 5 },
      { name: '15 –º–∏–Ω—É—Ç', minutes: 15 },
      { name: '30 –º–∏–Ω—É—Ç', minutes: 30 },
      { name: '60 –º–∏–Ω—É—Ç', minutes: 60 }
    ];
    
    console.log('üîç –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–í–ê–õ–û–í –ü–û –ü–ï–†–ò–û–î–ê–ú:\n');
    
    for (const period of periods) {
      const cutoffTime = new Date(Date.now() - period.minutes * 60 * 1000).toISOString();
      
      const { data: transactions, error } = await supabase
        .from('transactions')
        .select('id, created_at, user_id, amount_ton, amount_uni, type')
        .eq('type', 'FARMING_REWARD')
        .gte('created_at', cutoffTime)
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ${period.name}:`, error.message);
        continue;
      }
      
      const count = transactions?.length || 0;
      const expectedCount = Math.floor(period.minutes / 5); // –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      
      console.log(`üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${period.name}:`);
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${count} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ~${expectedCount})`);
      
      if (count >= 2) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        const intervals = [];
        for (let i = 0; i < transactions.length - 1; i++) {
          const current = new Date(transactions[i].created_at);
          const next = new Date(transactions[i + 1].created_at);
          const diffMinutes = (current - next) / (1000 * 60);
          intervals.push(diffMinutes);
        }
        
        if (intervals.length > 0) {
          const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
          const minInterval = Math.min(...intervals);
          const maxInterval = Math.max(...intervals);
          
          console.log(`   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${avgInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
          console.log(`   –ú–∏–Ω/–ú–∞–∫—Å: ${minInterval.toFixed(2)} - ${maxInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
          
          // –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          if (avgInterval >= 4.5 && avgInterval <= 5.5) {
            console.log(`   ‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–û (–±–ª–∏–∑–∫–æ –∫ 5 –º–∏–Ω—É—Ç–∞–º)`);
          } else if (avgInterval < 2) {
            console.log(`   üö® –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
          } else {
            console.log(`   ‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–ò–ï –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö 5 –º–∏–Ω—É—Ç`);
          }
        }
      } else if (count === 0 && period.minutes >= 10) {
        console.log(`   ‚ö†Ô∏è –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–≤–æ–∑–º–æ–∂–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)`);
      }
      
      console.log('');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('üîç –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• 10 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:\n');
    
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('id, created_at, user_id, amount_ton, amount_uni, type, metadata')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (recentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError.message);
    } else if (recentTx && recentTx.length > 0) {
      recentTx.forEach((tx, index) => {
        const time = new Date(tx.created_at).toLocaleTimeString('ru-RU');
        const tonAmount = parseFloat(tx.amount_ton || '0');
        const uniAmount = parseFloat(tx.amount_uni || '0');
        
        let source = 'Unknown';
        if (tonAmount > 0 && uniAmount === 0) {
          source = 'TON Boost';
        } else if (uniAmount > 0 && tonAmount === 0) {
          source = 'UNI Farming';
        } else if (tonAmount > 0 && uniAmount > 0) {
          source = 'Mixed';
        }
        
        console.log(`${index + 1}. ID ${tx.id} | User ${tx.user_id} | ${time}`);
        console.log(`   ${source}: TON=${tx.amount_ton}, UNI=${tx.amount_uni}`);
        
        if (tx.metadata?.original_type) {
          console.log(`   Type: ${tx.metadata.original_type}`);
        }
      });
    } else {
      console.log('‚ùå –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n');
    
    // UNI Farming –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const { data: uniFarmers, error: uniError } = await supabase
      .from('users')
      .select('id, username, uni_farming_active, uni_deposit_amount')
      .eq('uni_farming_active', true)
      .gt('uni_deposit_amount', 0);
      
    if (!uniError && uniFarmers) {
      console.log(`üìä UNI Farming –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniFarmers.length}`);
      if (uniFarmers.length > 0) {
        const totalDeposit = uniFarmers.reduce((sum, user) => sum + parseFloat(user.uni_deposit_amount || '0'), 0);
        console.log(`   –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${totalDeposit.toLocaleString()} UNI`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${(totalDeposit / uniFarmers.length).toLocaleString()} UNI`);
      }
    }
    
    // TON Boost –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const { data: tonUsers, error: tonError } = await supabase
      .from('users')
      .select('id, username, balance_ton, ton_boost_package')
      .not('ton_boost_package', 'is', null)
      .gte('balance_ton', 10);
      
    if (!tonError && tonUsers) {
      console.log(`üìä TON Boost –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${tonUsers.length}`);
      if (tonUsers.length > 0) {
        const totalBalance = tonUsers.reduce((sum, user) => sum + parseFloat(user.balance_ton || '0'), 0);
        console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalBalance.toFixed(2)} TON`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${(totalBalance / tonUsers.length).toFixed(2)} TON`);
      }
    }
    
    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüìä –û–¶–ï–ù–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 10 –º–∏–Ω—É—Ç
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    const { data: recentTxCount } = await supabase
      .from('transactions')
      .select('id', { count: 'exact' })
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', tenMinutesAgo);
      
    const recentCount = recentTxCount?.length || 0;
    
    if (recentCount === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç');
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
    } else if (recentCount <= 4) { // –ú–∞–∫—Å–∏–º—É–º 2 —Ü–∏–∫–ª–∞ –ø–æ 5 –º–∏–Ω—É—Ç
      console.log('‚úÖ –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨');
      console.log(`   ${recentCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 10 –º–∏–Ω—É—Ç - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é`);
    } else {
      console.log('üö® –ü–û–í–´–®–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨');
      console.log(`   ${recentCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 10 –º–∏–Ω—É—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ`);
    }
    
    console.log('\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitorSchedulerResults();