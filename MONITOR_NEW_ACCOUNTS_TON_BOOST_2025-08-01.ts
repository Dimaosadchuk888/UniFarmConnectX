// –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í 304-307: TON BOOST –ò –î–ï–ü–û–ó–ò–¢–´
// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –Ω–∞—à–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface UserAnalysis {
  userId: number;
  telegramId: number;
  username: string;
  createdAt: string;
  balanceUni: string;
  balanceTon: string;
  tonBoostActive: boolean;
  transactions: any[];
  tonBoostPackages: any[];
  transactionSummary: {
    totalTransactions: number;
    tonDeposits: number;
    tonWithdrawals: number;
    boostPurchases: number;
    farmingRewards: number;
    referralRewards: number;
  };
}

async function analyzeUser(userId: number): Promise<UserAnalysis | null> {
  try {
    // 1. –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (userError || !user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, userError?.message);
      return null;
    }

    // 2. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: true });

    if (txError) {
      console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${userId}:`, txError.message);
    }

    // 3. TON Boost –ø–∞–∫–µ—Ç—ã
    const { data: tonBoostPackages, error: boostError } = await supabase
      .from('ton_boost_purchases')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: true });

    if (boostError) {
      console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON Boost –¥–ª—è ${userId}:`, boostError.message);
    }

    // 4. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const txList = transactions || [];
    const transactionSummary = {
      totalTransactions: txList.length,
      tonDeposits: txList.filter(tx => tx.type === 'TON_DEPOSIT').length,
      tonWithdrawals: txList.filter(tx => tx.type === 'TON_WITHDRAWAL').length,
      boostPurchases: txList.filter(tx => tx.type === 'TON_BOOST_PURCHASE').length,
      farmingRewards: txList.filter(tx => tx.type === 'FARMING_REWARD').length,
      referralRewards: txList.filter(tx => tx.type === 'REFERRAL_REWARD').length,
    };

    return {
      userId: user.id,
      telegramId: user.telegram_id,
      username: user.username || 'N/A',
      createdAt: user.created_at,
      balanceUni: user.balance_uni,
      balanceTon: user.balance_ton,
      tonBoostActive: user.ton_boost_active || false,
      transactions: txList,
      tonBoostPackages: tonBoostPackages || [],
      transactionSummary
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
}

async function checkTonBoostIntegrity(analysis: UserAnalysis): Promise<void> {
  console.log(`\nüîç –ê–ù–ê–õ–ò–ó TON BOOST –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${analysis.userId}:`);

  if (analysis.tonBoostPackages.length === 0) {
    console.log('   üì¶ TON Boost –ø–∞–∫–µ—Ç—ã: –ù–µ—Ç –ø–æ–∫—É–ø–æ–∫');
    return;
  }

  console.log(`   üì¶ TON Boost –ø–∞–∫–µ—Ç—ã: ${analysis.tonBoostPackages.length} –ø–æ–∫—É–ø–æ–∫`);
  
  for (const boost of analysis.tonBoostPackages) {
    console.log(`      –ü–∞–∫–µ—Ç ${boost.package_type}: ${boost.amount_ton} TON, —Å—Ç–∞—Ç—É—Å: ${boost.status}`);
    console.log(`      –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${boost.created_at}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TON_BOOST_PURCHASE
    const correspondingTx = analysis.transactions.find(tx => 
      tx.type === 'TON_BOOST_PURCHASE' && 
      Math.abs(new Date(tx.created_at).getTime() - new Date(boost.created_at).getTime()) < 60000 // –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏–Ω—É—Ç—ã
    );

    if (correspondingTx) {
      console.log(`      ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ID ${correspondingTx.id}`);
    } else {
      console.log(`      ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TON_BOOST_PURCHASE!`);
    }
  }
}

async function checkDepositIntegrity(analysis: UserAnalysis): Promise<void> {
  console.log(`\nüí∞ –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${analysis.userId}:`);

  const currentTonBalance = parseFloat(analysis.balanceTon);
  const tonDeposits = analysis.transactions.filter(tx => tx.type === 'TON_DEPOSIT');
  const tonWithdrawals = analysis.transactions.filter(tx => tx.type === 'TON_WITHDRAWAL');
  const tonBoostPurchases = analysis.transactions.filter(tx => tx.type === 'TON_BOOST_PURCHASE');

  console.log(`   –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${currentTonBalance} TON`);
  console.log(`   TON –¥–µ–ø–æ–∑–∏—Ç—ã: ${tonDeposits.length}`);
  console.log(`   TON –≤—ã–≤–æ–¥—ã: ${tonWithdrawals.length}`);
  console.log(`   TON Boost –ø–æ–∫—É–ø–∫–∏: ${tonBoostPurchases.length}`);

  if (tonDeposits.length > 0) {
    console.log(`   üì• –î–ï–ü–û–ó–ò–¢–´:`);
    tonDeposits.forEach(tx => {
      console.log(`      ${tx.amount_ton} TON - ${tx.created_at} - ${tx.description || 'N/A'}`);
    });
  }

  if (tonBoostPurchases.length > 0) {
    console.log(`   üöÄ TON BOOST –ü–û–ö–£–ü–ö–ò:`);
    tonBoostPurchases.forEach(tx => {
      console.log(`      ${tx.amount_ton} TON - ${tx.created_at} - ${tx.description || 'N/A'}`);
    });
  }

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  const totalDeposits = tonDeposits.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
  const totalWithdrawals = tonWithdrawals.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
  const totalBoostSpent = tonBoostPurchases.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
  
  const expectedBalance = totalDeposits - totalWithdrawals - totalBoostSpent;
  const balanceDifference = Math.abs(currentTonBalance - expectedBalance);

  console.log(`   üìä –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê:`);
  console.log(`      –î–µ–ø–æ–∑–∏—Ç—ã: +${totalDeposits} TON`);
  console.log(`      –í—ã–≤–æ–¥—ã: -${totalWithdrawals} TON`);
  console.log(`      Boost –ø–æ–∫—É–ø–∫–∏: -${totalBoostSpent} TON`);
  console.log(`      –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${expectedBalance} TON`);
  console.log(`      –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${currentTonBalance} TON`);
  console.log(`      –†–∞–∑–Ω–∏—Ü–∞: ${balanceDifference} TON`);

  if (balanceDifference > 0.001) {
    console.log(`      ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê! –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.001 TON`);
  } else {
    console.log(`      ‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º`);
  }
}

async function checkTransactionHistory(analysis: UserAnalysis): Promise<void> {
  console.log(`\nüìú –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${analysis.userId}:`);
  
  if (analysis.transactions.length === 0) {
    console.log('   üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç');
    return;
  }

  console.log(`   üìù –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${analysis.transactions.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const typeGroups = analysis.transactions.reduce((groups, tx) => {
    const type = tx.type;
    if (!groups[type]) groups[type] = [];
    groups[type].push(tx);
    return groups;
  }, {});

  for (const [type, txs] of Object.entries(typeGroups)) {
    console.log(`      ${type}: ${(txs as any[]).length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é
  console.log(`   ‚è∞ –•–†–û–ù–û–õ–û–ì–ò–Ø (–ø–µ—Ä–≤—ã–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
  analysis.transactions.slice(0, 5).forEach(tx => {
    console.log(`      ${tx.created_at} - ${tx.type} - ${tx.amount_ton || tx.amount_uni || '0'} ${tx.amount_ton ? 'TON' : 'UNI'}`);
  });
}

async function main(): Promise<void> {
  console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í: TON BOOST –ò –î–ï–ü–û–ó–ò–¢–´');
  console.log('='.repeat(80));
  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã 304-307 –ø–æ—Å–ª–µ –Ω–∞—à–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
  console.log('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  console.log('');

  const newUserIds = [304, 305, 306, 307];
  
  for (const userId of newUserIds) {
    console.log('‚ïê'.repeat(60));
    console.log(`üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ${userId}`);
    console.log('‚ïê'.repeat(60));

    const analysis = await analyzeUser(userId);
    
    if (!analysis) {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      continue;
    }

    console.log(`üìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:`);
    console.log(`   Telegram ID: ${analysis.telegramId}`);
    console.log(`   Username: ${analysis.username}`);
    console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${analysis.createdAt}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${analysis.balanceUni}`);
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${analysis.balanceTon}`);
    console.log(`   TON Boost –∞–∫—Ç–∏–≤–µ–Ω: ${analysis.tonBoostActive ? '–î–ê' : '–ù–ï–¢'}`);

    await checkTransactionHistory(analysis);
    await checkDepositIntegrity(analysis);
    await checkTonBoostIntegrity(analysis);

    console.log('\n');
  }

  console.log('‚ïê'.repeat(60));
  console.log('üéØ –û–ë–©–ò–ï –í–´–í–û–î–´');
  console.log('‚ïê'.repeat(60));
  console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.');
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main().catch(console.error);