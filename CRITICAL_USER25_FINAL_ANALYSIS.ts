/**
 * üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ TON (User ID 25)
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */

import { supabase } from './core/supabaseClient';
import { logger } from './core/logger';

async function finalAnalysisUser25() {
  logger.info('üîç [FINAL ANALYSIS] –ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ User ID 25');
  
  const supabaseClient = supabase;
  const USER_ID = 25;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤
    const { data: transactions, error: transError } = await supabaseClient
      .from('transactions')
      .select('*')
      .eq('user_id', USER_ID)
      .eq('currency', 'TON')
      .gte('created_at', new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (transError || !transactions) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transError);
      return;
    }

    console.log('\nüéØ === –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò ===');
    console.log(`–ù–∞–π–¥–µ–Ω–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);

    // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const boostPurchases = transactions.filter(tx => tx.type === 'BOOST_PURCHASE');
    const farmingRewards = transactions.filter(tx => tx.type === 'FARMING_REWARD');
    const deposits = transactions.filter(tx => tx.type === 'DEPOSIT');

    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`üí≥ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${boostPurchases.length}`);
    console.log(`üåæ FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${farmingRewards.length}`);
    console.log(`üí∞ DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${deposits.length}`);

    // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó BOOST –ü–û–ö–£–ü–û–ö:');
    
    boostPurchases.forEach((purchase, index) => {
      console.log(`\n--- –ü–æ–∫—É–ø–∫–∞ ${index + 1} ---`);
      console.log(`ID: ${purchase.id}`);
      console.log(`–í—Ä–µ–º—è: ${purchase.created_at}`);
      console.log(`–°—É–º–º–∞: ${purchase.amount} TON`);
      console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
      
      // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–∫–Ω–µ +/- 5 –º–∏–Ω—É—Ç
      const purchaseTime = new Date(purchase.created_at).getTime();
      const relatedRewards = farmingRewards.filter(reward => {
        const rewardTime = new Date(reward.created_at).getTime();
        return Math.abs(rewardTime - purchaseTime) <= 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
      });
      
      console.log(`–°–≤—è–∑–∞–Ω–Ω—ã—Ö FARMING_REWARD: ${relatedRewards.length}`);
      relatedRewards.forEach(reward => {
        console.log(`  -> ${reward.amount} TON: ${reward.description}`);
        console.log(`     Metadata: ${JSON.stringify(reward.metadata)}`);
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabaseClient
      .from('users')
      .select('balance_ton, ton_boost_package, ton_boost_package_id')
      .eq('id', USER_ID)
      .single();

    if (!userError && userData) {
      console.log(`\nüë§ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°: ${userData.balance_ton} TON`);
      console.log(`üöÄ –ê–ö–¢–ò–í–ù–´–ô BOOST: ${userData.ton_boost_package} (ID: ${userData.ton_boost_package_id})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data
    const { data: farmingData, error: farmingError } = await supabaseClient
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', USER_ID)
      .order('created_at', { ascending: false });

    if (!farmingError && farmingData) {
      console.log(`\nüåæ TON FARMING –ó–ê–ü–ò–°–ï–ô: ${farmingData.length}`);
      farmingData.forEach((farm, index) => {
        console.log(`${index + 1}. Package ID: ${farm.boost_package_id}, –î–µ–ø–æ–∑–∏—Ç: ${farm.deposit_amount} TON, –ê–∫—Ç–∏–≤–µ–Ω: ${farm.is_active}`);
      });
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–ê
    console.log('\nüö® === –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–ê ===');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (5-–º–∏–Ω—É—Ç–Ω—ã–µ –æ–∫–Ω–∞)
    const timeGroups = new Map();
    transactions.forEach(tx => {
      const timestamp = new Date(tx.created_at).getTime();
      const timeWindow = Math.floor(timestamp / (5 * 60 * 1000)) * (5 * 60 * 1000);
      
      if (!timeGroups.has(timeWindow)) {
        timeGroups.set(timeWindow, []);
      }
      timeGroups.get(timeWindow).push(tx);
    });

    let suspiciousPatterns = 0;
    timeGroups.forEach((txGroup, timeWindow) => {
      if (txGroup.length >= 2) {
        const hasBoostPurchase = txGroup.some(tx => tx.type === 'BOOST_PURCHASE');
        const hasFarmingReward = txGroup.some(tx => tx.type === 'FARMING_REWARD');
        const hasDeposit = txGroup.some(tx => tx.type === 'DEPOSIT');
        
        if (hasBoostPurchase && (hasFarmingReward || hasDeposit)) {
          suspiciousPatterns++;
          console.log(`\n‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù #${suspiciousPatterns} –≤ ${new Date(timeWindow).toISOString()}:`);
          
          txGroup.forEach(tx => {
            const amount = parseFloat(tx.amount) || 0;
            const sign = amount >= 0 ? '+' : '';
            console.log(`   ${tx.type}: ${sign}${tx.amount} TON - ${tx.description}`);
            
            if (tx.metadata) {
              const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
              if (metadata.original_type) {
                console.log(`     Original Type: ${metadata.original_type}`);
              }
              if (metadata.transaction_source) {
                console.log(`     Source: ${metadata.transaction_source}`);
              }
            }
          });
        }
      }
    });

    // –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´
    console.log('\nüéØ === –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ ===');
    console.log(`üî¥ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${suspiciousPatterns}`);
    
    if (suspiciousPatterns > 0) {
      console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê:');
      console.log('   ‚Ä¢ –ü–æ—Å–ª–µ BOOST_PURCHASE –ø–æ—è–≤–ª—è—é—Ç—Å—è FARMING_REWARD –æ–ø–µ—Ä–∞—Ü–∏–∏');
      console.log('   ‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π "–≤–æ–∑–≤—Ä–∞—Ç–∞" TON');
      console.log('   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }

    // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ ton_farming_data
    if (farmingData) {
      const packageCounts = new Map();
      farmingData.forEach(farm => {
        const key = farm.boost_package_id;
        packageCounts.set(key, (packageCounts.get(key) || 0) + 1);
      });
      
      console.log('\nüîç –î–£–ë–õ–ò–ö–ê–¢–´ –í TON_FARMING_DATA:');
      packageCounts.forEach((count, packageId) => {
        if (count > 1) {
          console.log(`   Package ${packageId}: ${count} –∑–∞–ø–∏—Å–µ–π (–î–£–ë–õ–ò–ö–ê–¢!)`);
        }
      });
    }

    logger.info('‚úÖ [FINAL ANALYSIS] –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    logger.error('‚ùå [FINAL ANALYSIS] –û—à–∏–±–∫–∞:', error);
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
finalAnalysisUser25().catch(console.error);