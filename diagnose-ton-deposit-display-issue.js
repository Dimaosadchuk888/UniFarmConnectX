import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.DATABASE_URL?.replace('postgresql://', 'https://').replace(':5432', '') || 'https://localhost';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'dummy';
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseTonDepositIssue() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í - –ü–†–û–ë–õ–ï–ú–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø');
  console.log('=' * 60);
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ö–µ—à–µ–º
  const targetHash = '00a1ba3c2614f4d65cc346805feea960';
  
  console.log(`\n1Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –•–ï–®–ï–ú: ${targetHash}`);
  const { data: transactions, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .or(`description.ilike.%${targetHash}%,metadata->>tx_hash.eq.${targetHash}`)
    .order('created_at', { ascending: false });
    
  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    return;
  }
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);
  
  if (transactions && transactions.length > 0) {
    transactions.forEach((tx, index) => {
      console.log(`\nüìù –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø #${index + 1}:`);
      console.log(`   ID: ${tx.id}`);
      console.log(`   User ID: ${tx.user_id}`);
      console.log(`   –¢–∏–ø: ${tx.type} ‚ùå –ü–†–û–ë–õ–ï–ú–ê –ó–î–ï–°–¨!`);
      console.log(`   –í–∞–ª—é—Ç–∞: ${tx.currency}`);
      console.log(`   –°—É–º–º–∞ TON: ${tx.amount_ton}`);
      console.log(`   –°—É–º–º–∞ UNI: ${tx.amount_uni}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata, null, 2)}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${tx.created_at}`);
    });
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å User #25 (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
  console.log(`\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê USER #25:`);
  const { data: user25, error: userError } = await supabase
    .from('users')
    .select('id, balance_ton, balance_uni')
    .eq('id', 25)
    .single();
    
  if (userError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
  } else {
    console.log(`üí∞ User #25 –±–∞–ª–∞–Ω—Å TON: ${user25.balance_ton}`);
    console.log(`üí∞ User #25 –±–∞–ª–∞–Ω—Å UNI: ${user25.balance_uni}`);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
  console.log(`\n3Ô∏è‚É£ –í–°–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –°–ò–°–¢–ï–ú–ï:`);
  const { data: tonTxs, error: tonError } = await supabase
    .from('transactions')
    .select('*')
    .or('currency.eq.TON,amount_ton.gt.0')
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (tonError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError.message);
  } else {
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTxs?.length || 0}`);
    
    tonTxs?.forEach((tx, index) => {
      console.log(`\nüìù TON –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø #${index + 1}:`);
      console.log(`   ID: ${tx.id}, User: ${tx.user_id}`);
      console.log(`   –¢–∏–ø: ${tx.type} ${tx.type !== 'DEPOSIT' ? '‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô –¢–ò–ü!' : '‚úÖ'}`);
      console.log(`   –°—É–º–º–∞: ${tx.amount_ton} TON`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description?.substring(0, 50)}...`);
    });
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î
  console.log(`\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
  const { data: typeStats, error: statsError } = await supabase
    .from('transactions')
    .select('type, currency, count(*)')
    .not('amount_ton', 'is', null)
    .gte('amount_ton', 0.001);
    
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–û–í –î–õ–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
  console.log('   –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: DEPOSIT');
  console.log('   –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–∏–ø: UNI_FARMING –∏–ª–∏ –¥—Ä—É–≥–∏–µ');
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ enum —Ç–∏–ø–æ–≤ –≤ –ë–î
  console.log(`\n5Ô∏è‚É£ –î–û–°–¢–£–ü–ù–´–ï –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ë–î:`);
  const { data: enumValues, error: enumError } = await supabase
    .rpc('get_enum_values', { enum_name: 'transaction_type' })
    .single();
    
  if (enumError) {
    console.log('   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å enum –∑–Ω–∞—á–µ–Ω–∏—è');
  } else {
    console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: ${enumValues}`);
  }
  
  console.log('\nüéØ –í–´–í–û–î–´:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å processTonDeposit() - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ª–∏ type: "DEPOSIT"');
  console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤ –ë–î enum —Å–æ–¥–µ—Ä–∂–∏—Ç "DEPOSIT" —Ç–∏–ø'); 
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø');
  console.log('4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å metadata –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—à–∏–±–∫–∏');
}

diagnoseTonDepositIssue().catch(console.error);