/**
 * –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–ê–ì–û–í - 25 –∏—é–ª—è 2025
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * 
 * –¢–ó 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫ –ø–æ–ª—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –¢–ó 2: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ TON-–¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞  
 * –¢–ó 3: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ TON Boost
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verifyAllBugFixes() {
    console.log('\nüîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ë–ê–ì–û–í');
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç 25 –∏—é–ª—è 2025');
    console.log('=' .repeat(70));
    
    try {
        // ================================
        // –¢–ó 1: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ü–û–õ–Ø–ú –ë–î
        // ================================
        console.log('\nüìã –¢–ó 1: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ö –ü–û–õ–Ø–ú –ë–î');
        console.log('-' .repeat(60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è TON Boost
        console.log('\nüîç 1.1 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø TON BOOST:');
        
        const { data: sampleUser, error: userError } = await supabase
            .from('users')
            .select('*')
            .gt('ton_boost_package', 0)
            .limit(1)
            .single();
            
        if (sampleUser) {
            const criticalFields = [
                'ton_boost_package',
                'ton_boost_rate', 
                'ton_boost_active',
                'balance_ton'
            ];
            
            criticalFields.forEach(field => {
                if (sampleUser.hasOwnProperty(field)) {
                    console.log(`   ‚úÖ ${field}: ${sampleUser[field]} (${typeof sampleUser[field]})`);
                } else {
                    console.log(`   ‚ùå ${field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –ü–†–û–ë–õ–ï–ú–ê!`);
                }
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data –ø–æ–ª—è
        console.log('\nüîç 1.2 –ü–û–õ–Ø TON_FARMING_DATA:');
        
        const { data: sampleFarming, error: farmingError } = await supabase
            .from('ton_farming_data')
            .select('*')
            .limit(1)
            .single();
            
        if (sampleFarming) {
            const farmingFields = [
                'user_id',
                'farming_balance',
                'boost_active',
                'boost_package_id',
                'farming_rate'
            ];
            
            farmingFields.forEach(field => {
                if (sampleFarming.hasOwnProperty(field)) {
                    console.log(`   ‚úÖ ${field}: ${sampleFarming[field]} (${typeof sampleFarming[field]})`);
                } else {
                    console.log(`   ‚ùå ${field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –ü–†–û–ë–õ–ï–ú–ê!`);
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø user_id (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥)
            if (typeof sampleFarming.user_id === 'string') {
                console.log(`   ‚úÖ user_id —Ç–∏–ø STRING - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ`);
            } else {
                console.log(`   ‚ùå user_id —Ç–∏–ø ${typeof sampleFarming.user_id} - –ü–†–û–ë–õ–ï–ú–ê!`);
            }
        }
        
        console.log('\nüìä –¢–ó 1 –°–¢–ê–¢–£–°:');
        if (sampleUser && sampleFarming) {
            console.log('   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –ë–î');
        } else {
            console.log('   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º');
        }
        
        // ================================  
        // –¢–ó 2: –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï TON-–î–ï–ü–û–ó–ò–¢–û–í
        // ================================
        console.log('\nüìã –¢–ó 2: –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON-–î–ï–ü–û–ó–ò–¢–û–í');
        console.log('-' .repeat(60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log('\nüîç 2.1 –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• TON –î–ï–ü–û–ó–ò–¢–û–í:');
        
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        
        const { data: recentDeposits, error: depositsError } = await supabase
            .from('transactions')
            .select('*')
            .in('type', ['TON_DEPOSIT', 'DEPOSIT'])
            .gte('created_at', yesterday.toISOString())
            .order('created_at', { ascending: false })
            .limit(10);
            
        if (recentDeposits && recentDeposits.length > 0) {
            console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å—É—Ç–∫–∏: ${recentDeposits.length}`);
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
            const txHashGroups = new Map<string, any[]>();
            
            recentDeposits.forEach(deposit => {
                const txHash = deposit.tx_hash || deposit.metadata?.tx_hash || deposit.metadata?.ton_tx_hash;
                if (txHash) {
                    if (!txHashGroups.has(txHash)) {
                        txHashGroups.set(txHash, []);
                    }
                    txHashGroups.get(txHash)!.push(deposit);
                }
            });
            
            let duplicateCount = 0;
            for (const [txHash, transactions] of txHashGroups) {
                if (transactions.length > 1) {
                    duplicateCount++;
                    console.log(`   ‚ö†Ô∏è –î–£–ë–õ–¨: TX ${txHash} = ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
                    transactions.forEach((tx, index) => {
                        console.log(`      ${index + 1}. ID ${tx.id}, Amount ${tx.amount}, Time ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
                    });
                }
            }
            
            if (duplicateCount === 0) {
                console.log('   ‚úÖ –î–£–ë–õ–ï–ô –ù–ï –ù–ê–ô–î–ï–ù–û - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            } else {
                console.log(`   ‚ùå –ù–ê–ô–î–ï–ù–û ${duplicateCount} –î–£–ë–õ–ï–ô - –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è!`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            console.log('\nüîç 2.2 –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:');
            
            const latestDeposit = recentDeposits[0];
            if (latestDeposit) {
                const { data: userBalance, error: balanceError } = await supabase
                    .from('users')
                    .select('balance_ton')
                    .eq('id', latestDeposit.user_id)
                    .single();
                    
                if (userBalance) {
                    console.log(`   üë§ User ${latestDeposit.user_id}:`);
                    console.log(`   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userBalance.balance_ton} TON`);
                    console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${latestDeposit.amount} TON`);
                    
                    if (userBalance.balance_ton > 0) {
                        console.log('   ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                    } else {
                        console.log('   ‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞');
                    }
                }
            }
            
        } else {
            console.log('   üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å—É—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        console.log('\nüìä –¢–ó 2 –°–¢–ê–¢–£–°:');
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        
        // ================================
        // –¢–ó 3: TON BOOST –ü–ê–ö–ï–¢–´  
        // ================================
        console.log('\nüìã –¢–ó 3: –ü–†–û–í–ï–†–ö–ê TON BOOST –ü–ê–ö–ï–¢–û–í');
        console.log('-' .repeat(60));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ TON Boost
        console.log('\nüîç 3.1 –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ü–û–ö–£–ü–û–ö TON BOOST:');
        
        const { data: recentBoosts, error: boostsError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .gte('created_at', yesterday.toISOString())
            .order('created_at', { ascending: false })
            .limit(5);
            
        if (recentBoosts && recentBoosts.length > 0) {
            console.log(`   üìä –ü–æ–∫—É–ø–æ–∫ TON Boost –∑–∞ —Å—É—Ç–∫–∏: ${recentBoosts.length}`);
            
            for (let i = 0; i < Math.min(3, recentBoosts.length); i++) {
                const boost = recentBoosts[i];
                console.log(`\n   üí∞ –ü–æ–∫—É–ø–∫–∞ ${i + 1}:`);
                console.log(`      ID: ${boost.id}`);
                console.log(`      User: ${boost.user_id}`);
                console.log(`      –í—Ä–µ–º—è: ${new Date(boost.created_at).toLocaleString('ru-RU')}`);
                console.log(`      –°—É–º–º–∞: ${boost.amount} ${boost.currency}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–∞–∫–µ—Ç–∞ –≤ users
                const { data: userBoost, error: userBoostError } = await supabase
                    .from('users')
                    .select('ton_boost_package, ton_boost_rate')
                    .eq('id', boost.user_id)
                    .single();
                    
                if (userBoost && userBoost.ton_boost_package > 0) {
                    console.log(`      ‚úÖ Users: Package ${userBoost.ton_boost_package}, Rate ${userBoost.ton_boost_rate}`);
                } else {
                    console.log(`      ‚ùå Users: –ü–∞–∫–µ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ü–†–û–ë–õ–ï–ú–ê!`);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ farming –∑–∞–ø–∏—Å–∏
                const { data: farmingData, error: farmingDataError } = await supabase
                    .from('ton_farming_data')
                    .select('*')
                    .eq('user_id', boost.user_id.toString())
                    .single();
                    
                if (farmingData) {
                    console.log(`      ‚úÖ Farming: Balance ${farmingData.farming_balance}, Active ${farmingData.boost_active}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å
                    const boostTime = new Date(boost.created_at).getTime();
                    const farmingTime = new Date(farmingData.created_at).getTime();
                    const timeDiff = Math.abs(farmingTime - boostTime) / 1000;
                    
                    if (timeDiff <= 60) {
                        console.log(`      ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${timeDiff.toFixed(1)} —Å–µ–∫ - –æ—Ç–ª–∏—á–Ω–æ`);
                    } else if (timeDiff <= 3600) {
                        console.log(`      ‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${timeDiff.toFixed(1)} —Å–µ–∫ - –ø—Ä–∏–µ–º–ª–µ–º–æ`);
                    } else {
                        console.log(`      ‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${timeDiff.toFixed(1)} —Å–µ–∫ - –ø—Ä–æ–±–ª–µ–º–∞!`);
                    }
                } else {
                    console.log(`      ‚ùå Farming: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã - –ü–†–û–ë–õ–ï–ú–ê!`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            console.log('\nüîç 3.2 –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò:');
            
            let successfulActivations = 0;
            let totalChecked = Math.min(5, recentBoosts.length);
            
            for (const boost of recentBoosts.slice(0, 5)) {
                const { data: farming } = await supabase
                    .from('ton_farming_data')
                    .select('boost_active')
                    .eq('user_id', boost.user_id.toString())
                    .eq('boost_active', true)
                    .single();
                    
                if (farming) {
                    successfulActivations++;
                }
            }
            
            const successRate = totalChecked > 0 ? (successfulActivations / totalChecked * 100).toFixed(1) : '0';
            console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${successRate}% (${successfulActivations}/${totalChecked})`);
            
            if (parseFloat(successRate) >= 90) {
                console.log('   ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ');
            } else if (parseFloat(successRate) >= 70) {
                console.log('   ‚ö†Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ');
            } else {
                console.log('   ‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ - –ü–†–û–ë–õ–ï–ú–ê!');
            }
            
        } else {
            console.log('   üìä –ü–æ–∫—É–ø–æ–∫ TON Boost –∑–∞ —Å—É—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –ø–æ–∫—É–ø–∫–∏
            const { data: olderBoosts } = await supabase
                .from('transactions')
                .select('*')
                .eq('type', 'BOOST_PURCHASE')
                .order('created_at', { ascending: false })
                .limit(3);
                
            if (olderBoosts && olderBoosts.length > 0) {
                console.log(`   üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω): ${olderBoosts.length}`);
                console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${new Date(olderBoosts[0].created_at).toLocaleDateString('ru-RU')}`);
            }
        }
        
        console.log('\nüìä –¢–ó 3 –°–¢–ê–¢–£–°:');
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–æ–∫ TON Boost –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è farming –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        
        // ================================
        // –û–ë–©–ò–ô –ò–¢–û–ì –í–°–ï–• –ü–†–û–í–ï–†–û–ö
        // ================================
        console.log('\nüèÜ === –û–ë–©–ò–ô –ò–¢–û–ì –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===');
        console.log('-' .repeat(60));
        
        console.log('\nüìã –°–¢–ê–¢–£–° –ü–û –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ú –ó–ê–î–ê–ù–ò–Ø–ú:');
        console.log('   ‚úÖ –¢–ó 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ–ª—è–º –ë–î - –ü–†–û–í–ï–†–ï–ù–û');
        console.log('   ‚úÖ –¢–ó 2: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –ü–†–û–í–ï–†–ï–ù–û');  
        console.log('   ‚úÖ –¢–ó 3: TON Boost –ø–∞–∫–µ—Ç—ã - –ü–†–û–í–ï–†–ï–ù–û');
        
        console.log('\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
        let problemsFound = false;
        
        // –ó–¥–µ—Å—å –±—É–¥–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        const problems: string[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if (!sampleUser || !sampleFarming) {
            problems.push('–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º');
        }
        
        if (sampleFarming && typeof sampleFarming.user_id !== 'string') {
            problems.push('–¢–∏–ø user_id –≤ ton_farming_data –Ω–µ STRING');
        }
        
        if (problems.length === 0) {
            console.log('   ‚úÖ –ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û - –≤—Å–µ –±–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        } else {
            problemsFound = true;
            problems.forEach((problem, index) => {
                console.log(`   ‚ùå ${index + 1}. ${problem}`);
            });
        }
        
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (!problemsFound) {
            console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
            console.log('   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
            console.log('   ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        } else {
            console.log('   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º');
            console.log('   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
verifyAllBugFixes().then(() => {
    console.log('\n‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});