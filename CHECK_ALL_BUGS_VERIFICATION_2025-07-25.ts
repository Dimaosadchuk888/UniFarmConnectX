#!/usr/bin/env tsx

/**
 * üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –°–ï–†–í–ï–†–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function checkSystemAfterRestart() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò');
  console.log('=' .repeat(45));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–î –ê–ö–¢–ò–í–ê–¶–ò–ò (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ton_boost_active: true)
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞...');
    
    const fs = await import('fs');
    const serviceCode = fs.readFileSync('modules/boost/service.ts', 'utf8');
    
    const hasActiveFlagInActivateBoost = serviceCode.includes('ton_boost_active: true  // ‚≠ê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    const hasActiveFlagInPurchase = serviceCode.includes('ton_boost_active: true') && serviceCode.includes('purchaseWithInternalWallet');
    
    console.log(`‚úÖ –§–ª–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ activateBoost(): ${hasActiveFlagInActivateBoost ? '–ü–†–ò–ú–ï–ù–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    console.log(`‚úÖ –§–ª–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ purchaseWithInternalWallet(): ${hasActiveFlagInPurchase ? '–ü–†–ò–ú–ï–ù–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const { data: activeUsers } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_package, ton_boost_rate')
      .eq('ton_boost_active', true)
      .not('ton_boost_package', 'is', null)
      .order('id');

    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers?.length || 0}`);
    
    const expectedUsers = [25, 224, 250, 184, 220, 246, 290, 287, 258];
    const activeUserIds = activeUsers?.map(u => u.id) || [];
    const allExpectedActive = expectedUsers.every(id => activeUserIds.includes(id));
    
    console.log(`‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã: ${allExpectedActive ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (!allExpectedActive) {
      const missing = expectedUsers.filter(id => !activeUserIds.includes(id));
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.join(', ')}`);
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï –î–û–•–û–î–´ (–∑–∞ 5 –º–∏–Ω—É—Ç)
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    
    const { data: recentIncomes } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at')
      .eq('type', 'FARMING_REWARD')
      .contains('metadata', { transaction_source: 'ton_boost_scheduler' })
      .gte('created_at', new Date(Date.now() - 5 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    const usersWithRecentIncome = [...new Set(recentIncomes?.map(tx => parseInt(tx.user_id)) || [])];
    console.log(`üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Ö–æ–¥–∞–º–∏ –∑–∞ 5 –º–∏–Ω—É—Ç: ${usersWithRecentIncome.length}/${activeUsers?.length || 0}`);
    
    // 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–û–ù–ö–†–ï–¢–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
    console.log('\n4Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
    
    for (const user of activeUsers || []) {
      const userIncome = recentIncomes?.filter(tx => parseInt(tx.user_id) === user.id);
      const latestIncome = userIncome?.[0];
      
      console.log(`   User ${user.id} (@${user.username}):`);
      console.log(`     - Package: ${user.ton_boost_package}, Rate: ${user.ton_boost_rate}`);
      console.log(`     - –î–æ—Ö–æ–¥–æ–≤ –∑–∞ 5 –º–∏–Ω: ${userIncome?.length || 0}`);
      if (latestIncome) {
        console.log(`     - –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: ${latestIncome.amount} TON (${latestIncome.created_at})`);
      }
    }

    // 5. –ü–†–û–í–ï–†–ö–ê TON_FARMING_DATA
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ton_farming_data —Ç–∞–±–ª–∏—Ü—ã...');
    
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_package_id')
      .in('user_id', activeUserIds.map(id => id.toString()));

    console.log(`üåæ –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${farmingData?.length || 0}/${activeUsers?.length || 0}`);

    // 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\n6Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´...');
    
    const codeFixed = hasActiveFlagInActivateBoost && hasActiveFlagInPurchase;
    const usersActivated = allExpectedActive;
    const schedulerWorking = usersWithRecentIncome.length > 0;
    const farmingDataComplete = (farmingData?.length || 0) === (activeUsers?.length || 0);
    
    console.log(`‚úÖ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${codeFixed ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: ${usersActivated ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${schedulerWorking ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`‚úÖ Farming –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ: ${farmingDataComplete ? '–î–ê' : '–ù–ï–¢'}`);
    
    const systemHealthy = codeFixed && usersActivated && schedulerWorking;
    
    if (systemHealthy) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ò –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
      console.log('   ‚úÖ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥—ã');
      console.log('   ‚úÖ –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    } else {
      console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï');
      if (!codeFixed) console.log('   ‚ùå –ö–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
      if (!usersActivated) console.log('   ‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
      if (!schedulerWorking) console.log('   ‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    return {
      code_fixed: codeFixed,
      users_activated: usersActivated,
      scheduler_working: schedulerWorking,
      farming_data_complete: farmingDataComplete,
      system_healthy: systemHealthy,
      active_users_count: activeUsers?.length || 0,
      recent_income_users: usersWithRecentIncome.length
    };

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await checkSystemAfterRestart();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:');
    console.log(`   –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${result.code_fixed}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã: ${result.users_activated}`);
    console.log(`   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${result.scheduler_working}`);
    console.log(`   –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞: ${result.system_healthy}`);
    
    process.exit(result.system_healthy ? 0 : 1);
    
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();