/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions –≤ Neon DB
 */

import 'dotenv/config';
import pg from 'pg';
const { Pool } = pg;

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function setupPartitioning() {
  if (!process.env.DATABASE_URL) {
    log('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', colors.red);
    return false;
  }

  log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions –≤ Neon DB...', colors.blue);
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });

  let client;
  
  try {
    client = await pool.connect();
    
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ transactions
    const tableExistsResult = await client.query(`
      SELECT EXISTS (
        SELECT FROM pg_tables 
        WHERE schemaname = 'public' AND tablename = 'transactions'
      )
    `);
    
    if (!tableExistsResult.rows[0].exists) {
      log('‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', colors.red);
      return false;
    }
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞
    const partitionCheckResult = await client.query(`
      SELECT EXISTS (
        SELECT FROM pg_class c
        JOIN pg_namespace n ON c.relnamespace = n.oid
        WHERE c.relname = 'transactions' AND n.nspname = 'public' AND c.relkind = 'p'
      ) as is_partitioned
    `);
    
    if (partitionCheckResult.rows[0].is_partitioned) {
      log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —É–∂–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞', colors.green);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π
      const partitionsResult = await client.query(`
        SELECT child.relname as partition_name
        FROM pg_inherits
        JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
        JOIN pg_class child ON pg_inherits.inhrelid = child.oid
        JOIN pg_namespace nmsp_parent ON parent.relnamespace = nmsp_parent.oid
        JOIN pg_namespace nmsp_child ON child.relnamespace = nmsp_child.oid
        WHERE parent.relname = 'transactions' AND nmsp_parent.nspname = 'public'
      `);
      
      log(`–ù–∞–π–¥–µ–Ω–æ ${partitionsResult.rows.length} –ø–∞—Ä—Ç–∏—Ü–∏–π:`, colors.blue);
      partitionsResult.rows.forEach((row, index) => {
        log(`${index + 1}. ${row.partition_name}`, colors.reset);
      });
      
      return true;
    }
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã
    log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.yellow);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const countResult = await client.query('SELECT COUNT(*) FROM transactions');
    const rowCount = parseInt(countResult.rows[0].count);
    
    log(`–í —Ç–∞–±–ª–∏—Ü–µ transactions –Ω–∞–π–¥–µ–Ω–æ ${rowCount} –∑–∞–ø–∏—Å–µ–π`, colors.blue);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    await client.query('BEGIN');
    try {
      await client.query('CREATE TABLE transactions_backup AS SELECT * FROM transactions');
      log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è transactions_backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', colors.green);
      await client.query('COMMIT');
    } catch (err) {
      await client.query('ROLLBACK');
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${err.message}`, colors.red);
      return false;
    }
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    const backupCountResult = await client.query('SELECT COUNT(*) FROM transactions_backup');
    const backupRowCount = parseInt(backupCountResult.rows[0].count);
    
    if (backupRowCount !== rowCount) {
      log(`‚ùå –û—à–∏–±–∫–∞: –í —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ ${backupRowCount} –∑–∞–ø–∏—Å–µ–π –≤–º–µ—Å—Ç–æ ${rowCount}`, colors.red);
      return false;
    }
    
    // –®–∞–≥ 5: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–π
    let minDate, maxDate;
    
    if (rowCount > 0) {
      const dateRangeResult = await client.query(`
        SELECT 
          MIN(created_at) as min_date,
          MAX(created_at) as max_date
        FROM transactions_backup
      `);
      
      minDate = dateRangeResult.rows[0].min_date;
      maxDate = dateRangeResult.rows[0].max_date;
      
      log(`–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: ${minDate} - ${maxDate}`, colors.blue);
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      const now = new Date();
      minDate = new Date(now.getFullYear(), now.getMonth(), 1);
      maxDate = new Date(now.getFullYear(), now.getMonth() + 2, 0);
      
      log(`–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: ${minDate.toISOString().slice(0, 10)} - ${maxDate.toISOString().slice(0, 10)}`, colors.yellow);
    }
    
    // –®–∞–≥ 6: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã transactions —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º...', colors.magenta);
    
    await client.query('BEGIN');
    try {
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      await client.query('DROP TABLE transactions CASCADE');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      await client.query(`
        CREATE TABLE transactions (
          id SERIAL PRIMARY KEY,
          user_id INTEGER REFERENCES users(id),
          type TEXT,
          currency TEXT,
          amount NUMERIC(18, 6),
          status TEXT DEFAULT 'confirmed',
          source TEXT,
          category TEXT,
          tx_hash TEXT,
          description TEXT,
          source_user_id INTEGER,
          wallet_address TEXT,
          data TEXT,
          created_at TIMESTAMP DEFAULT NOW()
        ) PARTITION BY RANGE (created_at)
      `);
      
      log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞', colors.green);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      await client.query('CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id)');
      await client.query('CREATE INDEX IF NOT EXISTS idx_transactions_source_user_id ON transactions(source_user_id)');
      await client.query('CREATE INDEX IF NOT EXISTS idx_transactions_type_status ON transactions(type, status)');
      
      log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã', colors.green);
      
      await client.query('COMMIT');
    } catch (err) {
      await client.query('ROLLBACK');
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, colors.red);
      return false;
    }
    
    // –®–∞–≥ 7: –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏
    log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π...', colors.blue);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–∏
    async function createPartition(startDate, endDate) {
      const formattedStart = startDate instanceof Date 
        ? startDate.toISOString().slice(0, 10)
        : startDate;
        
      const formattedEnd = endDate instanceof Date 
        ? endDate.toISOString().slice(0, 10)
        : endDate;
      
      const partitionName = `transactions_${formattedStart.replace(/-/g, '_')}`;
      
      try {
        await client.query(`
          CREATE TABLE IF NOT EXISTS ${partitionName} PARTITION OF transactions
          FOR VALUES FROM ('${formattedStart}') TO ('${formattedEnd}')
        `);
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏–∏
        await client.query(`CREATE INDEX IF NOT EXISTS idx_${partitionName}_created_at ON ${partitionName}(created_at)`);
        
        log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} (${formattedStart} - ${formattedEnd})`, colors.green);
        return true;
      } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–∏ ${partitionName}: ${err.message}`, colors.red);
        return false;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    const startDate = minDate ? new Date(minDate) : new Date();
    startDate.setDate(1); // –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
    
    const endDate = maxDate ? new Date(maxDate) : new Date();
    endDate.setMonth(endDate.getMonth() + 3); // –î–æ–±–∞–≤–ª—è–µ–º 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    
    const current = new Date(startDate);
    
    while (current < endDate) {
      const partitionStart = new Date(current);
      
      current.setMonth(current.getMonth() + 1);
      
      const partitionEnd = new Date(current);
      
      await createPartition(
        partitionStart.toISOString().slice(0, 10),
        partitionEnd.toISOString().slice(0, 10)
      );
    }
    
    // –®–∞–≥ 8: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (rowCount > 0) {
      log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...', colors.blue);
      
      try {
        await client.query('BEGIN');
        
        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        await client.query(`
          INSERT INTO transactions (
            id, user_id, type, currency, amount, status, 
            source, category, tx_hash, description, 
            source_user_id, wallet_address, data, created_at
          )
          SELECT 
            id, user_id, type, currency, amount, status, 
            source, category, tx_hash, description, 
            source_user_id, wallet_address, data, created_at
          FROM transactions_backup
        `);
        
        await client.query('COMMIT');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        const restoredCountResult = await client.query('SELECT COUNT(*) FROM transactions');
        const restoredCount = parseInt(restoredCountResult.rows[0].count);
        
        if (restoredCount === rowCount) {
          log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`, colors.green);
        } else {
          log(`‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${restoredCount} –∏–∑ ${rowCount} –∑–∞–ø–∏—Å–µ–π`, colors.yellow);
        }
      } catch (err) {
        await client.query('ROLLBACK');
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, colors.red);
        return false;
      }
    }
    
    // –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const finalCheckResult = await client.query(`
      SELECT COUNT(*) as partition_count
      FROM pg_inherits
      JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
      JOIN pg_namespace nmsp_parent ON parent.relnamespace = nmsp_parent.oid
      WHERE parent.relname = 'transactions' AND nmsp_parent.nspname = 'public'
    `);
    
    const partitionCount = parseInt(finalCheckResult.rows[0].partition_count);
    
    if (partitionCount > 0) {
      log(`üéâ –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ ${partitionCount} –ø–∞—Ä—Ç–∏—Ü–∏–π.`, colors.green);
      return true;
    } else {
      log('‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.', colors.red);
      return false;
    }
  } catch (err) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
    console.error(err.stack);
    return false;
  } finally {
    if (client) client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
setupPartitioning()
  .then(success => {
    if (success) {
      log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', colors.green);
    } else {
      log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', colors.red);
      process.exit(1);
    }
  })
  .catch(err => {
    console.error('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });