/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

import fs from 'fs';
import path from 'path';

const activeFiles = new Set();
const importedFiles = new Map();
const referencedFiles = new Set();

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 */
function analyzeImports(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º import/require statements
    const importRegex = /(?:import.*from\s+['"`]([^'"`]+)['"`]|require\s*\(\s*['"`]([^'"`]+)['"`]\))/g;
    let match;
    
    while ((match = importRegex.exec(content)) !== null) {
      const importPath = match[1] || match[2];
      if (importPath && !importPath.startsWith('node_modules') && !importPath.startsWith('@')) {
        if (!importedFiles.has(filePath)) {
          importedFiles.set(filePath, []);
        }
        importedFiles.get(filePath).push(importPath);
        
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        let realPath = importPath;
        if (importPath.startsWith('./') || importPath.startsWith('../')) {
          const dir = path.dirname(filePath);
          realPath = path.resolve(dir, importPath);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        const extensions = ['', '.js', '.ts', '.jsx', '.tsx', '.mjs'];
        for (const ext of extensions) {
          const fullPath = realPath + ext;
          if (fs.existsSync(fullPath)) {
            referencedFiles.add(path.relative('.', fullPath));
            break;
          }
        }
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏–º entry points - —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
 */
function findEntryPoints() {
  const entryPoints = [
    'server/index.ts',
    'client/src/main.tsx',
    'package.json',
    'vite.config.ts',
    'tailwind.config.ts',
    'drizzle.config.ts'
  ];
  
  entryPoints.forEach(file => {
    if (fs.existsSync(file)) {
      activeFiles.add(file);
    }
  });
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 */
function traceDependendencies() {
  let foundNew = true;
  let iterations = 0;
  
  while (foundNew && iterations < 50) {
    foundNew = false;
    iterations++;
    
    for (const file of activeFiles) {
      if (importedFiles.has(file)) {
        for (const imported of importedFiles.get(file)) {
          if (!referencedFiles.has(imported)) {
            foundNew = true;
            referencedFiles.add(imported);
          }
        }
      }
    }
    
    for (const ref of referencedFiles) {
      if (!activeFiles.has(ref)) {
        activeFiles.add(ref);
        foundNew = true;
      }
    }
  }
}

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
 */
function scanAllFiles(dir = '.', relativePath = '') {
  try {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      if (item.startsWith('.') || item === 'node_modules' || item === 'dist') continue;
      
      const fullPath = path.join(dir, item);
      const itemRelativePath = path.join(relativePath, item);
      
      if (fs.statSync(fullPath).isDirectory()) {
        scanAllFiles(fullPath, itemRelativePath);
      } else if (item.match(/\.(js|ts|jsx|tsx|mjs|json)$/)) {
        analyzeImports(itemRelativePath);
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}:`, error.message);
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
function analyzeDuplicatesFromReport() {
  try {
    const reportContent = fs.readFileSync('duplicate-analysis-report.json', 'utf8');
    const report = JSON.parse(reportContent);
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...\n');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
    console.log('üìÅ –§–ê–ô–õ–´ –° –ü–û–•–û–ñ–ò–ú–ò –ò–ú–ï–ù–ê–ú–ò - –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    report.files.similarNames.forEach(group => {
      console.log(`\nüìÇ –ì—Ä—É–ø–ø–∞: ${group.baseName}`);
      
      group.files.forEach(file => {
        const isActive = activeFiles.has(file) || referencedFiles.has(file);
        const isBackup = file.includes('backup') || file.includes('archive') || file.includes('.old');
        
        if (isBackup && !isActive) {
          console.log(`  ‚ùå –ú–û–ñ–ù–û –£–î–ê–õ–ò–¢–¨: ${file} (backup/archive, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)`);
        } else if (isActive) {
          console.log(`  ‚úÖ –û–°–¢–ê–í–ò–¢–¨: ${file} (–∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)`);
        } else {
          console.log(`  ‚ö†Ô∏è  –ü–†–û–í–ï–†–ò–¢–¨: ${file} (—Å—Ç–∞—Ç—É—Å –Ω–µ—è—Å–µ–Ω)`);
        }
      });
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º backup —Ñ–∞–π–ª—ã
    console.log('\n\nüóÇÔ∏è  BACKUP –§–ê–ô–õ–´:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    report.files.backupFiles.forEach(file => {
      const isActive = activeFiles.has(file) || referencedFiles.has(file);
      if (!isActive) {
        console.log(`‚ùå –ú–û–ñ–ù–û –£–î–ê–õ–ò–¢–¨: ${file}`);
      } else {
        console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: ${file} (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)`);
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const safeToDelete = [];
    const needsReview = [];
    
    report.files.similarNames.forEach(group => {
      group.files.forEach(file => {
        const isActive = activeFiles.has(file) || referencedFiles.has(file);
        const isBackup = file.includes('backup') || file.includes('archive') || file.includes('.old');
        
        if (isBackup && !isActive) {
          safeToDelete.push(file);
        } else if (!isActive && !isBackup) {
          needsReview.push(file);
        }
      });
    });
    
    report.files.backupFiles.forEach(file => {
      const isActive = activeFiles.has(file) || referencedFiles.has(file);
      if (!isActive) {
        safeToDelete.push(file);
      }
    });
    
    console.log(`\n\nüìä –ò–¢–û–ì–û:`);
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${activeFiles.size}`);
    console.log(`‚ùå –§–∞–π–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å: ${safeToDelete.length}`);
    console.log(`‚ö†Ô∏è  –§–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${needsReview.length}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
    const cleanupPlan = {
      safeToDelete,
      needsReview,
      activeFiles: Array.from(activeFiles),
      referencedFiles: Array.from(referencedFiles)
    };
    
    fs.writeFileSync('safe-cleanup-plan.json', JSON.stringify(cleanupPlan, null, 2));
    console.log('\n‚úÖ –ü–ª–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ safe-cleanup-plan.json');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–∞:', error.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function runSafeAnalysis() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');
  
  findEntryPoints();
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeFiles.size} entry points`);
  
  scanAllFiles();
  console.log(`‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ`);
  
  traceDependendencies();
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeFiles.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referencedFiles.size} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n`);
  
  analyzeDuplicatesFromReport();
}

runSafeAnalysis().catch(console.error);