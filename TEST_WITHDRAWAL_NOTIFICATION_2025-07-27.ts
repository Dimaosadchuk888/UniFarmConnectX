#!/usr/bin/env tsx

/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –í–´–í–û–î–ï –°–†–ï–î–°–¢–í
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–¥–º–∏–Ω-–±–æ—Ç–æ–º
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import fetch from 'node-fetch';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function createTestWithdrawalRequest() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –í–´–í–û–î–ï');
  console.log('=' .repeat(50));
  
  try {
    // 1. –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton')
      .gt('balance_ton', 1)
      .limit(5);
      
    if (usersError || !users || users.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º TON');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25 (—É –Ω–µ–≥–æ –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
      const testUserId = 25;
      console.log(`‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${testUserId} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
      
      const { data: testUser } = await supabase
        .from('users')
        .select('id, telegram_id, username, balance_ton')
        .eq('id', testUserId)
        .single();
        
      if (!testUser) {
        throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${testUser.username || 'unknown'} (ID: ${testUser.id})`);
      console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${testUser.balance_ton} TON`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
      console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API...');
      
      const withdrawalData = {
        userId: testUser.id,
        amount: '1',
        type: 'TON',
        address: 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t'
      };
      
      const appUrl = process.env.APP_DOMAIN || 'https://uni-farm-connect-unifarm01010101.replit.app';
      const apiUrl = `${appUrl}/api/v2/wallet/withdraw`;
      
      console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${apiUrl}`);
      console.log(`üìù –î–∞–Ω–Ω—ã–µ:`, withdrawalData);
      
      // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π)
      const tempToken = 'test_token_for_withdrawal';
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${tempToken}`
        },
        body: JSON.stringify(withdrawalData)
      });
      
      const result = await response.text();
      console.log(`üì° –û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
      console.log(`üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${result}`);
      
      if (response.status === 401) {
        console.log('üîê –ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î...');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const withdrawRequest = {
          id: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          user_id: testUser.id,
          telegram_id: testUser.telegram_id,
          username: testUser.username,
          amount_ton: '1.0',
          ton_wallet: 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t',
          status: 'pending',
          created_at: new Date().toISOString()
        };
        
        console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        const { data: newRequest, error: insertError } = await supabase
          .from('withdraw_requests')
          .insert(withdrawRequest)
          .select()
          .single();
          
        if (insertError) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${insertError.message}`);
        }
        
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:');
        console.log(`   ID: ${newRequest.id}`);
        console.log(`   User: ${newRequest.user_id} (@${newRequest.username})`);
        console.log(`   Amount: ${newRequest.amount_ton} TON`);
        console.log(`   Wallet: ${newRequest.ton_wallet}`);
        console.log(`   Status: ${newRequest.status}`);
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞...');
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ AdminBotService.notifyWithdrawal()
        const testNotificationUrl = `${appUrl}/api/v2/admin-bot/test-notification`;
        
        try {
          const notificationResponse = await fetch(testNotificationUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              action: 'test_withdrawal_notification',
              withdrawRequest: newRequest
            })
          });
          
          console.log(`üì° –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationResponse.status} ${notificationResponse.statusText}`);
          
        } catch (notifyError) {
          console.log('‚ÑπÔ∏è  API —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ª–æ–∫–∞–ª—å–Ω–æ...');
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏...');
        
        const { data: checkRequest, error: checkError } = await supabase
          .from('withdraw_requests')
          .select('*')
          .eq('id', newRequest.id)
          .single();
          
        if (checkError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏:', checkError.message);
        } else {
          console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${new Date(checkRequest.created_at).toLocaleString('ru-RU')}`);
          console.log(`   –°—Ç–∞—Ç—É—Å: ${checkRequest.status}`);
        }
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
        
        const { data: admins, error: adminsError } = await supabase
          .from('users')
          .select('username, telegram_id, is_admin')
          .eq('is_admin', true);
          
        if (adminsError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:', adminsError.message);
        } else {
          console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: ${admins?.length || 0}`);
          
          admins?.forEach((admin, index) => {
            console.log(`   ${index + 1}. @${admin.username} (Telegram ID: ${admin.telegram_id})`);
          });
          
          if (admins && admins.length > 0) {
            console.log('‚úÖ –ê–¥–º–∏–Ω—ã –Ω–∞–π–¥–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          } else {
            console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
          }
        }
        
        // 7. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('\n7Ô∏è‚É£ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø...');
        console.log('üìã –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:');
        console.log(`   üÜî ID –∑–∞—è–≤–∫–∏: ${newRequest.id}`);
        console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${newRequest.username} (${newRequest.user_id})`);
        console.log(`   üí∞ –°—É–º–º–∞: ${newRequest.amount_ton} TON`);
        console.log(`   üè¶ –ö–æ—à–µ–ª–µ–∫: ${newRequest.ton_wallet}`);
        console.log(`   üìÖ –î–∞—Ç–∞: ${new Date(newRequest.created_at).toLocaleString('ru-RU')}`);
        console.log(`   ‚è≥ –°—Ç–∞—Ç—É—Å: ${newRequest.status}`);
        
        console.log('\nüéØ –ß–¢–û –î–û–õ–ñ–ù–û –ü–†–û–ò–ó–û–ô–¢–ò:');
        console.log('1. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ withdraw_requests ‚úÖ');
        console.log('2. AdminBotService.notifyWithdrawal() –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        console.log('3. –ê–¥–º–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram');
        console.log('4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        console.log('5. Webhook –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 500 –æ—à–∏–±–æ–∫');
        
        console.log('\nüì± –ü–†–û–í–ï–†–¨–¢–ï TELEGRAM –ê–î–ú–ò–ù-–ë–û–¢–ê:');
        console.log('- –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∞–¥–º–∏–Ω-–±–æ—Ç–æ–º');
        console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ');
        console.log('- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å"/"–û—Ç–∫–ª–æ–Ω–∏—Ç—å"');
        
        return newRequest;
      }
      
    } else {
      console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${users[0].username} (ID: ${users[0].id})`);
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${users[0].balance_ton} TON`);
    }

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}\n`);
    
    const testRequest = await createTestWithdrawalRequest();
    
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    
    if (testRequest) {
      console.log(`üÜî ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: ${testRequest.id}`);
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û:', error);
    process.exit(1);
  }
}

main();