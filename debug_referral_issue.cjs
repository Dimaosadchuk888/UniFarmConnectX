/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function debugReferralIssue() {
  console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–û–í');
  console.log('='.repeat(60));

  try {
    // 1. –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ref_code
    const { data: newUser } = await supabase
      .from('users')
      .select('*')
      .eq('ref_code', 'REF_1752843456275_sowqic')
      .single();

    console.log('\nüìä –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:');
    if (newUser) {
      console.log(`ID: ${newUser.id}`);
      console.log(`Telegram ID: ${newUser.telegram_id}`);
      console.log(`Username: ${newUser.username}`);
      console.log(`Ref Code: ${newUser.ref_code}`);
      console.log(`Referred By: ${newUser.referred_by}`);
      console.log(`Created: ${newUser.created_at}`);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    // 2. –ù–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å User 184)
    const { data: referrer } = await supabase
      .from('users')
      .select('*')
      .eq('id', 184)
      .single();

    console.log('\nüìä –†–ï–§–ï–†–ï–† (User 184):');
    if (referrer) {
      console.log(`ID: ${referrer.id}`);
      console.log(`Telegram ID: ${referrer.telegram_id}`);
      console.log(`Username: ${referrer.username}`);
      console.log(`Ref Code: ${referrer.ref_code}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É referrals
    const { data: referralRecord } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUser.id);

    console.log('\nüìä –ó–ê–ü–ò–°–¨ –í –¢–ê–ë–õ–ò–¶–ï REFERRALS:');
    if (referralRecord && referralRecord.length > 0) {
      referralRecord.forEach(ref => {
        console.log(`User ID: ${ref.user_id}`);
        console.log(`Referrer ID: ${ref.referrer_id}`);
        console.log(`Referred User ID: ${ref.referred_user_id}`);
        console.log(`Level: ${ref.level}`);
        console.log(`Created: ${ref.created_at}`);
      });
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ referrals –ù–ï –ù–ê–ô–î–ï–ù–´!');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å API –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    const { data: teamMembers } = await supabase
      .from('referrals')
      .select(`
        *,
        referred_user:users!referrals_user_id_fkey(
          id,
          username,
          telegram_id,
          ref_code,
          created_at
        )
      `)
      .eq('referrer_id', 184);

    console.log('\nüìä –ö–û–ú–ê–ù–î–ê –†–ï–§–ï–†–ï–†–ê (—á—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è):');
    if (teamMembers && teamMembers.length > 0) {
      teamMembers.forEach(member => {
        console.log(`Level ${member.level}: ${member.referred_user?.username || 'Unknown'} (ID: ${member.referred_user?.id})`);
      });
    } else {
      console.log('‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞!');
    }

    // 5. –ù–∞–π—Ç–∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:');
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–ü–æ–ª–µ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${newUser?.referred_by ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞: ${referralRecord && referralRecord.length > 0 ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–ö–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω–∞: ${teamMembers && teamMembers.length > 0 ? '–î–ê' : '–ù–ï–¢'}`);

    return {
      newUser,
      referrer,
      referralRecord,
      teamMembers
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    return null;
  }
}

debugReferralIssue().then((result) => {
  if (result) {
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∞–Ω–∞–ª–∏–∑ API endpoints –¥–ª—è –∫–æ–º–∞–Ω–¥—ã');
  }
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
});