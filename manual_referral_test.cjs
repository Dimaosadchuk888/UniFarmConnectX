/**
 * –†–£–ß–ù–û–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function manualReferralTest() {
  console.log('=== –†–£–ß–ù–û–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 224
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 224');
    
    const { data: user224, error: user224Error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 224)
      .single();
    
    if (user224Error) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 224 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user224Error.message);
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 224 –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${user224.id}`);
      console.log(`   Telegram ID: ${user224.telegram_id}`);
      console.log(`   Username: ${user224.username}`);
      console.log(`   Referred by: ${user224.referred_by || '–ù–ï–¢'}`);
      console.log(`   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(user224.created_at).toLocaleString('ru-RU')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ referrals
      const { data: referral224, error: referral224Error } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', 224);
      
      if (referral224Error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ referrals:', referral224Error.message);
      } else if (referral224.length > 0) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ referrals:');
        referral224.forEach((ref, index) => {
          console.log(`   ${index + 1}. ${JSON.stringify(ref)}`);
        });
      } else {
        console.log('‚ùå –ó–∞–ø–∏—Å–∏ –≤ referrals –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 
    console.log('\nüîó 2. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ï–†–ê');
    
    const { data: referrer, error: referrerError } = await supabase
      .from('users')
      .select('*')
      .eq('ref_code', 'REF_1750079004411_nddfp2')
      .single();
    
    if (referrerError) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', referrerError.message);
    } else {
      console.log('‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${referrer.id}`);
      console.log(`   Telegram ID: ${referrer.telegram_id}`);
      console.log(`   Username: ${referrer.username}`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referrer.ref_code}`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã referrals
    console.log('\nüîç 3. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ REFERRALS');
    
    const { data: referralsData, error: referralsError } = await supabase
      .from('referrals')
      .select('*')
      .limit(5);
    
    if (referralsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è referrals:', referralsError.message);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${referralsData.length}`);
      
      if (referralsData.length > 0) {
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
        console.log('–ü–æ–ª—è:', Object.keys(referralsData[0]));
        console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
        referralsData.forEach((record, index) => {
          console.log(`   ${index + 1}. ${JSON.stringify(record)}`);
        });
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by
    console.log('\nüë• 4. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° REFERRED_BY');
    
    const { data: usersWithRef, error: usersWithRefError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (usersWithRefError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by:', usersWithRefError.message);
    } else {
      console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by: ${usersWithRef.length}`);
      
      if (usersWithRef.length > 0) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        usersWithRef.forEach((user, index) => {
          const time = new Date(user.created_at).toLocaleString('ru-RU');
          console.log(`   ${index + 1}. ID: ${user.id}, TG: ${user.telegram_id}, referred_by: ${user.referred_by}, –≤—Ä–µ–º—è: ${time}`);
        });
      }
    }
    
    // 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîç 5. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´');
    
    if (user224 && !user224.referred_by) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 224 —Å–æ–∑–¥–∞–Ω –ë–ï–ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏');
      console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ processReferral() –ù–ï –°–†–ê–ë–û–¢–ê–õ');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å');
      console.log('   2. ReferralService.processReferral() –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ');
      console.log('   3. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('   4. ref_by –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ findOrCreateFromTelegram()');
    }
    
    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° 6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('1. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ AuthService');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ReferralService.processReferral() –æ—Ç–¥–µ–ª—å–Ω–æ');
    console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ ref_by –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

manualReferralTest();