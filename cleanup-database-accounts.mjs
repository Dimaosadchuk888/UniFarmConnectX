/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 50 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function cleanupAccounts() {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å id 48, 49, 50 –∏ telegram_id 43, 88888888
    const { data: users, error: fetchError } = await supabase
      .from('users')
      .select('*')
      .or('id.in.(48,49,50),telegram_id.in.(43,88888888)')
      .order('id');
      
    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', fetchError);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    users.forEach(user => {
      console.log(`ID: ${user.id}, telegram_id: ${user.telegram_id}, username: ${user.username}, ref_code: ${user.ref_code}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å: UNI=${user.balance_uni}, TON=${user.balance_ton}\n`);
    });
    
    // 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 48 –∏ 49 –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã (ID 48, 49)...');
    
    const { error: deleteError } = await supabase
      .from('users')
      .delete()
      .in('id', [48, 49]);
      
    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', deleteError);
    } else {
      console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã\n');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 50
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 50...');
    
    const { data: user50, error: user50Error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 50)
      .single();
      
    if (user50Error || !user50) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 50 –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...');
      
      const { error: createError } = await supabase
        .from('users')
        .insert({
          id: 50,
          telegram_id: 43,
          username: 'demo_user',
          first_name: 'Demo',
          last_name: 'User',
          ref_code: 'REF_1751432118013_x06tsz',
          balance_uni: 1000,
          balance_ton: 1000,
          uni_farming_start_timestamp: null,
          ton_farming_start_timestamp: null,
          created_at: new Date().toISOString()
        });
        
      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', createError);
      } else {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 50 —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      }
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 50 –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 50...');
      
      const { error: updateError } = await supabase
        .from('users')
        .update({
          telegram_id: 43,
          username: 'demo_user',
          first_name: 'Demo',
          last_name: 'User',
          ref_code: 'REF_1751432118013_x06tsz',
          balance_uni: 1000,
          balance_ton: 1000
        })
        .eq('id', 50);
        
      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', updateError);
      } else {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 50 –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    
    const { data: finalUser, error: finalError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 50)
      .single();
      
    if (finalError || !finalUser) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } else {
      console.log('\n‚ú® –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 50:');
      console.log(`   ID: ${finalUser.id}`);
      console.log(`   telegram_id: ${finalUser.telegram_id}`);
      console.log(`   username: ${finalUser.username}`);
      console.log(`   ref_code: ${finalUser.ref_code}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å UNI: ${finalUser.balance_uni}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å TON: ${finalUser.balance_ton}`);
    }
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üéØ –í —Å–∏—Å—Ç–µ–º–µ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 50 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanupAccounts();