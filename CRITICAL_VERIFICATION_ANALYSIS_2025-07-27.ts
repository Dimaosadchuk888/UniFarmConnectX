/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê
 * –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑ —Å 100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—É—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è TON Boost –∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

import { supabase } from './core/supabase';

async function verifyAnalysis() {
  console.log('üî¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê');
  console.log('='.repeat(70));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –°–õ–£–ß–ê–ï–í –í–û–ó–í–†–ê–¢–ê TON:');
    console.log('-'.repeat(50));
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: –ø–æ–∫—É–ø–∫–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—Ç
    const { data: suspiciousTransactions, error: suspError } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .or('description.ilike.%boost%,type.eq.BOOST_PURCHASE,metadata->>original_type.eq.TON_BOOST_DEPOSIT')
      .order('created_at', { ascending: false });
    
    if (suspError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', suspError);
      return;
    }
    
    if (suspiciousTransactions && suspiciousTransactions.length > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ Boost/Deposit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24—á: ${suspiciousTransactions.length}`);
      
      const userAnalysis = new Map();
      
      suspiciousTransactions.forEach(tx => {
        const userId = tx.user_id.toString();
        if (!userAnalysis.has(userId)) {
          userAnalysis.set(userId, { purchases: [], deposits: [], boostPurchases: [] });
        }
        
        const userData = userAnalysis.get(userId);
        if (tx.type === 'BOOST_PURCHASE') {
          userData.boostPurchases.push(tx);
        } else if (tx.metadata?.original_type === 'TON_BOOST_DEPOSIT') {
          userData.deposits.push(tx);
        } else if (tx.description?.toLowerCase().includes('–ø–æ–∫—É–ø–∫–∞')) {
          userData.purchases.push(tx);
        }
      });
      
      console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
      
      for (const [userId, data] of userAnalysis) {
        const { purchases, deposits, boostPurchases } = data;
        
        if (boostPurchases.length > 0) {
          console.log(`\nüë§ User ${userId}:`);
          console.log(`  üõí BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${boostPurchases.length}`);
          console.log(`  üì• TON_BOOST_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${deposits.length}`);
          console.log(`  üí∞ –ü–æ–∫—É–ø–æ–∫ (–æ–ø–∏—Å–∞–Ω–∏–µ): ${purchases.length}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          boostPurchases.forEach((tx, index) => {
            console.log(`\n  üìã BOOST_PURCHASE #${index + 1}:`);
            console.log(`     ID: ${tx.id}`);
            console.log(`     Amount TON: ${tx.amount_ton}`);
            console.log(`     Type: ${tx.type}`);
            console.log(`     Created: ${new Date(tx.created_at).toLocaleString()}`);
            console.log(`     Description: ${tx.description}`);
            
            if (tx.metadata) {
              console.log(`     Metadata:`);
              console.log(`       - original_type: ${tx.metadata.original_type}`);
              console.log(`       - transaction_source: ${tx.metadata.transaction_source}`);
              console.log(`       - boost_package_id: ${tx.metadata.boost_package_id}`);
            }
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≠—Ç–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ?
            const amount = parseFloat(tx.amount_ton || '0');
            if (amount > 0) {
              console.log(`     üî¥ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´: BOOST_PURCHASE –∑–∞—á–∏—Å–ª—è–µ—Ç +${amount} TON!`);
            } else {
              console.log(`     ‚úÖ BOOST_PURCHASE –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ—Ç ${amount} TON`);
            }
          });
        }
      }
    }
    
    // 2. –ü–†–û–í–ï–†–Ø–ï–ú MAPPING –ò shouldUpdateBalance –õ–û–ì–ò–ö–£
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò shouldUpdateBalance:');
    console.log('-'.repeat(50));
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ TransactionService
    const TRANSACTION_TYPE_MAPPING = {
      'BOOST_PURCHASE': 'FARMING_REWARD'
    };
    
    const shouldUpdateBalanceTypes = [
      'FARMING_REWARD',
      'REFERRAL_REWARD', 
      'MISSION_REWARD',
      'DAILY_BONUS',
      'TON_BOOST_INCOME',
      'UNI_DEPOSIT',
      'TON_DEPOSIT',
      'AIRDROP_REWARD',
      'DEPOSIT'
    ];
    
    console.log('üìã –ê–ù–ê–õ–ò–ó MAPPING:');
    console.log(`BOOST_PURCHASE ‚Üí ${TRANSACTION_TYPE_MAPPING['BOOST_PURCHASE']}`);
    console.log(`shouldUpdateBalance('BOOST_PURCHASE'): ${shouldUpdateBalanceTypes.includes('BOOST_PURCHASE')}`);
    console.log(`shouldUpdateBalance('FARMING_REWARD'): ${shouldUpdateBalanceTypes.includes('FARMING_REWARD')}`);
    
    console.log('\nüîç –õ–û–ì–ò–ß–ï–°–ö–ê–Ø –¶–ï–ü–û–ß–ö–ê:');
    console.log('1. TonFarmingRepository —Å–æ–∑–¥–∞–µ—Ç BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    console.log('2. TransactionService –º–∞–ø–∏—Ç BOOST_PURCHASE ‚Üí FARMING_REWARD');
    console.log('3. shouldUpdateBalance(BOOST_PURCHASE) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FALSE');
    console.log('4. shouldUpdateBalance –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ dbTransactionType (FARMING_REWARD)');
    console.log('5. shouldUpdateBalance(FARMING_REWARD) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TRUE');
    console.log('6. updateUserBalance –∑–∞—á–∏—Å–ª—è–µ—Ç amount_ton –Ω–∞ –±–∞–ª–∞–Ω—Å');
    
    if (shouldUpdateBalanceTypes.includes('FARMING_REWARD')) {
      console.log('\nüî¥ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´: FARMING_REWARD –≤—Ö–æ–¥–∏—Ç –≤ shouldUpdateBalance!');
    }
    
    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –ë–ê–õ–ê–ù–°–û–í:');
    console.log('-'.repeat(50));
    
    // –ë–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å BOOST_PURCHASE –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const uniqueUserIds = Array.from(new Set(
      suspiciousTransactions
        ?.filter(tx => tx.type === 'BOOST_PURCHASE')
        ?.map(tx => tx.user_id)
        ?.slice(0, 5) || []
    ));
    
    for (const userId of uniqueUserIds) {
      const { data: userBalance } = await supabase
        .from('users')
        .select('id, balance_ton')
        .eq('id', userId)
        .single();
      
      if (userBalance) {
        // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBoostTx = suspiciousTransactions.filter(tx => 
          tx.user_id === userId && tx.type === 'BOOST_PURCHASE'
        );
        
        const totalBoostAmount = userBoostTx.reduce((sum, tx) => 
          sum + parseFloat(tx.amount_ton || '0'), 0
        );
        
        console.log(`User ${userId}:`);
        console.log(`  –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userBalance.balance_ton} TON`);
        console.log(`  –°—É–º–º–∞ BOOST_PURCHASE: +${totalBoostAmount.toFixed(6)} TON`);
        console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BOOST_PURCHASE: ${userBoostTx.length}`);
        
        if (totalBoostAmount > 0) {
          console.log(`  üî¥ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: BOOST_PURCHASE –∑–∞—á–∏—Å–ª–∏–ª TON –Ω–∞ –±–∞–ª–∞–Ω—Å!`);
        }
      }
    }
    
    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ò–°–•–û–î–ù–´–ô –ö–û–î –ù–ê –°–ï–†–í–ï–†–ï
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø:');
    console.log('-'.repeat(50));
    
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:');
    console.log(`- BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${suspiciousTransactions?.filter(tx => tx.type === 'BOOST_PURCHASE').length || 0}`);
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å BOOST_PURCHASE: ${uniqueUserIds.length}`);
    
    const positiveBoostPurchases = suspiciousTransactions?.filter(tx => 
      tx.type === 'BOOST_PURCHASE' && parseFloat(tx.amount_ton || '0') > 0
    ).length || 0;
    
    console.log(`- BOOST_PURCHASE —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π: ${positiveBoostPurchases}`);
    
    if (positiveBoostPurchases > 0) {
      console.log('\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï:');
      console.log(`${positiveBoostPurchases} BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ó–ê–ß–ò–°–õ–Ø–Æ–¢ TON –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∞–Ω–∏—è!`);
      console.log('–≠—Ç–æ –Ω–∞ 100% –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ–∑.');
    }
    
    // 5. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–°–¢–í–ò–ô –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–°–¢–í–ò–ô –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('-'.repeat(50));
    
    console.log('üéØ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:');
    console.log('–ò–∑–º–µ–Ω–∏—Ç—å mapping: BOOST_PURCHASE ‚Üí FARMING_REWARD');
    console.log('–ù–∞: BOOST_PURCHASE ‚Üí —Ç–∏–ø –±–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    
    console.log('\n‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –ü–û–°–õ–ï–î–°–¢–í–ò–Ø:');
    console.log('- TON Boost –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ–Ω—å–≥–∏');
    console.log('- –£—Å—Ç—Ä–∞–Ω–∏—Ç—Å—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤');
    console.log('- –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏—á–Ω–æ');
    
    console.log('\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò:');
    console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç –ø–æ–ª—É—á–∞—Ç—å "–≤–æ–∑–≤—Ä–∞—Ç—ã"');
    console.log('- –ù—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –æ—Ç BOOST_PURCHASE');
    console.log('- –í–æ–∑–º–æ–∂–Ω—ã –∂–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≤—ã–∫—à–∏—Ö –∫ "–≤–æ–∑–≤—Ä–∞—Ç–∞–º"');
    
    console.log('\nüìã –ü–õ–ê–ù –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BOOST_PAYMENT)');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç—å TonFarmingRepository –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞');
    console.log('3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–æ–≤—ã–π —Ç–∏–ø –ù–ï –≤—Ö–æ–¥–∏—Ç –≤ shouldUpdateBalance');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ staging —Å—Ä–µ–¥–µ');
    console.log('5. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ production —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º');
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
verifyAnalysis()
  .then(() => {
    console.log('\n‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });