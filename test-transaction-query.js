/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

async function testTransactionQueries() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=48...\n');
  
  const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
  const userId = 48;
  
  try {
    // 1. –ú–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç)
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (type = "REFERRAL_REWARD"):');
    const { data: testTransactions, error: testError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'REFERRAL_REWARD');
      
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${testTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ—à–∏–±–∫–∞: ${testError?.message || '–Ω–µ—Ç'}\n`);
    
    // 2. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
    console.log('2Ô∏è‚É£ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (description ilike "%referral%"):');
    const { data: originalTransactions, error: originalError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .ilike('description', '%referral%')
      .order('created_at', { ascending: false });
      
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${originalTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ—à–∏–±–∫–∞: ${originalError?.message || '–Ω–µ—Ç'}`);
    
    if (originalError) {
      console.log('  ‚ùå –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê –í –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú –ó–ê–ü–†–û–°–ï!');
      console.log('  Error details:', originalError);
      console.log('  Error message:', originalError.message);
      console.log('  Error code:', originalError.code);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ–æ–±—â–µ –µ—Å—Ç—å
    console.log('\n3Ô∏è‚É£ –í—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const { data: allTransactions, error: allError } = await supabase
      .from('transactions')
      .select('type, description')
      .eq('user_id', userId)
      .limit(10);
      
    if (allError) {
      console.log('  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError.message);
    } else {
      const types = [...new Set(allTransactions.map(t => t.type))];
      console.log('  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', types);
      
      const descriptions = allTransactions.filter(t => t.description).map(t => t.description).slice(0, 5);
      console.log('  –ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:', descriptions);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\n4Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ):');
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('id, username, referred_by, ref_code, telegram_id')
      .order('id');
      
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${allUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—à–∏–±–∫–∞: ${usersError?.message || '–Ω–µ—Ç'}`);
    
    if (usersError) {
      console.log('  ‚ùå –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê –í –ó–ê–ü–†–û–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô!');
      console.log('  Error details:', usersError);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testTransactionQueries();