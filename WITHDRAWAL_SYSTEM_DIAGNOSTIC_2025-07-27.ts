#!/usr/bin/env tsx

/**
 * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
 * –¢–æ—á–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–≤–µ–Ω—å–µ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ –±–µ–∑ –ø—Ä–∞–≤–æ–∫ –∫–æ–¥–∞
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import fetch from 'node-fetch';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function diagnosticWithdrawalSystem() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í');
  console.log('=' .repeat(50));
  
  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –í–´–í–û–î
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥...');
    
    const { data: withdrawRequests, error: withdrawError } = await supabase
      .from('withdraw_requests')
      .select(`
        id, 
        user_id, 
        telegram_id,
        username,
        amount, 
        currency, 
        status, 
        wallet_address,
        created_at,
        processed_at
      `)
      .order('created_at', { ascending: false })
      .limit(10);

    if (withdrawError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', withdrawError.message);
    } else {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: ${withdrawRequests?.length || 0}`);
      
      if (withdrawRequests && withdrawRequests.length > 0) {
        withdrawRequests.forEach((req, index) => {
          console.log(`\n   [${index + 1}] ID: ${req.id} | Status: ${req.status}`);
          console.log(`       User: ${req.username || req.telegram_id} (ID: ${req.user_id})`);
          console.log(`       Amount: ${req.amount} ${req.currency}`);
          console.log(`       Wallet: ${req.wallet_address}`);
          console.log(`       Created: ${req.created_at}`);
          console.log(`       Processed: ${req.processed_at || '–ù–ï –û–ë–†–ê–ë–û–¢–ê–ù–û'}`);
        });
      }
    }

    // 2. –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í–´–í–û–î–ê
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞ –≤ –ë–î...');
    
    const { data: withdrawalTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['WITHDRAWAL', 'withdrawal', 'UNI_WITHDRAWAL', 'TON_WITHDRAWAL'])
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(10);

    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞:', txError.message);
    } else {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞ –∑–∞ 24 —á–∞—Å–∞: ${withdrawalTransactions?.length || 0}`);
      
      if (withdrawalTransactions && withdrawalTransactions.length > 0) {
        withdrawalTransactions.forEach((tx, index) => {
          console.log(`\n   [${index + 1}] TX ID: ${tx.id} | Type: ${tx.type}`);
          console.log(`       User ID: ${tx.user_id}`);
          console.log(`       Amount: ${tx.amount} ${tx.currency}`);
          console.log(`       Status: ${tx.status}`);
          console.log(`       Created: ${tx.created_at}`);
          console.log(`       Description: ${tx.description}`);
          if (tx.metadata) {
            console.log(`       Metadata: ${JSON.stringify(tx.metadata)}`);
          }
        });
      }
    }

    // 3. –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù-–ë–û–¢–ê –°–¢–ê–¢–£–°–ê
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞...');
    
    const adminBotToken = process.env.ADMIN_BOT_TOKEN;
    if (!adminBotToken) {
      console.log('‚ùå ADMIN_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    } else {
      console.log('‚úÖ ADMIN_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      
      try {
        const botInfoResponse = await fetch(`https://api.telegram.org/bot${adminBotToken}/getMe`);
        const botInfo = await botInfoResponse.json();
        
        if (botInfo.ok) {
          console.log(`‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @${botInfo.result.username} (ID: ${botInfo.result.id})`);
        } else {
          console.log('‚ùå –ê–¥–º–∏–Ω-–±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', botInfo.description);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
        const webhookResponse = await fetch(`https://api.telegram.org/bot${adminBotToken}/getWebhookInfo`);
        const webhookInfo = await webhookResponse.json();
        
        if (webhookInfo.ok) {
          console.log(`üì° Webhook URL: ${webhookInfo.result.url || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
          console.log(`üì° Pending Updates: ${webhookInfo.result.pending_update_count || 0}`);
          console.log(`üì° Last Error: ${webhookInfo.result.last_error_message || '–ù–ï–¢'}`);
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞:', error);
      }
    }

    // 4. –ü–†–û–í–ï–†–ö–ê WEBHOOK ENDPOINT
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint...');
    
    const appUrl = process.env.APP_DOMAIN || 'https://uni-farm-connect-unifarm01010101.replit.app';
    const webhookUrl = `${appUrl}/api/v2/admin-bot/webhook`;
    
    try {
      const testResponse = await fetch(webhookUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ test: true })
      });
      
      console.log(`üåê Webhook endpoint (${webhookUrl}):`);
      console.log(`   Status: ${testResponse.status} ${testResponse.statusText}`);
      
      if (testResponse.status === 404) {
        console.log('‚ùå Webhook endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404) - —Ä–æ—É—Ç–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else if (testResponse.status === 200) {
        console.log('‚úÖ Webhook endpoint –æ—Ç–≤–µ—á–∞–µ—Ç');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook endpoint:', error);
    }

    // 5. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ù–ï–î–ê–í–ù–ò–ú–ò –í–´–í–û–î–ê–ú–ò
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏...');
    
    if (withdrawRequests && withdrawRequests.length > 0) {
      const recentUserIds = [...new Set(withdrawRequests.map(req => req.user_id))];
      
      for (const userId of recentUserIds.slice(0, 5)) {
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('id, username, balance_uni, balance_ton, telegram_id')
          .eq('id', userId)
          .single();

        if (user) {
          console.log(`\n   User ${user.id} (@${user.username}):`);
          console.log(`     UNI Balance: ${user.balance_uni}`);
          console.log(`     TON Balance: ${user.balance_ton}`);
          console.log(`     Telegram ID: ${user.telegram_id}`);
        }
      }
    }

    // 6. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω-–±–æ—Ç–∞...');
    
    const fs = await import('fs');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω-–±–æ—Ç–∞
    const serviceExists = fs.existsSync('modules/adminBot/service.ts');
    const controllerExists = fs.existsSync('modules/adminBot/controller.ts');
    const routesExists = fs.existsSync('modules/adminBot/routes.ts');
    
    console.log(`üìÅ modules/adminBot/service.ts: ${serviceExists ? '‚úÖ EXISTS' : '‚ùå MISSING'}`);
    console.log(`üìÅ modules/adminBot/controller.ts: ${controllerExists ? '‚úÖ EXISTS' : '‚ùå MISSING'}`);
    console.log(`üìÅ modules/adminBot/routes.ts: ${routesExists ? '‚úÖ EXISTS' : '‚ùå MISSING'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–æ–¥—É–ª–µ –≤—ã–≤–æ–¥–∞
    if (fs.existsSync('modules/wallet/service.ts')) {
      const walletService = fs.readFileSync('modules/wallet/service.ts', 'utf8');
      
      const hasAdminNotification = walletService.includes('AdminBotService') || 
                                   walletService.includes('sendMessage') ||
                                   walletService.includes('notifyWithdrawal') ||
                                   walletService.includes('admin-bot');
      
      console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –≤ wallet/service.ts: ${hasAdminNotification ? '‚úÖ –ù–ê–ô–î–ï–ù–´' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}`);
      
      // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
      const notificationPatterns = [
        'AdminBotService',
        'sendMessage',
        'notifyWithdrawal',
        'admin_bot_token',
        'ADMIN_BOT_TOKEN'
      ];
      
      notificationPatterns.forEach(pattern => {
        const found = walletService.includes(pattern);
        console.log(`   - ${pattern}: ${found ? '‚úÖ' : '‚ùå'}`);
      });
    }

    // 7. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    const envVars = [
      'SUPABASE_URL',
      'SUPABASE_KEY', 
      'ADMIN_BOT_TOKEN',
      'APP_DOMAIN',
      'TELEGRAM_WEBAPP_URL'
    ];
    
    envVars.forEach(varName => {
      const exists = !!process.env[varName];
      console.log(`üîë ${varName}: ${exists ? '‚úÖ SET' : '‚ùå MISSING'}`);
    });

    // 8. –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\n8Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê...');
    
    const issues = [];
    
    if (!withdrawRequests || withdrawRequests.length === 0) {
      issues.push('–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (!adminBotToken) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ADMIN_BOT_TOKEN');
    }
    
    if (!serviceExists || !controllerExists || !routesExists) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –∞–¥–º–∏–Ω-–±–æ—Ç–∞');
    }
    
    if (issues.length === 0) {
      console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
      console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∑–æ–≤—ã AdminBotService –≤ processWithdrawal');
      console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏');
      console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook URL —Å–Ω–∞—Ä—É–∂–∏');
    } else {
      console.log('‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
      issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`);
      });
    }

    return {
      withdraw_requests_count: withdrawRequests?.length || 0,
      withdrawal_transactions_count: withdrawalTransactions?.length || 0,
      admin_bot_configured: !!adminBotToken,
      webhook_files_exist: serviceExists && controllerExists && routesExists,
      issues: issues
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í');
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toISOString()}\n`);
    
    const result = await diagnosticWithdrawalSystem();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.log(`–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: ${result.withdraw_requests_count}`);
    console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–≤–æ–¥–∞: ${result.withdrawal_transactions_count}`);
    console.log(`–ê–¥–º–∏–Ω-–±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${result.admin_bot_configured}`);
    console.log(`–§–∞–π–ª—ã webhook —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ${result.webhook_files_exist}`);
    console.log(`–ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${result.issues.length}`);
    
    process.exit(result.issues.length === 0 ? 0 : 1);
    
  } catch (error) {
    console.error('\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();