/**
 * ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –±–æ—Ç–∞ UniFarm —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —É–º–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const APP_URL = process.env.NODE_ENV === 'production' 
  ? 'https://uni-farm-connect-xo-osadchukdmitro2.replit.app'
  : 'https://uni-farm-connect-xo-osadchukdmitro2.replit.app';

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
 */
async function checkBotInfo() {
  log('\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...', colors.cyan);
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getMe`);
    const data = await response.json();
    
    if (data.ok) {
      log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${data.result.username}`, colors.green);
      log(`üìõ –ò–º—è: ${data.result.first_name}`, colors.blue);
      log(`üÜî ID: ${data.result.id}`, colors.blue);
      return true;
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${data.description}`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
 */
async function setupMainBotWebhook() {
  log('\nüîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...', colors.cyan);
  
  const webhookUrl = `${APP_URL}/api/telegram/webhook`;
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ['message', 'callback_query']
      })
    });
    
    const data = await response.json();
    
    if (data.ok) {
      log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`, colors.green);
      return true;
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${data.description}`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook
 */
async function checkWebhook() {
  log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook...', colors.cyan);
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    const data = await response.json();
    
    if (data.ok) {
      const info = data.result;
      log(`üîó URL: ${info.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`, colors.blue);
      log(`‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: ${info.url ? '–î–∞' : '–ù–µ—Ç'}`, info.url ? colors.green : colors.red);
      log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${info.last_error_date ? new Date(info.last_error_date * 1000).toLocaleString('ru-RU') : '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`, colors.blue);
      
      if (info.last_error_message) {
        log(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${info.last_error_message}`, colors.yellow);
      }
      
      return Boolean(info.url);
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: ${data.description}`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–º–Ω–æ–≥–æ –±–æ—Ç–∞
 */
async function setupSmartBotCommands() {
  log('\n‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–º–Ω–æ–≥–æ –±–æ—Ç–∞...', colors.cyan);
  
  const commands = [
    {
      command: 'start',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å UniFarm (—É–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)'
    },
    {
      command: 'adminka',
      description: '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'
    },
    {
      command: 'help',
      description: '–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
    }
  ];
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setMyCommands`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ commands })
    });
    
    const data = await response.json();
    
    if (data.ok) {
      log(`‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (${commands.length})`, colors.green);
      commands.forEach(cmd => {
        log(`   /${cmd.command} - ${cmd.description}`, colors.blue);
      });
      return true;
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: ${data.description}`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
 */
async function checkServerAPI() {
  log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...', colors.cyan);
  
  try {
    const response = await fetch(`${APP_URL}/api/health`);
    const data = await response.json();
    
    if (response.ok) {
      log(`‚úÖ API —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–µ–Ω`, colors.green);
      log(`üìä –°—Ç–∞—Ç—É—Å: ${data.status || 'OK'}`, colors.blue);
      return true;
    } else {
      log(`‚ùå API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
async function testAdminFunctions() {
  log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...', colors.cyan);
  
  const testUsername = 'a888bnd';
  const adminSecret = 'unifarm_admin_secret_2025';
  
  try {
    // –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ë–î
    const statusResponse = await fetch(`${APP_URL}/api/admin/db-status`);
    
    if (statusResponse.ok) {
      log(`‚úÖ –°—Ç–∞—Ç—É—Å –ë–î –¥–æ—Å—Ç—É–ø–µ–Ω`, colors.green);
      const statusData = await statusResponse.json();
      log(`üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${statusData.data?.database || 'Unknown'}`, colors.blue);
    } else {
      log(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${statusResponse.status})`, colors.yellow);
    }
    
    // –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π –ë–î (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    const eventsResponse = await fetch(`${APP_URL}/api/db/events?admin_username=${testUsername}&admin_key=${adminSecret}`);
    
    if (eventsResponse.ok) {
      log(`‚úÖ –°–æ–±—ã—Ç–∏—è –ë–î –¥–æ—Å—Ç—É–ø–Ω—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π`, colors.green);
      const eventsData = await eventsResponse.json();
      log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${eventsData.data?.events?.length || 0}`, colors.blue);
    } else {
      log(`‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –ë–î —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (${eventsResponse.status})`, colors.yellow);
    }
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
 */
function showInterfaceDifferences() {
  log('\nüé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', colors.magenta);
  
  log('\nüë• –û–ë–´–ß–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –≤–∏–¥—è—Ç:', colors.blue);
  log('   üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm', colors.reset);
  log('   ‚ÑπÔ∏è –ü–æ–º–æ—â—å', colors.reset);
  log('   üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', colors.reset);
  
  log('\nüõ†Ô∏è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ (@a888bnd, @DimaOsadchuk) –≤–∏–¥—è—Ç:', colors.green);
  log('   üì± –û—Ç–∫—Ä—ã—Ç—å UniFarm', colors.reset);
  log('   üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', colors.reset);
  log('   ‚ÑπÔ∏è –ü–æ–º–æ—â—å', colors.reset);
  log('   üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', colors.reset);
  
  log('\nüéõÔ∏è –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò –¥–æ—Å—Ç—É–ø–Ω–æ:', colors.cyan);
  log('   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Å–æ–±—ã—Ç–∏—è, —Å—Ç–∞—Ç—É—Å)', colors.reset);
  log('   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–æ–∏—Å–∫)', colors.reset);
  log('   üí∞ –§–∏–Ω–∞–Ω—Å—ã (–∑–∞—è–≤–∫–∏, –¥–µ–ø–æ–∑–∏—Ç—ã)', colors.reset);
  log('   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ—Ç—á–µ—Ç—ã, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', colors.reset);
  log('   üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', colors.reset);
  log('   ‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ (–ª–æ–≥–∏, —Ç–µ—Å—Ç—ã)', colors.reset);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function main() {
  log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –±–æ—Ç–∞ UniFarm', colors.cyan);
  log('=' * 50, colors.blue);
  
  if (!BOT_TOKEN) {
    log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN)', colors.red);
    log('üìù –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env', colors.yellow);
    process.exit(1);
  }
  
  const results = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
  results.push(await checkBotInfo());
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
  results.push(await checkServerAPI());
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
  results.push(await setupMainBotWebhook());
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
  results.push(await checkWebhook());
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  results.push(await setupSmartBotCommands());
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  results.push(await testAdminFunctions());
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
  showInterfaceDifferences();
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢', colors.cyan);
  log('=' * 30, colors.blue);
  
  const successCount = results.filter(Boolean).length;
  const totalCount = results.length;
  
  if (successCount === totalCount) {
    log(`üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! (${successCount}/${totalCount})`, colors.green);
    log('‚úÖ –£–º–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', colors.green);
  } else {
    log(`‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successCount}/${totalCount} –ø—Ä–æ–≤–µ—Ä–æ–∫`, colors.yellow);
    log('üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', colors.yellow);
  }
  
  log('\nüì± –ö–ê–ö –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:', colors.magenta);
  log('1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @UniFarming_Bot –≤ Telegram', colors.blue);
  log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', colors.blue);
  log('3. –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', colors.blue);
  log('4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–∏–¥—è—Ç –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"', colors.blue);
  log('5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /adminka –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞', colors.blue);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(error => {
  log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
  process.exit(1);
});