/**
 * –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REFERRALSERVICE –ë–ï–ó API
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1bm5zdmljYmVic3NyanFlZG9yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDU0NjE3MiwiZXhwIjoyMDQ2MTIyMTcyfQ.qe7iifh-kILRJoJT1Wvp6T7pBR1F7YRzLiHb9tREf7I';

const supabase = createClient(supabaseUrl, supabaseKey);

class TestReferralService {
  
  async getRealReferralStats(userId) {
    try {
      console.log('üîç [ReferralService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã', { userId });

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('id, username, ref_code')
        .eq('id', userId)
        .single();

      if (userError || !user) {
        console.log('‚ùå [ReferralService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { userId, error: userError?.message });
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      console.log('‚úÖ [ReferralService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', { user });

      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data: referralTransactions, error: refError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .ilike('description', '%referral%')
        .order('created_at', { ascending: false });

      if (refError) {
        console.log('‚ùå [ReferralService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', {
          userId,
          error: refError.message
        });
        throw refError;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralTransactions?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

      // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
      const { data: allUsers, error: usersError } = await supabase
        .from('users')
        .select('id, username, first_name, referred_by, balance_uni, balance_ton, uni_farming_start_timestamp, ton_boost_package')
        .order('id', { ascending: true });

      if (usersError) {
        console.log('‚ùå [ReferralService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', { error: usersError.message });
        throw usersError;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ`);

      return {
        success: true,
        user: user,
        transactions: referralTransactions?.length || 0,
        totalUsers: allUsers?.length || 0
      };

    } catch (error) {
      console.log('‚ùå [ReferralService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
        userId,
        error: error instanceof Error ? error.message : String(error)
      });
      
      throw error;
    }
  }
}

async function testServiceDirect() {
  console.log('üîç –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ReferralService');
  console.log('='.repeat(70));
  
  const userId = 48;
  const service = new TestReferralService();
  
  try {
    const result = await service.getRealReferralStats(userId);
    console.log('‚úÖ –£–°–ü–ï–®–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(JSON.stringify(result, null, 2));
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ò–°–ê:', error.message);
  }
  
  console.log('\n' + '='.repeat(70));
}

testServiceDirect().catch(console.error);