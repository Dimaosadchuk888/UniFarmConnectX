/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Å —É—á–µ—Ç–æ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ 
 * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö.
 * 
 * –°–æ–≥–ª–∞—à–µ–Ω–∏—è –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏:
 * - –§–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤: camelCase + Service.ts
 * - –§–∞–π–ª—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: camelCase + Controller.ts
 * - –§–∞–π–ª—ã —É—Ç–∏–ª–∏—Ç: camelCase.ts
 * - –§–∞–π–ª—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ React: PascalCase.tsx
 */

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';
import { exec } from 'child_process';
import { promisify } from 'util';

const execPromise = promisify(exec);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ { oldPath: '–ø—É—Ç—å/–∫/—Å—Ç–∞—Ä–æ–º—É/—Ñ–∞–π–ª—É', newPath: '–ø—É—Ç—å/–∫/–Ω–æ–≤–æ–º—É/—Ñ–∞–π–ª—É' }
  renameList: [
    // –°–µ—Ä–≤–∏—Å—ã (camelCase)
    { oldPath: 'server/services/UserService.ts', newPath: 'server/services/userService.ts' },
    { oldPath: 'server/services/TransactionService.ts', newPath: 'server/services/transactionService.ts' },
    { oldPath: 'server/services/SessionService.ts', newPath: 'server/services/sessionService.ts' },
    
    // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (camelCase)
    { oldPath: 'server/controllers/UserController.ts', newPath: 'server/controllers/userController.ts' },
    { oldPath: 'server/controllers/TransactionController.ts', newPath: 'server/controllers/transactionController.ts' },
    { oldPath: 'server/controllers/SessionController.ts', newPath: 'server/controllers/sessionController.ts' },
    
    // –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å...
  ],
  
  // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
  projectRoot: './',
  
  // –§–∞–π–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
  filesToSearch: [
    './server/**/*.ts', 
    './client/src/**/*.{ts,tsx}',
    './shared/**/*.ts'
  ],
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
  excludedFiles: [
    '**/node_modules/**',
    '**/dist/**',
    '**/build/**'
  ]
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function fileExists(filePath) {
  try {
    await fs.promises.access(filePath, fs.constants.F_OK);
    return true;
  } catch (error) {
    return false;
  }
}

async function createBackupOfFile(filePath) {
  const backupPath = `${filePath}.bak`;
  await fs.promises.copyFile(filePath, backupPath);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
  return backupPath;
}

async function revertFromBackup(backupPath) {
  const originalPath = backupPath.replace('.bak', '');
  await fs.promises.copyFile(backupPath, originalPath);
  console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${originalPath}`);
}

async function getAllFilesToUpdate() {
  let files = [];
  
  for (const pattern of CONFIG.filesToSearch) {
    const matchedFiles = await glob(pattern, { ignore: CONFIG.excludedFiles });
    files.push(...matchedFiles);
  }
  
  return files;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function moveFile(oldPath, newPath) {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!(await fileExists(oldPath))) {
    console.warn(`‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${oldPath}`);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
  if (await fileExists(newPath)) {
    // –§–∞–π–ª –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–∑-–∑–∞ case-insensitive —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const oldContent = await fs.promises.readFile(oldPath, 'utf8');
    const newContent = await fs.promises.readFile(newPath, 'utf8');
    
    if (oldContent === newContent) {
      console.log(`‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –Ω–æ–≤–æ–º—É –ø—É—Ç–∏: ${newPath}`);
      return true;
    } else {
      console.error(`‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: ${newPath}`);
      return false;
    }
  }
  
  // –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const targetDir = path.dirname(newPath);
  try {
    await fs.promises.mkdir(targetDir, { recursive: true });
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
  
  // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
  await fs.promises.copyFile(oldPath, newPath);
  console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${oldPath} -> ${newPath}`);
  
  return true;
}

async function updateImports(file, oldPath, newPath) {
  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
  const fileDir = path.dirname(file);
  const oldRelativePath = path.relative(fileDir, oldPath).replace(/\.ts$/, '');
  const newRelativePath = path.relative(fileDir, newPath).replace(/\.ts$/, '');
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ (—Å –∑–∞–º–µ–Ω–æ–π –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–ª–µ—à–µ–π –Ω–∞ –ø—Ä—è–º—ã–µ)
  const oldImportPath = oldRelativePath.replace(/\\/g, '/');
  const newImportPath = newRelativePath.replace(/\\/g, '/');
  
  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å ./ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const oldImport = oldImportPath.startsWith('.') ? oldImportPath : `./${oldImportPath}`;
  const newImport = newImportPath.startsWith('.') ? newImportPath : `./${newImportPath}`;
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª –∏–º–ø–æ—Ä—Ç
  let content = await fs.promises.readFile(file, 'utf8');
  
  // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
  const importPatterns = [
    `import .*;? from ['"]${oldImport}['"]`,
    `import .*?['"]${oldImport}['"].*?`,
    `require\\(['"]${oldImport}['"]\\)`,
    `from ['"]${oldImport}['"]`
  ];
  
  let fileWasUpdated = false;
  
  for (const pattern of importPatterns) {
    const regex = new RegExp(pattern, 'g');
    if (regex.test(content)) {
      // –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
      if (!fileWasUpdated) {
        await createBackupOfFile(file);
        fileWasUpdated = true;
      }
      
      // –ó–∞–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã
      content = content.replace(regex, (match) => {
        return match.replace(oldImport, newImport);
      });
    }
  }
  
  // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
  const oldAbsoluteImport = `@server/${oldPath.replace('server/', '').replace(/\.ts$/, '')}`;
  const newAbsoluteImport = `@server/${newPath.replace('server/', '').replace(/\.ts$/, '')}`;
  
  if (content.includes(oldAbsoluteImport)) {
    // –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
    if (!fileWasUpdated) {
      await createBackupOfFile(file);
      fileWasUpdated = true;
    }
    
    // –ó–∞–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã
    content = content.replace(new RegExp(oldAbsoluteImport, 'g'), newAbsoluteImport);
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (fileWasUpdated) {
    await fs.promises.writeFile(file, content, 'utf8');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${file}`);
    return true;
  }
  
  return false;
}

async function processRename(item) {
  console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: ${item.oldPath} -> ${item.newPath}`);
  
  // –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
  const oldFullPath = path.join(CONFIG.projectRoot, item.oldPath);
  const newFullPath = path.join(CONFIG.projectRoot, item.newPath);
  
  // –®–∞–≥ 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  const fileMoved = await moveFile(oldFullPath, newFullPath);
  if (!fileMoved) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${item.oldPath}`);
    return false;
  }
  
  // –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
  const filesToUpdate = await getAllFilesToUpdate();
  let importUpdatesCount = 0;
  
  for (const file of filesToUpdate) {
    const updated = await updateImports(file, item.oldPath, item.newPath);
    if (updated) {
      importUpdatesCount++;
    }
  }
  
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ ${importUpdatesCount} —Ñ–∞–π–ª–∞—Ö –¥–ª—è: ${item.newPath}`);
  
  // –®–∞–≥ 3: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤–æ–≥–æ)
  if (oldFullPath.toLowerCase() !== newFullPath.toLowerCase()) {
    try {
      await fs.promises.unlink(oldFullPath);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${item.oldPath}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${item.oldPath}`);
      console.error(error);
    }
  } else {
    console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ: –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ`);
  }
  
  return true;
}

async function standardizeFilenames() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤...\n');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const item of CONFIG.renameList) {
    try {
      const success = await processRename(item);
      if (success) {
        successCount++;
      } else {
        errorCount++;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${item.oldPath}:`);
      console.error(error);
      errorCount++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('\nüìä –ò—Ç–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`);
  
  if (successCount > 0) {
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async function testGrepImports(oldPath) {
  try {
    const { stdout, stderr } = await execPromise(`grep -r "from.*${oldPath}" --include="*.ts" --include="*.tsx" ./server`);
    console.log('–ù–∞–π–¥–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã:');
    console.log(stdout);
    if (stderr) {
      console.error('–û—à–∏–±–∫–∏:');
      console.error(stderr);
    }
  } catch (error) {
    console.log('–ò–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
standardizeFilenames();