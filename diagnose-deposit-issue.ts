#!/usr/bin/env tsx

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 25 –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ë–î
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface DiagnosisResult {
  step: string;
  status: 'OK' | 'ERROR' | 'WARNING';
  details: any;
  timestamp: string;
}

class DepositDiagnosisService {
  private results: DiagnosisResult[] = [];
  private userId = 25;

  async runDiagnosis(): Promise<void> {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò');
    console.log('=' .repeat(60));
    console.log(`üéØ –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID: ${this.userId}`);
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞ –Ω–µ –¥–µ–ª–∞–µ–º!');
    console.log('=' .repeat(60));

    try {
      await this.checkUserExists();
      await this.checkRecentTransactions();
      await this.checkUserBalance();
      await this.checkSystemLogs();
      await this.checkWalletController();
      await this.checkTonApiStatus();
      await this.checkDeduplicationLogic();
      await this.generateSummary();

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
  }

  private async checkUserExists(): Promise<void> {
    console.log('\nüë§ –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
      const { data: user, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', this.userId)
        .single();

      if (error) {
        this.addResult('User Check', 'ERROR', { error: error.message });
        console.log(`  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${this.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, error.message);
        return;
      }

      this.addResult('User Check', 'OK', {
        userId: user.id,
        telegramId: user.telegram_id,
        username: user.username,
        balanceUni: user.balance_uni,
        balanceTon: user.balance_ton,
        lastActive: user.last_active
      });

      console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
      console.log(`    üì± Telegram ID: ${user.telegram_id}`);
      console.log(`    üë§ Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`    üí∞ UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
      console.log(`    üíé TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
      console.log(`    üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_active}`);

    } catch (error) {
      this.addResult('User Check', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  private async checkRecentTransactions(): Promise<void> {
    console.log('\nüí∏ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
      const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
      
      const { data: transactions, error } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', this.userId)
        .gte('created_at', twoHoursAgo)
        .order('created_at', { ascending: false });

      if (error) {
        this.addResult('Recent Transactions', 'ERROR', { error: error.message });
        console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
        return;
      }

      console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞: ${transactions?.length || 0}`);

      if (transactions && transactions.length > 0) {
        console.log('  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
        transactions.forEach((tx, index) => {
          console.log(`    ${index + 1}. ID: ${tx.id}, –¢–∏–ø: ${tx.type}, –°—É–º–º–∞ TON: ${tx.amount_ton || '0'}, –°—Ç–∞—Ç—É—Å: ${tx.status}`);
          console.log(`       –í—Ä–µ–º—è: ${tx.created_at}, Hash: ${tx.tx_hash_unique || '–Ω–µ—Ç'}`);
        });
      } else {
        console.log('  ‚ö†Ô∏è  –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞!');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: tonDeposits, error: tonError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', this.userId)
        .eq('type', 'TON_DEPOSIT')
        .order('created_at', { ascending: false })
        .limit(5);

      if (!tonError && tonDeposits) {
        console.log(`  üíé –í—Å–µ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${tonDeposits.length}`);
        if (tonDeposits.length > 0) {
          console.log('  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã:');
          tonDeposits.forEach((tx, index) => {
            console.log(`    ${index + 1}. –°—É–º–º–∞: ${tx.amount_ton}, –°—Ç–∞—Ç—É—Å: ${tx.status}, –í—Ä–µ–º—è: ${tx.created_at}`);
          });
        }
      }

      this.addResult('Recent Transactions', 'OK', {
        recentCount: transactions?.length || 0,
        tonDepositsCount: tonDeposits?.length || 0,
        transactions: transactions?.slice(0, 3) || []
      });

    } catch (error) {
      this.addResult('Recent Transactions', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    }
  }

  private async checkUserBalance(): Promise<void> {
    console.log('\nüí∞ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    
    try {
      const { data: user, error } = await supabase
        .from('users')
        .select('balance_uni, balance_ton, updated_at, last_active')
        .eq('id', this.userId)
        .single();

      if (error) {
        this.addResult('Balance Check', 'ERROR', { error: error.message });
        console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.message);
        return;
      }

      console.log('  üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log(`    UNI: ${user.balance_uni}`);
      console.log(`    TON: ${user.balance_ton}`);
      console.log(`    –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updated_at}`);
      console.log(`    –ê–∫—Ç–∏–≤–µ–Ω: ${user.last_active}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º
      const uniBalance = parseFloat(user.balance_uni || '0');
      const tonBalance = parseFloat(user.balance_ton || '0');

      if (isNaN(uniBalance) || isNaN(tonBalance)) {
        console.log('  ‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï –ë–ê–õ–ê–ù–°–´!');
        this.addResult('Balance Check', 'WARNING', {
          uniBalance: user.balance_uni,
          tonBalance: user.balance_ton,
          uniValid: !isNaN(uniBalance),
          tonValid: !isNaN(tonBalance)
        });
      } else {
        this.addResult('Balance Check', 'OK', {
          uniBalance: uniBalance,
          tonBalance: tonBalance,
          updatedAt: user.updated_at
        });
      }

    } catch (error) {
      this.addResult('Balance Check', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  }

  private async checkSystemLogs(): Promise<void> {
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
      const fs = require('fs');
      const path = require('path');
      
      const logDirs = ['logs', 'server/logs', './logs'];
      let foundLogs = false;
      
      for (const logDir of logDirs) {
        try {
          if (fs.existsSync(logDir)) {
            const files = fs.readdirSync(logDir);
            console.log(`  üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: ${logDir}`);
            console.log(`  üìÑ –§–∞–π–ª—ã: ${files.join(', ')}`);
            foundLogs = true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö
            for (const file of files.slice(0, 3)) {
              const logPath = path.join(logDir, file);
              try {
                const content = fs.readFileSync(logPath, 'utf8');
                const lines = content.split('\n').filter(line => line.trim());
                console.log(`    üìù ${file}: ${lines.length} —Å—Ç—Ä–æ–∫, –ø–æ—Å–ª–µ–¥–Ω—è—è: ${lines[lines.length - 1]?.substring(0, 100)}...`);
              } catch (readError) {
                console.log(`    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${file}: ${readError.message}`);
              }
            }
          }
        } catch (dirError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        }
      }
      
      if (!foundLogs) {
        console.log('  ‚ö†Ô∏è  –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö');
      }

      this.addResult('System Logs', foundLogs ? 'OK' : 'WARNING', { logsFound: foundLogs });

    } catch (error) {
      this.addResult('System Logs', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤:', error);
    }
  }

  private async checkWalletController(): Promise<void> {
    console.log('\nüîó –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ WalletController...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WalletController
      let walletControllerExists = false;
      let controllerPath = '';
      
      const possiblePaths = [
        'modules/wallet/controller.ts',
        'server/modules/wallet/controller.ts',
        'src/modules/wallet/controller.ts'
      ];
      
      const fs = require('fs');
      
      for (const path of possiblePaths) {
        if (fs.existsSync(path)) {
          walletControllerExists = true;
          controllerPath = path;
          break;
        }
      }
      
      console.log(`  üìÅ WalletController –Ω–∞–π–¥–µ–Ω: ${walletControllerExists}`);
      if (walletControllerExists) {
        console.log(`  üìÑ –ü—É—Ç—å: ${controllerPath}`);
        
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤
        const content = fs.readFileSync(controllerPath, 'utf8');
        const hasProcessDeposit = content.includes('processDeposit') || content.includes('deposit');
        const hasTonHandling = content.includes('TON') || content.includes('ton');
        
        console.log(`  üîç –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${hasProcessDeposit}`);
        console.log(`  üîç –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É TON: ${hasTonHandling}`);
        
        this.addResult('Wallet Controller', 'OK', {
          exists: true,
          path: controllerPath,
          hasProcessDeposit,
          hasTonHandling
        });
      } else {
        console.log('  ‚ùå WalletController –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        this.addResult('Wallet Controller', 'ERROR', { exists: false });
      }

    } catch (error) {
      this.addResult('Wallet Controller', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WalletController:', error);
    }
  }

  private async checkTonApiStatus(): Promise<void> {
    console.log('\nüåê –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ TON API...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const tonApiKey = process.env.TON_API_KEY;
      const tonApiUrl = process.env.TON_API_URL;
      
      console.log(`  üîë TON_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${!!tonApiKey}`);
      console.log(`  üåê TON_API_URL: ${tonApiUrl || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      
      if (tonApiKey) {
        console.log(`  üîë –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${tonApiKey.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TonAPI SDK
      let tonApiSdkExists = false;
      const fs = require('fs');
      
      try {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        tonApiSdkExists = !!packageJson.dependencies['tonapi-sdk-js'];
        console.log(`  üì¶ TonAPI SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${tonApiSdkExists}`);
      } catch (packageError) {
        console.log('  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å package.json');
      }

      this.addResult('TON API Status', 'OK', {
        hasApiKey: !!tonApiKey,
        apiUrl: tonApiUrl,
        sdkInstalled: tonApiSdkExists
      });

    } catch (error) {
      this.addResult('TON API Status', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON API:', error);
    }
  }

  private async checkDeduplicationLogic(): Promise<void> {
    console.log('\nüîÑ –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: duplicates, error } = await supabase
        .from('transactions')
        .select('type, amount_ton, created_at, tx_hash_unique')
        .eq('user_id', this.userId)
        .eq('type', 'TON_DEPOSIT')
        .order('created_at', { ascending: false });

      if (error) {
        this.addResult('Deduplication Check', 'ERROR', { error: error.message });
        console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', error.message);
        return;
      }

      const groupedByHash = new Map();
      duplicates?.forEach(tx => {
        const key = tx.tx_hash_unique || 'no_hash';
        if (!groupedByHash.has(key)) {
          groupedByHash.set(key, []);
        }
        groupedByHash.get(key).push(tx);
      });

      let duplicateCount = 0;
      console.log('  üîç –ê–Ω–∞–ª–∏–∑ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:');
      
      for (const [hash, transactions] of groupedByHash.entries()) {
        if (transactions.length > 1) {
          console.log(`    ‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –ø–æ hash ${hash}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          duplicateCount += transactions.length - 1;
        }
      }

      if (duplicateCount === 0) {
        console.log('  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      } else {
        console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
      }

      this.addResult('Deduplication Check', duplicateCount === 0 ? 'OK' : 'WARNING', {
        totalDeposits: duplicates?.length || 0,
        duplicateCount,
        uniqueHashes: groupedByHash.size
      });

    } catch (error) {
      this.addResult('Deduplication Check', 'ERROR', { error: error instanceof Error ? error.message : String(error) });
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', error);
    }
  }

  private async generateSummary(): Promise<void> {
    console.log('\n' + '='.repeat(60));
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
    console.log('='.repeat(60));

    const okCount = this.results.filter(r => r.status === 'OK').length;
    const warningCount = this.results.filter(r => r.status === 'WARNING').length;
    const errorCount = this.results.filter(r => r.status === 'ERROR').length;

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${okCount} ‚úÖ | ${warningCount} ‚ö†Ô∏è  | ${errorCount} ‚ùå`);
    console.log();

    this.results.forEach(result => {
      const icon = result.status === 'OK' ? '‚úÖ' : result.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${icon} ${result.step}: ${result.status}`);
      
      if (result.status !== 'OK' && result.details.error) {
        console.log(`    üí¨ ${result.details.error}`);
      }
    });

    console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã
    const hasUserError = this.results.find(r => r.step === 'User Check' && r.status === 'ERROR');
    const hasRecentTransactions = this.results.find(r => r.step === 'Recent Transactions')?.details?.recentCount > 0;
    const hasWalletController = this.results.find(r => r.step === 'Wallet Controller' && r.status === 'OK');
    const hasTonApi = this.results.find(r => r.step === 'TON API Status')?.details?.hasApiKey;

    if (hasUserError) {
      console.log('  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î');
    } else if (!hasRecentTransactions) {
      console.log('  ‚ö†Ô∏è  –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è');
    }

    if (!hasWalletController) {
      console.log('  ‚ùå WalletController –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
    }

    if (!hasTonApi) {
      console.log('  ‚ùå TON API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É TON –±–ª–æ–∫—á–µ–π–Ω —Å–∫–∞–Ω–µ—Ä–∞');
    console.log('  2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–µ–ø–æ–∑–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—à–µ–ª –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
    console.log('  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('  4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É WalletController –∏ –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤');
    
    console.log('='.repeat(60));
  }

  private addResult(step: string, status: 'OK' | 'ERROR' | 'WARNING', details: any): void {
    this.results.push({
      step,
      status,
      details,
      timestamp: new Date().toISOString()
    });
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function main() {
  const diagnosis = new DepositDiagnosisService();
  await diagnosis.runDiagnosis();
}

main().catch(console.error);