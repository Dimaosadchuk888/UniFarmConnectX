/**
 * –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê USER #25 - –¢–û–¢ –°–ê–ú–´–ô –¢–ï–°–¢–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUser25() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê USER #25 –ò–ó –¢–ó');
  console.log('='.repeat(40));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #25
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni, telegram_id')
      .eq('id', 25)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è User #25:', userError.message);
      return;
    }
    
    if (!user) {
      console.log('‚ùå User #25 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ USER #25:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Telegram ID: ${user.telegram_id}`);
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è User #25
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
      return;
    }
    
    console.log(`\nüìä TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER #25 (${transactions?.length || 0}):`);
    
    if (transactions && transactions.length > 0) {
      let totalDeposits = 0;
      let totalWithdraws = 0;
      
      transactions.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      –°—É–º–º–∞: ${tx.amount} TON`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –î–∞—Ç–∞: ${tx.created_at}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        
        if (tx.type === 'DEPOSIT') {
          totalDeposits += parseFloat(tx.amount || tx.amount_ton || 0);
        } else if (tx.type === 'WITHDRAWAL') {
          totalWithdraws += parseFloat(tx.amount || tx.amount_ton || 0);
        }
      });
      
      console.log(`\nüí∞ –ò–¢–û–ì–û:`);
      console.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${totalDeposits} TON`);
      console.log(`   –í—ã–≤–æ–¥—ã: ${totalWithdraws} TON`);
      console.log(`   –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${totalDeposits - totalWithdraws} TON`);
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance_ton} TON`);
      
      const diff = parseFloat(user.balance_ton) - (totalDeposits - totalWithdraws);
      if (Math.abs(diff) > 0.0001) {
        console.log(`   ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${diff} TON`);
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`);
      }
      
    } else {
      console.log('   ‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

checkUser25().catch(console.error);