/**
 * üö® –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–£–î–ê –ü–ò–®–£–¢–°–Ø TON –î–ï–ü–û–ó–ò–¢–´ –ò –ü–û–ß–ï–ú–£ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –¢–û–ù –§–ê–†–ú–ò–ù–ì
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ –ª–æ–≥–∏–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

import { supabase } from './core/supabase';

async function urgentTonDepositsInvestigation() {
  console.log('\nüö® === –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í ===\n');

  try {
    // 1. –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –¢–ê–ë–õ–ò–¶–´ –í –ë–î
    console.log('1Ô∏è‚É£ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –¢–ê–ë–õ–ò–¶ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    console.log('=====================================');
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    try {
      const { data: tables1 } = await supabase.rpc('get_all_tables');
      if (tables1) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ RPC:', tables1.length, '—Ç–∞–±–ª–∏—Ü');
        tables1.forEach((table: any) => console.log(`   - ${table.table_name}`));
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è RPC get_all_tables –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const knownTables = [
      'users', 'transactions', 'boost_purchases', 'boost_packages', 
      'ton_boost_packages', 'ton_farming_data', 'ton_deposits', 
      'ton_boost_deposits', 'farming_packages', 'user_boosts',
      'boosts', 'deposits', 'ton_transactions', 'farming_deposits',
      'ton_farming', 'boost_transactions', 'payment_transactions'
    ];

    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –ò–ó–í–ï–°–¢–ù–´–• –¢–ê–ë–õ–ò–¶:');
    const existingTables: string[] = [];
    
    for (const tableName of knownTables) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
          
        if (!error) {
          existingTables.push(tableName);
          console.log(`   ‚úÖ ${tableName} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          console.log(`   ‚ùå ${tableName} - –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (e) {
        console.log(`   ‚ùå ${tableName} - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      }
    }

    // 2. –ê–ù–ê–õ–ò–ó –í–°–ï–• TON –î–ï–ü–û–ó–ò–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö TON –î–ï–ü–û–ó–ò–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290 –í–û –í–°–ï–• –¢–ê–ë–õ–ò–¶–ê–•:');
    console.log('========================================================');
    
    for (const tableName of existingTables) {
      try {
        // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 290 –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        const { data: records, error } = await supabase
          .from(tableName)
          .select('*')
          .eq('user_id', 290);

        if (!error && records?.length) {
          console.log(`\n   üéØ –ù–ê–ô–î–ï–ù–û –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableName}: ${records.length} –∑–∞–ø–∏—Å–µ–π`);
          records.forEach((record, index) => {
            console.log(`      –ó–∞–ø–∏—Å—å #${index + 1}:`);
            console.log(`      ${JSON.stringify(record, null, 8)}`);
          });
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }

    // 3. –ê–ù–ê–õ–ò–ó –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\n3Ô∏è‚É£ –í–°–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –°–ò–°–¢–ï–ú–ï:');
    console.log('===============================');
    
    const { data: tonTransactions, error: tonTxError } = await supabase
      .from('transactions')
      .select('*')
      .or('currency.eq.TON,type.ilike.%TON%,description.ilike.%TON%')
      .order('created_at', { ascending: false })
      .limit(20);

    if (!tonTxError && tonTransactions?.length) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonTransactions.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      tonTransactions.forEach((tx, index) => {
        console.log(`\n   TON –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${index + 1}:`);
        console.log(`     ID: ${tx.id}, User: ${tx.user_id}`);
        console.log(`     –¢–∏–ø: ${tx.type}, –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`     –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        if (tx.metadata) {
          console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata, null, 8)}`);
        }
      });
    } else {
      console.log('‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }

    // 4. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ USERS - TON –ü–û–õ–Ø
    console.log('\n4Ô∏è‚É£ TON –ü–û–õ–Ø –í –¢–ê–ë–õ–ò–¶–ï USERS:');
    console.log('===========================');
    
    const { data: usersWithTonData, error: usersError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_package, ton_boost_package_id, ton_boost_active, ton_farming_balance, ton_farming_rate, ton_farming_start_timestamp')
      .not('balance_ton', 'eq', 0)
      .or('ton_boost_active.eq.true,ton_farming_balance.gt.0,balance_ton.gt.0')
      .limit(15);

    if (!usersError && usersWithTonData?.length) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –¥–∞–Ω–Ω—ã–º–∏ (${usersWithTonData.length}):`);
      usersWithTonData.forEach(user => {
        console.log(`   User ${user.id}:`);
        console.log(`     balance_ton: ${user.balance_ton}`);
        console.log(`     ton_boost_package: ${user.ton_boost_package}`);
        console.log(`     ton_boost_package_id: ${user.ton_boost_package_id}`);
        console.log(`     ton_boost_active: ${user.ton_boost_active}`);
        console.log(`     ton_farming_balance: ${user.ton_farming_balance}`);
        console.log(`     ton_farming_rate: ${user.ton_farming_rate}`);
        console.log(`     ton_farming_start: ${user.ton_farming_start_timestamp || '–ù–ï–¢'}`);
        console.log('     ---');
      });
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }

    // 5. –ü–û–ò–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò TON –î–ï–ü–û–ó–ò–¢–û–í:');
    console.log('===========================================');
    
    // –ò—â–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: pendingTx, error: pendingError } = await supabase
      .from('transactions')
      .select('*')
      .eq('status', 'pending')
      .eq('currency', 'TON');

    if (!pendingError && pendingTx?.length) {
      console.log(`‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ PENDING TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò: ${pendingTx.length}`);
      pendingTx.forEach(tx => {
        console.log(`   Pending TX: User ${tx.user_id}, ${tx.amount} TON, ID ${tx.id}`);
      });
    } else {
      console.log('‚úÖ Pending TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç');
    }

    // 6. –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –î–ï–ü–û–ó–ò–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290
    console.log('\n6Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290:');
    console.log('==============================================');
    
    const { data: user290Tx, error: user290Error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 290)
      .eq('type', 'DEPOSIT')
      .eq('currency', 'TON')
      .single();

    if (!user290Error && user290Tx) {
      console.log('üîç –î–µ–ø–æ–∑–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 290:');
      console.log(`   TX ID: ${user290Tx.id}`);
      console.log(`   –°—É–º–º–∞: ${user290Tx.amount} TON`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${user290Tx.status}`);
      console.log(`   –î–∞—Ç–∞: ${new Date(user290Tx.created_at).toLocaleString('ru-RU')}`);
      console.log(`   TX Hash: ${user290Tx.metadata?.tx_hash || '–ù–ï–¢'}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
      const { data: afterDeposit, error: afterError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', 290)
        .gte('created_at', user290Tx.created_at)
        .order('created_at', { ascending: true });

      if (!afterError && afterDeposit?.length) {
        console.log(`\n   üìã –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (${afterDeposit.length}):`);
        afterDeposit.forEach((tx, index) => {
          console.log(`      ${index + 1}. ${tx.type}: ${tx.amount} ${tx.currency} - ${tx.description}`);
        });
      }
    }

    // 7. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´
    console.log('\n7Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:');
    console.log('======================');
    
    console.log('üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´:');
    console.log(`   - –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: ${existingTables.length}`);
    console.log(`   - TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${tonTransactions?.length || 0}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –¥–∞–Ω–Ω—ã–º–∏: ${usersWithTonData?.length || 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const tonFarmingTables = existingTables.filter(table => 
      table.includes('ton_farming') || table.includes('ton_deposit') || table.includes('ton_boost')
    );
    
    if (tonFarmingTables.length === 0) {
      console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ï–¢ –¢–ê–ë–õ–ò–¶ –î–õ–Ø TON –§–ê–†–ú–ò–ù–ì–ê!');
      console.log('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ton_farming_data, ton_deposits, ton_boost_deposits');
      console.log('   –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ transactions, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–∞–ª—å—à–µ!');
    } else {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω—ã TON —Ç–∞–±–ª–∏—Ü—ã: ${tonFarmingTables.join(', ')}`);
    }

    console.log('\nüö® === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–æ—á–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
urgentTonDepositsInvestigation();