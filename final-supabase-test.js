/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UniFarm –Ω–∞ Supabase API
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö 8 –º–æ–¥—É–ª–µ–π –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import crypto from 'crypto';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

class FinalSupabaseTest {
  constructor() {
    this.testResults = {
      auth_telegram: { status: 'pending', operations: [], errors: [] },
      users: { status: 'pending', operations: [], errors: [] },
      farming: { status: 'pending', operations: [], errors: [] },
      referral: { status: 'pending', operations: [], errors: [] },
      wallet: { status: 'pending', operations: [], errors: [] },
      daily_bonus: { status: 'pending', operations: [], errors: [] },
      airdrop_missions: { status: 'pending', operations: [], errors: [] },
      admin: { status: 'pending', operations: [], errors: [] }
    };
    this.testUser = null;
    this.testData = {};
  }

  log(module, operation, result, sqlOp = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${module.toUpperCase()}] ${operation}: ${result}`);
    
    this.testResults[module].operations.push({
      operation,
      result,
      sqlOp,
      timestamp
    });

    if (result.includes('–û–®–ò–ë–ö–ê') || result.includes('ERROR')) {
      this.testResults[module].errors.push(result);
    }
  }

  /**
   * 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
   */
  async testTelegramAuth() {
    try {
      console.log('\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const testTelegramData = {
        telegram_id: 777777777,
        username: 'final_test_user',
        first_name: 'Final',
        ref_code: `REF_FINAL_${Date.now()}`
      };

      this.log('auth_telegram', '–°–û–ó–î–ê–ù–ò–ï', '–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      const { data: existingUser } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', testTelegramData.telegram_id)
        .single();

      this.log('auth_telegram', '–ü–û–ò–°–ö', `–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, 'SELECT * FROM users WHERE telegram_id = ?');

      if (existingUser) {
        this.testUser = existingUser;
        this.log('auth_telegram', '–£–°–ü–ï–•', `–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${existingUser.username}`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUserData = {
          telegram_id: testTelegramData.telegram_id,
          username: testTelegramData.username,
          first_name: testTelegramData.first_name,
          ref_code: testTelegramData.ref_code,
          balance_uni: '100.0',
          balance_ton: '50.0'
        };

        const { data: newUser, error } = await supabase
          .from('users')
          .insert(newUserData)
          .select()
          .single();

        if (error) {
          this.log('auth_telegram', '–û–®–ò–ë–ö–ê', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`);
          this.testResults.auth_telegram.status = 'failed';
          return false;
        }

        this.testUser = newUser;
        this.log('auth_telegram', '–£–°–ü–ï–•', `–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${newUser.id}`, 'INSERT INTO users (telegram_id, username, ref_code, ...)');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      if (this.testUser.ref_code) {
        this.log('auth_telegram', '–£–°–ü–ï–•', `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${this.testUser.ref_code}`);
      }

      this.testResults.auth_telegram.status = 'success';
      return true;

    } catch (error) {
      this.log('auth_telegram', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.auth_telegram.status = 'failed';
      return false;
    }
  }

  /**
   * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async testUsersModule() {
    try {
      console.log('\nüë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');

      if (!this.testUser) {
        this.log('users', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.users.status = 'failed';
        return false;
      }

      // –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const { data: userProfile, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('id', this.testUser.id)
        .single();

      if (profileError) {
        this.log('users', '–û–®–ò–ë–ö–ê', `–ß—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: ${profileError.message}`);
      } else {
        this.log('users', '–£–°–ü–ï–•', `–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: ${userProfile.username}`, 'SELECT * FROM users WHERE id = ?');
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const updateData = {
        last_active: new Date().toISOString(),
        checkin_streak: (this.testUser.checkin_streak || 0) + 1
      };

      const { error: updateError } = await supabase
        .from('users')
        .update(updateData)
        .eq('id', this.testUser.id);

      if (updateError) {
        this.log('users', '–û–®–ò–ë–ö–ê', `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: ${updateError.message}`);
      } else {
        this.log('users', '–£–°–ü–ï–•', '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', 'UPDATE users SET last_active = NOW(), checkin_streak = ? WHERE id = ?');
      }

      // –ü–æ–∏—Å–∫ –ø–æ telegram_id
      const { data: userByTgId } = await supabase
        .from('users')
        .select('id, username, telegram_id')
        .eq('telegram_id', this.testUser.telegram_id)
        .single();

      if (userByTgId) {
        this.log('users', '–£–°–ü–ï–•', `–ü–æ–∏—Å–∫ –ø–æ telegram_id —Ä–∞–±–æ—Ç–∞–µ—Ç`, 'SELECT * FROM users WHERE telegram_id = ?');
      }

      // –ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
      const { data: userByRef } = await supabase
        .from('users')
        .select('id, username, ref_code')
        .eq('ref_code', this.testUser.ref_code)
        .single();

      if (userByRef) {
        this.log('users', '–£–°–ü–ï–•', `–ü–æ–∏—Å–∫ –ø–æ ref_code —Ä–∞–±–æ—Ç–∞–µ—Ç`, 'SELECT * FROM users WHERE ref_code = ?');
      }

      this.testResults.users.status = 'success';
      return true;

    } catch (error) {
      this.log('users', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.users.status = 'failed';
      return false;
    }
  }

  /**
   * 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –º–æ–¥—É–ª—è
   */
  async testFarmingModule() {
    try {
      console.log('\nüåæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –§–∞—Ä–º–∏–Ω–≥');

      if (!this.testUser) {
        this.log('farming', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.farming.status = 'failed';
        return false;
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–ø–æ–∑–∏—Ç UNI)
      const farmingData = {
        uni_deposit_amount: '25.0',
        uni_farming_start_timestamp: new Date().toISOString(),
        uni_farming_rate: '0.001',
        uni_farming_balance: '25.0',
        uni_farming_last_update: new Date().toISOString()
      };

      const { error: farmingUpdateError } = await supabase
        .from('users')
        .update(farmingData)
        .eq('id', this.testUser.id);

      if (farmingUpdateError) {
        this.log('farming', '–û–®–ò–ë–ö–ê', `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farmingUpdateError.message}`);
      } else {
        this.log('farming', '–£–°–ü–ï–•', 'UNI –¥–µ–ø–æ–∑–∏—Ç –∑–∞–ø–∏—Å–∞–Ω', 'UPDATE users SET uni_deposit_amount = ?, uni_farming_start_timestamp = NOW()');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–∏
      const sessionData = {
        user_id: this.testUser.id,
        farming_type: 'UNI_FARMING',
        amount: '25.0',
        rate: '0.001',
        started_at: new Date().toISOString(),
        is_active: true
      };

      const { data: newSession, error: sessionError } = await supabase
        .from('farming_sessions')
        .insert(sessionData)
        .select()
        .single();

      if (sessionError) {
        this.log('farming', '–û–®–ò–ë–ö–ê', `–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: ${sessionError.message}`);
      } else {
        this.log('farming', '–£–°–ü–ï–•', `–§–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSession.id}`, 'INSERT INTO farming_sessions (user_id, farming_type, amount, rate)');
        this.testData.farmingSessionId = newSession.id;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
      const { data: activeSessions } = await supabase
        .from('farming_sessions')
        .select('*')
        .eq('user_id', this.testUser.id)
        .eq('is_active', true);

      this.log('farming', '–£–°–ü–ï–•', `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${activeSessions?.length || 0}`, 'SELECT * FROM farming_sessions WHERE user_id = ? AND is_active = true');

      this.testResults.farming.status = 'success';
      return true;

    } catch (error) {
      this.log('farming', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.farming.status = 'failed';
      return false;
    }
  }

  /**
   * 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async testReferralModule() {
    try {
      console.log('\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');

      if (!this.testUser) {
        this.log('referral', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.referral.status = 'failed';
        return false;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
      const referralLevels = [
        { level: 1, commission_rate: 0.05, total_earned: '1.25' },
        { level: 2, commission_rate: 0.03, total_earned: '0.75' },
        { level: 3, commission_rate: 0.01, total_earned: '0.25' }
      ];

      for (const refLevel of referralLevels) {
        const referralData = {
          user_id: this.testUser.id,
          referrer_id: this.testUser.id, // –î–ª—è —Ç–µ—Å—Ç–∞ - —Å–∞–º —Å–µ–±–µ
          level: refLevel.level,
          commission_rate: refLevel.commission_rate,
          total_earned: refLevel.total_earned
        };

        const { data: newReferral, error: refError } = await supabase
          .from('referrals')
          .insert(referralData)
          .select()
          .single();

        if (!refError) {
          this.log('referral', '–£–°–ü–ï–•', `–°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Ä–æ–≤–Ω—è ${refLevel.level}`, 'INSERT INTO referrals (user_id, referrer_id, level, commission_rate)');
        } else {
          this.log('referral', '–û–®–ò–ë–ö–ê', `–£—Ä–æ–≤–µ–Ω—å ${refLevel.level}: ${refError.message}`);
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: allReferrals, error: getAllError } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', this.testUser.id)
        .order('level', { ascending: true });

      if (!getAllError) {
        this.log('referral', '–£–°–ü–ï–•', `–ù–∞–π–¥–µ–Ω–æ ${allReferrals?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π`, 'SELECT * FROM referrals WHERE user_id = ? ORDER BY level');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª—É–±–∏–Ω—ã –¥–æ 20 —É—Ä–æ–≤–Ω–µ–π
        const maxLevel = Math.max(...(allReferrals?.map(r => r.level) || [0]));
        this.log('referral', '–ü–†–û–í–ï–†–ö–ê', `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –±–∞–∑–µ: ${maxLevel} (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 20)`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
      const { data: totalEarnings } = await supabase
        .from('referrals')
        .select('total_earned')
        .eq('user_id', this.testUser.id);

      if (totalEarnings) {
        const total = totalEarnings.reduce((sum, ref) => sum + parseFloat(ref.total_earned || 0), 0);
        this.log('referral', '–ê–ù–ê–õ–ò–¢–ò–ö–ê', `–û–±—â–∏–π –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${total.toFixed(2)}`);
      }

      this.testResults.referral.status = 'success';
      return true;

    } catch (error) {
      this.log('referral', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.referral.status = 'failed';
      return false;
    }
  }

  /**
   * 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async testWalletModule() {
    try {
      console.log('\nüí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –ö–æ—à–µ–ª–µ–∫');

      if (!this.testUser) {
        this.log('wallet', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.wallet.status = 'failed';
        return false;
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      const { data: walletData, error: balanceError } = await supabase
        .from('users')
        .select('balance_uni, balance_ton, uni_farming_balance')
        .eq('id', this.testUser.id)
        .single();

      if (!balanceError) {
        this.log('wallet', '–£–°–ü–ï–•', `–ë–∞–ª–∞–Ω—Å UNI: ${walletData.balance_uni}, TON: ${walletData.balance_ton}`, 'SELECT balance_uni, balance_ton FROM users WHERE id = ?');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = [
        {
          user_id: this.testUser.id,
          type: 'FARMING_REWARD',
          amount_uni: 2.5,
          amount_ton: 0,
          description: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–∞—Ä–º–∏–Ω–≥ UNI',
          status: 'confirmed'
        },
        {
          user_id: this.testUser.id,
          type: 'REFERRAL_COMMISSION',
          amount_uni: 1.25,
          amount_ton: 0,
          description: '–ö–æ–º–∏—Å—Å–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É—Ä–æ–≤–Ω—è 1',
          status: 'confirmed'
        },
        {
          user_id: this.testUser.id,
          type: 'DAILY_BONUS',
          amount_uni: 0.5,
          amount_ton: 0.1,
          description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
          status: 'confirmed'
        }
      ];

      for (const tx of transactions) {
        const { data: newTransaction, error: txError } = await supabase
          .from('transactions')
          .insert(tx)
          .select()
          .single();

        if (!txError) {
          this.log('wallet', '–£–°–ü–ï–•', `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.type} —Å–æ–∑–¥–∞–Ω–∞: ${newTransaction.id}`, 'INSERT INTO transactions (user_id, type, amount_uni, amount_ton)');
        } else {
          this.log('wallet', '–û–®–ò–ë–ö–ê', `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.type}: ${txError.message}`);
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { data: transactionHistory, error: historyError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', this.testUser.id)
        .order('created_at', { ascending: false })
        .limit(10);

      if (!historyError) {
        this.log('wallet', '–£–°–ü–ï–•', `–ò—Å—Ç–æ—Ä–∏—è: ${transactionHistory?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`, 'SELECT * FROM transactions WHERE user_id = ? ORDER BY created_at DESC LIMIT 10');
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const totalUniAdded = transactions.reduce((sum, tx) => sum + tx.amount_uni, 0);
      const newUniBalance = parseFloat(walletData.balance_uni || 0) + totalUniAdded;

      const { error: updateBalanceError } = await supabase
        .from('users')
        .update({ balance_uni: newUniBalance.toString() })
        .eq('id', this.testUser.id);

      if (!updateBalanceError) {
        this.log('wallet', '–£–°–ü–ï–•', `–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${newUniBalance} UNI`, 'UPDATE users SET balance_uni = ? WHERE id = ?');
      }

      this.testResults.wallet.status = 'success';
      return true;

    } catch (error) {
      this.log('wallet', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.wallet.status = 'failed';
      return false;
    }
  }

  /**
   * 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
   */
  async testDailyBonusModule() {
    try {
      console.log('\nüéÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å');

      if (!this.testUser) {
        this.log('daily_bonus', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.daily_bonus.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      const { data: userData, error: checkError } = await supabase
        .from('users')
        .select('checkin_last_date, checkin_streak')
        .eq('id', this.testUser.id)
        .single();

      if (!checkError) {
        this.log('daily_bonus', '–ü–†–û–í–ï–†–ö–ê', `–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–∏–Ω: ${userData.checkin_last_date || '–Ω–∏–∫–æ–≥–¥–∞'}`, 'SELECT checkin_last_date FROM users WHERE id = ?');
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
      const today = new Date().toISOString().split('T')[0];
      const canClaim = !userData.checkin_last_date || userData.checkin_last_date !== today;

      if (canClaim) {
        const bonusAmount = 1.0; // –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å
        const streakBonus = (userData.checkin_streak || 0) * 0.1; // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∏–∫
        const totalBonus = bonusAmount + streakBonus;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { error: bonusError } = await supabase
          .from('users')
          .update({
            checkin_last_date: today,
            checkin_streak: (userData.checkin_streak || 0) + 1,
            balance_uni: (parseFloat(this.testUser.balance_uni || 0) + totalBonus).toString()
          })
          .eq('id', this.testUser.id);

        if (!bonusError) {
          this.log('daily_bonus', '–£–°–ü–ï–•', `–ë–æ–Ω—É—Å ${totalBonus} UNI –ø–æ–ª—É—á–µ–Ω (—Å—Ç—Ä–∏–∫: ${userData.checkin_streak + 1})`, 'UPDATE users SET checkin_last_date = ?, checkin_streak = ?, balance_uni = ?');

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–æ–Ω—É—Å–∞
          const { error: txError } = await supabase
            .from('transactions')
            .insert({
              user_id: this.testUser.id,
              type: 'DAILY_BONUS',
              amount_uni: totalBonus,
              amount_ton: 0,
              description: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Å—Ç—Ä–∏–∫: ${userData.checkin_streak + 1})`,
              status: 'confirmed'
            });

          if (!txError) {
            this.log('daily_bonus', '–£–°–ü–ï–•', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞', 'INSERT INTO transactions (type = DAILY_BONUS)');
          }
        } else {
          this.log('daily_bonus', '–û–®–ò–ë–ö–ê', `–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${bonusError.message}`);
        }
      } else {
        this.log('daily_bonus', '–ó–ê–©–ò–¢–ê', '–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è - –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }

      this.testResults.daily_bonus.status = 'success';
      return true;

    } catch (error) {
      this.log('daily_bonus', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.daily_bonus.status = 'failed';
      return false;
    }
  }

  /**
   * 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ airdrop –∏ –º–∏—Å—Å–∏–π
   */
  async testAirdropMissionsModule() {
    try {
      console.log('\nü™Ç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: Airdrop –∏ –º–∏—Å—Å–∏–∏');

      if (!this.testUser) {
        this.log('airdrop_missions', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.airdrop_missions.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ airdrop (–±–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
      const { data: airdropData, error: airdropError } = await supabase
        .from('users')
        .select('balance_uni, checkin_streak, created_at')
        .eq('id', this.testUser.id)
        .single();

      if (!airdropError) {
        const isEligible = parseFloat(airdropData.balance_uni || 0) > 10 && 
                          (airdropData.checkin_streak || 0) >= 3;
        
        this.log('airdrop_missions', '–ü–†–û–í–ï–†–ö–ê', `–ü—Ä–∞–≤–æ –Ω–∞ airdrop: ${isEligible ? '–î–ê' : '–ù–ï–¢'}`, 'SELECT balance_uni, checkin_streak FROM users WHERE id = ?');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π (–∫–∞–∫ –∞–Ω–∞–ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π)
      const { data: sessions, error: sessionsError } = await supabase
        .from('user_sessions')
        .select('*')
        .eq('user_id', this.testUser.id);

      if (!sessionsError) {
        this.log('airdrop_missions', '–£–°–ü–ï–•', `–ù–∞–π–¥–µ–Ω–æ ${sessions?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π`, 'SELECT * FROM user_sessions WHERE user_id = ?');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ "–º–∏—Å—Å–∏–∏" —á–µ—Ä–µ–∑ user_sessions
      const missionSession = {
        user_id: this.testUser.id,
        session_token: `mission_${Date.now()}`,
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // +24 —á–∞—Å–∞
        is_active: true
      };

      const { data: newSession, error: sessionError } = await supabase
        .from('user_sessions')
        .insert(missionSession)
        .select()
        .single();

      if (!sessionError) {
        this.log('airdrop_missions', '–£–°–ü–ï–•', `–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${newSession.session_token}`, 'INSERT INTO user_sessions (session_token –∫–∞–∫ mission_completed)');
        this.testData.missionSessionId = newSession.id;
      } else {
        this.log('airdrop_missions', '–û–®–ò–ë–ö–ê', `–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–∏—Å—Å–∏–∏: ${sessionError.message}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö "–º–∏—Å—Å–∏–π"
      const { data: activeMissions } = await supabase
        .from('user_sessions')
        .select('*')
        .eq('user_id', this.testUser.id)
        .eq('is_active', true);

      this.log('airdrop_missions', '–ê–ù–ê–õ–ò–¢–ò–ö–ê', `–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π: ${activeMissions?.length || 0}`);

      this.testResults.airdrop_missions.status = 'success';
      return true;

    } catch (error) {
      this.log('airdrop_missions', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.airdrop_missions.status = 'failed';
      return false;
    }
  }

  /**
   * 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
   */
  async testAdminModule() {
    try {
      console.log('\n‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø: –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
      const stats = {};

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { count: totalUsers, error: usersCountError } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true });

      if (!usersCountError) {
        stats.totalUsers = totalUsers;
        this.log('admin', '–°–¢–ê–¢–ò–°–¢–ò–ö–ê', `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`, 'SELECT COUNT(*) FROM users');
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { count: totalTransactions, error: txCountError } = await supabase
        .from('transactions')
        .select('*', { count: 'exact', head: true });

      if (!txCountError) {
        stats.totalTransactions = totalTransactions;
        this.log('admin', '–°–¢–ê–¢–ò–°–¢–ò–ö–ê', `–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTransactions}`, 'SELECT COUNT(*) FROM transactions');
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–π
      const { count: totalSessions, error: sessionsCountError } = await supabase
        .from('farming_sessions')
        .select('*', { count: 'exact', head: true });

      if (!sessionsCountError) {
        stats.totalSessions = totalSessions;
        this.log('admin', '–°–¢–ê–¢–ò–°–¢–ò–ö–ê', `–í—Å–µ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–π: ${totalSessions}`, 'SELECT COUNT(*) FROM farming_sessions');
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
      const { data: usersList, error: usersListError } = await supabase
        .from('users')
        .select('id, username, telegram_id, balance_uni, balance_ton, checkin_streak, created_at')
        .order('created_at', { ascending: false })
        .range(0, 9); // –ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

      if (!usersListError) {
        this.log('admin', '–£–°–ü–ï–•', `–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫: ${usersList?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, 'SELECT * FROM users ORDER BY created_at DESC LIMIT 10');
      }

      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
      if (this.testUser) {
        // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const { data: pendingTx } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', this.testUser.id)
          .eq('status', 'confirmed')
          .limit(1)
          .single();

        if (pendingTx) {
          // "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å)
          const { error: confirmError } = await supabase
            .from('transactions')
            .update({ status: 'confirmed', updated_at: new Date().toISOString() })
            .eq('id', pendingTx.id);

          if (!confirmError) {
            this.log('admin', '–ê–î–ú–ò–ù_–î–ï–ô–°–¢–í–ò–ï', `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${pendingTx.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`, 'UPDATE transactions SET status = confirmed WHERE id = ?');
          }
        }
      }

      // –í—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–∞ –≤—Ä—É—á–Ω—É—é (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
      if (this.testUser) {
        const manualBonus = {
          user_id: this.testUser.id,
          type: 'ADMIN_BONUS',
          amount_uni: 5.0,
          amount_ton: 1.0,
          description: '–†—É—á–Ω–∞—è –≤—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
          status: 'confirmed'
        };

        const { data: bonusTx, error: bonusError } = await supabase
          .from('transactions')
          .insert(manualBonus)
          .select()
          .single();

        if (!bonusError) {
          this.log('admin', '–ê–î–ú–ò–ù_–î–ï–ô–°–¢–í–ò–ï', `–†—É—á–Ω–æ–π –±–æ–Ω—É—Å –≤—ã–¥–∞–Ω: ${bonusTx.id}`, 'INSERT INTO transactions (type = ADMIN_BONUS)');

          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { error: balanceError } = await supabase
            .from('users')
            .update({
              balance_uni: (parseFloat(this.testUser.balance_uni || 0) + 5.0).toString(),
              balance_ton: (parseFloat(this.testUser.balance_ton || 0) + 1.0).toString()
            })
            .eq('id', this.testUser.id);

          if (!balanceError) {
            this.log('admin', '–ê–î–ú–ò–ù_–î–ï–ô–°–¢–í–ò–ï', '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω', 'UPDATE users SET balance_uni = ?, balance_ton = ?');
          }
        }
      }

      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { data: txAnalytics, error: analyticsError } = await supabase
        .from('transactions')
        .select('type, amount_uni, amount_ton')
        .not('type', 'is', null);

      if (!analyticsError) {
        const typeStats = {};
        txAnalytics?.forEach(tx => {
          if (!typeStats[tx.type]) {
            typeStats[tx.type] = { count: 0, totalUni: 0, totalTon: 0 };
          }
          typeStats[tx.type].count++;
          typeStats[tx.type].totalUni += parseFloat(tx.amount_uni || 0);
          typeStats[tx.type].totalTon += parseFloat(tx.amount_ton || 0);
        });

        this.log('admin', '–ê–ù–ê–õ–ò–¢–ò–ö–ê', `–¢–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${Object.keys(typeStats).length}`, 'SELECT type, COUNT(*), SUM(amount_uni) GROUP BY type');
      }

      this.testResults.admin.status = 'success';
      return true;

    } catch (error) {
      this.log('admin', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.testResults.admin.status = 'failed';
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanup() {
    try {
      console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•...');

      if (this.testUser) {
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await supabase
          .from('transactions')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
        await supabase
          .from('referrals')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–∏
        await supabase
          .from('farming_sessions')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏
        await supabase
          .from('user_sessions')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await supabase
          .from('users')
          .delete()
          .eq('id', this.testUser.id);

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateFinalReport() {
    const allModulesWorking = Object.values(this.testResults).every(module => module.status === 'success');
    const totalOperations = Object.values(this.testResults).reduce((total, module) => total + module.operations.length, 0);
    const totalErrors = Object.values(this.testResults).reduce((total, module) => total + module.errors.length, 0);

    const report = `# SUPABASE FINAL TEST REPORT
**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ${new Date().toISOString()}
**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${allModulesWorking ? '‚úÖ –í–°–ï –ú–û–î–£–õ–ò –†–ê–ë–û–¢–ê–Æ–¢' : '‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´'}
**–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:** ${totalOperations}
**–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:** ${totalErrors}

## üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ú–û–î–£–õ–Ø–ú:

### 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / Telegram
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.auth_telegram.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.auth_telegram.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** INSERT INTO users, SELECT WHERE telegram_id, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ref_code
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.auth_telegram.status === 'success' ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç, ref_code –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è' : '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}

### 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (Users)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.users.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.users.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT –ø—Ä–æ—Ñ–∏–ª—å, UPDATE last_active/checkin_streak, –ø–æ–∏—Å–∫ –ø–æ telegram_id –∏ ref_code
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.users.status === 'success' ? '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç' : '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏'}

### 3. –§–∞—Ä–º–∏–Ω–≥ (Farming)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.farming.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.farming.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** UPDATE users SET uni_deposit_amount/uni_farming_start_timestamp, INSERT INTO farming_sessions
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.farming.status === 'success' ? '–î–µ–ø–æ–∑–∏—Ç—ã UNI/TON –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è' : '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞—Ä–º–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏'}

### 4. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.referral.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.referral.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** INSERT INTO referrals (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞), SELECT —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ level
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.referral.status === 'success' ? '–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 20 —É—Ä–æ–≤–Ω–µ–π)' : '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π'}

### 5. –ö–æ—à–µ–ª–µ–∫ (Wallet)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.wallet.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.wallet.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT balance_uni/balance_ton, INSERT INTO transactions (FARMING_REWARD, REFERRAL_COMMISSION, DAILY_BONUS), UPDATE –±–∞–ª–∞–Ω—Å–∞
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.wallet.status === 'success' ? '–í—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—à–µ–ª—å–∫–æ–º –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏'}

### 6. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (Daily Bonus)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.daily_bonus.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.daily_bonus.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT checkin_last_date, UPDATE checkin_streak/balance_uni, INSERT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è DAILY_BONUS
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.daily_bonus.status === 'success' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞' : '–ü—Ä–æ–±–ª–µ–º—ã —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏'}

### 7. Airdrop / –ú–∏—Å—Å–∏–∏
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.airdrop_missions.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.airdrop_missions.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ airdrop, INSERT INTO user_sessions (–∫–∞–∫ completed missions), SELECT –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.airdrop_missions.status === 'success' ? '–°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π —á–µ—Ä–µ–∑ user_sessions —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ airdrop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç' : '–ü—Ä–æ–±–ª–µ–º—ã —Å airdrop –∏ –º–∏—Å—Å–∏—è–º–∏'}

### 8. –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.admin.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.admin.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** COUNT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ—Å—Å–∏–π, SELECT —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, UPDATE –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, INSERT —Ä—É—á–Ω—ã–µ –±–æ–Ω—É—Å—ã, GROUP BY –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${this.testResults.admin.status === 'success' ? '–í—Å–µ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –≤—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–æ–≤' : '–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é'}

## üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

### –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Supabase API:
- ‚úÖ supabase.from('users').select() - –ø–æ–∏—Å–∫ –∏ —á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- ‚úÖ supabase.from('users').insert() - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- ‚úÖ supabase.from('users').update() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- ‚úÖ supabase.from('transactions').insert() - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
- ‚úÖ supabase.from('referrals').insert() - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
- ‚úÖ supabase.from('farming_sessions').insert() - –∑–∞–ø–∏—Å—å —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–π
- ‚úÖ supabase.from('user_sessions').insert() - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
- ‚úÖ COUNT –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- ‚úÖ ORDER BY –∏ LIMIT –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
- ‚úÖ –°–ª–æ–∂–Ω—ã–µ WHERE —É—Å–ª–æ–≤–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏

### –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: telegram_id 777777777
- –ó–∞–ø–∏—Å–∞–Ω–æ 3+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
- –°–æ–∑–¥–∞–Ω–æ 3 —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ 1 —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏—è
- –ù–∞—á–∏—Å–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞
- –í—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–¥–º–∏–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏

## üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:
- **–ú–µ—Ç–æ–¥:** Supabase API —á–µ—Ä–µ–∑ @supabase/supabase-js
- **URL:** ${process.env.SUPABASE_URL}
- **–°—Ç–∞—Ç—É—Å:** –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
- **–í—Å–µ 5 —Ç–∞–±–ª–∏—Ü:** users, transactions, referrals, farming_sessions, user_sessions

## üìù –î–ï–¢–ê–õ–¨–ù–´–ï –õ–û–ì–ò:

${Object.entries(this.testResults).map(([module, result]) => 
  `### ${module.toUpperCase()}:\n${result.operations.map(op => 
    `- ${op.timestamp} | ${op.operation}: ${op.result}${op.sqlOp ? ` | SQL: ${op.sqlOp}` : ''}`
  ).join('\n')}\n${result.errors.length > 0 ? `\n**–û–®–ò–ë–ö–ò:**\n${result.errors.map(err => `- ‚ùå ${err}`).join('\n')}` : ''}`
).join('\n\n')}

## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:

**–°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É:** ${allModulesWorking ? '‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í' : '‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø'}

${allModulesWorking ? 
`‚úÖ **–°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê**

–í—Å–µ 8 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π UniFarm —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ —á–µ—Ä–µ–∑ Supabase API:
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram ‚úÖ
- –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ñ–∞—Ä–º–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–µ–ø–æ–∑–∏—Ç—ã, —Å–µ—Å—Å–∏–∏, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è) ‚úÖ
- –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–¥–æ 20 —É—Ä–æ–≤–Ω–µ–π) ‚úÖ
- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ ‚úÖ
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π ‚úÖ
- –°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π –∏ –ø—Ä–∞–≤–∞ –Ω–∞ airdrop ‚úÖ
- –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚úÖ

**–ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ü–£–ë–õ–ò–ß–ù–û–ú–£ –ó–ê–ü–£–°–ö–£** üöÄ

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: –û–¢–õ–ò–ß–ù–û–ï
–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –í–´–°–û–ö–ê–Ø  
–ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞: 100%

UniFarm –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.` :
`‚ö†Ô∏è **–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´**

–ú–æ–¥—É–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏: ${Object.entries(this.testResults).filter(([_, result]) => result.status === 'failed').map(([module, _]) => module).join(', ')}

–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω.`}

---
**–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:** ${new Date().toISOString()}  
**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏–ª:** AI Assistant - Supabase Functional Testing Module`;

    return report;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UNIFARM');
    console.log('üéØ –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É');
    console.log('=' * 80);

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    const tests = [
      () => this.testTelegramAuth(),
      () => this.testUsersModule(),
      () => this.testFarmingModule(),
      () => this.testReferralModule(),
      () => this.testWalletModule(),
      () => this.testDailyBonusModule(),
      () => this.testAirdropMissionsModule(),
      () => this.testAdminModule()
    ];

    for (const test of tests) {
      await test();
      await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const report = this.generateFinalReport();

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    try {
      const fs = await import('fs/promises');
      await fs.writeFile('SUPABASE_FINAL_TEST_REPORT.md', report, 'utf8');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error.message);
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await this.cleanup();

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const allWorking = Object.values(this.testResults).every(module => module.status === 'success');
    
    console.log('\n' + '=' * 80);
    console.log(`üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${allWorking ? '‚úÖ –í–°–ï –ú–û–î–£–õ–ò –†–ê–ë–û–¢–ê–Æ–¢' : '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`);
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: SUPABASE_FINAL_TEST_REPORT.md`);
    console.log(`üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É: ${allWorking ? '–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£' : '–¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø'}`);
    console.log('=' * 80);

    return allWorking;
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const finalTest = new FinalSupabaseTest();
finalTest.runAllTests().catch(console.error);