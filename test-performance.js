/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Neon Database
 */

import { Pool } from 'pg';
import { performance } from 'perf_hooks';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  },
  connectionTimeoutMillis: 10000,
  max: 20 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
async function measureQueryTime(name, queryFn) {
  const start = performance.now();
  try {
    const result = await queryFn();
    const end = performance.now();
    const duration = (end - start).toFixed(2);
    console.log(`‚úÖ ${name}: ${duration} –º—Å`);
    return { success: true, duration, result };
  } catch (error) {
    const end = performance.now();
    const duration = (end - start).toFixed(2);
    console.error(`‚ùå ${name}: ${duration} –º—Å - –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, duration, error };
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
function formatQPS(count, durationMs) {
  const qps = (count / (durationMs / 1000)).toFixed(2);
  return `${qps} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫`;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
async function runPerformanceTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Neon Database');
  console.log('=======================================================');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å SELECT 1
    await measureQueryTime('–ü—Ä–æ—Å—Ç–æ–π SELECT 1', async () => {
      const result = await pool.query('SELECT 1 as value');
      return result.rows[0].value;
    });
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const countTest = await measureQueryTime('–ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
      const result = await pool.query('SELECT COUNT(*) FROM users');
      return result.rows[0].count;
    });
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${countTest.result}`);
    
    // –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsersTest = await measureQueryTime('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
      const result = await pool.query('SELECT * FROM users');
      return result.rows.length;
    });
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${allUsersTest.result} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    await measureQueryTime('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID', async () => {
      const result = await pool.query('SELECT * FROM users WHERE id = 1');
      return result.rows.length;
    });
    
    // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞)
    await measureQueryTime('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username', async () => {
      const result = await pool.query("SELECT * FROM users WHERE username = 'test_user'");
      return result.rows.length;
    });
    
    // –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ref_code (–º–æ–≥ –±—ã –±—ã—Ç—å –∏–Ω–¥–µ–∫—Å)
    await measureQueryTime('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ref_code', async () => {
      const result = await pool.query("SELECT * FROM users WHERE ref_code = 'TEST1234'");
      return result.rows.length;
    });
    
    // –¢–µ—Å—Ç 7: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (JOIN)
    await measureQueryTime('JOIN –∑–∞–ø—Ä–æ—Å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã)', async () => {
      const result = await pool.query(`
        SELECT u.id, u.username, u.ref_code, COUNT(r.id) as referral_count
        FROM users u
        LEFT JOIN referrals r ON u.ref_code = r.parent_ref_code
        GROUP BY u.id, u.username, u.ref_code
        LIMIT 10
      `);
      return result.rows.length;
    });
    
    // –¢–µ—Å—Ç 8: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    console.log('\nüìä –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    const sequentialCount = 10;
    const sequentialStart = performance.now();
    
    for (let i = 0; i < sequentialCount; i++) {
      await pool.query('SELECT * FROM users WHERE id = $1', [1]);
    }
    
    const sequentialEnd = performance.now();
    const sequentialDuration = (sequentialEnd - sequentialStart).toFixed(2);
    console.log(`‚úÖ ${sequentialCount} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${sequentialDuration} –º—Å (${formatQPS(sequentialCount, sequentialDuration)})`);
    
    // –¢–µ—Å—Ç 9: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    console.log('\nüìä –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    const parallelCount = 10;
    const parallelStart = performance.now();
    
    await Promise.all(
      Array.from({ length: parallelCount }).map((_, i) => 
        pool.query('SELECT * FROM users WHERE id = $1', [i % 8 + 1])
      )
    );
    
    const parallelEnd = performance.now();
    const parallelDuration = (parallelEnd - parallelStart).toFixed(2);
    console.log(`‚úÖ ${parallelCount} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${parallelDuration} –º—Å (${formatQPS(parallelCount, parallelDuration)})`);
    
    // –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤');
    const indexesResult = await pool.query(`
      SELECT 
        i.relname as index_name,
        t.relname as table_name,
        a.attname as column_name
      FROM
        pg_class t,
        pg_class i,
        pg_index ix,
        pg_attribute a
      WHERE
        t.oid = ix.indrelid
        AND i.oid = ix.indexrelid
        AND a.attrelid = t.oid
        AND a.attnum = ANY(ix.indkey)
        AND t.relkind = 'r'
        AND t.relname IN ('users', 'referrals', 'transactions')
      ORDER BY
        t.relname,
        i.relname
    `);
    
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:');
    if (indexesResult.rows.length === 0) {
      console.log('–ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      const indexesByTable = {};
      
      indexesResult.rows.forEach(row => {
        if (!indexesByTable[row.table_name]) {
          indexesByTable[row.table_name] = {};
        }
        
        if (!indexesByTable[row.table_name][row.index_name]) {
          indexesByTable[row.table_name][row.index_name] = [];
        }
        
        indexesByTable[row.table_name][row.index_name].push(row.column_name);
      });
      
      for (const tableName in indexesByTable) {
        console.log(`\n–¢–∞–±–ª–∏—Ü–∞: ${tableName}`);
        
        for (const indexName in indexesByTable[tableName]) {
          const columns = indexesByTable[tableName][indexName].join(', ');
          console.log(`  ${indexName}: ${columns}`);
        }
      }
    }
    
    // –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü
    console.log('\nüìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü');
    const tableSizesResult = await pool.query(`
      SELECT
        table_name,
        pg_size_pretty(pg_total_relation_size(quote_ident(table_name))) as total_size,
        pg_size_pretty(pg_relation_size(quote_ident(table_name))) as table_size,
        pg_size_pretty(pg_total_relation_size(quote_ident(table_name)) - pg_relation_size(quote_ident(table_name))) as index_size
      FROM
        information_schema.tables
      WHERE
        table_schema = 'public'
        AND table_type = 'BASE TABLE'
      ORDER BY
        pg_total_relation_size(quote_ident(table_name)) DESC
      LIMIT 10
    `);
    
    console.log('–¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É:');
    tableSizesResult.rows.forEach((row, i) => {
      console.log(`${i+1}. ${row.table_name}: –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä = ${row.total_size}, –¥–∞–Ω–Ω—ã–µ = ${row.table_size}, –∏–Ω–¥–µ–∫—Å—ã = ${row.index_size}`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error.message);
  } finally {
    await pool.end();
    console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runPerformanceTests().catch(err => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});