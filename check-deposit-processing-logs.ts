/**
 * –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –û–ë–†–ê–ë–û–¢–ö–ò –î–ï–ü–û–ó–ò–¢–û–í
 * –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ø–æ–∑–∏—Ç—ã 255 –∏ 251 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
 */

import { supabase } from './core/supabase.js';

async function checkDepositProcessingLogs() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –î–ï–ü–û–ó–ò–¢–û–í –ß–ï–†–ï–ó –°–ò–°–¢–ï–ú–£');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ß–ù–´–ï –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255 –∏ 251
    console.log('\nüìä –ü–†–û–ë–õ–ï–ú–ù–´–ï –î–ï–ü–û–ó–ò–¢–´:');
    
    const { data: problemDeposits } = await supabase
      .from('transactions')
      .select('*')
      .in('id', [1919054, 1919025]) // ID –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏
      .order('created_at', { ascending: false });
    
    if (problemDeposits) {
      problemDeposits.forEach(tx => {
        console.log(`\n=== –î–ï–ü–û–ó–ò–¢ ID ${tx.id} ===`);
        console.log(`User: ${tx.user_id}`);
        console.log(`Type: ${tx.type}`);
        console.log(`Amount: ${tx.amount} ${tx.currency}`);
        console.log(`Status: ${tx.status}`);
        console.log(`Description: ${tx.description}`);
        console.log(`Created: ${tx.created_at}`);
        console.log(`Updated: ${tx.updated_at}`);
        
        if (tx.metadata) {
          console.log(`Metadata:`);
          console.log(JSON.stringify(tx.metadata, null, 2));
        }
        
        // –ê–Ω–∞–ª–∏–∑ - –ø—Ä–æ—à–µ–ª –ª–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
        const passedThroughSystem = tx.metadata?.source === 'ton_deposit' && 
                                  tx.metadata?.tx_hash && 
                                  tx.description.includes('from blockchain');
        
        console.log(`üîç –ü—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É: ${passedThroughSystem ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (!passedThroughSystem) {
          console.log(`‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω –≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏!`);
        }
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –≤—Ä–µ–º—è –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\n‚è∞ –í–°–ï –î–ï–ü–û–ó–ò–¢–´ –ó–ê –í–†–ï–ú–Ø –ü–†–û–ë–õ–ï–ú–´ (08:00 - 08:05):');
    
    const { data: allDeposits } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['TON_DEPOSIT', 'FARMING_DEPOSIT'])
      .gte('created_at', '2025-08-05T07:55:00.000Z')
      .lte('created_at', '2025-08-05T08:10:00.000Z')
      .order('created_at', { ascending: false });
    
    if (allDeposits) {
      allDeposits.forEach(tx => {
        const passedThroughSystem = tx.metadata?.source === 'ton_deposit' || 
                                  tx.description?.includes('from blockchain') ||
                                  tx.description?.includes('farming deposit');
        
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency} | System: ${passedThroughSystem ? '‚úÖ' : '‚ùå'}`);
      });
    }
    
    // 3. –ò—â–µ–º –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('\nüîç –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• –û–ü–ï–†–ê–¶–ò–ô:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è
    const { data: relatedTx } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', '2025-08-05T08:00:00.000Z')
      .lte('created_at', '2025-08-05T08:02:00.000Z')
      .order('created_at', { ascending: false });
    
    if (relatedTx) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${relatedTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–µ—Ä–∏–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      relatedTx.forEach(tx => {
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency} | ${tx.description}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    const { data: user255Updates } = await supabase
      .from('users')
      .select('updated_at, balance_uni, balance_ton')
      .eq('telegram_id', 255)
      .single();
      
    const { data: user251Updates } = await supabase
      .from('users')
      .select('updated_at, balance_uni, balance_ton')
      .eq('telegram_id', 251)
      .single();
    
    console.log(`User 255 - Last updated: ${user255Updates?.updated_at || '–ù–ò–ö–û–ì–î–ê'} | UNI: ${user255Updates?.balance_uni || 0} | TON: ${user255Updates?.balance_ton || 0}`);
    console.log(`User 251 - Last updated: ${user251Updates?.updated_at || '–ù–ò–ö–û–ì–î–ê'} | UNI: ${user251Updates?.balance_uni || 0} | TON: ${user251Updates?.balance_ton || 0}`);
    
    // 5. –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüö® –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:');
    
    const issues = [];
    
    if (!user255Updates?.updated_at) {
      issues.push('User 255: –ü–æ–ª–µ updated_at = NULL - –±–∞–ª–∞–Ω—Å –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è');
    }
    
    if (!user251Updates?.updated_at) {
      issues.push('User 251: –ü–æ–ª–µ updated_at = NULL - –±–∞–ª–∞–Ω—Å –ù–ò–ö–û–ì–î–ê –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è');
    }
    
    if (problemDeposits) {
      problemDeposits.forEach(tx => {
        if (!tx.metadata?.source) {
          issues.push(`–î–µ–ø–æ–∑–∏—Ç ${tx.id}: –ù–µ—Ç metadata.source - —Å–æ–∑–¥–∞–Ω –≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã`);
        }
      });
    }
    
    if (issues.length > 0) {
      console.log('\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      issues.forEach((issue, index) => {
        console.log(`${index + 1}. ${issue}`);
      });
    } else {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

checkDepositProcessingLogs();