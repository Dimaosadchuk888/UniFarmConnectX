/**
 * –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ì–¥–µ –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255 –∏ 251?
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å—ã –ë–ï–ó JWT
 */

import { supabase } from './core/supabase.js';

async function urgentCheckMissingDeposits() {
  console.log('üö® –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255 –∏ 251');
  
  try {
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255
    console.log('\nüìä –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ 255 - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    const { data: user255Transactions, error: error255 } = await supabase
      .from('transactions')
      .select('id, type, amount, currency, status, description, created_at, metadata')
      .eq('user_id', 255)
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (error255) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255:', error255);
      return;
    }
    
    user255Transactions?.forEach(tx => {
      console.log(`${tx.created_at} | ${tx.type} | ${tx.amount} ${tx.currency} | ${tx.status} | ${tx.description}`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 251
    console.log('\nüìä –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ 251 - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    const { data: user251Transactions, error: error251 } = await supabase
      .from('transactions')
      .select('id, type, amount, currency, status, description, created_at, metadata')
      .eq('user_id', 251)
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (error251) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 251:', error251);
      return;
    }
    
    user251Transactions?.forEach(tx => {
      console.log(`${tx.created_at} | ${tx.type} | ${tx.amount} ${tx.currency} | ${tx.status} | ${tx.description}`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
    console.log('\nüí∞ –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´:');
    const { data: user255Balance } = await supabase
      .from('users')
      .select('balance_uni, balance_ton')
      .eq('telegram_id', 255)
      .single();
      
    const { data: user251Balance } = await supabase
      .from('users')
      .select('balance_uni, balance_ton')
      .eq('telegram_id', 251)
      .single();
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 255: UNI=${user255Balance?.balance_uni || 0}, TON=${user255Balance?.balance_ton || 0}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 251: UNI=${user251Balance?.balance_uni || 0}, TON=${user251Balance?.balance_ton || 0}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    console.log('\n‚è∞ –î–ï–ü–û–ó–ò–¢–´ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    const { data: recentDeposits } = await supabase
      .from('transactions')
      .select('user_id, type, amount, currency, status, description, created_at, metadata')
      .in('user_id', [255, 251])
      .in('type', ['TON_DEPOSIT', 'FARMING_DEPOSIT'])
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });
    
    if (!recentDeposits || recentDeposits.length === 0) {
      console.log('‚ùå –ù–ï–¢ –î–ï–ü–û–ó–ò–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°!');
    } else {
      recentDeposits.forEach(tx => {
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency} | ${tx.status}`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º FAILED —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    const { data: failedTx } = await supabase
      .from('transactions')
      .select('user_id, type, amount, currency, status, description, created_at, metadata')
      .in('user_id', [255, 251])
      .eq('status', 'failed')
      .gte('created_at', oneDayAgo)
      .order('created_at', { ascending: false });
    
    if (failedTx && failedTx.length > 0) {
      failedTx.forEach(tx => {
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency} | FAILED | ${tx.description}`);
      });
    } else {
      console.log('‚úÖ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
    }
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

urgentCheckMissingDeposits();