/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ Neon –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ Replit
 */

import { config } from 'dotenv';
import fetch from 'node-fetch';

config();

const NEON_API_KEY = process.env.NEON_API_KEY;
const NEON_PROJECT_ID = process.env.NEON_PROJECT_ID;
const DATABASE_URL = process.env.DATABASE_URL;

if (!NEON_API_KEY || !NEON_PROJECT_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç NEON_API_KEY –∏–ª–∏ NEON_PROJECT_ID');
  process.exit(1);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Neon API
 */
async function registerDevelopmentAccount() {
  try {
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ Neon...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const projectResponse = await fetch(`https://console.neon.tech/api/v2/projects/${NEON_PROJECT_ID}`, {
      headers: {
        'Authorization': `Bearer ${NEON_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!projectResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: ${projectResponse.status}`);
    }
    
    const projectData = await projectResponse.json();
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:', projectData.project.name);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const roleResponse = await fetch(`https://console.neon.tech/api/v2/projects/${NEON_PROJECT_ID}/roles`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${NEON_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        role: {
          name: 'replit_dev_user',
          password: generateSecurePassword()
        }
      })
    });
    
    if (roleResponse.ok) {
      const roleData = await roleResponse.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω:', roleData.role.name);
    } else {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const { Pool } = await import('pg');
    const pool = new Pool({
      connectionString: DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const replit_user_id = `replit_dev_${Date.now()}`;
    const guest_id = generateGuestId();
    
    const insertQuery = `
      INSERT INTO users (
        telegram_id, 
        username, 
        first_name, 
        guest_id, 
        created_at, 
        updated_at,
        balance,
        last_login
      ) VALUES ($1, $2, $3, $4, NOW(), NOW(), 0, NOW())
      ON CONFLICT (telegram_id) DO UPDATE SET
        last_login = NOW()
      RETURNING *;
    `;
    
    const result = await pool.query(insertQuery, [
      replit_user_id,
      'replit_developer',
      'Replit Developer',
      guest_id
    ]);
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', {
      id: result.rows[0].id,
      telegram_id: result.rows[0].telegram_id,
      username: result.rows[0].username,
      guest_id: result.rows[0].guest_id
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const farmingQuery = `
      INSERT INTO farming_sessions (
        user_id, 
        start_time, 
        last_update, 
        uni_accumulated, 
        is_active,
        rate_per_hour
      ) VALUES ($1, NOW(), NOW(), 0, true, 100)
      ON CONFLICT (user_id) DO UPDATE SET
        last_update = NOW()
      RETURNING *;
    `;
    
    await pool.query(farmingQuery, [result.rows[0].id]);
    console.log('‚úÖ –§–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    await pool.end();
    
    console.log('\nüéâ –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Neon!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   User ID: ${result.rows[0].id}`);
    console.log(`   Telegram ID: ${replit_user_id}`);
    console.log(`   Guest ID: ${guest_id}`);
    console.log(`   Username: replit_developer`);
    
    return {
      user_id: result.rows[0].id,
      telegram_id: replit_user_id,
      guest_id: guest_id,
      username: 'replit_developer'
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error.message);
    throw error;
  }
}

function generateSecurePassword() {
  return Math.random().toString(36).slice(-12) + Math.random().toString(36).slice(-12);
}

function generateGuestId() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  registerDevelopmentAccount()
    .then((userData) => {
      console.log('\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
      process.exit(1);
    });
}

export { registerDevelopmentAccount };