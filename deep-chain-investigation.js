/**
 * –ì–õ–£–ë–û–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò TON –î–ï–ü–û–ó–ò–¢–û–í
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–≤–µ–Ω–∞: Frontend ‚Üí Backend ‚Üí Database
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function deepChainInvestigation() {
  console.log('üî¨ –ì–õ–£–ë–û–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢ –¶–ï–ü–û–ß–ö–ò');
  console.log('==============================================');
  
  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´
    console.log('\n1. üìä –û–ë–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:');
    
    const oneMinuteAgo = new Date(Date.now() - 1 * 60 * 1000).toISOString();
    const { data: recentActivity, error: activityError } = await supabase
      .from('transactions')
      .select('user_id, type, currency, created_at')
      .gte('created_at', oneMinuteAgo)
      .order('created_at', { ascending: false });
    
    if (activityError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activityError.message);
    } else {
      console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É: ${recentActivity?.length || 0}`);
      
      const currencies = {};
      const types = {};
      recentActivity?.forEach(tx => {
        currencies[tx.currency] = (currencies[tx.currency] || 0) + 1;
        types[tx.type] = (types[tx.type] || 0) + 1;
      });
      
      console.log('   - –ü–æ –≤–∞–ª—é—Ç–∞–º:', currencies);
      console.log('   - –ü–æ —Ç–∏–ø–∞–º:', types);
    }
    
    // 2. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• TON –î–ï–ü–û–ó–ò–¢–û–í –ö–û–ì–î–ê-–õ–ò–ë–û
    console.log('\n2. üí∞ –ê–ù–ê–õ–ò–ó –í–°–ï–• TON –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const { data: allTonDeposits, error: depositError } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .order('created_at', { ascending: false });
    
    if (depositError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositError.message);
    } else {
      console.log(`   - –í—Å–µ–≥–æ TON DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${allTonDeposits?.length || 0}`);
      
      if (allTonDeposits && allTonDeposits.length > 0) {
        console.log('   - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:');
        allTonDeposits.slice(0, 5).forEach((dep, idx) => {
          console.log(`     ${idx + 1}. User ${dep.user_id}: ${dep.amount} TON at ${dep.created_at}`);
          console.log(`        Description: ${dep.description?.substring(0, 100)}...`);
        });
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const userDeposits = {};
        allTonDeposits.forEach(dep => {
          userDeposits[dep.user_id] = (userDeposits[dep.user_id] || 0) + 1;
        });
        console.log('   - –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', userDeposits);
      }
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê –ù–ï–î–ê–í–ù–ò–• –ó–ê–ü–†–û–°–û–í –ö API
    console.log('\n3. üåê –ü–†–û–í–ï–†–ö–ê RECENT API REQUESTS:');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–≥–∏ API –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: apiLogs, error: logError } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', oneMinuteAgo)
      .ilike('description', '%api%')
      .order('created_at', { ascending: false });
    
    if (logError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ API –ª–æ–≥–æ–≤:', logError.message);
    } else {
      console.log(`   - –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö API –ª–æ–≥–æ–≤: ${apiLogs?.length || 0}`);
      apiLogs?.forEach(log => {
        console.log(`     - ${log.created_at}: ${log.description}`);
      });
    }
    
    // 4. –ü–†–û–í–ï–†–ö–ê ENDPOINT TON-DEPOSIT –ù–ê –î–û–°–¢–£–ü–ù–û–°–¢–¨
    console.log('\n4. üéØ –¢–ï–°–¢ ENDPOINT /api/v2/wallet/ton-deposit:');
    
    try {
      const testResponse = await fetch('http://localhost:3000/api/v2/wallet/ton-deposit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ton_tx_hash: 'diagnostic_test_hash_12345',
          amount: 0.01,
          wallet_address: 'diagnostic_test_address'
        })
      });
      
      console.log(`   - Status: ${testResponse.status} ${testResponse.statusText}`);
      
      if (testResponse.status === 401) {
        console.log('   ‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é - –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      } else {
        const responseText = await testResponse.text();
        console.log(`   - Response: ${responseText.substring(0, 200)}`);
      }
    } catch (fetchError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint: ${fetchError.message}`);
    }
    
    // 5. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê USER #25 –ù–ï–î–ê–í–ù–ï–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    console.log('\n5. üë§ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ USER #25:');
    
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
    const { data: user25Recent, error: user25Error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', fiveMinutesAgo)
      .order('created_at', { ascending: false});
    
    if (user25Error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ User #25:', user25Error.message);
    } else {
      console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25 –∑–∞ 5 –º–∏–Ω—É—Ç: ${user25Recent?.length || 0}`);
      
      const tonTxs = user25Recent?.filter(tx => tx.currency === 'TON') || [];
      console.log(`   - TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTxs.length}`);
      
      user25Recent?.forEach(tx => {
        console.log(`     - ${tx.created_at}: ${tx.type} ${tx.amount} ${tx.currency}`);
        console.log(`       Status: ${tx.status}, Desc: ${tx.description?.substring(0, 50)}`);
      });
    }
    
    // 6. –ü–†–û–í–ï–†–ö–ê SCHEMA TRANSACTIONS TABLE
    console.log('\n6. üèóÔ∏è SCHEMA TRANSACTIONS TABLE:');
    
    const { data: columns, error: schemaError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, column_default')
      .eq('table_name', 'transactions')
      .order('ordinal_position');
    
    if (schemaError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è schema:', schemaError.message);
    } else {
      console.log('   - –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions:');
      columns?.forEach(col => {
        console.log(`     - ${col.column_name}: ${col.data_type} (default: ${col.column_default})`);
      });
    }
    
    // 7. –ê–ù–ê–õ–ò–ó CONSTRAINTS –ò –ò–ù–î–ï–ö–°–û–í
    console.log('\n7. üîí CONSTRAINTS –ò –ò–ù–î–ï–ö–°–´:');
    
    const { data: constraints, error: constraintError } = await supabase
      .from('information_schema.table_constraints')
      .select('constraint_name, constraint_type')
      .eq('table_name', 'transactions');
    
    if (!constraintError && constraints) {
      console.log('   - Constraints —Ç–∞–±–ª–∏—Ü—ã transactions:');
      constraints.forEach(cons => {
        console.log(`     - ${cons.constraint_name}: ${cons.constraint_type}`);
      });
    }
    
    // 8. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
    console.log('\n8. üéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log('========================');
    
    const hasRecentActivity = (recentActivity?.length || 0) > 0;
    const hasTonDepositsEver = (allTonDeposits?.length || 0) > 0;
    const hasUser25Activity = (user25Recent?.length || 0) > 0;
    const hasUser25TonActivity = user25Recent?.some(tx => tx.currency === 'TON') || false;
    
    console.log(`—Å–∏—Å—Ç–µ–º–Ω–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${hasRecentActivity ? '–ê–ö–¢–ò–í–ù–ê' : '–ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
    console.log(`ton_deposit_—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: ${hasTonDepositsEver ? '–†–ê–ë–û–¢–ê–õ_–†–ê–ù–ï–ï' : '–ù–ò–ö–û–ì–î–ê_–ù–ï_–†–ê–ë–û–¢–ê–õ'}`);
    console.log(`user25_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${hasUser25Activity ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
    console.log(`user25_ton_–æ–ø–µ—Ä–∞—Ü–∏–∏: ${hasUser25TonActivity ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`endpoint_–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: –î–û–°–¢–£–ü–ï–ù (401 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
    
    if (!hasTonDepositsEver) {
      console.log(`–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô_–í–´–í–û–î: TON DEPOSIT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ù–ò–ö–û–ì–î–ê –ù–ï –†–ê–ë–û–¢–ê–õ –≤ production`);
      console.log(`–í–û–ó–ú–û–ñ–ù–ê–Ø_–ü–†–ò–ß–ò–ù–ê: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è tonConnectService ‚Üí backend –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –≤–æ–æ–±—â–µ`);
    } else if (!hasUser25TonActivity && hasUser25Activity) {
      console.log(`–í–´–í–û–î: User #25 –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ TON –æ–ø–µ—Ä–∞—Ü–∏–∏ –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–¢–°–Ø`);
      console.log(`–ü–†–ò–ß–ò–ù–ê: Frontend –ù–ï –í–´–ó–´–í–ê–ï–¢ backend –¥–ª—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:', error.message);
  }
}

deepChainInvestigation();