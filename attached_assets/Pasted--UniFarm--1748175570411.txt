Технічне завдання для агента

Ціль: провести повний аудит UniFarm та надати звіт по кожному пункту — без зміни коду.
Формат відповіді: таблиця з 3 колонками — Пункт, Статус, Коментар.

⸻

ВАШІ РОЛІ на час виконання ТЗ:
 1. Senior Code Auditor — перевіряє якість архітектури, дотримання LSP, чистоту контролерів, API і типів.
 2. Security Inspector — аналізує авторизацію, валідацію, маршрути, обхід перевірок.
 3. Mini App QA Tester — тестує запуск і поведінку в Telegram Mini App, логіку WebApp.
 4. Frontend Verifier — аналізує рендеринг, стилі, теми, логіку React-компонентів.
 5. Transactions & Wallet Checker — перевіряє логіку TON/UNI-гаманця, транзакцій, депозитів, бустів, реферальних нарахувань.

⸻

ВАЖЛИВО:
 • Не вносити жодних змін у код
 • Не створювати нові файли
 • Не видаляти існуючі рядки
 • Не покращувати, а тільки перевіряти
 • Писати об’єктивний звіт по кожному пункту

⸻

Звіт має виглядати так:

№ Пункт перевірки Статус Коментар
1 API повертає JSON, а не HTML ✅ Перевірено на /api/farming — JSON формат із status: 200
2 Telegram WebApp ініціалізація ⚠️ Відображається, але лог [TG INIT] відсутній
3 React логи в main.tsx ❌ Відсутні [RENDER], [DOM Ready] — додаток не підтверджує ініціалізацію

⸻

✅ ГЛОБАЛЬНИЙ ЧЕКЛІСТ ДЛЯ ПЕРЕВІРКИ UNIFARM

1. ФРОНТЕНД (React / Vite / CSS)
 • Перевірка main.tsx на правильність монтування компонентів
 • Наявність та робота React логів [TG INIT], [RENDER: App], [DOM Ready]
 • Перевірка теми: темна/світла тема, кольори, стилі
 • Стан стилів index.css, tailwind.config.js, vite.config.ts
 • Відображення всіх компонентів: Dashboard, Farming, Wallet, Задания, Партнёрка
 • Навігація: робота react-router або альтернативи

2. БЕКЕНД (Express / Node.js / TypeScript)
 • Перевірка server/index.ts: структура, типізація, маршрути
 • Логіка SPA fallback (не перехоплює /api/** запити)
 • Telegram WebApp init + авторизація
 • Підключення бази Neon PostgreSQL
 • Логіка start-unified.js — чи використовує production-мод

3. API та КОНТРОЛЕРИ
 • Перевірка всіх API endpoint: /api/farming, /api/wallet, /api/referral, /api/tasks
 • Перевірка, чи всі API повертають JSON (не HTML!)
 • Типи відповідей, валідація, статус-коди
 • Error handling (try/catch + логування)
 • SPA fallback не впливає на API

4. LSP (TypeScript, ESLint, @ts-ignore)
 • Повне усунення @ts-ignore у продакшн коді
 • TypeScript перевірка на рівні strict
 • Використання коректних типів (Record, Partial, unknown)
 • Lint-правила, ESLint конфігурація

5. МАРШРУТИ ТА РЕДИРЕКТИ
 • Перевірка всіх router.get, router.post
 • Перевірка динамічних маршрутів (наприклад, з параметрами)
 • Відсутність дубльованих маршрутів

6. ТРАНЗАКЦІЇ
 • Надсилання/отримання TON
 • Видача UNI токенів
 • Робота deposit, withdraw, harvest
 • Перевірка логіки boost-пакетів: нарахування бонусів
 • Робота з транзакціями в базі (db.insert, tx.select)

7. BOOST-ПАКЕТИ
 • Перевірка логіки активації бустів
 • Стекування бустів
 • Обмеження за часом/типом бустів
 • Візуальне відображення активного буста

8. TON-ПАКЕТИ
 • Перевірка TON farming
 • Розрахунок доходу в TON
 • Робота балансу + конверсія TON/UNI

9. КОШЕЛЬКИ
 • TON Connect / Wallet login
 • Збереження адреси
 • Робота кнопки “Connect Wallet”
 • Підтвердження транзакцій
 • Історія операцій (якщо є)

10. ПАРТНЕРСЬКА СИСТЕМА
 • Генерація реферального коду
 • Логіка рівнів (1-й рівень — 100%, 2-й — 2% і т.д.)
 • Логіка ReferralBonusProcessor, OptimizedReferralTreeService
 • Логіка бонусних нарахувань

11. ЗАДАНИЯ / МИССИИ
 • Створення, зберігання і перевірка завдань
 • Списки активних / виконаних
 • Перевірка ролі: тільки адміністратор може додавати
 • UI кнопок, API взаємодія

12. АДМІН ПАНЕЛЬ (якщо є)
 • Авторизація через Telegram
 • Підтвердження заявок на вивід
 • Видача депозитів вручну
 • Додавання місій

13. MINI APP (Telegram WebApp)
 • Ініціалізація Telegram.WebApp
 • Робота у веб/мобільній версії Telegram
 • Виведення логів TG INIT, TG AUTH, TG WEBAPP DATA
 • Валідація query_id

14. ЗАГАЛЬНІ РЕЧІ
 • Кешування статичних файлів (Vite — hashed assets)
 • SPA працює після refresh