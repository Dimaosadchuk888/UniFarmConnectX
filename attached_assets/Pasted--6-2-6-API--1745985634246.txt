Техническое задание №6: Этап 2.6 — Комплексная проверка связей: Контроллер → API → БД

⸻

Цель:

Проверить полную цепочку обработки запросов на сервере UniFarm:
API → Контроллер → База данных,
чтобы выявить любые оставшиеся ошибки в логике, валидации, записи данных и возврате ответа клиенту.

⸻

Что нужно сделать:

⸻

1. Проверка соответствия API и Контроллеров
 • Убедиться, что каждый активный API-эндпоинт (например, /api/uni-farming/deposit) правильно вызывает связанный контроллер,
 • Проверить, что в контроллере правильно обрабатываются входные параметры:
 • Правильные названия (amount, user_id, ref_code),
 • Корректный req.body и req.query,
 • Отсутствие неожиданных undefined или null.

⸻

2. Проверка взаимодействия Контроллеров с базой данных
 • Убедиться, что все записи в БД:
 • Делают вставку (INSERT) через ORM или SQL-код,
 • Логируют транзакции, начисления, регистрацию,
 • Имеют защиту от дублирующих операций.

Примеры:
 • /api/uni-farming/deposit → должен:
 • Создавать депозит в uni_farming_deposits,
 • Обновлять users.balance_uni,
 • Создавать transactions.
 • /api/referral/tree → должен:
 • Читать данные из referrals и users,
 • Возвращать валидную структуру дерева.

⸻

3. Проверка соответствия возвращаемого ответа
 • Все контроллеры должны возвращать:
 • HTTP-код 200 (если успех), 400/404 (если ошибка),
 • Структуру ответа: { success: true/false, data/error: ... },
 • Нельзя возвращать “сырые” JSON или неконсистентный формат.

⸻

4. Проверка согласованности цепочки на тестовых действиях
 • Провести цепочку действий:
 1. Создание пользователя,
 2. Регистрация в фарминге,
 3. Пополнение депозита,
 4. Сбор урожая,
 5. Вывод средств.

На каждом этапе проверить:
 • Как API вызывает контроллер,
 • Как контроллер пишет в базу,
 • Как API возвращает ответ.

⸻

5. Зафиксировать найденные ошибки и слабые места
 • Неверные связи между уровнями (например, поле не передаётся),
 • Пропущенные валидации,
 • Неотслеживаемые изменения в базе,
 • Несоответствие между кодом контроллера и структурой таблицы.

⸻

Результат:
 • Таблица по каждому API:
 • связанный контроллер,
 • действия с базой,
 • найденные проблемы и предложения,
 • Перечень всех цепочек, где поведение нарушено.

⸻

Ограничения:
 • Не менять архитектуру,
 • Не модифицировать сразу функциональность,
 • Только диагностика и фиксация несоответствий.