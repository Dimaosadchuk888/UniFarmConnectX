Вот техническое задание на следующий этап:
рефакторинг boostController + устранение ошибок LSP в маршрутах.

⸻

Техническое задание: Этап — Рефакторинг boostController + LSP в маршрутах

⸻

Цель:

Привести boostController в соответствие с архитектурными принципами (SRP, DRY, LSP),
а также устранить ошибки LSP, обнаруженные в routes.ts и сигнатурах методов контроллеров.

⸻

Часть 1 — Рефакторинг boostController

1. Вынести бизнес-логику в BoostService
 • Все вычисления бонусов, начисления, проверка TON, расчёт доходности — должны быть в сервисе.
 • Контроллер только принимает запрос и вызывает сервис.

2. Удалить прямой доступ к БД из контроллера
 • Только сервис работает с таблицами ton_boost_deposits, transactions, users.

3. Стандартизировать формат ответов
 • Использовать res.success(...), res.error(...), res.notFound(...) вместо ручного .json().

4. Валидация через Zod
 • Все входные параметры должны проходить через middleware (например, validateBoostRequest()).

5. Централизованная обработка ошибок
 • Все ошибки обрабатывать через errorHandler.

6. Типизация
 • Удалить все any, unknown, неявные типы.
 • Создать интерфейсы: BoostDepositRequest, BoostBonusResponse, BoostPackage.

⸻

Часть 2 — Устранение ошибок LSP в routes.ts и сигнатурах методов

1. Привести все методы контроллеров к единому виду:

async (req: Request, res: Response, next: NextFunction) => void

2. Проверить, что все передаваемые методы контроллеров:
 • имеют корректную типизацию,
 • вызываются без потери контекста (без .bind() или неправильного this).

3. Обновить маршруты для boostController:
 • /api/boosts/deposit
 • /api/boosts/active
 • /api/boosts/packages

⸻

Результат:
 • boostController полностью переработан под SOLID.
 • Ошибки LSP устранены в маршрутах и типах контроллеров.
 • Типизация и архитектура выровнены по всей цепочке: маршрут → контроллер → сервис → БД.

⸻

Готово для передачи в работу.
Хочешь после boostController перейти к telegramController, чтобы замкнуть цепочку всех основных контроллеров?