ТЕХНИЧЕСКОЕ ЗАДАНИЕ: ПРОВЕРКА ГЕНЕРАЦИИ ПОСТОЯННЫХ РЕФЕРАЛЬНЫХ КОДОВ

Роль:

Технический аудитор и backend-аналитик (не менять код, только анализ + вывод)

Цель:

Убедиться, что система генерирует постоянные реферальные коды, которые однозначно связаны с пользователем, сохраняются в базе данных и не создаются повторно при каждом входе.

⸻

Что необходимо проверить:

1. Генерация кода
 • Где именно создается реферальный код при регистрации?
 • Используется ли telegram_id или другой уникальный идентификатор для создания/привязки?
 • Какая функция отвечает за генерацию кода? (generateReferralCode, isRefCodeUnique и т.д.)
 • Проверить, создается ли один и тот же код при повторной авторизации того же пользователя.
 • Выдаётся ли временный код (temp_...) в случае ошибки или отсутствия кода в базе?

2. Сохранение кода
 • В какую таблицу и поле записывается реферальный код?
 • Есть ли уникальный индекс на поле ref_code, чтобы предотвратить дубликаты?
 • Привязан ли реферальный код к user_id или telegram_id?

3. Обработка повторных входов
 • Что происходит, если пользователь заходит повторно?
 • Есть ли проверка if user already has code -> return code, или код генерируется заново?

4. Ошибки и fallback
 • В каких случаях выдается временный код (temp_...)?
 • Откуда берется этот temp_code, и как он работает?

5. API-эндпоинт
 • Какой API обрабатывает выдачу кода (/api/referral/code, /generate-code и т.д.)?
 • Возвращает ли он постоянный код или fallback?

⸻

Ограничения:
 • ❌ Не изменять код.
 • ❌ Не вносить исправлений.
 • ✅ Только проверка, вывод и рекомендации.

⸻

Формат отчета:

Предоставить структурированный отчет по каждому пункту (1–5) в формате:

[1. Генерация кода]
• Метод: referralService.generateCode()
• Статус: используется уникальный telegram_id
• Проблема: при повторном входе создается новый код — ❌

[2. Сохранение кода]
• Таблица: users.ref_code
• Статус: сохраняется корректно, индекс есть — ✅
...


⸻

Обязательное требование:

После анализа — выполнить повторную самопроверку на наличие ошибок или пропущенных нюансов. Убедиться, что отчет точный и охватывает все участки логики, включая fallback.

⸻