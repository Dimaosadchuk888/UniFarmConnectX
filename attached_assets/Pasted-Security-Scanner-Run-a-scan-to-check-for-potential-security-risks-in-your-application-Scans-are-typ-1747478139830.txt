Security Scanner
Run a scan to check for potential security risks in your application. Scans are typically complete within minutes. Learn more
21 potential vulnerabilities found
Last ran on

5:27 pm, May 17, 2025
Detected potential vulnerability in .env.neon
Detected potential vulnerability in archive/telegram-bot-scripts/setup-telegram-webhook.js
Telegram Bot API Key detected
archive/telegram-bot-scripts/setup-telegram-webhook.js
const BOT\_TOKEN = '7980427501\:AAHdia3LusU9dk2aRvhXgmj9Ozo08nR0Gug';
Detected potential vulnerability in check-db-details.js
Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.
check-db-details.js
const countResult = await pool.query(`SELECT COUNT(*) FROM "${schema}"."${tableName}"`);
Detected potential vulnerability in client/src/pages/WebhookSetup.tsx
A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives, it is not recommended to be used in PR comments.
client/src/pages/WebhookSetup.tsx
const sampleToken = '81369...xtx4';
Detected potential vulnerability in deploy.js
Detected calls to child\_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child\_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
deploy.js
const childProcess = spawn(command, args, {
Detected potential vulnerability in neon-db-cli.js
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
neon-db-cli.js
spawn(editor, \['.env.neon'], {
stdio: 'inherit',
shell: true
}).on('close', () => {
Detected potential vulnerability in neon-db-cli.js
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
neon-db-cli.js
spawn('./start-with-neon.sh', \[], {
stdio: 'inherit',
shell: true
});
Detected potential vulnerability in neon-db-cli.js
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
neon-db-cli.js
spawn(editor, \['.env.neon'], {
stdio: 'inherit',
shell: true
});
Detected potential vulnerability in open-deployed-app.js
Detected calls to child\_process from a function argument `url`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child\_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
open-deployed-app.js
exec(command, (error) => {
Detected potential vulnerability in provision-database.sh
A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).
provision-database.sh
DB\_PASSWORD="replit\_pass"
Detected potential vulnerability in server/api/partition-routes.ts
Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.
server/api/partition-routes.ts
console.log(`[PartitionRoutes] Обрабатываем DELETE запрос на удаление партиции с ID: ${req.params.id}`);
Detected potential vulnerability in server/api/partition-routes.ts
Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.
server/api/partition-routes.ts
const dropQuery = `DROP TABLE IF EXISTS ${partitionName};`;
Detected potential vulnerability in setup-production-webhook.sh
Telegram Bot API Key detected
setup-production-webhook.sh
BOT\_TOKEN="7980427501\:AAHdia3LusU9dk2aRvhXgmj9Ozo08nR0Gug"
Detected potential vulnerability in start-deployment.js
Detected calls to child\_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child\_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
start-deployment.js
const childProcess = spawn(command, args, {
Detected potential vulnerability in start-replit.cjs
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
start-replit.cjs
const npmProcess = spawn('npm', \['run', 'dev'], {
stdio: 'inherit',
shell: true
});
Detected potential vulnerability in start-replit.js
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
start-replit.js
const npmProcess = spawn('npm', \['run', 'dev'], {
stdio: 'inherit',
shell: true
});
Detected potential vulnerability in start-unified.cjs
Detected calls to child\_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child\_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
start-unified.cjs
const childProcess = spawn(command, args, {
Detected potential vulnerability in start-unified.js
Detected calls to child\_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child\_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
start-unified.js
const childProcess = spawn(command, args, {
Detected potential vulnerability in start-with-neon-and-partitioning.cjs
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
start-with-neon-and-partitioning.cjs
const child = spawn(command, args, {
stdio: 'inherit',
shell: true,
...options
});
Detected potential vulnerability in start-with-neon-and-partitioning.cjs
Detected calls to child\_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child\_process, and if it is needed ensure user input is correctly sanitized or sandboxed.
start-with-neon-and-partitioning.cjs
const child = spawn(command, args, {
Detected potential vulnerability in start-with-replit-db.js
Found '\$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
start-with-replit-db.js
const postgresProcess = spawnSync('./start-postgres.sh', {
stdio: 'inherit',
shell: true
});
Detected potential vulnerability in test-unifarm-system.js
Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
test-unifarm-system.js
const wsUrl = API\_BASE.replace('https\://', 'wss\://').replace('http\://', 'ws\://').replace('/api', '/ws');
