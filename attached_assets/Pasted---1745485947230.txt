Выполнять строго поэтапно. После каждой задачи — отмечать статус: ✅ / ⏳ / ❌. Нельзя изменять другие участки проекта без согласования. 

Техническое задание для Replit: устранение ошибок с отображением реферальной ссылки и авторизацией

Формат работы:
 • Выполнять задачи строго по порядку.
 • После каждой задачи ставить отметку: ✅ Выполнено / ⏳ В процессе / ❌ Ошибка.
 • Нельзя изменять другие участки проекта, кроме явно указанных.

⸻

Этап 1: Проверка и передача Telegram-данных

Цель: Убедиться, что telegramInitData корректно передаётся из клиента на сервер и используется только проверенная информация.

1.1 Добавить строгую проверку window.Telegram.WebApp.initData
 • В App.tsx убедиться, что window.Telegram.WebApp.initData передаётся в AuthContext и доступен в любой части клиента.
 • Если данных нет — отображать сообщение: «Приложение не открыто из Telegram».

✅ Статус:

1.2 Передавать telegramInitData в запрос /api/me
 • В API-запросе к /api/me передавать x-telegram-init-data как заголовок.
 • На сервере в UserController.getCurrentUser извлекать Telegram ID только из проверенного initData, а не из req.headers напрямую.
 • Проверку initData можно использовать через уже существующую функцию validateTelegramInitData.

✅ Статус:

⸻

Этап 2: Генерация и возврат ref_code

Цель: Убедиться, что пользователю создаётся корректный ref_code, если он вошёл с Telegram.

2.1 Исправить UserController.getCurrentUser
 • Удалить любые попытки напрямую читать telegram_id из заголовков.
 • Использовать только верифицированные initData.
 • Если telegram_id найден, искать пользователя в БД.
 • Если нет — создать нового и сгенерировать ref_code.

✅ Статус:

2.2 Проверка генерации ref_code
 • После первого входа пользователя в Telegram Mini App, в БД должен появляться ref_code.
 • Проверить, что на фронтенде он возвращается через /api/me.

✅ Статус:

⸻

Этап 3: Отображение ссылки на фронтенде

Цель: Починить отображение реферальной ссылки в компоненте UniFarmReferralLink.

3.1 Проверка safeUser.ref_code
 • Убедиться, что ref_code приходит из API и передаётся в UniFarmReferralLink.
 • Добавить логирование в консоль, если ref_code пустой.

✅ Статус:

3.2 Упростить компонент UniFarmReferralLink
 • Если ref_code есть — отображать ссылку.
 • Если нет — отображать сообщение: «Реферальный код не получен. Попробуйте перезайти».
 • Удалить лишнюю условную логику с hasRefCode, force_direct и т.п., если она мешает отображению.

✅ Статус:

⸻

Этап 4: Упрощение логики Friends/FriendsMinimal

Цель: Избежать конфликтов между разными компонентами.

4.1 Заменить переключение между Friends и FriendsMinimal на одну версию
 • Выбрать один компонент (например, Friends) как основной.
 • Объединить его логику с отображением реферальной ссылки.
 • Удалить лишние проверки (например, if (isMinimalMode)), если они мешают отображению.

✅ Статус:

⸻

Этап 5: Поддержка режима разработки (dev)

Цель: Обеспечить тестирование в браузере без Telegram.

5.1 Добавить режим мок-данных
 • Если window.Telegram.WebApp.initData отсутствует (например, при запуске локально), использовать мок-данные: 

{
  id: 123456,
  username: "dev_user",
  first_name: "Dev",
  auth_date: Date.now(),
  hash: "test"
} 

✅ Статус:


Выполнять строго поэтапно. После каждой задачи — отмечать статус: ✅ / ⏳ / ❌. Нельзя изменять другие участки проекта без согласования.