üéØ –¶–µ–ª—å

–ü–µ—Ä–µ–π—Ç–∏ —Å –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgreSQL –Ω–∞ Supabase API —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É @supabase/supabase-js, —á—Ç–æ–±—ã –≤—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–æ –≤ —Å—Ä–µ–¥–µ Replit, –≥–¥–µ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (DATABASE_URL) –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è.

‚∏ª

‚úÖ –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º
 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase –∫–∞–∫ –∫ REST/Realtime API —á–µ—Ä–µ–∑ SDK.
 2. –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—ã: userService.ts, authService.ts, walletService.ts.
 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º SUPABASE_URL –∏ SUPABASE_KEY –∏–∑ .env.
 4. –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î –∏–¥—É—Ç —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã Supabase API (insert, select, update, delete).
 5. –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ pg.Pool, drizzle, DATABASE_URL.

‚∏ª

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ TXT):

// supabaseClient.ts
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_KEY || '';
export const supabase = createClient(supabaseUrl, supabaseKey);


‚∏ª


// userService.ts
import { supabase } from './supabaseClient';

export const createUser = async (user: { telegram_id: string, username?: string, ref_code?: string }) => {
  const { data, error } = await supabase
    .from('users')
    .insert([user]);

  if (error) throw error;
  return data;
};

export const getUserByTelegramId = async (telegram_id: string) => {
  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', telegram_id)
    .single();

  if (error) throw error;
  return data;
};


‚∏ª


// authService.ts
import { getUserByTelegramId, createUser } from './userService';

export const registerUser = async (telegram_id: string, username?: string, ref_code?: string) => {
  const existing = await getUserByTelegramId(telegram_id);
  if (existing) return existing;
  return await createUser({ telegram_id, username, ref_code });
};


‚∏ª


// walletService.ts
import { supabase } from './supabaseClient';

export const getWalletBalance = async (telegram_id: string) => {
  const { data, error } = await supabase
    .from('wallet')
    .select('*')
    .eq('telegram_id', telegram_id)
    .single();

  if (error) throw error;
  return data;
};

export const updateBalance = async (telegram_id: string, newBalance: number) => {
  const { data, error } = await supabase
    .from('wallet')
    .update({ balance: newBalance })
    .eq('telegram_id', telegram_id);

  if (error) throw error;
  return data;
};


‚∏ª

üìå –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ .env

SUPABASE_URL=https://wunnsvicbebssrjqedor.supabase.co
SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...


‚∏ª

üîÅ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
 ‚Ä¢ –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (pg, drizzle) –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º API –≤—ã–∑–æ–≤—ã Supabase.
 ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ, —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
 ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ Replit –±–µ–∑ VPN –∏ port settings.

‚∏ª