Техническое задание: Полный аудит системы отображения реферальной ссылки в Mini App

Провести полный аудит и диагностику причины, по которой реферальная ссылка не отображается в Telegram Mini App, несмотря на корректную генерацию ref_code. Нужно проверить всё от корня:

1. Проверка backend-логики
 • Убедиться, что ref_code генерируется при первом входе.
 • Проверить UserController, ReferralService, ReferralLinkCard.tsx.
 • Убедиться, что /api/me возвращает корректный объект ref_code.
 • Проверить миграции и схему БД на соответствие.

2. Проверка Telegram WebApp интеграции
 • Проверить, передаётся ли telegram_id корректно через Telegram WebApp.
 • Убедиться, что Telegram.WebApp.initDataUnsafe содержит валидные данные.
 • Проверить, не ломается ли TelegramService внутри WebApp.
 • Убедиться, что Mini App корректно запрашивает telegram_id.

3. Проверка frontend-логики
 • Проверить логику отображения ссылки в ReferralLinkCard.tsx — какие условия должны быть выполнены, чтобы ссылка отобразилась.
 • Убедиться, что состояние загрузки loading обрабатывается правильно.
 • Проверить fallback-сценарии (например, если ref_code отсутствует).

4. Проверка визуального блока
 • Убедиться, что блок, в котором отображается ссылка, не перекрыт, не скрыт и не заблокирован стилями или багами.
 • Проверить наличие z-index, display: none, visibility: hidden, opacity, position: absolute и т.п.
 • Проверить верстку внутри блока: нет ли конфликтов или ошибок в JSX/TSX.

5. Проверка Telegram-бота
 • Убедиться, что бот правильно инициализирует сессию.
 • Проверить, нет ли конфликтов между startapp, параметрами ref, ID и маршрутизацией.
 • Убедиться, что бот передаёт данные о пользователе в систему и не блокирует telegram_id.

6. Дополнительные проверки
 • Проверить, влияет ли использование кнопки “Connect Wallet” на отображение.
 • Провести тест с новым пользователем, новым аккаунтом Telegram, без кэша.
 • Проверить работу как в dev, так и в production.

⸻

Если всё это проверено — и баг не найден — значит, нужно пройтись по всем асинхронным вызовам, условиям и рендерингу, чтобы точно найти слабое место.