Отлично, у нас теперь есть детализированный технический отчет. На основе него я подготовил следующее техническое задание (ТЗ) для устранения ключевой проблемы с реферальной системой — отсутствием регистрации пользователя, что и приводит к постоянной генерации временных кодов.

⸻

ТЕХНИЧЕСКОЕ ЗАДАНИЕ: ВОССТАНОВЛЕНИЕ РЕГИСТРАЦИИ ПОЛЬЗОВАТЕЛЕЙ И ПРИВЯЗКА РЕФЕРАЛЬНОГО КОДА

Роль:

Backend-интегратор (разрешено вносить изменения в backend-контроллеры и сервис регистрации)

Цель:

Обеспечить, чтобы при первом входе пользователя в Telegram Mini App:
 • Он сохранялся в базе данных
 • Ему назначался и сохранялся постоянный реферальный код
 • При повторном входе возвращался один и тот же код

⸻

Что необходимо сделать:

1. Исправить регистрацию пользователя
 • Проверить, вызывается ли userService.createOrGetUserFromTelegram(initData)
 • Убедиться, что при первом входе пользователя создается запись в таблице users
 • Убедиться, что в этой записи создается поле ref_code
 • Устранить 404 ошибки API /api/users/create или аналога

2. Обновить генератор реферальных кодов
 • В ReferralController.generateReferralCode:
 • Если пользователь найден — возвращать его код
 • Если пользователь не найден — создать его через userService, затем выдать постоянный код
 • Сохранять код ref_... в БД, даже если он создан “временным” способом
 • Убедиться, что fallback-код не выдается без записи в БД

3. Обновить связанный frontend (если нужно)
 • Убедиться, что Telegram initData передается в sessionRestoreService
 • Проверить, правильно ли вызывается API генерации кода /api/v2/referral/code

⸻

Ограничения:
 • ❌ Запрещено генерировать temp_... или ref_... коды без сохранения в БД
 • ✅ Все коды должны быть уникальными, постоянными и привязанными к пользователю
 • ✅ Код должен сохраняться при первом входе, а не генерироваться повторно

⸻

После выполнения:
 • Провести повторную проверку:
 • Входит ли пользователь в БД?
 • Присваивается ли ему код?
 • Возвращается ли он повторно при следующем входе?
 • Протестировать через Telegram Mini App весь процесс входа → генерации кода → повторного входа

⸻