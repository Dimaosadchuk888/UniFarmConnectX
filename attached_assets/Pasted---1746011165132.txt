Пожалуйста, учти: мы работаем строго под ключ — никаких временных решений, заглушек или отложенной логики.
Все изменения должны сразу реализовываться полноценно и стабильно.
Наша цель — не тестировать, а постепенно и безопасно заменить старую архитектуру на новую, с полной боевой функциональностью на каждом этапе.
Просьба придерживаться этого принципа на всех последующих шагах.

Техническое задание — Этап 1: Подключение userContext и сервисов кошелька (без заглушек)

Цель:
Запустить новую архитектуру баланса и кошелька в UniFarm на основе централизованного userContext, без заглушек и временной логики. Всё должно работать полноценно и стабильно сразу после внедрения.

⸻

Что нужно реализовать:

1. Создать userContext (контекст пользователя)
 • Хранит и предоставляет:
 • userId, walletAddress, uniBalance, tonBalance
 • connectWallet(), disconnectWallet()
 • refreshBalance()
 • isWalletConnected, isFetching, error
 • Контекст должен получать userId из API (либо me, либо актуального initData)
 • Wallet должен подключаться через TonConnectUI
 • Всё подключение и обновление баланса — в продовой логике, без моков

2. Создать balanceService.ts
 • Метод fetchBalance(userId): Promise<Balance>
 • Загружает:
 • balance_uni
 • balance_ton
 • uni_deposit_amount
 • uni_farming_balance
 • Обработка ошибок — с выбросом исключения и логированием через errorHandler

3. Создать transactionService.ts
 • Метод fetchTransactions(userId): Promise<Transaction[]>
 • Формат полей: type, amount, status, timestamp, category, source
 • Отдельно вынести типы и форматирование

4. Интеграция в приложение
 • Обернуть App в UserProvider
 • Проверить, что контекст доступен во всех компонентах
 • Убедиться, что данные действительно загружаются при инициализации

5. Никаких временных решений
 • Всё должно быть рабочим с первого шага
 • Не использовать заглушки, фиктивные значения или отложенную реализацию

⸻

Результат:
 • Есть рабочий userContext с полноценным подключением кошелька и загрузкой баланса
 • Есть централизованные сервисы для баланса и транзакций
 • Контекст внедрён в приложение и готов для использования в компонентах (BalanceCard, ConnectWalletButton, TransactionHistory и др.)