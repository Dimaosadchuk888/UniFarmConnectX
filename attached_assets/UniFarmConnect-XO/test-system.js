/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã UniFarm
 */

import { db } from './server/db.js';
import { users, missions as missionsTable, transactions } from './shared/schema.js';
import { eq } from 'drizzle-orm';

console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã UniFarm...\n');

async function testDatabase() {
  console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const result = await db.select().from(users).limit(1);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    const tableCheck = await db.select().from(missionsTable).limit(1);
    console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

async function testUserCreation() {
  console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [newUser] = await db
      .insert(users)
      .values({
        telegram_id: 12345678,
        username: 'test_user',
        ref_code: 'TEST123',
        balance_uni: '1000.000000',
        balance_ton: '10.000000'
      })
      .returning();
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', {
      id: newUser.id,
      telegram_id: newUser.telegram_id,
      ref_code: newUser.ref_code
    });
    
    return newUser;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return null;
  }
}

async function testMissionsSystem() {
  console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏—Å—Å–∏–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏—Å—Å–∏–∏
    const missions = await db
      .select()
      .from(missionsTable)
      .where(eq(missionsTable.is_active, true));
    
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π –Ω–∞–π–¥–µ–Ω–æ:', missions.length);
    
    if (missions.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –º–∏—Å—Å–∏–π:');
      missions.slice(0, 3).forEach(mission => {
        console.log(`  - ${mission.title}: ${mission.reward_uni} UNI`);
      });
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∏—Å—Å–∏–π:', error.message);
    return false;
  }
}

async function testTransactionSystem(userId) {
  console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const [transaction] = await db
      .insert(transactions)
      .values({
        user_id: userId,
        transaction_type: 'test_reward',
        amount: '100.000000',
        currency: 'UNI',
        status: 'confirmed'
      })
      .returning();
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
      id: transaction.id,
      type: transaction.transaction_type,
      amount: transaction.amount
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    return false;
  }
}

async function testReferralSystem() {
  console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const [referrer] = await db
      .insert(users)
      .values({
        telegram_id: 87654321,
        username: 'referrer_user',
        ref_code: 'REF456',
        balance_uni: '500.000000'
      })
      .returning();
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    const [referred] = await db
      .insert(users)
      .values({
        telegram_id: 11223344,
        username: 'referred_user',
        parent_ref_code: 'REF456',
        ref_code: 'REF789',
        balance_uni: '0.000000'
      })
      .returning();
    
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', {
      referrer: referrer.ref_code,
      referred: referred.parent_ref_code
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error.message);
    return false;
  }
}

async function runTests() {
  const results = {
    database: false,
    userCreation: false,
    missionsSystem: false,
    transactionSystem: false,
    referralSystem: false
  };
  
  results.database = await testDatabase();
  
  if (results.database) {
    const testUser = await testUserCreation();
    results.userCreation = !!testUser;
    
    results.missionsSystem = await testMissionsSystem();
    
    if (testUser) {
      results.transactionSystem = await testTransactionSystem(testUser.id);
    }
    
    results.referralSystem = await testReferralSystem();
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=====================================');
  
  Object.entries(results).forEach(([test, passed]) => {
    const status = passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    const testName = test.replace(/([A-Z])/g, ' $1').toLowerCase();
    console.log(`${status} - ${testName}`);
  });
  
  const passedTests = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
  
  if (passedTests === totalTests) {
    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ UniFarm –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
  } else {
    console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.');
  }
  
  process.exit(0);
}

runTests().catch(console.error);