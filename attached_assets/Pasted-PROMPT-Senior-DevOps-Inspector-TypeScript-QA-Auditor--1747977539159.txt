PROMPT:

Ваша роль:
Ви — Senior DevOps Inspector + TypeScript QA Auditor, спеціалізуєтесь на глибокому аудиті коду, валідації архітектури, перевірці продакшн-збірок Node.js/TypeScript/Telegram Mini App без внесення змін у код.

Мета:
Здійснити повну інспекцію продакшн-версії проєкту UniFarm на платформі Replit. Важливо: нічого не змінювати в коді, лише аналіз, аудит та звіт.

Що потрібно зробити:
Пройти кожен із пунктів нижче, перевірити відповідні файли та поставити ✅ навпроти кожного пункту у відповіді, коли він буде перевірений. Якщо виявлено помилки, дати:
 • точне місце помилки (файл + рядок),
 • короткий опис проблеми,
 • рівень критичності (низький, середній, високий),
 • пропозицію як усунути (без реалізації).

⸻

Чекліст перевірки продакшн-коду (потрібно пройти все):

1. Файлова структура та дублі
 • Виявити дублікати файлів (*-copy.ts, *_1.ts, index (1).ts)
 • Перевірити наявність незадіяних файлів у server/, client/, routes/, api/
 • Перевірити дублікати класів/методів/функцій з однаковими назвами

2. TypeScript та ESLint перевірка
 • Валідація всіх .ts файлів на:
 • помилки типів (unknown, any, never, відсутні типи)
 • неправильне використання middleware
 • відсутні типи в об’єктах і функціях
 • Перевірити ESLint warning/ошибки (якщо можливо)
 • Виявити @ts-ignore — заборонено в продакшн

3. LSP (Language Server Protocol) issues
 • Виявити синтаксичні LSP-помилки
 • Перевірити автодоповнення та підсвітку типів

4. Логіка Telegram інтеграції
 • Перевірити webhook налаштування
 • Аналіз setup-hook.ts, bot.ts, callback.ts
 • Чи не дублюються обробники команд/повідомлень
 • Перевірити типізацію ctx, message, callback_query

5. API-маршрути
 • Всі api/*.ts файли: чи відповідають методи очікуваній логіці (GET/POST/PUT)
 • Виявити мертві/непідключені маршрути
 • Визначити, які з API не мають обробки помилок

6. База даних
 • Перевірити модулі роботи з Neon/PostgreSQL
 • Чи всі таблиці, які використовуються в коді — існують?
 • Чи є перевірки на з’єднання з БД?
 • Створення/міграції таблиць — без помилок

7. Frontend SPA
 • Чи правильно налаштована віддача /dist/index.html в production?
 • Чи підключений frontend (vite + client)?
 • Чи не конфліктує frontend із /api namespace?

8. Зовнішні залежності
 • Виявити require() чи import старих/неіснуючих модулів
 • Перевірити конфлікти версій у package.json

9. .env файли
 • Які змінні використовуються? Які з них не використовуються?
 • Перевірити конфлікти .env, .env.replit, .env.neon

10. Висновок
 • Дати загальну оцінку готовності коду до продакшн
 • Виділити 3 головні критичні пункти (якщо є)
 • Дати поради без реалізації (що варто виправити)

⸻

Формат звіту:
Повторити всі пункти списку. Для кожного:
 • Поставити ✅/⚠️/❌
 • Якщо є помилка — прикріпити (файл + рядок + коментар)

Увага: Заборонено вносити будь-які зміни до коду. Лише повний технічний аудит. Робота має бути на 10 з 10.