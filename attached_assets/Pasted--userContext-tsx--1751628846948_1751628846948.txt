–í–æ—Ç –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω userContext.tsx —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–π –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π TonConnectUI, –±–µ–∑ –æ—à–∏–±–æ–∫, –∑–∞–≥–ª—É—à–µ–∫ –∏ –ø–æ–ª–æ–º–æ–∫. –≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω ‚Äî –ø—É—Å—Ç—å –∞–≥–µ–Ω—Ç —Å—Ç—Ä–æ–≥–æ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –æ—Ç –Ω–µ–≥–æ:

‚∏ª

‚úÖ client/src/contexts/userContext.tsx ‚Äî –®–ê–ë–õ–û–ù –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô TONCONNECT

import React, { createContext, useContext, useEffect, useMemo, useState, useCallback } from 'react';
import { useTonConnectUI } from '@tonconnect/ui-react';
import { getWalletAddress, isWalletConnected, connectWallet, disconnectWallet } from '../utils/ton'; // –ø—É—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç

interface UserContextType {
  isConnected: boolean;
  walletAddress: string | null;
  handleConnectWallet: () => void;
  handleDisconnectWallet: () => void;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [tonConnectUI] = useTonConnectUI();

  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(false);

  const handleConnectWallet = useCallback(() => {
    connectWallet(tonConnectUI)
      .then((address) => {
        setWalletAddress(address);
        setIsConnected(true);
      })
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TonConnect:', err);
      });
  }, [tonConnectUI]);

  const handleDisconnectWallet = useCallback(() => {
    disconnectWallet(tonConnectUI)
      .then(() => {
        setWalletAddress(null);
        setIsConnected(false);
      })
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è TonConnect:', err);
      });
  }, [tonConnectUI]);

  useEffect(() => {
    const checkConnection = async () => {
      const connected = await isWalletConnected(tonConnectUI);
      setIsConnected(connected);

      if (connected) {
        const address = await getWalletAddress(tonConnectUI);
        setWalletAddress(address);
      } else {
        setWalletAddress(null);
      }
    };

    checkConnection();
  }, [tonConnectUI]);

  const contextValue = useMemo(
    () => ({
      isConnected,
      walletAddress,
      handleConnectWallet,
      handleDisconnectWallet
    }),
    [isConnected, walletAddress, handleConnectWallet, handleDisconnectWallet]
  );

  return <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>;
};

export const useUserContext = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUserContext –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ <UserProvider>');
  }
  return context;
};


‚∏ª

üìå –ß—Ç–æ –µ—â—ë –Ω—É–∂–Ω–æ:
 ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ utils/ton.ts –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:
 ‚Ä¢ connectWallet(tonConnectUI)
 ‚Ä¢ disconnectWallet(tonConnectUI)
 ‚Ä¢ isWalletConnected(tonConnectUI)
 ‚Ä¢ getWalletAddress(tonConnectUI)

–ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî —è –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —Å—Ç–µ–∫.

‚∏ª

‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏:
 ‚Ä¢ –ö–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π
 ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç best-practices (DRY, early return, useCallback/useMemo)
 ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º —Å @tonconnect/ui-react
 ‚Ä¢ –ë–µ–∑ –æ—à–∏–±–æ–∫ TypeScript
 ‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤ –∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞–º
 ‚Ä¢ –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å

–•–æ—á–µ—à—å, —è –µ—â—ë —Å–¥–µ–ª–∞—é —à–∞–±–ª–æ–Ω utils/ton.ts —Å —ç—Ç–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏?