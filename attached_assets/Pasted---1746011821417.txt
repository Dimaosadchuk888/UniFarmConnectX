Техническое задание: Рефакторинг компонентов на основе нового контекста и сервисов

Цель:
Перевести ключевые компоненты кошелька на работу через userContext, balanceService, transactionService, устранить дублирование, улучшить UX и обработку ошибок.

⸻

Задачи по компонентам:

1. BalanceCard.tsx
 • Заменить все обращения к API на useUser() из userContext.
 • Убрать setInterval, обновление баланса должно идти через refreshBalance.
 • Удалить жестко заданный user_id.
 • Упростить компонент, исключив лишние useEffect.

2. ConnectWalletButton.tsx
 • Использовать useUser() для подключения / отключения кошелька.
 • Добавить loading-состояние при попытке подключения.
 • Удалить console.log, отладочные данные и лишние проверки.

3. TransactionHistory.tsx
 • Получать транзакции через transactionService с использованием userId из userContext.
 • Вынести форматирование типов и сумм в утилиты.
 • Упростить структуру: уменьшить количество вложенных условий.
 • Добавить поддержку пагинации (по желанию, если позволяет API).

4. WalletConnectionCard.tsx
 • Удалить дублирующуюся логику с ConnectWalletButton.
 • Использовать состояния из userContext:
 • isWalletConnected, walletAddress, connectWallet, disconnectWallet.
 • Добавить индикацию подключения и отображение ошибки при неудаче.

5. WithdrawalForm.tsx
 • Подключить userContext для проверки баланса.
 • Добавить валидацию формы с помощью Zod.
 • Реализовать вызов API для отправки формы (если ещё не подключено).
 • Отобразить сообщение об ошибке при недостаточном балансе.

⸻

Дополнительные задачи:
 • Очистить все отладочные логи (console.log, localStorage).
 • Обеспечить единый UX: индикаторы загрузки, информативные ошибки, реакция на действия пользователя.
 • Проверить совместимость с WebSocket (если используется).

⸻

Ожидаемый результат:
 • Все компоненты используют единый userContext.
 • Нет дублирующих запросов к API.
 • Улучшен UX при ошибках и загрузке.
 • Удалены “заглушки”, жестко заданные значения и временные конструкции.