–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç **–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ backend UniFarm** ‚Äî –ø—É–Ω–∫—Ç **‚úÖ 2. –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã backend**:

---

## ‚úÖ 2. –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã backend (–¥–µ—Ç–∞–ª—å–Ω–æ)

### üîπ a) –í—ã–Ω–µ—Å–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ `db.js`

**–ß—Ç–æ –±—ã–ª–æ –¥–æ:**

* –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –∏ SQL-–∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º.
* –ü–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
* –ù–µ –±—ã–ª–æ –µ–¥–∏–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.

**–ß—Ç–æ —Å–¥–µ–ª–∞–ª–∏:**

* –°–æ–∑–¥–∞–ª–∏ –µ–¥–∏–Ω—ã–π –º–æ–¥—É–ª—å `db.js`, –∫–æ—Ç–æ—Ä—ã–π:

  * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –æ–¥–∏–Ω —Ä–∞–∑;
  * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö;
  * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç—å –∫ SQLite –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgreSQL).

üîß –ü—Ä–∏–º–µ—Ä:

```js
// backend/db.js
import { drizzle } from 'drizzle-orm/node-postgres'; // –∏–ª–∏ –¥—Ä—É–≥–æ–π –∞–¥–∞–ø—Ç–µ—Ä
import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

export const db = drizzle(pool);
```

---

### üîπ b) –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ `shared/schema.js` –¥–ª—è Drizzle ORM

**–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ:**

* –ß—Ç–æ–±—ã —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã `users`, `referrals`, –∏ –¥—Ä—É–≥–∏–µ.
* –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä—É—á–Ω–æ–≥–æ SQL, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–∞–º —Ç–∏–ø–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –∏–ª–∏ null –≤ ref\_code).
* –î–µ–ª–∞—Ç—å JOIN'—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ —Å—Ö–µ–º—É.

**–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç:**

* –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ Drizzle ORM.
* –ù–∞–∑–Ω–∞—á–µ–Ω—ã –∫–ª—é—á–∏, –∏–Ω–¥–µ–∫—Å—ã, nullable-–∑–Ω–∞—á–µ–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

üîß –ü—Ä–∏–º–µ—Ä:

```js
// shared/schema.js
import { pgTable, varchar, integer, primaryKey } from 'drizzle-orm/pg-core';

export const users = pgTable("users", {
  id: integer("id").primaryKey(),
  username: varchar("username", { length: 255 }),
  ref_code: varchar("ref_code", { length: 20 }).unique(),
});

export const referrals = pgTable("referrals", {
  id: integer("id").primaryKey(),
  user_id: integer("user_id").references(() => users.id),
  referred_by: integer("referred_by").references(() => users.id),
  created_at: varchar("created_at", { length: 255 }),
});
```

---

### üîπ c) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è (TypeScript-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)

**–ß—Ç–æ –±—ã–ª–æ –¥–æ:**

* –ú–∞—Å—Å–∏–≤—ã, –æ–±—ä–µ–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–æ–ø–∞–ª–æ, –±–µ–∑ —Ç–∏–ø–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
* –û—à–∏–±–∫–∏: –Ω–µ —Ç–æ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ `ref_code`, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—è –≤ `users`, –æ—à–∏–±–∫–∏ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

**–ß—Ç–æ —Ç–µ–ø–µ—Ä—å:**

* –°–æ–∑–¥–∞–Ω—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã `User`, `Referral`, `RefTreeNode`, `ReferralRewardInfo`:

  * IDE –∏ TypeScript –ø–æ–º–æ–≥–∞—é—Ç –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ —Å—Ä–∞–∑—É;
  * –£–ø—Ä–æ—â–∞–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º;
  * –õ–µ–≥—á–µ —Å—Ç—Ä–æ–∏—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.

üîß –ü—Ä–∏–º–µ—Ä:

```ts
export interface User {
  id: number;
  username: string | null;
  ref_code: string | null;
}

export interface RefTreeNode {
  id: number;
  username: string | null;
  ref_code: string | null;
  level: number;
}
```

---

### ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:

* –ö–æ–¥ backend —Å—Ç–∞–ª **—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–º**.
* –£–º–µ–Ω—å—à–µ–Ω —Ä–∏—Å–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
* –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∏ –∏ API ‚Äî –Ω–µ –±–æ—è—Å—å —Å–ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É.

---

–•–æ—á–µ—à—å, —Å–æ–±–µ—Ä—É –≤—Å—é —ç—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –≤–∏–¥–µ –≥–æ—Ç–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ `backend_structure.md` –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É?
