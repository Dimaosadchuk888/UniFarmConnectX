ЗАДАЧА: Production Аудит і Верифікація Збірки UniFarm

Мета:
Підтвердити, що реально запущена версія UniFarm є Production-режимом, а не Developer-збіркою. Знайти, чому Mini App в Telegram все ще не працює (чорний екран, API fallback, критичні помилки в логах).

⸻

1. Перевірка Збірки
 • Перевірити package.json → які команди запускаються при start, build, dev
 • Встановлено чи прапор NODE_ENV=production
 • У Replit визначити, яка команда виконується у replit.nix, replitConfig, .replit або запускному скрипті

2. Перевірка Секретів
 • Вивантажити всі Secrets у Replit (REPLIT_ENV, TELEGRAM_BOT_TOKEN, DATABASE_URL, VITE_*)
 • Перевірити, чи немає конфліктів між продакшн і дев-змінними
 • Переконатися, що Replit використовує правильні токени та URL для Production

3. Перевірка Frontend Збірки
 • Збірка frontend: чи використовується vite build для production
 • Перевірити вміст /dist — чи актуальна версія там
 • Переконатися, що express.static() у backend вказує саме на production-збірку (dist/)

4. Перевірка Backend
 • У server/index.ts перевірити middleware SPA fallback — чи точно віддається dist/index.html
 • Перевірити, чи server.ts не використовує Vite middleware (тільки для dev)
 • Перевірити логіку process.env.NODE_ENV — чи впливає на вибір конфігурації

5. Перевірка Telegram Mini App
 • Перевірити: який URL переданий у Telegram Mini App (production чи dev)
 • Перевірити, чи віддається актуальний frontend через браузер і Mini App
 • Перевірити, чи точно не кешується стара версія (додати console.log у index.html)

6. Повна перевірка логів
 • Витягнути всі помилки Telegram, __dirname, db.select, fallback 500
 • Перевірити, чи вони виникають у результаті неправильного білда або секретів

⸻

Умови:
 • Не змінювати нічого у коді, тільки аналіз.
 • Всі перевірені пункти підтвердити галочкою.
 • Наприкінці — зробити підсумковий звіт, де написано:
 • Чи дійсно продакшн збірка використовується
 • Якщо ні — що саме підключено зараз
 • Що потрібно виправити, щоб перейти на повноцінний продакшн