Отлично, ты всё правильно сформулировал. Вот точное ТЗ для проведения полного аудита всей системы UniFarming:

⸻

Техническое задание: Глубокий аудит Telegram Mini App UniFarming

Цель:
Найти причину некорректной работы приложения, включая:
 • отсутствие отображения реферальной ссылки,
 • ошибку авторизации (Ошибка подключения к серверу / Не удалось получить данные пользователя из Telegram),
 • сбой отображения данных по токенам,
 • общее поведение UX интерфейса в мини-приложении Telegram.

⸻

1. Проверка инициализации Telegram WebApp
 • Убедиться, что Telegram SDK корректно подключён и инициализируется через <script src="https://telegram.org/js/telegram-web-app.js"></script>.
 • Проверить, передаётся ли initData при запуске в Telegram.
 • Вывести в консоль:
 • window.Telegram.WebApp.initData
 • user.id, startParam, WebApp.platform, WebApp.isExpanded()

⸻

2. Проверка обработки initData
 • Убедиться, что при получении пустого или отсутствующего initData, приложение не крашится, а работает в fallback-режиме.
 • В случае отсутствия initData, должны отображаться Stub-компоненты или предупреждение, но не должно быть полной блокировки интерфейса.

⸻

3. Проверка логики получения и отображения реферальной ссылки
 • Убедиться, что:
 • API /api/me возвращает данные с ref_code
 • Компонент ReferralLinkCard.tsx не зависит от наличия window.Telegram
 • Компонент FallbackReferralLink.tsx работает корректно и встроен в нужную страницу (например, FriendsPage или Dashboard)
 • Проверить, что при наличии ref_code ссылка формируется как: https://t.me/UniFarming_Bot/UniFarm?startapp=ref_${ref_code} 



⸻

4. Общий аудит frontend логики
 • Найти конфликты между App.tsx, AppRouter, TelegramService и UserContext.
 • Проверить правильность передачи telegramId, ref_code, walletAddress в глобальные контексты.
 • Проверить, не происходит ли двойная инициализация или отмена initData.

⸻

5. Аудит backend и API логики
 • Убедиться, что при получении telegramId создаётся или возвращается правильный ref_code.
 • Проверить /api/referral/code и /api/me:
 • не возвращают ли ошибку, если initData пустой?
 • можно ли выполнять запросы без Telegram авторизации?
 • Проверить WebSocket-соединение, которое отвечает за UNI / сек, Last fetch, WS status.

⸻

6. Аудит отображения дизайна и интерфейса
 • Проверить, не блокирует ли условный рендеринг интерфейс в случае недоступности Telegram API.
 • Проверить отображение разделов: “Кошелёк”, “Партнёрка”, “Фарминг”, “Задания”.
 • Убедиться, что:
 • fallback-компоненты рендерятся при ошибке;
 • баннер с предупреждением не перекрывает интерфейс;
 • ошибки сервера не блокируют отображение баланса и структуры.

⸻

Ожидаемый результат:
 • Чёткое понимание, где происходит сбой: на уровне Telegram API, frontend-логики, backend или UI.
 • Восстановление отображения данных и корректной работы всех разделов.
 • Обновлённые логи и отчёт об устранённых и оставшихся проблемах.