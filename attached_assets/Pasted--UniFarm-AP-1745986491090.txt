Устранить ключевые проблемы в серверной части UniFarm, выявленные при аудите цепочки Контроллер → API → База данных.
Это необходимо для полной стабильности, безопасности и масштабируемости проекта перед релизом.

⸻

Что требуется сделать:

⸻

1. Унификация форматов ответов всех API-контроллеров

Проблема:
Контроллеры возвращают несогласованные JSON-ответы, что затрудняет клиентскую обработку.

Решение:
 • Все контроллеры должны возвращать структуру:
{ success: true/false, data?: object, error?: string },
 • В случае ошибок — четкий код и текст ошибки (400, 404, 500 и т.п.).

⸻

2. Усиление валидации входных данных

Проблема:
Некоторые контроллеры принимают любые значения — включая amount <= 0, пустые строки, null.

Решение:
 • Добавить строгую проверку:
 • amount должен быть числом > 0,
 • user_id и guest_id должны существовать,
 • ref_code, wallet должны соответствовать формату.

⸻

3. Проверка существования пользователя

Проблема:
В некоторых контроллерах возможно выполнение операций от несуществующего пользователя.

Решение:
 • Перед выполнением любой бизнес-логики (начисление, вывод, сбор дохода):
 • Проверять наличие пользователя в БД,
 • В случае отсутствия — возвращать 404 Not Found.

⸻

4. Введение транзакционности для критических операций

Проблема:
Операции с балансами и фармингом выполняются без защиты — возможны частичные записи.

Решение:
 • Обернуть следующие операции в транзакции (если используется ORM или вручную):
 • Создание депозита,
 • Списание при выводе,
 • Начисление фарминга/бустов.

⸻

5. Добавить пагинацию в критически важные запросы

Проблема:
Ответы /transactions, /referral/tree, /user-missions могут вернуть слишком большой объём данных.

Решение:
 • Ввести поддержку параметров limit, offset (или page, per_page) в следующих маршрутах:
 • /api/transactions
 • /api/referral/tree
 • /api/uni-farming/deposits
 • По умолчанию ограничить вывод до 20–50 записей.

⸻

Формат подтверждения:
 • Примеры JSON-ответов до/после (API → Controller),
 • Подтверждение исправлений валидации и транзакционности,
 • Примеры запросов с пагинацией.

⸻

Ограничения:
 • Не менять логику начислений или балансов без согласования,
 • Не модифицировать клиентскую часть.