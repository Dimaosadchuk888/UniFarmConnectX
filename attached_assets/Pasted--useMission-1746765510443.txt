–í–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Ö—É–∫ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:

---

### ‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ö—É–∫: `useMissionsSafe.ts`**

```ts
import { useState, useEffect } from 'react';
import { correctApiRequest } from '@/lib/correctApiRequest';
import { useUser } from '@/contexts/userContext';

export interface Mission {
  id: number;
  type: string;
  title: string;
  description: string;
  reward_uni: string;
  is_active: boolean;
}

export interface UserMission {
  id: number;
  user_id: number;
  mission_id: number;
  completed_at: string;
}

export function useMissionsSafe(forceRefresh: boolean = false) {
  const { userId } = useUser();

  const [missions, setMissions] = useState<Mission[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let isMounted = true;

    async function fetchData() {
      try {
        setLoading(true);
        setError(null);

        let missionsUrl = '/api/missions/active';
        if (forceRefresh) {
          const noCache = Date.now();
          missionsUrl += `?nocache=${noCache}`;
        }

        const missionsResponse = await correctApiRequest(missionsUrl, 'GET');

        if (!isMounted) return;

        if (missionsResponse?.success && Array.isArray(missionsResponse.data)) {
          setMissions(missionsResponse.data);
        } else {
          console.error('[useMissionsSafe] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏—Å—Å–∏–π');
          setMissions([]); // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
        }
      } catch (err) {
        if (!isMounted) return;
        console.error('[useMissionsSafe] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Å—Å–∏–π', err);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Å—Å–∏–π');
        setMissions([]); // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç undefined –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      } finally {
        if (isMounted) setLoading(false);
      }
    }

    fetchData();

    return () => {
      isMounted = false;
    };
  }, [forceRefresh, userId]);

  return { missions, loading, error };
}
```

---

### ‚úÖ **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: `SafeMissionsList.tsx`**

```tsx
import React from 'react';
import { useMissionsSafe } from '@/hooks/use-missions-safe';
import { MissionCard } from '@/components/missions/MissionCard'; // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ –º–∏—Å—Å–∏–∏

interface SafeMissionsListProps {
  forceRefresh?: boolean;
}

export const SafeMissionsList: React.FC<SafeMissionsListProps> = ({ forceRefresh = false }) => {
  const { missions, loading, error } = useMissionsSafe(forceRefresh);

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–π...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞: {error}</div>;
  if (!missions.length) return <div>–ú–∏—Å—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!</div>;

  return (
    <div className="missions-list">
      {missions.map((mission) => (
        <MissionCard key={mission.id} {...mission} />
      ))}
    </div>
  );
};
```

---

### üìå **–ß—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏:**

* –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏, —á—Ç–æ `missions` –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
* –î–æ–±–∞–≤–∏–ª–∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ —á–µ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
* –ò—Å–∫–ª—é—á–∏–ª–∏ –æ—à–∏–±–∫—É `.map is not a function` –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–∏–ø–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫.

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Å—Ä–∞–∑—É –ø–æ–ª–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–º–µ–Ω—ã! üòä
