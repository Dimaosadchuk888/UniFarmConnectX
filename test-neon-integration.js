#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UniFarm —Å Neon DB
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Neon DB:
 * 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CRUD
 * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ñ–∞—Ä–º–∏–Ω–≥)
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import fs from 'fs';
import { Pool } from 'pg';
import 'dotenv/config';
import crypto from 'crypto';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
function loadEnvFromFile() {
  try {
    const envFile = fs.readFileSync('.env.neon', 'utf8');
    const envVars = {};
    
    envFile.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const parts = line.split('=');
        if (parts.length >= 2) {
          const key = parts[0].trim();
          const value = parts.slice(1).join('=').trim();
          
          if (key && value) {
            envVars[key] = value;
            process.env[key] = value;
          }
        }
      }
    });
    
    return envVars;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${error.message}`, colors.red);
    return {};
  }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class NeonDBTester {
  constructor() {
    this.pool = null;
    this.testResults = {
      connection: false,
      tables: {},
      users: false,
      transactions: false,
      farming: false,
      performance: {}
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async init() {
    log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UniFarm —Å Neon DB...', colors.blue);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadEnvFromFile();
    
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.neon');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: false
      },
      max: 5
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const result = await this.pool.query('SELECT 1 as connected');
    this.testResults.connection = result.rows[0].connected === 1;
    
    if (this.testResults.connection) {
      log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', colors.green);
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Neon DB');
    }
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async close() {
    if (this.pool) {
      await this.pool.end();
      log('üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon DB –∑–∞–∫—Ä—ã—Ç–æ', colors.yellow);
    }
  }
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  async testTables() {
    log('\nüîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...', colors.blue);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    const tablesResult = await this.pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    const requiredTables = [
      'users', 
      'transactions', 
      'farming_deposits', 
      'referrals',
      'missions',
      'user_missions',
      'auth_users'
    ];
    
    const existingTables = tablesResult.rows.map(row => row.table_name);
    const missingTables = requiredTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length > 0) {
      log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(', ')}`, colors.red);
    } else {
      log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç', colors.green);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    for (const table of existingTables) {
      try {
        const countResult = await this.pool.query(`SELECT COUNT(*) FROM "${table}"`);
        const count = parseInt(countResult.rows[0].count);
        this.testResults.tables[table] = count;
        
        const status = count > 0 ? colors.green : colors.yellow;
        log(`üìä ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`, status);
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ ${table}: ${error.message}`, colors.red);
        this.testResults.tables[table] = null;
      }
    }
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async testUsers() {
    log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...', colors.blue);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      const testUsername = `test_user_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      const refCode = crypto.randomBytes(6).toString('hex');
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUsername}`, colors.cyan);
      const insertResult = await this.pool.query(`
        INSERT INTO users (username, ref_code, balance_uni, balance_ton, created_at)
        VALUES ($1, $2, 100, 10, NOW())
        RETURNING id, username, ref_code
      `, [testUsername, refCode]);
      
      const userId = insertResult.rows[0].id;
      log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, ID: ${userId}`, colors.green);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', colors.cyan);
      await this.pool.query(`
        UPDATE users
        SET balance_uni = balance_uni + 50
        WHERE id = $1
      `, [userId]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const userResult = await this.pool.query(`
        SELECT id, username, ref_code, balance_uni, balance_ton
        FROM users WHERE id = $1
      `, [userId]);
      
      const user = userResult.rows[0];
      if (user && user.balance_uni === 150) {
        log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ', colors.green);
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', colors.red);
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', colors.cyan);
      await this.pool.query('DELETE FROM users WHERE id = $1', [userId]);
      
      const checkDeleted = await this.pool.query('SELECT id FROM users WHERE id = $1', [userId]);
      if (checkDeleted.rowCount === 0) {
        log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', colors.green);
        this.testResults.users = true;
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', colors.red);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, colors.red);
      console.error(error);
    }
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async testTransactions() {
    log('\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏...', colors.blue);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.cyan);
      
      const partitioningCheck = await this.pool.query(`
        SELECT pg_get_partkeydef(c.oid) as partition_key
        FROM pg_class c
        WHERE c.relname = 'transactions'
        AND c.relkind = 'p'
        LIMIT 1
      `);
      
      const isPartitioned = partitioningCheck.rowCount > 0 && partitioningCheck.rows[0]?.partition_key;
      
      if (isPartitioned) {
        log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –∫–ª—é—á—É: ${partitioningCheck.rows[0].partition_key}`, colors.green);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏
        const partitionsCheck = await this.pool.query(`
          SELECT child.relname AS partition_name
          FROM pg_inherits
          JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
          JOIN pg_class child ON pg_inherits.inhrelid = child.oid
          WHERE parent.relname = 'transactions'
          ORDER BY partition_name
        `);
        
        if (partitionsCheck.rowCount > 0) {
          log(`üìã –ù–∞–π–¥–µ–Ω–æ ${partitionsCheck.rowCount} –ø–∞—Ä—Ç–∏—Ü–∏–π:`, colors.cyan);
          partitionsCheck.rows.slice(0, 5).forEach(row => {
            log(`   - ${row.partition_name}`, colors.reset);
          });
          
          if (partitionsCheck.rowCount > 5) {
            log(`   ... –∏ –µ—â—ë ${partitionsCheck.rowCount - 5} –ø–∞—Ä—Ç–∏—Ü–∏–π`, colors.reset);
          }
        } else {
          log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –ø–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', colors.yellow);
        }
      } else {
        log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –ù–ï –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞', colors.yellow);
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–ª—è –Ω–µ-–ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü)
      const testUserId = 1; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCheck = await this.pool.query('SELECT id FROM users WHERE id = $1', [testUserId]);
      
      if (userCheck.rowCount === 0) {
        log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${testUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, colors.yellow);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const tempUserResult = await this.pool.query(`
          INSERT INTO users (username, ref_code, balance_uni, created_at)
          VALUES ($1, $2, 100, NOW())
          RETURNING id
        `, [`temp_user_${Date.now()}`, `temp_${crypto.randomBytes(4).toString('hex')}`]);
        
        testUserId = tempUserResult.rows[0].id;
      }
      
      log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}...`, colors.cyan);
      
      const insertResult = await this.pool.query(`
        INSERT INTO transactions 
        (user_id, type, currency, amount, status, source, description, created_at)
        VALUES 
        ($1, 'deposit', 'UNI', 25.5, 'confirmed', 'test', 'Test transaction', NOW())
        RETURNING id
      `, [testUserId]);
      
      const transactionId = insertResult.rows[0].id;
      
      if (transactionId) {
        log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, ID: ${transactionId}`, colors.green);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactionCheck = await this.pool.query(`
          SELECT id, user_id, amount, currency, type
          FROM transactions
          WHERE id = $1
        `, [transactionId]);
        
        if (transactionCheck.rowCount > 0) {
          const transaction = transactionCheck.rows[0];
          log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: ${transaction.amount} ${transaction.currency} (${transaction.type})`, colors.green);
          this.testResults.transactions = true;
        }
      } else {
        log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', colors.red);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`, colors.red);
      console.error(error);
    }
  }
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞—Ä–º–∏–Ω–≥–æ–º
  async testFarming() {
    log('\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞—Ä–º–∏–Ω–≥–æ–º...', colors.blue);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã farming_deposits
      const farmingTableCheck = await this.pool.query(`
        SELECT column_name, data_type
        FROM information_schema.columns
        WHERE table_name = 'farming_deposits'
        ORDER BY ordinal_position
      `);
      
      if (farmingTableCheck.rowCount > 0) {
        log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã farming_deposits –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', colors.green);
        
        // –ë–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCheck = await this.pool.query(`
          SELECT id FROM users 
          ORDER BY id 
          LIMIT 1
        `);
        
        if (userCheck.rowCount > 0) {
          const userId = userCheck.rows[0].id;
          
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
          log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`, colors.cyan);
          
          const depositResult = await this.pool.query(`
            INSERT INTO farming_deposits 
            (user_id, amount_uni, rate_uni, rate_ton, created_at, last_claim)
            VALUES 
            ($1, 100, 0.5, 0.1, NOW(), NOW())
            RETURNING id
          `, [userId]);
          
          const depositId = depositResult.rows[0].id;
          
          if (depositId) {
            log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω, ID: ${depositId}`, colors.green);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
            const depositCheck = await this.pool.query(`
              SELECT id, user_id, amount_uni, rate_uni
              FROM farming_deposits
              WHERE id = $1
            `, [depositId]);
            
            if (depositCheck.rowCount > 0) {
              const deposit = depositCheck.rows[0];
              log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${deposit.amount_uni} UNI (—Å—Ç–∞–≤–∫–∞: ${deposit.rate_uni}%)`, colors.green);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
              await this.pool.query(`
                UPDATE farming_deposits
                SET last_claim = NOW()
                WHERE id = $1
              `, [depositId]);
              
              // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
              await this.pool.query(`
                DELETE FROM farming_deposits
                WHERE id = $1
              `, [depositId]);
              
              log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', colors.green);
              this.testResults.farming = true;
            }
          } else {
            log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞', colors.red);
          }
        } else {
          log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞', colors.yellow);
        }
      } else {
        log('‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã farming_deposits –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', colors.red);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${error.message}`, colors.red);
      console.error(error);
    }
  }
  
  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async testPerformance() {
    log('\nüîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...', colors.blue);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º SELECT –∑–∞–ø—Ä–æ—Å—ã
    log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–æ–≤...', colors.cyan);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    try {
      const startTime1 = Date.now();
      for (let i = 0; i < 100; i++) {
        await this.pool.query('SELECT 1');
      }
      const endTime1 = Date.now();
      const duration1 = endTime1 - startTime1;
      
      this.testResults.performance.simpleSelect = duration1 / 100; // –º—Å –Ω–∞ –∑–∞–ø—Ä–æ—Å
      
      log(`‚úÖ –ü—Ä–æ—Å—Ç–æ–π SELECT: ${this.testResults.performance.simpleSelect.toFixed(2)} –º—Å/–∑–∞–ø—Ä–æ—Å`, colors.green);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ SELECT: ${error.message}`, colors.red);
    }
    
    // –ó–∞–ø—Ä–æ—Å —Å JOIN
    try {
      const startTime2 = Date.now();
      for (let i = 0; i < 10; i++) {
        await this.pool.query(`
          SELECT u.id, u.username, t.amount, t.currency
          FROM users u
          LEFT JOIN transactions t ON u.id = t.user_id
          ORDER BY u.id
          LIMIT 10
        `);
      }
      const endTime2 = Date.now();
      const duration2 = endTime2 - startTime2;
      
      this.testResults.performance.joinSelect = duration2 / 10; // –º—Å –Ω–∞ –∑–∞–ø—Ä–æ—Å
      
      log(`‚úÖ SELECT —Å JOIN: ${this.testResults.performance.joinSelect.toFixed(2)} –º—Å/–∑–∞–ø—Ä–æ—Å`, colors.green);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SELECT —Å JOIN: ${error.message}`, colors.red);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º INSERT –∑–∞–ø—Ä–æ—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤...', colors.cyan);
    
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const client = await this.pool.connect();
      
      try {
        await client.query('BEGIN');
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        await client.query(`
          CREATE TEMP TABLE test_performance (
            id SERIAL PRIMARY KEY,
            text_data TEXT,
            num_data INTEGER,
            created_at TIMESTAMP DEFAULT NOW()
          )
        `);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º INSERT
        const startTime3 = Date.now();
        for (let i = 0; i < 100; i++) {
          await client.query(`
            INSERT INTO test_performance (text_data, num_data)
            VALUES ($1, $2)
          `, [`test_${i}`, i]);
        }
        const endTime3 = Date.now();
        const duration3 = endTime3 - startTime3;
        
        this.testResults.performance.insert = duration3 / 100; // –º—Å –Ω–∞ –∑–∞–ø—Ä–æ—Å
        
        log(`‚úÖ INSERT: ${this.testResults.performance.insert.toFixed(2)} –º—Å/–∑–∞–ø—Ä–æ—Å`, colors.green);
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('ROLLBACK');
      } finally {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—É–ª
        client.release();
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ INSERT: ${error.message}`, colors.red);
    }
  }
  
  // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  printSummary() {
    log('\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', colors.magenta);
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB: ${this.testResults.connection ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`, 
        this.testResults.connection ? colors.green : colors.red);
    
    // –¢–∞–±–ª–∏—Ü—ã
    log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü: ${Object.keys(this.testResults.tables).length} —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ`, colors.green);
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ CRUD
    log(`–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: ${this.testResults.users ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`,
        this.testResults.users ? colors.green : colors.red);
    
    log(`–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${this.testResults.transactions ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`,
        this.testResults.transactions ? colors.green : colors.red);
    
    log(`–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞—Ä–º–∏–Ω–≥–æ–º: ${this.testResults.farming ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`,
        this.testResults.farming ? colors.green : colors.red);
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (Object.keys(this.testResults.performance).length > 0) {
      log('\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', colors.cyan);
      
      if (this.testResults.performance.simpleSelect) {
        log(`–ü—Ä–æ—Å—Ç–æ–π SELECT: ${this.testResults.performance.simpleSelect.toFixed(2)} –º—Å/–∑–∞–ø—Ä–æ—Å`, colors.reset);
      }
      
      if (this.testResults.performance.joinSelect) {
        log(`SELECT —Å JOIN: ${this.testResults.performance.joinSelect.toFixed(2)} –º—Å/–∑–∞–ø—Ä–æ—Å`, colors.reset);
      }
      
      if (this.testResults.performance.insert) {
        log(`INSERT: ${this.testResults.performance.insert.toFixed(2)} –º—Å/–∑–∞–ø—Ä–æ—Å`, colors.reset);
      }
    }
    
    // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const allSuccess = 
      this.testResults.connection && 
      this.testResults.users && 
      this.testResults.transactions && 
      this.testResults.farming;
    
    log(`\n${allSuccess ? 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!' : '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.'}`, 
        allSuccess ? colors.green : colors.yellow);
        
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', colors.blue);
    
    if (!this.testResults.transactions) {
      log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions', colors.yellow);
      log('  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç create-neon-partitions.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π', colors.yellow);
    }
    
    if (this.testResults.performance.joinSelect && this.testResults.performance.joinSelect > 100) {
      log('- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å JOIN –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∏–∑–∫–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã', colors.yellow);
    }
    
    log('- –î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç Neon DB —Å –ø–æ—Å—Ç—Ñ–∏–∫—Å–æ–º -pooler', colors.reset);
    log('- –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ create_future_transaction_partitions() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π', colors.reset);
  }
  
  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await this.init();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
      await this.testTables();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.testUsers();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.testTransactions();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      await this.testFarming();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.testPerformance();
      
      // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.printSummary();
    } catch (error) {
      log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
      console.error(error);
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await this.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const tester = new NeonDBTester();
tester.runAllTests();