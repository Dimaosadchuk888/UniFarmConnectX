/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ BoostVerificationScheduler
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TON Boost –ø–ª–∞—Ç–µ–∂–µ–π
 */

const { createClient } = require('@supabase/supabase-js');

async function verifyBoostScheduler() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê BOOST VERIFICATION SCHEDULER\n' + '='.repeat(50));

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    const supabase = createClient(
      'https://wunnsvicbebssrjqedor.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1bm5zdmljYmVic3NyanFlZG9yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjA2MjM0OTcsImV4cCI6MjAzNjE5OTQ5N30.MpJzrWFiOkjOl-nCGwkAfBs4kBnRIf-Kf_t9-5dPJW8'
    );

    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // 1. –°–¢–ê–¢–ò–°–¢–ò–ö–ê PENDING BOOST –ü–û–ö–£–ü–û–ö
    console.log('1. –°–¢–ê–¢–ò–°–¢–ò–ö–ê PENDING BOOST –ü–û–ö–£–ü–û–ö:');
    
    const { data: pendingPurchases, error: pendingError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('status', 'pending')
      .order('created_at', { ascending: false });

    if (pendingError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–æ–∫—É–ø–æ–∫: ${pendingError.message}`);
      return;
    }

    console.log(`   ‚îú‚îÄ‚îÄ –í—Å–µ–≥–æ pending –ø–æ–∫—É–ø–æ–∫: ${pendingPurchases?.length || 0}`);

    if (pendingPurchases && pendingPurchases.length > 0) {
      const now = new Date();
      const twoMinutesAgo = new Date(now.getTime() - 2 * 60 * 1000);
      const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

      const readyForVerification = pendingPurchases.filter(p => 
        new Date(p.created_at) < twoMinutesAgo
      ).length;
      
      const recent = pendingPurchases.filter(p => 
        new Date(p.created_at) > twoMinutesAgo
      ).length;
      
      const expired = pendingPurchases.filter(p => 
        new Date(p.created_at) < twentyFourHoursAgo
      ).length;

      console.log(`   ‚îú‚îÄ‚îÄ –ì–æ—Ç–æ–≤—ã –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (>2 –º–∏–Ω): ${readyForVerification}`);
      console.log(`   ‚îú‚îÄ‚îÄ –ù–µ–¥–∞–≤–Ω–∏–µ (<2 –º–∏–Ω): ${recent}`);
      console.log(`   ‚îú‚îÄ‚îÄ Expired (>24 —á): ${expired}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 pending –∑–∞–ø–∏—Å–∏
      console.log('\n   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ pending –ø–æ–∫—É–ø–∫–∏:');
      pendingPurchases.slice(0, 3).forEach((purchase, index) => {
        const createdAt = new Date(purchase.created_at);
        const ageMinutes = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60));
        
        console.log(`      ${index + 1}. ID: ${purchase.id}, User: ${purchase.user_id}, Boost: ${purchase.boost_id}`);
        console.log(`         ‚îú‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∞: ${ageMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        console.log(`         ‚îú‚îÄ‚îÄ TX Hash: ${purchase.tx_hash ? purchase.tx_hash.substring(0, 16) + '...' : 'NULL'}`);
        console.log(`         ‚îî‚îÄ‚îÄ Amount: ${purchase.amount || 'NULL'} TON`);
      });
    }

    // 2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê CONFIRMED –ü–û–ö–£–ü–û–ö
    console.log('\n2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê CONFIRMED –ü–û–ö–£–ü–û–ö:');
    
    const { data: confirmedPurchases, error: confirmedError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('status', 'confirmed')
      .order('updated_at', { ascending: false })
      .limit(5);

    if (confirmedError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è confirmed –ø–æ–∫—É–ø–æ–∫: ${confirmedError.message}`);
    } else {
      console.log(`   ‚îú‚îÄ‚îÄ –í—Å–µ–≥–æ confirmed –ø–æ–∫—É–ø–æ–∫: ${confirmedPurchases?.length || 0} (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)`);
      
      if (confirmedPurchases && confirmedPurchases.length > 0) {
        console.log('\n   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ confirmed –ø–æ–∫—É–ø–∫–∏:');
        confirmedPurchases.forEach((purchase, index) => {
          const updatedAt = new Date(purchase.updated_at);
          const ageMinutes = Math.floor((Date.now() - updatedAt.getTime()) / (1000 * 60));
          
          console.log(`      ${index + 1}. ID: ${purchase.id}, User: ${purchase.user_id}, Boost: ${purchase.boost_id}`);
          console.log(`         ‚îú‚îÄ‚îÄ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${ageMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
          console.log(`         ‚îî‚îÄ‚îÄ Amount: ${purchase.amount || 'NULL'} TON`);
        });
      }
    }

    // 3. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• BOOST –ü–ê–ö–ï–¢–û–í
    console.log('\n3. –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–ê–ö–ï–¢–´:');
    
    const { data: activeUsers, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, ton_boost_package, ton_boost_rate')
      .not('ton_boost_package', 'is', null)
      .limit(5);

    if (usersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å boost: ${usersError.message}`);
    } else {
      console.log(`   ‚îú‚îÄ‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ boost: ${activeUsers?.length || 0}`);
      
      if (activeUsers && activeUsers.length > 0) {
        console.log('\n   üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ boost:');
        activeUsers.forEach((user, index) => {
          console.log(`      ${index + 1}. User ${user.id} (@${user.username || 'no_username'})`);
          console.log(`         ‚îú‚îÄ‚îÄ Boost Package: ${user.ton_boost_package}`);
          console.log(`         ‚îî‚îÄ‚îÄ Daily Rate: ${user.ton_boost_rate}%`);
        });
      }
    }

    // 4. –ü–†–û–í–ï–†–ö–ê API ENDPOINT
    console.log('\n4. –ü–†–û–í–ï–†–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û API:');
    
    try {
      const response = await fetch('http://localhost:3000/api/v2/boost/pending-status', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        console.log('   ‚úÖ API endpoint /api/v2/boost/pending-status —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   ‚îú‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`   ‚îú‚îÄ‚îÄ Response: ${JSON.stringify(result, null, 2)}`);
      } else {
        console.log(`   ‚ùå API endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status} ${response.statusText}`);
        const errorText = await response.text();
        console.log(`   ‚îî‚îÄ‚îÄ Error: ${errorText.substring(0, 200)}`);
      }
    } catch (apiError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API: ${apiError.message}`);
    }

    // 5. –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
    console.log('\n5. –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    
    const totalPending = pendingPurchases?.length || 0;
    const totalConfirmed = confirmedPurchases?.length || 0;
    const totalActiveUsers = activeUsers?.length || 0;

    console.log(`   ‚îú‚îÄ‚îÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${totalPending === 0 ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ö†Ô∏è –ï–°–¢–¨ PENDING'}`);
    console.log(`   ‚îú‚îÄ‚îÄ Pending –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalPending}`);
    console.log(`   ‚îú‚îÄ‚îÄ –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${totalConfirmed}`);
    console.log(`   ‚îú‚îÄ‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalActiveUsers}`);
    
    if (totalPending === 0) {
      console.log('   ‚îî‚îÄ‚îÄ üéâ –í–°–ï –ü–õ–ê–¢–ï–ñ–ò –û–ë–†–ê–ë–û–¢–ê–ù–´ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ!');
    } else {
      console.log('   ‚îî‚îÄ‚îÄ ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π...');
    }

  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.log(`Stack: ${error.stack}`);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
verifyBoostScheduler().catch(console.error);