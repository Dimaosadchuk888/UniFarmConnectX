// –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testDatabaseDirect() {
  console.log('=== –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ===');
  
  const testTelegramId = Date.now();
  const testUsername = `test_${testTelegramId}`;
  const refCode = 'REF_1752755835358_yjrusv'; // User 184
  
  let newUserId = null;
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏–º User 184
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ User 184...');
    
    const { data: user184, error: user184Error } = await supabase
      .from('users')
      .select('id, ref_code, telegram_id, username')
      .eq('ref_code', refCode)
      .single();
    
    if (user184Error) {
      console.log('‚ùå User 184 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user184Error.message);
      return;
    }
    
    console.log(`‚úÖ User 184 –Ω–∞–π–¥–µ–Ω: ID=${user184.id}, ref_code=${user184.ref_code}`);
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert({
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: 'Test User',
        ref_code: `REF_${testTelegramId}_test`,
        referred_by: null,
        balance_uni: '0',
        balance_ton: '0',
        created_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (createError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError.message);
      return;
    }
    
    newUserId = newUser.id;
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID=${newUserId}`);
    
    // –®–∞–≥ 3: –í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º referred_by
    console.log('\n3. –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ referred_by...');
    
    const { error: updateError } = await supabase
      .from('users')
      .update({ referred_by: user184.id })
      .eq('id', newUserId);
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by:', updateError.message);
      return;
    }
    
    console.log(`‚úÖ referred_by —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${user184.id}`);
    
    // –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ referrals
    console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ referrals...');
    
    const { error: referralError } = await supabase
      .from('referrals')
      .insert({
        user_id: newUserId,
        referred_user_id: newUserId,
        inviter_id: user184.id,
        level: 1,
        reward_uni: '0',
        reward_ton: '0',
        ref_path: [user184.id]
      });
    
    if (referralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è referrals:', referralError.message);
      return;
    }
    
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞');
    
    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    const { data: finalUser, error: finalError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('id', newUserId)
      .single();
    
    if (finalError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', finalError.message);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${finalUser.id}, referred_by=${finalUser.referred_by}`);
    }
    
    const { data: finalReferrals, error: finalReferralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUserId);
    
    if (finalReferralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ referrals:', finalReferralError.message);
    } else {
      console.log(`‚úÖ Referrals: ${finalReferrals.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (finalReferrals.length > 0) {
        finalReferrals.forEach(record => {
          console.log(`   user_id=${record.user_id}, inviter_id=${record.inviter_id}, level=${record.level}`);
        });
      }
    }
    
    // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É User 184
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã User 184...');
    
    const { data: team184, error: teamError } = await supabase
      .from('users')
      .select('id, username, referred_by, created_at')
      .eq('referred_by', user184.id);
    
    if (teamError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', teamError.message);
    } else {
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ User 184: ${team184.length} —á–µ–ª–æ–≤–µ–∫`);
      
      team184.forEach(member => {
        console.log(`   ID=${member.id}, username=${member.username}, created_at=${member.created_at}`);
      });
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    
    const success = finalUser.referred_by === user184.id && finalReferrals.length > 0;
    
    if (success) {
      console.log('üéâ –£–°–ü–ï–•! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('   - referred_by —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   - –ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞');
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ User 184');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê! –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.log('Stack:', error.stack);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    if (newUserId) {
      console.log('\n7. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –£–¥–∞–ª—è–µ–º referrals
      await supabase.from('referrals').delete().eq('user_id', newUserId);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase.from('users').delete().eq('id', newUserId);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
  }
}

testDatabaseDirect().catch(console.error);