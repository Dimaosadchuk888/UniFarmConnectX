/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ü–£–©–ï–ù–ù–´–• TON FARMING –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - 25 –∏—é–ª—è 2025
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–∞–∫–µ—Ç–∞–º–∏
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

interface UserWithTonBoost {
    id: number;
    ton_boost_package: number;
    ton_boost_package_id: number | null;
    ton_boost_rate: number;
    balance_ton: number;
}

interface BoostPackage {
    id: number;
    name: string;
    min_amount: number;
    rate_multiplier: number;
    bonus_uni: number;
}

async function getBoostPackageInfo(packageId: number): Promise<BoostPackage | null> {
    const { data, error } = await supabase
        .from('boost_packages')
        .select('*')
        .eq('id', packageId)
        .single();
    
    if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ ${packageId}:`, error);
        return null;
    }
    
    return data;
}

async function createTonFarmingRecord(user: UserWithTonBoost, packageInfo: BoostPackage) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º farming_balance –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–∫–µ—Ç–∞
    const farmingBalance = packageInfo.min_amount;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º rate –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–∫–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–∞–∫–µ—Ç–∞)
    const ratePerSecond = (farmingBalance / 100) / (24 * 60 * 60); // 1% –≤ –¥–µ–Ω—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    console.log(`üìù –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è User ${user.id}:`);
    console.log(`   üì¶ Package: ${packageInfo.name} (ID: ${packageInfo.id})`);
    console.log(`   üí∞ Farming Balance: ${farmingBalance} TON`);
    console.log(`   ‚ö° Rate: ${ratePerSecond} TON/—Å–µ–∫`);
    
    const { data, error } = await supabase
        .from('ton_farming_data')
        .insert({
            user_id: user.id.toString(), // –í–ê–ñ–ù–û: STRING —Ñ–æ—Ä–º–∞—Ç
            boost_package_id: packageInfo.id,
            farming_balance: farmingBalance,
            daily_income: farmingBalance / 100, // 1% –≤ –¥–µ–Ω—å
            total_earned: 0,
            last_claim: new Date().toISOString(),
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        });
    
    if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è User ${user.id}:`, error);
        return false;
    }
    
    console.log(`‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è User ${user.id}`);
    return true;
}

async function restoreMissingTonFarmingUsers() {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ü–£–©–ï–ù–ù–´–• TON FARMING –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(80));
    
    try {
        // 1. –ü–û–õ–£–ß–ê–ï–ú –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST –ü–ê–ö–ï–¢–ê–ú–ò
        console.log('\nüìä –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST');
        const { data: usersWithTonBoost, error: usersError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_package_id, ton_boost_rate, balance_ton')
            .not('ton_boost_package', 'is', null)
            .gt('ton_boost_package', 0) // –¢–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
            .order('id', { ascending: true });

        if (usersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithTonBoost?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–∞–∫–µ—Ç–∞–º–∏`);

        // 2. –ü–û–õ–£–ß–ê–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ó–ê–ü–ò–°–ò TON_FARMING_DATA
        console.log('\nüìä –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ó–ê–ü–ò–°–ï–ô');
        const { data: existingRecords, error: farmingError } = await supabase
            .from('ton_farming_data')
            .select('user_id');

        if (farmingError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π:', farmingError);
            return;
        }

        const existingUserIds = new Set(existingRecords?.map(r => r.user_id) || []);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingRecords?.length || 0} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π`);

        // 3. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        const missingUsers = usersWithTonBoost?.filter(user => 
            !existingUserIds.has(user.id.toString())
        ) || [];

        console.log(`üö® –ù–ê–ô–î–ï–ù–û ${missingUsers.length} –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô`);

        if (missingUsers.length === 0) {
            console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
            return;
        }

        // 4. –ü–û–õ–£–ß–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û BOOST –ü–ê–ö–ï–¢–ê–•
        console.log('\nüì¶ –®–ê–ì 3: –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–ê–ö–ï–¢–ê–•');
        const { data: boostPackages, error: packagesError } = await supabase
            .from('boost_packages')
            .select('*')
            .order('id', { ascending: true });

        if (packagesError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤:', packagesError);
            return;
        }

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${boostPackages?.length || 0} boost –ø–∞–∫–µ—Ç–æ–≤`);

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const packagesMap = new Map();
        boostPackages?.forEach(pkg => {
            packagesMap.set(pkg.id, pkg);
        });

        // 5. –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        console.log('\nüîß –®–ê–ì 4: –ú–ê–°–°–û–í–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
        console.log('=' .repeat(60));

        let successCount = 0;
        let errorCount = 0;

        for (const user of missingUsers) {
            console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º User ID ${user.id}:`);
            console.log(`   üì¶ TON Boost Package: ${user.ton_boost_package}`);
            console.log(`   ‚ö° Rate: ${user.ton_boost_rate}`);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
            let packageInfo = packagesMap.get(user.ton_boost_package);
            
            if (!packageInfo) {
                console.log(`‚ö†Ô∏è  –ü–∞–∫–µ—Ç ${user.ton_boost_package} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (ID: 1)`);
                packageInfo = packagesMap.get(1);
            }

            if (!packageInfo) {
                console.error(`‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –¥–ª—è User ${user.id}`);
                errorCount++;
                continue;
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            const success = await createTonFarmingRecord(user, packageInfo);
            if (success) {
                successCount++;
            } else {
                errorCount++;
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        // 6. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        console.log('\n' + '=' .repeat(80));
        console.log('üìà –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
        console.log('=' .repeat(80));
        console.log(`üë• –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${missingUsers.length}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${errorCount}`);
        console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / missingUsers.length) * 100).toFixed(1)}%`);

        if (successCount > 0) {
            console.log('\nüéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å TON –¥–æ—Ö–æ–¥—ã –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
            console.log('‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ (–∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç)');
        }

        if (errorCount > 0) {
            console.log(`\n‚ö†Ô∏è  ${errorCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ`);
        }

        // 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
        const { data: finalCheck, error: finalError } = await supabase
            .from('ton_farming_data')
            .select('user_id', { count: 'exact' });

        if (!finalError) {
            console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${finalCheck?.length || 0}`);
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }

    console.log('\n' + '=' .repeat(80));
    console.log('üéØ –ü–†–û–¶–ï–°–° –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù');
    console.log('=' .repeat(80));
}

// –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
restoreMissingTonFarmingUsers().then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
});