/**
 * –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–£–¢–ò –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –ø—É—Ç—å –æ—Ç frontend –¥–æ processReferralInline()
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function traceReferralPath() {
  console.log('=== –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–£–¢–ò –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò ===\n');
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    console.log('üîç 1. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    
    const { data: recentUsers } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, ref_code, created_at')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (recentUsers && recentUsers.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentUsers.length} –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
      
      recentUsers.forEach((user, index) => {
        const hasReferrer = user.referred_by !== null;
        const marker = hasReferrer ? 'üîó' : '‚ùå';
        const referrerText = hasReferrer ? `(referred_by: ${user.referred_by})` : '(NO REFERRER)';
        
        console.log(`   ${marker} User ${user.id}: ${user.username} ${referrerText}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        console.log(`     Telegram ID: ${user.telegram_id}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by
    console.log('\nüîç 2. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –†–ï–§–ï–†–ê–õ–¨–ù–´–ú–ò –°–í–Ø–ó–Ø–ú–ò');
    
    const { data: usersWithReferrers } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false });
    
    if (usersWithReferrers && usersWithReferrers.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithReferrers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏:`);
      
      usersWithReferrers.forEach((user, index) => {
        console.log(`   üîó User ${user.id}: ${user.username} ‚Üí referred_by: ${user.referred_by}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        console.log(`     Telegram ID: ${user.telegram_id}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ referrals
    console.log('\nüîç 3. –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–ï REFERRALS');
    
    const { data: referralRecords } = await supabase
      .from('referrals')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (referralRecords && referralRecords.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralRecords.length} –∑–∞–ø–∏—Å–µ–π –≤ referrals:`);
      
      referralRecords.forEach((record, index) => {
        console.log(`   üìù User ${record.user_id} ‚Üí Inviter ${record.inviter_id}`);
        console.log(`     Level: ${record.level}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${record.created_at}`);
        console.log(`     Ref Path: ${JSON.stringify(record.ref_path)}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å–∏ –≤ referrals –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    console.log('\nüîç 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
    
    const totalUsers = recentUsers ? recentUsers.length : 0;
    const usersWithReferrersCount = usersWithReferrers ? usersWithReferrers.length : 0;
    const referralRecordsCount = referralRecords ? referralRecords.length : 0;
    
    console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`   –° —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏: ${usersWithReferrersCount}`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ referrals: ${referralRecordsCount}`);
    
    const successRate = totalUsers > 0 ? (usersWithReferrersCount / totalUsers * 100).toFixed(1) : 0;
    console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
    
    // 5. –ü–æ–∏—Å–∫ User 224 –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    console.log('\nüîç 5. –ö–û–ù–¢–ï–ö–°–¢ USER 224');
    
    const user224 = recentUsers?.find(u => u.id === 224);
    if (user224) {
      console.log('‚úÖ User 224 –Ω–∞–π–¥–µ–Ω –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
      console.log(`   –ü–æ–∑–∏—Ü–∏—è: ${recentUsers.indexOf(user224) + 1} –∏–∑ ${totalUsers}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${user224.referred_by ? '–° —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑—å—é' : '–ë–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏'}`);
    } else {
      console.log('‚ùå User 224 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (—Å–æ–∑–¥–∞–Ω –¥–∞–≤–Ω–æ)');
    }
    
    // 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüéØ 6. –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó');
    
    if (usersWithReferrersCount === 0) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏');
      console.log('   processReferralInline() –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    } else if (usersWithReferrersCount === 1) {
      console.log('‚ö†Ô∏è –¢–û–õ–¨–ö–û –û–î–ò–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å');
      console.log('   –≠—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã');
    } else {
      console.log('‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏');
      console.log('   –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
    }
    
    if (referralRecordsCount === 0) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ referrals');
      console.log('   –¢–∞–±–ª–∏—Ü–∞ referrals –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    } else if (referralRecordsCount < usersWithReferrersCount) {
      console.log('‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –ó–∞–ø–∏—Å–µ–π –≤ referrals –º–µ–Ω—å—à–µ —á–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by');
      console.log('   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ç–∞–±–ª–∏—Ü—É referrals');
    } else {
      console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ referrals —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏:', error);
  }
}

traceReferralPath();