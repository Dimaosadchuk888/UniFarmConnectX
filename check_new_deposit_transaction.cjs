#!/usr/bin/env node
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkNewTransaction() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è User 184...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, description, created_at')
      .eq('user_id', 184)
      .eq('type', 'FARMING_DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(5);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }

    if (!transactions || transactions.length === 0) {
      console.log('‚ö†Ô∏è –ù–ï–¢ FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è User 184');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
      const { data: allTransactions, error: allError } = await supabase
        .from('transactions')
        .select('id, user_id, type, amount, currency, description, created_at')
        .eq('user_id', 184)
        .order('created_at', { ascending: false })
        .limit(3);

      if (allError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError);
        return;
      }

      console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184:');
      allTransactions?.forEach((tx, i) => {
        console.log(`${i + 1}. ID: ${tx.id}, Type: ${tx.type}, Amount: ${tx.amount}, Currency: ${tx.currency}`);
        console.log(`   Description: ${tx.description}`);
        console.log(`   Created: ${tx.created_at}\n`);
      });

      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n`);

    transactions.forEach((tx, i) => {
      console.log(`${i + 1}. Transaction ID: ${tx.id}`);
      console.log(`   Type: ${tx.type}`);
      console.log(`   Amount: ${tx.amount} ${tx.currency}`);
      console.log(`   Description: ${tx.description}`);
      console.log(`   Created: ${tx.created_at}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è - –æ–∂–∏–¥–∞–µ–º –Ω–µ–¥–∞–≤–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const created = new Date(tx.created_at);
      const now = new Date();
      const diffMinutes = (now - created) / (1000 * 60);
      
      if (diffMinutes < 10) {
        console.log(`   üü¢ –ù–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø (—Å–æ–∑–¥–∞–Ω–∞ ${diffMinutes.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)`);
      } else {
        console.log(`   üü° –°—Ç–∞—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (—Å–æ–∑–¥–∞–Ω–∞ ${diffMinutes.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)`);
      }
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ User 184
    const { data: farmingData, error: farmingError } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount, uni_farming_active')
      .eq('id', 184)
      .single();

    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞:', farmingError);
      return;
    }

    console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ User 184:');
    console.log(`   Balance UNI: ${farmingData.balance_uni}`);
    console.log(`   Deposit Amount: ${farmingData.uni_deposit_amount}`);
    console.log(`   Farming Active: ${farmingData.uni_farming_active}`);

  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

checkNewTransaction();