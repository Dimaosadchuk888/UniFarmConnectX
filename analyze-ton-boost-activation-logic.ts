import { supabase } from './core/supabaseClient';

async function analyzeTonBoostActivationLogic() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ê–ö–¢–ò–í–ê–¶–ò–ò TON BOOST');
  console.log('='.repeat(60));

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å TON –±–∞–ª–∞–Ω—Å–æ–º –Ω–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Boost
    console.log('\n1Ô∏è‚É£ –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ (TON –ë–ê–õ–ê–ù–° –ë–ï–ó BOOST):');
    
    const { data: problematicUsers, error: problemError } = await supabase
      .from('users')
      .select('*')
      .gt('balance_ton', 0)
      .eq('ton_boost_active', false)
      .order('id', { ascending: true });

    if (!problemError && problematicUsers) {
      console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${problematicUsers.length}`);
      
      problematicUsers.forEach((user, idx) => {
        if (idx < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
          console.log(`   User ${user.id}:`);
          console.log(`     TON Balance: ${user.balance_ton}`);
          console.log(`     TON Boost Active: ${user.ton_boost_active}`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
          console.log(`     Wallet: ${user.ton_wallet_address || '–ù–ï–¢'}`);
          console.log('     ---');
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\nüåæ –ü–†–û–í–ï–†–ö–ê TON_FARMING_DATA –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:');
      for (const user of problematicUsers.slice(0, 5)) {
        const { data: farmingData, error: farmingError } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id);

        if (!farmingError) {
          if (farmingData && farmingData.length > 0) {
            farmingData.forEach(farm => {
              console.log(`   User ${user.id}: farming_balance=${farm.farming_balance}, boost_active=${farm.boost_active}`);
            });
          } else {
            console.log(`   User ${user.id}: ‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ò –≤ ton_farming_data`);
          }
        }
      }
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    console.log('\n2Ô∏è‚É£ –£–°–ü–ï–®–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ (TON –ë–ê–õ–ê–ù–° –ò –ê–ö–¢–ò–í–ù–´–ô BOOST):');
    
    const { data: successfulUsers, error: successError } = await supabase
      .from('users')
      .select('*')
      .gt('balance_ton', 0)
      .eq('ton_boost_active', true)
      .order('id', { ascending: true })
      .limit(10);

    if (!successError && successfulUsers) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${successfulUsers.length}`);
      
      successfulUsers.forEach((user, idx) => {
        if (idx < 5) {
          console.log(`   User ${user.id}:`);
          console.log(`     TON Balance: ${user.balance_ton}`);
          console.log(`     TON Boost Active: ${user.ton_boost_active}`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
          console.log(`     Wallet: ${user.ton_wallet_address || '–ù–ï–¢'}`);
          console.log('     ---');
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\nüåæ TON_FARMING_DATA –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:');
      for (const user of successfulUsers.slice(0, 3)) {
        const { data: farmingData, error: farmingError } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id);

        if (!farmingError && farmingData && farmingData.length > 0) {
          farmingData.forEach(farm => {
            console.log(`   User ${user.id}: farming_balance=${farm.farming_balance}, boost_active=${farm.boost_active}, package=${farm.boost_package_id}`);
          });
        }
      }
    }

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏ —É—Å–ø–µ—à–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    console.log('\n3Ô∏è‚É£ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
    
    if (problematicUsers && successfulUsers) {
      console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø:');
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è
      const problemDates = problematicUsers.map(u => new Date(u.created_at));
      const successDates = successfulUsers.map(u => new Date(u.created_at));
      
      const problemMinDate = Math.min(...problemDates.map(d => d.getTime()));
      const problemMaxDate = Math.max(...problemDates.map(d => d.getTime()));
      const successMinDate = Math.min(...successDates.map(d => d.getTime()));
      const successMaxDate = Math.max(...successDates.map(d => d.getTime()));
      
      console.log(`   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: ${new Date(problemMinDate).toISOString().split('T')[0]} - ${new Date(problemMaxDate).toISOString().split('T')[0]}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã: ${new Date(successMinDate).toISOString().split('T')[0]} - ${new Date(successMaxDate).toISOString().split('T')[0]}`);
      
      // –ê–Ω–∞–ª–∏–∑ ID –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
      const problemIds = problematicUsers.map(u => u.id);
      const successIds = successfulUsers.map(u => u.id);
      
      console.log(`   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ ID –¥–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...problemIds)} - ${Math.max(...problemIds)}`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã–µ ID –¥–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...successIds)} - ${Math.max(...successIds)}`);
      
      // –ê–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–æ–≤
      const problemWithWallet = problematicUsers.filter(u => u.ton_wallet_address).length;
      const successWithWallet = successfulUsers.filter(u => u.ton_wallet_address).length;
      
      console.log(`   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º: ${problemWithWallet}/${problematicUsers.length} (${Math.round(problemWithWallet/problematicUsers.length*100)}%)`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º: ${successWithWallet}/${successfulUsers.length} (${Math.round(successWithWallet/successfulUsers.length*100)}%)`);
    }

    // 4. –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É users –∏ ton_farming_data
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–ê–ë–õ–ò–¶:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É users.ton_boost_active –∏ ton_farming_data.boost_active
    const { data: allUsers, error: allUsersError } = await supabase
      .from('users')
      .select('id, ton_boost_active')
      .gt('balance_ton', 0);

    const { data: allFarmingData, error: allFarmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_active');

    if (!allUsersError && !allFarmingError && allUsers && allFarmingData) {
      console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
      
      let syncErrors = 0;
      let missingFarmingData = 0;
      
      for (const user of allUsers) {
        const farmingRecord = allFarmingData.find(f => f.user_id === user.id);
        
        if (!farmingRecord) {
          missingFarmingData++;
          console.log(`   ‚ùå User ${user.id}: –ù–ï–¢ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data`);
        } else if (user.ton_boost_active !== farmingRecord.boost_active) {
          syncErrors++;
          console.log(`   ‚ö†Ô∏è User ${user.id}: users.ton_boost_active=${user.ton_boost_active}, farming.boost_active=${farmingRecord.boost_active}`);
        }
      }
      
      console.log(`\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º: ${allUsers.length}`);
      console.log(`   –ë–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data: ${missingFarmingData}`);
      console.log(`   –û—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${syncErrors}`);
    }

    // 5. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –ê–ö–¢–ò–í–ê–¶–ò–ò:');
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–æ–º, –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è TON Boost
    const { data: recentActivations, error: activationError } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_active, farming_balance, created_at')
      .eq('boost_active', true)
      .order('created_at', { ascending: false })
      .limit(20);

    if (!activationError && recentActivations) {
      console.log(`‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost: ${recentActivations.length}`);
      
      recentActivations.slice(0, 10).forEach((activation, idx) => {
        console.log(`   ${idx + 1}. User ${activation.user_id}: ${activation.farming_balance} TON, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ${activation.created_at}`);
      });
    }

    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    console.log('\n6Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó –ü–†–ò–ß–ò–ù –ù–ï–û–î–ò–ù–ê–ö–û–í–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø:');
    
    console.log('\nüéØ –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    console.log('   1. –û–¢–°–£–¢–°–¢–í–ò–ï –ó–ê–ü–ò–°–ï–ô: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –±–∞–ª–∞–Ω—Å–æ–º –Ω–µ –∏–º–µ—é—Ç –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data');
    console.log('   2. –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É users.ton_boost_active –∏ ton_farming_data.boost_active');
    console.log('   3. –ù–ï–ü–û–õ–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø: TON —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –Ω–æ boost –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è');
    
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('   1. –û—à–∏–±–∫–∏ –≤ API –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –Ω–µ –≤—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è');
    console.log('   2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ - rollback –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    console.log('   3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–±–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('   4. –†–∞–∑–ª–∏—á–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π API');
    console.log('   5. –ü—Ä–æ–±–ª–µ–º—ã —Å scheduler\'–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ API endpoint /api/v2/wallet/ton-deposit');
    console.log('   2. –ù–∞–π—Ç–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
    console.log('   4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–∞–≥–∏ boost_active –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏');
    console.log('   5. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

analyzeTonBoostActivationLogic().catch(console.error);