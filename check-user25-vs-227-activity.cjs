/**
 * –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò USER 25 VS USER 227
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function compareUser25vs227Activity() {
  console.log('üÜö –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò USER 25 VS USER 227');
  console.log('='.repeat(45));
  
  const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const userId of [25, 227]) {
      console.log(`\nüë§ –ê–ù–ê–õ–ò–ó USER ${userId}:`);
      console.log('-'.repeat(25));
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const { data: user } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();
      
      if (user) {
        console.log(`   üìã –ü—Ä–æ—Ñ–∏–ª—å:`);
        console.log(`      Telegram ID: ${user.telegram_id}`);
        console.log(`      Username: ${user.username}`);
        console.log(`      TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
        console.log(`      UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
        console.log(`      –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_active}`);
      } else {
        console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }
      
      // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 10 –º–∏–Ω—É—Ç
      const { data: allTx } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .gte('created_at', tenMinutesAgo)
        .order('created_at', { ascending: false });
      
      console.log(`\n   üìä –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 10 –º–∏–Ω—É—Ç: ${allTx?.length || 0}`);
      
      if (allTx && allTx.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞–ª—é—Ç–∞–º
        const tonTx = allTx.filter(tx => tx.currency === 'TON');
        const uniTx = allTx.filter(tx => tx.currency === 'UNI');
        
        console.log(`      üíé TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tonTx.length}`);
        console.log(`      üåæ UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${uniTx.length}`);
        
        if (tonTx.length > 0) {
          console.log(`\n   üíé –î–ï–¢–ê–õ–ò TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
          tonTx.forEach((tx, i) => {
            const time = new Date(tx.created_at);
            const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
            const secondsAgo = Math.floor((Date.now() - time.getTime()) / 1000) % 60;
            
            console.log(`      ${i + 1}. ID: ${tx.id} | ${tx.type} | ${tx.amount} TON`);
            console.log(`         –í—Ä–µ–º—è: ${minutesAgo}:${secondsAgo.toString().padStart(2, '0')} –Ω–∞–∑–∞–¥`);
            console.log(`         –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
            console.log(`         –°—Ç–∞—Ç—É—Å: ${tx.status}`);
            
            if (tx.type === 'DEPOSIT') {
              console.log(`         üéØ –î–ï–ü–û–ó–ò–¢!`);
            }
          });
        } else {
          console.log(`      ‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        }
        
        if (uniTx.length > 0 && uniTx.length <= 3) {
          console.log(`\n   üåæ –ü–û–°–õ–ï–î–ù–ò–ï UNI –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:`);
          uniTx.slice(0, 3).forEach((tx, i) => {
            const time = new Date(tx.created_at);
            const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
            console.log(`      ${i + 1}. ${tx.type} ${tx.amount} UNI (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
          });
        }
      } else {
        console.log(`      ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      
      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const { count: totalTonCount } = await supabase
        .from('transactions')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)
        .eq('currency', 'TON');
      
      console.log(`\n   üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`      –í—Å–µ–≥–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTonCount || 0}`);
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      const { data: lastTonTx } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .eq('currency', 'TON')
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (lastTonTx && lastTonTx.length > 0) {
        const tx = lastTonTx[0];
        const time = new Date(tx.created_at);
        const hoursAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60 / 60);
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω—è—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${hoursAgo}—á –Ω–∞–∑–∞–¥ (${tx.type} ${tx.amount} TON)`);
      } else {
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω—è—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log(`\nüîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:`);
    console.log('='.repeat(30));
    
    const { data: user25Recent } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('currency', 'TON')
      .gte('created_at', tenMinutesAgo);
    
    const { data: user227Recent } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 227)
      .eq('currency', 'TON')
      .gte('created_at', tenMinutesAgo);
    
    console.log(`User 25 –Ω–æ–≤—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${user25Recent?.length || 0}`);
    console.log(`User 227 –Ω–æ–≤—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${user227Recent?.length || 0}`);
    
    if ((user25Recent?.length || 0) === 0 && (user227Recent?.length || 0) === 0) {
      console.log(`\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–º–µ–µ—Ç –Ω–æ–≤—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã - –æ–Ω–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ backend`);
    } else {
      console.log(`\n‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error.message);
  }
}

compareUser25vs227Activity().catch(console.error);