/**
 * –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–æ—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ wallet –±–∞–ª–∞–Ω—Å –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
 */

import http from 'http';

const API_BASE_URL = 'http://localhost:3000/api/v2';

async function testRequest(path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: `/api/v2${path}`,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve({ status: res.statusCode, data: response });
        } catch (error) {
          resolve({ status: res.statusCode, data: { raw: body } });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testWalletService() {
  console.log('\nüß™ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ WalletService');
  console.log('==========================================');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserId = '1';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balanceResponse = await testRequest(`/wallet/balance?user_id=${testUserId}`);
    console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', balanceResponse.data);
    
    if (balanceResponse.status === 200) {
      const initialUniBalance = balanceResponse.data.data?.uni_balance || 0;
      const initialTonBalance = balanceResponse.data.data?.ton_balance || 0;
      
      console.log(`‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π UNI –±–∞–ª–∞–Ω—Å: ${initialUniBalance}`);
      console.log(`‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π TON –±–∞–ª–∞–Ω—Å: ${initialTonBalance}`);
      
      return {
        userId: testUserId,
        initialUniBalance,
        initialTonBalance
      };
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceResponse.data);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WalletService:', error.message);
    return null;
  }
}

async function testFarmingActivation() {
  console.log('\nüß™ –¢–ï–°–¢ 2: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞');
  console.log('=============================');

  try {
    const testUserId = '1';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º UNI —Ñ–∞—Ä–º–∏–Ω–≥
    const startResponse = await testRequest('/uni-farming/start', 'POST', {
      user_id: testUserId,
      amount: '100'
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', startResponse.data);
    
    if (startResponse.status === 200) {
      console.log('‚úÖ UNI —Ñ–∞—Ä–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const statusResponse = await testRequest(`/uni-farming/status?user_id=${testUserId}`);
      console.log('–°—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞:', statusResponse.data);
      
      return statusResponse.data?.data?.isActive || false;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', error.message);
    return false;
  }
}

async function testAutomaticIncomeDistribution() {
  console.log('\nüß™ –¢–ï–°–¢ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞');
  console.log('===========================================');

  try {
    const testUserId = '1';
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const balanceBefore = await testRequest(`/wallet/balance?user_id=${testUserId}`);
    const initialBalance = balanceBefore.data?.data?.uni_balance || 0;
    
    console.log(`–ë–∞–ª–∞–Ω—Å –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${initialBalance} UNI`);
    
    // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const balanceAfter = await testRequest(`/wallet/balance?user_id=${testUserId}`);
    const finalBalance = balanceAfter.data?.data?.uni_balance || 0;
    
    console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${finalBalance} UNI`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    const transactionsResponse = await testRequest(`/transactions?user_id=${testUserId}`);
    console.log('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsResponse.data);
    
    if (transactionsResponse.status === 200) {
      const transactions = transactionsResponse.data?.transactions || [];
      const farmingIncomes = transactions.filter(tx => tx.type === 'farming_income');
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingIncomes.length} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`);
      
      farmingIncomes.forEach(tx => {
        console.log(`  - ${tx.amount} ${tx.currency} (${tx.description})`);
      });
      
      return farmingIncomes.length > 0;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error.message);
    return false;
  }
}

async function testDirectIncomeDistribution() {
  console.log('\nüß™ –¢–ï–°–¢ 4: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ addUniFarmIncome');
  console.log('==============================================');

  try {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–æ—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    // —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∞ –Ω–µ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –∫–ª–µ–π–º
    
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ù–ï–¢ –º–µ—Ç–æ–¥–æ–≤ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞:');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å claimRewards –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∫–ª–µ–π–º –Ω–µ –Ω—É–∂–µ–Ω
    const claimResponse = await testRequest('/uni-farming/claim', 'POST', { user_id: '1' });
    
    if (claimResponse.status === 404 || claimResponse.status === 405) {
      console.log('‚úÖ –ú–µ—Ç–æ–¥ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –¥–æ—Ö–æ–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      return true;
    } else if (claimResponse.status === 200) {
      console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ—Ç–æ–¥ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π');
      return false;
    }
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è');
    return true;
  } catch (error) {
    console.log('‚úÖ –†—É—á–Ω–æ–π –∫–ª–µ–π–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è');
    return true;
  }
}

async function testWalletBalanceUpdate() {
  console.log('\nüß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è wallet –±–∞–ª–∞–Ω—Å–∞');
  console.log('============================================');

  try {
    const testUserId = '1';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
    const walletResponse = await testRequest(`/wallet/data?telegram_id=123456789`);
    
    if (walletResponse.status === 200) {
      const walletData = walletResponse.data?.data || walletResponse.data;
      
      console.log('–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞:');
      console.log(`  UNI –±–∞–ª–∞–Ω—Å: ${walletData.uni_balance}`);
      console.log(`  TON –±–∞–ª–∞–Ω—Å: ${walletData.ton_balance}`);
      console.log(`  –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${walletData.total_earned}`);
      console.log(`  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${walletData.transactions?.length || 0}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
      if (walletData.transactions) {
        const farmingTransactions = walletData.transactions.filter(tx => 
          tx.type === 'farming_income' || tx.type === 'farming_reward'
        );
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingTransactions.length} —Ñ–∞—Ä–º–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
        
        farmingTransactions.forEach(tx => {
          console.log(`  - ${tx.amount} ${tx.currency}: ${tx.description}`);
        });
      }
      
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è wallet –±–∞–ª–∞–Ω—Å–∞:', error.message);
    return false;
  }
}

async function runAllTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –§–ê–†–ú–ò–ù–ì –î–û–•–û–î–ê');
  console.log('=========================================================');
  console.log('–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–æ—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ wallet –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞\n');

  const results = {
    walletService: false,
    farmingActivation: false,
    automaticIncome: false,
    noManualClaim: false,
    walletBalance: false
  };

  // –¢–µ—Å—Ç 1: WalletService
  const walletTest = await testWalletService();
  results.walletService = !!walletTest;

  // –¢–µ—Å—Ç 2: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
  results.farmingActivation = await testFarmingActivation();

  // –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
  results.automaticIncome = await testAutomaticIncomeDistribution();

  // –¢–µ—Å—Ç 4: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
  results.noManualClaim = await testDirectIncomeDistribution();

  // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ wallet –±–∞–ª–∞–Ω—Å–∞
  results.walletBalance = await testWalletBalanceUpdate();

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('==========================');
  
  const passedTests = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
  console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${results.automaticIncome ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  console.log(`üéØ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞: ${results.noManualClaim ? '–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
  console.log(`üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ wallet –±–∞–ª–∞–Ω—Å–∞: ${results.walletBalance ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  
  if (passedTests === totalTests) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´: –§–∞—Ä–º–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
  }

  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:', error.message);
  process.exit(1);
});