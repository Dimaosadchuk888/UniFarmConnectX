/**
 * –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–ï–ô –í –ë–î
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è amount, amount_ton, amount_uni
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkCurrentFieldStatus() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–ï–ô –ë–î');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 10 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–≤—Å–µ —Ç–∏–ø—ã):');
    const { data: recentTxs } = await supabase
      .from('transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (recentTxs) {
      recentTxs.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. ID: ${tx.id} | User: ${tx.user_id} | ${tx.currency}`);
        console.log(`      type: ${tx.type}`);
        console.log(`      amount: "${tx.amount}" (${typeof tx.amount})`);
        console.log(`      amount_ton: "${tx.amount_ton}" (${typeof tx.amount_ton})`);
        console.log(`      amount_uni: "${tx.amount_uni}" (${typeof tx.amount_uni})`);
        console.log(`      created: ${tx.created_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        const amount = parseFloat(tx.amount || 0);
        const amount_ton = parseFloat(tx.amount_ton || 0);
        const amount_uni = parseFloat(tx.amount_uni || 0);
        
        if (tx.currency === 'TON') {
          if (amount > 0 && amount_ton > 0) {
            console.log(`      ‚úÖ TON: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã amount –∏ amount_ton`);
          } else if (amount === 0 && amount_ton > 0) {
            console.log(`      ‚ö†Ô∏è  TON: amount=0, –Ω–æ amount_ton=${amount_ton} (—Å—Ç–∞—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞)`);
          } else if (amount > 0 && amount_ton === 0) {
            console.log(`      üîÑ TON: amount=${amount}, –Ω–æ amount_ton=0 (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞?)`);
          } else {
            console.log(`      ‚ùå TON: –æ–±–∞ –ø–æ–ª—è = 0`);
          }
        }
        
        if (tx.currency === 'UNI') {
          if (amount > 0 && amount_uni > 0) {
            console.log(`      ‚úÖ UNI: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã amount –∏ amount_uni`);
          } else if (amount === 0 && amount_uni > 0) {
            console.log(`      ‚ö†Ô∏è  UNI: amount=0, –Ω–æ amount_uni=${amount_uni} (—Å—Ç–∞—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞)`);
          } else if (amount > 0 && amount_uni === 0) {
            console.log(`      üîÑ UNI: amount=${amount}, –Ω–æ amount_uni=0 (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞?)`);
          } else {
            console.log(`      ‚ùå UNI: –æ–±–∞ –ø–æ–ª—è = 0`);
          }
        }
      });
    }
    
    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –ü–û–õ–ï–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):');
    
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const { data: recentStats } = await supabase
      .from('transactions')
      .select('currency, amount, amount_ton, amount_uni')
      .gte('created_at', yesterday.toISOString());
    
    if (recentStats) {
      const tonTxs = recentStats.filter(tx => tx.currency === 'TON');
      const uniTxs = recentStats.filter(tx => tx.currency === 'UNI');
      
      console.log(`\n   TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 24—á (–≤—Å–µ–≥–æ: ${tonTxs.length}):`);
      if (tonTxs.length > 0) {
        const tonWithAmount = tonTxs.filter(tx => parseFloat(tx.amount || 0) > 0).length;
        const tonWithAmountTon = tonTxs.filter(tx => parseFloat(tx.amount_ton || 0) > 0).length;
        
        console.log(`   - amount > 0: ${tonWithAmount} (${(tonWithAmount/tonTxs.length*100).toFixed(1)}%)`);
        console.log(`   - amount_ton > 0: ${tonWithAmountTon} (${(tonWithAmountTon/tonTxs.length*100).toFixed(1)}%)`);
        
        if (tonWithAmount !== tonTxs.length) {
          console.log(`   üö® ${tonTxs.length - tonWithAmount} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å amount = 0`);
        }
        if (tonWithAmountTon !== tonTxs.length) {
          console.log(`   üö® ${tonTxs.length - tonWithAmountTon} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å amount_ton = 0`);
        }
      }
      
      console.log(`\n   UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 24—á (–≤—Å–µ–≥–æ: ${uniTxs.length}):`);
      if (uniTxs.length > 0) {
        const uniWithAmount = uniTxs.filter(tx => parseFloat(tx.amount || 0) > 0).length;
        const uniWithAmountUni = uniTxs.filter(tx => parseFloat(tx.amount_uni || 0) > 0).length;
        
        console.log(`   - amount > 0: ${uniWithAmount} (${(uniWithAmount/uniTxs.length*100).toFixed(1)}%)`);
        console.log(`   - amount_uni > 0: ${uniWithAmountUni} (${(uniWithAmountUni/uniTxs.length*100).toFixed(1)}%)`);
        
        if (uniWithAmount !== uniTxs.length) {
          console.log(`   üö® ${uniTxs.length - uniWithAmount} UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å amount = 0`);
        }
        if (uniWithAmountUni !== uniTxs.length) {
          console.log(`   üö® ${uniTxs.length - uniWithAmountUni} UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å amount_uni = 0`);
        }
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 25 (DimaOsadchuk)
    console.log('\nüë§ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 25 (DimaOsadchuk):');
    const { data: user25Txs } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (user25Txs && user25Txs.length > 0) {
      user25Txs.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. ID: ${tx.id} | ${tx.currency} | ${tx.type}`);
        console.log(`      amount: "${tx.amount}"`);
        console.log(`      amount_ton: "${tx.amount_ton}"`);
        console.log(`      amount_uni: "${tx.amount_uni}"`);
        console.log(`      description: ${tx.description.substring(0, 50)}...`);
        
        const amount = parseFloat(tx.amount || 0);
        const specificAmount = tx.currency === 'TON' ? parseFloat(tx.amount_ton || 0) : parseFloat(tx.amount_uni || 0);
        
        if (amount === 0 && specificAmount > 0) {
          console.log(`      üö® –ü–†–û–ë–õ–ï–ú–ê: amount=0, –Ω–æ ${tx.currency.toLowerCase()}_amount=${specificAmount}`);
        } else if (amount > 0) {
          console.log(`      ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: amount –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        }
      });
    } else {
      console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ TON –¥–µ–ø–æ–∑–∏—Ç—ã User 25
    console.log('\nüíé TON –î–ï–ü–û–ó–ò–¢–´ USER 25:');
    const { data: user25TonDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
    
    if (user25TonDeposits && user25TonDeposits.length > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${user25TonDeposits.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      user25TonDeposits.forEach((tx, i) => {
        const amount = parseFloat(tx.amount || 0);
        const amount_ton = parseFloat(tx.amount_ton || 0);
        
        console.log(`   ${i + 1}. ID: ${tx.id} | amount: ${amount} | amount_ton: ${amount_ton}`);
        
        if (amount === 0 && amount_ton > 0) {
          console.log(`      üö® –ù–ï –û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø: Frontend —á–∏—Ç–∞–µ—Ç amount=0`);
        } else if (amount > 0) {
          console.log(`      ‚úÖ –û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø: Frontend —á–∏—Ç–∞–µ—Ç amount=${amount}`);
        }
      });
    } else {
      console.log('   TON –¥–µ–ø–æ–∑–∏—Ç—ã User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('- –ï—Å–ª–∏ amount –∑–∞–ø–æ–ª–Ω–µ–Ω–æ - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    console.log('- –ï—Å–ª–∏ amount = 0, –Ω–æ amount_ton/amount_uni > 0 - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    console.log('- –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

checkCurrentFieldStatus().catch(console.error);