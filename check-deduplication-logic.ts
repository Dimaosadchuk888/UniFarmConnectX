/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * –ê–Ω–∞–ª–∏–∑ –ø–æ—á–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç—Å—è
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDeduplicationLogic() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25
    const { data: duplicates, error } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, description, tx_hash_unique, metadata, created_at')
      .eq('user_id', 25)
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', new Date(Date.now() - 24*60*60*1000).toISOString())
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates?.length || 0}`);

    if (!duplicates || duplicates.length === 0) {
      console.log('‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥—É–±–ª–∏–∫–∞—Ç
    duplicates.forEach((tx, index) => {
      console.log(`\n--- –î—É–±–ª–∏–∫–∞—Ç ${index + 1} ---`);
      console.log(`ID: ${tx.id}`);
      console.log(`–°–æ–∑–¥–∞–Ω: ${tx.created_at}`);
      console.log(`tx_hash_unique: ${tx.tx_hash_unique || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`metadata:`, tx.metadata || '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º BOC –∏–∑ description
      const bocMatch = tx.description.match(/te6[A-Za-z0-9+/=]+/);
      const bocFromDescription = bocMatch ? bocMatch[0] : null;
      console.log(`BOC –∏–∑ description: ${bocFromDescription ? bocFromDescription.substring(0, 50) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
      if (tx.metadata) {
        console.log(`metadata.tx_hash: ${tx.metadata.tx_hash || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`metadata.ton_tx_hash: ${tx.metadata.ton_tx_hash || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      }
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ BOC
    console.log(`\nüîç –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û BOC:`);
    const bocGroups = new Map();
    
    duplicates.forEach(tx => {
      const bocMatch = tx.description.match(/te6[A-Za-z0-9+/=]+/);
      const boc = bocMatch ? bocMatch[0] : 'NO_BOC';
      
      if (!bocGroups.has(boc)) {
        bocGroups.set(boc, []);
      }
      bocGroups.get(boc).push(tx);
    });

    bocGroups.forEach((txs, boc) => {
      if (txs.length > 1) {
        console.log(`\nüö® –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å BOC: ${boc.substring(0, 30)}...`);
        txs.forEach(tx => {
          console.log(`  - ID ${tx.id} (${tx.created_at})`);
          console.log(`    tx_hash_unique: ${tx.tx_hash_unique || '–Ω–µ—Ç'}`);
          console.log(`    metadata.tx_hash: ${tx.metadata?.tx_hash || '–Ω–µ—Ç'}`);
        });
      }
    });

    // 4. –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    console.log(`\nüß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:`);
    
    const firstDuplicate = duplicates[0];
    const bocMatch = firstDuplicate.description.match(/te6[A-Za-z0-9+/=]+/);
    const testBoc = bocMatch ? bocMatch[0] : null;
    
    if (testBoc) {
      console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º BOC: ${testBoc.substring(0, 50)}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const { data: foundDuplicates, error: searchError } = await supabase
        .from('transactions')
        .select('id, created_at, user_id, amount, tx_hash_unique, metadata')
        .or(`tx_hash_unique.eq.${testBoc},metadata->>tx_hash.eq.${testBoc},metadata->>ton_tx_hash.eq.${testBoc}`)
        .order('created_at', { ascending: false });

      console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ OR –∑–∞–ø—Ä–æ—Å:`);
      console.log(`–ù–∞–π–¥–µ–Ω–æ: ${foundDuplicates?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      
      if (foundDuplicates && foundDuplicates.length > 0) {
        foundDuplicates.forEach((tx, i) => {
          console.log(`  ${i+1}. ID ${tx.id} - tx_hash_unique: ${tx.tx_hash_unique || '–Ω–µ—Ç'}`);
        });
      } else {
        console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: OR –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã!`);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ description
      const { data: descriptionDuplicates, error: descError } = await supabase
        .from('transactions')
        .select('id, created_at, description')
        .ilike('description', `%${testBoc.substring(0, 30)}%`);

      console.log(`\n–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ description (ILIKE):`);
      console.log(`–ù–∞–π–¥–µ–Ω–æ: ${descriptionDuplicates?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüìã –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    console.log(`1. tx_hash_unique –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ —É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`2. metadata –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tx_hash/ton_tx_hash`);
    console.log(`3. BOC —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ description`);
    console.log(`4. OR –∑–∞–ø—Ä–æ—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π`);
    
    console.log(`\nüîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`1. –ò–∑–≤–ª–µ–∫–∞—Ç—å BOC –∏–∑ description –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ tx_hash_unique`);
    console.log(`2. –û–±–Ω–æ–≤–∏—Ç—å metadata.tx_hash –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
    console.log(`3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ description –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDeduplicationLogic().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});