import { supabase } from './core/supabase.js';

async function checkEnumValues() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ó–ù–ê–ß–ï–ù–ò–ô ENUM transaction_type –í –ë–î\n');
  console.log('='*60 + '\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions
  console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–• –¢–ò–ü–û–í:\n');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  const typesToCheck = [
    'FARMING_DEPOSIT',
    'REFERRAL_REWARD', 
    'MISSION_REWARD',
    'DAILY_BONUS',
    'BOOST_PURCHASE'
  ];
  
  for (const type of typesToCheck) {
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º
      const { data, error } = await supabase
        .from('transactions')
        .insert({
          user_id: 9999, // —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          type: type,
          amount: '0.001',
          currency: 'UNI',
          status: 'completed',
          description: `Test transaction for type ${type}`
        })
        .select()
        .single();
        
      if (error) {
        if (error.message.includes('invalid input value for enum')) {
          console.log(`‚ùå ${type} - –ù–ï–¢ –≤ enum (${error.message})`);
        } else {
          console.log(`‚ùì ${type} - –û—à–∏–±–∫–∞: ${error.message}`);
        }
      } else {
        console.log(`‚úÖ ${type} - –ï–°–¢–¨ –≤ enum (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞)`);
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (data?.id) {
          await supabase
            .from('transactions')
            .delete()
            .eq('id', data.id);
        }
      }
    } catch (err) {
      console.log(`‚ùì ${type} - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:`, err);
    }
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —ç—Ç–∏–º–∏ —Ç–∏–ø–∞–º–∏
  console.log('\n' + '='*60);
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:\n');
  
  for (const type of typesToCheck) {
    const { count } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .eq('type', type);
      
    if (count && count > 0) {
      console.log(`üìä ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î`);
    } else {
      console.log(`üì≠ ${type}: 0 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata —Å original_type –¥–ª—è –æ–±—Ö–æ–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
  console.log('\n' + '='*60);
  console.log('\n3Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –û–ë–•–û–î–ù–´–ú–ò –†–ï–®–ï–ù–ò–Ø–ú–ò:\n');
  
  for (const type of typesToCheck) {
    const { data, count } = await supabase
      .from('transactions')
      .select('*', { count: 'exact' })
      .eq('metadata->>original_type', type)
      .limit(5);
      
    if (count && count > 0) {
      console.log(`\nüîÑ ${type} —á–µ—Ä–µ–∑ metadata: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      data?.slice(0, 2).forEach(tx => {
        console.log(`  - ID: ${tx.id}, type: ${tx.type}, –æ–ø–∏—Å–∞–Ω–∏–µ: ${tx.description?.substring(0, 50)}...`);
      });
    }
  }
  
  // 4. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n' + '='*60);
  console.log('\n4Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
  
  console.log('SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤:');
  console.log('```sql');
  typesToCheck.forEach(type => {
    console.log(`ALTER TYPE transaction_type ADD VALUE IF NOT EXISTS '${type}';`);
  });
  console.log('```');
  
  console.log('\n‚ö†Ô∏è –í–ê–ñ–ù–û:');
  console.log('- –ö–æ–º–∞–Ω–¥—ã ADD VALUE IF NOT EXISTS –±–µ–∑–æ–ø–∞—Å–Ω—ã');
  console.log('- –û–Ω–∏ –¥–æ–±–∞–≤—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è');
  console.log('- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã');
  console.log('- –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å');
}

checkEnumValues();