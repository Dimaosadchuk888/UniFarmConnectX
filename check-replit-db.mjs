/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Replit PostgreSQL
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ESM —Ñ–æ—Ä–º–∞—Ç package.json —Å "type": "module"
 */

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.DATABASE_PROVIDER = 'replit';

// –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç (ESM –∏–ª–∏ CommonJS)
let pg;
try {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ESM –∏–º–ø–æ—Ä—Ç
  pg = await import('pg').then(module => module.default || module);
} catch(e) {
  try {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º CommonJS
    pg = require('pg');
  } catch(err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å pg');
    console.error(err);
    process.exit(1);
  }
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è
const { Pool } = pg;

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è Replit PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  // –î–ª—è Replit —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ã—á–Ω–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  // PGUSER, PGHOST, PGPASSWORD, PGDATABASE, PGPORT
});

async function checkDatabaseConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Replit PostgreSQL...');
  
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const client = await pool.connect();
    
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('üìã –î–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:');
    console.log(`- –•–æ—Å—Ç: ${process.env.PGHOST || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`- –ü–æ—Ä—Ç: ${process.env.PGPORT || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.PGDATABASE || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${process.env.PGUSER || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`- URL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${process.env.DATABASE_URL ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { rows } = await client.query('SELECT current_database(), current_user, version()');
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`- –¢–µ–∫—É—â–∞—è –ë–î: ${rows[0].current_database}`);
    console.log(`- –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${rows[0].current_user}`);
    console.log(`- –í–µ—Ä—Å–∏—è PostgreSQL: ${rows[0].version.split(' ')[1]}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
    const { rows: tables } = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\nüìë –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    if (tables.length === 0) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (npm run db:push)');
    } else {
      tables.forEach((table, index) => {
        console.log(`${index + 1}. ${table.table_name}`);
      });
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
    console.error('1. DATABASE_URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.error('2. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PGHOST, PGPORT, PGDATABASE, PGUSER –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.error('3. PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.error('4. –§–∞–π–ª server/db.ts —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Replit');
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseConnection()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  });