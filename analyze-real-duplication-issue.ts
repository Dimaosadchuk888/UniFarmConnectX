import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function analyzeRealDuplicationIssue() {
  console.log('üö® –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=' .repeat(80));

  try {
    // 1. –ü–æ–ª—É—á–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
    console.log('\n1Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –î–£–ë–õ–ò–ö–ê–¢–û–í:');
    const { data: duplicates, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 184)
      .in('id', [1805783, 1805780])
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
      return;
    }

    console.log('–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', duplicates?.length);
    duplicates?.forEach((tx, i) => {
      console.log(`\n–î—É–±–ª–∏–∫–∞—Ç ${i + 1}:`);
      console.log(`  ID: ${tx.id}`);
      console.log(`  User ID: ${tx.user_id}`);
      console.log(`  –¢–∏–ø: ${tx.type}`);
      console.log(`  –í–∞–ª—é—Ç–∞: ${tx.currency}`);
      console.log(`  –°—É–º–º–∞: ${tx.amount || tx.amount_ton} TON`);
      console.log(`  TX Hash: ${tx.tx_hash || 'NULL'}`);
      console.log(`  BOC: ${tx.boc || 'NULL'}`);
      console.log(`  –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`  –°–æ–∑–¥–∞–Ω–æ: ${tx.created_at}`);
      console.log(`  –í—Å–µ –ø–æ–ª—è:`, Object.keys(tx));
    });

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• –î–£–ë–õ–ò–ö–ê–¢–û–í –ó–ê 24 –ß–ê–°–ê:');
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    
    const { data: allRecentTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 184)
      .eq('currency', 'TON')
      .gte('created_at', yesterday)
      .order('created_at', { ascending: false });

    if (!recentError && allRecentTx) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${allRecentTx.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞:`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const suspiciousPairs: any[] = [];
      for (let i = 0; i < allRecentTx.length - 1; i++) {
        for (let j = i + 1; j < allRecentTx.length; j++) {
          const tx1 = allRecentTx[i];
          const tx2 = allRecentTx[j];
          
          const sameAmount = (tx1.amount || tx1.amount_ton) === (tx2.amount || tx2.amount_ton);
          const timeDiff = Math.abs(new Date(tx1.created_at).getTime() - new Date(tx2.created_at).getTime()) / 1000;
          
          if (sameAmount && timeDiff < 300) { // –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
            suspiciousPairs.push({
              tx1: { id: tx1.id, amount: tx1.amount || tx1.amount_ton, time: tx1.created_at },
              tx2: { id: tx2.id, amount: tx2.amount || tx2.amount_ton, time: tx2.created_at },
              timeDiff: timeDiff
            });
          }
        }
      }

      if (suspiciousPairs.length > 0) {
        console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${suspiciousPairs.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
        suspiciousPairs.forEach((pair, i) => {
          console.log(`  –ü–∞—Ä–∞ ${i + 1}: ID ${pair.tx1.id} –∏ ${pair.tx2.id}`);
          console.log(`    –°—É–º–º–∞: ${pair.tx1.amount} TON`);
          console.log(`    –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${pair.timeDiff} —Å–µ–∫—É–Ω–¥`);
        });
      } else {
        console.log('‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –≥–¥–µ –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–û–ß–ö–ò –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –ë–î
    const { data: constraints, error: constraintsError } = await supabase
      .rpc('exec', { 
        sql: `
          SELECT 
            constraint_name, 
            constraint_type,
            column_name
          FROM information_schema.table_constraints tc
          JOIN information_schema.constraint_column_usage ccu 
            ON tc.constraint_name = ccu.constraint_name
          WHERE tc.table_name = 'transactions' 
            AND tc.constraint_type IN ('UNIQUE', 'PRIMARY KEY');
        `
      });

    if (!constraintsError && constraints) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions:');
      constraints.forEach((constraint: any) => {
        console.log(`  - ${constraint.constraint_name} (${constraint.constraint_type}): ${constraint.column_name}`);
      });
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö');
    }

    // 4. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ - –ø—Ä–æ–≤–µ—Ä–∏–º –≥–¥–µ –∏ –∫–∞–∫ —Å–æ–∑–¥–∞—é—Ç—Å—è TON –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\n4Ô∏è‚É£ –í–´–í–û–î –û –†–ï–ê–õ–¨–ù–û–ô –ü–†–û–ë–õ–ï–ú–ï:');
    
    console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
    console.log('1. –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –†–ï–ê–õ–¨–ù–û —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('2. –°–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
    console.log('3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å tx_hash = NULL –∏ boc = NULL');
    console.log('4. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ BOC/hash –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
    
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('- Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ BOC/hash –¥–∞–Ω–Ω—ã—Ö');
    console.log('- Backend –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç blockchain –¥–∞–Ω–Ω—ã–µ');
    console.log('- –°–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ BOC');
    console.log('- –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å race condition –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    console.log('\nüîç –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ /api/v2/wallet/ton-deposit');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å backend –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('3. –ù–∞–π—Ç–∏ –ø–æ—á–µ–º—É tx_hash –∏ boc –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ NULL');
    console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è NULL –∑–Ω–∞—á–µ–Ω–∏–π');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeRealDuplicationIssue().catch(console.error);