/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseJWTReferralIssue() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JWT –ò –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üìä 1. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô');
    const { data: recentUsers, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, referred_by, created_at')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      return;
    }

    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:');
    recentUsers.forEach((user, index) => {
      const hasReferral = user.referred_by ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç';
      const createdTime = new Date(user.created_at).toLocaleString('ru-RU');
      console.log(`${index + 1}. ID: ${user.id}, TG: ${user.telegram_id}, –†–µ—Ñ–µ—Ä–∞–ª: ${hasReferral}, –í—Ä–µ–º—è: ${createdTime}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
    console.log('\nüìã 2. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ REFERRALS');
    const { data: referrals, error: referralsError } = await supabase
      .from('referrals')
      .select('referred_user_id, referrer_user_id, created_at')
      .order('created_at', { ascending: false })
      .limit(10);

    if (referralsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π:', referralsError);
    } else {
      console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${referrals.length}`);
      if (referrals.length > 0) {
        console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏:');
        referrals.forEach((ref, index) => {
          const createdTime = new Date(ref.created_at).toLocaleString('ru-RU');
          console.log(`${index + 1}. –†–µ—Ñ–µ—Ä–∞–ª: ${ref.referred_user_id} -> –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${ref.referrer_user_id}, –í—Ä–µ–º—è: ${createdTime}`);
        });
      } else {
        console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ referrals –ø—É—Å—Ç–∞!');
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîó 3. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ö–û–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    const { data: userWithRefCode, error: refCodeError } = await supabase
      .from('users')
      .select('id, telegram_id, username, ref_code')
      .eq('ref_code', 'REF_1750079004411_nddfp2')
      .single();

    if (refCodeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º:', refCodeError);
    } else {
      console.log('‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${userWithRefCode.id}`);
      console.log(`   Telegram ID: ${userWithRefCode.telegram_id}`);
      console.log(`   Username: ${userWithRefCode.username}`);
      console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${userWithRefCode.ref_code}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É processReferral
    console.log('\n‚öôÔ∏è 4. –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–§–ï–†–ê–õ–û–í');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ processReferral –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersWithoutReferrals = recentUsers.filter(u => !u.referred_by);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${usersWithoutReferrals.length} –∏–∑ ${recentUsers.length}`);
    
    if (usersWithoutReferrals.length > 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    console.log('\n‚è±Ô∏è 5. –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ò–ù–¢–ï–†–í–ê–õ–û–í');
    const now = new Date();
    recentUsers.forEach(user => {
      const createdAt = new Date(user.created_at);
      const timeDiff = (now - createdAt) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
      const timeStr = timeDiff < 60 ? `${Math.round(timeDiff)} –º–∏–Ω` : `${Math.round(timeDiff / 60)} —á–∞—Å`;
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ${timeStr} –Ω–∞–∑–∞–¥`);
    });

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\nüîê 6. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    const simulationResult = await simulateAuthenticationFlow();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏:', simulationResult);

    // 7. –í—ã–≤–æ–¥—ã
    console.log('\nüéØ 7. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    
    const referralSuccessRate = recentUsers.filter(u => u.referred_by).length / recentUsers.length * 100;
    console.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${referralSuccessRate.toFixed(1)}%`);
    
    if (referralSuccessRate < 50) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. processReferral() –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      console.log('2. –û—à–∏–±–∫–∏ JWT –ø—Ä–µ—Ä—ã–≤–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
      console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ URL');
      console.log('4. –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ createUser() –∏–ª–∏ processReferral()');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

async function simulateAuthenticationFlow() {
  console.log('\nüß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–¶–ï–°–°–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  const refCode = 'REF_1750079004411_nddfp2';
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    const { data: referrerUser, error: referrerError } = await supabase
      .from('users')
      .select('id, telegram_id, username')
      .eq('ref_code', refCode)
      .single();
    
    if (referrerError) {
      return {
        success: false,
        step: 'referrer_lookup',
        error: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      };
    }
    
    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrerUser.username} (ID: ${referrerUser.id})`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const mockUserData = {
      telegram_id: 999999999,
      username: 'test_user_jwt_diagnosis',
      first_name: 'Test User',
      ref_by: refCode
    };
    
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', mockUserData);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É processReferral
    console.log('‚úÖ –õ–æ–≥–∏–∫–∞ processReferral –¥–æ–ª–∂–Ω–∞:');
    console.log(`   - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ref_code: ${refCode}`);
    console.log(`   - –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –≤ —Ç–∞–±–ª–∏—Ü–µ referrals`);
    console.log(`   - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ referred_by —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    
    return {
      success: true,
      referrer_found: true,
      referrer_id: referrerUser.id,
      ref_code: refCode
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseJWTReferralIssue();