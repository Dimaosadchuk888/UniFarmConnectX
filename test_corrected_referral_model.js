/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –º–æ–¥–µ–ª–∏ UniFarm
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞: Level 1 = 100%, Level 2-20 = 2%-20% –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
 */
function calculateCorrectedCommissions(sourceIncome, referrerChain) {
  const commissions = [];
  
  for (let i = 0; i < referrerChain.length && i < 20; i++) {
    const level = i + 1;
    const userId = referrerChain[i];
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∫–æ–º–∏—Å—Å–∏–π
    let commissionRate;
    if (level === 1) {
      commissionRate = 1.00; // 100% –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    } else {
      commissionRate = level / 100; // 2% –¥–ª—è Level 2, 3% –¥–ª—è Level 3, etc.
    }
    
    const commissionAmount = sourceIncome * commissionRate;
    const percentageDisplay = commissionRate * 100;
    
    commissions.push({
      userId,
      level,
      percentage: percentageDisplay,
      amount: commissionAmount,
      description: `Corrected model L${level}: ${commissionAmount.toFixed(6)} UNI (${percentageDisplay}%)`
    });
  }
  
  return commissions;
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
 */
function showModelComparison() {
  console.log('=== –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ê–†–û–ô –ò –ù–û–í–û–ô –ú–û–î–ï–õ–ò ===');
  
  const sourceIncome = 0.1; // 0.1 UNI –¥–æ—Ö–æ–¥–∞
  const testChain = ['user1', 'user2', 'user3'];
  
  console.log(`–ò—Å—Ö–æ–¥–Ω—ã–π –¥–æ—Ö–æ–¥: ${sourceIncome} UNI`);
  console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞: 3 —É—Ä–æ–≤–Ω—è');
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
  const correctCommissions = calculateCorrectedCommissions(sourceIncome, testChain);
  
  console.log('\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨:');
  correctCommissions.forEach(commission => {
    console.log(`  Level ${commission.level}: ${commission.percentage}% = ${commission.amount.toFixed(6)} UNI`);
  });
  
  console.log('\n‚ùå –°–¢–ê–†–ê–Ø –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –ú–û–î–ï–õ–¨ (—á—Ç–æ –±—ã–ª–æ –≤ –±–∞–∑–µ):');
  console.log('  Level 1: 100% = 0.100000 UNI ‚úÖ');
  console.log('  Level 2: 20% = 0.020000 UNI ‚ùå (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2%)');
  console.log('  Level 3: 19% = 0.019000 UNI ‚ùå (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3%)');
  
  const correctTotal = correctCommissions.reduce((sum, c) => sum + c.amount, 0);
  const wrongTotal = 0.1 + 0.02 + 0.019; // –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å
  
  console.log(`\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—â–∞—è —Å—É–º–º–∞: ${correctTotal.toFixed(6)} UNI`);
  console.log(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—â–∞—è —Å—É–º–º–∞: ${wrongTotal.toFixed(6)} UNI`);
  console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(correctTotal - wrongTotal).toFixed(6)} UNI`);
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
 */
async function testNewModelOnRealChain() {
  console.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–û–ô –¶–ï–ü–û–ß–ö–ï ===');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    const { data: users, error } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .not('referred_by', 'is', null)
      .limit(5);
      
    if (error || !users || users.length === 0) {
      console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–∞—Ö`);
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—Ä–æ–∏–º –µ–≥–æ —Ü–µ–ø–æ—á–∫—É
    const testUser = users[0];
    console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è: ${testUser.username} (ID: ${testUser.id})`);
    
    // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
    const chain = [];
    let currentUserId = testUser.id;
    
    while (chain.length < 5) {
      const user = users.find(u => u.id === currentUserId);
      if (!user || !user.referred_by) break;
      
      chain.push(user.referred_by.toString());
      currentUserId = user.referred_by;
    }
    
    if (chain.length > 0) {
      console.log(`–¶–µ–ø–æ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${chain.length} —É—Ä–æ–≤–Ω–µ–π`);
      
      const testIncome = 0.05; // 0.05 UNI —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
      const commissions = calculateCorrectedCommissions(testIncome, chain);
      
      console.log(`\n–†–∞—Å—á–µ—Ç –¥–ª—è –¥–æ—Ö–æ–¥–∞ ${testIncome} UNI:`);
      commissions.forEach(commission => {
        console.log(`  Level ${commission.level}: ${commission.percentage}% = ${commission.amount.toFixed(6)} UNI`);
      });
      
      const totalCommissions = commissions.reduce((sum, c) => sum + c.amount, 0);
      console.log(`\n–û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: ${totalCommissions.toFixed(6)} UNI`);
      console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞: ${((totalCommissions / testIncome) * 100).toFixed(1)}%`);
    } else {
      console.log('‚ö†Ô∏è –¶–µ–ø–æ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞');
    }
    
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err.message);
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –ø–æ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
 */
function showNewModelEarnings() {
  console.log('\n=== –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –î–û–•–û–î–´ –ü–û –ü–†–ê–í–ò–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò ===');
  
  const scenarios = [
    { income: 1, description: '1 UNI farming –¥–æ—Ö–æ–¥' },
    { income: 10, description: '10 UNI –±–æ–ª—å—à–æ–π –¥–µ–ø–æ–∑–∏—Ç' },
    { income: 100, description: '100 UNI VIP –¥–µ–ø–æ–∑–∏—Ç' }
  ];
  
  scenarios.forEach(scenario => {
    console.log(`\nüìà ${scenario.description}:`);
    
    const chain = Array.from({length: 5}, (_, i) => `referrer_${i + 1}`);
    const commissions = calculateCorrectedCommissions(scenario.income, chain);
    
    commissions.forEach(commission => {
      const uniAmount = commission.amount.toFixed(6);
      console.log(`  Level ${commission.level}: ${commission.percentage}% = ${uniAmount} UNI`);
    });
    
    const total = commissions.reduce((sum, c) => sum + c.amount, 0);
    console.log(`  üí∞ –û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: ${total.toFixed(6)} UNI`);
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testCorrectedReferralModel() {
  try {
    console.log('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ú–û–î–ï–õ–ò UNIFARM');
    console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
    console.log('='.repeat(70));
    
    showModelComparison();
    await testNewModelOnRealChain();
    showNewModelEarnings();
    
    console.log('\n' + '='.repeat(70));
    console.log('üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã REFERRAL_COMMISSION_RATES –≤ model.ts –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    console.log('‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–∞');
    console.log('‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã');
    console.log('‚ö†Ô∏è –°—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (4 –∏–∑ 21) —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã');
    console.log('üéØ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ business –ª–æ–≥–∏–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

testCorrectedReferralModel();