import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function findDuplicateSource() {
  console.log('üîç –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ò–°–¢–û–ß–ù–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í');
  console.log('=' .repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 2 –ß–ê–°–ê:');
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
    
    const { data: recentTx, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: false })
      .limit(50);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${recentTx?.length || 0} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞:`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const userTransactions: { [key: string]: any[] } = {};
    recentTx?.forEach(tx => {
      const userId = tx.user_id.toString();
      if (!userTransactions[userId]) userTransactions[userId] = [];
      userTransactions[userId].push(tx);
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.entries(userTransactions).forEach(([userId, transactions]) => {
      if (transactions.length > 1) {
        console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
        transactions.forEach((tx, i) => {
          console.log(`  ${i + 1}. ID: ${tx.id} | ${tx.amount || tx.amount_ton} TON | ${tx.created_at}`);
          console.log(`     –¢–∏–ø: ${tx.type} | –°—Ç–∞—Ç—É—Å: ${tx.status} | –ò—Å—Ç–æ—á–Ω–∏–∫: ${tx.source || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${tx.metadata ? JSON.stringify(tx.metadata) : '–Ω–µ—Ç'}`);
          console.log(`     TX Hash: ${tx.tx_hash || 'NULL'} | BOC: ${tx.boc || 'NULL'}`);
          
          // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          console.log(`     –î—É–±–ª–∏–∫–∞—Ç: ${tx.is_duplicate ? '–î–ê' : '–ù–ï–¢'} | –î—É–±–ª–∏–∫–∞—Ç ID: ${tx.duplicate_of_id || '–Ω–µ—Ç'}`);
        });
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ–ª–µ source)
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const sourceAnalysis: { [key: string]: number } = {};
    recentTx?.forEach(tx => {
      const source = tx.source || 'unknown';
      sourceAnalysis[source] = (sourceAnalysis[source] || 0) + 1;
    });

    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:');
    Object.entries(sourceAnalysis).forEach(([source, count]) => {
      console.log(`  - ${source}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:');
    const duplicatePairs: any[] = [];
    
    for (let i = 0; i < (recentTx?.length || 0) - 1; i++) {
      for (let j = i + 1; j < (recentTx?.length || 0); j++) {
        const tx1 = recentTx![i];
        const tx2 = recentTx![j];
        
        if (tx1.user_id === tx2.user_id && 
            (tx1.amount || tx1.amount_ton) === (tx2.amount || tx2.amount_ton)) {
          
          const timeDiff = Math.abs(new Date(tx1.created_at).getTime() - new Date(tx2.created_at).getTime()) / 1000;
          
          if (timeDiff < 300) { // –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
            duplicatePairs.push({
              tx1: { id: tx1.id, time: tx1.created_at, source: tx1.source },
              tx2: { id: tx2.id, time: tx2.created_at, source: tx2.source },
              timeDiff,
              amount: tx1.amount || tx1.amount_ton,
              userId: tx1.user_id
            });
          }
        }
      }
    }

    if (duplicatePairs.length > 0) {
      console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${duplicatePairs.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
      duplicatePairs.forEach((pair, i) => {
        console.log(`  –î—É–±–ª–∏–∫–∞—Ç ${i + 1}:`);
        console.log(`    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${pair.tx1.id} ‚Üí ${pair.tx2.id}`);
        console.log(`    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${pair.userId} | –°—É–º–º–∞: ${pair.amount} TON`);
        console.log(`    –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${pair.timeDiff} —Å–µ–∫—É–Ω–¥`);
        console.log(`    –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${pair.tx1.source || 'unknown'} ‚Üí ${pair.tx2.source || 'unknown'}`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –°–ò–°–¢–ï–ú–ù–´–• –õ–û–ì–û–í –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ webhook endpoints –∏–ª–∏ –¥—Ä—É–≥–∏–µ API
    console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
    console.log('1. Webhook –∏–∑ –±–ª–æ–∫—á–µ–π–Ω —Å–∫–∞–Ω–µ—Ä–∞ (TonAPI, TON Center)');
    console.log('2. Cron job –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫—á–µ–π–Ω–∞');
    console.log('3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã');
    console.log('4. –î—Ä—É–≥–∏–µ API endpoints (/api/wallet/ton-deposit –±–µ–∑ /v2)');
    console.log('5. –ü—Ä—è–º—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã');

    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ú–ï–¢–ê–î–ê–ù–ù–´–•:');
    const metadataAnalysis: { [key: string]: number } = {};
    recentTx?.forEach(tx => {
      if (tx.metadata) {
        try {
          const meta = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          Object.keys(meta).forEach(key => {
            metadataAnalysis[key] = (metadataAnalysis[key] || 0) + 1;
          });
        } catch (e) {
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${tx.id}: ${tx.metadata}`);
        }
      }
    });

    if (Object.keys(metadataAnalysis).length > 0) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:');
      Object.entries(metadataAnalysis).forEach(([key, count]) => {
        console.log(`  - ${key}: ${count} —Ä–∞–∑`);
      });
    } else {
      console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ endpoints –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n6Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:');
    console.log('üîç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω—É–∂–Ω–æ:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å server/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ webhook handlers');
    console.log('2. –ù–∞–π—Ç–∏ cron jobs –∏ scheduled tasks');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ API endpoints –Ω–∞ /api/wallet/*');
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å direct database access –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
    console.log('5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ —Ä—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
  }
}

findDuplicateSource().catch(console.error);