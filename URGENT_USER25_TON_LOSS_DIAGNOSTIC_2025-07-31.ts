import { supabase } from './server/supabase';
import { logger } from './core/logger';

/**
 * –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—Ç–µ—Ä—è 3 TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID 25
 * –ê–Ω–∞–ª–∏–∑ JWT —Ç–æ–∫–µ–Ω–æ–≤, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

async function urgentUser25Diagnostic() {
  console.log('üö® –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—Ç–µ—Ä—è 3 TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID 25');
  console.log('üìÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  console.log('=' .repeat(80));

  try {
    // 1. –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 25
    console.log('\n1Ô∏è‚É£ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 25:');
    const { data: user25, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, ton_balance, uni_balance, created_at, last_active')
      .eq('id', 25)
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: user25.id,
      telegram_id: user25.telegram_id,
      username: user25.username,
      current_ton_balance: user25.ton_balance,
      current_uni_balance: user25.uni_balance,
      last_active: user25.last_active
    });

    // 2. –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê
    console.log('\n2Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25 –ó–ê 24 –ß–ê–°–ê:');
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞:`);
      
      if (transactions && transactions.length > 0) {
        transactions.forEach((tx, index) => {
          console.log(`${index + 1}. [${tx.created_at}] ${tx.type}: ${tx.amount} ${tx.currency || 'TON'}`);
          console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          if (tx.hash) console.log(`   üîó Hash: ${tx.hash}`);
          console.log(`   üí∞ –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: TON=${tx.balance_after_ton}, UNI=${tx.balance_after_uni}`);
          console.log('   ---');
        });
      } else {
        console.log('‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–û –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
      }
    }

    // 3. –ü–û–ò–°–ö TON –î–ï–ü–û–ó–ò–¢–û–í (–≤–æ–∑–º–æ–∂–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö)
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö TON –î–ï–ü–û–ó–ò–¢–û–í –í –°–ò–°–¢–ï–ú–ï:');
    
    // –ü–æ–∏—Å–∫ –ø–æ hash –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    const { data: tonDeposits, error: depositError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (depositError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositError);
    } else {
      console.log(`üíé –ù–∞–π–¥–µ–Ω–æ ${tonDeposits?.length || 0} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞:`);
      tonDeposits?.forEach((deposit, index) => {
        console.log(`${index + 1}. [${deposit.created_at}] –î–µ–ø–æ–∑–∏—Ç: ${deposit.amount} TON`);
        console.log(`   üîó Hash: ${deposit.hash}`);
        console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${deposit.description}`);
      });
    }

    // 4. –ê–ù–ê–õ–ò–ó –í–°–ï–• –ó–ê–ü–ò–°–ï–ô –° –°–£–ú–ú–û–ô 3 TON
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• –ó–ê–ü–ò–°–ï–ô –° –°–£–ú–ú–û–ô 3 TON:');
    const { data: threeTonTx, error: threeError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('amount', '3')
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (threeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ 3 TON –∑–∞–ø–∏—Å–µ–π:', threeError);
    } else {
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${threeTonTx?.length || 0} –∑–∞–ø–∏—Å–µ–π —Å —Å—É–º–º–æ–π 3 TON:`);
      threeTonTx?.forEach((tx, index) => {
        console.log(`${index + 1}. [${tx.created_at}] ${tx.type}: ${tx.amount} TON`);
        console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`   üîó Hash: ${tx.hash || '–ù–µ—Ç hash'}`);
        console.log(`   üìä –ë–∞–ª–∞–Ω—Å –¥–æ: TON=${tx.balance_before_ton}, UNI=${tx.balance_before_uni}`);
        console.log(`   üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: TON=${tx.balance_after_ton}, UNI=${tx.balance_after_uni}`);
        console.log('   ---');
      });
    }

    // 5. JWT –¢–û–ö–ï–ù –ê–ù–ê–õ–ò–ó (–∏–∑ –ª–æ–≥–æ–≤ if available)
    console.log('\n5Ô∏è‚É£ JWT –¢–û–ö–ï–ù –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    console.log('üîë JWT —Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è:');
    console.log('   - –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ Telegram WebApp)');
    console.log('   - –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫)');
    console.log('   - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: –æ–±—ã—á–Ω–æ 24 —á–∞—Å–∞');
    console.log('   - –ü—Ä–æ–±–ª–µ–º–∞: JWT –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞');

    // 6. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• API –í–´–ó–û–í–û–í –ë–ê–õ–ê–ù–°–ê
    console.log('\n6Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25:');
    const { data: currentBalance, error: balanceError } = await supabase
      .from('users')
      .select('ton_balance, uni_balance, updated_at')
      .eq('id', 25)
      .single();

    if (balanceError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', balanceError);
    } else {
      console.log('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î:', {
        ton_balance: currentBalance.ton_balance,
        uni_balance: currentBalance.uni_balance,
        last_updated: currentBalance.updated_at
      });
    }

    // 7. –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–û–¢–ï–†–ò 3 TON
    console.log('\n7Ô∏è‚É£ –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–û–¢–ï–†–ò 3 TON:');
    console.log('üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('   1. Race condition –º–µ–∂–¥—É Frontend TON Connect –∏ Backend API');
    console.log('   2. JWT —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    console.log('   3. Rollback —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Ç–∫–ª—é—á–µ–Ω—ã, –Ω–æ –º–æ–≥–ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)');
    console.log('   4. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–¥–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –¥—Ä—É–≥–∞—è –ø–æ—Ç–µ—Ä—è–Ω–∞)');
    console.log('   5. –ü—Ä–æ–±–ª–µ–º–∞ —Å editMessage –≤ TON Connect —Å–µ—Ä–≤–∏—Å–µ');

    // 8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\n8Ô∏è‚É£ –°–†–û–ß–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('‚ö° –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ server/index.ts –∑–∞ –≤—Ä–µ–º—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    console.log('   2. –ù–∞–π—Ç–∏ blockchain hash –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend logs –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ TON Connect');
    console.log('   4. –ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å 3 TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID 25 –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');

  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
urgentUser25Diagnostic().catch(console.error);