/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø TON BOOST
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è User 74
 * –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
 */

import { supabase } from './core/supabase';

interface BoostPurchase {
  id: number;
  user_id: number;
  boost_package_id: number;
  amount: number;
  payment_method: string;
  created_at: string;
  updated_at: string;
}

interface TonFarmingData {
  user_id: number;
  farming_balance: number;
  farming_rate: number;
  farming_start_timestamp: string;
  farming_last_update: string;
  boost_package_id: number;
}

interface Transaction {
  id: number;
  user_id: number;
  type: string;
  amount_ton: number;
  description: string;
  metadata: any;
  created_at: string;
}

async function validateTonBoostFinal() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø TON BOOST –î–õ–Ø USER 74');
  console.log('=' .repeat(60));
  
  const userId = 74;

  // 1. –ê–Ω–∞–ª–∏–∑ TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  console.log('\nüìä 1. –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í TON BOOST:');
  console.log('-'.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ boost –ø–∞–∫–µ—Ç–æ–≤
  const { data: boostPurchases, error: purchasesError } = await supabase
    .from('boost_purchases')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false });

  if (purchasesError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', purchasesError);
    return;
  }

  const tonBoostPurchases = boostPurchases?.filter(p => [2, 3, 4].includes(p.boost_package_id)) || [];
  
  console.log(`üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${tonBoostPurchases.length}`);
  
  let totalDeposits = 0;
  tonBoostPurchases.forEach((purchase, index) => {
    const packageNames: Record<number, string> = {
      2: 'Starter (5 TON)',
      3: 'Standard (10 TON)', 
      4: 'Premium (25 TON)'
    };
    console.log(`  ${index + 1}. ${packageNames[purchase.boost_package_id]} - ${purchase.amount} TON (${new Date(purchase.created_at).toLocaleString()})`);
    totalDeposits += purchase.amount;
  });
  
  console.log(`\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits} TON`);

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ farming_balance
  console.log('\nüìà 2. –ü–†–û–í–ï–†–ö–ê FARMING BALANCE:');
  console.log('-'.repeat(60));
  
  const { data: tonFarmingData, error: farmingError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId)
    .single();

  if (farmingError || !tonFarmingData) {
    console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  console.log(`üî∏ –¢–µ–∫—É—â–∏–π farming_balance: ${tonFarmingData.farming_balance} TON`);
  console.log(`üî∏ –¢–µ–∫—É—â–∏–π farming_rate: ${tonFarmingData.farming_rate} (${tonFarmingData.farming_rate * 100}% –≤ –¥–µ–Ω—å)`);
  console.log(`üî∏ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç ID: ${tonFarmingData.boost_package_id}`);
  console.log(`üî∏ –ù–∞—á–∞–ª–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${new Date(tonFarmingData.farming_start_timestamp).toLocaleString()}`);
  console.log(`üî∏ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(tonFarmingData.farming_last_update).toLocaleString()}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
  const balanceMatch = tonFarmingData.farming_balance === totalDeposits;
  console.log(`\n${balanceMatch ? '‚úÖ' : '‚ùå'} Farming_balance ${balanceMatch ? '–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' : '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'} —Å—É–º–º–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
  if (!balanceMatch) {
    console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: ${totalDeposits} TON, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${tonFarmingData.farming_balance} TON`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${totalDeposits - tonFarmingData.farming_balance} TON`);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
  console.log('\nüí∏ 3. –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:');
  console.log('-'.repeat(60));

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  const { data: incomeTransactions, error: transError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'FARMING_REWARD')
    .not('metadata', 'is', null)
    .order('created_at', { ascending: false })
    .limit(10);

  if (transError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transError);
    return;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const tonBoostIncomes = incomeTransactions?.filter(t => 
    t.metadata?.original_type === 'TON_BOOST_INCOME' || 
    t.metadata?.transaction_source === 'ton_boost_scheduler'
  ) || [];

  console.log(`\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON Boost:`);
  const last5Incomes = tonBoostIncomes.slice(0, 5);
  
  let sumIncomes = 0;
  last5Incomes.forEach((trans, index) => {
    console.log(`  ${index + 1}. +${trans.amount_ton} TON (${new Date(trans.created_at).toLocaleString()})`);
    sumIncomes += parseFloat(trans.amount_ton || '0');
  });

  if (last5Incomes.length > 0) {
    const avgIncome = sumIncomes / last5Incomes.length;
    console.log(`\nüìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç: ${avgIncome.toFixed(6)} TON`);

    // –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    const dailyIncome = tonFarmingData.farming_balance * tonFarmingData.farming_rate;
    const incomePerInterval = dailyIncome / 288; // 288 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç –≤ —Å—É—Ç–∫–∞—Ö

    console.log(`\nüßÆ –†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:`);
    console.log(`  ‚Ä¢ –°—É—Ç–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${tonFarmingData.farming_balance} √ó ${tonFarmingData.farming_rate} = ${dailyIncome.toFixed(6)} TON`);
    console.log(`  ‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${dailyIncome.toFixed(6)} √∑ 288 = ${incomePerInterval.toFixed(6)} TON`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    const tolerance = 0.000001; // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const incomeMatch = Math.abs(avgIncome - incomePerInterval) < tolerance;
    
    console.log(`\n${incomeMatch ? '‚úÖ' : '‚ùå'} –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è ${incomeMatch ? '–°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢' : '–ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢'} —Ä–∞—Å—á–µ—Ç–Ω—ã–º`);
    if (!incomeMatch) {
      const difference = ((avgIncome / incomePerInterval - 1) * 100).toFixed(2);
      console.log(`   –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${difference}%`);
    }
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost');
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  console.log('\nüîí 4. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò:');
  console.log('-'.repeat(60));

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ farming_balance
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  const { data: recentTransactions, error: recentError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .in('type', ['BOOST_PURCHASE', 'FARMING_REWARD'])
    .gte('created_at', oneHourAgo)
    .order('created_at', { ascending: true });

  if (!recentError && recentTransactions && recentTransactions.length > 0) {
    console.log(`\nüìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentTransactions.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata
    const brokenMetadata = recentTransactions.filter(t => 
      t.metadata && (
        typeof t.metadata === 'string' ||
        t.metadata === null ||
        JSON.stringify(t.metadata).includes('undefined')
      )
    );

    console.log(`${brokenMetadata.length === 0 ? '‚úÖ' : '‚ùå'} –í—Å–µ metadata –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (–Ω–µ—Ç —Å—Ç—Ä–æ–∫, null, undefined)`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    const incomes = recentTransactions.filter(t => 
      t.type === 'FARMING_REWARD' && 
      (t.metadata?.original_type === 'TON_BOOST_INCOME' || t.metadata?.transaction_source === 'ton_boost_scheduler')
    );
    
    if (incomes.length >= 2) {
      const intervals: number[] = [];
      for (let i = 1; i < incomes.length; i++) {
        const interval = new Date(incomes[i].created_at).getTime() - new Date(incomes[i-1].created_at).getTime();
        intervals.push(interval / 1000 / 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
      }
      
      const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
      const intervalOk = Math.abs(avgInterval - 5) < 1; // –¥–æ–ø—É—Å–∫ 1 –º–∏–Ω—É—Ç–∞
      
      console.log(`${intervalOk ? '‚úÖ' : '‚ùå'} –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã (—Å—Ä–µ–¥–Ω–µ–µ: ${avgInterval.toFixed(1)} –º–∏–Ω)`);
    }
  }

  // –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢
  console.log('\n' + '='.repeat(60));
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:');
  console.log('='.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
  const avgIncome = last5Incomes.length > 0 ? sumIncomes / last5Incomes.length : 0;
  const incomePerInterval = (tonFarmingData.farming_balance * tonFarmingData.farming_rate) / 288;
  
  // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  let brokenMetadata: any[] = [];
  if (!recentError && recentTransactions) {
    brokenMetadata = recentTransactions.filter(t => 
      t.metadata && (
        typeof t.metadata === 'string' ||
        t.metadata === null ||
        JSON.stringify(t.metadata).includes('undefined')
      )
    );
  }

  const checks = {
    deposits: balanceMatch && tonBoostPurchases.length > 0,
    rate: tonFarmingData.farming_rate > 0,
    incomes: last5Incomes.length > 0 && Math.abs(avgIncome - incomePerInterval) < 0.000001,
    metadata: brokenMetadata.length === 0,
    balance: tonFarmingData.farming_balance > 0
  };

  const allChecks = Object.values(checks).every(v => v);

  console.log(`\n${allChecks ? '‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION' : '‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
  console.log('\n–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫:');
  console.log(`  ${checks.deposits ? '‚úÖ' : '‚ùå'} –î–µ–ø–æ–∑–∏—Ç—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
  console.log(`  ${checks.rate ? '‚úÖ' : '‚ùå'} –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  console.log(`  ${checks.incomes ? '‚úÖ' : '‚ùå'} –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–∞—Å—á–µ—Ç–∞–º`);
  console.log(`  ${checks.metadata ? '‚úÖ' : '‚ùå'} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –æ—à–∏–±–æ–∫ metadata`);
  console.log(`  ${checks.balance ? '‚úÖ' : '‚ùå'} Farming balance —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è`);

  if (!allChecks) {
    console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    if (!checks.deposits) console.log('  ‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ farming_balance');
    if (!checks.rate) console.log('  ‚Ä¢ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞');
    if (!checks.incomes) console.log('  ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ');
    if (!checks.metadata) console.log('  ‚Ä¢ –ï—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ metadata');
    if (!checks.balance) console.log('  ‚Ä¢ Farming balance —Ä–∞–≤–µ–Ω –Ω—É–ª—é');
  }

  console.log('\n' + '='.repeat(60));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
validateTonBoostFinal().catch(console.error);