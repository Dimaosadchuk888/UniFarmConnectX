#!/usr/bin/env tsx
/**
 * üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ —Ç–µ–ø–µ—Ä—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
 * –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
 * 
 * Date: 2025-07-29
 */

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

console.log('üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ WITHDRAWAL\n');

async function testAPI(description: string, authToken: string, expectedStatus: number) {
  console.log(`üì° –¢–µ—Å—Ç: ${description}`);
  
  try {
    const curlCommand = `curl -X POST "http://localhost:3000/api/v2/wallet/withdraw" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${authToken}" \
      -d '{"amount":"1000","currency":"TON","wallet_address":"test"}' \
      -w "\\nHTTP_STATUS:%{http_code}" \
      -s`;
    
    const { stdout } = await execAsync(curlCommand);
    const lines = stdout.trim().split('\n');
    const jsonResponse = lines.slice(0, -1).join('\n');
    const statusLine = lines[lines.length - 1];
    const httpStatus = parseInt(statusLine.replace('HTTP_STATUS:', ''));
    
    console.log(`   üìä HTTP Status: ${httpStatus} (–æ–∂–∏–¥–∞–ª–∏: ${expectedStatus})`);
    console.log(`   üìù Response: ${jsonResponse.substring(0, 100)}...`);
    
    const responseObj = JSON.parse(jsonResponse);
    
    if (httpStatus === expectedStatus) {
      console.log(`   ‚úÖ HTTP Status –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π`);
    } else {
      console.log(`   ‚ùå HTTP Status –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (responseObj.success === false && responseObj.error) {
      console.log(`   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è`);
      console.log(`   üìÑ Error message: "${responseObj.error}"`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (responseObj.need_jwt_token) {
        console.log(`   üîë –¢–∏–ø: Authentication Required (need_jwt_token: true)`);
      } else if (responseObj.error.includes('insufficient')) {
        console.log(`   üí∞ –¢–∏–ø: Business Logic Error (insufficient funds)`);
      } else {
        console.log(`   üìã –¢–∏–ø: Other Error`);
      }
    } else {
      console.log(`   ‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è`);
    }
    
    console.log('');
    return { httpStatus, responseObj };
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error}`);
    console.log('');
    return null;
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API withdrawal endpoint...\n');
  
  // –¢–µ—Å—Ç 1: Invalid JWT token (401)
  await testAPI('Invalid JWT Token (401)', 'invalid-test-token-12345', 401);
  
  // –¢–µ—Å—Ç 2: Missing JWT token (401)  
  await testAPI('Missing Authorization Header (401)', '', 401);
  
  // –¢–µ—Å—Ç 3: Expired JWT token (401)
  await testAPI('Expired JWT Token (401)', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImV4cCI6MTAwMDAwMDAwMH0.expired', 401);
  
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 –æ—à–∏–±–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π JSON');
  console.log('‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç need_jwt_token: true –¥–ª—è frontend –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  console.log('‚úÖ Error messages –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ');
  console.log('');
  console.log('üéØ –í–´–í–û–î: Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  console.log('üì± Frontend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º withdrawalService.ts —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω:');
  console.log('   - –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å 401 + need_jwt_token –∫–∞–∫ authentication_required');
  console.log('   - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" –≤–º–µ—Å—Ç–æ "network error"');
  console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º');
  console.log('');
  console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
}

runTests().catch(console.error);