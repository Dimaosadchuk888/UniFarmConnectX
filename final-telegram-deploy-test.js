/**
 * –≠–¢–ê–ü 6: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–µ–ø–ª–æ—è Telegram Mini App
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

class TelegramDeployTest {
  constructor() {
    this.results = [];
    this.currentUrl = `https://${process.env.REPLIT_DEV_DOMAIN}`;
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_KEY
    );
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–µ–ø–ª–æ—è Telegram Mini App...\n');
  }

  log(category, test, status, details = null) {
    const entry = { category, test, status, details, timestamp: new Date().toISOString() };
    this.results.push(entry);
    
    const statusIcon = status === 'SUCCESS' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${statusIcon} [${category}] ${test}${details ? ': ' + JSON.stringify(details) : ''}`);
  }

  /**
   * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async testProductionServer() {
    console.log('\nüñ•Ô∏è 1. –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–ê–ö–®–ù-–°–ï–†–í–ï–†–ê\n');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
      const healthResponse = await fetch(`${this.currentUrl}/health`);
      const healthData = await healthResponse.json();
      
      if (healthResponse.status === 200 && healthData.status === 'ok') {
        this.log('SERVER', 'Health endpoint /health', 'SUCCESS', {
          status: healthData.status,
          version: healthData.version,
          environment: healthData.environment
        });
      } else {
        this.log('SERVER', 'Health endpoint /health', 'ERROR', '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ API health endpoint
      const apiHealthResponse = await fetch(`${this.currentUrl}/api/v2/health`);
      const apiHealthData = await apiHealthResponse.json();
      
      if (apiHealthResponse.status === 200 && apiHealthData.status === 'ok') {
        this.log('SERVER', 'API health endpoint /api/v2/health', 'SUCCESS');
      } else {
        this.log('SERVER', 'API health endpoint /api/v2/health', 'ERROR');
      }
      
    } catch (error) {
      this.log('SERVER', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'ERROR', error.message);
    }
  }

  /**
   * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook Telegram
   */
  async testTelegramWebhook() {
    console.log('\nü§ñ 2. –ü–†–û–í–ï–†–ö–ê TELEGRAM WEBHOOK\n');
    
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
      const webhookResponse = await fetch(`https://api.telegram.org/bot${this.botToken}/getWebhookInfo`);
      const webhookData = await webhookResponse.json();
      
      if (webhookData.ok) {
        const webhookUrl = webhookData.result.url;
        const expectedUrl = `${this.currentUrl}/webhook`;
        
        if (webhookUrl === expectedUrl) {
          this.log('WEBHOOK', 'URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', 'SUCCESS', webhookUrl);
        } else if (webhookUrl === '') {
          this.log('WEBHOOK', 'Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling —Ä–µ–∂–∏–º)', 'WARNING', '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook');
        } else {
          this.log('WEBHOOK', 'URL –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', 'ERROR', { 
            current: webhookUrl, 
            expected: expectedUrl 
          });
        }
        
        this.log('WEBHOOK', 'Pending updates', 'SUCCESS', webhookData.result.pending_update_count);
      } else {
        this.log('WEBHOOK', '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'ERROR', webhookData.description);
      }
      
    } catch (error) {
      this.log('WEBHOOK', '–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook', 'ERROR', error.message);
    }
  }

  /**
   * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  testEnvironmentVariables() {
    console.log('\nüîß 3. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø\n');
    
    const requiredVars = [
      'SUPABASE_URL',
      'SUPABASE_KEY', 
      'TELEGRAM_BOT_TOKEN',
      'JWT_SECRET',
      'NODE_ENV',
      'PORT'
    ];
    
    const obsoleteVars = [
      'DATABASE_URL',
      'PGHOST',
      'PGUSER',
      'PGPASSWORD',
      'PGDATABASE',
      'PGPORT',
      'NEON_URL'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (const varName of requiredVars) {
      const value = process.env[varName];
      if (value) {
        this.log('ENV', `${varName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'SUCCESS', value.substring(0, 20) + '...');
      } else {
        this.log('ENV', `${varName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'ERROR');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for (const varName of obsoleteVars) {
      const value = process.env[varName];
      if (value) {
        this.log('ENV', `${varName} –Ω–∞–π–¥–µ–Ω (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)`, 'WARNING', '–¢—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ');
      } else {
        this.log('ENV', `${varName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'SUCCESS', '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–µ–Ω');
      }
    }
  }

  /**
   * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebApp –≤ Telegram
   */
  async testTelegramWebApp() {
    console.log('\nüì± 4. –ü–†–û–í–ï–†–ö–ê TELEGRAM WEBAPP\n');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const mainPageResponse = await fetch(this.currentUrl);
      const htmlContent = await mainPageResponse.text();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Telegram WebApp —Å–∫—Ä–∏–ø—Ç–∞
      if (htmlContent.includes('https://telegram.org/js/telegram-web-app.js')) {
        this.log('WEBAPP', 'Telegram WebApp —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω', 'SUCCESS');
      } else {
        this.log('WEBAPP', 'Telegram WebApp —Å–∫—Ä–∏–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'ERROR');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ meta —Ç–µ–≥–æ–≤ –¥–ª—è Telegram
      if (htmlContent.includes('meta name="telegram-web-app-ready"')) {
        this.log('WEBAPP', 'Meta —Ç–µ–≥ telegram-web-app-ready', 'SUCCESS');
      } else {
        this.log('WEBAPP', 'Meta —Ç–µ–≥ telegram-web-app-ready –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'WARNING');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
      if (htmlContent.includes('user-scalable=no')) {
        this.log('WEBAPP', 'Viewport –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ', 'SUCCESS');
      } else {
        this.log('WEBAPP', 'Viewport –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'WARNING');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json
      if (htmlContent.includes('rel="manifest"')) {
        this.log('WEBAPP', 'Manifest.json –ø–æ–¥–∫–ª—é—á–µ–Ω', 'SUCCESS');
      } else {
        this.log('WEBAPP', 'Manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω', 'WARNING');
      }
      
    } catch (error) {
      this.log('WEBAPP', '–ü—Ä–æ–≤–µ—Ä–∫–∞ WebApp', 'ERROR', error.message);
    }
  }

  /**
   * 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async testDatabaseConnection() {
    console.log('\nüóÑÔ∏è 5. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');
    
    try {
      // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Supabase
      const { data, error } = await this.supabase
        .from('users')
        .select('*')
        .limit(1);
        
      if (!error) {
        this.log('DATABASE', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', 'SUCCESS', `–ü–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      } else {
        this.log('DATABASE', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', 'ERROR', error.message);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
      const tables = ['users', 'transactions', 'referrals', 'farming_sessions'];
      for (const table of tables) {
        try {
          const { data: tableData, error: tableError } = await this.supabase
            .from(table)
            .select('*')
            .limit(1);
            
          if (!tableError) {
            this.log('DATABASE', `–¢–∞–±–ª–∏—Ü–∞ ${table}`, 'SUCCESS', `${tableData?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
          } else {
            this.log('DATABASE', `–¢–∞–±–ª–∏—Ü–∞ ${table}`, 'ERROR', tableError.message);
          }
        } catch (err) {
          this.log('DATABASE', `–¢–∞–±–ª–∏—Ü–∞ ${table}`, 'ERROR', err.message);
        }
      }
      
    } catch (error) {
      this.log('DATABASE', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'ERROR', error.message);
    }
  }

  /**
   * 6. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async testUserRegistration() {
    console.log('\nüë§ 6. –¢–ï–°–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n');
    
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
      const registrationData = {
        telegram_id: `test_${Date.now()}`,
        username: 'deploy_test_user',
        first_name: 'Deploy Test'
      };
      
      const registrationResponse = await fetch(`${this.currentUrl}/api/v2/register/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(registrationData)
      });
      
      if (registrationResponse.status === 200) {
        const userData = await registrationResponse.json();
        this.log('REGISTRATION', 'API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω', 'SUCCESS', {
          user_id: userData.user?.id,
          ref_code: userData.user?.ref_code
        });
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userData.user?.id) {
          await this.supabase
            .from('users')
            .delete()
            .eq('id', userData.user.id);
          this.log('REGISTRATION', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', 'SUCCESS');
        }
      } else {
        this.log('REGISTRATION', 'API endpoint', 'ERROR', `HTTP ${registrationResponse.status}`);
      }
      
    } catch (error) {
      this.log('REGISTRATION', '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'ERROR', error.message);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateDeployReport() {
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ï–ü–õ–û–Ø\n');
    
    const totalTests = this.results.length;
    const successful = this.results.filter(r => r.status === 'SUCCESS').length;
    const warnings = this.results.filter(r => r.status === 'WARNING').length;
    const errors = this.results.filter(r => r.status === 'ERROR').length;
    
    const deployStatus = {
      server_running: this.results.some(r => r.category === 'SERVER' && r.status === 'SUCCESS'),
      webhook_configured: this.results.some(r => r.category === 'WEBHOOK' && r.status === 'SUCCESS'),
      webapp_ready: this.results.some(r => r.category === 'WEBAPP' && r.status === 'SUCCESS'),
      database_connected: this.results.some(r => r.category === 'DATABASE' && r.status === 'SUCCESS'),
      registration_working: this.results.some(r => r.category === 'REGISTRATION' && r.status === 'SUCCESS')
    };
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successful}/${totalTests} (${Math.round((successful / totalTests) * 100)}%)`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üåê Replit URL: ${this.currentUrl}`);
    
    console.log('\n–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    Object.entries(deployStatus).forEach(([component, status]) => {
      const icon = status ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${component}: ${status ? '–≥–æ—Ç–æ–≤' : '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);
    });
    
    return {
      summary: { totalTests, successful, warnings, errors },
      deployStatus,
      currentUrl: this.currentUrl,
      results: this.results
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runFullDeployTest() {
    try {
      await this.testProductionServer();
      await this.testTelegramWebhook();
      this.testEnvironmentVariables();
      await this.testTelegramWebApp();
      await this.testDatabaseConnection();
      await this.testUserRegistration();
      
      const report = this.generateDeployReport();
      
      console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n');
      
      if (report.summary.successful >= report.summary.totalTests * 0.8) {
        console.log('üü¢ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –î–ï–ü–õ–û–Æ');
        console.log('üì± Telegram Mini App –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω');
      } else if (report.summary.successful >= report.summary.totalTests * 0.6) {
        console.log('üü° –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–ê - –¢—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      } else {
        console.log('üî¥ –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò - –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
      }
      
      console.log(`\nüîó WebApp URL –¥–ª—è Telegram Bot: ${this.currentUrl}`);
      
      return report;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–ø–ª–æ—è:', error.message);
      throw error;
    }
  }
}

async function main() {
  try {
    const test = new TelegramDeployTest();
    const report = await test.runFullDeployTest();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const fs = await import('fs');
    fs.writeFileSync('TELEGRAM_DEPLOY_REPORT.json', JSON.stringify(report, null, 2));
    
    process.exit(report.summary.successful >= report.summary.totalTests * 0.8 ? 0 : 1);
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();