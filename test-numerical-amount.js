import fetch from 'node-fetch';

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º amount
 */
async function testFarmingDepositWithNumberAmount() {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ production URL
    const urls = [
      'https://uni-farm-connect-x-lukyanenkolawfa.replit.appsisko.replit.dev',
      'https://uni-farm-connect-2-misterxuniverse.replit.app'
    ];
    
    for (const baseUrl of urls) {
      console.log(`\n----- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${baseUrl} —Å —á–∏—Å–ª–æ–≤—ã–º amount -----`);
      const endpoint = '/api/uni-farming/deposit';
      
      // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å amount –∫–∞–∫ —á–∏—Å–ª–æ–º
      const requestBody = {
        amount: 5, // –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ —Å—Ç—Ä–æ–∫–∞!
        user_id: 1
      };
      
      console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody));
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(`${baseUrl}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });
      
      console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
      
      for (const [key, value] of response.headers.entries()) {
        console.log(`  ${key}: ${value}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      const responseText = await response.text();
      console.log('\n–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç):', responseText);
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const jsonResponse = JSON.parse(responseText);
        console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (JSON):', JSON.stringify(jsonResponse, null, 2));
        console.log('‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π!');
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:');
        console.log('–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', responseText.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        
        if (responseText.length === 0) {
          console.error('  - –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        } else {
          console.log('  - –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', JSON.stringify(responseText.substring(0, 100)));
          console.log('  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', JSON.stringify(responseText.substring(responseText.length - 100)));
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ HTML –≤ –æ—Ç–≤–µ—Ç–µ
          if (responseText.includes('<html') || responseText.includes('<!DOCTYPE')) {
            console.error('  - –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML –≤–º–µ—Å—Ç–æ JSON');
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ BOM
          const hasInvisibleChars = /[\u0000-\u001F\u007F-\u009F\uFEFF]/.test(responseText);
          if (hasInvisibleChars) {
            console.error('  - –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ BOM');
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
          if (responseText.includes('}{')) {
            console.error('  - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ JSON –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ');
          }
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFarmingDepositWithNumberAmount();