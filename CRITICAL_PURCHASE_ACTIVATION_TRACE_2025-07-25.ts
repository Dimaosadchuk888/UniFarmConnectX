/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–û–ö–£–ü–û–ö –ò –ê–ö–¢–ò–í–ê–¶–ò–ò - 25 –∏—é–ª—è 2025
 * –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ BOOST_PURCHASE –∏ –∞–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function criticalPurchaseActivationTrace() {
    console.log('\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–û–ö–£–ü–û–ö –ò –ê–ö–¢–ò–í–ê–¶–ò–ò');
    console.log('=' .repeat(70));
    
    try {
        // –®–ê–ì 1: –ü–æ–∏—Å–∫ –†–ï–ê–õ–¨–ù–´–• –ø–æ–∫—É–ø–æ–∫ BOOST_PURCHASE
        console.log('\nüìä –®–ê–ì 1: –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –ü–û–ö–£–ü–û–ö BOOST_PURCHASE');
        console.log('-' .repeat(50));
        
        const { data: boostPurchases, error: purchaseError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .order('created_at', { ascending: false })
            .limit(20);
            
        if (purchaseError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BOOST_PURCHASE:', purchaseError);
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostPurchases?.length || 0} –ø–æ–∫—É–ø–æ–∫ BOOST_PURCHASE`);
            
            if (boostPurchases && boostPurchases.length > 0) {
                console.log('\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ô –ü–û–ö–£–ü–ö–ò:');
                
                for (const purchase of boostPurchases) {
                    console.log(`\nüõí –ü–û–ö–£–ü–ö–ê ${purchase.id}:`);
                    console.log(`   üë§ User ID: ${purchase.user_id}`);
                    console.log(`   üí∞ –°—É–º–º–∞: ${purchase.amount} ${purchase.currency}`);
                    console.log(`   üìÖ –í—Ä–µ–º—è: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
                    console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
                    console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${purchase.status}`);
                    
                    if (purchase.metadata) {
                        console.log(`   üìã Metadata:`, purchase.metadata);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –≤ ton_farming_data
                    const { data: farmingRecord, error: farmingError } = await supabase
                        .from('ton_farming_data')
                        .select('*')
                        .eq('user_id', purchase.user_id.toString())
                        .single();
                        
                    if (farmingError) {
                        console.log(`   ‚ùå FARMING –ó–ê–ü–ò–°–¨ –û–¢–°–£–¢–°–¢–í–£–ï–¢!`);
                        console.log(`      –û—à–∏–±–∫–∞: ${farmingError.message}`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ users —Ç–∞–±–ª–∏—Ü–µ
                        const { data: userRecord, error: userError } = await supabase
                            .from('users')
                            .select('id, ton_boost_package, ton_boost_rate, balance_ton, created_at')
                            .eq('id', purchase.user_id)
                            .single();
                            
                        if (userError) {
                            console.log(`      ‚ùå USER –ó–ê–ü–ò–°–¨ –¢–û–ñ–ï –ù–ï –ù–ê–ô–î–ï–ù–ê: ${userError.message}`);
                        } else {
                            console.log(`      ‚ÑπÔ∏è USER –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:`);
                            console.log(`         TON Boost Package: ${userRecord.ton_boost_package}`);
                            console.log(`         TON Boost Rate: ${userRecord.ton_boost_rate}`);
                            console.log(`         Balance TON: ${userRecord.balance_ton}`);
                            console.log(`         Created: ${new Date(userRecord.created_at).toLocaleString('ru-RU')}`);
                            
                            if (userRecord.ton_boost_package > 0) {
                                console.log(`      üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: USER –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π boost, –Ω–æ –ù–ï–¢ farming –∑–∞–ø–∏—Å–∏!`);
                            } else {
                                console.log(`      ‚ö†Ô∏è User –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ boost –ø–∞–∫–µ—Ç–∞`);
                            }
                        }
                    } else {
                        console.log(`   ‚úÖ FARMING –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:`);
                        console.log(`      Balance: ${farmingRecord.farming_balance} TON`);
                        console.log(`      Rate: ${farmingRecord.farming_rate}`);
                        console.log(`      Package ID: ${farmingRecord.boost_package_id}`);
                        console.log(`      Created: ${new Date(farmingRecord.created_at).toLocaleString('ru-RU')}`);
                        
                        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è farming –∑–∞–ø–∏—Å–∏
                        const purchaseTime = new Date(purchase.created_at).getTime();
                        const farmingTime = new Date(farmingRecord.created_at).getTime();
                        const timeDiffMinutes = Math.abs(purchaseTime - farmingTime) / 1000 / 60;
                        
                        console.log(`      ‚è±Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiffMinutes.toFixed(2)} –º–∏–Ω—É—Ç`);
                        
                        if (timeDiffMinutes > 5) {
                            console.log(`      ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –†–ê–ó–ù–ò–¶–ê - –≤–æ–∑–º–æ–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                        } else {
                            console.log(`      ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–∫—É–ø–∫–æ–π`);
                        }
                    }
                }
            } else {
                console.log('‚ùå –ù–ï–¢ –ü–û–ö–£–ü–û–ö BOOST_PURCHASE - –°–ò–°–¢–ï–ú–ê –ù–ï –°–û–ó–î–ê–ï–¢ –ü–û–ö–£–ü–ö–ò!');
            }
        }
        
        // –®–ê–ì 2: –ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        console.log('\nüìä –®–ê–ì 2: –ü–û–ò–°–ö –ü–û–ö–£–ü–û–ö –í –î–†–£–ì–ò–• –¢–ò–ü–ê–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
        console.log('-' .repeat(50));
        
        const { data: allTransactions, error: allError } = await supabase
            .from('transactions')
            .select('user_id, type, amount, description, status, created_at, metadata')
            .ilike('description', '%TON Boost%')
            .order('created_at', { ascending: false })
            .limit(10);
            
        if (allError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError);
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "TON Boost" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`);
            
            for (const transaction of allTransactions || []) {
                console.log(`\nüìÑ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø:`);
                console.log(`   Type: ${transaction.type}`);
                console.log(`   User: ${transaction.user_id}`);
                console.log(`   Amount: ${transaction.amount}`);
                console.log(`   Description: ${transaction.description}`);
                console.log(`   Time: ${new Date(transaction.created_at).toLocaleString('ru-RU')}`);
                
                if (transaction.metadata) {
                    console.log(`   Metadata:`, transaction.metadata);
                }
            }
        }
        
        // –®–ê–ì 3: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ boost –Ω–æ —Å–≤–µ–∂–∏–º–∏ created_at
        console.log('\nüìä –®–ê–ì 3: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ù–ï–î–ê–í–ù–ò–ú–ò –ê–ö–¢–ò–í–ê–¶–ò–Ø–ú–ò');
        console.log('-' .repeat(50));
        
        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
        
        const { data: recentActiveUsers, error: recentError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_rate, balance_ton, created_at')
            .gt('ton_boost_package', 0)
            .gte('created_at', oneDayAgo)
            .order('created_at', { ascending: false });
            
        if (recentError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', recentError);
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentActiveUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º boost –∑–∞ 24 —á–∞—Å–∞`);
            
            for (const user of recentActiveUsers || []) {
                console.log(`\nüë§ USER ${user.id}:`);
                console.log(`   TON Boost Package: ${user.ton_boost_package}`);
                console.log(`   TON Boost Rate: ${user.ton_boost_rate}`);
                console.log(`   Balance TON: ${user.balance_ton}`);
                console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º farming –∑–∞–ø–∏—Å—å
                const { data: userFarmingRecord } = await supabase
                    .from('ton_farming_data')
                    .select('farming_balance, created_at, boost_package_id')
                    .eq('user_id', user.id.toString())
                    .single();
                    
                if (userFarmingRecord) {
                    console.log(`   ‚úÖ Farming –∑–∞–ø–∏—Å—å –ï–°–¢–¨:`);
                    console.log(`      Balance: ${userFarmingRecord.farming_balance} TON`);
                    console.log(`      Package: ${userFarmingRecord.boost_package_id}`);
                    console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${new Date(userFarmingRecord.created_at).toLocaleString('ru-RU')}`);
                } else {
                    console.log(`   ‚ùå Farming –∑–∞–ø–∏—Å—å –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –ù–û–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!`);
                    
                    // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const { data: userTransactions } = await supabase
                        .from('transactions')
                        .select('type, amount, description, created_at')
                        .eq('user_id', user.id)
                        .order('created_at', { ascending: false })
                        .limit(5);
                        
                    if (userTransactions && userTransactions.length > 0) {
                        console.log(`   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
                        for (const tx of userTransactions) {
                            console.log(`      - ${tx.type}: ${tx.amount} (${tx.description})`);
                        }
                    } else {
                        console.log(`   ‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞`);
                    }
                }
            }
        }
        
        // –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ boost_packages —Ç–∞–±–ª–∏—Ü—ã
        console.log('\nüìä –®–ê–ì 4: –ê–ù–ê–õ–ò–ó BOOST PACKAGES');
        console.log('-' .repeat(50));
        
        const { data: boostPackagesData, error: packagesError } = await supabase
            .from('boost_packages')
            .select('*')
            .order('id', { ascending: true });
            
        if (packagesError) {
            console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ boost_packages –ù–ï –î–û–°–¢–£–ü–ù–ê: ${packagesError.message}`);
            console.log('üö® –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–†–ò–ß–ò–ù–û–ô –ü–†–û–ë–õ–ï–ú –ê–ö–¢–ò–í–ê–¶–ò–ò!');
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostPackagesData?.length || 0} boost –ø–∞–∫–µ—Ç–æ–≤`);
            for (const pkg of boostPackagesData || []) {
                console.log(`   üì¶ –ü–∞–∫–µ—Ç ${pkg.id}: ${pkg.name}`);
                console.log(`      Min Amount: ${pkg.min_amount} TON`);
                console.log(`      Daily Rate: ${pkg.daily_rate}`);
                console.log(`      Duration: ${pkg.duration_days} –¥–Ω–µ–π`);
            }
        }

        console.log('\nüìà –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:');
        console.log('=' .repeat(70));
        
        if (!boostPurchases || boostPurchases.length === 0) {
            console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê #1: –ù–ï–¢ –ü–û–ö–£–ü–û–ö BOOST_PURCHASE');
            console.log('   - –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫');
            console.log('   - purchaseWithInternalWallet() –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç BOOST_PURCHASE');
            console.log('   - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏');
        }
        
        if (packagesError) {
            console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê #2: –¢–ê–ë–õ–ò–¶–ê BOOST_PACKAGES –ù–ï –î–û–°–¢–£–ü–ù–ê');
            console.log('   - TonFarmingRepository –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞');
            console.log('   - activateBoost() –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞');
        }
        
        if (recentActiveUsers && recentActiveUsers.length > 0) {
            const missedCount = recentActiveUsers.filter(u => !u.farming_balance).length;
            if (missedCount > 0) {
                console.log(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê #3: ${missedCount} –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ë–ï–ó FARMING –ó–ê–ü–ò–°–ï–ô`);
                console.log('   - –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫');
                console.log('   - TonFarmingRepository.activateBoost() –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏');
            }
        }
        
        console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('1. üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å boost_packages —Ç–∞–±–ª–∏—Ü—ã');
        console.log('2. üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        console.log('3. üîß –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ TonFarmingRepository.activateBoost()');
        console.log('4. üîß –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
criticalPurchaseActivationTrace().then(() => {
    console.log('\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});