/**
 * –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * BOC: te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKABZpFBvrrFJAWiokVZF0jaVpS4WogHhGrlhtGT3Nx2c+u4VTiWDwFKqA5bFP1f+FcnGm3mCx5TtEYlGNh1ccWBFNTRi7RHrhaAAAG8AAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKh3NZQAAAAAAAAAAAAAAAAAABGzPzj
 * –í—Ä–µ–º—è: 03.08.2025, 12:50
 */

import { supabase } from './core/supabase';

async function investigateDuplicateBoc() {
  console.log('\n=== –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n');

  const targetBoc = 'te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKABZpFBvrrFJAWiokVZF0jaVpS4WogHhGrlhtGT3Nx2c+u4VTiWDwFKqA5bFP1f+FcnGm3mCx5TtEYlGNh1ccWBFNTRi7RHrhaAAAG8AAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKh3NZQAAAAAAAAAAAAAAAAAABGzPzj';
  const userId = 184;

  try {
    console.log(`üîç –ò—â–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å BOC: ${targetBoc.substring(0, 50)}...`);

    // 1. –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π BOC
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –¢–û–ß–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô BOC:');
    const { data: exactMatches, error: exactError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, amount_ton, currency, description, tx_hash_unique, metadata, created_at')
      .eq('user_id', userId)
      .eq('tx_hash_unique', targetBoc)
      .order('created_at', { ascending: false });

    if (exactError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', exactError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${exactMatches?.length || 0} —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
      exactMatches?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, –í—Ä–µ–º—è: ${tx.created_at}, Amount: ${tx.amount_ton}, Description: ${tx.description}`);
        console.log(`      tx_hash_unique: ${tx.tx_hash_unique?.substring(0, 50)}...`);
        console.log(`      metadata: ${JSON.stringify(tx.metadata)}`);
      });
    }

    // 2. –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É BOC (—Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏)
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–û –ü–ê–¢–¢–ï–†–ù–£ BOC (—Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏):');
    const { data: patternMatches, error: patternError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, amount_ton, currency, description, tx_hash_unique, metadata, created_at')
      .eq('user_id', userId)
      .like('tx_hash_unique', `${targetBoc}%`)
      .order('created_at', { ascending: false });

    if (patternError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É:', patternError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${patternMatches?.length || 0} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É`);
      patternMatches?.forEach((tx, index) => {
        const suffix = tx.tx_hash_unique?.replace(targetBoc, '');
        console.log(`  ${index + 1}. ID: ${tx.id}, –í—Ä–µ–º—è: ${tx.created_at}, –°—É—Ñ—Ñ–∏–∫—Å: "${suffix}"`);
        console.log(`      tx_hash_unique: ${tx.tx_hash_unique}`);
      });
    }

    // 3. –ü–æ–∏—Å–∫ –≤ metadata
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –í METADATA:');
    const { data: metadataMatches, error: metadataError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, amount_ton, currency, description, tx_hash_unique, metadata, created_at')
      .eq('user_id', userId)
      .contains('metadata', { tx_hash: targetBoc })
      .order('created_at', { ascending: false });

    if (metadataError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ metadata:', metadataError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${metadataMatches?.length || 0} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ metadata`);
      metadataMatches?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, –í—Ä–µ–º—è: ${tx.created_at}`);
        console.log(`      metadata.tx_hash: ${tx.metadata?.tx_hash}`);
        console.log(`      tx_hash_unique: ${tx.tx_hash_unique}`);
      });
    }

    // 4. –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –ü–û –û–ü–ò–°–ê–ù–ò–Æ (—Å–æ–¥–µ—Ä–∂–∏—Ç BOC):');
    const { data: descriptionMatches, error: descError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, amount_ton, currency, description, tx_hash_unique, metadata, created_at')
      .eq('user_id', userId)
      .like('description', `%${targetBoc.substring(0, 30)}%`)
      .order('created_at', { ascending: false });

    if (descError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:', descError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${descriptionMatches?.length || 0} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`);
      descriptionMatches?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, –í—Ä–µ–º—è: ${tx.created_at}`);
        console.log(`      description: ${tx.description}`);
      });
    }

    // 5. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –¥–µ–Ω—å 03.08.2025
    console.log('\n5Ô∏è‚É£ –í–°–ï TON –î–ï–ü–û–ó–ò–¢–´ 03.08.2025:');
    const { data: dayTransactions, error: dayError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, amount_ton, currency, description, tx_hash_unique, created_at')
      .eq('user_id', userId)
      .gte('created_at', '2025-08-03T00:00:00')
      .lt('created_at', '2025-08-04T00:00:00')
      .in('type', ['TON_DEPOSIT', 'DEPOSIT'])
      .order('created_at', { ascending: false });

    if (dayError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', dayError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${dayTransactions?.length || 0} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å`);
      dayTransactions?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, –í—Ä–µ–º—è: ${tx.created_at}, Amount: ${tx.amount_ton}`);
        console.log(`      Type: ${tx.type}, Description: ${tx.description}`);
        console.log(`      tx_hash_unique: ${tx.tx_hash_unique?.substring(0, 50)}...`);
      });
    }

    // 6. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∫—Ä—É–≥ 12:50
    console.log('\n6Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –í–û–ö–†–£–ì 12:50:');
    const { data: timeAnalysis, error: timeError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, amount_ton, currency, description, tx_hash_unique, created_at')
      .eq('user_id', userId)
      .gte('created_at', '2025-08-03T12:48:00')
      .lt('created_at', '2025-08-03T12:52:00')
      .order('created_at', { ascending: false });

    if (timeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', timeError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${timeAnalysis?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 12:48-12:52`);
      timeAnalysis?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, –í—Ä–µ–º—è: ${tx.created_at}, Type: ${tx.type}`);
        console.log(`      Amount: ${tx.amount_ton}, tx_hash: ${tx.tx_hash_unique?.substring(0, 30)}...`);
      });
    }

    console.log('\nüîç –ê–ù–ê–õ–ò–ó –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –ª–æ–≥–∏–∫–∞ extractBaseBoc()');
    console.log('2. –û–ø—Ä–µ–¥–µ–ª–∏–º, —Å–æ–∑–¥–∞—é—Ç—Å—è –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ —Ñ–∏–∫—Å–∞');
    console.log('3. –í—ã—è–≤–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (frontend, backend, –∏–ª–∏ blockchain)');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

investigateDuplicateBoc().then(() => {
  console.log('\nüèÅ –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});