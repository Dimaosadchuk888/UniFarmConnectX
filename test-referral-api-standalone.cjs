/**
 * STANDALONE –¢–ï–°–¢ API –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ ReferralService
 */

require('dotenv').config();

const express = require('express');
const cors = require('cors');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ReferralService –Ω–∞–ø—Ä—è–º—É—é
const { createClient } = require('@supabase/supabase-js');

const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –†–µ–ø–ª–∏—Ü–∏—Ä—É–µ–º ReferralService.getRealReferralStats —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
async function getRealReferralStats(userId) {
  try {
    console.log('[TEST API] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è userId:', userId);
    
    // 1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('id', userId)
      .single();
      
    if (userError || !user) {
      console.log('[TEST API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('[TEST API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    const { data: referralTransactions, error: refError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_uni, amount_ton, currency, description, created_at')
      .eq('user_id', userId)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false });
      
    console.log('[TEST API] –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', referralTransactions?.length || 0);
    
    if (refError) {
      console.log('[TEST API] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', refError);
      throw refError;
    }
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('id, username, first_name, referred_by')
      .order('id', { ascending: true });
      
    if (usersError) {
      console.log('[TEST API] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      throw usersError;
    }
    
    console.log('[TEST API] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allUsers?.length || 0);
    
    // 4. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º
    const levelIncome = {};
    const levelCounts = {};
    
    if (referralTransactions && referralTransactions.length > 0) {
      referralTransactions.forEach(tx => {
        const levelMatch = tx.description?.match(/L(\d+)/);
        if (levelMatch) {
          const level = parseInt(levelMatch[1]);
          if (!levelIncome[level]) {
            levelIncome[level] = { uni: 0, ton: 0 };
          }
          if (!levelCounts[level]) {
            levelCounts[level] = 0;
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          if (tx.amount_uni && parseFloat(tx.amount_uni) > 0) {
            levelIncome[level].uni += parseFloat(tx.amount_uni);
          }
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏  
          if (tx.amount_ton && parseFloat(tx.amount_ton) > 0) {
            levelIncome[level].ton += parseFloat(tx.amount_ton);
          }
          
          levelCounts[level]++;
        }
      });
    }
    
    // 5. –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
    let totalUniEarned = 0;
    let totalTonEarned = 0;
    let totalReferrals = 0;
    
    Object.values(levelIncome).forEach(income => {
      totalUniEarned += income.uni;
      totalTonEarned += income.ton;
    });
    
    Object.values(levelCounts).forEach(count => {
      totalReferrals += count;
    });
    
    // 6. –ü–æ–∏—Å–∫ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const { data: directReferrals } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('referred_by', userId);
      
    // 7. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const result = {
      user_id: user.id,
      username: user.username,
      ref_code: user.ref_code,
      total_referrals: totalReferrals,
      total_uni_earned: totalUniEarned,
      total_ton_earned: totalTonEarned,
      direct_referrals_count: directReferrals?.length || 0,
      level_income: levelIncome,
      level_counts: levelCounts,
      transactions_found: referralTransactions?.length || 0,
      direct_referrals: directReferrals || []
    };
    
    console.log('[TEST API] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      totalTransactions: result.transactions_found,
      totalUniEarned: result.total_uni_earned.toFixed(6),
      totalTonEarned: result.total_ton_earned.toFixed(6),
      levelsFound: Object.keys(levelIncome).length,
      directReferrals: result.direct_referrals_count
    });
    
    return result;
    
  } catch (error) {
    console.error('[TEST API] –û—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// API endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/test-referral-stats/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (!userId || isNaN(userId)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π userId'
      });
    }
    
    const stats = await getRealReferralStats(userId);
    
    res.json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    console.error('[TEST API ERROR]:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
      details: error.message
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìã –¢–µ—Å—Ç endpoint: http://localhost:${PORT}/test-referral-stats/48`);
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
});