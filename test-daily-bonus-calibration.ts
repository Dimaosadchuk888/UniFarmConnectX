/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è
 */

import { supabase } from './core/supabase';

async function testDailyBonusCalibration() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–õ–ò–ë–†–û–í–ö–ò –ï–ñ–ï–î–ù–ï–í–ù–´–• –ë–û–ù–£–°–û–í');
  console.log('=' .repeat(60));
  
  const testUserId = 184;
  
  console.log('\nüìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π —Å—É–º–º—ã —á–µ—Ä–µ–∑ API');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ streak –¥–Ω–∏
  const testStreaks = [0, 1, 2, 3, 5, 10];
  
  for (const streak of testStreaks) {
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º streak –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
    const { error: updateError } = await supabase
      .from('users')
      .update({ checkin_streak: streak })
      .eq('id', testUserId);
    
    if (updateError) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak ${streak}:`, updateError.message);
      continue;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç
    try {
      const response = await fetch(`http://localhost:3000/api/v2/daily-bonus/status?user_id=${testUserId}`);
      const data = await response.json();
      
      if (data.success) {
        console.log(`Streak ${streak}: API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${data.data.bonusAmount} UNI`);
      } else {
        console.error(`Streak ${streak}: –û—à–∏–±–∫–∞ API -`, data.error);
      }
    } catch (error) {
      console.error(`Streak ${streak}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ -`, error);
    }
    
    await new Promise(resolve => setTimeout(resolve, 200)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
  }
  
  console.log('\nüßÆ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å');
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
  const { DailyBonusService } = await import('./modules/dailyBonus/service');
  const service = new DailyBonusService();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º calculateBonusAmount —á–µ—Ä–µ–∑ getDailyBonusInfo
  for (const streak of testStreaks) {
    // –û–±–Ω–æ–≤–ª—è–µ–º streak
    await supabase
      .from('users')
      .update({ checkin_streak: streak })
      .eq('id', testUserId);
    
    try {
      const bonusInfo = await service.getDailyBonusInfo(testUserId.toString());
      console.log(`Streak ${streak}: Service –Ω–∞—á–∏—Å–ª—è–µ—Ç ${bonusInfo.next_bonus_amount} UNI`);
    } catch (error) {
      console.error(`Streak ${streak}: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ -`, error);
    }
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const finalStreak = 2; // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
  
  await supabase
    .from('users')
    .update({ checkin_streak: finalStreak })
    .eq('id', testUserId);
  
  // API —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const apiResponse = await fetch(`http://localhost:3000/api/v2/daily-bonus/status?user_id=${testUserId}`);
  const apiData = await apiResponse.json();
  const apiAmount = apiData.success ? apiData.data.bonusAmount : 'ERROR';
  
  // Service —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const serviceInfo = await service.getDailyBonusInfo(testUserId.toString());
  const serviceAmount = serviceInfo.next_bonus_amount;
  
  console.log(`\n–°—Ç—Ä–∏–∫ ${finalStreak} –¥–Ω—è:`);
  console.log(`üì± –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: ${apiAmount} UNI`);
  console.log(`üí∞ –°–µ—Ä–≤–∏—Å –Ω–∞—á–∏—Å–ª–∏—Ç: ${serviceAmount} UNI`);
  
  if (apiAmount === parseInt(serviceAmount)) {
    console.log('‚úÖ –ö–ê–õ–ò–ë–†–û–í–ö–ê –£–°–ü–ï–®–ù–ê - —Å—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
  } else {
    console.log('‚ùå –ö–ê–õ–ò–ë–†–û–í–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê - —Å—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('üéä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testDailyBonusCalibration().catch(console.error);