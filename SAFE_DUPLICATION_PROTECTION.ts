/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON BOOST
 * –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –±–µ–∑ —Ä–∏—Å–∫–æ–≤
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
 */

// –ü–†–ò–ú–ï–† –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¥–ª—è modules/boost/service.ts

class BoostService {
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—â–∏—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏
  private uni–ë–æ–Ω—É—Å–ù–∞—á–∏—Å–ª–µ–Ω = new Set<string>();
  private farming–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω = new Set<string>();
  private activationInProgress = new Set<string>();

  /**
   * –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è awardUniBonus - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private async awardUniBonus(userId: string, boostPackage: BoostPackageData): Promise<boolean> {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const timeWindow = Math.floor(Date.now() / 10000) * 10000; // –û–∫–Ω–æ 10 —Å–µ–∫—É–Ω–¥
      const key = `${userId}-${boostPackage.id}-${timeWindow}`;
      
      if (this.uni–ë–æ–Ω—É—Å–ù–∞—á–∏—Å–ª–µ–Ω.has(key)) {
        logger.warn('[BoostService] [–ó–ê–©–ò–¢–ê] UNI –±–æ–Ω—É—Å —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –≤ —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç', { 
          userId, 
          packageId: boostPackage.id,
          timeWindow 
        });
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ª–æ–≥–∏–∫—É
      }
      
      // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      this.uni–ë–æ–Ω—É—Å–ù–∞—á–∏—Å–ª–µ–Ω.add(key);
      
      logger.info('[BoostService] [–ó–ê–©–ò–¢–ê] –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI –±–æ–Ω—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ', {
        userId,
        packageName: boostPackage.name,
        uniBonus: boostPackage.uni_bonus,
        protectionKey: key
      });

      // –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
      const { data: user, error: getUserError } = await supabase
        .from(BOOST_TABLES.USERS)
        .select('balance_uni')
        .eq('id', userId)
        .single();

      if (getUserError) {
        logger.error('[BoostService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è UNI –±–æ–Ω—É—Å–∞:', getUserError);
        this.uni–ë–æ–Ω—É—Å–ù–∞—á–∏—Å–ª–µ–Ω.delete(key); // –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å UNI —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π BalanceManager
      const { balanceManager } = await import('../../core/BalanceManager');
      const result = await balanceManager.addBalance(
        parseInt(userId),
        boostPackage.uni_bonus,
        0,
        'BoostService.uni_bonus'
      );

      if (!result.success) {
        logger.error('[BoostService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ UNI:', result.error);
        this.uni–ë–æ–Ω—É—Å–ù–∞—á–∏—Å–ª–µ–Ω.delete(key); // –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return false;
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é UNI –±–æ–Ω—É—Å–∞
      const { error: transactionError } = await supabase
        .from(BOOST_TABLES.TRANSACTIONS)
        .insert({
          user_id: parseInt(userId),
          type: 'DAILY_BONUS',
          amount: boostPackage.uni_bonus.toString(),
          currency: 'UNI',
          status: 'completed',
          description: `UNI –±–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É TON Boost "${boostPackage.name}" (+${boostPackage.uni_bonus} UNI)`,
          created_at: new Date().toISOString(),
          metadata: {
            protection_key: key,
            original_type: 'UNI_BONUS_TON_BOOST',
            boost_package_id: boostPackage.id
          }
        });

      if (transactionError) {
        logger.error('[BoostService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ UNI –±–æ–Ω—É—Å–∞:', transactionError);
        // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —Ç–∞–∫ –∫–∞–∫ –±–∞–ª–∞–Ω—Å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω
      }

      logger.info('[BoostService] [–ó–ê–©–ò–¢–ê] UNI –±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω —Å –∑–∞—â–∏—Ç–æ–π', {
        userId,
        oldBalance: parseFloat(user.balance_uni || '0'),
        newBalance: result.newBalance || 'unknown',
        bonusAmount: boostPackage.uni_bonus,
        protectionKey: key
      });

      // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞—â–∏—Ç—ã —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.uni–ë–æ–Ω—É—Å–ù–∞—á–∏—Å–ª–µ–Ω.delete(key);
      }, 30000);

      return true;
    } catch (error) {
      logger.error('[BoostService] [–ó–ê–©–ò–¢–ê] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è UNI –±–æ–Ω—É—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π:', error);
      return false;
    }
  }

  /**
   * –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è TonFarmingRepository –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
   */
  private async activateBoostWithProtection(
    userId: string, 
    boostPackage: any, 
    depositAmount: number
  ): Promise<boolean> {
    try {
      const key = `${userId}-${boostPackage.id}`;
      
      if (this.farming–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.has(key)) {
        logger.warn('[BoostService] [–ó–ê–©–ò–¢–ê] TON Farming —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç', { 
          userId, 
          boostId: boostPackage.id 
        });
        return true;
      }
      
      this.farming–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.add(key);

      logger.info('[BoostService] [–ó–ê–©–ò–¢–ê] –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Farming —Ä–∞–∑—Ä–µ—à–µ–Ω–∞', {
        userId,
        boostPackageId: boostPackage.id,
        protectionKey: key
      });

      const { TonFarmingRepository } = await import('./TonFarmingRepository');
      const tonFarmingRepo = new TonFarmingRepository();
      
      const activationSuccess = await tonFarmingRepo.activateBoost(
        userId,
        boostPackage.id,
        boostPackage.daily_rate,
        new Date(Date.now() + boostPackage.duration_days * 24 * 60 * 60 * 1000).toISOString(),
        depositAmount
      );
      
      if (activationSuccess) {
        logger.info('[BoostService] [–ó–ê–©–ò–¢–ê] TON Farming —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –∑–∞—â–∏—Ç–æ–π', {
          userId, 
          boostPackageId: boostPackage.id, 
          dailyRate: boostPackage.daily_rate,
          depositAmount
        });
      } else {
        logger.error('[BoostService] [–ó–ê–©–ò–¢–ê] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Farming —Å –∑–∞—â–∏—Ç–æ–π');
        this.farming–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.delete(key); // –£–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }

      // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞—â–∏—Ç—ã —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.farming–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.delete(key);
      }, 60000);

      return activationSuccess;
    } catch (error) {
      logger.error('[BoostService] [–ó–ê–©–ò–¢–ê] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Farming —Å –∑–∞—â–∏—Ç–æ–π:', error);
      return false;
    }
  }

  /**
   * –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø–æ–ª–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ boost
   */
  private async activateBoost(userId: string, boostId: string): Promise<boolean> {
    const key = `${userId}-${boostId}`;
    
    if (this.activationInProgress.has(key)) {
      logger.warn('[BoostService] [–ó–ê–©–ò–¢–ê] –ê–∫—Ç–∏–≤–∞—Ü–∏—è Boost —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç', { 
        userId, 
        boostId 
      });
      return true;
    }
    
    this.activationInProgress.add(key);

    try {
      // –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê activateBoost –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
      const boostPackage = await this.getBoostPackageById(boostId);
      if (!boostPackage) {
        logger.error('[BoostService] Boost –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', { boostId });
        return false;
      }

      logger.info('[BoostService] [–ó–ê–©–ò–¢–ê] –ê–∫—Ç–∏–≤–∞—Ü–∏—è Boost –ø–∞–∫–µ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π', {
        userId,
        boostId,
        packageName: boostPackage.name,
        durationDays: boostPackage.duration_days
      });

      // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è –≤ users —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      const { error: userError } = await supabase
        .from('users')
        .update({
          ton_boost_package: parseInt(boostId),
          ton_boost_rate: boostPackage.daily_rate
        })
        .eq('id', parseInt(userId));
      
      if (userError) {
        logger.error('[BoostService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è users:', userError);
        return false;
      }
      
      // –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ ton_farming_data —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
      const activationSuccess = await this.activateBoostWithProtection(
        userId,
        boostPackage,
        parseFloat(boostPackage.min_amount.toString())
      );
      
      if (!activationSuccess) {
        logger.error('[BoostService] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π TonFarmingRepository');
        return false;
      }
      
      logger.info('[BoostService] [–ó–ê–©–ò–¢–ê] Boost —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –∑–∞—â–∏—Ç–æ–π', {
        userId,
        boostId,
        packageName: boostPackage.name,
        dailyRate: boostPackage.daily_rate,
        durationDays: boostPackage.duration_days
      });

      return true;

    } catch (error) {
      logger.error('[BoostService] [–ó–ê–©–ò–¢–ê] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Boost —Å –∑–∞—â–∏—Ç–æ–π', {
        userId,
        boostId,
        error: error instanceof Error ? error.message : String(error)
      });
      return false;
    } finally {
      // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞—â–∏—Ç—ã —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.activationInProgress.delete(key);
      }, 60000);
    }
  }
}

export { BoostService };