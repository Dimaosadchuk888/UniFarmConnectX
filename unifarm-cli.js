#!/usr/bin/env node
/**
 * –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UniFarm
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node unifarm-cli.js [–∫–æ–º–∞–Ω–¥–∞]
 * 
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
 * - start: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
 * - status: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
 * - restart: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
 * - monitor: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 * - logs: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
 */

const { spawn, exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  serverUrl: 'http://localhost:3000',
  healthEndpoint: '/api/health',
  logDir: './logs',
  mainLogFile: 'unifarm.log',
  errorLogFile: 'error.log',
  pidFile: '.unifarm.pid',
  lineCount: 50 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
const command = process.argv[2] || 'help';

// –í—ã–≤–æ–¥ –ø–æ–º–æ—â–∏
function showHelp() {
  console.log('\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UniFarm');
  console.log('=====================');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node unifarm-cli.js [–∫–æ–º–∞–Ω–¥–∞]');
  console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
  console.log('  status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞');
  console.log('  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
  console.log('  monitor  - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  console.log('  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (--error –¥–ª—è –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫)');
  console.log('  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
  console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node unifarm-cli.js start');
  console.log('  node unifarm-cli.js logs --error');
  console.log('=====================\n');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
async function checkRunningProcess() {
  try {
    const data = await fs.readFile(config.pidFile, 'utf8');
    const pid = parseInt(data.trim(), 10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    try {
      process.kill(pid, 0); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      return { running: true, pid };
    } catch (err) {
      // –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return { running: false, pid: null };
    }
  } catch (err) {
    // –§–∞–π–ª PID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    return { running: false, pid: null };
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PID
async function savePid(pid) {
  try {
    await fs.writeFile(config.pidFile, pid.toString());
    console.log(`PID ${pid} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${config.pidFile}`);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PID: ${err.message}`);
  }
}

// –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
async function logMessage(message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
  const processInfo = await checkRunningProcess();
  if (processInfo.running) {
    console.log(`–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: ${processInfo.pid})`);
    await checkServerStatus();
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  try {
    await fs.mkdir(config.logDir, { recursive: true });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤: ${err.message}`);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  console.log('–ó–∞–ø—É—Å–∫ UniFarm...');
  
  const serverProcess = spawn('node', ['start-unifarm.js'], {
    detached: true,
    stdio: 'ignore' // –û—Ç–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥/–≤—ã–≤–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
  await savePid(serverProcess.pid);
  
  // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  serverProcess.unref();
  
  console.log(`–°–µ—Ä–≤–µ—Ä UniFarm –∑–∞–ø—É—â–µ–Ω (PID: ${serverProcess.pid})`);
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...');
  
  // –î–∞–¥–∏–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
  setTimeout(() => {
    checkServerStatus();
  }, 3000);
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
  console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  try {
    await fs.mkdir(config.logDir, { recursive: true });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤: ${err.message}`);
  }
  
  const monitorProcess = spawn('node', ['monitor.js'], {
    detached: true,
    stdio: 'ignore' // –û—Ç–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥/–≤—ã–≤–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ
  });
  
  // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  monitorProcess.unref();
  
  console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (PID: ${monitorProcess.pid})`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerStatus() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª PID
    const processInfo = await checkRunningProcess();
    
    if (!processInfo.running) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return false;
    }
    
    console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω (PID: ${processInfo.pid})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–º
    return new Promise((resolve) => {
      http.get(`${config.serverUrl}${config.healthEndpoint}`, (res) => {
        let data = '';
        
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          if (res.statusCode === 200) {
            try {
              const result = JSON.parse(data);
              console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP-–∑–∞–ø—Ä–æ—Å—ã');
              console.log('üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', result);
              resolve(true);
            } catch (err) {
              console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON');
              resolve(false);
            }
          } else {
            console.log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: HTTP ${res.statusCode}`);
            resolve(false);
          }
        });
      }).on('error', (err) => {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${err.message}`);
        console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP-–∑–∞–ø—Ä–æ—Å—ã');
        resolve(false);
      });
    });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${err.message}`);
    return false;
  }
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function restartServer() {
  try {
    const processInfo = await checkRunningProcess();
    
    if (processInfo.running) {
      console.log(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (PID: ${processInfo.pid})...`);
      
      try {
        process.kill(processInfo.pid);
        console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
      }
    } else {
      console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª PID
    try {
      await fs.unlink(config.pidFile);
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    console.log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    await startServer();
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${err.message}`);
  }
}

// –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
async function showLogs(options) {
  const isErrorLog = options.includes('--error');
  const logFile = path.join(config.logDir, isErrorLog ? config.errorLogFile : config.mainLogFile);
  
  try {
    const fileExists = await fs.access(logFile).then(() => true).catch(() => false);
    
    if (!fileExists) {
      console.log(`–õ–æ–≥-—Ñ–∞–π–ª ${logFile} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return;
    }
    
    // –í Unix –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tail, –≤ Windows - –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    if (process.platform === 'win32') {
      // –î–ª—è Windows - —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
      const data = await fs.readFile(logFile, 'utf8');
      const lines = data.split('\n');
      const lastLines = lines.slice(-config.lineCount);
      
      console.log(`=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${lastLines.length} —Å—Ç—Ä–æ–∫ ${isErrorLog ? '–æ—à–∏–±–æ–∫' : '–ª–æ–≥–æ–≤'} ===`);
      console.log(lastLines.join('\n'));
    } else {
      // –î–ª—è Unix - –∏—Å–ø–æ–ª—å–∑—É–µ–º tail
      exec(`tail -n ${config.lineCount} ${logFile}`, (error, stdout, stderr) => {
        if (error) {
          console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
          return;
        }
        
        if (stderr) {
          console.error(`stderr: ${stderr}`);
          return;
        }
        
        console.log(`=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${config.lineCount} —Å—Ç—Ä–æ–∫ ${isErrorLog ? '–æ—à–∏–±–æ–∫' : '–ª–æ–≥–æ–≤'} ===`);
        console.log(stdout);
      });
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async function processCommand() {
  switch (command) {
    case 'start':
      await startServer();
      break;
      
    case 'status':
      await checkServerStatus();
      break;
      
    case 'restart':
      await restartServer();
      break;
      
    case 'monitor':
      await startMonitoring();
      break;
      
    case 'logs':
      await showLogs(process.argv.slice(3));
      break;
      
    case 'help':
    default:
      showHelp();
      break;
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
processCommand().catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
});