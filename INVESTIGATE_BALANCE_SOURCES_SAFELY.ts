#!/usr/bin/env tsx

/**
 * üîç –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í –ë–ê–õ–ê–ù–°–û–í
 * 
 * –¶–µ–ª—å: –Ω–∞–π—Ç–∏ –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É—Ç—Å—è –æ–≥—Ä–æ–º–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * –¢–æ–ª—å–∫–æ READ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
 */

import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function investigateBalanceSources() {
  console.log('üîç –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í –ë–ê–õ–ê–ù–°–û–í');
  console.log('=' .repeat(80));
  
  const report: string[] = [];
  report.push('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í –ë–ê–õ–ê–ù–°–ù–´–• –†–ê–°–•–û–ñ–î–ï–ù–ò–ô');
  report.push('='.repeat(60));
  report.push('–†–ï–ñ–ò–ú: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï, –ù–ò–ö–ê–ö–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô');
  report.push('');
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –¢–ê–ë–õ–ò–¶–´ –° –ë–ê–õ–ê–ù–°–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –±–∞–ª–∞–Ω—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    const { data: tables, error: tablesError } = await supabase
      .rpc('get_table_names');
    
    if (tablesError) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      const possibleTables = [
        'users', 'user_balances', 'wallet_balances', 'farming_balances',
        'ton_farming_data', 'boost_purchases', 'referral_earnings'
      ];
      
      report.push('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ó–í–ï–°–¢–ù–´–• –¢–ê–ë–õ–ò–¶ –° –ë–ê–õ–ê–ù–°–ê–ú–ò:');
      
      for (const tableName of possibleTables) {
        try {
          const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .eq('user_id', '25')
            .limit(1);
            
          if (!error && data) {
            report.push(`   ‚úÖ ${tableName}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è User 25`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            const columns = Object.keys(data[0] || {});
            const balanceColumns = columns.filter(col => 
              col.includes('balance') || col.includes('amount') || col.includes('earning')
            );
            
            if (balanceColumns.length > 0) {
              report.push(`      –ë–∞–ª–∞–Ω—Å–Ω—ã–µ –ø–æ–ª—è: ${balanceColumns.join(', ')}`);
            }
          } else if (error?.code === '42P01') {
            report.push(`   ‚ùå ${tableName}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            report.push(`   ‚ö†Ô∏è  ${tableName}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User 25`);
          }
        } catch (e) {
          report.push(`   ‚ùå ${tableName}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞`);
        }
      }
    }
    report.push('');

    // 2. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ USERS
    console.log('2Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã users...');
    
    const { data: userDetails, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 25)
      .single();

    if (userError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• USERS: ${userError.message}`);
    } else {
      report.push('2Ô∏è‚É£ –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï USER 25 –ò–ó –¢–ê–ë–õ–ò–¶–´ USERS:');
      Object.entries(userDetails).forEach(([key, value]) => {
        if (key.includes('balance') || key.includes('amount') || key.includes('earning')) {
          report.push(`   üí∞ ${key}: ${value}`);
        } else {
          report.push(`   üìù ${key}: ${value}`);
        }
      });
      report.push('');
    }

    // 3. –ü–†–û–í–ï–†–ö–ê TON_FARMING_DATA
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ton_farming_data...');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '25');

    if (farmingError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê ton_farming_data: ${farmingError.message}`);
    } else {
      report.push('3Ô∏è‚É£ –î–ê–ù–ù–´–ï TON_FARMING_DATA –î–õ–Ø USER 25:');
      if (farmingData && farmingData.length > 0) {
        farmingData.forEach((record: any, index: number) => {
          report.push(`   [${index + 1}] Farming Balance: ${record.farming_balance}`);
          report.push(`       Farming Rate: ${record.farming_rate}`);
          report.push(`       Created: ${record.created_at}`);
          report.push(`       Updated: ${record.updated_at}`);
        });
      } else {
        report.push('   ‚ùå –î–ê–ù–ù–´–ï –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      report.push('');
    }

    // 4. –ê–ù–ê–õ–ò–ó –¢–û–ü-10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ë–ê–õ–ê–ù–°–ê–ú
    console.log('4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å–∞–º...');
    
    const { data: topUsers, error: topError } = await supabase
      .from('users')
      .select('id, balance_uni, balance_ton')
      .order('balance_uni', { ascending: false })
      .limit(10);

    if (topError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${topError.message}`);
    } else {
      report.push('4Ô∏è‚É£ –¢–û–ü-10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û UNI –ë–ê–õ–ê–ù–°–£:');
      topUsers?.forEach((user: any, index: number) => {
        report.push(`   [${index + 1}] User ${user.id}: ${user.balance_uni} UNI, ${user.balance_ton} TON`);
        if (user.balance_uni > 1000000) {
          report.push(`       ‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ë–û–õ–¨–®–û–ô –ë–ê–õ–ê–ù–°!`);
        }
      });
      report.push('');
    }

    // 5. –ü–û–ò–°–ö –ö–†–£–ü–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('5Ô∏è‚É£ –ü–æ–∏—Å–∫ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const { data: largeTx, error: largeError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', '25')
      .gt('amount', 1000)
      .order('amount', { ascending: false })
      .limit(20);

    if (largeError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê –ö–†–£–ü–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${largeError.message}`);
    } else {
      report.push('5Ô∏è‚É£ –ö–†–£–ü–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 25 (>1000):');
      if (largeTx && largeTx.length > 0) {
        largeTx.forEach((tx: any, index: number) => {
          report.push(`   [${index + 1}] ${tx.created_at} | ${tx.type} | ${tx.amount} ${tx.currency}`);
          report.push(`       Description: ${tx.description.slice(0, 80)}...`);
          if (tx.amount > 100000) {
            report.push(`       üö® –ö–†–£–ü–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø! –ú–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è`);
          }
        });
      } else {
        report.push('   ‚ùå –ö–†–£–ü–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´');
        report.push('   ‚ö†Ô∏è  –≠–¢–û –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢ –ß–¢–û –ë–ê–õ–ê–ù–° –û–ë–ù–û–í–õ–Ø–õ–°–Ø –ù–ï –ß–ï–†–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò!');
      }
      report.push('');
    }

    // 6. –ü–†–û–í–ï–†–ö–ê –ú–ê–°–°–û–í–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô
    console.log('6Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–∞—Å—Å–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    
    const { data: massUpdates, error: massError } = await supabase
      .from('users')
      .select('id, balance_uni, balance_ton')
      .gt('balance_uni', 1000000)
      .order('balance_uni', { ascending: false });

    if (massError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê –ú–ê–°–°–û–í–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô: ${massError.message}`);
    } else {
      report.push('6Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ë–û–õ–¨–®–ò–ú–ò –ë–ê–õ–ê–ù–°–ê–ú–ò:');
      if (massUpdates && massUpdates.length > 0) {
        report.push(`   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º >1M UNI: ${massUpdates.length}`);
        massUpdates.slice(0, 5).forEach((user: any, index: number) => {
          report.push(`   [${index + 1}] User ${user.id}: ${user.balance_uni} UNI`);
        });
        
        if (massUpdates.length > 1) {
          report.push(`   üö® –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –û–ì–†–û–ú–ù–´–ú–ò –ë–ê–õ–ê–ù–°–ê–ú–ò!`);
          report.push(`   üí° –í–ï–†–û–Ø–¢–ù–û –ë–´–õ–ê –ú–ê–°–°–û–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø/–ú–ò–ì–†–ê–¶–ò–Ø`);
        }
      } else {
        report.push('   ‚úÖ –¢–æ–ª—å–∫–æ User 25 –∏–º–µ–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å');
      }
      report.push('');
    }

    // –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    report.push('üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    report.push('=' .repeat(40));
    
    const hasMultipleAnomalies = massUpdates && massUpdates.length > 1;
    const hasLargeTransactions = largeTx && largeTx.length > 0;
    
    if (hasMultipleAnomalies) {
      report.push('‚ùå –°–ò–°–¢–ï–ú–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏');
      report.push('   –ü–†–ò–ß–ò–ù–ê: –í–µ—Ä–æ—è—Ç–Ω–æ –±—ã–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—è/–º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤');
      report.push('   –†–ï–®–ï–ù–ò–ï: –ù—É–∂–µ–Ω –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } else {
      report.push('‚ö†Ô∏è  –õ–û–ö–ê–õ–¨–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢–æ–ª—å–∫–æ User 25 –∏–º–µ–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å');
      report.push('   –ü–†–ò–ß–ò–ù–ê: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      report.push('   –†–ï–®–ï–ù–ò–ï: –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ');
    }
    
    if (!hasLargeTransactions) {
      report.push('‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ù–ï —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      report.push('   –ò–°–¢–û–ß–ù–ò–ö: –ü—Ä—è–º—ã–µ UPDATE –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É users');
      report.push('   –û–ü–ê–°–ù–û–°–¢–¨: –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –±–∞–ª–∞–Ω—Å—ã —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    report.push('');
    report.push('üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    report.push('1. –°–æ–∑–¥–∞—Ç—å backup —Ç–∞–±–ª–∏—Ü—ã users');
    report.push('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç –Ω–∞ User 25');
    report.push('3. –ï—Å–ª–∏ —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    report.push('4. –í–Ω–µ–¥—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π');
    report.push('5. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –±—É–¥—É—â–µ–º');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportContent = report.join('\n');
    const filename = `BALANCE_SOURCES_INVESTIGATION_${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.md`;
    
    fs.writeFileSync(filename, reportContent, 'utf8');
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
    
    console.log('\n' + reportContent);
    
    return {
      success: true,
      reportFile: filename,
      hasMultipleAnomalies,
      hasLargeTransactions,
      needsMassRecalculation: hasMultipleAnomalies
    };
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
async function main() {
  try {
    const result = await investigateBalanceSources();
    console.log('\n‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û:', error);
    process.exit(1);
  }
}

main();

export { investigateBalanceSources };