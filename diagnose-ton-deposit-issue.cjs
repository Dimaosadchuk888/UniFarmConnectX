/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –ü–†–û–ë–õ–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–û–í
 * –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó: –Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –º–µ–∂–¥—É —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –∏ –Ω–µ–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
 */

const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í - –¢–ó –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
console.log('='.repeat(50));

async function diagnoseTestTransaction() {
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ï–°–¢–û–í–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò 00a1ba3c2614f4d65cc346805feea960');
  
  try {
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    console.log('   üîé –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ user_transactions...');
    const { data: transactions, error: txError } = await supabase
      .from('user_transactions')
      .select('*')
      .or(`description.ilike.%00a1ba3c2614f4d65cc346805feea960%,metadata->>tx_hash.eq.00a1ba3c2614f4d65cc346805feea960`);
    
    if (txError) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ user_transactions:', txError.message);
      return;
    }
    
    console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);
    
    if (transactions && transactions.length > 0) {
      transactions.forEach((tx, i) => {
        console.log(`   üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i + 1}:`);
        console.log(`       ID: ${tx.id}`);
        console.log(`       User ID: ${tx.user_id}`);
        console.log(`       –¢–∏–ø: ${tx.type}`);
        console.log(`       –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`       –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`       –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`       –°–æ–∑–¥–∞–Ω–æ: ${tx.created_at}`);
        console.log(`       –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(tx.metadata, null, 2));
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const userId = transactions[0].user_id;
      await checkUserBalance(userId, '–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TON –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
    } else {
      console.log('   ‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö—ç—à–µ–º –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –ë–î');
      console.log('   ‚ùì –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ processTonDeposit() –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —á–∞—Å—Ç–∏—á–Ω–æ');
    }
  } catch (error) {
    console.error('   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
  }
}

async function checkUserBalance(userId, context = '') {
  console.log(`\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId} ${context}`);
  
  try {
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni, created_at, last_active')
      .eq('id', userId)
      .single();
    
    if (userError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError.message}`);
      return;
    }
    
    if (!user) {
      console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:`);
    console.log(`       TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton || 0}`);
    console.log(`       UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni || 0}`);
    console.log(`       –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
    console.log(`       –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_active || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    return user;
  } catch (error) {
    console.error(`   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
  }
}

async function checkBalanceManager() {
  console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° BALANCEMANAGER');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BalanceManager
    const { BalanceManager } = require('./core/BalanceManager');
    const balanceManager = BalanceManager.getInstance();
    
    console.log('   ‚úÖ BalanceManager —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ addBalance
    if (typeof balanceManager.addBalance === 'function') {
      console.log('   ‚úÖ –ú–µ—Ç–æ–¥ addBalance() –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('   ‚ùå –ú–µ—Ç–æ–¥ addBalance() –ù–ï –î–û–°–¢–£–ü–ï–ù');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ updateUserBalance
    if (typeof balanceManager.updateUserBalance === 'function') {
      console.log('   ‚úÖ –ú–µ—Ç–æ–¥ updateUserBalance() –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('   ‚ùå –ú–µ—Ç–æ–¥ updateUserBalance() –ù–ï –î–û–°–¢–£–ü–ï–ù');
    }
  } catch (error) {
    console.error('   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ BalanceManager:', error.message);
    console.log('   ‚ùì –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: BalanceManager –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ processTonDeposit()');
  }
}

async function checkWalletService() {
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó WALLET SERVICE - –ú–ï–¢–û–î processTonDeposit()');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º wallet service
    const walletService = require('./modules/wallet/service');
    
    console.log('   ‚úÖ WalletService —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
    
    if (typeof walletService.processTonDeposit === 'function') {
      console.log('   ‚úÖ –ú–µ—Ç–æ–¥ processTonDeposit() –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (typeof walletService.default?.processTonDeposit === 'function') {
      console.log('   ‚úÖ –ú–µ—Ç–æ–¥ processTonDeposit() –¥–æ—Å—Ç—É–ø–µ–Ω (default export)');
    } else {
      console.log('   ‚ùå –ú–µ—Ç–æ–¥ processTonDeposit() –ù–ï –ù–ê–ô–î–ï–ù');
    }
  } catch (error) {
    console.error('   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ WalletService:', error.message);
  }
}

async function checkWebSocketIntegration() {
  console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê WEBSOCKET –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å–Ω—ã–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const { BalanceNotificationService } = require('./core/balanceNotificationService');
    
    console.log('   ‚úÖ BalanceNotificationService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
    
    if (typeof BalanceNotificationService.notifyBalanceUpdate === 'function') {
      console.log('   ‚úÖ –ú–µ—Ç–æ–¥ notifyBalanceUpdate() –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('   ‚ùå –ú–µ—Ç–æ–¥ notifyBalanceUpdate() –ù–ï –î–û–°–¢–£–ü–ï–ù');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    const wsModule = require('./core/websocketServer');
    console.log('   ‚úÖ WebSocket –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω');
    
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

async function checkRecentTonDeposits() {
  console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• TON –î–ï–ü–û–ó–ò–¢–û–í –í –°–ò–°–¢–ï–ú–ï');
  
  try {
    const { data: recentDeposits, error } = await supabase
      .from('user_transactions')
      .select('*')
      .or('type.eq.DEPOSIT,type.eq.TON_DEPOSIT')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error.message);
      return;
    }
    
    console.log(`   üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã (${recentDeposits?.length || 0}):`);
    
    if (recentDeposits && recentDeposits.length > 0) {
      recentDeposits.forEach((deposit, i) => {
        console.log(`   ${i + 1}. ID: ${deposit.id}, User: ${deposit.user_id}, –°—É–º–º–∞: ${deposit.amount}, –î–∞—Ç–∞: ${deposit.created_at}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è TON –î–ï–ü–û–ó–ò–¢–´ –ù–ï –ù–ê–ô–î–ï–ù–´ –ó–ê –í–°–Æ –ò–°–¢–û–†–ò–Æ!');
      console.log('   ‚ùì –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ processTonDeposit() –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    }
  } catch (error) {
    console.error('   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error.message);
  }
}

async function runFullDiagnosis() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...\n');
  
  await diagnoseTestTransaction();
  await checkUserBalance(25, '(—Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –¢–ó)');
  await checkBalanceManager();
  await checkWalletService();
  await checkWebSocketIntegration();
  await checkRecentTonDeposits();
  
  console.log('\n' + '='.repeat(50));
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:');
  console.log('   ‚ùì –ï—Å–ª–∏ TON –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î - –ø—Ä–æ–±–ª–µ–º–∞ –≤ processTonDeposit()');
  console.log('   ‚ùì –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –µ—Å—Ç—å, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ –≤ BalanceManager –∏–ª–∏ WebSocket');
  console.log('   ‚ùì –ï—Å–ª–∏ BalanceManager –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è - –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ wallet service');
  console.log('='.repeat(50));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runFullDiagnosis().catch(console.error);