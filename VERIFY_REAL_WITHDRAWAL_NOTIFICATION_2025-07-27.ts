#!/usr/bin/env tsx

/**
 * üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–û–°–õ–ï /start
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—á–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ /start
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import fetch from 'node-fetch';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function verifyWithdrawalNotificationFlow() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–û–°–õ–ï /start');
  console.log('=' .repeat(65));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 25
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 25...');
    
    const { data: user25Requests, error: requestsError } = await supabase
      .from('withdraw_requests')
      .select('*')
      .eq('user_id', 25)
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (requestsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', requestsError.message);
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25: ${user25Requests?.length || 0}`);
    
    if (!user25Requests || user25Requests.length === 0) {
      console.log('‚ùå –ó–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üîß –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
    user25Requests.forEach((req, index) => {
      const date = new Date(req.created_at).toLocaleString('ru-RU');
      console.log(`   ${index + 1}. ${req.amount_ton} TON (${req.status}) - ${date}`);
      console.log(`      ID: ${req.id}`);
      console.log(`      –ö–æ—à–µ–ª–µ–∫: ${req.ton_wallet}`);
    });
    
    // –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É
    const latestRequest = user25Requests[0];
    const timeSinceCreated = Date.now() - new Date(latestRequest.created_at).getTime();
    const minutesAgo = Math.floor(timeSinceCreated / (1000 * 60));
    
    console.log(`\nüéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É:`);
    console.log(`   ID: ${latestRequest.id}`);
    console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${latestRequest.status}`);
    console.log(`   –°—É–º–º–∞: ${latestRequest.amount_ton} TON`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏...');
    
    const adminBotToken = process.env.ADMIN_BOT_TOKEN;
    if (!adminBotToken) {
      console.log('‚ùå ADMIN_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –∏—Ö —á–∞—Ç—ã
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤ —Å –∞–¥–º–∏–Ω–∞–º–∏...');
    
    const { data: admins } = await supabase
      .from('users')
      .select('username, telegram_id, is_admin')
      .eq('is_admin', true);
      
    console.log(`üë• –ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${admins?.length || 0}`);
    
    for (const admin of admins || []) {
      console.log(`\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å @${admin.username} (${admin.telegram_id}):`);
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const testMessage = `üß™ –¢–ï–°–¢ –°–í–Ø–ó–ò
        
‚è∞ ${new Date().toLocaleString('ru-RU')}
–≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start`;

        const response = await fetch(`https://api.telegram.org/bot${adminBotToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: admin.telegram_id,
            text: testMessage
          })
        });
        
        const result = await response.json();
        
        if (result.ok) {
          console.log(`   ‚úÖ –ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (Message ID: ${result.result.message_id})`);
          
          // –ï—Å–ª–∏ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
          console.log('   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ...');
          
          const withdrawalMessage = `üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${latestRequest.username || 'unknown'}
üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> <code>${latestRequest.id}</code>
üí∞ <b>–°—É–º–º–∞:</b> ${latestRequest.amount_ton} TON
üè¶ <b>–ö–æ—à–µ–ª–µ–∫:</b> <code>${latestRequest.ton_wallet}</code>
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(latestRequest.created_at).toLocaleString('ru-RU')}
‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> ${latestRequest.status}`;

          const notificationResponse = await fetch(`https://api.telegram.org/bot${adminBotToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: admin.telegram_id,
              text: withdrawalMessage,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data: `approve_${latestRequest.id}` },
                    { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${latestRequest.id}` }
                  ],
                  [
                    { text: "üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data: "all_requests" }
                  ]
                ]
              }
            })
          });
          
          const notificationResult = await notificationResponse.json();
          
          if (notificationResult.ok) {
            console.log(`   ‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–ê–Ø–í–ö–ï –û–¢–ü–†–ê–í–õ–ï–ù–û! (Message ID: ${notificationResult.result.message_id})`);
            console.log('   üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è');
          } else {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationResult.description}`);
          }
          
        } else {
          console.log(`   ‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${result.description}`);
          
          if (result.error_code === 403) {
            console.log('   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª /start');
          } else if (result.error_code === 400) {
            console.log('   ‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
        }
        
      } catch (chatError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞: ${chatError}`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º AdminBotService –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n4Ô∏è‚É£ –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ AdminBotService...');
    
    try {
      const { AdminBotService } = await import('./modules/adminBot/service');
      const adminBotService = new AdminBotService();
      
      console.log('ü§ñ –í—ã–∑—ã–≤–∞–µ–º AdminBotService.notifyWithdrawal() –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏...');
      
      const serviceResult = await adminBotService.notifyWithdrawal(latestRequest);
      
      if (serviceResult) {
        console.log('‚úÖ AdminBotService –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—Ö');
      } else {
        console.log('‚ùå AdminBotService –≤–µ—Ä–Ω—É–ª –Ω–µ—É–¥–∞—á—É');
      }
      
    } catch (serviceError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ AdminBotService:', serviceError);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ WalletService
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WalletService...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–∑–æ–≤ AdminBotService –≤ WalletService
      const fs = await import('fs');
      
      if (fs.existsSync('modules/wallet/service.ts')) {
        const walletServiceCode = fs.readFileSync('modules/wallet/service.ts', 'utf8');
        
        // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç AdminBotService
        const hasImport = walletServiceCode.includes('AdminBotService');
        console.log(`üì¶ AdminBotService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ WalletService: ${hasImport ? '–î–ê' : '–ù–ï–¢'}`);
        
        // –ò—â–µ–º –≤—ã–∑–æ–≤ notifyWithdrawal
        const hasCall = walletServiceCode.includes('notifyWithdrawal');
        console.log(`üìû –í—ã–∑–æ–≤ notifyWithdrawal –Ω–∞–π–¥–µ–Ω: ${hasCall ? '–î–ê' : '–ù–ï–¢'}`);
        
        if (!hasImport || !hasCall) {
          console.log('‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WalletService –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
          console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ AdminBotService –≤ WalletService.processWithdrawal()');
        } else {
          console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WalletService –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
      } else {
        console.log('‚ùå modules/wallet/service.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
    } catch (fileError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:', fileError);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å—Ç–∞—Ç—É—Å–∞...');
    
    try {
      const webhookResponse = await fetch(`https://api.telegram.org/bot${adminBotToken}/getWebhookInfo`);
      const webhookInfo = await webhookResponse.json();
      
      if (webhookInfo.ok) {
        console.log(`üì° Webhook URL: ${webhookInfo.result.url}`);
        console.log(`üìä Pending updates: ${webhookInfo.result.pending_update_count}`);
        
        if (webhookInfo.result.last_error_message) {
          console.log(`‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.result.last_error_message}`);
          console.log(`üìÖ –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: ${new Date(webhookInfo.result.last_error_date * 1000).toLocaleString('ru-RU')}`);
        } else {
          console.log('‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫');
        }
      }
      
    } catch (webhookError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', webhookError);
    }

    // 7. –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê...');
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
    console.log(`   üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ ID 25: ${latestRequest.id}`);
    console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    console.log(`   üë• –ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${admins?.length || 0}`);
    console.log(`   üíå –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã`);
    
    console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. WalletService –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç AdminBotService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('2. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ UI, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ö–æ–¥–∏—Ç WalletService');
    console.log('3. –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ AdminBotService.notifyWithdrawal()');
    console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    console.log('5. Telegram_id –∞–¥–º–∏–Ω–æ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ');
    
    console.log('\nüì± –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –í TELEGRAM:');
    console.log('1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á–∞—Ç —Å @unifarm_admin_bot');
    console.log('2. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('3. –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    console.log('4. –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞');

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
    console.log(`‚è∞ ${new Date().toISOString()}\n`);
    
    await verifyWithdrawalNotificationFlow();
    
    console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();