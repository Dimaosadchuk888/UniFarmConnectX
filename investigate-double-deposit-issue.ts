#!/usr/bin/env tsx

/**
 * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –¥–µ–ø–æ–∑–∏—Ç—ã
 * –í—ã—è—Å–Ω—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.DATABASE_URL || 'postgresql://postgres:postgres@db:5432/postgres',
  'dummy_key' // –ò—Å–ø–æ–ª—å–∑—É–µ–º dummy key –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π postgres –±–∞–∑—ã
);

interface DuplicateAnalysis {
  type: 'FARMING_DEPOSIT' | 'BOOST_PURCHASE' | 'TON_DEPOSIT';
  user_id: number;
  amount: number;
  duplicate_count: number;
  transactions: any[];
  time_gap_seconds?: number;
  same_hash?: boolean;
}

async function investigateDoubleDuplicates() {
  console.log('\nüîç === –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –î–í–û–ô–ù–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø ===\n');

  // 1. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—É–º–º–µ
  console.log('1. –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –î–ï–ü–û–ó–ò–¢–û–í\n');
  
  const { data: suspiciousDeposits, error: depositError } = await supabase
    .from('transactions')
    .select(`
      id,
      user_id,
      type,
      amount,
      amount_uni,
      amount_ton,
      status,
      description,
      metadata,
      created_at
    `)
    .in('type', ['FARMING_DEPOSIT', 'BOOST_PURCHASE', 'DEPOSIT'])
    .eq('status', 'completed')
    .order('created_at', { ascending: false })
    .limit(100);

  if (depositError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', depositError);
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∏–ø—É –∏ –≤—Ä–µ–º–µ–Ω–∏
  const duplicateCandidates: Record<string, any[]> = {};
  
  for (const tx of suspiciousDeposits || []) {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + —Ç–∏–ø + —Å—É–º–º–∞ + –¥–µ–Ω—å)
    const amount = parseFloat(tx.amount_uni || tx.amount_ton || tx.amount || '0');
    const dateKey = new Date(tx.created_at).toISOString().split('T')[0]; // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
    const groupKey = `${tx.user_id}-${tx.type}-${amount}-${dateKey}`;
    
    if (!duplicateCandidates[groupKey]) {
      duplicateCandidates[groupKey] = [];
    }
    duplicateCandidates[groupKey].push(tx);
  }

  // –ù–∞–π–¥–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏
  const duplicates: DuplicateAnalysis[] = [];
  
  for (const [key, transactions] of Object.entries(duplicateCandidates)) {
    if (transactions.length > 1) {
      const [userId, type, amount] = key.split('-');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
      transactions.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
      
      for (let i = 0; i < transactions.length - 1; i++) {
        const timeDiff = (new Date(transactions[i + 1].created_at).getTime() - 
                         new Date(transactions[i].created_at).getTime()) / 1000;
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –º–∏–Ω—É—Ç - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (timeDiff <= 600) {
          duplicates.push({
            type: type as any,
            user_id: parseInt(userId),
            amount: parseFloat(amount),
            duplicate_count: transactions.length,
            transactions: transactions,
            time_gap_seconds: timeDiff,
            same_hash: transactions.every(tx => 
              (tx.metadata?.tx_hash || tx.description) === 
              (transactions[0].metadata?.tx_hash || transactions[0].description)
            )
          });
        }
      }
    }
  }

  if (duplicates.length === 0) {
    console.log('‚úÖ –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  } else {
    console.log(`‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û ${duplicates.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:\n`);
    
    duplicates.forEach((dup, index) => {
      console.log(`${index + 1}. User ${dup.user_id} - ${dup.type}`);
      console.log(`   –°—É–º–º–∞: ${dup.amount} | –î—É–±–ª–µ–π: ${dup.duplicate_count}`);
      console.log(`   –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—ã–≤: ${dup.time_gap_seconds}—Å | –û–¥–∏–Ω hash: ${dup.same_hash}`);
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
      dup.transactions.forEach(tx => {
        console.log(`     - ID ${tx.id}: ${new Date(tx.created_at).toLocaleString()}`);
        console.log(`       Description: ${tx.description}`);
        if (tx.metadata?.tx_hash) {
          console.log(`       TX Hash: ${tx.metadata.tx_hash}`);
        }
      });
      console.log('');
    });
  }

  // 2. –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
  console.log('\n2. –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô (FARMING_REWARD)\n');
  
  const { data: farmingRewards, error: rewardError } = await supabase
    .from('transactions')
    .select(`
      id,
      user_id,
      amount_uni,
      amount_ton,
      description,
      created_at
    `)
    .eq('type', 'FARMING_REWARD')
    .order('created_at', { ascending: false })
    .limit(50);

  if (rewardError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', rewardError);
  } else {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—Ä–µ–º–µ–Ω–∏
    const rewardsByUser: Record<number, any[]> = {};
    
    for (const reward of farmingRewards || []) {
      if (!rewardsByUser[reward.user_id]) {
        rewardsByUser[reward.user_id] = [];
      }
      rewardsByUser[reward.user_id].push(reward);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    let suspiciousRewards = 0;
    
    for (const [userId, rewards] of Object.entries(rewardsByUser)) {
      rewards.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
      
      for (let i = 0; i < rewards.length - 1; i++) {
        const timeDiff = (new Date(rewards[i + 1].created_at).getTime() - 
                         new Date(rewards[i].created_at).getTime()) / 1000;
        
        // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 4 –º–∏–Ω—É—Ç—ã - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (timeDiff < 240) {
          suspiciousRewards++;
          console.log(`‚ö†Ô∏è User ${userId}: –Ω–∞–≥—Ä–∞–¥—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ`);
          console.log(`   ${new Date(rewards[i].created_at).toLocaleString()} -> ${new Date(rewards[i + 1].created_at).toLocaleString()}`);
          console.log(`   –†–∞–∑—Ä—ã–≤: ${Math.round(timeDiff)}—Å | –°—É–º–º—ã: ${rewards[i].amount_uni || '0'} -> ${rewards[i + 1].amount_uni || '0'}`);
        }
      }
    }

    if (suspiciousRewards === 0) {
      console.log('‚úÖ –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —á–∞—Å—Ç—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∫–æ–¥–µ
  console.log('\n3. –ê–ù–ê–õ–ò–ó –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í –í –ö–û–î–ï\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
  const recentDeposits = suspiciousDeposits?.filter(tx => 
    tx.type === 'DEPOSIT' && tx.metadata?.tx_hash
  ).slice(0, 10) || [];

  if (recentDeposits.length > 0) {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentDeposits.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é...`);
    
    const hashCounts: Record<string, number> = {};
    
    for (const deposit of recentDeposits) {
      const hash = deposit.metadata?.tx_hash || deposit.description;
      if (hash) {
        hashCounts[hash] = (hashCounts[hash] || 0) + 1;
      }
    }

    const duplicateHashes = Object.entries(hashCounts).filter(([_, count]) => count > 1);
    
    if (duplicateHashes.length > 0) {
      console.log('‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø TX HASH:');
      duplicateHashes.forEach(([hash, count]) => {
        console.log(`   ${hash}: ${count} —Ä–∞–∑`);
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è tx_hash –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–æ–≤
  console.log('\n4. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184 (–∏–∑ WebSocket –ª–æ–≥–æ–≤)\n');
  
  const { data: user184Txs, error: user184Error } = await supabase
    .from('transactions')
    .select(`
      id,
      type,
      amount,
      amount_uni,
      amount_ton,
      description,
      created_at
    `)
    .eq('user_id', 184)
    .order('created_at', { ascending: false })
    .limit(20);

  if (user184Error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184:', user184Error);
  } else if (user184Txs && user184Txs.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${user184Txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184:`);
    
    user184Txs.forEach((tx, index) => {
      const amount = parseFloat(tx.amount_uni || tx.amount_ton || tx.amount || '0');
      console.log(`${index + 1}. ID ${tx.id}: ${tx.type} | ${amount} | ${new Date(tx.created_at).toLocaleString()}`);
      if (tx.description) {
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –¥—É–±–ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const groupedTxs: Record<string, any[]> = {};
    
    for (const tx of user184Txs) {
      const amount = parseFloat(tx.amount_uni || tx.amount_ton || tx.amount || '0');
      const key = `${tx.type}-${amount}`;
      
      if (!groupedTxs[key]) {
        groupedTxs[key] = [];
      }
      groupedTxs[key].push(tx);
    }

    const duplicatesFound = Object.entries(groupedTxs).filter(([_, txs]) => txs.length > 1);
    
    if (duplicatesFound.length > 0) {
      console.log('\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –î–£–ë–õ–ò —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184:');
      duplicatesFound.forEach(([key, txs]) => {
        console.log(`   ${key}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        txs.forEach(tx => {
          console.log(`     - ID ${tx.id}: ${new Date(tx.created_at).toLocaleString()}`);
        });
      });
    } else {
      console.log('\n‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184 –¥—É–±–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 184 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  }

  console.log('\n=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===\n');
  
  if (duplicates.length === 0 && suspiciousRewards === 0) {
    console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û:');
    console.log('   - –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã');
    console.log('   - –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
  } else {
    console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    if (duplicates.length > 0) {
      console.log(`   - ${duplicates.length} —Å–ª—É—á–∞–µ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    }
    if (suspiciousRewards > 0) {
      console.log(`   - ${suspiciousRewards} —Å–ª—É—á–∞–µ–≤ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
investigateDoubleDuplicates().catch(console.error);