#!/usr/bin/env tsx

/**
 * üí∞ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ß–ï–†–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–•–û–î
 * 
 * –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function transactionBasedCompensation() {
  console.log('üí∞ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ß–ï–†–ï–ó –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('=' .repeat(55));
  
  const compensationData = [
    { userId: '251', username: 'Irinkatriumf', amount: 2.0 },
    { userId: '255', username: 'Glazeb0', amount: 2.0 }
  ];
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´
    console.log('1Ô∏è‚É£ –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –¥–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏...');
    
    const { data: beforeUsers, error: beforeError } = await supabase
      .from('users')
      .select('id, username, balance_ton')
      .in('id', [251, 255])
      .order('id');

    if (beforeError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í:', beforeError.message);
      return;
    }

    console.log('\nüìä –ë–ê–õ–ê–ù–°–´ –î–û:');
    beforeUsers?.forEach(user => {
      console.log(`User ${user.id}: ${user.balance_ton} TON`);
    });

    // 2. –°–û–ó–î–ê–ï–ú –ö–û–ú–ü–ï–ù–°–ê–¶–ò–û–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const compensationTransactions = compensationData.map(comp => ({
      user_id: comp.userId,
      type: 'ADMIN_COMPENSATION',
      amount: comp.amount,
      currency: 'TON',
      status: 'completed',
      description: `Admin compensation for lost deposit - ${comp.amount} TON restored (System auto-calculation)`,
      created_at: new Date().toISOString(),
      metadata: {
        admin_action: true,
        compensation_reason: 'lost_deposit_bug_compensation',
        compensation_amount: comp.amount,
        target_user: comp.username,
        compensation_date: '2025-07-27',
        method: 'transaction_based_auto_calculation'
      }
    }));

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    const { data: createdTransactions, error: createError } = await supabase
      .from('transactions')
      .insert(compensationTransactions)
      .select();

    if (createError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:', createError.message);
      return;
    }

    console.log('‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:');
    createdTransactions?.forEach(tx => {
      console.log(`   Transaction ${tx.id}: User ${tx.user_id} - ${tx.amount} ${tx.currency}`);
    });

    // 3. –ñ–î–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–°–ß–ï–¢–ê
    console.log('\n3Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤...');
    console.log('   (–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–∞–º–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)');
    
    await new Promise(resolve => setTimeout(resolve, 3000)); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã

    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    const { data: afterUsers, error: afterError } = await supabase
      .from('users')
      .select('id, username, balance_ton')
      .in('id', [251, 255])
      .order('id');

    if (afterError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê:', afterError.message);
      return;
    }

    console.log('\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('‚îÅ'.repeat(60));
    
    let successCount = 0;
    afterUsers?.forEach(afterUser => {
      const beforeUser = beforeUsers?.find(u => u.id === afterUser.id);
      const beforeBalance = Number(beforeUser?.balance_ton || 0);
      const afterBalance = Number(afterUser.balance_ton || 0);
      const difference = afterBalance - beforeBalance;
      const expected = 2.0;
      const success = Math.abs(difference - expected) < 0.01;
      
      console.log(`User ${afterUser.id} (@${afterUser.username}):`);
      console.log(`   –î–æ: ${beforeBalance} TON`);
      console.log(`   –ü–æ—Å–ª–µ: ${afterBalance} TON`);
      console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +${difference.toFixed(6)} TON`);
      console.log(`   –û–∂–∏–¥–∞–ª–∏: +${expected} TON`);
      console.log(`   ${success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ù–ï –°–†–ê–ë–û–¢–ê–õ–û'}`);
      console.log('');
      
      if (success) successCount++;
    });

    // 5. –ï–°–õ–ò –ù–ï –°–†–ê–ë–û–¢–ê–õ–û - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–°–ß–ï–¢
    if (successCount < 2) {
      console.log('5Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π...');
      
      for (const userId of [251, 255]) {
        console.log(`\nüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è User ${userId}...`);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: userTransactions, error: txError } = await supabase
          .from('transactions')
          .select('amount, currency, status')
          .eq('user_id', userId.toString())
          .eq('currency', 'TON')
          .eq('status', 'completed');

        if (txError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User ${userId}:`, txError.message);
          continue;
        }

        const totalTonBalance = userTransactions?.reduce((sum, tx) => {
          return sum + (Number(tx.amount) || 0);
        }, 0) || 0;

        console.log(`   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTonBalance} TON`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const { error: updateError } = await supabase
          .from('users')
          .update({ balance_ton: totalTonBalance })
          .eq('id', userId);

        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ User ${userId}:`, updateError.message);
        } else {
          console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å User ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${totalTonBalance} TON`);
        }
      }
      
      // –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const { data: finalUsers, error: finalError } = await supabase
        .from('users')
        .select('id, username, balance_ton')
        .in('id', [251, 255])
        .order('id');

      if (!finalError && finalUsers) {
        console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('‚îÅ'.repeat(50));
        
        let finalSuccessCount = 0;
        finalUsers.forEach(user => {
          const beforeUser = beforeUsers?.find(u => u.id === user.id);
          const change = Number(user.balance_ton) - Number(beforeUser?.balance_ton || 0);
          const success = change >= 1.5; // –•–æ—Ç—è –±—ã –±–ª–∏–∑–∫–æ –∫ 2 TON
          
          console.log(`User ${user.id}: ${user.balance_ton} TON (+${change.toFixed(6)})`);
          console.log(`   ${success ? '‚úÖ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ê' : '‚ùå –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ù–ï –ü–û–õ–£–ß–ï–ù–ê'}`);
          
          if (success) finalSuccessCount++;
        });
        
        if (finalSuccessCount === 2) {
          console.log('\nüéâ –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
        } else {
          console.log(`\n‚ö†Ô∏è  –¢–æ–ª—å–∫–æ ${finalSuccessCount}/2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é`);
        }
        
        return {
          success: finalSuccessCount === 2,
          compensated: finalSuccessCount,
          method: 'transaction_based_with_manual_recalculation'
        };
      }
    } else {
      console.log('\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
      return {
        success: true,
        compensated: successCount,
        method: 'transaction_based_automatic'
      };
    }

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–û–ô –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await transactionBasedCompensation();
    
    console.log('\n‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log(`–ú–µ—Ç–æ–¥: ${result?.method}`);
    console.log(`–£—Å–ø–µ—à–Ω–æ: ${result?.compensated}/2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`–°—Ç–∞—Ç—É—Å: ${result?.success ? '–ü–û–õ–ù–û–°–¢–¨–Æ –£–°–ü–ï–®–ù–û' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –û–ü–ï–†–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();