/**
 * üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í–æ–∑–≤—Ä–∞—Ç TON –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ Boost-–ø–∞–∫–µ—Ç–∞ (User ID 25)
 * 
 * –¶–µ–ª—å: –í—ã—è–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö TON —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å
 * –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost –ø–∞–∫–µ—Ç–∞
 */

import { supabase } from './core/supabaseClient';
import { logger } from './core/logger';

interface TransactionAnalysis {
  id: number;
  type: string;
  amount: string;
  currency: string;
  status: string;
  description: string;
  metadata: any;
  created_at: string;
  updated_at: string;
}

interface UserBalanceHistory {
  user_id: number;
  balance_uni: string;
  balance_ton: string;
  ton_boost_package: string;
  ton_boost_package_id: number;
  ton_boost_rate: string;
  updated_at: string;
}

interface TonFarmingData {
  id: number;
  user_id: number;
  boost_package_id: number;
  deposit_amount: string;
  rate_ton_per_second: string;
  bonus_uni: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

async function analyzeUser25TonBoostRefund() {
  logger.info('üîç [CRITICAL ANALYSIS] –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ TON –¥–ª—è User ID 25');
  
  const supabaseClient = supabase;
  const USER_ID = 25;
  const HOURS_BACK = 48; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 25
    logger.info('üìä –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤');
    const { data: transactions, error: transError } = await supabaseClient
      .from('transactions')
      .select('*')
      .eq('user_id', USER_ID)
      .gte('created_at', new Date(Date.now() - HOURS_BACK * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (transError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transError);
      return;
    }

    console.log('\nüìã === –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER ID 25 ===');
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);
    
    if (transactions && transactions.length > 0) {
      transactions.forEach((tx: TransactionAnalysis, index) => {
        console.log(`\n${index + 1}. ID: ${tx.id}`);
        console.log(`   –¢–∏–ø: ${tx.type}`);
        console.log(`   –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata, null, 2)}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${tx.created_at}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${tx.updated_at}`);
      });
    }

    // 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üìä –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const { data: userData, error: userError } = await supabaseClient
      .from('users')
      .select('id, balance_uni, balance_ton, ton_boost_package, ton_boost_package_id, ton_boost_rate, created_at, updated_at')
      .eq('id', USER_ID)
      .single();

    if (userError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
    } else {
      console.log('\nüë§ === –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
      console.log(`User ID: ${userData.id}`);
      console.log(`–ë–∞–ª–∞–Ω—Å UNI: ${userData.balance_uni}`);
      console.log(`–ë–∞–ª–∞–Ω—Å TON: ${userData.balance_ton}`);
      console.log(`TON Boost Package: ${userData.ton_boost_package}`);
      console.log(`TON Boost Package ID: ${userData.ton_boost_package_id}`);
      console.log(`TON Boost Rate: ${userData.ton_boost_rate}`);
      console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${userData.updated_at}`);
    }

    // 3. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data
    logger.info('üìä –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ TON Farming –¥–∞–Ω–Ω—ã—Ö');
    const { data: farmingData, error: farmingError } = await supabaseClient
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', USER_ID)
      .order('created_at', { ascending: false });

    if (farmingError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è farming –¥–∞–Ω–Ω—ã—Ö:', farmingError);
    } else {
      console.log('\nüåæ === TON FARMING DATA ===');
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${farmingData?.length || 0}`);
      
      if (farmingData && farmingData.length > 0) {
        farmingData.forEach((farm: TonFarmingData, index) => {
          console.log(`\n${index + 1}. ID: ${farm.id}`);
          console.log(`   Boost Package ID: ${farm.boost_package_id}`);
          console.log(`   Deposit Amount: ${farm.deposit_amount}`);
          console.log(`   Rate TON/sec: ${farm.rate_ton_per_second}`);
          console.log(`   Bonus UNI: ${farm.bonus_uni}`);
          console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${farm.is_active}`);
          console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${farm.created_at}`);
          console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${farm.updated_at}`);
        });
      }
    }

    // 4. –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö boost_purchases –∑–∞–ø–∏—Å–µ–π
    logger.info('üìä –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã boost_purchases');
    try {
      const { data: boostPurchases, error: boostError } = await supabaseClient
        .from('boost_purchases')
        .select('*')
        .eq('user_id', USER_ID)
        .order('created_at', { ascending: false });

      if (boostError) {
        console.log('\n‚ùå –¢–∞–±–ª–∏—Ü–∞ boost_purchases –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('\nüí≥ === BOOST PURCHASES ===');
        console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${boostPurchases?.length || 0}`);
        
        if (boostPurchases && boostPurchases.length > 0) {
          boostPurchases.forEach((purchase: any, index) => {
            console.log(`\n${index + 1}. ${JSON.stringify(purchase, null, 2)}`);
          });
        }
      }
    } catch (error) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ boost_purchases:', error);
    }

    // 5. –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    logger.info('üìä –®–∞–≥ 5: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    const tonTransactions = transactions?.filter(tx => tx.currency === 'TON') || [];
    
    console.log('\nüíé === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    console.log(`TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${tonTransactions.length}`);
    
    tonTransactions.forEach((tx, index) => {
      console.log(`\n--- TON –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1} ---`);
      console.log(`ID: ${tx.id}`);
      console.log(`–¢–∏–ø: ${tx.type}`);
      console.log(`–°—É–º–º–∞: ${tx.amount} TON`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      
      // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      if (tx.metadata) {
        console.log('üîç –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');
        try {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          Object.keys(metadata).forEach(key => {
            console.log(`   ${key}: ${JSON.stringify(metadata[key])}`);
          });
        } catch (e) {
          console.log(`   –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${tx.metadata}`);
        }
      }
      
      console.log(`–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${tx.created_at}`);
      console.log(`–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${tx.updated_at}`);
    });

    // 6. –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
    logger.info('üìä –®–∞–≥ 6: –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤');
    console.log('\nüîÑ === –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –í–û–ó–í–†–ê–¢–ê ===');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const timeGroups = new Map();
    
    tonTransactions.forEach(tx => {
      const timestamp = new Date(tx.created_at).getTime();
      const timeWindow = Math.floor(timestamp / (5 * 60 * 1000)) * (5 * 60 * 1000); // 5-–º–∏–Ω—É—Ç–Ω—ã–µ –æ–∫–Ω–∞
      
      if (!timeGroups.has(timeWindow)) {
        timeGroups.set(timeWindow, []);
      }
      timeGroups.get(timeWindow).push(tx);
    });
    
    timeGroups.forEach((txGroup, timeWindow) => {
      if (txGroup.length > 1) {
        console.log(`\n‚è∞ –ì—Ä—É–ø–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ–∫–Ω–µ ${new Date(timeWindow).toISOString()}:`);
        txGroup.forEach((tx: TransactionAnalysis) => {
          console.log(`   ${tx.type}: ${tx.amount} TON (${tx.status}) - ${tx.description}`);
        });
      }
    });

    // 7. –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    console.log('\nüìã === –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    
    const withdrawals = tonTransactions.filter(tx => 
      tx.type.includes('WITHDRAWAL') || 
      tx.amount.startsWith('-') ||
      tx.description.toLowerCase().includes('withdrawal') ||
      tx.description.toLowerCase().includes('—Å–ø–∏—Å–∞–Ω–∏–µ')
    );
    
    const deposits = tonTransactions.filter(tx => 
      tx.type.includes('DEPOSIT') || 
      (!tx.amount.startsWith('-') && parseFloat(tx.amount) > 0) ||
      tx.description.toLowerCase().includes('deposit') ||
      tx.description.toLowerCase().includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
    );
    
    const boostRelated = tonTransactions.filter(tx => 
      tx.description.toLowerCase().includes('boost') ||
      (tx.metadata && JSON.stringify(tx.metadata).toLowerCase().includes('boost'))
    );
    
    console.log(`üí∏ –û–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è: ${withdrawals.length}`);
    console.log(`üí∞ –û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${deposits.length}`);
    console.log(`üöÄ Boost-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${boostRelated.length}`);
    
    if (withdrawals.length > 0 && deposits.length > 0) {
      console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –ü–ê–¢–¢–ï–†–ù: –ï—Å—Ç—å –∏ —Å–ø–∏—Å–∞–Ω–∏—è, –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON');
      console.log('   –í–æ–∑–º–æ–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤');
    }
    
    logger.info('‚úÖ [CRITICAL ANALYSIS] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    logger.error('‚ùå [CRITICAL ANALYSIS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeUser25TonBoostRefund().catch(console.error);

export { analyzeUser25TonBoostRefund };