/**
 * –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ë–û–Ø –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–û–í
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á–µ–º—É User 255 –∏ 251 –∏–º–µ—é—Ç 0 –±–∞–ª–∞–Ω—Å—ã
 */

import { supabase } from './core/supabase.js';

async function diagnoseBalanceSystemFailure() {
  console.log('üîç –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ë–û–Ø –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–û–í');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ User 255 –∏ 251 –≤—Ä—É—á–Ω—É—é
    console.log('\nüí∞ –†–£–ß–ù–û–ô –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–û–í:');
    
    for (const telegramId of [255, 251]) {
      console.log(`\n--- –†–ê–°–ß–ï–¢ –î–õ–Ø USER ${telegramId} ---`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user } = await supabase
        .from('users')
        .select('id, telegram_id, balance_uni, balance_ton')
        .eq('telegram_id', telegramId)
        .single();
      
      if (!user) {
        console.log(`‚ùå User ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }
      
      console.log(`Internal ID: ${user.id}`);
      console.log(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å UNI: ${user.balance_uni}`);
      console.log(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å TON: ${user.balance_ton}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: transactions } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', telegramId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç–∞–º –ª–µ–∂–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        .order('created_at', { ascending: true });
      
      if (!transactions || transactions.length === 0) {
        console.log(`‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è User ${telegramId}`);
        continue;
      }
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤
      let uniBalance = 0;
      let tonBalance = 0;
      
      const transactionsByType = {};
      
      transactions.forEach(tx => {
        const amount = parseFloat(tx.amount || 0);
        const currency = tx.currency;
        const type = tx.type;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (!transactionsByType[type]) {
          transactionsByType[type] = { count: 0, uniAmount: 0, tonAmount: 0 };
        }
        transactionsByType[type].count++;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ –ª–æ–≥–∏–∫–µ —Å–∏—Å—Ç–µ–º—ã
        if (currency === 'UNI') {
          if (['TON_DEPOSIT', 'FARMING_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'].includes(type)) {
            uniBalance += amount;
            transactionsByType[type].uniAmount += amount;
          } else if (['UNI_WITHDRAWAL', 'withdrawal_fee'].includes(type)) {
            uniBalance -= amount;
            transactionsByType[type].uniAmount -= amount;
          }
        } else if (currency === 'TON') {
          if (['TON_DEPOSIT', 'FARMING_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'].includes(type)) {
            tonBalance += amount;
            transactionsByType[type].tonAmount += amount;
          } else if (['TON_WITHDRAWAL', 'withdrawal_fee'].includes(type)) {
            tonBalance -= amount;
            transactionsByType[type].tonAmount -= amount;
          }
        }
      });
      
      console.log(`\nüí∞ –†–ê–°–ß–ï–¢–ù–´–ï –ë–ê–õ–ê–ù–°–´:`);
      console.log(`UNI: ${uniBalance.toFixed(6)} (—Ç–µ–∫—É—â–∏–π –≤ –ë–î: ${user.balance_uni})`);
      console.log(`TON: ${tonBalance.toFixed(6)} (—Ç–µ–∫—É—â–∏–π –≤ –ë–î: ${user.balance_ton})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –±–∞–ª–∞–Ω—Å—ã
      const uniMatch = Math.abs(uniBalance - parseFloat(user.balance_uni || 0)) < 0.000001;
      const tonMatch = Math.abs(tonBalance - parseFloat(user.balance_ton || 0)) < 0.000001;
      
      console.log(`UNI –±–∞–ª–∞–Ω—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${uniMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`TON –±–∞–ª–∞–Ω—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${tonMatch ? '‚úÖ' : '‚ùå'}`);
      
      if (!uniMatch || !tonMatch) {
        console.log(`‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º –≤ –ë–î!`);
        console.log(`   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ BalanceManager –ù–ï –û–ë–†–ê–ë–û–¢–ê–õ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
      Object.entries(transactionsByType).forEach(([type, stats]) => {
        console.log(`${type}: ${stats.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π | UNI: ${stats.uniAmount.toFixed(6)} | TON: ${stats.tonAmount.toFixed(6)}`);
      });
      
      // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const firstTx = transactions[0];
      const lastTx = transactions[transactions.length - 1];
      
      console.log(`\n‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù:`);
      console.log(`–ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${firstTx.created_at} (${firstTx.type})`);
      console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${lastTx.created_at} (${lastTx.type})`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ BalanceManager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ID
    console.log('\nüîß –¢–ï–°–¢ BALANCEMANAGER –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò ID:');
    
    try {
      const { BalanceManager } = await import('./core/BalanceManager.js');
      const balanceManager = BalanceManager.getInstance();
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è User 255 –ø–æ –µ–≥–æ –†–ï–ê–õ–¨–ù–û–ú–£ internal ID
      const { data: user255 } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', 255)
        .single();
      
      if (user255) {
        console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º BalanceManager.calculateBalance –¥–ª—è User 255 (internal ID: ${user255.id}):`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ calculateBalance –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const result = await balanceManager.getUserBalance(user255.id);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç getUserBalance:', result);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        if (typeof balanceManager.calculateBalance === 'function') {
          const calculation = await balanceManager.calculateBalance(user255.id);
          console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç calculateBalance:', calculation);
        }
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BalanceManager:', error.message);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É ID –º–∞–ø–ø–∏–Ω–≥–∞
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê ID –ú–ê–ü–ü–ò–ù–ì–ê:');
    
    const { data: user255 } = await supabase
      .from('users')
      .select('id, telegram_id')
      .eq('telegram_id', 255)
      .single();
      
    const { data: user251 } = await supabase
      .from('users')
      .select('id, telegram_id')
      .eq('telegram_id', 251)
      .single();
    
    if (user255 && user251) {
      console.log(`\n–ü–†–û–ë–õ–ï–ú–ê –°–í–Ø–ó–ö–ò ID:`);
      console.log(`User 255: internal ID = ${user255.id}, telegram_id = ${user255.telegram_id}`);
      console.log(`User 251: internal ID = ${user251.id}, telegram_id = ${user251.telegram_id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É ID
      const { data: tx255ByInternal } = await supabase
        .from('transactions')
        .select('count')
        .eq('user_id', user255.id)
        .single();
        
      const { data: tx255ByTelegram } = await supabase
        .from('transactions')
        .select('count')
        .eq('user_id', user255.telegram_id)
        .single();
        
      const { data: tx251ByInternal } = await supabase
        .from('transactions')
        .select('count')
        .eq('user_id', user251.id)
        .single();
        
      const { data: tx251ByTelegram } = await supabase
        .from('transactions')
        .select('count')
        .eq('user_id', user251.telegram_id)
        .single();
      
      console.log(`\n–¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 255:`);
      console.log(`–ü–æ internal ID (${user255.id}): ${tx255ByInternal?.count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`–ü–æ telegram_id (${user255.telegram_id}): ${tx255ByTelegram?.count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      console.log(`\n–¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 251:`);
      console.log(`–ü–æ internal ID (${user251.id}): ${tx251ByInternal?.count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`–ü–æ telegram_id (${user251.telegram_id}): ${tx251ByTelegram?.count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
      if ((tx255ByInternal?.count || 0) === 0 && (tx255ByTelegram?.count || 0) > 0) {
        console.log(`\nüî• –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê USER 255:`);
        console.log(`   BalanceManager –∏—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ internal ID (${user255.id})`);
        console.log(`   –ù–æ –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å telegram_id (${user255.telegram_id})`);
        console.log(`   –ü–æ—ç—Ç–æ–º—É BalanceManager –ù–ï –ù–ê–•–û–î–ò–¢ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—á–∏—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å = 0`);
      }
      
      if ((tx251ByInternal?.count || 0) === 0 && (tx251ByTelegram?.count || 0) > 0) {
        console.log(`\nüî• –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê USER 251:`);
        console.log(`   BalanceManager –∏—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ internal ID (${user251.id})`);
        console.log(`   –ù–æ –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å telegram_id (${user251.telegram_id})`);
        console.log(`   –ü–æ—ç—Ç–æ–º—É BalanceManager –ù–ï –ù–ê–•–û–î–ò–¢ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—á–∏—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å = 0`);
      }
    }
    
    console.log('\n‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

diagnoseBalanceSystemFailure();