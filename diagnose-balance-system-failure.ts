/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ë–û–Ø –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–û–í
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255 –∏ 251
 */

import { supabase } from './core/supabase.js';

async function diagnoseBalanceSystemFailure() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ë–û–Ø –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–û–í');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
    console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í:');
    const { data: deposits } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', [255, 251])
      .in('type', ['TON_DEPOSIT', 'FARMING_DEPOSIT'])
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });
    
    if (deposits) {
      deposits.forEach(tx => {
        console.log(`\n--- –î–ï–ü–û–ó–ò–¢ ID ${tx.id} ---`);
        console.log(`User: ${tx.user_id}`);
        console.log(`Type: ${tx.type}`);
        console.log(`Amount: ${tx.amount} ${tx.currency}`);
        console.log(`Status: ${tx.status}`);
        console.log(`Created: ${tx.created_at}`);
        console.log(`Updated: ${tx.updated_at}`);
        console.log(`Description: ${tx.description}`);
        if (tx.metadata) {
          console.log(`Metadata: ${JSON.stringify(tx.metadata, null, 2)}`);
        }
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüîç –ü–û–ò–°–ö BALANCE_UPDATE –û–ü–ï–†–ê–¶–ò–ô:');
    const { data: balanceUpdates } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', [255, 251])
      .eq('type', 'BALANCE_UPDATE')
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });
    
    if (balanceUpdates && balanceUpdates.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${balanceUpdates.length} BALANCE_UPDATE –æ–ø–µ—Ä–∞—Ü–∏–π:`);
      balanceUpdates.forEach(tx => {
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.amount} ${tx.currency} | ${tx.description}`);
      });
    } else {
      console.log('‚ùå –ù–ï–¢ BALANCE_UPDATE –û–ü–ï–†–ê–¶–ò–ô! –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç—ã!');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ duplicate prevention –ª–æ–≥–∏
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ò –û–®–ò–ë–û–ö:');
    const { data: duplicateCheck } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', [255, 251])
      .eq('status', 'duplicate')
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString());
    
    if (duplicateCheck && duplicateCheck.length > 0) {
      console.log('‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´:');
      duplicateCheck.forEach(tx => {
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency} | DUPLICATE`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–µ—Ç–∞–ª—å–Ω–æ
    console.log('\nüí∞ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í:');
    const { data: user255 } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', 255)
      .single();
      
    const { data: user251 } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', 251)
      .single();
    
    if (user255) {
      console.log(`\n--- USER 255 ---`);
      console.log(`ID: ${user255.id}`);
      console.log(`Telegram ID: ${user255.telegram_id}`);
      console.log(`UNI Balance: ${user255.balance_uni}`);
      console.log(`TON Balance: ${user255.balance_ton}`);
      console.log(`Created: ${user255.created_at}`);
      console.log(`Updated: ${user255.updated_at}`);
    }
    
    if (user251) {
      console.log(`\n--- USER 251 ---`);
      console.log(`ID: ${user251.id}`);
      console.log(`Telegram ID: ${user251.telegram_id}`);
      console.log(`UNI Balance: ${user251.balance_uni}`);
      console.log(`TON Balance: ${user251.balance_ton}`);
      console.log(`Created: ${user251.created_at}`);
      console.log(`Updated: ${user251.updated_at}`);
    }
    
    // 5. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –±–∞–ª–∞–Ω—Å—ã
    console.log('\nüßÆ –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–´–• –ë–ê–õ–ê–ù–°–û–í:');
    
    const { data: user255AllTx } = await supabase
      .from('transactions')
      .select('type, amount, currency, status')
      .eq('user_id', 255)
      .eq('status', 'completed');
    
    const { data: user251AllTx } = await supabase
      .from('transactions')
      .select('type, amount, currency, status')
      .eq('user_id', 251)
      .eq('status', 'completed');
    
    // –ü–æ–¥—Å—á–µ—Ç –¥–ª—è User 255
    let user255ExpectedUNI = 0;
    let user255ExpectedTON = 0;
    
    if (user255AllTx) {
      user255AllTx.forEach(tx => {
        const amount = parseFloat(tx.amount);
        if (tx.currency === 'UNI') {
          if (['TON_DEPOSIT', 'FARMING_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'].includes(tx.type)) {
            user255ExpectedUNI += amount;
          } else if (['WITHDRAWAL', 'FARMING_WITHDRAWAL'].includes(tx.type)) {
            user255ExpectedUNI -= amount;
          }
        } else if (tx.currency === 'TON') {
          if (['TON_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'].includes(tx.type)) {
            user255ExpectedTON += amount;
          } else if (['WITHDRAWAL'].includes(tx.type)) {
            user255ExpectedTON -= amount;
          }
        }
      });
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –¥–ª—è User 251
    let user251ExpectedUNI = 0;
    let user251ExpectedTON = 0;
    
    if (user251AllTx) {
      user251AllTx.forEach(tx => {
        const amount = parseFloat(tx.amount);
        if (tx.currency === 'UNI') {
          if (['TON_DEPOSIT', 'FARMING_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'].includes(tx.type)) {
            user251ExpectedUNI += amount;
          } else if (['WITHDRAWAL', 'FARMING_WITHDRAWAL'].includes(tx.type)) {
            user251ExpectedUNI -= amount;
          }
        } else if (tx.currency === 'TON') {
          if (['TON_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD'].includes(tx.type)) {
            user251ExpectedTON += amount;
          } else if (['WITHDRAWAL'].includes(tx.type)) {
            user251ExpectedTON -= amount;
          }
        }
      });
    }
    
    console.log(`\nUser 255 - –û–∂–∏–¥–∞–µ–º—ã–µ –±–∞–ª–∞–Ω—Å—ã:`);
    console.log(`UNI: ${user255ExpectedUNI} (—Ç–µ–∫—É—â–∏–π: ${user255?.balance_uni || 0})`);
    console.log(`TON: ${user255ExpectedTON} (—Ç–µ–∫—É—â–∏–π: ${user255?.balance_ton || 0})`);
    
    console.log(`\nUser 251 - –û–∂–∏–¥–∞–µ–º—ã–µ –±–∞–ª–∞–Ω—Å—ã:`);
    console.log(`UNI: ${user251ExpectedUNI} (—Ç–µ–∫—É—â–∏–π: ${user251?.balance_uni || 0})`);
    console.log(`TON: ${user251ExpectedTON} (—Ç–µ–∫—É—â–∏–π: ${user251?.balance_ton || 0})`);
    
    // 6. –ü–æ–∏—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
    console.log('\nüö® –ü–û–ò–°–ö –°–ò–°–¢–ï–ú–ù–´–• –ü–†–û–ë–õ–ï–ú:');
    
    const user255BalanceDeficit = {
      uni: user255ExpectedUNI - (user255?.balance_uni || 0),
      ton: user255ExpectedTON - (user255?.balance_ton || 0)
    };
    
    const user251BalanceDeficit = {
      uni: user251ExpectedUNI - (user251?.balance_uni || 0),
      ton: user251ExpectedTON - (user251?.balance_ton || 0)
    };
    
    if (user255BalanceDeficit.uni !== 0 || user255BalanceDeficit.ton !== 0) {
      console.log(`‚ùå User 255 –î–ï–§–ò–¶–ò–¢ –ë–ê–õ–ê–ù–°–ê:`);
      console.log(`   UNI: ${user255BalanceDeficit.uni}`);
      console.log(`   TON: ${user255BalanceDeficit.ton}`);
    }
    
    if (user251BalanceDeficit.uni !== 0 || user251BalanceDeficit.ton !== 0) {
      console.log(`‚ùå User 251 –î–ï–§–ò–¶–ò–¢ –ë–ê–õ–ê–ù–°–ê:`);
      console.log(`   UNI: ${user251BalanceDeficit.uni}`);
      console.log(`   TON: ${user251BalanceDeficit.ton}`);
    }
    
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

diagnoseBalanceSystemFailure();