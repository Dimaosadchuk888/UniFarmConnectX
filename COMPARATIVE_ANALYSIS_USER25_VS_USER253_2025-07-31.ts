#!/usr/bin/env tsx
/**
 * üîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: User ID 25 VS User ID 253
 * –î–∞—Ç–∞: 31.07.2025
 * –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
 * –†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
 */

import { createClient } from '@supabase/supabase-js';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'your-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

interface UserProfile {
  id: number;
  telegram_id: string | null;
  username: string | null;
  first_name: string | null;
  ref_code: string | null;
  parent_ref_code: string | null;
  referred_by: number | null;
  balance_uni: string | null;
  balance_ton: string | null;
  uni_farming_active: boolean;
  ton_boost_active: boolean;
  ton_boost_package: number | null;
  ton_boost_rate: number | null;
  created_at: string;
  is_admin: boolean;
  status: string | null;
}

interface ConnectionAnalysis {
  userId: number;
  profile: UserProfile | null;
  connections: {
    hasTransactions: boolean;
    transactionCount: number;
    hasFarmingData: boolean;
    hasUserSessions: boolean;
    sessionCount: number;
    hasDailyBonus: boolean;
    bonusCount: number;
    hasReferrals: boolean;
    referralCount: number;
  };
  systemIntegration: {
    webSocketCompatible: boolean;
    apiAccessible: boolean;
    balanceSystemWorking: boolean;
    tonBoostConsistent: boolean;
  };
  anomalies: string[];
  differences: string[];
}

console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: User 25 VS User 253');
console.log('='.repeat(80));
console.log('üìã –†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –°–ò–°–¢–ï–ú–£');
console.log('üéØ –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
console.log('');

async function analyzeUser(userId: number): Promise<ConnectionAnalysis> {
  console.log(`\nüîç –ê–ù–ê–õ–ò–ó USER ${userId}:`);
  console.log('-'.repeat(50));

  const analysis: ConnectionAnalysis = {
    userId,
    profile: null,
    connections: {
      hasTransactions: false,
      transactionCount: 0,
      hasFarmingData: false,
      hasUserSessions: false,
      sessionCount: 0,
      hasDailyBonus: false,
      bonusCount: 0,
      hasReferrals: false,
      referralCount: 0
    },
    systemIntegration: {
      webSocketCompatible: false,
      apiAccessible: false,
      balanceSystemWorking: false,
      tonBoostConsistent: false
    },
    anomalies: [],
    differences: []
  };

  try {
    // 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`1Ô∏è‚É£ –û–°–ù–û–í–ù–û–ô –ü–†–û–§–ò–õ–¨ User ${userId}:`);
    const { data: userProfile, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (userError || !userProfile) {
      console.log(`‚ùå User ${userId} –ù–ï –ù–ê–ô–î–ï–ù: ${userError?.message || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
      analysis.anomalies.push(`USER_NOT_FOUND: ${userError?.message || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
      return analysis;
    }

    analysis.profile = userProfile;
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω: @${userProfile.username} (${userProfile.first_name})`);
    console.log(`   üì± Telegram ID: ${userProfile.telegram_id}`);
    console.log(`   üîó Ref Code: ${userProfile.ref_code || '–ù–ï–¢'}`);
    console.log(`   üí∞ UNI Balance: ${userProfile.balance_uni || '0'}`);
    console.log(`   üíé TON Balance: ${userProfile.balance_ton || '0'}`);
    console.log(`   üöÄ TON Boost: ${userProfile.ton_boost_active ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
    console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(userProfile.created_at).toLocaleString('ru-RU')}`);
    console.log(`   üëë –ê–¥–º–∏–Ω: ${userProfile.is_admin ? '–î–ê' : '–ù–ï–¢'}`);

    // 2. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log(`\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User ${userId}:`);
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('id, type, currency, amount, status, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);

    if (txError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txError.message}`);
      analysis.anomalies.push(`TRANSACTION_ERROR: ${txError.message}`);
    } else {
      analysis.connections.transactionCount = transactions?.length || 0;
      analysis.connections.hasTransactions = (transactions?.length || 0) > 0;
      
      console.log(`   üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${analysis.connections.transactionCount}`);
      
      if (transactions && transactions.length > 0) {
        console.log(`   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
        transactions.slice(0, 5).forEach((tx, index) => {
          console.log(`      [${index + 1}] ${tx.created_at} | ${tx.type} | ${tx.amount} ${tx.currency} | ${tx.status}`);
        });
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const txTypes = transactions.reduce((acc, tx) => {
          acc[tx.type] = (acc[tx.type] || 0) + 1;
          return acc;
        }, {} as Record<string, number>);
        
        console.log(`   üéØ –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:`, txTypes);
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞!`);
        analysis.anomalies.push('NO_TRANSACTIONS');
      }
    }

    // 3. –ê–Ω–∞–ª–∏–∑ TON farming data
    console.log(`\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON FARMING DATA User ${userId}:`);
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId);

    if (farmingError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ farming data: ${farmingError.message}`);
      analysis.anomalies.push(`FARMING_ERROR: ${farmingError.message}`);
    } else {
      analysis.connections.hasFarmingData = (farmingData?.length || 0) > 0;
      
      if (farmingData && farmingData.length > 0) {
        const farming = farmingData[0];
        console.log(`   ‚úÖ Farming Data –Ω–∞–π–¥–µ–Ω:`);
        console.log(`      Farming Balance: ${farming.farming_balance || 0}`);
        console.log(`      Farming Rate: ${farming.farming_rate || 0}`);
        console.log(`      Boost Active: ${farming.boost_active ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${farming.last_update || '–ù–∏–∫–æ–≥–¥–∞'}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        if (userProfile.ton_boost_active !== farming.boost_active) {
          console.log(`   ‚ö†Ô∏è  –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: users.ton_boost_active (${userProfile.ton_boost_active}) != farming.boost_active (${farming.boost_active})`);
          analysis.anomalies.push('TON_BOOST_INCONSISTENCY');
        }
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–ï–¢ FARMING DATA`);
        if (userProfile.ton_boost_active) {
          console.log(`   üö® –ö–†–ò–¢–ò–ß–ù–û: TON Boost –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞!`);
          analysis.anomalies.push('TON_BOOST_WITHOUT_DATA');
        }
      }
    }

    // 4. –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó USER SESSIONS User ${userId}:`);
    const { data: sessions, error: sessionError } = await supabase
      .from('user_sessions')
      .select('session_token, expires_at, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    if (sessionError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–π: ${sessionError.message}`);
      analysis.anomalies.push(`SESSION_ERROR: ${sessionError.message}`);
    } else {
      analysis.connections.sessionCount = sessions?.length || 0;
      analysis.connections.hasUserSessions = (sessions?.length || 0) > 0;
      
      console.log(`   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${analysis.connections.sessionCount}`);
      
      if (sessions && sessions.length > 0) {
        console.log(`   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:`);
        sessions.forEach((session, index) => {
          const isExpired = new Date(session.expires_at) < new Date();
          console.log(`      [${index + 1}] ${session.created_at} | –ò—Å—Ç–µ–∫–∞–µ—Ç: ${session.expires_at} | ${isExpired ? '–ò–°–¢–ï–ö–õ–ê' : '–ê–ö–¢–ò–í–ù–ê'}`);
        });
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –°–ï–°–°–ò–ô`);
        analysis.anomalies.push('NO_SESSIONS');
      }
    }

    // 5. –ê–Ω–∞–ª–∏–∑ daily bonus claims
    console.log(`\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó DAILY BONUS CLAIMS User ${userId}:`);
    const { data: bonusClaims, error: bonusError } = await supabase
      .from('daily_bonus_claims')
      .select('claimed_at, streak, bonus_amount')
      .eq('user_id', userId)
      .order('claimed_at', { ascending: false })
      .limit(5);

    if (bonusError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ bonus claims: ${bonusError.message}`);
      analysis.anomalies.push(`BONUS_ERROR: ${bonusError.message}`);
    } else {
      analysis.connections.bonusCount = bonusClaims?.length || 0;
      analysis.connections.hasDailyBonus = (bonusClaims?.length || 0) > 0;
      
      console.log(`   üìä –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: ${analysis.connections.bonusCount}`);
      
      if (bonusClaims && bonusClaims.length > 0) {
        console.log(`   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–æ–Ω—É—Å—ã:`);
        bonusClaims.forEach((bonus, index) => {
          console.log(`      [${index + 1}] ${bonus.claimed_at} | Streak: ${bonus.streak || 0} | Amount: ${bonus.bonus_amount || 0}`);
        });
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–ï–¢ DAILY BONUS CLAIMS`);
      }
    }

    // 6. –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    console.log(`\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–û–í User ${userId}:`);
    const { data: referrals, error: refError } = await supabase
      .from('users')
      .select('id, username, balance_uni, balance_ton, created_at')
      .eq('referred_by', userId);

    if (refError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${refError.message}`);
      analysis.anomalies.push(`REFERRAL_ERROR: ${refError.message}`);
    } else {
      analysis.connections.referralCount = referrals?.length || 0;
      analysis.connections.hasReferrals = (referrals?.length || 0) > 0;
      
      console.log(`   üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${analysis.connections.referralCount}`);
      
      if (referrals && referrals.length > 0) {
        console.log(`   üìã –†–µ—Ñ–µ—Ä–∞–ª—ã:`);
        referrals.forEach((ref, index) => {
          console.log(`      [${index + 1}] User ${ref.id} (@${ref.username}) | UNI: ${ref.balance_uni} | TON: ${ref.balance_ton}`);
        });
      }
    }

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log(`\n7Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò User ${userId}:`);
    
    // WebSocket —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    analysis.systemIntegration.webSocketCompatible = !!(
      userProfile.telegram_id && 
      analysis.connections.hasTransactions &&
      userProfile.ref_code
    );
    
    // API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    analysis.systemIntegration.apiAccessible = !!(
      userProfile.telegram_id && 
      userProfile.ref_code
    );
    
    // –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤
    analysis.systemIntegration.balanceSystemWorking = !!(
      analysis.connections.hasTransactions &&
      (parseFloat(userProfile.balance_uni || '0') > 0 || parseFloat(userProfile.balance_ton || '0') > 0)
    );
    
    // TON Boost –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    analysis.systemIntegration.tonBoostConsistent = !(
      userProfile.ton_boost_active && !analysis.connections.hasFarmingData
    );

    console.log(`   üîó WebSocket —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${analysis.systemIntegration.webSocketCompatible ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`   üåê API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${analysis.systemIntegration.apiAccessible ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`   üí∞ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤: ${analysis.systemIntegration.balanceSystemWorking ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`   üöÄ TON Boost –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${analysis.systemIntegration.tonBoostConsistent ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);

  } catch (error) {
    console.log(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ User ${userId}:`, error);
    analysis.anomalies.push(`CRITICAL_ERROR: ${error}`);
  }

  return analysis;
}

function compareUsers(user25: ConnectionAnalysis, user253: ConnectionAnalysis): void {
  console.log('\nüîÑ –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï User 25 VS User 253:');
  console.log('='.repeat(80));

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –û–°–ù–û–í–ù–´–• –ü–†–û–§–ò–õ–ï–ô:');
  console.log('-'.repeat(50));
  
  const profile25 = user25.profile;
  const profile253 = user253.profile;
  
  if (!profile25 || !profile253) {
    console.log('‚ùå –ù–ï–í–û–ó–ú–û–ñ–ù–û –°–†–ê–í–ù–ò–¢–¨: –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  const fields = [
    'telegram_id', 'username', 'ref_code', 'balance_uni', 'balance_ton', 
    'uni_farming_active', 'ton_boost_active', 'ton_boost_package', 'is_admin', 'created_at'
  ];

  fields.forEach(field => {
    const value25 = profile25[field as keyof UserProfile];
    const value253 = profile253[field as keyof UserProfile];
    
    if (value25 !== value253) {
      console.log(`üî∏ ${field}:`);
      console.log(`   User 25:  ${value25}`);
      console.log(`   User 253: ${value253}`);
      console.log(`   –†–∞–∑–ª–∏—á–∏–µ: ${value25 === null ? 'NULL —É 25' : value253 === null ? 'NULL —É 253' : '–†–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'}`);
    } else {
      console.log(`‚úÖ ${field}: –ò–î–ï–ù–¢–ò–ß–ù–û (${value25})`);
    }
  });

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  console.log('\nüîó –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:');
  console.log('-'.repeat(50));
  
  const connections = [
    'hasTransactions', 'transactionCount', 'hasFarmingData', 
    'hasUserSessions', 'sessionCount', 'hasDailyBonus', 
    'bonusCount', 'hasReferrals', 'referralCount'
  ];

  connections.forEach(conn => {
    const conn25 = user25.connections[conn as keyof typeof user25.connections];
    const conn253 = user253.connections[conn as keyof typeof user253.connections];
    
    if (conn25 !== conn253) {
      console.log(`üî∏ ${conn}:`);
      console.log(`   User 25:  ${conn25}`);
      console.log(`   User 253: ${conn253}`);
    } else {
      console.log(`‚úÖ ${conn}: –ò–î–ï–ù–¢–ò–ß–ù–û (${conn25})`);
    }
  });

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  console.log('\n‚öôÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
  console.log('-'.repeat(50));
  
  const integrations = [
    'webSocketCompatible', 'apiAccessible', 
    'balanceSystemWorking', 'tonBoostConsistent'
  ];

  integrations.forEach(integration => {
    const int25 = user25.systemIntegration[integration as keyof typeof user25.systemIntegration];
    const int253 = user253.systemIntegration[integration as keyof typeof user253.systemIntegration];
    
    if (int25 !== int253) {
      console.log(`üî∏ ${integration}:`);
      console.log(`   User 25:  ${int25 ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
      console.log(`   User 253: ${int253 ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    } else {
      console.log(`‚úÖ ${integration}: –ò–î–ï–ù–¢–ò–ß–ù–û (${int25 ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'})`);
    }
  });

  // –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
  console.log('\nüö® –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–ò–ô:');
  console.log('-'.repeat(50));
  
  console.log(`üî∏ User 25 –∞–Ω–æ–º–∞–ª–∏–∏ (${user25.anomalies.length}):`);
  user25.anomalies.forEach(anomaly => console.log(`   - ${anomaly}`));
  
  console.log(`üî∏ User 253 –∞–Ω–æ–º–∞–ª–∏–∏ (${user253.anomalies.length}):`);
  user253.anomalies.forEach(anomaly => console.log(`   - ${anomaly}`));

  // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
  console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –°–†–ê–í–ù–ï–ù–ò–Ø:');
  console.log('-'.repeat(50));
  
  const totalDifferences = fields.filter(field => 
    profile25[field as keyof UserProfile] !== profile253[field as keyof UserProfile]
  ).length;
  
  const systemDifferences = integrations.filter(integration =>
    user25.systemIntegration[integration as keyof typeof user25.systemIntegration] !== 
    user253.systemIntegration[integration as keyof typeof user253.systemIntegration]
  ).length;

  console.log(`üìä –†–∞–∑–ª–∏—á–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ: ${totalDifferences}/${fields.length}`);
  console.log(`üîó –†–∞–∑–ª–∏—á–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${systemDifferences}/${integrations.length}`);
  console.log(`üö® –ê–Ω–æ–º–∞–ª–∏–π User 25: ${user25.anomalies.length}`);
  console.log(`üö® –ê–Ω–æ–º–∞–ª–∏–π User 253: ${user253.anomalies.length}`);
  
  if (totalDifferences === 0 && systemDifferences === 0) {
    console.log(`‚úÖ –ê–ö–ö–ê–£–ù–¢–´ –ò–î–ï–ù–¢–ò–ß–ù–´ - –≥–∏–ø–æ—Ç–µ–∑–∞ —Ä–∞–∑–ª–∏—á–∏–π –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê`);
  } else {
    console.log(`üî∏ –ê–ö–ö–ê–£–ù–¢–´ –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø - –≥–∏–ø–æ—Ç–µ–∑–∞ —Ä–∞–∑–ª–∏—á–∏–π –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê`);
  }
}

async function runComparativeAnalysis(): Promise<void> {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê');
    
    // –ê–Ω–∞–ª–∏–∑ User 25
    const user25Analysis = await analyzeUser(25);
    
    // –ê–Ω–∞–ª–∏–∑ User 253
    const user253Analysis = await analyzeUser(253);
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    compareUsers(user25Analysis, user253Analysis);
    
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runComparativeAnalysis();