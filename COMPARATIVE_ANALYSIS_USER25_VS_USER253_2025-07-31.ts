/**
 * üîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: User ID 25 vs 9 –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * –î–∞—Ç–∞: 31.07.2025
 * –¶–µ–ª—å: –ù–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –ë–î —É –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * –ü—Ä–∏–Ω—Ü–∏–ø: ref_code –ù–ï –¢–†–û–ì–ê–¢–¨, —Ç–æ–ª—å–∫–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */

// –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const TARGET_PARTICIPANTS = [
  '@Irinkatriumf',
  '@LeLila90', 
  '@lvereskun',
  '@Artem_dpp',
  '@Glazeb0',
  '@Rostik_m09',
  '@al_eksand0',
  '@Dima_27976',
  '@Dezertoddd'
];

// –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ User ID 25 (—Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
interface UserConnectionProfile {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  id: number;
  username: string;
  telegram_id: number | null;
  ref_code: string | null;
  balance_uni: string;
  balance_ton: string;
  
  // –°—Ç–∞—Ç—É—Å—ã —Å–∏—Å—Ç–µ–º
  ton_boost_active: boolean;
  uni_farming_active: boolean;
  ton_farming_balance: string;
  ton_farming_rate: string;
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º
  connections: {
    has_transactions: boolean;
    transaction_count: number;
    has_sessions: boolean;
    session_count: number;
    has_ton_farming_data: boolean;
    has_user_balances: boolean;
    has_farming_deposits: boolean;
    has_referrals: boolean;
  };
  
  // –ü—Ä–æ–±–ª–µ–º—ã
  issues: string[];
  recommendations: string[];
  priority: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' | '–í–´–°–û–ö–ò–ô' | '–°–†–ï–î–ù–ò–ô' | '–ù–ò–ó–ö–ò–ô' | '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø';
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π User ID 25 (—ç—Ç–∞–ª–æ–Ω)
const USER25_TEMPLATE: UserConnectionProfile = {
  id: 25,
  username: 'user25', // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è
  telegram_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ë–î
  ref_code: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ë–î
  balance_uni: '0',
  balance_ton: '0',
  ton_boost_active: false,
  uni_farming_active: false,
  ton_farming_balance: '0',
  ton_farming_rate: '0.001',
  connections: {
    has_transactions: true, // –£ User 25 –µ—Å—Ç—å 583+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_count: 583,
    has_sessions: true, // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–µ—Å—Å–∏–∏
    session_count: 10, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    has_ton_farming_data: true, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
    has_user_balances: false, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    has_farming_deposits: true, // –ï—Å—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç—ã
    has_referrals: true // –ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã
  },
  issues: [],
  recommendations: [],
  priority: '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø'
};

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–∞–ª–æ–Ω–∞ User ID 25
 */
async function analyzeParticipantVsUser25(username: string): Promise<UserConnectionProfile> {
  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${username} –ø—Ä–æ—Ç–∏–≤ —ç—Ç–∞–ª–æ–Ω–∞ User ID 25...`);
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
  // const participant = await getParticipantData(username);
  
  // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const participantProfile: UserConnectionProfile = {
    id: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    username: username,
    telegram_id: null,
    ref_code: null,
    balance_uni: '0',
    balance_ton: '0',
    ton_boost_active: false,
    uni_farming_active: false,
    ton_farming_balance: '0',
    ton_farming_rate: '0.001',
    connections: {
      has_transactions: false,
      transaction_count: 0,
      has_sessions: false,
      session_count: 0,
      has_ton_farming_data: false,
      has_user_balances: false,
      has_farming_deposits: false,
      has_referrals: false
    },
    issues: [],
    recommendations: [],
    priority: '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø'
  };
  
  return participantProfile;
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —ç—Ç–∞–ª–æ–Ω–æ–º User ID 25
 */
function compareWithUser25Template(participant: UserConnectionProfile): UserConnectionProfile {
  const issues: string[] = [];
  const recommendations: string[] = [];
  let priority: UserConnectionProfile['priority'] = '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø';
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: telegram_id
  if (!participant.telegram_id) {
    issues.push('‚ùå –ù–ï–¢ TELEGRAM_ID');
    recommendations.push('–£–°–¢–ê–ù–û–í–ò–¢–¨ telegram_id –∏–∑ Telegram WebApp –¥–∞–Ω–Ω—ã—Ö');
    priority = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è BalanceManager)
  if (!participant.connections.has_transactions || participant.connections.transaction_count === 0) {
    issues.push('‚ùå –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    recommendations.push('–°–û–ó–î–ê–¢–¨ –±–∞–∑–æ–≤—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è BalanceManager');
    if (priority === '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø') priority = '–í–´–°–û–ö–ò–ô';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–µ—Å—Å–∏–∏ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  if (!participant.connections.has_sessions || participant.connections.session_count === 0) {
    issues.push('‚ùå –ù–ï–¢ USER_SESSIONS');
    recommendations.push('–°–û–ó–î–ê–¢–¨ –±–∞–∑–æ–≤—É—é user_session –¥–ª—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    if (priority === '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø') priority = '–í–´–°–û–ö–ò–ô';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: TON Boost —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  if (participant.ton_boost_active && !participant.connections.has_ton_farming_data) {
    issues.push('‚ùå TON BOOST –ù–ï –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù');
    recommendations.push('–°–û–ó–î–ê–¢–¨ –∑–∞–ø–∏—Å—å –≤ ton_farming_data –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ TON Boost');
    if (priority === '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø') priority = '–°–†–ï–î–ù–ò–ô';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
  if (participant.connections.has_user_balances) {
    issues.push('‚ö†Ô∏è –ë–ê–õ–ê–ù–°–´ –í –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ô –¢–ê–ë–õ–ò–¶–ï');
    recommendations.push('–ú–ò–ì–†–ò–†–û–í–ê–¢–¨ –±–∞–ª–∞–Ω—Å—ã –∏–∑ user_balances –≤ users –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å User ID 25');
    if (priority === '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø') priority = '–ù–ò–ó–ö–ò–ô';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –û—Ç–ª–∏—á–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const txDifference = Math.abs(participant.connections.transaction_count - USER25_TEMPLATE.connections.transaction_count);
  if (txDifference > 100) {
    issues.push(`‚ö†Ô∏è –ë–û–õ–¨–®–û–ï –û–¢–õ–ò–ß–ò–ï –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–• (${txDifference} –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞)`);
    recommendations.push('–ü–†–û–í–ï–†–ò–¢–¨ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–ª–∏—á–∏–π –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  }
  
  return {
    ...participant,
    issues,
    recommendations,
    priority
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 */
function generateIndividualRecommendations(profile: UserConnectionProfile): string {
  let report = `\n=== –£–ß–ê–°–¢–ù–ò–ö: ${profile.username} (ID: ${profile.id}) ===\n`;
  
  // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  report += `üìä –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –°–ò–°–¢–ï–ú–ï:\n`;
  report += `   ‚Ä¢ Telegram ID: ${profile.telegram_id ? '‚úÖ' : '‚ùå'}\n`;
  report += `   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${profile.connections.has_transactions ? '‚úÖ' : '‚ùå'} (${profile.connections.transaction_count})\n`;
  report += `   ‚Ä¢ –°–µ—Å—Å–∏–∏: ${profile.connections.has_sessions ? '‚úÖ' : '‚ùå'} (${profile.connections.session_count})\n`;
  report += `   ‚Ä¢ TON Farming Data: ${profile.connections.has_ton_farming_data ? '‚úÖ' : '‚ùå'}\n`;
  report += `   ‚Ä¢ Alt Balances: ${profile.connections.has_user_balances ? '‚ö†Ô∏è' : '‚úÖ'}\n`;
  
  // –ü—Ä–æ–±–ª–µ–º—ã
  if (profile.issues.length > 0) {
    report += `\nüîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:\n`;
    profile.issues.forEach(issue => {
      report += `   ${issue}\n`;
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (profile.recommendations.length > 0) {
    report += `\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:\n`;
    profile.recommendations.forEach((rec, index) => {
      report += `   ${index + 1}. ${rec}\n`;
    });
  }
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  report += `\n‚ö° –ü–†–ò–û–†–ò–¢–ï–¢: ${profile.priority}\n`;
  
  // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (profile.recommendations.length > 0) {
    report += `\nüíª –ì–û–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n`;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (profile.issues.some(i => i.includes('–ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô'))) {
      report += `   INSERT INTO transactions (user_id, transaction_type, currency, amount, status, description)\n`;
      report += `   VALUES (${profile.id}, 'SYSTEM_INIT', 'UNI', 0, 'confirmed', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è BalanceManager');\n`;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (profile.issues.some(i => i.includes('–ù–ï–¢ USER_SESSIONS'))) {
      report += `   INSERT INTO user_sessions (user_id, session_token, expires_at)\n`;
      report += `   VALUES (${profile.id}, 'temp_${profile.id}_${Date.now()}', NOW() + INTERVAL '30 days');\n`;
    }
    
    // TON Farming Data
    if (profile.issues.some(i => i.includes('TON BOOST –ù–ï –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù'))) {
      report += `   INSERT INTO ton_farming_data (user_id, farming_balance, farming_rate, boost_active)\n`;
      report += `   VALUES ('${profile.id}', ${profile.ton_farming_balance}, ${profile.ton_farming_rate}, ${profile.ton_boost_active});\n`;
    }
  }
  
  return report;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
async function analyzeAllParticipantsVsUser25(): Promise<string> {
  let fullReport = `üîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó 9 –£–ß–ê–°–¢–ù–ò–ö–û–í –ü–†–û–¢–ò–í –≠–¢–ê–õ–û–ù–ê USER ID 25\n`;
  fullReport += `–î–∞—Ç–∞: ${new Date().toISOString().split('T')[0]}\n`;
  fullReport += `–ü—Ä–∏–Ω—Ü–∏–ø: ref_code –ù–ï –¢–†–û–ì–ê–¢–¨, —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –ë–î\n`;
  fullReport += `=`.repeat(80) + '\n';
  
  // –≠—Ç–∞–ª–æ–Ω User ID 25
  fullReport += `\n‚≠ê –≠–¢–ê–õ–û–ù: USER ID 25\n`;
  fullReport += `   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${USER25_TEMPLATE.connections.transaction_count}+\n`;
  fullReport += `   ‚Ä¢ –°–µ—Å—Å–∏–∏: ${USER25_TEMPLATE.connections.session_count}+\n`;
  fullReport += `   ‚Ä¢ TON Farming: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω\n`;
  fullReport += `   ‚Ä¢ –ë–∞–ª–∞–Ω—Å—ã: –í –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ users\n`;
  fullReport += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û\n`;
  
  // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const participantReports: string[] = [];
  const summaryData: Array<{username: string, priority: string, issueCount: number}> = [];
  
  for (const username of TARGET_PARTICIPANTS) {
    try {
      const participantProfile = await analyzeParticipantVsUser25(username);
      const comparedProfile = compareWithUser25Template(participantProfile);
      const individualReport = generateIndividualRecommendations(comparedProfile);
      
      participantReports.push(individualReport);
      summaryData.push({
        username: comparedProfile.username,
        priority: comparedProfile.priority,
        issueCount: comparedProfile.issues.length
      });
      
    } catch (error) {
      participantReports.push(`\n‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê ${username}: ${error}\n`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  participantReports.forEach(report => {
    fullReport += report;
  });
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
  fullReport += `\n${'='.repeat(80)}\n`;
  fullReport += `üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:\n`;
  
  const criticalCount = summaryData.filter(p => p.priority === '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô').length;
  const highCount = summaryData.filter(p => p.priority === '–í–´–°–û–ö–ò–ô').length;
  const mediumCount = summaryData.filter(p => p.priority === '–°–†–ï–î–ù–ò–ô').length;
  const lowCount = summaryData.filter(p => p.priority === '–ù–ò–ó–ö–ò–ô').length;
  const okCount = summaryData.filter(p => p.priority === '–ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø').length;
  
  fullReport += `   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${criticalCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
  fullReport += `   üü† –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${highCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
  fullReport += `   üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${mediumCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
  fullReport += `   üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${lowCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
  fullReport += `   ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º: ${okCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
  
  return fullReport;
}

/**
 * –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
const PARTICIPANT_ANALYSIS_QUERIES = {
  // –ù–∞–π—Ç–∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ username
  findParticipantIds: `
    SELECT id, username, telegram_id, ref_code, balance_uni, balance_ton,
           ton_boost_active, uni_farming_active, created_at
    FROM users 
    WHERE username IN (${TARGET_PARTICIPANTS.map(u => `'${u.replace('@', '')}'`).join(', ')})
    ORDER BY username;
  `,
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  analyzeParticipantConnections: (userId: number) => `
    WITH participant_data AS (
      SELECT 
        u.*,
        COUNT(DISTINCT t.id) as transaction_count,
        COUNT(DISTINCT s.id) as session_count,
        CASE WHEN EXISTS(SELECT 1 FROM ton_farming_data WHERE user_id = u.id::text) THEN true ELSE false END as has_ton_farming_data,
        CASE WHEN EXISTS(SELECT 1 FROM user_balances WHERE user_id = u.id) THEN true ELSE false END as has_user_balances,
        COUNT(DISTINCT fd.id) as farming_deposits_count,
        COUNT(DISTINCT r.id) as referrals_count
      FROM users u
      LEFT JOIN transactions t ON u.id = t.user_id
      LEFT JOIN user_sessions s ON u.id = s.user_id
      LEFT JOIN farming_deposits fd ON u.id = fd.user_id
      LEFT JOIN referrals r ON u.id = r.inviter_id
      WHERE u.id = ${userId}
      GROUP BY u.id
    )
    SELECT * FROM participant_data;
  `,
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å User ID 25
  compareWithUser25: `
    WITH user25_stats AS (
      SELECT 
        COUNT(DISTINCT t.id) as user25_transactions,
        COUNT(DISTINCT s.id) as user25_sessions,
        CASE WHEN EXISTS(SELECT 1 FROM ton_farming_data WHERE user_id = '25') THEN true ELSE false END as user25_has_farming_data
      FROM users u
      LEFT JOIN transactions t ON u.id = t.user_id AND u.id = 25
      LEFT JOIN user_sessions s ON u.id = s.user_id AND u.id = 25
      WHERE u.id = 25
    ),
    participants_stats AS (
      SELECT 
        u.id, u.username,
        COUNT(DISTINCT t.id) as participant_transactions,
        COUNT(DISTINCT s.id) as participant_sessions,
        CASE WHEN EXISTS(SELECT 1 FROM ton_farming_data WHERE user_id = u.id::text) THEN true ELSE false END as participant_has_farming_data
      FROM users u
      LEFT JOIN transactions t ON u.id = t.user_id
      LEFT JOIN user_sessions s ON u.id = s.user_id
      WHERE u.username IN (${TARGET_PARTICIPANTS.map(u => `'${u.replace('@', '')}'`).join(', ')})
      GROUP BY u.id, u.username
    )
    SELECT 
      p.*,
      u25.user25_transactions,
      u25.user25_sessions,
      u25.user25_has_farming_data,
      ABS(p.participant_transactions - u25.user25_transactions) as tx_difference,
      ABS(p.participant_sessions - u25.user25_sessions) as session_difference
    FROM participants_stats p
    CROSS JOIN user25_stats u25
    ORDER BY tx_difference DESC, session_difference DESC;
  `
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export {
  analyzeAllParticipantsVsUser25,
  analyzeParticipantVsUser25,
  compareWithUser25Template,
  generateIndividualRecommendations,
  PARTICIPANT_ANALYSIS_QUERIES,
  TARGET_PARTICIPANTS,
  USER25_TEMPLATE
};

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ç–∏–≤ User ID 25...');
  
  analyzeAllParticipantsVsUser25()
    .then(report => {
      console.log(report);
      console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.');
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    });
}