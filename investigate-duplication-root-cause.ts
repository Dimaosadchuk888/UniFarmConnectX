import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function investigateDuplicationRootCause() {
  console.log('üîç –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–û–†–ù–Ø –ü–†–û–ë–õ–ï–ú–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('=' .repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
    console.log('\n1Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184:');
    const { data: recentDeposits, error: depositsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 184)
      .in('type', ['TON_DEPOSIT', 'DEPOSIT'])
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);

    if (depositsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsError);
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${recentDeposits?.length || 0} –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
    recentDeposits?.forEach((tx, i) => {
      console.log(`${i + 1}. ID: ${tx.id} | –°—É–º–º–∞: ${tx.amount || tx.amount_ton} TON | –í—Ä–µ–º—è: ${tx.created_at}`);
      console.log(`   Hash: ${tx.tx_hash || '–Ω–µ—Ç'} | BOC: ${tx.boc || '–Ω–µ—Ç'}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
    });

    // 2. –ò—â–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –¢–û–ß–ù–´–• –î–£–ë–õ–ò–ö–ê–¢–û–í:');
    if (recentDeposits && recentDeposits.length >= 2) {
      const latest = recentDeposits[0];
      const secondLatest = recentDeposits[1];
      
      console.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1:', {
        id: latest.id,
        amount: latest.amount || latest.amount_ton,
        tx_hash: latest.tx_hash,
        boc: latest.boc,
        created_at: latest.created_at
      });
      console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 2:', {
        id: secondLatest.id,
        amount: secondLatest.amount || secondLatest.amount_ton,
        tx_hash: secondLatest.tx_hash,
        boc: secondLatest.boc,
        created_at: secondLatest.created_at
      });

      // –ü—Ä–æ–≤–µ—Ä–∏–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å
      const sameAmount = (latest.amount || latest.amount_ton) === (secondLatest.amount || secondLatest.amount_ton);
      const sameHash = latest.tx_hash === secondLatest.tx_hash;
      const sameBoc = latest.boc === secondLatest.boc;
      const timeDiff = Math.abs(new Date(latest.created_at).getTime() - new Date(secondLatest.created_at).getTime()) / 1000;

      console.log('\nüîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
      console.log(`–û–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—É–º–º–∞: ${sameAmount ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      console.log(`–û–¥–∏–Ω–∞–∫–æ–≤—ã–π tx_hash: ${sameHash ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      console.log(`–û–¥–∏–Ω–∞–∫–æ–≤—ã–π BOC: ${sameBoc ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      console.log(`–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiff} —Å–µ–∫—É–Ω–¥`);

      if (sameAmount && (sameHash || sameBoc) && timeDiff < 60) {
        console.log('üö® –ù–ê–ô–î–ï–ù –î–£–ë–õ–ò–ö–ê–¢! –î–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã');
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –ë–î
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ë–î:');
    const { data: constraints, error: constraintsError } = await supabase
      .rpc('get_table_constraints', { table_name: 'transactions' });

    if (!constraintsError && constraints) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:');
      constraints.forEach((constraint: any) => {
        console.log(`- ${constraint.constraint_name}: ${constraint.constraint_type}`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ BOC –∏–ª–∏ tx_hash –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:');
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    
    const { data: duplicatesBoc, error: bocError } = await supabase
      .from('transactions')
      .select('boc, tx_hash, amount, amount_ton, created_at, user_id')
      .eq('user_id', 184)
      .eq('currency', 'TON')
      .gte('created_at', yesterday)
      .not('boc', 'is', null);

    if (!bocError && duplicatesBoc) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${duplicatesBoc.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å BOC –∑–∞ 24 —á–∞—Å–∞:`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ BOC
      const bocGroups = duplicatesBoc.reduce((acc: any, tx: any) => {
        const boc = tx.boc;
        if (!acc[boc]) acc[boc] = [];
        acc[boc].push(tx);
        return acc;
      }, {});

      Object.entries(bocGroups).forEach(([boc, txs]: [string, any]) => {
        if (txs.length > 1) {
          console.log(`üö® –î–£–ë–õ–ò–ö–ê–¢ BOC –Ω–∞–π–¥–µ–Ω: ${boc}`);
          txs.forEach((tx: any, i: number) => {
            console.log(`  ${i + 1}. –°—É–º–º–∞: ${tx.amount || tx.amount_ton} | –í—Ä–µ–º—è: ${tx.created_at}`);
          });
        }
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è extractBaseBoc –≤ –∫–æ–¥–µ
    const fs = require('fs');
    const transactionServicePath = './core/TransactionService.ts';
    
    if (fs.existsSync(transactionServicePath)) {
      const content = fs.readFileSync(transactionServicePath, 'utf8');
      const hasExtractBaseBoc = content.includes('extractBaseBoc');
      const hasDeduplicationLogic = content.includes('duplicate') || content.includes('–¥—É–±–ª–∏–∫–∞—Ç');
      
      console.log(`extractBaseBoc —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${hasExtractBaseBoc ? '‚úÖ' : '‚ùå'}`);
      console.log(`–õ–æ–≥–∏–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞: ${hasDeduplicationLogic ? '‚úÖ' : '‚ùå'}`);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n6Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    const { data: userBalance, error: balanceError } = await supabase
      .from('users')
      .select('balance_ton, ton_farming_balance')
      .eq('id', 184)
      .single();

    if (!balanceError && userBalance) {
      console.log(`TON –±–∞–ª–∞–Ω—Å: ${userBalance.balance_ton}`);
      console.log(`TON —Ñ–∞—Ä–º–∏–Ω–≥ –±–∞–ª–∞–Ω—Å: ${userBalance.ton_farming_balance}`);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

investigateDuplicationRootCause().catch(console.error);