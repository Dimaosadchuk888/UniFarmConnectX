import dotenv from 'dotenv';
dotenv.config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
const JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjc0LCJ0ZWxlZ3JhbUlkIjoiOTk5NDg5IiwidXNlcm5hbWUiOiJ0ZXN0X3VzZXJfNzQiLCJyZWZDb2RlIjoiWFBDR01XIiwiaWF0IjoxNzUyMzIyNDczLCJleHAiOjE3NTI5MjcyNzN9.FqITbdJeF-z1TqfRh9v4LGrJ6zOXGfQdw93QYHvCJjo';

async function checkDailyBonusAPI() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Daily Bonus API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Daily Bonus...');
    const statsResponse = await fetch('http://localhost:3000/api/v2/daily-bonus/74/stats', {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!statsResponse.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsResponse.status} ${statsResponse.statusText}`);
    } else {
      const stats = await statsResponse.json();
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', JSON.stringify(stats, null, 2));
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const txResponse = await fetch('http://localhost:3000/api/v2/wallet/transactions?limit=50', {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!txResponse.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txResponse.status} ${txResponse.statusText}`);
    } else {
      const txData = await txResponse.json();
      console.log(`‚úÖ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txData.data?.length || 0}`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º daily bonus —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const dailyBonusTx = txData.data?.filter((tx: any) => 
        tx.type === 'daily_bonus' || tx.type === 'DAILY_BONUS'
      ) || [];
      
      console.log(`‚úÖ Daily Bonus —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${dailyBonusTx.length}`);
      if (dailyBonusTx.length > 0) {
        console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ Daily Bonus —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
        dailyBonusTx.slice(0, 5).forEach((tx: any) => {
          console.log(`  [${tx.created_at}] +${tx.amount_uni} UNI - ${tx.description}`);
        });
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    const balanceResponse = await fetch('http://localhost:3000/api/v2/wallet/balance', {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!balanceResponse.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: ${balanceResponse.status} ${balanceResponse.statusText}`);
    } else {
      const balance = await balanceResponse.json();
      console.log('‚úÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', JSON.stringify(balance.data, null, 2));
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    console.log('\n‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  }

  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
let attempts = 0;
const maxAttempts = 10;

async function waitForServerAndCheck() {
  try {
    const response = await fetch('http://localhost:3000/api/health');
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
      await checkDailyBonusAPI();
    } else {
      throw new Error('Server not ready');
    }
  } catch (error) {
    attempts++;
    if (attempts < maxAttempts) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
      setTimeout(waitForServerAndCheck, 2000);
    } else {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ 20 —Å–µ–∫—É–Ω–¥');
    }
  }
}

waitForServerAndCheck();