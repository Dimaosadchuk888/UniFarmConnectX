/**
 * –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER #25 TON –î–ï–ü–û–ó–ò–¢–ê
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏: API –≤—ã–∑–æ–≤—ã ‚Üí DB –∑–∞–ø–∏—Å–∏ ‚Üí Frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function comprehensiveDiagnosis() {
  console.log('üéØ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–ê USER #25');
  console.log('Hash: 00a1ba3c2614f4d65cc346805feea96042cb111351b3977c68f3379ddb90e1b4');
  console.log('Expected Amount: 0.1 TON');
  console.log('========================================================');
  
  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    console.log('\n1. üë§ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, ref_code, created_at, updated_at')
      .or('id.eq.25,telegram_id.eq.425855744');
    
    if (userError || !users || users.length === 0) {
      console.log('‚ùå User #25 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const user = users[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
    console.log('‚úÖ User –Ω–∞–π–¥–µ–Ω:', {
      id: user.id,
      telegram_id: user.telegram_id,
      username: user.username,
      balance_ton: user.balance_ton,
      ref_code: user.ref_code
    });
    
    // 2. –ü–û–ò–°–ö –ü–û –•–ï–®–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    console.log('\n2. üîç –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û –•–ï–®–£');
    const targetHash = '00a1ba3c2614f4d65cc346805feea96042cb111351b3977c68f3379ddb90e1b4';
    
    const { data: hashTx, error: hashError } = await supabase
      .from('transactions')
      .select('*')
      .ilike('description', `%${targetHash}%`);
    
    console.log(`üîé –ü–æ–∏—Å–∫ –ø–æ —Ö–µ—à—É "${targetHash.substring(0, 20)}..."`);
    if (hashError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ö–µ—à—É:', hashError.message);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${hashTx?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —ç—Ç–∏–º —Ö–µ—à–µ–º`);
      hashTx?.forEach(tx => {
        console.log(`   - ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount} ${tx.currency}`);
        console.log(`     Created: ${tx.created_at}`);
      });
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• TON –î–ï–ü–û–ó–ò–¢–û–í USER #25
    console.log('\n3. üí∞ –ü–†–û–í–ï–†–ö–ê –í–°–ï–• TON –û–ü–ï–†–ê–¶–ò–ô USER #25');
    const { data: tonTxs, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', user.id)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
    
    if (tonError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError.message);
    } else {
      console.log(`üìà –í—Å–µ–≥–æ TON –æ–ø–µ—Ä–∞—Ü–∏–π —É User #25: ${tonTxs?.length || 0}`);
      tonTxs?.forEach((tx, index) => {
        console.log(`   ${index + 1}. ID: ${tx.id} | ${tx.type} | ${tx.amount} TON | ${tx.status}`);
        console.log(`      Created: ${tx.created_at}`);
        console.log(`      Description: ${tx.description}`);
        console.log('      ---');
      });
      
      // –ü–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ 0.1 TON
      const depositMatches = tonTxs?.filter(tx => 
        tx.type === 'DEPOSIT' && (tx.amount === '0.1' || tx.amount === 0.1)
      );
      console.log(`üéØ –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ 0.1 TON: ${depositMatches?.length || 0}`);
    }
    
    // 4. –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\n4. üèóÔ∏è –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ TRANSACTIONS');
    const { data: schemaInfo, error: schemaError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'transactions')
      .limit(15);
      
    if (!schemaError && schemaInfo) {
      console.log('üìã –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions:');
      schemaInfo.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }
    
    // 5. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê
    console.log('\n5. ‚ö° –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê USER #25');
    const { data: recentTxs, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', user.id)
      .gte('created_at', '2025-07-19T00:00:00Z') // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (!recentError && recentTxs) {
      console.log(`üìÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å 19 –∏—é–ª—è: ${recentTxs.length}`);
      recentTxs.forEach(tx => {
        console.log(`   - ${tx.created_at}: ${tx.type} ${tx.amount} ${tx.currency}`);
      });
    }
    
    // 6. –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–´–• –û–®–ò–ë–û–ö –¢–ò–ü–û–í
    console.log('\n6. üîß –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    const { data: typeCheck, error: typeError } = await supabase
      .from('transactions')
      .select('type')
      .eq('user_id', user.id)
      .limit(1);
      
    if (!typeError) {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ transactions —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º enum –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è type
    const { data: enumValues, error: enumError } = await supabase
      .rpc('get_enum_values', { enum_name: 'transaction_type' })
      .single();
      
    if (!enumError && enumValues) {
      console.log('üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', enumValues);
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å enum —Ç–∏–ø—ã');
    }
    
    // 7. –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\n7. üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´');
    console.log('===========================');
    console.log(`environment: production`);
    console.log(`user_id: ${user.id}`);
    console.log(`telegram_id: ${user.telegram_id}`);
    console.log(`username: ${user.username}`);
    console.log(`current_ton_balance: ${user.balance_ton}`);
    console.log(`tx_hash_found: ${(hashTx?.length || 0) > 0 ? 'true' : 'false'}`);
    console.log(`ton_transactions_total: ${tonTxs?.length || 0}`);
    console.log(`recent_transactions: ${recentTxs?.length || 0}`);
    console.log(`balance_updated: ${user.balance_ton > 0 ? 'true' : 'false'}`);
    
    if ((hashTx?.length || 0) === 0 && user.balance_ton === 0) {
      console.log(`suspected_cause: Frontend –ù–ï –í–´–ó–í–ê–õ backend API –∏–ª–∏ backend –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥–µ–ø–æ–∑–∏—Ç`);
      console.log(`next_steps_suggestion: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ frontend console –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–µ–ø–æ–∑–∏—Ç–∞`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

comprehensiveDiagnosis();