/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –º–æ–¥–µ–ª–∏ UniFarm
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ü–µ–ø–æ—á–∫–µ
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function applyNewModelToUser(userId, sourceIncome, chainUsers) {
  try {
    // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const referrerChain = [];
    let currentUserId = userId;
    
    while (referrerChain.length < 20) {
      const user = chainUsers.find(u => u.id === currentUserId);
      if (!user || !user.referred_by) break;
      
      referrerChain.push(user.referred_by);
      currentUserId = user.referred_by;
    }
    
    if (referrerChain.length === 0) return [];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    const rewards = [];
    
    for (let i = 0; i < referrerChain.length; i++) {
      const level = i + 1;
      const referrerId = referrerChain[i];
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞: Level 1 = 100%, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = level%
      const commissionRate = level === 1 ? 1.0 : level / 100;
      const commissionAmount = sourceIncome * commissionRate;
      const percentage = commissionRate * 100;
      
      rewards.push({
        userId: referrerId,
        level,
        percentage,
        amount: commissionAmount,
        description: `New model L${level}: ${commissionAmount.toFixed(6)} UNI (${percentage}%)`
      });
    }
    
    return rewards;
    
  } catch (err) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è User ${userId}:`, err.message);
    return [];
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
 */
async function testNewModelOnActiveChain() {
  console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –ú–û–î–ï–õ–ò –ù–ê –ê–ö–¢–ò–í–ù–û–ô –¶–ï–ü–û–ß–ö–ï ===');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: allUsers, error } = await supabase
      .from('users')
      .select('id, username, referred_by, balance_uni, balance_ton')
      .order('id');
      
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return [];
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–∞—Ö
    const chainUsers = allUsers.filter(u => u.referred_by);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–∞—Ö: ${chainUsers.length}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const testUsers = chainUsers.slice(0, 3);
    const allRewards = [];
    
    for (const user of testUsers) {
      console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${user.username} (ID: ${user.id})`);
      
      const testIncome = 0.01; // 0.01 UNI —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
      const rewards = await applyNewModelToUser(user.id, testIncome, allUsers);
      
      if (rewards.length > 0) {
        console.log(`  –¶–µ–ø–æ—á–∫–∞: ${rewards.length} —É—Ä–æ–≤–Ω–µ–π`);
        
        rewards.forEach(reward => {
          console.log(`    Level ${reward.level}: ${reward.percentage}% = ${reward.amount.toFixed(6)} UNI`);
          allRewards.push(reward);
        });
        
        const totalForUser = rewards.reduce((sum, r) => sum + r.amount, 0);
        console.log(`  üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalForUser.toFixed(6)} UNI`);
      } else {
        console.log('  ‚ö†Ô∏è –¶–µ–ø–æ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    }
    
    return allRewards;
    
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏:', err.message);
    return [];
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
 */
function showNewModelStatistics(allRewards) {
  console.log('\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–û–í–û–ô –ú–û–î–ï–õ–ò ===');
  
  if (allRewards.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
  const levelStats = {};
  
  allRewards.forEach(reward => {
    if (!levelStats[reward.level]) {
      levelStats[reward.level] = {
        count: 0,
        totalAmount: 0,
        averagePercent: 0
      };
    }
    
    levelStats[reward.level].count++;
    levelStats[reward.level].totalAmount += reward.amount;
    levelStats[reward.level].averagePercent = reward.percentage;
  });
  
  console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
  Object.keys(levelStats).sort((a, b) => parseInt(a) - parseInt(b)).forEach(level => {
    const stats = levelStats[level];
    const avgAmount = stats.totalAmount / stats.count;
    
    console.log(`  Level ${level}: ${stats.averagePercent}% (${stats.count} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, avg ${avgAmount.toFixed(6)} UNI)`);
  });
  
  const totalRewards = allRewards.reduce((sum, r) => sum + r.amount, 0);
  console.log(`\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalRewards.toFixed(6)} UNI`);
  console.log(`üìà –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${(totalRewards / allRewards.length).toFixed(6)} UNI`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
 */
async function checkFinalBalances() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–´–• –ë–ê–õ–ê–ù–°–û–í ===');
  
  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('id, username, balance_uni, balance_ton')
      .gt('balance_uni', 0)
      .order('balance_uni', { ascending: false })
      .limit(10);
      
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error.message);
      return;
    }
    
    console.log('üèÜ –¢–æ–ø-10 –±–∞–ª–∞–Ω—Å–æ–≤ UNI:');
    users.forEach((user, index) => {
      const uniBalance = parseFloat(user.balance_uni || '0');
      const tonBalance = parseFloat(user.balance_ton || '0');
      
      console.log(`  ${index + 1}. ${user.username}: ${uniBalance.toFixed(3)} UNI, ${tonBalance.toFixed(3)} TON`);
    });
    
    const totalUni = users.reduce((sum, u) => sum + parseFloat(u.balance_uni || '0'), 0);
    console.log(`\nüíé –û–±—â–∏–π UNI –≤ —Ç–æ–ø-10: ${totalUni.toFixed(6)} UNI`);
    
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', err.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testFinalReferralFix() {
  try {
    console.log('–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ú–û–î–ï–õ–ò');
    console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
    console.log('='.repeat(80));
    
    const allRewards = await testNewModelOnActiveChain();
    showNewModelStatistics(allRewards);
    await checkFinalBalances();
    
    console.log('\n' + '='.repeat(80));
    console.log('üìã –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    
    if (allRewards.length > 0) {
      console.log('‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–∫–∞—Ö');
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–æ–º–∏—Å—Å–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–µ');
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫');
    }
    
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:');
    console.log('  1. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã REFERRAL_COMMISSION_RATES –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    console.log('  2. ReferralService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É');
    console.log('  3. –°—Ç–∞—Ä—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ');
    
    console.log('\nüéØ –°–¢–ê–¢–£–°: –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

testFinalReferralFix();