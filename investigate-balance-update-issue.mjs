import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.log('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function investigateBalanceUpdateIssue() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ—á–µ–º—É –±–∞–ª–∞–Ω—Å UNI –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ farming-–æ–ø–µ—Ä–∞—Ü–∏–π\n');
  console.log('=' * 80);
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD
  console.log('\nüìä 1. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô FARMING_REWARD');
  console.log('-' * 40);
  
  const { data: recentRewards, error: rewardsError } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'FARMING_REWARD')
    .eq('user_id', 74)
    .order('created_at', { ascending: false })
    .limit(5);
    
  if (recentRewards && recentRewards.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${recentRewards.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD –¥–ª—è user 74:\n`);
    
    let totalRewards = 0;
    recentRewards.forEach((tx, i) => {
      console.log(`  ${i + 1}. ID: ${tx.id}`);
      console.log(`     –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
      console.log(`     –°—É–º–º–∞: ${tx.amount_uni} UNI`);
      console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`     Currency: ${tx.currency}`);
      totalRewards += parseFloat(tx.amount_uni || 0);
    });
    
    console.log(`\n  üìà –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –Ω–∞–≥—Ä–∞–¥: ${totalRewards.toFixed(6)} UNI`);
  } else {
    console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\n\nüí∞ 2. –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
  console.log('-' * 40);
  
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('id, balance_uni, uni_farming_active, uni_deposit_amount, uni_farming_last_update')
    .eq('id', 74)
    .single();
    
  if (user) {
    console.log(`User ID: ${user.id}`);
    console.log(`–ë–∞–ª–∞–Ω—Å UNI: ${user.balance_uni}`);
    console.log(`Farming –∞–∫—Ç–∏–≤–µ–Ω: ${user.uni_farming_active}`);
    console.log(`–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${user.uni_deposit_amount}`);
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.uni_farming_last_update ? new Date(user.uni_farming_last_update).toLocaleString() : 'NULL'}`);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  console.log('\n\nüìë 3. –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ì–û –ë–ê–õ–ê–ù–°–ê –ù–ê –û–°–ù–û–í–ï –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('-' * 40);
  
  const { data: allTransactions, error: allTxError } = await supabase
    .from('transactions')
    .select('type, amount_uni, status')
    .eq('user_id', 74)
    .in('status', ['completed', 'confirmed']);
    
  if (allTransactions) {
    let calculatedBalance = 0;
    const transactionSummary = {};
    
    allTransactions.forEach(tx => {
      const amount = parseFloat(tx.amount_uni || 0);
      if (!transactionSummary[tx.type]) {
        transactionSummary[tx.type] = { count: 0, total: 0 };
      }
      transactionSummary[tx.type].count++;
      transactionSummary[tx.type].total += amount;
      
      // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (tx.type === 'FARMING_REWARD' || tx.type === 'MISSION_REWARD' || 
          tx.type === 'REFERRAL_REWARD' || tx.type === 'DAILY_BONUS') {
        calculatedBalance += amount;
      } else if (tx.type === 'FARMING_DEPOSIT') {
        calculatedBalance -= amount;
      }
    });
    
    console.log('–°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    Object.entries(transactionSummary).forEach(([type, data]) => {
      console.log(`  ${type}: ${data.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: ${data.total.toFixed(6)} UNI`);
    });
    
    console.log(`\nüìä –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${calculatedBalance.toFixed(6)} UNI`);
    console.log(`üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${user?.balance_uni || 0} UNI`);
    console.log(`‚ùó –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.abs(calculatedBalance - (user?.balance_uni || 0)).toFixed(6)} UNI`);
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
  console.log('\n\nüîÑ 4. –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê');
  console.log('-' * 40);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º (–µ—Å–ª–∏ —Ç–∞–∫–∞—è –µ—Å—Ç—å)
  const { data: recentTx, error: recentTxError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (recentTx && recentTx.length > 0) {
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤—Å–µ —Ç–∏–ø—ã):');
    recentTx.forEach((tx, i) => {
      console.log(`\n  ${i + 1}. ${tx.type} - ${tx.amount_uni || 0} UNI`);
      console.log(`     –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
      console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata || {})}`);
    });
  }
  
  console.log('\n\n‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

investigateBalanceUpdateIssue().catch(console.error);