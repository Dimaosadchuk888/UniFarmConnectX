import { supabase } from './core/supabaseClient';

async function emergencyTransactionCheck() {
  console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('='.repeat(60));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    console.log('\n1Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false })
      .limit(20);

    if (recentError) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError.message);
    } else {
      console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentTx?.length || 0}`);
      
      if (recentTx && recentTx.length > 0) {
        console.log('\nüïê –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
        recentTx.slice(0, 10).forEach((tx, idx) => {
          const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
          console.log(`   ${idx + 1}. User ${tx.user_id}: [${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥] ${tx.type}`);
          console.log(`      Amount: ${tx.amount_ton || tx.amount_uni || tx.amount} ${tx.currency}`);
          console.log(`      Description: ${(tx.description || '').substring(0, 50)}...`);
        });
      } else {
        console.log('‚ùå –ù–ò –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°!');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n2Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú:');
    const txTypes = ['FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'DEPOSIT', 'TON_DEPOSIT'];
    
    for (const type of txTypes) {
      const { data: lastTx, error: typeError } = await supabase
        .from('transactions')
        .select('created_at, user_id')
        .eq('type', type)
        .order('created_at', { ascending: false })
        .limit(1);

      if (!typeError && lastTx && lastTx.length > 0) {
        const timeAgo = Math.round((Date.now() - new Date(lastTx[0].created_at).getTime()) / (1000 * 60));
        console.log(`   ${type}: ${timeAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (User ${lastTx[0].user_id})`);
      } else {
        console.log(`   ${type}: –ù–ï –ù–ê–ô–î–ï–ù–û –∏–ª–∏ –û–ß–ï–ù–¨ –î–ê–í–ù–û`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ scheduler'—ã (–ø–æ —á–∞—Å—Ç–æ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ SCHEDULER\'–û–í:');
    const last10Minutes = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    
    const { data: farmingRewards, error: farmingError } = await supabase
      .from('transactions')
      .select('id')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', last10Minutes);

    const { data: referralRewards, error: referralError } = await supabase
      .from('transactions')
      .select('id')
      .eq('type', 'REFERRAL_REWARD')
      .gte('created_at', last10Minutes);

    if (!farmingError && !referralError) {
      console.log(`   FARMING_REWARD –∑–∞ 10 –º–∏–Ω: ${farmingRewards?.length || 0}`);
      console.log(`   REFERRAL_REWARD –∑–∞ 10 –º–∏–Ω: ${referralRewards?.length || 0}`);
      
      if ((farmingRewards?.length || 0) === 0 && (referralRewards?.length || 0) === 0) {
        console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: Scheduler\'—ã –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!');
      } else {
        console.log('‚úÖ Scheduler\'—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    const { data: dbTest, error: dbError } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (dbError) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î:', dbError.message);
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5Ô∏è‚É£ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    const { data: activeUsers, error: userError } = await supabase
      .from('transactions')
      .select('user_id')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });

    if (!userError && activeUsers) {
      const uniqueUsers = [...new Set(activeUsers.map(tx => tx.user_id))];
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —á–∞—Å: ${uniqueUsers.length}`);
      console.log(`   –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã–µ: ${uniqueUsers.slice(0, 5).join(', ')}`);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ–æ–±—â–µ
    console.log('\n6Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–Ø–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –í –°–ò–°–¢–ï–ú–ï:');
    const { data: lastTransaction, error: lastError } = await supabase
      .from('transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(1);

    if (!lastError && lastTransaction && lastTransaction.length > 0) {
      const tx = lastTransaction[0];
      const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
      console.log(`   ID: ${tx.id}`);
      console.log(`   User: ${tx.user_id}`);
      console.log(`   Type: ${tx.type}`);
      console.log(`   Amount: ${tx.amount_ton || tx.amount_uni || tx.amount} ${tx.currency}`);
      console.log(`   –í—Ä–µ–º—è: ${timeAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${tx.created_at}`);
    }

    // 7. –î–ò–ê–ì–ù–û–ó
    console.log('\n7Ô∏è‚É£ –≠–ö–°–¢–†–ï–ù–ù–´–ô –î–ò–ê–ì–ù–û–ó:');
    const lastTxTime = lastTransaction && lastTransaction.length > 0 ? 
      Math.round((Date.now() - new Date(lastTransaction[0].created_at).getTime()) / (1000 * 60)) : null;

    if (lastTxTime === null) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –í —Å–∏—Å—Ç–µ–º–µ –ù–ï–¢ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ–æ–±—â–µ!');
    } else if (lastTxTime > 60) {
      console.log(`üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ ${lastTxTime} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥!`);
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å scheduler\'—ã');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      console.log('   - –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else if (lastTxTime > 10) {
      console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ ${lastTxTime} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      console.log('   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ');
    } else {
      console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${lastTxTime} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    }

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

emergencyTransactionCheck().catch(console.error);