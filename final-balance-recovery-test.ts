/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ User 255 –∏ 251
 */

import { supabase } from './core/supabase.js';

async function finalBalanceRecoveryTest() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í');
  
  try {
    const { BalanceManager } = await import('./core/BalanceManager.js');
    const balanceManager = BalanceManager.getInstance();
    
    // –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∏–∑ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
    const expectedBalances = {
      255: { uni: 194002.030215, ton: 0.328772 },
      251: { uni: 129192.199781, ton: 0 }
    };
    
    for (const telegramId of [255, 251]) {
      console.log(`\n--- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï USER ${telegramId} ---`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      const validationResult = await balanceManager.validateAndRecalculateBalance(telegramId);
      
      if (validationResult.success) {
        const balance = validationResult.newBalance!;
        const expected = expectedBalances[telegramId];
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:`);
        console.log(`   UNI: ${balance.balance_uni} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expected.uni})`);
        console.log(`   TON: ${balance.balance_ton} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expected.ton})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        const uniDiff = Math.abs(balance.balance_uni - expected.uni);
        const tonDiff = Math.abs(balance.balance_ton - expected.ton);
        
        const uniAccurate = uniDiff < 0.01; // –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ 1 –∫–æ–ø–µ–π–∫—É
        const tonAccurate = tonDiff < 0.001; // –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ 0.001 TON
        
        if (uniAccurate && tonAccurate) {
          console.log(`‚úÖ USER ${telegramId}: –ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù!`);
        } else {
          console.log(`‚ö†Ô∏è USER ${telegramId}: –ù–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è`);
          console.log(`   UNI –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${uniDiff.toFixed(6)}`);
          if (expected.ton > 0) {
            console.log(`   TON –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${tonDiff.toFixed(6)}`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –ë–î
        const { data: userRecord } = await supabase
          .from('users')
          .select('balance_uni, balance_ton')
          .eq('telegram_id', telegramId)
          .single();
        
        if (userRecord) {
          console.log(`üìÇ –ë–∞–ª–∞–Ω—Å –≤ –ë–î: UNI ${userRecord.balance_uni}, TON ${userRecord.balance_ton}`);
          
          const dbUniMatch = Math.abs(parseFloat(userRecord.balance_uni) - balance.balance_uni) < 0.001;
          const dbTonMatch = Math.abs(parseFloat(userRecord.balance_ton) - balance.balance_ton) < 0.001;
          
          if (dbUniMatch && dbTonMatch) {
            console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
          } else {
            console.log(`‚ùå –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å –ë–î!`);
          }
        }
        
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è User ${telegramId}:`, validationResult.error);
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log(`\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:`);
    
    let totalRecovered = 0;
    
    for (const telegramId of [255, 251]) {
      const balanceResult = await balanceManager.getUserBalance(telegramId);
      
      if (balanceResult.success) {
        const balance = balanceResult.balance!;
        console.log(`User ${telegramId}: UNI ${balance.balance_uni.toFixed(6)}, TON ${balance.balance_ton.toFixed(6)}`);
        totalRecovered += balance.balance_uni;
      }
    }
    
    console.log(`\nüí∞ –û–ë–©–ê–Ø –°–£–ú–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê: ${totalRecovered.toFixed(6)} UNI`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    console.log(`\nüß™ –¢–ï–°–¢ –ù–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô:`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º hasSufficientBalance
    const sufficientResult = await balanceManager.hasSufficientBalance(255, 1000, 0);
    
    if (sufficientResult.sufficient) {
      console.log(`‚úÖ User 255 –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (1000 UNI)`);
    } else {
      console.log(`‚ùå User 255 –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤`);
    }
    
    console.log(`\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

finalBalanceRecoveryTest();