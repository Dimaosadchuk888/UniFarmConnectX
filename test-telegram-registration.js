/**
 * T18: –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram Mini App
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–∑–æ–≤ /api/v2/register/telegram –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
 */

import crypto from 'crypto';
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001/api/v2';
const BOT_TOKEN = '7980427501:AAHdia3LusU9dk2aRvhXgmj9Ozo08nR0Gug';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π Telegram initData
 */
function generateValidInitData(user, botToken) {
  const authDate = Math.floor(Date.now() / 1000);
  
  const initDataParams = [
    `auth_date=${authDate}`,
    `user=${encodeURIComponent(JSON.stringify(user))}`,
    `query_id=test_query_${Date.now()}`
  ];
  
  const dataCheckString = initDataParams.sort().join('\n');
  const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
  const hash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
  
  return [...initDataParams, `hash=${hash}`].join('&');
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function testNewUserRegistration() {
  console.log('\nüî∏ –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const testUser = {
    id: Math.floor(Math.random() * 1000000) + 100000,
    username: `testuser_${Date.now()}`,
    first_name: 'Test',
    language_code: 'ru'
  };
  
  const initData = generateValidInitData(testUser, BOT_TOKEN);
  
  try {
    const response = await fetch(`${API_BASE}/auth/register/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData })
    });
    
    const result = await response.json();
    
    console.log(`  –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`  –û—Ç–≤–µ—Ç:`, JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success) {
      console.log('  ‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      console.log(`  üë§ ID: ${result.user.id}, Telegram ID: ${result.user.telegram_id}`);
      console.log(`  üîë Token: ${result.token ? '–ü–æ–ª—É—á–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      return { success: true, user: result.user, token: result.token };
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      return { success: false, error: result.error || 'Unknown error' };
    }
  } catch (error) {
    console.log(`  üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function testExistingUserRegistration(existingUser) {
  console.log('\nüî∏ –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const testUser = {
    id: existingUser.telegram_id,
    username: existingUser.username,
    first_name: 'Test Updated',
    language_code: 'ru'
  };
  
  const initData = generateValidInitData(testUser, BOT_TOKEN);
  
  try {
    const response = await fetch(`${API_BASE}/auth/register/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData })
    });
    
    const result = await response.json();
    
    console.log(`  –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`  –û—Ç–≤–µ—Ç:`, JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success) {
      console.log('  ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω');
      console.log(`  üîÑ isNewUser: ${result.isNewUser || false}`);
      return { success: true, isNewUser: result.isNewUser };
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      return { success: false, error: result.error || 'Unknown error' };
    }
  } catch (error) {
    console.log(`  üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
 */
async function testRegistrationWithReferral() {
  console.log('\nüî∏ –¢–µ—Å—Ç 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º');
  
  const testUser = {
    id: Math.floor(Math.random() * 1000000) + 200000,
    username: `refuser_${Date.now()}`,
    first_name: 'Referral User',
    language_code: 'ru'
  };
  
  const initData = generateValidInitData(testUser, BOT_TOKEN);
  
  try {
    const response = await fetch(`${API_BASE}/auth/register/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        initData,
        ref_by: 'TESTREF123' // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      })
    });
    
    const result = await response.json();
    
    console.log(`  –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`  –û—Ç–≤–µ—Ç:`, JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success) {
      console.log('  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      return { success: true, user: result.user };
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º');
      return { success: false, error: result.error || 'Unknown error' };
    }
  } catch (error) {
    console.log(`  üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint'–∞
 */
async function checkEndpointAvailability() {
  console.log('üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint /api/v2/auth/register/telegram');
  
  try {
    const response = await fetch(`${API_BASE}/auth/register/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData: 'invalid' })
    });
    
    console.log(`  –°—Ç–∞—Ç—É—Å: ${response.status}`);
    
    if (response.status === 400 || response.status === 401) {
      console.log('  ‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
      return true;
    } else if (response.status === 404) {
      console.log('  ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    } else {
      console.log('  ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
      return false;
    }
  } catch (error) {
    console.log(`  üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runRegistrationTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò TELEGRAM –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('=' .repeat(60));
  
  const results = {
    endpointAvailable: false,
    newUserRegistration: false,
    existingUserHandling: false,
    referralRegistration: false
  };
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint
  results.endpointAvailable = await checkEndpointAvailability();
  
  if (!results.endpointAvailable) {
    console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Endpoint /api/v2/auth/register/telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –≤ modules/auth/routes.ts');
    return results;
  }
  
  // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newUserResult = await testNewUserRegistration();
  results.newUserRegistration = newUserResult.success;
  
  // –¢–µ—Å—Ç 3: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª)
  if (newUserResult.success && newUserResult.user) {
    const existingUserResult = await testExistingUserRegistration(newUserResult.user);
    results.existingUserHandling = existingUserResult.success && !existingUserResult.isNewUser;
  }
  
  // –¢–µ—Å—Ç 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
  const referralResult = await testRegistrationWithReferral();
  results.referralRegistration = referralResult.success;
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=' .repeat(60));
  
  console.log(`üåê Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: ${results.endpointAvailable ? '‚úÖ' : '‚ùå'}`);
  console.log(`üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${results.newUserRegistration ? '‚úÖ' : '‚ùå'}`);
  console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${results.existingUserHandling ? '‚úÖ' : '‚ùå'}`);
  console.log(`üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º: ${results.referralRegistration ? '‚úÖ' : '‚ùå'}`);
  
  const successCount = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (successCount === totalTests) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  runRegistrationTests().catch(console.error);
}

export { runRegistrationTests };