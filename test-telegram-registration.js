/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –°–æ–∑–¥–∞–µ—Ç 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ telegram_id –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
 */

import fetch from 'node-fetch';
import crypto from 'crypto';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = process.env.REPLIT_DEV_DOMAIN 
  ? `https://${process.env.REPLIT_DEV_DOMAIN}` 
  : 'http://localhost:3000';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ initData –¥–ª—è Telegram WebApp
 */
function generateTelegramInitData(userId, username, firstName = null, lastName = null) {
  const authDate = Math.floor(Date.now() / 1000);
  
  const user = {
    id: userId,
    first_name: firstName || `User${userId}`,
    last_name: lastName || null,
    username: username,
    language_code: 'en'
  };
  
  // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
  Object.keys(user).forEach(key => {
    if (user[key] === null) {
      delete user[key];
    }
  });
  
  const params = new URLSearchParams();
  params.append('user', JSON.stringify(user));
  params.append('auth_date', authDate.toString());
  params.append('query_id', `query_${userId}_${Date.now()}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π hash –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const dataCheckString = Array.from(params.entries())
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');
  
  const hash = crypto
    .createHmac('sha256', 'test_bot_token_hash')
    .update(dataCheckString)
    .digest('hex');
  
  params.append('hash', hash);
  
  return params.toString();
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
const testUsers = [
  {
    telegram_id: 123456789,
    username: 'alice_crypto',
    first_name: 'Alice',
    last_name: 'Smith'
  },
  {
    telegram_id: 987654321,
    username: 'bob_farming',
    first_name: 'Bob',
    last_name: 'Johnson'
  },
  {
    telegram_id: 555777999,
    username: 'charlie_uni',
    first_name: 'Charlie',
    last_name: null
  },
  {
    telegram_id: 111222333,
    username: 'diana_tokens',
    first_name: 'Diana',
    last_name: 'Williams'
  },
  {
    telegram_id: 444666888,
    username: 'eve_blockchain',
    first_name: 'Eve',
    last_name: 'Brown'
  }
];

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram API
 */
async function registerTelegramUser(userData) {
  try {
    console.log(`\n[TEST] üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.username} (ID: ${userData.telegram_id})`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º initData –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const initData = generateTelegramInitData(
      userData.telegram_id,
      userData.username,
      userData.first_name,
      userData.last_name
    );
    
    console.log(`[TEST] InitData –¥–ª–∏–Ω–∞: ${initData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const response = await fetch(`${BASE_URL}/api/register/telegram`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Telegram-Init-Data': initData
      },
      body: JSON.stringify({
        initData: initData,
        referrerCode: null
      })
    });
    
    const responseText = await response.text();
    
    if (response.ok) {
      const result = JSON.parse(responseText);
      console.log(`[TEST] ‚úÖ –£–°–ü–ï–®–ù–û –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID=${result.user?.id}, ref_code=${result.user?.referralCode}`);
      return {
        success: true,
        user: result.user,
        telegram_id: userData.telegram_id,
        username: userData.username
      };
    } else {
      console.log(`[TEST] ‚ùå –û–®–ò–ë–ö–ê —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.status} - ${responseText}`);
      return {
        success: false,
        error: responseText,
        telegram_id: userData.telegram_id,
        username: userData.username
      };
    }
  } catch (error) {
    console.error(`[TEST] ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${userData.username}:`, error.message);
    return {
      success: false,
      error: error.message,
      telegram_id: userData.telegram_id,
      username: userData.username
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkUsersInDatabase() {
  try {
    console.log('\n[TEST] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const response = await fetch(`${BASE_URL}/api/admin/users?limit=10&order=desc`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const users = await response.json();
      console.log(`[TEST] üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${users.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      users.forEach((user, index) => {
        console.log(`[TEST] ${index + 1}. ID=${user.id}, telegram_id=${user.telegram_id}, username=${user.username}, ref_code=${user.ref_code}`);
      });
      
      return users;
    } else {
      console.error(`[TEST] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.status}`);
      return [];
    }
  } catch (error) {
    console.error('[TEST] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:', error.message);
    return [];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runRegistrationTest() {
  console.log('üéØ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
  console.log(`üìç URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${BASE_URL}`);
  
  const results = [];
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const userData of testUsers) {
    const result = await registerTelegramUser(userData);
    results.push(result);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${successful.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${failed.length}`);
  
  if (successful.length > 0) {
    console.log('\n‚úÖ –£–°–ü–ï–®–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:');
    successful.forEach((result, index) => {
      console.log(`${index + 1}. Telegram ID: ${result.telegram_id}, Username: ${result.username}, DB ID: ${result.user?.id}, Ref Code: ${result.user?.referralCode}`);
    });
  }
  
  if (failed.length > 0) {
    console.log('\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:');
    failed.forEach((result, index) => {
      console.log(`${index + 1}. Telegram ID: ${result.telegram_id}, Username: ${result.username}, –û—à–∏–±–∫–∞: ${result.error}`);
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
  const dbUsers = await checkUsersInDatabase();
  
  console.log('\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  return { results, dbUsers };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runRegistrationTest().catch(console.error);

export { runRegistrationTest };