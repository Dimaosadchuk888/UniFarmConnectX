#!/usr/bin/env tsx
/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 251 –∏ 255
 * –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
 */

import { supabase } from './core/supabase';
import './config/database';

async function activateBoostForUser(userId: number, depositAmount: number = 2) {
  console.log(`\nüîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (userError || !user) {
      console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, userError);
      return false;
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || `ID${userId}`}`);
    console.log(`üí∞ TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}, UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    const currentBalance = parseFloat(user.balance_ton || '0');
    let newBalance = currentBalance;
    
    if (currentBalance < depositAmount) {
      newBalance = currentBalance + depositAmount + 0.01;
      console.log(`üí≥ –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚Üí ${newBalance} TON`);
      
      const { error: balanceError } = await supabase
        .from('users')
        .update({ balance_ton: newBalance })
        .eq('id', userId);
        
      if (balanceError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:`, balanceError);
        return false;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ (–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å boost_packages)
    const packageData = {
      id: 1,
      name: 'Manual Activation Package',
      min_amount: 2,
      daily_rate: 0.02, // 2% –≤ –¥–µ–Ω—å
      uni_bonus: 1000,
      duration_days: 365
    };
    
    console.log(`üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç: ${packageData.name}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏...`);
    const { data: transaction, error: txError } = await supabase
      .from('transactions')
      .insert({
        user_id: userId,
        type: 'BOOST_PURCHASE',
        amount: depositAmount,
        currency: 'TON',
        status: 'completed',
        description: `Manual TON Boost activation: ${depositAmount} TON deposit`,
        metadata: {
          package_id: packageData.id,
          package_name: packageData.name,
          manual_activation: true,
          admin_script: true
        },
        created_at: new Date().toISOString()
      })
      .select()
      .single();
      
    if (txError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, txError);
      return false;
    }
    
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ users table
    console.log(`‚ö° –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost —Å—Ç–∞—Ç—É—Å–∞...`);
    const { error: activationError } = await supabase
      .from('users')
      .update({
        ton_boost_active: true,
        ton_boost_package: packageData.id,
        ton_boost_package_id: packageData.id,
        ton_boost_rate: packageData.daily_rate,
        balance_ton: newBalance - depositAmount
      })
      .eq('id', userId);
      
    if (activationError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`, activationError);
      return false;
    }
    
    console.log(`‚úÖ Users table –æ–±–Ω–æ–≤–ª–µ–Ω`);
    
    // –°–æ–∑–¥–∞–µ–º ton_farming_data —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log(`üöú –°–æ–∑–¥–∞–Ω–∏–µ ton_farming_data...`);
    const farmingRecord = {
      user_id: userId.toString(),
      farming_balance: depositAmount,
      farming_rate: packageData.daily_rate / 86400, // –≤ —Å–µ–∫—É–Ω–¥—ã
      boost_package_id: packageData.id,
      boost_active: true
    };
    
    const { error: farmingError } = await supabase
      .from('ton_farming_data')
      .upsert(farmingRecord, { onConflict: 'user_id' });
      
    if (farmingError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ ton_farming_data:`, farmingError);
      return false;
    }
    
    console.log(`‚úÖ ton_farming_data —Å–æ–∑–¥–∞–Ω`);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º UNI –±–æ–Ω—É—Å
    if (packageData.uni_bonus > 0) {
      console.log(`üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI –±–æ–Ω—É—Å–∞: ${packageData.uni_bonus} UNI`);
      
      const currentUniBalance = parseFloat(user.balance_uni || '0');
      const newUniBalance = currentUniBalance + packageData.uni_bonus;
      
      const { error: uniError } = await supabase
        .from('users')
        .update({ balance_uni: newUniBalance })
        .eq('id', userId);
        
      if (uniError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ UNI –±–æ–Ω—É—Å–∞:`, uniError);
      } else {
        console.log(`‚úÖ UNI –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: ${currentUniBalance} ‚Üí ${newUniBalance}`);
        
        // UNI –±–æ–Ω—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        await supabase
          .from('transactions')
          .insert({
            user_id: userId,
            type: 'DAILY_BONUS',
            amount: packageData.uni_bonus,
            currency: 'UNI',
            status: 'completed',
            description: `TON Boost Activation Bonus: ${packageData.uni_bonus} UNI`,
            metadata: {
              bonus_type: 'ton_boost_activation',
              package_id: packageData.id
            },
            created_at: new Date().toISOString()
          });
      }
    }
    
    console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –£–°–ü–ï–®–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return false;
  }
}

async function main() {
  console.log('üöÄ === –£–ü–†–û–©–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST ===');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toISOString());
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 251, 255');
  console.log('üí∞ –î–µ–ø–æ–∑–∏—Ç: 2 TON –∫–∞–∂–¥–æ–º—É');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const { data: testData, error: testError } = await supabase
    .from('users')
    .select('id')
    .limit(1);
    
  if (testError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', testError);
    return;
  }
  
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
  
  const targetUsers = [251, 255];
  const results: Array<{ userId: number; success: boolean }> = [];
  
  for (const userId of targetUsers) {
    const success = await activateBoostForUser(userId, 2);
    results.push({ userId, success });
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
  console.log('='.repeat(60));
  
  const successCount = results.filter(r => r.success).length;
  
  results.forEach(({ userId, success }) => {
    console.log(`${success ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${success ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  });
  
  console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã`);
  
  if (successCount === results.length) {
    console.log('\nüéâ –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –£–°–ü–ï–®–ù–´!');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 251 –∏ 255 –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã');
    console.log('‚úÖ –ö–∞–∂–¥–æ–º—É –∑–∞—á–∏—Å–ª–µ–Ω–æ 2 TON –≤ farming —Å–∏—Å—Ç–µ–º—É');
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    console.log('‚úÖ UNI –±–æ–Ω—É—Å—ã 1000 –∫–∞–∂–¥–æ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
    for (const userId of [251, 255]) {
      const { data: user } = await supabase
        .from('users')
        .select('ton_boost_active, ton_boost_package, balance_ton, balance_uni')
        .eq('id', userId)
        .single();
        
      const { data: farming } = await supabase
        .from('ton_farming_data')
        .select('farming_balance, boost_active')
        .eq('user_id', userId.toString())
        .single();
        
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:`);
      console.log(`   Boost –∞–∫—Ç–∏–≤–µ–Ω: ${user?.ton_boost_active ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   TON –±–∞–ª–∞–Ω—Å: ${parseFloat(user?.balance_ton || '0').toFixed(6)}`);
      console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${parseFloat(user?.balance_uni || '0').toFixed(2)}`);
      console.log(`   Farming –±–∞–ª–∞–Ω—Å: ${farming?.farming_balance || '–ù–ï–¢'}`);
      console.log(`   Farming –∞–∫—Ç–∏–≤–µ–Ω: ${farming?.boost_active ? '–î–ê' : '–ù–ï–¢'}`);
    }
    
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å');
  }
}

main().catch(console.error);