import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

console.log('üöÄ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó UniFarm –°–ò–°–¢–ï–ú–´\n');
console.log('=' .repeat(80));

const analysis = {
  timestamp: new Date().toISOString(),
  modules: {},
  authentication: {
    jwtImplementation: [],
    authMiddleware: [],
    authEndpoints: [],
    securityIssues: []
  },
  farming: {
    depositFlow: [],
    balanceManagement: [],
    transactionSystem: [],
    farmingEndpoints: []
  },
  database: {
    supabaseUsage: [],
    tables: new Set(),
    queries: []
  },
  frontend: {
    components: {},
    hooks: [],
    contexts: [],
    pages: []
  },
  api: {
    endpoints: {},
    middleware: [],
    routes: []
  },
  criticalIssues: [],
  recommendations: []
};

// –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª–µ–π
function analyzeModules() {
  const modulesDir = 'modules';
  if (!fs.existsSync(modulesDir)) return;
  
  const modules = fs.readdirSync(modulesDir).filter(f => 
    fs.statSync(path.join(modulesDir, f)).isDirectory()
  );
  
  modules.forEach(module => {
    const modulePath = path.join(modulesDir, module);
    const files = fs.readdirSync(modulePath).filter(f => f.endsWith('.ts'));
    
    analysis.modules[module] = {
      files: files,
      hasController: files.includes('controller.ts'),
      hasService: files.includes('service.ts'),
      hasRoutes: files.includes('routes.ts'),
      hasTypes: files.includes('types.ts'),
      hasModel: files.includes('model.ts'),
      endpoints: [],
      functionality: []
    };
    
    // –ê–Ω–∞–ª–∏–∑ routes
    const routesPath = path.join(modulePath, 'routes.ts');
    if (fs.existsSync(routesPath)) {
      const content = fs.readFileSync(routesPath, 'utf8');
      const routeMatches = content.matchAll(/router\.(get|post|put|delete|patch)\s*\(\s*["']([^"']+)["']/gi);
      for (const match of routeMatches) {
        analysis.modules[module].endpoints.push({
          method: match[1].toUpperCase(),
          path: match[2]
        });
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ service
    const servicePath = path.join(modulePath, 'service.ts');
    if (fs.existsSync(servicePath)) {
      const content = fs.readFileSync(servicePath, 'utf8');
      const methodMatches = content.matchAll(/async\s+(\w+)\s*\(/g);
      for (const match of methodMatches) {
        analysis.modules[module].functionality.push(match[1]);
      }
    }
  });
}

// –ê–Ω–∞–ª–∏–∑ JWT –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function analyzeAuthentication() {
  const authPaths = [
    'core/middleware/telegramAuth.ts',
    'modules/auth/service.ts',
    'utils/telegram.ts',
    'client/src/hooks/useAutoAuth.ts'
  ];
  
  authPaths.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      // JWT –∞–Ω–∞–ª–∏–∑
      if (content.includes('jsonwebtoken')) {
        analysis.authentication.jwtImplementation.push({
          file: filePath,
          hasVerify: content.includes('.verify'),
          hasSign: content.includes('.sign'),
          hasSecret: content.includes('JWT_SECRET')
        });
      }
      
      // Hardcoded —Ç–æ–∫–µ–Ω—ã
      const jwtMatches = content.match(/eyJ[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+\.[A-Za-z0-9\-_]+/g);
      if (jwtMatches) {
        analysis.criticalIssues.push({
          type: 'HARDCODED_JWT',
          file: filePath,
          count: jwtMatches.length,
          severity: 'HIGH'
        });
      }
      
      // Fallback user IDs
      const fallbackMatches = content.match(/user_?[iI]d\s*[:=]\s*(74|62|48|43|42)/g);
      if (fallbackMatches) {
        analysis.authentication.securityIssues.push({
          type: 'FALLBACK_USER_ID',
          file: filePath,
          matches: fallbackMatches
        });
      }
    }
  });
}

// –ê–Ω–∞–ª–∏–∑ farming —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
function analyzeFarming() {
  const farmingPaths = [
    'modules/farming/service.ts',
    'modules/farming/directDeposit.ts',
    'modules/farming/controller.ts',
    'client/src/components/farming/UniFarmingCard.tsx'
  ];
  
  farmingPaths.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      analysis.farming.depositFlow.push({
        file: filePath,
        hasDepositFunction: content.includes('depositUniForFarming'),
        usesBalanceManager: content.includes('BalanceManager'),
        createsTransactions: content.includes('FARMING_DEPOSIT'),
        hasDirectDeposit: content.includes('direct-deposit')
      });
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑ BalanceManager
  const balanceManagerPath = 'core/BalanceManager.ts';
  if (fs.existsSync(balanceManagerPath)) {
    const content = fs.readFileSync(balanceManagerPath, 'utf8');
    const methods = content.matchAll(/async\s+(\w+)\s*\(/g);
    
    analysis.farming.balanceManagement = {
      file: balanceManagerPath,
      methods: Array.from(methods).map(m => m[1]),
      usesSupabase: content.includes('supabase'),
      hasValidation: content.includes('validateBalance')
    };
  }
}

// –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function analyzeDatabase() {
  const dbFiles = [];
  
  function findSupabaseUsage(dir) {
    if (!fs.existsSync(dir)) return;
    
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory() && !file.includes('node_modules')) {
        findSupabaseUsage(filePath);
      } else if (file.endsWith('.ts') || file.endsWith('.tsx')) {
        try {
          const content = fs.readFileSync(filePath, 'utf8');
          if (content.includes('supabase')) {
            // –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü
            const tableMatches = content.matchAll(/from\s*\(\s*["'](\w+)["']\s*\)/g);
            for (const match of tableMatches) {
              analysis.database.tables.add(match[1]);
            }
            
            // –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
            const operations = ['select', 'insert', 'update', 'delete', 'upsert'];
            operations.forEach(op => {
              if (content.includes(`.${op}(`)) {
                analysis.database.queries.push({
                  file: filePath,
                  operation: op
                });
              }
            });
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
        }
      }
    });
  }
  
  ['modules', 'core', 'server'].forEach(dir => findSupabaseUsage(dir));
  analysis.database.tables = Array.from(analysis.database.tables);
}

// –ê–Ω–∞–ª–∏–∑ frontend
function analyzeFrontend() {
  const componentsDir = 'client/src/components';
  const hooksDir = 'client/src/hooks';
  const contextsDir = 'client/src/contexts';
  const pagesDir = 'client/src/pages';
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  if (fs.existsSync(componentsDir)) {
    function scanComponents(dir, prefix = '') {
      const items = fs.readdirSync(dir);
      items.forEach(item => {
        const itemPath = path.join(dir, item);
        const stat = fs.statSync(itemPath);
        
        if (stat.isDirectory()) {
          analysis.frontend.components[prefix + item] = {
            files: fs.readdirSync(itemPath).filter(f => f.endsWith('.tsx')).length
          };
          scanComponents(itemPath, prefix + item + '/');
        }
      });
    }
    scanComponents(componentsDir);
  }
  
  // Hooks
  if (fs.existsSync(hooksDir)) {
    analysis.frontend.hooks = fs.readdirSync(hooksDir)
      .filter(f => f.endsWith('.ts') || f.endsWith('.tsx'));
  }
  
  // Contexts
  if (fs.existsSync(contextsDir)) {
    analysis.frontend.contexts = fs.readdirSync(contextsDir)
      .filter(f => f.endsWith('.tsx'));
  }
  
  // Pages
  if (fs.existsSync(pagesDir)) {
    analysis.frontend.pages = fs.readdirSync(pagesDir)
      .filter(f => f.endsWith('.tsx'));
  }
}

// –ê–Ω–∞–ª–∏–∑ API endpoints
function analyzeAPI() {
  const routesPath = 'server/routes.ts';
  if (fs.existsSync(routesPath)) {
    const content = fs.readFileSync(routesPath, 'utf8');
    
    // –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π
    const moduleImports = content.matchAll(/from\s+["']\.\.\/modules\/(\w+)\/routes["']/g);
    for (const match of moduleImports) {
      analysis.api.routes.push(match[1]);
    }
    
    // –ê–Ω–∞–ª–∏–∑ middleware
    const middlewarePath = 'core/middleware';
    if (fs.existsSync(middlewarePath)) {
      analysis.api.middleware = fs.readdirSync(middlewarePath)
        .filter(f => f.endsWith('.ts'))
        .map(f => f.replace('.ts', ''));
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥—É–ª–∏...');
analyzeModules();

console.log('üîê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
analyzeAuthentication();

console.log('üåæ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é farming —Å–∏—Å—Ç–µ–º—É...');
analyzeFarming();

console.log('üíæ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
analyzeDatabase();

console.log('üñ•Ô∏è  –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é frontend...');
analyzeFrontend();

console.log('üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é API...');
analyzeAPI();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
console.log('\n' + '=' .repeat(80));
console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê:\n');

console.log('üì¶ –ú–û–î–£–õ–ò (' + Object.keys(analysis.modules).length + ' –Ω–∞–π–¥–µ–Ω–æ):');
Object.entries(analysis.modules).forEach(([name, info]) => {
  if (info.endpoints.length > 0) {
    console.log(`  ${name}:`);
    console.log(`    - –§–∞–π–ª—ã: ${info.files.join(', ')}`);
    console.log(`    - Endpoints: ${info.endpoints.length}`);
    console.log(`    - –§—É–Ω–∫—Ü–∏–∏: ${info.functionality.slice(0, 3).join(', ')}...`);
  }
});

console.log('\nüîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø:');
console.log(`  JWT —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: ${analysis.authentication.jwtImplementation.length} —Ñ–∞–π–ª–æ–≤`);
console.log(`  –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${analysis.authentication.securityIssues.length}`);

console.log('\nüåæ FARMING –°–ò–°–¢–ï–ú–ê:');
analysis.farming.depositFlow.forEach(flow => {
  if (flow.hasDepositFunction) {
    console.log(`  ‚úÖ ${path.basename(flow.file)}:`);
    console.log(`     - BalanceManager: ${flow.usesBalanceManager ? '‚úÖ' : '‚ùå'}`);
    console.log(`     - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${flow.createsTransactions ? '‚úÖ' : '‚ùå'}`);
  }
});

console.log('\nüíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•:');
console.log(`  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${analysis.database.tables.join(', ')}`);
console.log(`  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${analysis.database.queries.length}`);

console.log('\nüñ•Ô∏è  FRONTEND:');
console.log(`  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${Object.keys(analysis.frontend.components).length} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π`);
console.log(`  Hooks: ${analysis.frontend.hooks.length}`);
console.log(`  Contexts: ${analysis.frontend.contexts.length}`);
console.log(`  Pages: ${analysis.frontend.pages.length}`);

console.log('\nüåê API:');
console.log(`  –ú–æ–¥—É–ª–∏ —Å routes: ${analysis.api.routes.join(', ')}`);
console.log(`  Middleware: ${analysis.api.middleware.join(', ')}`);

if (analysis.criticalIssues.length > 0) {
  console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
  analysis.criticalIssues.forEach(issue => {
    console.log(`  ‚ùó ${issue.type} –≤ ${issue.file} (${issue.severity})`);
  });
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
if (analysis.criticalIssues.some(i => i.type === 'HARDCODED_JWT')) {
  console.log('  1. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ hardcoded JWT —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫–æ–¥–∞');
}
if (analysis.authentication.securityIssues.length > 0) {
  console.log('  2. –£–±—Ä–∞—Ç—å fallback user IDs –∏–∑ production –∫–æ–¥–∞');
}
console.log('  3. –û–±–Ω–æ–≤–∏—Ç—å Node.js –¥–æ –≤–µ—Ä—Å–∏–∏ 20.x –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
console.log('  4. –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π');

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
fs.writeFileSync(
  path.join(__dirname, 'unifarm-deep-analysis.json'),
  JSON.stringify(analysis, null, 2)
);

console.log('\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ tools/analyzer/unifarm-deep-analysis.json');