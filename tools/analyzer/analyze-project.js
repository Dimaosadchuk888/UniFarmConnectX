import fs from 'fs';
import path from 'path';

// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
const projectStructure = {
  modules: {},
  core: {},
  duplicates: [],
  circularDeps: [],
  largeFiles: [],
  issues: []
};

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function analyzeDirectory(dir, basePath = '') {
  try {
    const files = fs.readdirSync(dir);
    
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory() && !file.includes('node_modules') && !file.startsWith('.')) {
        analyzeDirectory(filePath, path.join(basePath, file));
      } else if (stat.isFile() && (file.endsWith('.ts') || file.endsWith('.tsx'))) {
        // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if (stat.size > 10000) { // –ë–æ–ª—å—à–µ 10KB
          projectStructure.largeFiles.push({
            path: path.join(basePath, file),
            size: Math.round(stat.size / 1024) + 'KB'
          });
        }
        
        // –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
        try {
          const content = fs.readFileSync(filePath, 'utf8');
          const imports = content.match(/import .* from ['"](.+)['"]/g) || [];
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
          imports.forEach(imp => {
            const importPath = imp.match(/from ['"](.+)['"]/)?.[1];
            if (importPath && importPath.includes('../') && importPath.includes(basePath.split('/')[0])) {
              projectStructure.circularDeps.push({
                file: path.join(basePath, file),
                imports: importPath
              });
            }
          });
          
          // –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º
          const moduleMatch = basePath.match(/^(modules|core)\/([^/]+)/);
          if (moduleMatch) {
            const [, type, module] = moduleMatch;
            if (!projectStructure[type][module]) {
              projectStructure[type][module] = {
                files: 0,
                lines: 0,
                imports: new Set()
              };
            }
            projectStructure[type][module].files++;
            projectStructure[type][module].lines += content.split('\n').length;
            imports.forEach(imp => {
              const importPath = imp.match(/from ['"](.+)['"]/)?.[1];
              if (importPath && !importPath.includes('node_modules')) {
                projectStructure[type][module].imports.add(importPath);
              }
            });
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        }
      }
    });
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, e.message);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ UniFarm...\n');

// –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
['modules', 'core', 'client/src', 'server', 'utils', 'types'].forEach(dir => {
  if (fs.existsSync(dir)) {
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${dir}...`);
    analyzeDirectory(dir);
  }
});

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:\n');

// –ú–æ–¥—É–ª–∏
console.log('üì¶ –ú–û–î–£–õ–ò:');
Object.entries(projectStructure.modules).forEach(([name, data]) => {
  console.log(`  - ${name}: ${data.files} —Ñ–∞–π–ª–æ–≤, ${data.lines} —Å—Ç—Ä–æ–∫, ${data.imports.size} –≤–Ω–µ—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤`);
});

console.log('\nüîß CORE –ö–û–ú–ü–û–ù–ï–ù–¢–´:');
Object.entries(projectStructure.core).forEach(([name, data]) => {
  console.log(`  - ${name}: ${data.files} —Ñ–∞–π–ª–æ–≤, ${data.lines} —Å—Ç—Ä–æ–∫`);
});

console.log('\nüìè –ë–û–õ–¨–®–ò–ï –§–ê–ô–õ–´ (>10KB):');
projectStructure.largeFiles.slice(0, 10).forEach(file => {
  console.log(`  - ${file.path}: ${file.size}`);
});

if (projectStructure.circularDeps.length > 0) {
  console.log('\n‚ö†Ô∏è  –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:');
  projectStructure.circularDeps.slice(0, 5).forEach(dep => {
    console.log(`  - ${dep.file} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç ${dep.imports}`);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:');
const criticalFiles = [
  'core/BalanceManager.ts',
  'modules/farming/directDeposit.ts',
  'modules/farming/service.ts',
  'client/src/components/farming/UniFarmingCard.tsx'
];

criticalFiles.forEach(file => {
  if (fs.existsSync(file)) {
    const stat = fs.statSync(file);
    const content = fs.readFileSync(file, 'utf8');
    const lines = content.split('\n').length;
    console.log(`  ‚úÖ ${file}: ${lines} —Å—Ç—Ä–æ–∫, ${Math.round(stat.size / 1024)}KB`);
  } else {
    console.log(`  ‚ùå ${file}: –ù–ï –ù–ê–ô–î–ï–ù`);
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
const report = {
  timestamp: new Date().toISOString(),
  structure: projectStructure,
  summary: {
    totalModules: Object.keys(projectStructure.modules).length,
    totalCoreComponents: Object.keys(projectStructure.core).length,
    largeFiles: projectStructure.largeFiles.length,
    potentialIssues: projectStructure.circularDeps.length
  }
};

fs.writeFileSync('tools/analyzer/project-analysis-report.json', JSON.stringify(report, null, 2));
console.log('\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ tools/analyzer/project-analysis-report.json');