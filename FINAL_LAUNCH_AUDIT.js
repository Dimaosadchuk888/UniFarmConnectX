/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–ï–î-–ü–†–û–î–ê–ö–®–ù –ü–†–û–í–ï–†–ö–ê UniFarm
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */

import fetch from 'node-fetch';

const BOT_TOKEN = '7980427501:AAHdia3LusU9dk2aRvhXgmj9Ozo08nR0Gug';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const PRODUCTION_URL = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app';
const LOCAL_URL = 'http://localhost:3000';

class UniFarmLaunchAudit {
  constructor() {
    this.results = {};
    this.summary = {
      total: 0,
      passed: 0,
      failed: 0,
      warnings: 0
    };
  }

  log(section, item, status, message, details = null) {
    if (!this.results[section]) this.results[section] = [];
    
    this.results[section].push({
      item,
      status,
      message,
      details,
      timestamp: new Date().toISOString()
    });

    this.summary.total++;
    if (status === '‚úÖ') this.summary.passed++;
    else if (status === '‚ùå') this.summary.failed++;
    else if (status === '‚ö†Ô∏è') this.summary.warnings++;

    console.log(`[${section}] ${status} ${item}: ${message}`);
    if (details) console.log(`   Details: ${JSON.stringify(details, null, 2)}`);
  }

  async makeRequest(url, options = {}) {
    try {
      const response = await fetch(url, {
        timeout: 10000,
        ...options
      });
      return {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        data: await response.text()
      };
    } catch (error) {
      return {
        ok: false,
        status: 0,
        statusText: 'Network Error',
        error: error.message
      };
    }
  }

  // 1. üîÅ Webhook –∏ Telegram Bot
  async auditWebhookAndBot() {
    console.log('\nüîÅ –ê–£–î–ò–¢: Webhook –∏ Telegram Bot');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook info
    try {
      const webhookInfo = await this.makeRequest(`${TELEGRAM_API}/getWebhookInfo`);
      if (webhookInfo.ok) {
        const data = JSON.parse(webhookInfo.data);
        if (data.ok) {
          const info = data.result;
          this.log('webhook', 'webhook_info', '‚úÖ', 'Webhook info –ø–æ–ª—É—á–µ–Ω', {
            url: info.url,
            pending_updates: info.pending_update_count,
            last_error: info.last_error_message
          });
          
          if (info.url === `${PRODUCTION_URL}/webhook`) {
            this.log('webhook', 'webhook_url', '‚úÖ', 'Webhook URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
          } else {
            this.log('webhook', 'webhook_url', '‚ö†Ô∏è', `Webhook URL: ${info.url}`);
          }
        }
      }
    } catch (error) {
      this.log('webhook', 'webhook_info', '‚ùå', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info', error.message);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ bot info
    try {
      const botInfo = await this.makeRequest(`${TELEGRAM_API}/getMe`);
      if (botInfo.ok) {
        const data = JSON.parse(botInfo.data);
        if (data.ok && data.result.username === 'UniFarming_Bot') {
          this.log('webhook', 'bot_connection', '‚úÖ', '–ë–æ—Ç @UniFarming_Bot –∞–∫—Ç–∏–≤–µ–Ω');
        } else {
          this.log('webhook', 'bot_connection', '‚ùå', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–∞');
        }
      }
    } catch (error) {
      this.log('webhook', 'bot_connection', '‚ùå', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞', error.message);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook handler –ª–æ–∫–∞–ª—å–Ω–æ
    const webhookTest = await this.makeRequest(`${LOCAL_URL}/webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        update_id: Date.now(),
        message: { message_id: 1, from: { id: 123 }, chat: { id: 123 }, text: '/start' }
      })
    });

    if (webhookTest.ok) {
      this.log('webhook', 'webhook_handler', '‚úÖ', 'Webhook handler —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ');
    } else {
      this.log('webhook', 'webhook_handler', '‚ùå', `Webhook handler –æ—à–∏–±–∫–∞: ${webhookTest.status}`);
    }
  }

  // 2. üì¶ API –∏ –º–∞—Ä—à—Ä—É—Ç—ã
  async auditAPIRoutes() {
    console.log('\nüì¶ –ê–£–î–ò–¢: API –∏ –º–∞—Ä—à—Ä—É—Ç—ã');
    
    const apiEndpoints = [
      '/api/v2/me',
      '/api/v2/farming/history', 
      '/api/v2/airdrop/register',
      '/api/v2/health',
      '/health'
    ];

    for (const endpoint of apiEndpoints) {
      const response = await this.makeRequest(`${LOCAL_URL}${endpoint}`);
      
      if (response.status === 401) {
        this.log('api', `endpoint_${endpoint.replace(/\//g, '_')}`, '‚úÖ', '–≠–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞—â–∏—â–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
      } else if (response.status === 200) {
        this.log('api', `endpoint_${endpoint.replace(/\//g, '_')}`, '‚úÖ', '–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else if (response.status === 404) {
        this.log('api', `endpoint_${endpoint.replace(/\//g, '_')}`, '‚ùå', '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else {
        this.log('api', `endpoint_${endpoint.replace(/\//g, '_')}`, '‚ö†Ô∏è', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    const corsTest = await this.makeRequest(`${LOCAL_URL}/api/v2/health`, {
      headers: { 'Origin': 'https://example.com' }
    });
    
    if (corsTest.ok) {
      this.log('api', 'cors_configuration', '‚úÖ', 'CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      this.log('api', 'cors_configuration', '‚ö†Ô∏è', 'CORS –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
  }

  // 3. üë§ Telegram –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async auditTelegramAuth() {
    console.log('\nüë§ –ê–£–î–ò–¢: Telegram –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ auth endpoint
    const authTest = await this.makeRequest(`${LOCAL_URL}/api/v2/auth/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData: 'test_data' })
    });

    if (authTest.status === 400 || authTest.status === 401) {
      this.log('auth', 'telegram_auth_endpoint', '‚úÖ', 'Auth endpoint –∑–∞—â–∏—â–µ–Ω');
    } else {
      this.log('auth', 'telegram_auth_endpoint', '‚ö†Ô∏è', `Auth endpoint —Å—Ç–∞—Ç—É—Å: ${authTest.status}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ hash
    try {
      const response = JSON.parse(authTest.data);
      if (response.error && response.error.includes('hash')) {
        this.log('auth', 'hash_validation', '‚úÖ', 'Hash –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
      } else {
        this.log('auth', 'hash_validation', '‚ö†Ô∏è', 'Hash –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');
      }
    } catch (error) {
      this.log('auth', 'hash_validation', '‚ö†Ô∏è', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å hash –≤–∞–ª–∏–¥–∞—Ü–∏—é');
    }
  }

  // 4. üíº –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–º–æ–¥—É–ª–µ–π
  async auditBusinessModules() {
    console.log('\nüíº –ê–£–î–ò–¢: –ë–∏–∑–Ω–µ—Å-–º–æ–¥—É–ª–∏');
    
    const modules = [
      '/api/v2/farming/info',
      '/api/v2/farming/status', 
      '/api/v2/boosts/packages',
      '/api/v2/daily-bonus/status',
      '/api/v2/missions/active',
      '/api/v2/referrals/stats',
      '/api/v2/wallet/balance'
    ];

    for (const module of modules) {
      const response = await this.makeRequest(`${LOCAL_URL}${module}`);
      
      if (response.status === 401) {
        this.log('modules', `module_${module.split('/').pop()}`, '‚úÖ', '–ú–æ–¥—É–ª—å –∑–∞—â–∏—â–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
      } else if (response.status === 200) {
        this.log('modules', `module_${module.split('/').pop()}`, '‚úÖ', '–ú–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else if (response.status === 404) {
        this.log('modules', `module_${module.split('/').pop()}`, '‚ùå', '–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else {
        this.log('modules', `module_${module.split('/').pop()}`, '‚ö†Ô∏è', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
      }
    }
  }

  // 5. üß† UI/UX –ø—Ä–æ–≤–µ—Ä–∫–∞
  async auditUIUX() {
    console.log('\nüß† –ê–£–î–ò–¢: UI/UX –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ frontend
    const frontendTest = await this.makeRequest(PRODUCTION_URL);
    
    if (frontendTest.ok && frontendTest.data.includes('UniFarm')) {
      this.log('ui', 'frontend_loading', '‚úÖ', 'Frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      this.log('ui', 'frontend_loading', '‚ùå', '–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ frontend');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    const assetsTest = await this.makeRequest(`${PRODUCTION_URL}/assets/index.js`);
    
    if (assetsTest.ok) {
      this.log('ui', 'assets_loading', '‚úÖ', '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    } else {
      this.log('ui', 'assets_loading', '‚ö†Ô∏è', '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    const manifestTest = await this.makeRequest(`${PRODUCTION_URL}/manifest.json`);
    
    if (manifestTest.ok) {
      this.log('ui', 'manifest', '‚úÖ', '–ú–∞–Ω–∏—Ñ–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      this.log('ui', 'manifest', '‚ö†Ô∏è', '–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  }

  // 6. üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  async auditSecurity() {
    console.log('\nüîê –ê–£–î–ò–¢: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π)
    const envVars = ['JWT_SECRET', 'BOT_TOKEN', 'DATABASE_URL'];
    
    envVars.forEach(envVar => {
      if (process.env[envVar]) {
        this.log('security', `env_${envVar.toLowerCase()}`, '‚úÖ', `${envVar} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } else {
        this.log('security', `env_${envVar.toLowerCase()}`, '‚ùå', `${envVar} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã API
    const sensitiveEndpoints = ['/api/v2/me', '/api/v2/wallet/balance'];
    
    for (const endpoint of sensitiveEndpoints) {
      const response = await this.makeRequest(`${LOCAL_URL}${endpoint}`);
      
      if (response.status === 401) {
        this.log('security', `protection_${endpoint.split('/').pop()}`, '‚úÖ', '–≠–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞—â–∏—â–µ–Ω');
      } else {
        this.log('security', `protection_${endpoint.split('/').pop()}`, '‚ùå', '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –∑–∞—â–∏—â–µ–Ω');
      }
    }
  }

  // 7. üõ† –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  async auditMonitoring() {
    console.log('\nüõ† –ê–£–î–ò–¢: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    
    // Health check
    const healthTest = await this.makeRequest(`${LOCAL_URL}/health`);
    
    if (healthTest.ok) {
      try {
        const health = JSON.parse(healthTest.data);
        this.log('monitoring', 'health_check', '‚úÖ', 'Health check —Ä–∞–±–æ—Ç–∞–µ—Ç', health);
      } catch (error) {
        this.log('monitoring', 'health_check', '‚ö†Ô∏è', 'Health check –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–æ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
      }
    } else {
      this.log('monitoring', 'health_check', '‚ùå', 'Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // WebSocket –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±–∞–∑–æ–≤–∞—è)
    this.log('monitoring', 'websocket', '‚ö†Ô∏è', 'WebSocket —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }

  // 8. üöÄ –î–µ–ø–ª–æ–π Replit
  async auditReplit() {
    console.log('\nüöÄ –ê–£–î–ò–¢: –î–µ–ø–ª–æ–π Replit');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω URL
    const prodTest = await this.makeRequest(PRODUCTION_URL);
    
    if (prodTest.ok) {
      this.log('deploy', 'production_url', '‚úÖ', '–ü—Ä–æ–¥–∞–∫—à–Ω URL –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      this.log('deploy', 'production_url', '‚ùå', `–ü—Ä–æ–¥–∞–∫—à–Ω URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${prodTest.status}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
    const buildTest = await this.makeRequest(`${PRODUCTION_URL}/assets/index.js`);
    
    if (buildTest.ok) {
      this.log('deploy', 'build_assets', '‚úÖ', '–°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      this.log('deploy', 'build_assets', '‚ö†Ô∏è', '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–±–æ—Ä–∫–æ–π');
    }
  }

  // 9. üì≤ Mini App –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  async auditMiniApp() {
    console.log('\nüì≤ –ê–£–î–ò–¢: Telegram Mini App');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram WebApp
    const webAppTest = await this.makeRequest(PRODUCTION_URL, {
      headers: {
        'User-Agent': 'TelegramWebApp'
      }
    });

    if (webAppTest.ok) {
      this.log('miniapp', 'webapp_access', '‚úÖ', 'Mini App –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ WebApp');
    } else {
      this.log('miniapp', 'webapp_access', '‚ùå', '–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ WebApp');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è Mini App
    const tonConnectTest = await this.makeRequest(`${PRODUCTION_URL}/tonconnect-manifest.json`);
    
    if (tonConnectTest.ok) {
      this.log('miniapp', 'tonconnect_manifest', '‚úÖ', 'TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      this.log('miniapp', 'tonconnect_manifest', '‚ö†Ô∏è', 'TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ó–ê–ü–£–°–ö–£');
    console.log('='.repeat(80));

    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${this.summary.total}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.summary.passed}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${this.summary.failed}`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.summary.warnings}`);

    const successRate = Math.round((this.summary.passed / this.summary.total) * 100);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${successRate}%`);

    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    Object.entries(this.results).forEach(([section, items]) => {
      console.log(`\n[${section.toUpperCase()}]:`);
      items.forEach(item => {
        console.log(`  ${item.status} ${item.item}: ${item.message}`);
      });
    });

    // –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    
    if (this.summary.failed === 0 && successRate >= 90) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£');
      console.log('üöÄ UniFarm –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ');
    } else if (this.summary.failed <= 2 && successRate >= 80) {
      console.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê');
      console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º');
    } else {
      console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê');
      console.log('üõ† –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞');
    }

    console.log('='.repeat(80));
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞
  async runFullAudit() {
    console.log('üü° –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–ï–î-–ü–†–û–î–ê–ö–®–ù –ü–†–û–í–ï–†–ö–ò UniFarm');
    console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toISOString());
    
    await this.auditWebhookAndBot();
    await this.auditAPIRoutes();
    await this.auditTelegramAuth();
    await this.auditBusinessModules();
    await this.auditUIUX();
    await this.auditSecurity();
    await this.auditMonitoring();
    await this.auditReplit();
    await this.auditMiniApp();
    
    this.generateReport();
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
const audit = new UniFarmLaunchAudit();
audit.runFullAudit().catch(console.error);