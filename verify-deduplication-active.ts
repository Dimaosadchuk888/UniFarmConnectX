#!/usr/bin/env tsx
/**
 * üîç –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ò –°–û–ó–î–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ß–ï–†–ï–ó API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
 */

import { supabase } from './core/supabase';

async function verifyAndCreateBalance() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ò –°–û–ó–î–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê USER 255');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
    
    const { data: recentDeposits } = await supabase
      .from('transactions')
      .select('user_id, amount_ton, created_at, type, status')
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .eq('currency', 'TON')
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (recentDeposits && recentDeposits.length > 0) {
      console.log('‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç:');
      recentDeposits.forEach((tx, i) => {
        const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
        console.log(`   ${i + 1}. User ${tx.user_id}: ${tx.amount_ton} TON (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥) - ${tx.status}`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ user_balances:');
    
    // –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É
    const { data: tableInfo } = await supabase
      .from('user_balances')
      .select('*')
      .limit(1);
      
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–µ–π user_balances:');
    if (tableInfo && tableInfo[0]) {
      Object.keys(tableInfo[0]).forEach(column => {
        console.log(`   - ${column}: ${typeof tableInfo[0][column]}`);
      });
    }
    
    // 3. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    console.log('\n3Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ß–ï–†–ï–ó –£–ü–†–ê–í–õ–Ø–ï–ú–´–ô –°–ü–û–°–û–ë:');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å (–º–æ–∂–µ—Ç –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞)
    const { data: existingBalance, error: checkError } = await supabase
      .from('user_balances')
      .select('*')
      .eq('user_id', 255)
      .maybeSingle(); // maybeSingle instead of single to avoid error if not found
      
    if (existingBalance) {
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      console.log(`   UNI: ${existingBalance.uni_balance}`);
      console.log(`   TON: ${existingBalance.ton_balance}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã
      const { error: updateError } = await supabase
        .from('user_balances')
        .update({
          ton_balance: 2.60,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', 255);
        
      if (!updateError) {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 2.60');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
      }
      
    } else {
      console.log('üîß –ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const { data: user } = await supabase
        .from('users')
        .select('id')
        .eq('id', 255)
        .single();
        
      if (!user) {
        console.log('‚ùå User 255 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users');
        return;
      }
      
      console.log('‚úÖ User 255 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å...');
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const { data: newBalance, error: insertError } = await supabase
        .from('user_balances')
        .insert([{
          user_id: 255,
          uni_balance: 154.076667, // –°—É–º–º–∞ –µ–≥–æ –Ω–∞–≥—Ä–∞–¥ UNI
          ton_balance: 2.60        // –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ TON
        }])
        .select();
        
      if (insertError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', insertError);
        console.log('–î–µ—Ç–∞–ª–∏:', JSON.stringify(insertError, null, 2));
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ upsert
        console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ UPSERT:');
        
        const { error: upsertError } = await supabase
          .from('user_balances')
          .upsert({
            user_id: 255,
            uni_balance: 154.076667,
            ton_balance: 2.60
          }, {
            onConflict: 'user_id'
          });
          
        if (!upsertError) {
          console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ UPSERT!');
        } else {
          console.log('‚ùå UPSERT —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', upsertError);
        }
        
      } else {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        console.log('–î–∞–Ω–Ω—ã–µ:', newBalance);
      }
    }
    
    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
    
    const { data: finalBalance } = await supabase
      .from('user_balances')
      .select('*')
      .eq('user_id', 255)
      .maybeSingle();
      
    if (finalBalance) {
      console.log('‚úÖ –£–°–ü–ï–•! –ë–∞–ª–∞–Ω—Å User 255 –Ω–∞–π–¥–µ–Ω:');
      console.log(`   UNI: ${finalBalance.uni_balance}`);
      console.log(`   TON: ${finalBalance.ton_balance}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${finalBalance.created_at}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${finalBalance.updated_at}`);
      
      console.log('\nüéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê:');
      console.log('   ‚úÖ User 255 —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –∑–∞–ø–∏—Å—å –≤ user_balances');
      console.log('   ‚úÖ –ï–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è');
      console.log('   ‚úÖ TON Boost –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      
    } else {
      console.log('‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ —Å–æ–∑–¥–∞–Ω');
      
      console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (foreign key, constraints)');
      console.log('2. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Supabase');
      console.log('3. –¢—Ä–∏–≥–≥–µ—Ä—ã –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ RLS');
      console.log('4. –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    }
    
    // 5. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –î–ï–ü–û–ó–ò–¢–û–í:');
    console.log('');
    console.log('üö® –ö–û–†–ï–ù–¨ –ü–†–û–ë–õ–ï–ú–´ –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò:');
    console.log('');
    console.log('1. –û–¢–°–£–¢–°–¢–í–ò–ï WEBHOOK –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log('   ‚ùå –ù–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤: TONAPI_KEY, TON_WEBHOOK_SECRET');
    console.log('   ‚ùå –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ endpoint –¥–ª—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   ‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–ª–æ–∫—á–µ–π–Ω–∞');
    console.log('');
    console.log('2. –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –û–¢ FRONTEND:');
    console.log('   üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TON –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
    console.log('   ‚è≥ Frontend –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å /api/v2/wallet/ton-deposit');
    console.log('   ‚ùå –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - –¥–µ–ø–æ–∑–∏—Ç "–ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è"');
    console.log('');
    console.log('3. MISSING BALANCE RECORD (User 255):');
    console.log('   ‚ùå processTonDeposit –Ω–µ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å');
    console.log('   ‚úÖ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞');
    console.log('');
    console.log('üîß –î–õ–Ø –ü–û–õ–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –ù–£–ñ–ù–û:');
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å TON API webhook —Å–µ–∫—Ä–µ—Ç—ã');
    console.log('   2. –°–æ–∑–¥–∞—Ç—å endpoint –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TON –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞');
    console.log('   4. –î–æ–±–∞–≤–∏—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    console.log('\n' + '='.repeat(80));
    console.log('üéØ –°–¢–ê–¢–£–°: User 255 —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤!');
    console.log('='.repeat(80));
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
  }
}

verifyAndCreateBalance().catch(console.error);