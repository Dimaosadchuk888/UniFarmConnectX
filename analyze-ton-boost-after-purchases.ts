import { supabase } from './core/supabase';

async function analyzeTonBoostAfterPurchases() {
  console.log('=== –ê–ù–ê–õ–ò–ó TON BOOST –ü–û–°–õ–ï –ù–û–í–´–• –ü–û–ö–£–ü–û–ö ===\n');
  console.log(`–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74 –≤ ton_farming_data
    console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 74:\n');
    
    const { data: tonData, error: tonError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', 74)
      .single();

    if (tonError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ ton_farming_data:', tonError.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, balance_ton, ton_boost_active, ton_boost_package_id, ton_farming_balance, ton_farming_rate')
        .eq('id', 74)
        .single();

      if (userError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ users:', userError.message);
      } else if (userData) {
        console.log('üìç –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users:');
        console.log(`  ID: ${userData.id}`);
        console.log(`  Balance TON: ${userData.balance_ton}`);
        console.log(`  TON Boost Active: ${userData.ton_boost_active}`);
        console.log(`  Package ID: ${userData.ton_boost_package_id}`);
        console.log(`  Farming Balance: ${userData.ton_farming_balance || '0'} TON`);
        console.log(`  Rate: ${userData.ton_farming_rate}%`);
      }
    } else if (tonData) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data:');
      console.log(`  User ID: ${tonData.user_id}`);
      console.log(`  Boost Active: ${tonData.boost_active}`);
      console.log(`  Package ID: ${tonData.boost_package_id}`);
      console.log(`  Farming Balance: ${tonData.farming_balance} TON ${tonData.farming_balance > 0 ? '‚úÖ' : '‚ùå'}`);
      console.log(`  Farming Rate: ${tonData.farming_rate}%`);
      console.log(`  Last Update: ${new Date(tonData.farming_last_update).toLocaleString()}`);
      
      if (parseFloat(tonData.farming_balance) > 0) {
        const dailyIncome = parseFloat(tonData.farming_balance) * parseFloat(tonData.farming_rate);
        console.log(`\n  üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${dailyIncome.toFixed(6)} TON/–¥–µ–Ω—å`);
        console.log(`  ‚è±Ô∏è  –ó–∞ 5 –º–∏–Ω—É—Ç: ${(dailyIncome * 5 / 1440).toFixed(6)} TON`);
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
    console.log('\nüìù 2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–ö–£–ü–ö–ò TON BOOST (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):\n');
    
    const { data: purchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(5);

    if (purchaseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', purchaseError.message);
    } else if (purchases && purchases.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${purchases.length}\n`);
      
      for (const purchase of purchases) {
        console.log(`  üìÖ ${new Date(purchase.created_at).toLocaleString()}`);
        console.log(`  üíµ –°—É–º–º–∞: ${purchase.amount} ${purchase.currency}`);
        console.log(`  üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
        
        if (purchase.metadata) {
          const metadata = typeof purchase.metadata === 'string' ? JSON.parse(purchase.metadata) : purchase.metadata;
          if (metadata.boost_package) {
            console.log(`  üì¶ –ü–∞–∫–µ—Ç: ${metadata.boost_package.name} (ID: ${metadata.boost_package.id})`);
            console.log(`  üìà –°—Ç–∞–≤–∫–∞: ${metadata.boost_package.daily_rate}%`);
          }
        }
        console.log('  ---');
      }
    } else {
      console.log('  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    console.log('\nüí∏ 3. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ê–ß–ò–°–õ–ï–ù–ò–ô TON BOOST (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n');
    
    const { data: rewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);

    if (rewardError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:', rewardError.message);
    } else if (rewards && rewards.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${rewards.length}\n`);
      
      let totalRewards = 0;
      for (const reward of rewards) {
        const amount = parseFloat(reward.amount);
        totalRewards += amount;
        
        console.log(`  üìÖ ${new Date(reward.created_at).toLocaleString()}`);
        console.log(`  üí∞ –°—É–º–º–∞: +${amount.toFixed(6)} TON`);
        console.log(`  üìã ${reward.description}`);
        
        if (reward.metadata) {
          const metadata = typeof reward.metadata === 'string' ? JSON.parse(reward.metadata) : reward.metadata;
          if (metadata.deposit_amount !== undefined) {
            console.log(`  üìä –î–µ–ø–æ–∑–∏—Ç –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadata.deposit_amount} TON`);
          }
        }
        console.log('  ---');
      }
      
      console.log(`\n  üìä –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalRewards.toFixed(6)} TON`);
    } else {
      console.log('  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    console.log('\nüë• 4. –í–°–ï –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n');
    
    const { data: allActive, error: allError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true)
      .order('farming_balance', { ascending: false });

    if (allError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allError.message);
    } else if (allActive && allActive.length > 0) {
      console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${allActive.length}\n`);
      
      let totalDeposits = 0;
      let usersWithDeposits = 0;
      
      for (const user of allActive) {
        const deposit = parseFloat(user.farming_balance || '0');
        totalDeposits += deposit;
        if (deposit > 0) usersWithDeposits++;
        
        console.log(`  User ${user.user_id}: ${deposit} TON ${deposit > 0 ? '‚úÖ' : '‚ùå'} (–ø–∞–∫–µ—Ç ${user.boost_package_id})`);
      }
      
      console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${usersWithDeposits}/${allActive.length}`);
      console.log(`  - –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits.toFixed(2)} TON`);
      console.log(`  - –°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${(totalDeposits / allActive.length).toFixed(2)} TON`);
    }

    // 5. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüîç 5. –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:\n');
    
    const issues = [];
    
    if (tonData && parseFloat(tonData.farming_balance || '0') === 0 && tonData.boost_active) {
      issues.push('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 74 –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π boost, –Ω–æ farming_balance = 0');
    }
    
    if (purchases && purchases.length > 0 && (!tonData || parseFloat(tonData.farming_balance || '0') === 0)) {
      issues.push('‚ùå –ï—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏, –Ω–æ farming_balance –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (rewards && rewards.length > 0) {
      const lastReward = rewards[0];
      if (parseFloat(lastReward.amount) > 1) {
        issues.push('‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∑–∞–≤—ã—à–µ–Ω–Ω—ã–º (>1 TON –∑–∞ 5 –º–∏–Ω—É—Ç)');
      }
    }
    
    if (issues.length === 0) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ farming_balance');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏');
      console.log('‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–µ–ø–æ–∑–∏—Ç–∞–º');
    } else {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
      issues.forEach(issue => console.log(`  ${issue}`));
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

analyzeTonBoostAfterPurchases();