#!/usr/bin/env tsx

/**
 * üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–û–í
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤:
 * - –î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è, –ø–æ—Ç–æ–º –∏—Å—á–µ–∑–∞–µ—Ç
 * - –ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –Ω–µ —Å–ø–∏—Å–∞—Ç—å—Å—è
 * - –ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç —Å–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
 * - –ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ
 * 
 * –¶–µ–ª—å: –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function analyzeBalanceSynchronization() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–û–í');
  console.log('=' .repeat(80));
  
  const report: string[] = [];
  report.push('üîç –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–û–í');
  report.push('='.repeat(70));
  report.push('');
  
  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê USER 25 –í –¢–ê–ë–õ–ò–¶–ï USERS
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ User 25 –≤ —Ç–∞–±–ª–∏—Ü–µ users...');
    
    const { data: user25Balance, error: balanceError } = await supabase
      .from('users')
      .select('id, balance_uni, balance_ton, created_at')
      .eq('id', 25)
      .single();

    if (balanceError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê: ${balanceError.message}`);
    } else {
      report.push('1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° USER 25 –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
      report.push(`   User ID: ${user25Balance.id}`);
      report.push(`   UNI Balance: ${user25Balance.balance_uni}`);
      report.push(`   TON Balance: ${user25Balance.balance_ton}`);
      report.push(`   Account Created: ${user25Balance.created_at}`);
      report.push('');
    }

    // 2. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê TON
    console.log('2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π TON –±–∞–ª–∞–Ω—Å–∞...');
    
    const { data: recentTonTx, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', '25')
      .eq('currency', 'TON')
      .gte('created_at', '2025-07-27T00:00:00')
      .order('created_at', { ascending: false })
      .limit(20);

    if (tonError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${tonError.message}`);
    } else {
      report.push('2Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 25:');
      if (recentTonTx && recentTonTx.length > 0) {
        let runningBalance = 0;
        report.push('   –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞:');
        
        recentTonTx.reverse().forEach((tx: any, index: number) => {
          runningBalance += tx.amount;
          report.push(`   [${index + 1}] ${tx.created_at.slice(11, 19)} | ${tx.type} | ${tx.amount > 0 ? '+' : ''}${tx.amount} TON | Running: ${runningBalance.toFixed(6)} TON`);
          
          // –í—ã–¥–µ–ª–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          if (tx.amount > 0 && tx.type === 'DEPOSIT') {
            report.push(`       ‚úÖ –î–ï–ü–û–ó–ò–¢: ${tx.description.slice(0, 50)}...`);
          }
          if (tx.amount < 0) {
            report.push(`       ‚ö†Ô∏è  –°–ü–ò–°–ê–ù–ò–ï: ${tx.description.slice(0, 50)}...`);
          }
        });
        
        report.push(`   üìä –ò–¢–û–ì–û–í–´–ô –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–°: ${runningBalance.toFixed(6)} TON`);
        if (user25Balance) {
          const difference = Math.abs(runningBalance - user25Balance.balance_ton);
          if (difference > 0.000001) {
            report.push(`   ‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –° –ë–ê–ó–û–ô: ${difference.toFixed(6)} TON`);
            report.push(`   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –û–ë–ù–ê–†–£–ñ–ï–ù–ê!`);
          } else {
            report.push(`   ‚úÖ –ë–ê–õ–ê–ù–° –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù –ö–û–†–†–ï–ö–¢–ù–û`);
          }
        }
      } else {
        report.push('   ‚ùå TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      report.push('');
    }

    // 3. –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('3Ô∏è‚É£ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const { data: duplicateTx, error: dupError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', '25')
      .not('tx_hash_unique', 'is', null)
      .gte('created_at', '2025-07-26T00:00:00')
      .order('created_at', { ascending: false });

    if (dupError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í: ${dupError.message}`);
    } else {
      report.push('3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
      if (duplicateTx && duplicateTx.length > 0) {
        const hashGroups: { [key: string]: any[] } = {};
        duplicateTx.forEach(tx => {
          const hash = tx.tx_hash_unique;
          if (!hashGroups[hash]) hashGroups[hash] = [];
          hashGroups[hash].push(tx);
        });
        
        let duplicatesFound = 0;
        Object.entries(hashGroups).forEach(([hash, txs]) => {
          if (txs.length > 1) {
            duplicatesFound++;
            report.push(`   ‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢ #${duplicatesFound}: Hash ${hash.slice(0, 20)}... (${txs.length} –∫–æ–ø–∏–π)`);
            txs.forEach((tx, i) => {
              report.push(`      –ö–æ–ø–∏—è ${i + 1}: ID ${tx.id}, ${tx.amount} ${tx.currency}, ${tx.created_at.slice(0, 19)}`);
            });
            report.push('');
          }
        });
        
        if (duplicatesFound === 0) {
          report.push('   ‚úÖ –î–£–ë–õ–ò–ö–ê–¢–´ –ù–ï –ù–ê–ô–î–ï–ù–´ - –°–ò–°–¢–ï–ú–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢');
        } else {
          report.push(`   ‚ùå –ù–ê–ô–î–ï–ù–û ${duplicatesFound} –ì–†–£–ü–ü –î–£–ë–õ–ò–ö–ê–¢–û–í!`);
          report.push('   ‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´ –ú–û–ì–£–¢ –í–´–ó–´–í–ê–¢–¨ –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ –ë–ê–õ–ê–ù–°–û–í');
        }
      } else {
        report.push('   ‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –•–≠–®–ê–ú–ò –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      report.push('');
    }

    // 4. –ü–†–û–í–ï–†–ö–ê CONSISTENCY –ú–ï–ñ–î–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò –ò –ë–ê–õ–ê–ù–°–û–ú
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data: allUserTx, error: allTxError } = await supabase
      .from('transactions')
      .select('currency, amount, type')
      .eq('user_id', '25')
      .eq('status', 'completed');

    if (allTxError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${allTxError.message}`);
    } else {
      report.push('4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:');
      if (allUserTx && allUserTx.length > 0) {
        const uniSum = allUserTx
          .filter(tx => tx.currency === 'UNI')
          .reduce((sum, tx) => sum + tx.amount, 0);
        
        const tonSum = allUserTx
          .filter(tx => tx.currency === 'TON')
          .reduce((sum, tx) => sum + tx.amount, 0);
        
        report.push(`   üìä –°–£–ú–ú–ê –í–°–ï–• UNI –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${uniSum.toFixed(8)} UNI`);
        report.push(`   üìä –°–£–ú–ú–ê –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${tonSum.toFixed(8)} TON`);
        
        if (user25Balance) {
          const uniDiff = Math.abs(uniSum - user25Balance.balance_uni);
          const tonDiff = Math.abs(tonSum - user25Balance.balance_ton);
          
          report.push(`   üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° UNI: ${user25Balance.balance_uni} UNI`);
          report.push(`   üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° TON: ${user25Balance.balance_ton} TON`);
          
          if (uniDiff > 0.001) {
            report.push(`   ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï UNI: ${uniDiff.toFixed(8)} UNI`);
          } else {
            report.push(`   ‚úÖ UNI –ë–ê–õ–ê–ù–° –ö–û–ù–°–ò–°–¢–ï–ù–¢–ï–ù`);
          }
          
          if (tonDiff > 0.000001) {
            report.push(`   ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï TON: ${tonDiff.toFixed(8)} TON`);
          } else {
            report.push(`   ‚úÖ TON –ë–ê–õ–ê–ù–° –ö–û–ù–°–ò–°–¢–ï–ù–¢–ï–ù`);
          }
        }
      }
      report.push('');
    }

    // 5. –ü–†–û–í–ï–†–ö–ê –ù–ï–î–ê–í–ù–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –°–ò–°–¢–ï–ú–ï
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ...');
    
    const { data: recentSystemTx, error: systemError } = await supabase
      .from('transactions')
      .select('user_id, type, amount, currency, created_at, description')
      .gte('created_at', '2025-07-27T14:30:00')
      .lte('created_at', '2025-07-27T15:00:00')
      .in('type', ['DEPOSIT', 'TON_DEPOSIT', 'WITHDRAWAL', 'TON_WITHDRAWAL'])
      .order('created_at', { ascending: false })
      .limit(50);

    if (systemError) {
      report.push(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${systemError.message}`);
    } else {
      report.push('5Ô∏è‚É£ –°–ò–°–¢–ï–ú–ù–´–ï –î–ï–ü–û–ó–ò–¢–´/–í–´–í–û–î–´ –ó–ê –ü–ï–†–ò–û–î 14:30-15:00:');
      if (recentSystemTx && recentSystemTx.length > 0) {
        const affectedUsers = new Set();
        recentSystemTx.forEach((tx: any) => {
          affectedUsers.add(tx.user_id);
          report.push(`   ${tx.created_at.slice(11, 19)} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency}`);
          if (tx.user_id === '25') {
            report.push(`       ‚ö†Ô∏è  –ö–ê–°–ê–ï–¢–°–Ø USER 25: ${tx.description.slice(0, 60)}...`);
          }
        });
        
        report.push(`   üìä –ó–ê–¢–†–û–ù–£–¢–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${affectedUsers.size}`);
        report.push(`   üìä –û–ë–©–ò–ô –°–ò–°–¢–ï–ú–ù–´–ô –¢–†–ê–§–ò–ö: ${recentSystemTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 30 –º–∏–Ω—É—Ç`);
      } else {
        report.push('   ‚ùå –°–ò–°–¢–ï–ú–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      report.push('');
    }

    // –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó
    report.push('üéØ –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    report.push('=' .repeat(50));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    let hasConsistencyIssues = false;
    let hasDuplicates = false;
    let hasSystemLoad = false;
    
    if (user25Balance && recentTonTx) {
      const calculatedBalance = recentTonTx.reduce((sum: number, tx: any) => sum + tx.amount, 0);
      hasConsistencyIssues = Math.abs(calculatedBalance - user25Balance.balance_ton) > 0.000001;
    }
    
    if (duplicateTx) {
      const hashGroups: { [key: string]: any[] } = {};
      duplicateTx.forEach(tx => {
        const hash = tx.tx_hash_unique;
        if (!hashGroups[hash]) hashGroups[hash] = [];
        hashGroups[hash].push(tx);
      });
      hasDuplicates = Object.values(hashGroups).some(group => group.length > 1);
    }
    
    hasSystemLoad = (recentSystemTx?.length || 0) > 20;
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    if (hasConsistencyIssues) {
      report.push('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•');
      report.push('   –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê:');
      report.push('   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –±–∞–ª–∞–Ω—Å–æ–≤—ã–µ –∫–µ—à–∏');
      report.push('   2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      report.push('   3. –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±–∞–ª–∞–Ω—Å–æ–≤ –≤ Redis/–ø–∞–º—è—Ç–∏');
      report.push('   4. –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    
    if (hasDuplicates) {
      report.push('‚ùå –ü–†–û–ë–õ–ï–ú–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –û–ë–ù–ê–†–£–ñ–ï–ù–ê');
      report.push('   –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      report.push('   1. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é');
      report.push('   2. –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏');
      report.push('   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã');
    }
    
    if (hasSystemLoad) {
      report.push('‚ö†Ô∏è  –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê –ù–ê –°–ò–°–¢–ï–ú–£');
      report.push('   –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      report.push('   1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π WebSocket');
      report.push('   2. –î–æ–±–∞–≤–∏—Ç—å rate limiting –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤');
      report.push('   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å batch updates –≤–º–µ—Å—Ç–æ individual');
    }
    
    report.push('');
    report.push('üìã –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–ò:');
    report.push('   1. –î–æ–±–∞–≤–∏—Ç—å heartbeat –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    report.push('   2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å auto-reconciliation –±–∞–ª–∞–Ω—Å–æ–≤');
    report.push('   3. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ real-time');
    report.push('   4. –£–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è—Ö');
    report.push('   5. –í–Ω–µ–¥—Ä–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportContent = report.join('\n');
    const filename = `USER25_BALANCE_SYNC_ANALYSIS_${new Date().toISOString().slice(0,19).replace(/:/g,'-')}.md`;
    
    fs.writeFileSync(filename, reportContent, 'utf8');
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
    
    console.log('\n' + reportContent);
    
    return {
      success: true,
      reportFile: filename,
      hasConsistencyIssues,
      hasDuplicates,
      hasSystemLoad
    };
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  try {
    const result = await analyzeBalanceSynchronization();
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –ê–ù–ê–õ–ò–ó –ü–†–û–í–ê–õ–ï–ù:', error);
    process.exit(1);
  }
}

main();

export { analyzeBalanceSynchronization };