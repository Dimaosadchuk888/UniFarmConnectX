#!/usr/bin/env tsx

/**
 * üîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –ê–î–ú–ò–ù–û–í –í AdminBotService
 * –¢–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function checkAdminLookupLogic() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –ê–î–ú–ò–ù–û–í –í AdminBotService');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é authorizedAdmins
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ authorizedAdmins...');
    
    const fs = await import('fs');
    const adminBotConfig = fs.readFileSync('config/adminBot.ts', 'utf8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ authorizedAdmins
    const authorizedMatch = adminBotConfig.match(/authorizedAdmins:\s*\[(.*?)\]/s);
    if (!authorizedMatch) {
      console.log('‚ùå authorizedAdmins –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }
    
    const adminsList = authorizedMatch[1].match(/'@[^']+'/g);
    console.log(`üìù –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: ${adminsList?.join(', ')}`);
    
    const authorizedAdmins = adminsList?.map(admin => admin.replace(/'/g, '')) || [];
    console.log(`üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${authorizedAdmins.join(', ')}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    for (const adminUsername of authorizedAdmins) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞: ${adminUsername}`);
      
      // –õ–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ AdminBotService.notifyWithdrawal()
      const cleanUsername = adminUsername.replace('@', '');
      console.log(`   üìù –û—á–∏—â–µ–Ω–Ω—ã–π username: "${cleanUsername}"`);
      
      // –ó–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
      const { data: adminUser, error } = await supabase
        .from('users')
        .select('telegram_id, username, id, is_admin')
        .eq('username', cleanUsername)
        .eq('is_admin', true)
        .single();
        
      if (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ .single()
        const { data: allMatches } = await supabase
          .from('users')
          .select('telegram_id, username, id, is_admin')
          .eq('username', cleanUsername)
          .eq('is_admin', true);
          
        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${allMatches?.length || 0}`);
        
        if (allMatches && allMatches.length > 0) {
          console.log('   üìã –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:');
          allMatches.forEach((match, index) => {
            console.log(`      ${index + 1}. ID: ${match.id}, Telegram: ${match.telegram_id}, Username: @${match.username}`);
          });
          
          if (allMatches.length > 1) {
            console.log('   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º username - .single() –ø–∞–¥–∞–µ—Ç!');
            console.log('   üîß –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .limit(1) –≤–º–µ—Å—Ç–æ .single()');
          }
        }
        
      } else {
        console.log(`   ‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω: ID ${adminUser.id}, Telegram ${adminUser.telegram_id}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏
      console.log(`   üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ilike...`);
      
      const { data: ilikeResults } = await supabase
        .from('users')
        .select('telegram_id, username, id, is_admin')
        .ilike('username', cleanUsername)
        .eq('is_admin', true);
        
      console.log(`   üìä ilike —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${ilikeResults?.length || 0}`);
      
      ilikeResults?.forEach((result, index) => {
        console.log(`      ${index + 1}. @${result.username} (${result.telegram_id}) - ID: ${result.id}`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–æ–≤
    console.log('\n3Ô∏è‚É£ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data: allAdmins } = await supabase
      .from('users')
      .select('id, username, telegram_id, is_admin, created_at')
      .eq('is_admin', true)
      .order('created_at', { ascending: false });
      
    console.log(`üë• –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: ${allAdmins?.length || 0}`);
    
    allAdmins?.forEach((admin, index) => {
      console.log(`   ${index + 1}. @${admin.username} - Telegram: ${admin.telegram_id} - ID: ${admin.id}`);
      console.log(`      –°–æ–∑–¥–∞–Ω: ${new Date(admin.created_at).toLocaleString('ru-RU')}`);
    });

    // 4. –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è username...');
    
    const usernameCounts: Record<string, number> = {};
    allAdmins?.forEach(admin => {
      usernameCounts[admin.username] = (usernameCounts[admin.username] || 0) + 1;
    });
    
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ username:');
    Object.entries(usernameCounts).forEach(([username, count]) => {
      console.log(`   @${username}: ${count} ${count > 1 ? '‚ö†Ô∏è –î–£–ë–õ–ò–ö–ê–¢–´!' : '‚úÖ'}`);
    });

    // 5. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø...');
    
    const duplicateUsernames = Object.entries(usernameCounts).filter(([_, count]) => count > 1);
    
    if (duplicateUsernames.length > 0) {
      console.log('üîß –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ username –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É .single()');
      console.log('   –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ username:', duplicateUsernames.map(([name]) => `@${name}`).join(', '));
      console.log('\n   –†–ï–®–ï–ù–ò–Ø:');
      console.log('   1. –ó–∞–º–µ–Ω–∏—Ç—å .single() –Ω–∞ .limit(1).maybeSingle()');
      console.log('   2. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–æ–≤');
      console.log('   3. –î–æ–±–∞–≤–∏—Ç—å unique index –Ω–∞ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞...');
    
    let workingAdmins = 0;
    
    for (const adminUsername of authorizedAdmins) {
      const cleanUsername = adminUsername.replace('@', '');
      
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const { data: adminUser } = await supabase
        .from('users')
        .select('telegram_id, username, id')
        .eq('username', cleanUsername)
        .eq('is_admin', true)
        .limit(1)
        .maybeSingle();
        
      if (adminUser?.telegram_id) {
        console.log(`   ‚úÖ ${adminUsername} ‚Üí Telegram ID: ${adminUser.telegram_id}`);
        workingAdmins++;
      } else {
        console.log(`   ‚ùå ${adminUsername} ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
    console.log(`\nüìä –ò–¢–û–ì–û —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π: ${workingAdmins}/${authorizedAdmins.length} –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
    
    if (workingAdmins === authorizedAdmins.length) {
      console.log('‚úÖ –í–°–ï –ê–î–ú–ò–ù–´ –ë–£–î–£–¢ –ù–ê–ô–î–ï–ù–´ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è .single() ‚Üí .limit(1).maybeSingle()');
    } else {
      console.log('‚ö†Ô∏è  –û—Å—Ç–∞–Ω—É—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã –¥–∞–∂–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –ê–î–ú–ò–ù–û–í');
    console.log(`‚è∞ ${new Date().toISOString()}\n`);
    
    await checkAdminLookupLogic();
    
    console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();