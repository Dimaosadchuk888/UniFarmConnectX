/**
 * –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function honestReferralTest() {
  console.log('=== –ß–ï–°–¢–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê');
    let serverRunning = false;
    
    try {
      const response = await fetch('http://localhost:3000/health', { timeout: 5000 });
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.status);
        serverRunning = true;
      } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', response.status);
      }
    } catch (error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    console.log('\nüîç 2. –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–î');
    
    const { data: usersCount } = await supabase
      .from('users')
      .select('id', { count: 'exact', head: true });
    
    const { data: referralsCount } = await supabase
      .from('referrals')
      .select('id', { count: 'exact', head: true });
    
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount?.length || 0}`);
    console.log(`üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${referralsCount?.length || 0}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    console.log('\nüîç 3. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô');
    
    const { data: recentUsers } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    recentUsers?.forEach((user, index) => {
      console.log(`${index + 1}. ID: ${user.id}, TG: ${user.telegram_id}, referred_by: ${user.referred_by || 'NULL'}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ User 224 (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã)
    console.log('\nüîç 4. –ü–†–û–í–ï–†–ö–ê USER 224');
    
    const { data: user224 } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', 1768648474)
      .single();
    
    if (user224) {
      console.log('‚úÖ User 224 –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${user224.id}`);
      console.log(`   Username: ${user224.username}`);
      console.log(`   referred_by: ${user224.referred_by || 'NULL'}`);
      console.log(`   ref_code: ${user224.ref_code}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ referrals
      const { data: user224Referral } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', user224.id)
        .single();
      
      if (user224Referral) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals –Ω–∞–π–¥–µ–Ω–∞');
      } else {
        console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ referrals –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ùå User 224 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüìä 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´');
    
    const { data: usersWithReferredBy } = await supabase
      .from('users')
      .select('id')
      .not('referred_by', 'is', null);
    
    const { data: referralsRecords } = await supabase
      .from('referrals')
      .select('id');
    
    const usersWithReferredByCount = usersWithReferredBy?.length || 0;
    const referralsRecordsCount = referralsRecords?.length || 0;
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by: ${usersWithReferredByCount}`);
    console.log(`üîó –ó–∞–ø–∏—Å–∏ –≤ referrals: ${referralsRecordsCount}`);
    
    const discrepancy = usersWithReferredByCount - referralsRecordsCount;
    console.log(`üìä –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${discrepancy}`);
    
    if (discrepancy > 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by, –Ω–æ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ referrals');
    } else {
      console.log('‚úÖ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ß–µ—Å—Ç–Ω—ã–π –≤—ã–≤–æ–¥
    console.log('\nüéØ 6. –ß–ï–°–¢–ù–´–ô –í–´–í–û–î');
    
    if (serverRunning) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã');
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–µ–ª—å–∑—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    if (discrepancy > 0) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
      console.log('‚ùå –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´');
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ë–î —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã');
    }
    
    console.log('\nüìù –¢–†–ï–ë–£–ï–¢–°–Ø:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('2. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ referred_by –ò referrals');
    console.log('4. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

honestReferralTest();