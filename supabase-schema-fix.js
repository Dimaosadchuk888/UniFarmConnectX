/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –≤ Supabase —Å—Ö–µ–º–µ
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –∫–æ–¥
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class SupabaseSchemaFix {
  constructor() {
    this.supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_KEY
    );
    console.log('üîß –ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Supabase...\n');
  }

  async analyzeTableStructure(tableName) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const { data, error } = await this.supabase
        .from(tableName)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå ${tableName}: ${error.message}`);
        return null;
      }

      if (data && data.length > 0) {
        const columns = Object.keys(data[0]);
        console.log(`‚úÖ ${tableName}: –Ω–∞–π–¥–µ–Ω–æ ${columns.length} –∫–æ–ª–æ–Ω–æ–∫`);
        console.log(`   –ö–æ–ª–æ–Ω–∫–∏: ${columns.join(', ')}`);
        return columns;
      } else {
        console.log(`‚ö†Ô∏è ${tableName}: —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...`);
        return await this.createTestRecord(tableName);
      }
    } catch (error) {
      console.log(`‚ùå ${tableName}: ${error.message}`);
      return null;
    }
  }

  async createTestRecord(tableName) {
    try {
      let testRecord = {};
      
      switch (tableName) {
        case 'transactions':
          testRecord = {
            user_id: 1,
            transaction_type: 'daily_bonus',
            status: 'completed',
            description: 'Test transaction'
          };
          break;
        case 'farming_sessions':
          testRecord = {
            user_id: 1,
            farming_type: 'UNI_FARMING',
            status: 'active'
          };
          break;
        default:
          return null;
      }

      const { data, error } = await this.supabase
        .from(tableName)
        .insert([testRecord])
        .select()
        .single();

      if (!error && data) {
        const columns = Object.keys(data);
        console.log(`‚úÖ ${tableName}: —Å–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å ${columns.length} –∫–æ–ª–æ–Ω–∫–∞–º–∏`);
        console.log(`   –ö–æ–ª–æ–Ω–∫–∏: ${columns.join(', ')}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await this.supabase.from(tableName).delete().eq('id', data.id);
        
        return columns;
      } else {
        console.log(`‚ùå ${tableName}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å - ${error?.message}`);
        return null;
      }
    } catch (error) {
      console.log(`‚ùå ${tableName}: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ - ${error.message}`);
      return null;
    }
  }

  async fixTransactionsSchema() {
    console.log('\nüí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TRANSACTIONS:\n');
    
    const columns = await this.analyzeTableStructure('transactions');
    if (!columns) return;

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã amount –∫–æ–ª–æ–Ω–∫–∏
    const amountVariants = ['amount', 'sum', 'value', 'transaction_amount'];
    const workingFields = {};

    for (const field of amountVariants) {
      if (columns.includes(field)) {
        workingFields.amount = field;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Å—É–º–º—ã: ${field}`);
        break;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    try {
      const correctTransaction = {
        user_id: 1,
        transaction_type: 'test_bonus',
        status: 'completed',
        description: 'Schema fix test'
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ
      if (workingFields.amount) {
        correctTransaction[workingFields.amount] = 5.0;
      }

      const { data, error } = await this.supabase
        .from('transactions')
        .insert([correctTransaction])
        .select()
        .single();

      if (!error && data) {
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ID ${data.id}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await this.supabase.from('transactions').delete().eq('id', data.id);
        
        return workingFields;
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error?.message}`);
      }
    } catch (error) {
      console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    }

    return workingFields;
  }

  async fixUsersSchema() {
    console.log('\nüë§ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï USERS:\n');
    
    const columns = await this.analyzeTableStructure('users');
    if (!columns) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ last_active –ø–æ–ª—è
    const timeFields = ['last_active', 'updated_at', 'last_login'];
    const workingFields = {};

    for (const field of timeFields) {
      if (columns.includes(field)) {
        workingFields.timestamp = field;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: ${field}`);
        break;
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    try {
      const updateData = {};
      if (workingFields.timestamp) {
        updateData[workingFields.timestamp] = new Date().toISOString();
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        if (columns.includes('checkin_last_date')) {
          updateData.checkin_last_date = new Date().toISOString();
          workingFields.timestamp = 'checkin_last_date';
        }
      }

      const { error } = await this.supabase
        .from('users')
        .update(updateData)
        .eq('telegram_id', '777777777');

      if (!error) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      }
    } catch (error) {
      console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }

    return workingFields;
  }

  async fixTelegramIdType() {
    console.log('\nüì± –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TELEGRAM_ID:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø telegram_id –≤ —Ç–∞–±–ª–∏—Ü–µ users
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —á–∏—Å–ª–æ–≤—ã–º telegram_id
      const numericTest = {
        telegram_id: 999888777,
        username: 'numeric_test',
        ref_code: `REF_NUM_${Date.now()}`,
        balance_uni: 0,
        balance_ton: 0
      };

      const { data: numericData, error: numericError } = await this.supabase
        .from('users')
        .insert([numericTest])
        .select()
        .single();

      if (!numericError && numericData) {
        console.log('‚úÖ Telegram_id –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
        await this.supabase.from('users').delete().eq('id', numericData.id);
        return 'numeric';
      }

      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º telegram_id
      const stringTest = {
        telegram_id: '999888777',
        username: 'string_test',
        ref_code: `REF_STR_${Date.now()}`,
        balance_uni: 0,
        balance_ton: 0
      };

      const { data: stringData, error: stringError } = await this.supabase
        .from('users')
        .insert([stringTest])
        .select()
        .single();

      if (!stringError && stringData) {
        console.log('‚úÖ Telegram_id –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
        await this.supabase.from('users').delete().eq('id', stringData.id);
        return 'string';
      }

      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø telegram_id:`);
      console.log(`   Numeric error: ${numericError?.message}`);
      console.log(`   String error: ${stringError?.message}`);

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ telegram_id: ${error.message}`);
    }

    return 'unknown';
  }

  async generateFixedCode(schemas) {
    console.log('\nüõ†Ô∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê:\n');

    const fixedCode = {
      transactions: {
        create: `
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function createTransaction(userId, amount, type, status = 'completed') {
  const transactionData = {
    user_id: userId,
    ${schemas.transactions?.amount || 'description'}: ${schemas.transactions?.amount ? 'amount' : `\`\${type} - \${amount}\``},
    transaction_type: type,
    status: status,
    created_at: new Date().toISOString()
  };

  const { data, error } = await supabase
    .from('transactions')
    .insert([transactionData])
    .select()
    .single();

  if (error) throw new Error(error.message);
  return data;
}`,
        select: `
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function getUserTransactions(userId) {
  const { data, error } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false });

  if (error) throw new Error(error.message);
  return data;
}`
      },
      users: {
        update: `
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserActivity(telegramId) {
  const updateData = {
    ${schemas.users?.timestamp || 'checkin_last_date'}: new Date().toISOString()
  };

  const { error } = await supabase
    .from('users')
    .update(updateData)
    .eq('telegram_id', ${schemas.telegramIdType === 'numeric' ? 'telegramId' : 'String(telegramId)'});

  if (error) throw new Error(error.message);
  return true;
}`
      }
    };

    console.log('‚úÖ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π');
    return fixedCode;
  }

  async runFix() {
    try {
      const schemas = {};
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º transactions
      schemas.transactions = await this.fixTransactionsSchema();
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º users
      schemas.users = await this.fixUsersSchema();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø telegram_id
      schemas.telegramIdType = await this.fixTelegramIdType();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
      const fixedCode = await this.generateFixedCode(schemas);
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n');
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω');
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
      console.log('‚úÖ –ö–æ–¥ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      return {
        schemas,
        fixedCode,
        status: 'completed'
      };
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }
}

async function main() {
  try {
    const fixer = new SupabaseSchemaFix();
    const result = await fixer.runFix();
    
    console.log('\nüéØ –°–•–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ');
    process.exit(0);
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();