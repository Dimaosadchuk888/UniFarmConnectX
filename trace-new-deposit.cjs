/**
 * –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ù–û–í–û–ì–û –î–ï–ü–û–ó–ò–¢–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function traceNewDeposit() {
  console.log('üîç –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ù–û–í–û–ì–û TON –î–ï–ü–û–ó–ò–¢–ê');
  console.log('='.repeat(50));
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏–∑ –ª–æ–≥–æ–≤ (User 184 –∏–∑ console.logs)
    const userId = 184;
    
    console.log(`üë§ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º User ID: ${userId}`);
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('balance_ton, balance_uni, telegram_id')
      .eq('id', userId)
      .single();
    
    if (userError || !user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return;
    }
    
    console.log('\nüí∞ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:');
    console.log(`   TON: ${user.balance_ton}`);
    console.log(`   UNI: ${user.balance_uni}`);
    console.log(`   Telegram ID: ${user.telegram_id}`);
    
    // 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: recentTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
      return;
    }
    
    console.log(`\nüìä –ü–û–°–õ–ï–î–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–´ (${recentTransactions?.length || 0}):`);
    
    if (recentTransactions && recentTransactions.length > 0) {
      let totalFromTransactions = 0;
      
      recentTransactions.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const timeAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60); // –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
        
        console.log(`\n   ${i + 1}. ID: ${tx.id}`);
        console.log(`      –°—É–º–º–∞: ${tx.amount} TON`);
        console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        
        totalFromTransactions += parseFloat(tx.amount || 0);
      });
      
      console.log(`\nüí∞ –°–£–ú–ú–ê–†–ù–û –ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${totalFromTransactions} TON`);
      console.log(`üí∞ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–°: ${user.balance_ton} TON`);
      
      const diff = parseFloat(user.balance_ton) - totalFromTransactions;
      console.log(`üí∞ –†–ê–ó–ù–ò–¶–ê: ${diff} TON`);
      
      if (Math.abs(diff) > 0.001) {
        console.log('‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï!');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const latestTx = recentTransactions[0];
        const latestTime = new Date(latestTx.created_at);
        const minutesAgo = Math.floor((Date.now() - latestTime.getTime()) / 1000 / 60);
        
        if (minutesAgo < 5) {
          console.log(`üî• –°–í–ï–ñ–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: ${latestTx.amount} TON (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
          console.log('üîç –í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ë–∞–ª–∞–Ω—Å –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
      } else {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º');
      }
      
    } else {
      console.log('   ‚ùå TON –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
    const { data: systemLogs, error: logsError } = await supabase
      .from('transactions')
      .select('created_at, user_id, type, status')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (!logsError && systemLogs) {
      console.log('   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ:');
      systemLogs.forEach((log, i) => {
        const time = new Date(log.created_at);
        const timeAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`      ${i + 1}. User ${log.user_id}: ${log.type} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
      });
    }
    
    console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error.message);
  }
}

traceNewDeposit().catch(console.error);