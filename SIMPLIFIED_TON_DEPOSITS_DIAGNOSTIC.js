#!/usr/bin/env node

/**
 * –£–ü–†–û–©–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í (–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤)
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function simpleDiagnostic() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: TON –î–ï–ü–û–ó–ò–¢–´ –í –ü–†–û–î–ê–ö–®–ù');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  
  // 1. –ü–û–ò–°–ö –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 2 –î–ù–Ø
  console.log('\nüìä 1. –í–°–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 2 –î–ù–Ø');
  console.log('-'.repeat(60));
  
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
  
  const { data: allTransactions, error } = await supabase
    .from('transactions')
    .select('*')
    .gte('created_at', twoDaysAgo.toISOString())
    .order('created_at', { ascending: false });

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    return;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º TON-—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const tonTransactions = allTransactions.filter(tx => 
    tx.currency === 'TON' || 
    (tx.amount_ton && parseFloat(tx.amount_ton) > 0) ||
    tx.type?.toLowerCase().includes('ton') ||
    tx.description?.toLowerCase().includes('ton')
  );

  console.log(`üìà –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 –¥–Ω—è: ${allTransactions.length}`);
  console.log(`ü™ô TON-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const typeGroups = {};
  tonTransactions.forEach(tx => {
    const key = `${tx.type}-${tx.currency}`;
    if (!typeGroups[key]) typeGroups[key] = [];
    typeGroups[key].push(tx);
  });

  console.log('\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
  Object.entries(typeGroups).forEach(([type, transactions]) => {
    console.log(`   ${type}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  });

  // 2. –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í (–ù–ï REFERRAL)
  console.log('\nüí∞ 2. –†–ï–ê–õ–¨–ù–´–ï TON –î–ï–ü–û–ó–ò–¢–´ (–ò–°–ö–õ–Æ–ß–ê–Ø REFERRAL)');
  console.log('-'.repeat(60));
  
  const realDeposits = tonTransactions.filter(tx => 
    !tx.type?.includes('REFERRAL') && 
    !tx.description?.includes('Referral') &&
    (tx.currency === 'TON' || (tx.amount_ton && parseFloat(tx.amount_ton) > 0.001))
  );
  
  console.log(`üéØ –†–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${realDeposits.length}`);
  
  if (realDeposits.length === 0) {
    console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–ï–¢ –†–ï–ê–õ–¨–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í –ó–ê 2 –î–ù–Ø!');
  } else {
    console.log('\nüìù –î–ï–¢–ê–õ–ò –†–ï–ê–õ–¨–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í:');
    realDeposits.slice(0, 10).forEach(tx => {
      console.log(`‚Ä¢ ${tx.created_at.split('T')[0]} | User ${tx.user_id} | ${tx.type} | ${tx.amount_ton} TON`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || 'N/A'}`);
    });
  }

  // 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON –ë–ê–õ–ê–ù–°–û–ú
  console.log('\nüë• 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON –ë–ê–õ–ê–ù–°–û–ú > 0.1');
  console.log('-'.repeat(60));
  
  const { data: usersWithTon, error: usersError } = await supabase
    .from('users')
    .select('id, username, balance_ton')
    .gt('balance_ton', 0.1)
    .order('balance_ton', { ascending: false })
    .limit(15);

  if (usersError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
    return;
  }

  console.log(`üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON > 0.1: ${usersWithTon.length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç—ã
  let usersWithoutDeposits = 0;
  for (const user of usersWithTon) {
    const userDeposits = realDeposits.filter(tx => tx.user_id === user.id);
    const hasDeposits = userDeposits.length > 0 ? '‚úÖ' : '‚ùå';
    
    if (userDeposits.length === 0) {
      usersWithoutDeposits++;
    }
    
    console.log(`${hasDeposits} User #${user.id} (@${user.username || 'N/A'}): ${user.balance_ton} TON, –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${userDeposits.length}`);
  }

  // 4. –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï
  console.log('\nüîß 4. –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´');
  console.log('-'.repeat(60));
  
  const keyFiles = [
    'modules/wallet/service.ts',
    'core/BalanceManager.ts',
    'core/UnifiedTransactionService.ts'
  ];

  for (const file of keyFiles) {
    try {
      const fs = await import('fs');
      const stats = fs.statSync(file);
      const modTime = stats.mtime.toLocaleString('ru-RU');
      const size = (stats.size / 1024).toFixed(1);
      console.log(`üìÑ ${file}: ${modTime} (${size}KB)`);
    } catch (error) {
      console.log(`‚ùå ${file}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }

  // 5. –ü–†–û–í–ï–†–ö–ê processTonDeposit –§–£–ù–ö–¶–ò–ò
  console.log('\n‚öôÔ∏è 5. –°–û–°–¢–û–Ø–ù–ò–ï –§–£–ù–ö–¶–ò–ò processTonDeposit');
  console.log('-'.repeat(60));
  
  try {
    const fs = await import('fs');
    const code = fs.readFileSync('modules/wallet/service.ts', 'utf8');
    
    const hasProcessTonDeposit = code.includes('processTonDeposit');
    const hasUnifiedTransaction = code.includes('UnifiedTransactionService');
    const hasCreateTransaction = code.includes('createTransaction');
    
    console.log(`üìù –§—É–Ω–∫—Ü–∏—è processTonDeposit: ${hasProcessTonDeposit ? '‚úÖ' : '‚ùå'}`);
    console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedTransactionService: ${hasUnifiedTransaction ? '‚úÖ' : '‚ùå'}`);
    console.log(`üìù –í—ã–∑—ã–≤–∞–µ—Ç createTransaction: ${hasCreateTransaction ? '‚úÖ' : '‚ùå'}`);
    
    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–∏–ø–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (code.includes("type: 'TON_DEPOSIT'")) {
      console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∏–ø TON_DEPOSIT: ‚úÖ`);
    } else if (code.includes("type: 'DEPOSIT'")) {
      console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∏–ø DEPOSIT: ‚úÖ`);  
    } else {
      console.log(`üìù –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ‚ùå`);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:', error.message);
  }

  // 6. –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
  console.log('\nüèÅ –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï');
  console.log('='.repeat(80));
  
  if (realDeposits.length === 0 && usersWithoutDeposits > 5) {
    console.log('üö® –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:');
    console.log('   ‚Ä¢ –ù–ï–¢ —Ä–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 2 –¥–Ω—è');
    console.log(`   ‚Ä¢ ${usersWithoutDeposits} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    console.log('   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ù–ï —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –ë–î');
    console.log('\nüí° –¢–†–ï–ë–£–ï–¢–°–Ø:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ processTonDeposit –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏');
    console.log('   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö');
    console.log('   3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  } else if (realDeposits.length > 0) {
    console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢:');
    console.log(`   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ ${realDeposits.length} —Ä–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö');
  }
  
  console.log('\nüìã –°–¢–ê–¢–£–° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(80));
}

simpleDiagnostic().catch(console.error);