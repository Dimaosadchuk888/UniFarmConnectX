/**
 * üßæ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û –¢–ï–•–ù–ò–ß–ï–°–ö–û–ú–£ –ó–ê–î–ê–ù–ò–Æ
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
 * 
 * –¢–ó –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏:
 * 1. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ ConnectWallet
 * 2. –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 * 3. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Boost-–ø–∞–∫–µ—Ç–æ–≤ –≤ ToneFarming
 * 4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É ToneFarmingData
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface DiagnosticResult {
  task: string;
  status: 'PASSED' | 'FAILED' | 'WARNING';
  details: string[];
  recommendations?: string[];
}

async function runComprehensiveSystemDiagnostic(): Promise<void> {
  console.log('\nüî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û –¢–ó');
  console.log('=' .repeat(80));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞)');
  console.log('=' .repeat(80));

  const results: DiagnosticResult[] = [];

  // ================================
  // –¢–ó 1: –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–û–í
  // ================================
  
  console.log('\nüìã –¢–ó –ó–ê–î–ê–ß–ê 1: –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–†–ò –ü–û–ü–û–õ–ù–ï–ù–ò–ò –ß–ï–†–ï–ó CONNECTWALLET');
  console.log('-' .repeat(80));
  
  try {
    // 1.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤ TransactionService
    console.log('\nüîç 1.1 –ê–ù–ê–õ–ò–ó –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –ö–û–î–ï:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tx_hash_unique –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data: txHashUniqueTest, error: txHashError } = await supabase
      .from('transactions')
      .select('tx_hash_unique')
      .limit(1);
      
    let hasDuplicateProtection = !txHashError;
    console.log(`   –ü–æ–ª–µ tx_hash_unique –≤ –ë–î: ${hasDuplicateProtection ? '‚úÖ –ï–°–¢–¨' : '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
    // 1.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\nüîç 1.2 –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:');
    
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const { data: recentDeposits } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['TON_DEPOSIT', 'DEPOSIT', 'FARMING_REWARD'])
      .like('description', '%TON deposit%')
      .gte('created_at', yesterday.toISOString())
      .order('created_at', { ascending: false })
      .limit(20);
      
    console.log(`   –ù–∞–π–¥–µ–Ω–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞: ${recentDeposits?.length || 0}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
    const txHashGroups: Record<string, any[]> = {};
    recentDeposits?.forEach(tx => {
      const txHash = tx.metadata?.tx_hash || tx.metadata?.ton_tx_hash || 'NO_HASH';
      if (!txHashGroups[txHash]) {
        txHashGroups[txHash] = [];
      }
      txHashGroups[txHash].push(tx);
    });
    
    const duplicateGroups = Object.entries(txHashGroups).filter(([hash, txs]) => 
      txs.length > 1 && hash !== 'NO_HASH'
    );
    
    console.log(`   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π: ${duplicateGroups.length}`);
    
    if (duplicateGroups.length > 0) {
      console.log('\n   üìä –î–ï–¢–ê–õ–ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
      duplicateGroups.forEach(([hash, txs]) => {
        console.log(`     TX Hash: ${hash.substring(0, 20)}...`);
        console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π: ${txs.length}`);
        console.log(`     User IDs: ${txs.map(tx => tx.user_id).join(', ')}`);
        console.log(`     –°—É–º–º—ã: ${txs.map(tx => `${tx.amount_ton} TON`).join(', ')}`);
      });
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¢–ó 1
    const task1Status = duplicateGroups.length === 0 ? 'PASSED' : 'FAILED';
    const task1Details = [
      `tx_hash_unique –ø–æ–ª–µ: ${hasDuplicateProtection ? '–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`,
      `–î–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞: ${recentDeposits?.length || 0}`,
      `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–µ–π: ${duplicateGroups.length}`,
    ];
    
    if (duplicateGroups.length > 0) {
      task1Details.push(`–ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã`);
    }
    
    results.push({
      task: '–¢–ó 1: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      status: task1Status,
      details: task1Details,
      recommendations: task1Status === 'FAILED' ? [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å metadata.tx_hash mapping –≤ WalletService',
        '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ TransactionService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏',
        '–î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ tx_hash_unique'
      ] : undefined
    });
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¢–ó 1: ${error}`);
    results.push({
      task: '–¢–ó 1: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      status: 'FAILED',
      details: [`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º: ${error}`]
    });
  }

  // ================================
  // –¢–ó 2: –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í –ü–û–°–õ–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
  // ================================
  
  console.log('\nüìã –¢–ó –ó–ê–î–ê–ß–ê 2: –°–ü–ò–°–ê–ù–ò–ï –°–†–ï–î–°–¢–í –ü–û–°–õ–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø');
  console.log('-' .repeat(80));
  
  try {
    // 2.1 –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    console.log('\nüîç 2.1 –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê –ü–û–°–õ–ï –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const yesterday2 = new Date();
    yesterday2.setDate(yesterday2.getDate() - 1);
    
    const { data: recentDepositUsers } = await supabase
      .from('transactions')
      .select('user_id, amount_ton, created_at')
      .in('type', ['TON_DEPOSIT', 'DEPOSIT', 'FARMING_REWARD'])
      .like('description', '%TON deposit%')
      .gte('created_at', yesterday2.toISOString())
      .order('created_at', { ascending: false })
      .limit(10);
      
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${recentDepositUsers?.length || 0}`);
    
    let suspiciousBalanceChanges = 0;
    
    if (recentDepositUsers && recentDepositUsers.length > 0) {
      for (const depositTx of recentDepositUsers.slice(0, 5)) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
        const { data: userTxAfterDeposit } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', depositTx.user_id)
          .gt('created_at', depositTx.created_at)
          .order('created_at', { ascending: true })
          .limit(5);
          
        const immediateWithdrawals = userTxAfterDeposit?.filter(tx => 
          tx.amount_ton < 0 && 
          new Date(tx.created_at).getTime() - new Date(depositTx.created_at).getTime() < 60000 // 1 –º–∏–Ω—É—Ç–∞
        );
        
        if (immediateWithdrawals && immediateWithdrawals.length > 0) {
          suspiciousBalanceChanges++;
          console.log(`     User ${depositTx.user_id}: +${depositTx.amount_ton} TON ‚Üí –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ ${immediateWithdrawals[0].amount_ton} TON`);
        }
      }
    }
    
    console.log(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π: ${suspiciousBalanceChanges}`);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¢–ó 2
    const task2Status = suspiciousBalanceChanges === 0 ? 'PASSED' : 'WARNING';
    results.push({
      task: '–¢–ó 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      status: task2Status,
      details: [
        `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${recentDepositUsers?.length || 0}`,
        `–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${suspiciousBalanceChanges}`,
        suspiciousBalanceChanges === 0 ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ' : '–í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è'
      ]
    });
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¢–ó 2: ${error}`);
    results.push({
      task: '–¢–ó 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      status: 'FAILED',
      details: [`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error}`]
    });
  }

  // ================================
  // –¢–ó 3: –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï BOOST-–ü–ê–ö–ï–¢–û–í
  // ================================
  
  console.log('\nüìã –¢–ó –ó–ê–î–ê–ß–ê 3: –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï BOOST-–ü–ê–ö–ï–¢–û–í –í TONEFARMING');
  console.log('-' .repeat(80));
  
  try {
    console.log('\nüîç 3.1 –ê–ù–ê–õ–ò–ó TON BOOST –ê–ö–¢–ò–í–ê–¶–ò–ô –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ TON Boost
    const yesterday3 = new Date();
    yesterday3.setDate(yesterday3.getDate() - 1);
    
    const { data: recentBoostPurchases } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BOOST_PURCHASE')
      .gte('created_at', yesterday3.toISOString())
      .order('created_at', { ascending: false })
      .limit(20);
      
    console.log(`   TON Boost –ø–æ–∫—É–ø–æ–∫ –∑–∞ 24 —á–∞—Å–∞: ${recentBoostPurchases?.length || 0}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
    const userBoostGroups: Record<number, any[]> = {};
    recentBoostPurchases?.forEach(tx => {
      if (!userBoostGroups[tx.user_id]) {
        userBoostGroups[tx.user_id] = [];
      }
      userBoostGroups[tx.user_id].push(tx);
    });
    
    const duplicateBoostPurchases = Object.entries(userBoostGroups).filter(([userId, purchases]) => 
      purchases.length > 1
    );
    
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏: ${duplicateBoostPurchases.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\nüîç 3.2 –ü–†–û–í–ï–†–ö–ê TON_FARMING_DATA –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï:');
    
    const { data: farmingDataDuplicates } = await supabase
      .from('ton_farming_data')
      .select('user_id, count(*)')
      .not('boost_package_id', 'is', null)
      .limit(100);
      
    // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    let farmingDataConsistency = true;
    
    if (duplicateBoostPurchases.length > 0) {
      console.log('\n   üìä –î–ï–¢–ê–õ–ò –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• BOOST –ü–û–ö–£–ü–û–ö:');
      duplicateBoostPurchases.forEach(([userId, purchases]) => {
        console.log(`     User ${userId}: ${purchases.length} –ø–æ–∫—É–ø–æ–∫`);
        purchases.forEach(p => {
          console.log(`       - ${new Date(p.created_at).toLocaleString()}: ${p.metadata?.package_name} (${p.amount} TON)`);
        });
      });
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¢–ó 3
    const task3Status = duplicateBoostPurchases.length === 0 ? 'PASSED' : 'WARNING';
    results.push({
      task: '–¢–ó 3: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Boost-–ø–∞–∫–µ—Ç–æ–≤',
      status: task3Status,
      details: [
        `Boost –ø–æ–∫—É–ø–æ–∫ –∑–∞ 24 —á–∞—Å–∞: ${recentBoostPurchases?.length || 0}`,
        `–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${duplicateBoostPurchases.length}`,
        farmingDataConsistency ? 'ton_farming_data –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞' : '–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ ton_farming_data'
      ]
    });
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¢–ó 3: ${error}`);
    results.push({
      task: '–¢–ó 3: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Boost-–ø–∞–∫–µ—Ç–æ–≤',
      status: 'FAILED',
      details: [`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error}`]
    });
  }

  // ================================
  // –¢–ó 4: –û–¢–°–£–¢–°–¢–í–ò–ï –ó–ê–ü–ò–°–ò –í TON_FARMING_DATA
  // ================================
  
  console.log('\nüìã –¢–ó –ó–ê–î–ê–ß–ê 4: –û–¢–°–£–¢–°–¢–í–ò–ï –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–£ TONEFARMINGDATA');
  console.log('-' .repeat(80));
  
  try {
    console.log('\nüîç 4.1 –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ï–ô –í TON_FARMING_DATA:');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ boost –ø–∞–∫–µ—Ç–∞–º–∏
    const { data: activeBoostUsers } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_rate')
      .not('ton_boost_package', 'is', null)
      .not('ton_boost_package', 'eq', 0)
      .limit(20);
      
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost: ${activeBoostUsers?.length || 0}`);
    
    let missingFarmingDataCount = 0;
    let totalBoostUsers = activeBoostUsers?.length || 0;
    
    if (activeBoostUsers && activeBoostUsers.length > 0) {
      for (const user of activeBoostUsers) {
        const { data: farmingData } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id.toString())
          .single();
          
        if (!farmingData) {
          missingFarmingDataCount++;
          console.log(`     User ${user.id}: TON Boost –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ù–ï–¢ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data`);
        }
      }
    }
    
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${missingFarmingDataCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    console.log('\nüîç 4.2 –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
    
    const { data: recentSchedulerTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .gt('amount_ton', 0)
      .like('description', '%TON Boost%')
      .order('created_at', { ascending: false })
      .limit(5);
      
    const lastSchedulerRun = recentSchedulerTx?.[0];
    let schedulerStatus = '–ù–ï –†–ê–ë–û–¢–ê–ï–¢';
    
    if (lastSchedulerRun) {
      const timeSinceLastRun = Date.now() - new Date(lastSchedulerRun.created_at).getTime();
      const minutesSinceLastRun = Math.floor(timeSinceLastRun / 1000 / 60);
      schedulerStatus = minutesSinceLastRun <= 10 ? '–†–ê–ë–û–¢–ê–ï–¢' : '–í–û–ó–ú–û–ñ–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù';
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${minutesSinceLastRun} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    }
    
    console.log(`   –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${schedulerStatus}`);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¢–ó 4
    const task4Status = missingFarmingDataCount === 0 && schedulerStatus === '–†–ê–ë–û–¢–ê–ï–¢' ? 'PASSED' : 'FAILED';
    results.push({
      task: '–¢–ó 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ ToneFarmingData',
      status: task4Status,
      details: [
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${totalBoostUsers}`,
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ton_farming_data: ${missingFarmingDataCount}`,
        `–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${schedulerStatus}`,
        `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${recentSchedulerTx?.length || 0}`
      ],
      recommendations: task4Status === 'FAILED' ? [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É activateBoost() –≤ BoostService',
        '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ TonFarmingRepository.activateBoost() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ tonBoostIncomeScheduler'
      ] : undefined
    });
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¢–ó 4: ${error}`);
    results.push({
      task: '–¢–ó 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ ToneFarmingData',
      status: 'FAILED',
      details: [`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error}`]
    });
  }

  // ================================
  // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
  // ================================
  
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–•–ù–ò–ß–ï–°–ö–û–ú–£ –ó–ê–î–ê–ù–ò–Æ');
  console.log('=' .repeat(80));
  
  let passedCount = 0;
  let failedCount = 0;
  let warningCount = 0;
  
  results.forEach(result => {
    const statusIcon = result.status === 'PASSED' ? '‚úÖ' : result.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`\n${statusIcon} ${result.task}: ${result.status}`);
    
    result.details.forEach(detail => {
      console.log(`   ‚Ä¢ ${detail}`);
    });
    
    if (result.recommendations) {
      console.log('   üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      result.recommendations.forEach(rec => {
        console.log(`     - ${rec}`);
      });
    }
    
    if (result.status === 'PASSED') passedCount++;
    else if (result.status === 'WARNING') warningCount++;
    else failedCount++;
  });
  
  console.log('\n' + '=' .repeat(80));
  console.log(`üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedCount}`);
  console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningCount}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedCount}`);
  console.log(`   üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${failedCount === 0 ? (warningCount === 0 ? '–û–¢–õ–ò–ß–ù–û' : '–•–û–†–û–®–û') : '–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}`);
  
  console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  if (failedCount === 0 && warningCount === 0) {
    console.log('   –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é.');
    console.log('   –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else if (failedCount === 0) {
    console.log('   –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–ó, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.');
  } else {
    console.log('   –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!');
    console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫.');
  }
  
  console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.');
  console.log('=' .repeat(80));
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
runComprehensiveSystemDiagnostic()
  .then(() => {
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
  });

export { runComprehensiveSystemDiagnostic };