/**
 * –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BalanceManager - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –±–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TON –±–∞–ª–∞–Ω—Å–∞
 */

import { supabase } from './core/supabaseClient';

async function testBalanceManagerDirectly() {
  console.log('üî¨ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BalanceManager');
  console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TON –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è User ID 25');
  console.log('='.repeat(80));

  try {
    // 1. –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°
    console.log('\n1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° User ID 25:');
    
    const { data: currentUser, error: currentError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni')
      .eq('id', 25)
      .single();

    if (currentError || !currentUser) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentError);
      return;
    }

    console.log(`   Balance TON: ${currentUser.balance_ton}`);
    console.log(`   Balance UNI: ${currentUser.balance_uni}`);

    // 2. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú BalanceManager
    console.log('\n2Ô∏è‚É£ –ò–ú–ü–û–†–¢ BalanceManager:');
    
    let BalanceManager;
    try {
      const balanceModule = await import('./core/BalanceManager');
      BalanceManager = balanceModule.BalanceManager;
      console.log('‚úÖ BalanceManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (importError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BalanceManager:', importError);
      return;
    }

    // 3. –°–û–ó–î–ê–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–†
    console.log('\n3Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê BalanceManager:');
    
    let balanceManager;
    try {
      balanceManager = BalanceManager.getInstance();
      console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä BalanceManager —Å–æ–∑–¥–∞–Ω');
    } catch (instanceError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', instanceError);
      return;
    }

    // 4. –¢–ï–°–¢–ò–†–£–ï–ú getUserBalance
    console.log('\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï getUserBalance():');
    
    try {
      const getUserBalanceResult = await balanceManager.getUserBalance(25);
      
      if (getUserBalanceResult.success) {
        console.log('‚úÖ getUserBalance() —Ä–∞–±–æ—Ç–∞–µ—Ç:');
        console.log(`   Balance TON: ${getUserBalanceResult.balance.balance_ton}`);
        console.log(`   Balance UNI: ${getUserBalanceResult.balance.balance_uni}`);
      } else {
        console.error('‚ùå getUserBalance() –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', getUserBalanceResult.error);
        return;
      }
    } catch (getUserError) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ getUserBalance():', getUserError);
      return;
    }

    // 5. –¢–ï–°–¢–ò–†–£–ï–ú updateUserBalance —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    console.log('\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï updateUserBalance() —Å 0.000001 TON:');
    
    const oldBalance = currentUser.balance_ton;
    const testAmount = 0.000001;
    
    try {
      const updateResult = await balanceManager.updateUserBalance({
        user_id: 25,
        amount_uni: 0,
        amount_ton: testAmount,
        operation: 'add',
        source: 'TEST_ADD_TON'
      });
      
      if (updateResult.success) {
        console.log('‚úÖ updateUserBalance() –£–°–ü–ï–®–ù–û:');
        console.log(`   –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${oldBalance}`);
        console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${testAmount}`);
        console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${updateResult.newBalance?.balance_ton}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å
        const { data: verifyUser, error: verifyError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', 25)
          .single();

        if (verifyError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', verifyError);
        } else {
          console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ë–î: ${verifyUser.balance_ton}`);
          
          if (Math.abs(verifyUser.balance_ton - (oldBalance + testAmount)) < 0.0000001) {
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤ –ë–î!');
          } else {
            console.log('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î!');
          }
        }
        
      } else {
        console.error('‚ùå updateUserBalance() –ü–†–û–í–ê–õ–ò–õ–°–Ø:', updateResult.error);
      }
    } catch (updateError) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ updateUserBalance():', updateError);
    }

    // 6. –¢–ï–°–¢–ò–†–£–ï–ú addBalance —Å 1 TON (–∫–∞–∫ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 1910979)
    console.log('\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï addBalance() —Å 1 TON:');
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const { data: freshUser, error: freshError } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', 25)
      .single();

    if (freshError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', freshError);
      return;
    }

    const currentBalance = freshUser.balance_ton;
    
    try {
      console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance}`);
      console.log(`   –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å: 1 TON`);
      console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${currentBalance + 1}`);
      
      const addResult = await balanceManager.addBalance(25, 0, 1, 'TEST_TON_DEPOSIT');
      
      if (addResult.success) {
        console.log('‚úÖ addBalance() –£–°–ü–ï–®–ù–û:');
        console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${addResult.newBalance?.balance_ton}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        const { data: finalUser, error: finalError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', 25)
          .single();

        if (finalError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError);
        } else {
          console.log(`   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${finalUser.balance_ton}`);
          
          if (Math.abs(finalUser.balance_ton - (currentBalance + 1)) < 0.000001) {
            console.log('‚úÖ 1 TON —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
          } else {
            console.log('‚ùå 1 TON –ù–ï –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –ë–î!');
            console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${currentBalance + 1}`);
            console.log(`   –ü–æ–ª—É—á–∏–ª–∏: ${finalUser.balance_ton}`);
            console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${finalUser.balance_ton - currentBalance}`);
          }
        }
        
      } else {
        console.error('‚ùå addBalance() –ü–†–û–í–ê–õ–ò–õ–°–Ø:', addResult.error);
      }
    } catch (addError) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ addBalance():', addError);
    }

    // 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\n' + '='.repeat(80));
    console.log('7Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    
    console.log('\n‚úÖ –ß–¢–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û:');
    console.log('   - –ò–º–ø–æ—Ä—Ç BalanceManager');
    console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞');
    console.log('   - getUserBalance()');
    console.log('   - updateUserBalance()');
    console.log('   - addBalance()');
    console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î');
    
    console.log('\nüí° –í–´–í–û–î–´:');
    console.log('   –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –≤—ã–∑–æ–≤–µ BalanceManager –∏–∑ UnifiedTransactionService');
    console.log('   –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∞–º–æ–º BalanceManager');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBalanceManagerDirectly().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});