#!/usr/bin/env node
/**
 * –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function verifyTonDepositSupport() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò TON_DEPOSIT');
  
  try {
    // –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('id')
      .limit(1)
      .single();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ TON_DEPOSIT
    const testTx = {
      user_id: user.id,
      type: 'TON_DEPOSIT',
      amount: '0.001',
      currency: 'TON',
      status: 'completed',
      description: 'RESTART_VERIFICATION: TON_DEPOSIT test'
    };

    const { data: result, error } = await supabase
      .from('transactions')
      .insert([testTx])
      .select();

    if (error) {
      console.error('‚ùå TON_DEPOSIT –ù–ï –†–ê–ë–û–¢–ê–ï–¢:', error.message);
      return false;
    }

    console.log('‚úÖ TON_DEPOSIT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await supabase.from('transactions').delete().eq('id', result[0].id);
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON_DEPOSIT:', error);
    return false;
  }
}

async function verifyReferralColors() {
  console.log('\nüé® –ü–†–û–í–ï–†–ö–ê –†–ê–ó–õ–ò–ß–ï–ù–ò–Ø –¶–í–ï–¢–û–í –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ì–†–ê–î');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: uniReferrals } = await supabase
      .from('transactions')
      .select('id, type, currency, amount, description')
      .eq('type', 'REFERRAL_REWARD')
      .eq('currency', 'UNI')
      .limit(3);

    const { data: tonReferrals } = await supabase
      .from('transactions')
      .select('id, type, currency, amount, description')
      .eq('type', 'REFERRAL_REWARD')
      .eq('currency', 'TON')
      .limit(3);

    console.log(`‚úÖ UNI —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${uniReferrals?.length || 0} (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –§–ò–û–õ–ï–¢–û–í–´–ï)`);
    console.log(`‚úÖ TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${tonReferrals?.length || 0} (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –°–ò–ù–ò–ï)`);

    if (uniReferrals?.length > 0) {
      console.log('   –ü—Ä–∏–º–µ—Ä—ã UNI —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö:');
      uniReferrals.slice(0, 2).forEach(tx => {
        console.log(`   - ID ${tx.id}: ${tx.amount} UNI`);
      });
    }

    if (tonReferrals?.length > 0) {
      console.log('   –ü—Ä–∏–º–µ—Ä—ã TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö:');
      tonReferrals.slice(0, 2).forEach(tx => {
        console.log(`   - ID ${tx.id}: ${tx.amount} TON`);
      });
    }

    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    return false;
  }
}

async function checkServerHealth() {
  console.log('\nüîß –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    const response = await fetch('http://localhost:5000/api/health').catch(() => null);
    
    if (response && response.ok) {
      console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } else {
      console.log('‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ Replit)');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Supabase
      const { data, error } = await supabase.from('users').select('count').limit(1);
      if (!error) {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
        return true;
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return false;
  }

  return false;
}

async function runFullVerification() {
  console.log('üöÄ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê');
  console.log('='.repeat(50));
  
  const results = {
    tonDeposit: await verifyTonDepositSupport(),
    referralColors: await verifyReferralColors(),
    serverHealth: await checkServerHealth()
  };

  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`   TON_DEPOSIT –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${results.tonDeposit ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –†–∞–∑–ª–∏—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤: ${results.referralColors ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞: ${results.serverHealth ? '‚úÖ' : '‚ùå'}`);

  const allGood = Object.values(results).every(r => r);
  
  console.log('\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°:');
  if (allGood) {
    console.log('‚úÖ –í–°–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨ –£–°–ü–ï–®–ù–û');
    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏');
  } else {
    console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–ë–õ–ï–ú–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø');
  }

  return allGood;
}

runFullVerification();