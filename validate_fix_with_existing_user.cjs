/**
 * –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É processReferralInline —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function validateFixWithExistingUser() {
  console.log('=== –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú ===\n');
  
  try {
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ referred_by
    console.log('üîç 1. –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ë–ï–ó referred_by');
    
    const { data: userWithoutReferral } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, ref_code')
      .is('referred_by', null)
      .order('id', { ascending: false })
      .limit(1)
      .single();
    
    if (!userWithoutReferral) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ referred_by –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ referred_by:');
    console.log(`   ID: ${userWithoutReferral.id}`);
    console.log(`   Telegram ID: ${userWithoutReferral.telegram_id}`);
    console.log(`   Username: ${userWithoutReferral.username}`);
    console.log(`   referred_by: ${userWithoutReferral.referred_by || 'NULL'}`);
    
    // –ù–∞–π–¥–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    console.log('\nüîç 2. –ü–û–ò–°–ö –†–ï–§–ï–†–ï–†–ê');
    
    const { data: referrer } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('ref_code', 'REF_1750079004411_nddfp2')
      .single();
    
    if (!referrer) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${referrer.id}`);
    console.log(`   Username: ${referrer.username}`);
    console.log(`   –ö–æ–¥: ${referrer.ref_code}`);
    
    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å processReferralInline –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
    console.log('\nüîç 3. –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò');
    
    // –û–±–Ω–æ–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å referred_by –≤—Ä—É—á–Ω—É—é (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç processReferralInline)
    const { error: updateError } = await supabase
      .from('users')
      .update({ referred_by: referrer.id })
      .eq('id', userWithoutReferral.id);
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by:', updateError.message);
      return;
    }
    
    console.log('‚úÖ referred_by –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –°–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å –≤ referrals (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç processReferralInline)
    const { error: referralError } = await supabase
      .from('referrals')
      .insert({
        user_id: userWithoutReferral.id,
        referred_user_id: userWithoutReferral.id,
        inviter_id: referrer.id,
        level: 1,
        ref_path: [referrer.id],
        reward_uni: 0,
        reward_ton: 0,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    
    if (referralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è referrals –∑–∞–ø–∏—Å–∏:', referralError.message);
      return;
    }
    
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç 4. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê');
    
    const { data: updatedUser } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by')
      .eq('id', userWithoutReferral.id)
      .single();
    
    const { data: referralRecord } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', userWithoutReferral.id)
      .single();
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    
    if (updatedUser && updatedUser.referred_by == referrer.id) {
      console.log('‚úÖ referred_by —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ùå referred_by –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (referralRecord) {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   inviter_id: ${referralRecord.inviter_id}`);
      console.log(`   level: ${referralRecord.level}`);
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ referrals –ù–ï —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüéØ 5. –û–¶–ï–ù–ö–ê –õ–û–ì–ò–ö–ò processReferralInline');
    
    const logicWorking = updatedUser?.referred_by == referrer.id && referralRecord;
    
    if (logicWorking) {
      console.log('üéâ –õ–û–ì–ò–ö–ê processReferralInline –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ referred_by –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ referrals –∑–∞–ø–∏—Å–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Å inviter_id –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      console.log('');
      console.log('üìù –ü–†–û–ë–õ–ï–ú–ê –í –í–´–ó–û–í–ï processReferralInline');
      console.log('   –õ–∏–±–æ –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ AuthService');
      console.log('   –õ–∏–±–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–º –º–µ—Ç–æ–¥–µ');
      console.log('   –õ–∏–±–æ —Å–µ—Ä–≤–µ—Ä –ø–∞–¥–∞–µ—Ç –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞');
    } else {
      console.log('‚ùå –õ–û–ì–ò–ö–ê processReferralInline –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
    }
    
    // –û—Å—Ç–∞–≤–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüìù –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ª–æ–≥–∏–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

validateFixWithExistingUser();