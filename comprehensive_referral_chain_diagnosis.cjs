// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function diagnoseReferralChain() {
  console.log('=== –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –¶–ï–ü–û–ß–ö–ò ===');
  
  // 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã referrals
  console.log('\n1. –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ REFERRALS');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ referrals
    const { data: referrals, error: referralsError } = await supabase
      .from('referrals')
      .select('*')
      .order('created_at', { ascending: false });
      
    if (referralsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö referrals:', referralsError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referrals.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals`);
    
    if (referrals.length > 0) {
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:');
      console.log(JSON.stringify(referrals[0], null, 2));
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
      const firstRecord = referrals[0];
      const fields = Object.keys(firstRecord);
      console.log('\nüìã –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ referrals:', fields.join(', '));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:');
      let validRecords = 0;
      let invalidRecords = 0;
      
      for (const record of referrals) {
        const hasUserId = record.user_id !== null;
        const hasReferrerId = record.referrer_id !== null;
        const hasReferralCode = record.referral_code !== null;
        
        if (hasUserId && hasReferrerId && hasReferralCode) {
          validRecords++;
        } else {
          invalidRecords++;
          console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∑–∞–ø–∏—Å—å ID ${record.id}: user_id=${record.user_id}, referrer_id=${record.referrer_id}, referral_code=${record.referral_code}`);
        }
      }
      
      console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${validRecords}`);
      console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ${invalidRecords}`);
      
    } else {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ referrals –ø—É—Å—Ç–∞');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã referrals:', error.message);
  }
  
  // 2. –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É users –∏ referrals
  console.log('\n2. –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ USERS –ò REFERRALS');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by
    const { data: usersWithReferrals, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, ref_code, created_at')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false });
      
    if (usersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:', usersError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithReferrals.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by`);
    
    if (usersWithReferrals.length > 0) {
      console.log('\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:');
      usersWithReferrals.slice(0, 5).forEach(user => {
        console.log(`  ID ${user.id}: telegram_id=${user.telegram_id}, referred_by=${user.referred_by}, created_at=${user.created_at}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ referrals
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å–µ–π –≤ referrals:');
      
      let matchedRecords = 0;
      let missingRecords = 0;
      
      for (const user of usersWithReferrals) {
        const { data: referralRecord } = await supabase
          .from('referrals')
          .select('*')
          .eq('user_id', user.id)
          .single();
          
        if (referralRecord) {
          matchedRecords++;
        } else {
          missingRecords++;
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${user.id} –∏–º–µ–µ—Ç referred_by=${user.referred_by}, –Ω–æ –ù–ï–¢ –∑–∞–ø–∏—Å–∏ –≤ referrals`);
        }
      }
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –≤ referrals: ${matchedRecords}`);
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ë–ï–ó –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${missingRecords}`);
      
    } else {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π:', error.message);
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ referrals
  console.log('\n3. –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ï–ô –í REFERRALS');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ ReferralService.processReferral
    console.log('üìã –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∞ processReferral:');
    
    const fs = require('fs');
    const referralServiceContent = fs.readFileSync('modules/referral/service.ts', 'utf8');
    
    // –ò—â–µ–º –º–µ—Ç–æ–¥ processReferral
    const processReferralMatch = referralServiceContent.match(/async processReferral\([\s\S]*?\n  \}/);
    
    if (processReferralMatch) {
      console.log('‚úÖ –ú–µ—Ç–æ–¥ processReferral –Ω–∞–π–¥–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ referrals
      const hasReferralInsert = processReferralMatch[0].includes('from(REFERRAL_TABLES.REFERRALS)') && 
                               processReferralMatch[0].includes('.insert(');
      
      if (hasReferralInsert) {
        console.log('‚úÖ –ö–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ referrals –Ω–∞–π–¥–µ–Ω');
        
        // –ò—â–µ–º –ø–æ–ª—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        const insertMatch = processReferralMatch[0].match(/\.insert\(\s*\{[\s\S]*?\}\s*\)/);
        if (insertMatch) {
          console.log('üìã –ü–æ–ª—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ referrals:');
          console.log(insertMatch[0]);
        }
        
      } else {
        console.log('‚ùå –ö–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ referrals –ù–ï –Ω–∞–π–¥–µ–Ω');
      }
      
    } else {
      console.log('‚ùå –ú–µ—Ç–æ–¥ processReferral –ù–ï –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:', error.message);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by
  console.log('\n4. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø REFERRED_BY');
  
  try {
    const fs = require('fs');
    const referralServiceContent = fs.readFileSync('modules/referral/service.ts', 'utf8');
    
    // –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ referred_by
    const hasUserUpdate = referralServiceContent.includes('referred_by') && 
                         referralServiceContent.includes('.update(');
    
    if (hasUserUpdate) {
      console.log('‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by –Ω–∞–π–¥–µ–Ω');
      
      // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateMatches = referralServiceContent.match(/\.update\(\s*\{[\s\S]*?referred_by[\s\S]*?\}\s*\)/g);
      
      if (updateMatches) {
        console.log('üìã –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by:');
        updateMatches.forEach((match, index) => {
          console.log(`  ${index + 1}. ${match}`);
        });
      }
      
    } else {
      console.log('‚ùå –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by –ù–ï –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
  console.log('\n5. –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–û–°–¢–ò –û–ü–ï–†–ê–¶–ò–ô');
  
  try {
    const fs = require('fs');
    const referralServiceContent = fs.readFileSync('modules/referral/service.ts', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const hasTransaction = referralServiceContent.includes('transaction') || 
                          referralServiceContent.includes('rpc(') ||
                          referralServiceContent.includes('begin()');
    
    if (hasTransaction) {
      console.log('‚úÖ –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } else {
      console.log('‚ö†Ô∏è  –ö–æ–¥ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    const errorHandlingCount = (referralServiceContent.match(/try\s*\{/g) || []).length;
    const catchCount = (referralServiceContent.match(/catch\s*\(/g) || []).length;
    
    console.log(`üìã –ë–ª–æ–∫–æ–≤ try-catch: ${Math.min(errorHandlingCount, catchCount)}`);
    
    if (errorHandlingCount === catchCount && errorHandlingCount > 0) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏:', error.message);
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ –ø–æ—Ä—è–¥–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
  console.log('\n6. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö –ò –ü–û–†–Ø–î–ö–ê –û–ü–ï–†–ê–¶–ò–ô');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ referrals
    const { data: recentUsers } = await supabase
      .from('users')
      .select('id, telegram_id, created_at, referred_by')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false })
      .limit(5);
      
    const { data: recentReferrals } = await supabase
      .from('referrals')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (recentUsers && recentUsers.length > 0) {
      console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:');
      recentUsers.forEach(user => {
        console.log(`  ID ${user.id}: created_at=${user.created_at}, referred_by=${user.referred_by}`);
      });
    }
    
    if (recentReferrals && recentReferrals.length > 0) {
      console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ referrals:');
      recentReferrals.forEach(ref => {
        console.log(`  ID ${ref.id}: user_id=${ref.user_id}, created_at=${ref.created_at}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (recentUsers && recentReferrals && recentUsers.length > 0 && recentReferrals.length > 0) {
      const userTime = new Date(recentUsers[0].created_at);
      const referralTime = new Date(recentReferrals[0].created_at);
      const timeDiff = Math.abs(userTime - referralTime);
      
      console.log(`üìä –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: ${timeDiff}ms`);
      
      if (timeDiff < 10000) { // –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥
        console.log('‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è  –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫:', error.message);
  }
  
  console.log('\n=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã referrals');
  console.log('2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å–≤—è–∑–∏ –º–µ–∂–¥—É users –∏ referrals');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–µ–Ω –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ referrals');
  console.log('4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è referred_by');
  console.log('5. –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π');
  console.log('6. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏');
  console.log('\n–≠—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ç–µ—Ä–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
}

diagnoseReferralChain().catch(console.error);