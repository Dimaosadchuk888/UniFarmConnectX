import { supabase } from './core/supabase';

interface SyncReport {
  module: string;
  status: 'SYNCED' | 'ISSUE' | 'WARNING';
  details: string[];
  data?: any;
}

const reports: SyncReport[] = [];

async function checkFullDatabaseSync() {
  console.log('=== –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• UNIFARM ===\n');
  console.log('–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toISOString());
  console.log('=========================================================\n');

  // 1. –ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´
  await checkReferralSync();
  
  // 2. –ü–†–û–í–ï–†–ö–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
  await checkWithdrawalSync();
  
  // 3. –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í
  await checkDepositsSync();
  
  // 4. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
  await checkBalanceTransactionSync();
  
  // 5. –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
  generateFinalReport();
}

// 1. –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê
async function checkReferralSync() {
  console.log('\nüìä 1. –ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´\n');
  const report: SyncReport = {
    module: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
    status: 'SYNCED',
    details: []
  };

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, ref_code, referred_by, username')
      .not('referred_by', 'is', null);

    if (usersError) throw usersError;

    report.details.push(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${users?.length || 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ REFERRAL_REWARD
    const { data: refTransactions, count: refCount } = await supabase
      .from('transactions')
      .select('*', { count: 'exact' })
      .eq('type', 'REFERRAL_REWARD');

    report.details.push(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π REFERRAL_REWARD: ${refCount || 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
    const { data: refSums } = await supabase
      .from('transactions')
      .select('amount_uni, amount_ton, currency')
      .eq('type', 'REFERRAL_REWARD');

    let totalUni = 0, totalTon = 0;
    refSums?.forEach(tx => {
      if (tx.currency === 'UNI') totalUni += parseFloat(tx.amount_uni || 0);
      if (tx.currency === 'TON') totalTon += parseFloat(tx.amount_ton || 0);
    });

    report.details.push(`‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: ${totalUni.toFixed(6)} UNI, ${totalTon.toFixed(6)} TON`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫
    const referrerIds = new Set(users?.map(u => u.referred_by).filter(id => id !== null));
    const { data: existingUsers } = await supabase
      .from('users')
      .select('id')
      .in('id', Array.from(referrerIds));

    const existingIds = new Set(existingUsers?.map(u => u.id));
    const missingReferrers = Array.from(referrerIds).filter(id => !existingIds.has(id));

    if (missingReferrers.length > 0) {
      report.status = 'ISSUE';
      report.details.push(`‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—ã: ${missingReferrers.join(', ')}`);
    } else {
      report.details.push('‚úÖ –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —Ü–µ–ª–æ—Å—Ç–Ω—ã');
    }

  } catch (error) {
    report.status = 'ISSUE';
    report.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
  }

  reports.push(report);
  report.details.forEach(d => console.log(d));
}

// 2. –í–´–í–û–î –°–†–ï–î–°–¢–í
async function checkWithdrawalSync() {
  console.log('\nüí∏ 2. –ü–†–û–í–ï–†–ö–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í\n');
  const report: SyncReport = {
    module: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
    status: 'SYNCED',
    details: []
  };

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É withdraw_requests
    const { data: withdrawals, count: withdrawCount } = await supabase
      .from('withdraw_requests')
      .select('*', { count: 'exact' });

    report.details.push(`‚úÖ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: ${withdrawCount || 0}`);

    if (withdrawals && withdrawals.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusCounts = withdrawals.reduce((acc: any, w) => {
        acc[w.status] = (acc[w.status] || 0) + 1;
        return acc;
      }, {});

      Object.entries(statusCounts).forEach(([status, count]) => {
        report.details.push(`  - ${status}: ${count} –∑–∞—è–≤–æ–∫`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã –≤—ã–≤–æ–¥–æ–≤
      let totalTonWithdraw = 0;
      withdrawals.forEach(w => {
        if (w.amount_ton) totalTonWithdraw += parseFloat(w.amount_ton);
      });

      report.details.push(`‚úÖ –°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ TON: ${totalTonWithdraw.toFixed(6)}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
      const { data: withdrawTx } = await supabase
        .from('transactions')
        .select('*')
        .eq('type', 'WITHDRAW');

      report.details.push(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π WITHDRAW: ${withdrawTx?.length || 0}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ pending –≤—ã–≤–æ–¥–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤
      const pendingWithdrawals = withdrawals.filter(w => w.status === 'pending');
      if (pendingWithdrawals.length > 0) {
        report.details.push(`‚ö†Ô∏è –ï—Å—Ç—å ${pendingWithdrawals.length} –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ pending`);
        
        for (const pw of pendingWithdrawals) {
          const { data: user } = await supabase
            .from('users')
            .select('ton_balance')
            .eq('id', pw.user_id)
            .single();

          if (user && parseFloat(user.ton_balance) < parseFloat(pw.amount_ton)) {
            report.status = 'WARNING';
            report.details.push(`‚ö†Ô∏è User ${pw.user_id}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –≤—ã–≤–æ–¥–∞ (–±–∞–ª–∞–Ω—Å: ${user.ton_balance}, –∑–∞—è–≤–∫–∞: ${pw.amount_ton})`);
          }
        }
      }
    }

  } catch (error) {
    report.status = 'ISSUE';
    report.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
  }

  reports.push(report);
  report.details.forEach(d => console.log(d));
}

// 3. –î–ï–ü–û–ó–ò–¢–´
async function checkDepositsSync() {
  console.log('\nüí∞ 3. –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í\n');
  const report: SyncReport = {
    module: '–î–µ–ø–æ–∑–∏—Ç—ã',
    status: 'SYNCED',
    details: []
  };

  try {
    // UNI –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('UNI –î–µ–ø–æ–∑–∏—Ç—ã:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º uni_farming_data
    const { data: uniFarmingData, count: uniCount } = await supabase
      .from('uni_farming_data')
      .select('*', { count: 'exact' });

    report.details.push(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ uni_farming_data: ${uniCount || 0}`);

    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤ UNI
    let totalUniDeposits = 0;
    uniFarmingData?.forEach(data => {
      totalUniDeposits += parseFloat(data.uni_deposit_amount || 0);
    });

    report.details.push(`‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ UNI –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalUniDeposits.toFixed(2)}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_DEPOSIT
    const { data: farmingDepositTx, count: farmingDepositCount } = await supabase
      .from('transactions')
      .select('*', { count: 'exact' })
      .eq('type', 'FARMING_DEPOSIT');

    report.details.push(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_DEPOSIT: ${farmingDepositCount || 0}`);

    // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    let totalTxDeposits = 0;
    farmingDepositTx?.forEach(tx => {
      totalTxDeposits += Math.abs(parseFloat(tx.amount_uni || 0));
    });

    report.details.push(`‚úÖ –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalTxDeposits.toFixed(2)}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
    const depositDiff = Math.abs(totalUniDeposits - totalTxDeposits);
    if (depositDiff > 1) {
      report.status = 'WARNING';
      report.details.push(`‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${depositDiff.toFixed(2)} UNI`);
      report.details.push(`  –í–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª–∏ –ø—Ä—è–º—ã–µ SQL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö`);
    }

    // TON –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\nTON –î–µ–ø–æ–∑–∏—Ç—ã:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    const { data: tonFarmingData, count: tonCount } = await supabase
      .from('ton_farming_data')
      .select('*', { count: 'exact' });

    report.details.push(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${tonCount || 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º boost –ø–æ–∫—É–ø–∫–∏
    const { data: boostPurchases, count: boostCount } = await supabase
      .from('boost_purchases')
      .select('*', { count: 'exact' });

    report.details.push(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ boost_purchases: ${boostCount || 0}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ BOOST_PURCHASE
    const { data: boostTx, count: boostTxCount } = await supabase
      .from('transactions')
      .select('*', { count: 'exact' })
      .eq('type', 'BOOST_PURCHASE');

    report.details.push(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE: ${boostTxCount || 0}`);

  } catch (error) {
    report.status = 'ISSUE';
    report.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
  }

  reports.push(report);
  report.details.forEach(d => console.log(d));
}

// 4. –ë–ê–õ–ê–ù–°–´ –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
async function checkBalanceTransactionSync() {
  console.log('\nüí≥ 4. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô\n');
  const report: SyncReport = {
    module: '–ë–∞–ª–∞–Ω—Å—ã –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    status: 'SYNCED',
    details: []
  };

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å–∞–º
    const { data: topUsers } = await supabase
      .from('users')
      .select('id, username, uni_balance, ton_balance')
      .order('uni_balance', { ascending: false })
      .limit(10);

    console.log('–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É UNI:');
    topUsers?.forEach((user, idx) => {
      console.log(`${idx + 1}. User ${user.id}: ${parseFloat(user.uni_balance).toFixed(2)} UNI, ${parseFloat(user.ton_balance).toFixed(2)} TON`);
    });

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const user of topUsers || []) {
      const { data: userTx } = await supabase
        .from('transactions')
        .select('type, amount_uni, amount_ton, currency')
        .eq('user_id', user.id);

      // –°—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
      let calculatedUni = 0, calculatedTon = 0;
      
      userTx?.forEach(tx => {
        if (tx.currency === 'UNI') {
          calculatedUni += parseFloat(tx.amount_uni || 0);
        } else if (tx.currency === 'TON') {
          calculatedTon += parseFloat(tx.amount_ton || 0);
        }
      });

      const uniDiff = Math.abs(parseFloat(user.uni_balance) - calculatedUni);
      const tonDiff = Math.abs(parseFloat(user.ton_balance) - calculatedTon);

      if (uniDiff > 0.1 || tonDiff > 0.1) {
        report.status = 'WARNING';
        report.details.push(`‚ö†Ô∏è User ${user.id}: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤`);
        report.details.push(`  UNI: –ë–î=${user.uni_balance}, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏=${calculatedUni.toFixed(6)}, –†–∞–∑–Ω–∏—Ü–∞=${uniDiff.toFixed(6)}`);
        report.details.push(`  TON: –ë–î=${user.ton_balance}, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏=${calculatedTon.toFixed(6)}, –†–∞–∑–Ω–∏—Ü–∞=${tonDiff.toFixed(6)}`);
      }
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: txTypes } = await supabase
      .from('transactions')
      .select('type');

    const typeCounts: Record<string, number> = {};
    txTypes?.forEach(tx => {
      typeCounts[tx.type] = (typeCounts[tx.type] || 0) + 1;
    });

    console.log('\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º:');
    Object.entries(typeCounts)
      .sort(([,a], [,b]) => b - a)
      .forEach(([type, count]) => {
        report.details.push(`‚úÖ ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: recentTx } = await supabase
      .from('transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    recentTx?.forEach(tx => {
      console.log(`- ${tx.created_at}: User ${tx.user_id}, ${tx.type}, ${tx.amount_uni || tx.amount_ton} ${tx.currency}`);
    });

  } catch (error) {
    report.status = 'ISSUE';
    report.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
  }

  reports.push(report);
  report.details.forEach(d => console.log(d));
}

// –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
function generateFinalReport() {
  console.log('\n\n=== –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===\n');
  
  const syncedCount = reports.filter(r => r.status === 'SYNCED').length;
  const warningCount = reports.filter(r => r.status === 'WARNING').length;
  const issueCount = reports.filter(r => r.status === 'ISSUE').length;
  
  console.log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–¥—É–ª–µ–π: ${reports.length}`);
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningCount}`);
  console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º—ã: ${issueCount}`);
  
  console.log('\n–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ –º–æ–¥—É–ª—è–º:');
  reports.forEach(report => {
    const icon = report.status === 'SYNCED' ? '‚úÖ' : report.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${icon} ${report.module}: ${report.status}`);
  });
  
  // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  const issues = reports.filter(r => r.status !== 'SYNCED');
  if (issues.length > 0) {
    console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    issues.forEach(issue => {
      console.log(`\n${issue.module}:`);
      issue.details
        .filter(d => d.includes('‚ö†Ô∏è') || d.includes('‚ùå'))
        .forEach(d => console.log(`  ${d}`));
    });
  } else {
    console.log('\n‚úÖ –í–°–ï –ú–û–î–£–õ–ò –ü–û–õ–ù–û–°–¢–¨–Æ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!');
  }
  
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkFullDatabaseSync().catch(console.error);