/**
 * –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ú–ê–ü–ü–ò–ù–ì–ê ID
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É internal ID –∏ telegram_id
 */

import { supabase } from './core/supabase.js';

async function analyzeIdMappingSystem() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ú–ê–ü–ü–ò–ù–ì–ê ID');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–ê–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
    const { data: workingUsers } = await supabase
      .from('users')
      .select('id, telegram_id, balance_uni, balance_ton, updated_at')
      .or('balance_uni.gt.0,balance_ton.gt.0')
      .not('updated_at', 'is', null)
      .limit(5);
    
    if (workingUsers && workingUsers.length > 0) {
      console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –†–ê–ë–û–¢–ê–Æ–©–ò–ú–ò –ë–ê–õ–ê–ù–°–ê–ú–ò:');
      
      for (const user of workingUsers) {
        console.log(`\n--- User ${user.telegram_id} ---`);
        console.log(`Internal ID: ${user.id}`);
        console.log(`Telegram ID: ${user.telegram_id}`);
        console.log(`UNI: ${user.balance_uni}, TON: ${user.balance_ton}`);
        console.log(`Last updated: ${user.updated_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        const { data: txByInternal } = await supabase
          .from('transactions')
          .select('count')
          .eq('user_id', user.id)
          .single();
          
        const { data: txByTelegram } = await supabase
          .from('transactions')
          .select('count')
          .eq('user_id', user.telegram_id)
          .single();
        
        console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ internal ID (${user.id}): ${txByInternal?.count || 0}`);
        console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ telegram ID (${user.telegram_id}): ${txByTelegram?.count || 0}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π ID —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ((txByInternal?.count || 0) > 0 && (txByTelegram?.count || 0) === 0) {
          console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ò–°–ü–û–õ–¨–ó–£–ï–¢: Internal ID');
        } else if ((txByTelegram?.count || 0) > 0 && (txByInternal?.count || 0) === 0) {
          console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ò–°–ü–û–õ–¨–ó–£–ï–¢: Telegram ID');
        } else if ((txByInternal?.count || 0) > 0 && (txByTelegram?.count || 0) > 0) {
          console.log('‚ö†Ô∏è –°–ú–ï–®–ê–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï: –û–±–∞ ID –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è');
        } else {
          console.log('‚ùå –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: –ù–∏ –æ–¥–Ω–æ–≥–æ ID –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
        }
      }
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π ID –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ID –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•:');
    
    // –ù–∞–π–¥–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ user_id –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    const { data: topUserIds } = await supabase
      .from('transactions')
      .select('user_id, count')
      .gte('created_at', '2025-08-01T00:00:00.000Z')
      .order('count', { ascending: false })
      .limit(10);
    
    if (topUserIds) {
      console.log('TOP 10 user_id –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:');
      
      for (const item of topUserIds) {
        const userId = item.user_id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º internal ID
        const { data: userByInternal } = await supabase
          .from('users')
          .select('telegram_id')
          .eq('id', userId)
          .single();
          
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
        const { data: userByTelegram } = await supabase
          .from('users')
          .select('id')
          .eq('telegram_id', userId)
          .single();
        
        let idType = '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
        if (userByInternal && !userByTelegram) {
          idType = 'Internal ID';
        } else if (!userByInternal && userByTelegram) {
          idType = 'Telegram ID';
        } else if (userByInternal && userByTelegram) {
          idType = '–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞';
        }
        
        console.log(`User ID ${userId}: ${item.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π | –¢–∏–ø: ${idType}`);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ BalanceManager –∫–æ–¥
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò BALANCEMANAGER:');
    
    try {
      const { BalanceManager } = await import('./core/BalanceManager.js');
      const balanceManager = BalanceManager.getInstance();
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å –∫–∞–∫ BalanceManager –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID
      console.log('BalanceManager –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (workingUsers && workingUsers.length > 0) {
        const testUser = workingUsers[0];
        console.log(`\n–¢–µ—Å—Ç–∏—Ä—É–µ–º BalanceManager —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${testUser.telegram_id}:`);
        
        const result = await balanceManager.getUserBalance(testUser.id);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç getUserBalance:', result);
        
        if (result.success) {
          console.log('‚úÖ BalanceManager —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å internal ID');
        }
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å BalanceManager:', error.message);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n‚ö° –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ù–∞–π–¥–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const hourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    const { data: recentTransactions } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at, metadata')
      .gte('created_at', hourAgo)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (recentTransactions) {
      console.log('–ù–ï–î–ê–í–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      
      for (const tx of recentTransactions) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø ID –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const { data: userByInternal } = await supabase
          .from('users')
          .select('telegram_id')
          .eq('id', tx.user_id)
          .single();
          
        const { data: userByTelegram } = await supabase
          .from('users')
          .select('id')
          .eq('telegram_id', tx.user_id)
          .single();
        
        let idStatus = '';
        if (userByInternal && !userByTelegram) {
          idStatus = '‚úÖ Internal ID';
        } else if (!userByInternal && userByTelegram) {
          idStatus = '‚ö†Ô∏è Telegram ID';
        } else if (userByInternal && userByTelegram) {
          idStatus = 'üîÑ ID –∫–æ–Ω—Ñ–ª–∏–∫—Ç';
        } else {
          idStatus = '‚ùå Orphaned';
        }
        
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${idStatus}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è
        if (tx.metadata?.source) {
          console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${tx.metadata.source}`);
        }
      }
    }
    
    // 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\nüö® –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    
    const issues = [];
    
    // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç internal vs telegram ID
    const { data: totalUsers } = await supabase
      .from('users')
      .select('count')
      .single();
    
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalUsers?.count || 0}`);
    
    // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º ID
    const { data: allTransactions } = await supabase
      .from('transactions')
      .select('user_id')
      .gte('created_at', '2025-08-01T00:00:00.000Z');
    
    if (allTransactions) {
      let internalIdCount = 0;
      let telegramIdCount = 0;
      let unknownCount = 0;
      
      for (const tx of allTransactions) {
        const { data: userByInternal } = await supabase
          .from('users')
          .select('telegram_id')
          .eq('id', tx.user_id)
          .single();
          
        const { data: userByTelegram } = await supabase
          .from('users')
          .select('id')
          .eq('telegram_id', tx.user_id)
          .single();
        
        if (userByInternal && !userByTelegram) {
          internalIdCount++;
        } else if (!userByInternal && userByTelegram) {
          telegramIdCount++;
        } else {
          unknownCount++;
        }
      }
      
      console.log(`\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º ID:`);
      console.log(`Internal ID: ${internalIdCount}`);
      console.log(`Telegram ID: ${telegramIdCount}`);
      console.log(`–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ: ${unknownCount}`);
      
      if (telegramIdCount > internalIdCount) {
        console.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ï–ù–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–¢ TELEGRAM_ID');
        issues.push('BalanceManager –æ–∂–∏–¥–∞–µ—Ç internal ID, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å telegram_id');
      } else if (internalIdCount > telegramIdCount) {
        console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ï–ù–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–¢ INTERNAL_ID');
      } else {
        console.log('üîÑ –°–ú–ï–®–ê–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï ID - –≠–¢–û –ü–†–û–ë–õ–ï–ú–ê');
        issues.push('–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã ID –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ');
      }
    }
    
    if (issues.length > 0) {
      console.log('\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      issues.forEach((issue, index) => {
        console.log(`${index + 1}. ${issue}`);
      });
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ ID –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ø–ø–∏–Ω–≥–∞ ID:', error);
  }
}

analyzeIdMappingSystem();