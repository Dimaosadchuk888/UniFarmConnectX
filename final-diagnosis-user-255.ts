#!/usr/bin/env tsx
/**
 * üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER 255 –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
 */

import { supabase } from './core/supabase';

async function diagnoseFinalUser255() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER 255 –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã User 255
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í USER 255:');
    
    const { data: deposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 255)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);

    if (deposits && deposits.length > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
      console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã:');
      
      deposits.forEach((tx, i) => {
        const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
        console.log(`\n   ${i + 1}. –î–ï–ü–û–ó–ò–¢ #${tx.id}:`);
        console.log(`      üí∞ –°—É–º–º–∞: ${tx.amount_ton} TON`);
        console.log(`      üìÖ –í—Ä–µ–º—è: ${tx.created_at.slice(0, 19)} (${timeAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)`);
        console.log(`      ‚úÖ –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      üîó Hash: ${tx.tx_hash_unique?.slice(0, 30) || '–ù–ï–¢'}...`);
        console.log(`      üéØ –¢–∏–ø: ${tx.type}`);
        
        // –û—Å–æ–±–æ –æ—Ç–º–µ—á–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
        if (timeAgo < 60) {
          console.log(`      üåü –ù–û–í–´–ô –î–ï–ü–û–ó–ò–¢! (–º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)`);
        }
      });
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const newDeposit = deposits.find(tx => {
        const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
        return timeAgo < 60; // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      });
      
      if (newDeposit) {
        console.log('\nüéâ –ù–ê–ô–î–ï–ù –ù–û–í–´–ô –î–ï–ü–û–ó–ò–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!');
        console.log(`   –î–µ–ø–æ–∑–∏—Ç #${newDeposit.id}: ${newDeposit.amount_ton} TON`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${newDeposit.status}`);
        console.log(`   –í—Ä–µ–º—è: ${newDeposit.created_at}`);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê USER 255:');
        
        const { data: balance } = await supabase
          .from('user_balances')
          .select('*')
          .eq('user_id', 255)
          .single();
          
        if (balance) {
          console.log(`üí∞ UNI –±–∞–ª–∞–Ω—Å: ${balance.uni_balance}`);
          console.log(`üíé TON –±–∞–ª–∞–Ω—Å: ${balance.ton_balance}`);
          console.log(`üìÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${balance.updated_at}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
          const balanceUpdateTime = new Date(balance.updated_at).getTime();
          const depositTime = new Date(newDeposit.created_at).getTime();
          const balanceUpdatedAfterDeposit = balanceUpdateTime > depositTime;
          
          console.log(`\n‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞: ${balanceUpdatedAfterDeposit ? '–î–ê' : '–ù–ï–¢'}`);
          
          if (balanceUpdatedAfterDeposit) {
            const timeDiff = Math.round((balanceUpdateTime - depositTime) / 1000);
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${timeDiff} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞`);
          }
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Boost —Å—Ç–∞—Ç—É—Å
        console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON BOOST USER 255:');
        
        const { data: boosts } = await supabase
          .from('ton_boost_purchases')
          .select('*')
          .eq('user_id', 255)
          .order('created_at', { ascending: false })
          .limit(3);
          
        if (boosts && boosts.length > 0) {
          console.log(`üöÄ –ù–∞–π–¥–µ–Ω–æ TON Boost –ø–æ–∫—É–ø–æ–∫: ${boosts.length}`);
          
          boosts.forEach((boost, i) => {
            console.log(`\n   ${i + 1}. Boost #${boost.id}:`);
            console.log(`      üí∞ –°—É–º–º–∞: ${boost.amount_ton} TON`);
            console.log(`      üìÖ –í—Ä–µ–º—è: ${boost.created_at.slice(0, 19)}`);
            console.log(`      ‚úÖ –°—Ç–∞—Ç—É—Å: ${boost.status}`);
            console.log(`      üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${boost.multiplier}x`);
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é boost –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
          const recentBoost = boosts.find(boost => {
            const boostTime = new Date(boost.created_at).getTime();
            const depositTime = new Date(newDeposit.created_at).getTime();
            return Math.abs(boostTime - depositTime) < 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç —Ä–∞–∑–Ω–∏—Ü—ã
          });
          
          if (recentBoost) {
            console.log('\nüéâ TON BOOST –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –í–ú–ï–°–¢–ï –° –î–ï–ü–û–ó–ò–¢–û–ú!');
            console.log(`   Boost ID: ${recentBoost.id}`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${recentBoost.status}`);
          }
        }
        
        // 5. –û–±—â–∏–π –≤—ã–≤–æ–¥
        console.log('\n' + '='.repeat(80));
        console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
        console.log('');
        console.log('‚úÖ –ù–û–í–´–ô –î–ï–ü–û–ó–ò–¢ –û–ë–ù–ê–†–£–ñ–ï–ù –ò –û–ë–†–ê–ë–û–¢–ê–ù');
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞: ${newDeposit.status}`);
        console.log(`‚úÖ –°—É–º–º–∞: ${newDeposit.amount_ton} TON`);
        
        if (balance && balanceUpdatedAfterDeposit) {
          console.log('‚úÖ –ë–ê–õ–ê–ù–° –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù');
        } else {
          console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');
        }
        
        console.log('');
        console.log('üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('- User 255 —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç');
        console.log('- –õ–æ–≥–∏–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
        console.log('- –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–µ–ø–æ–∑–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
      } else {
        console.log('\n‚ö†Ô∏è –ù–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        console.log('–í–æ–∑–º–æ–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }
      
    } else {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('\n' + '='.repeat(80));
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

diagnoseFinalUser255().catch(console.error);