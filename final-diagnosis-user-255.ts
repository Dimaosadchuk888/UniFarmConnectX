#!/usr/bin/env tsx
/**
 * üîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï USER 25 VS –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * –í—ã—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É user 25 —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ TON_DEPOSIT, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ DEPOSIT
 */

import { supabase } from './core/supabase';

async function finalDiagnosisUser255() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('='.repeat(80));

  try {
    // 1. –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ user 25 (—É—Å–ø–µ—à–Ω—ã–π)
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û–ì–û USER 25:');
    
    const { data: user25Deposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .order('created_at', { ascending: true })
      .limit(10);

    console.log(`‚úÖ User 25 - –Ω–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${user25Deposits?.length || 0}`);
    
    if (user25Deposits && user25Deposits.length > 0) {
      console.log('\nüìã –ü–µ—Ä–≤—ã–µ 5 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User 25:');
      user25Deposits.slice(0, 5).forEach((tx, i) => {
        console.log(`   ${i + 1}. ${tx.type}: ${tx.amount} ${tx.currency}`);
        console.log(`      created: ${tx.created_at}`);
        console.log(`      status: ${tx.status}`);
        console.log(`      tx_hash: ${tx.tx_hash_unique?.slice(0, 15) || '–ù–ï–¢'}...`);
        console.log(`      metadata:`, tx.metadata ? Object.keys(tx.metadata) : '–ù–ï–¢');
        console.log(`      description: ${tx.description}`);
        console.log('');
      });
    }

    // 2. –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ user 255
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–û–ì–û USER 255:');
    
    const { data: user255Deposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 255)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .order('created_at', { ascending: true });

    console.log(`‚ùå User 255 - –Ω–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${user255Deposits?.length || 0}`);
    
    if (user255Deposits && user255Deposits.length > 0) {
      console.log('\nüìã –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã User 255:');
      user255Deposits.forEach((tx, i) => {
        console.log(`   ${i + 1}. ${tx.type}: ${tx.amount} ${tx.currency}`);
        console.log(`      created: ${tx.created_at}`);
        console.log(`      status: ${tx.status}`);
        console.log(`      tx_hash: ${tx.tx_hash_unique?.slice(0, 15) || '–ù–ï–¢'}...`);
        console.log(`      metadata:`, tx.metadata ? Object.keys(tx.metadata) : '–ù–ï–¢');
        console.log(`      description: ${tx.description}`);
        console.log('');
      });
    }

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ metadata –∏ tx_hash –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    console.log('\n3Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –ü–ê–¢–¢–ï–†–ù–û–í –°–û–ó–î–ê–ù–ò–Ø:');
    
    const user25TonDeposits = user25Deposits?.filter(tx => tx.type === 'TON_DEPOSIT') || [];
    const user255TonDeposits = user255Deposits?.filter(tx => tx.type === 'TON_DEPOSIT') || [];
    const user255RegularDeposits = user255Deposits?.filter(tx => tx.type === 'DEPOSIT') || [];

    console.log(`üìä User 25 TON_DEPOSIT: ${user25TonDeposits.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìä User 255 TON_DEPOSIT: ${user255TonDeposits.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìä User 255 DEPOSIT: ${user255RegularDeposits.length} –∑–∞–ø–∏—Å–µ–π`);

    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –°–û–ó–î–ê–ù–ò–Ø:');
    
    if (user25TonDeposits.length > 0) {
      const sample25 = user25TonDeposits[0];
      console.log('\n‚úÖ –û–±—Ä–∞–∑–µ—Ü —É—Å–ø–µ—à–Ω–æ–≥–æ TON_DEPOSIT (User 25):');
      console.log(`   tx_hash_unique: ${sample25.tx_hash_unique}`);
      console.log(`   description: "${sample25.description}"`);
      console.log(`   metadata keys:`, sample25.metadata ? Object.keys(sample25.metadata) : '–ù–ï–¢');
      console.log(`   amount: ${sample25.amount} vs amount_ton: ${sample25.amount_ton}`);
      console.log(`   status: ${sample25.status}`);
    }

    if (user255RegularDeposits.length > 0) {
      const sample255 = user255RegularDeposits[0];
      console.log('\n‚ùå –û–±—Ä–∞–∑–µ—Ü –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ DEPOSIT (User 255):');
      console.log(`   tx_hash_unique: ${sample255.tx_hash_unique}`);
      console.log(`   description: "${sample255.description}"`);
      console.log(`   metadata keys:`, sample255.metadata ? Object.keys(sample255.metadata) : '–ù–ï–¢');
      console.log(`   amount: ${sample255.amount} vs amount_ton: ${sample255.amount_ton}`);
      console.log(`   status: ${sample255.status}`);
    }

    // 4. –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° DEPOSIT –ó–ê–ü–ò–°–Ø–ú–ò:');
    
    const { data: otherDepositUsers } = await supabase
      .from('transactions')
      .select('user_id, type, amount, created_at, description, tx_hash_unique')
      .eq('type', 'DEPOSIT')
      .eq('currency', 'TON')
      .gte('created_at', '2025-07-01T00:00:00.000Z')
      .order('created_at', { ascending: false })
      .limit(15);

    if (otherDepositUsers) {
      console.log(`\nüîç –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å DEPOSIT –∑–∞–ø–∏—Å—è–º–∏:`);
      
      const userGroups = {};
      otherDepositUsers.forEach(tx => {
        if (!userGroups[tx.user_id]) {
          userGroups[tx.user_id] = [];
        }
        userGroups[tx.user_id].push(tx);
      });

      Object.entries(userGroups).forEach(([userId, deposits]) => {
        console.log(`\nüë§ User ${userId}: ${deposits.length} DEPOSIT –∑–∞–ø–∏—Å–µ–π`);
        deposits.slice(0, 2).forEach((tx, i) => {
          console.log(`   ${i + 1}. amount: ${tx.amount}, created: ${tx.created_at.slice(0, 16)}`);
          console.log(`      description: "${tx.description}"`);
          console.log(`      tx_hash: ${tx.tx_hash_unique?.slice(0, 15) || '–ù–ï–¢'}...`);
        });
      });
    }

    // 5. –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è DEPOSIT –∑–∞–ø–∏—Å–µ–π (–∞–Ω–∞–ª–∏–∑ description)
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó DESCRIPTIONS –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–ê:');
    
    const allDepositDescriptions = user255RegularDeposits.map(tx => tx.description).filter(Boolean);
    const allTonDepositDescriptions = user25TonDeposits.slice(0, 5).map(tx => tx.description).filter(Boolean);

    console.log('\nüìù DEPOSIT descriptions (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ):');
    allDepositDescriptions.forEach((desc, i) => {
      console.log(`   ${i + 1}. "${desc}"`);
    });

    console.log('\nüìù TON_DEPOSIT descriptions (—É—Å–ø–µ—à–Ω—ã–µ):');
    allTonDepositDescriptions.forEach((desc, i) => {
      console.log(`   ${i + 1}. "${desc}"`);
    });

    // 6. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ - –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏
    console.log('\n6Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ò–Ø:');
    
    console.log('\n‚è∞ User 25 TON_DEPOSIT –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
    user25TonDeposits.slice(0, 3).forEach((tx, i) => {
      console.log(`   ${i + 1}. ${tx.created_at} - ${tx.amount} TON`);
    });

    console.log('\n‚è∞ User 255 —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
    user255Deposits?.slice(0, 6).forEach((tx, i) => {
      console.log(`   ${i + 1}. ${tx.created_at} - ${tx.type} ${tx.amount} TON`);
    });

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –í–´–í–û–î–´ –û –†–ê–ó–õ–ò–ß–ò–Ø–•:');
    console.log('');
    console.log('1. üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –†–ê–ó–õ–ò–ß–ò–Ø:');
    console.log(`   - User 25: —Ç–æ–ª—å–∫–æ TON_DEPOSIT –∑–∞–ø–∏—Å–∏ (${user25TonDeposits.length})`);
    console.log(`   - User 255: —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã (${user255TonDeposits.length} TON_DEPOSIT + ${user255RegularDeposits.length} DEPOSIT)`);
    console.log('');
    console.log('2. üîç –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø:');
    console.log('   - –†–∞–∑–ª–∏—á–∏—è –≤ descriptions –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è');
    console.log('   - tx_hash_unique –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è');
    console.log('   - metadata —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏');
    console.log('');
    console.log('3. ‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:');
    console.log('   - User 25: —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ TON_DEPOSIT');
    console.log('   - User 255: —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ –ø—É—Ç–∏');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

finalDiagnosisUser255().catch(console.error);