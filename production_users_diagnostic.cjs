#!/usr/bin/env node
/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER 25 –ò USER 228 –í –ü–†–û–î–ê–ö–®–ù–ï
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ TonConnect –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkProductionUsers() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER 25 –ò USER 228 –í –ü–†–û–î–ê–ö–®–ù–ï\n');
  
  const targetUsers = [25, 228];
  
  for (const userId of targetUsers) {
    console.log(`\nüéØ ===== –ê–ù–ê–õ–ò–ó USER ${userId} =====`);
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('id, telegram_id, username, balance_ton, balance_uni, created_at')
        .eq('id', userId)
        .single();

      if (userError || !user) {
        console.log(`‚ùå User ${userId} –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        console.log('   –û—à–∏–±–∫–∞:', userError?.message || 'User –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        continue;
      }

      console.log(`‚úÖ User ${userId} –Ω–∞–π–¥–µ–Ω:`);
      console.log(`   Telegram ID: ${user.telegram_id}`);
      console.log(`   Username: ${user.username}`);
      console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
      console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString()}`);

      // 2. –ê–Ω–∞–ª–∏–∑ –í–°–ï–• —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: allTransactions, error: txError } = await supabase
        .from('transactions')
        .select('id, type, amount, currency, description, created_at, metadata, status')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (txError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User ${userId}:`, txError);
        continue;
      }

      console.log(`\nüìä –ù–ê–ô–î–ï–ù–û ${allTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User ${userId}:`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞–ª—é—Ç–∞–º –∏ —Ç–∏–ø–∞–º
      const txByType = {};
      const tonTransactions = [];
      const uniTransactions = [];
      
      allTransactions.forEach(tx => {
        const key = `${tx.type}_${tx.currency}`;
        if (!txByType[key]) txByType[key] = 0;
        txByType[key]++;
        
        if (tx.currency === 'TON') tonTransactions.push(tx);
        if (tx.currency === 'UNI') uniTransactions.push(tx);
      });

      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º:');
      Object.entries(txByType).forEach(([type, count]) => {
        console.log(`   ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });

      // 3. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
      console.log(`\nüíé –ê–ù–ê–õ–ò–ó ${tonTransactions.length} TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
      
      if (tonTransactions.length === 0) {
        console.log('   üö® –ù–ï–¢ TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –£ –≠–¢–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!');
        console.log('   üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('      - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–∞–ª TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
        console.log('      - TonConnect –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('      - –ü—Ä–æ–±–ª–µ–º–∞ –≤ backend –æ–±—Ä–∞–±–æ—Ç–∫–µ');
      } else {
        // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        const deposits = tonTransactions.filter(tx => 
          tx.type === 'DEPOSIT' || 
          tx.type === 'TON_DEPOSIT' ||
          tx.description?.includes('deposit') ||
          tx.description?.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        );
        
        const referrals = tonTransactions.filter(tx => tx.type === 'REFERRAL_REWARD');
        const farming = tonTransactions.filter(tx => tx.type === 'FARMING_REWARD');
        
        console.log(`   üì• –î–µ–ø–æ–∑–∏—Ç—ã/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${deposits.length}`);
        console.log(`   ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: ${referrals.length}`);
        console.log(`   üåæ –§–∞—Ä–º–∏–Ω–≥ –Ω–∞–≥—Ä–∞–¥—ã: ${farming.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        console.log('\n   üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
        tonTransactions.slice(0, 5).forEach((tx, i) => {
          console.log(`      ${i + 1}. ID ${tx.id}: ${tx.amount} TON`);
          console.log(`         –¢–∏–ø: ${tx.type}`);
          console.log(`         –°—Ç–∞—Ç—É—Å: ${tx.status}`);
          console.log(`         –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
          console.log(`         –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
          if (tx.metadata) {
            console.log(`         Metadata: ${JSON.stringify(tx.metadata, null, 2)}`);
          }
        });
      }

      // 4. –ü–û–ò–°–ö TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô –í –î–†–£–ì–ò–• –§–û–†–ú–ê–¢–ê–•
      console.log('\nüîç –ü–û–ò–°–ö –°–ö–†–´–¢–´–• TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô:');
      
      // –ò—â–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
      const possibleDeposits = allTransactions.filter(tx =>
        tx.description && (
          tx.description.includes('TON') ||
          tx.description.includes('deposit') ||
          tx.description.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ') ||
          tx.description.includes('TonConnect') ||
          tx.description.includes('blockchain')
        )
      );
      
      console.log(`   üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º TON/deposit: ${possibleDeposits.length}`);
      possibleDeposits.forEach(tx => {
        console.log(`      ID ${tx.id}: ${tx.amount} ${tx.currency} - ${tx.description}`);
      });

      // 5. –ü–†–û–í–ï–†–ö–ê METADATA –ù–ê –ù–ê–õ–ò–ß–ò–ï TON CONNECT
      const tonConnectTx = allTransactions.filter(tx =>
        tx.metadata && (
          JSON.stringify(tx.metadata).includes('ton') ||
          JSON.stringify(tx.metadata).includes('TonConnect') ||
          JSON.stringify(tx.metadata).includes('wallet')
        )
      );
      
      console.log(`   üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å TON Connect metadata: ${tonConnectTx.length}`);
      tonConnectTx.forEach(tx => {
        console.log(`      ID ${tx.id}: ${tx.type} - ${JSON.stringify(tx.metadata)}`);
      });

      // 6. –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê TON
      console.log('\nüìà –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô TON –ë–ê–õ–ê–ù–°–ê:');
      
      const tonTxSorted = tonTransactions.sort((a, b) => 
        new Date(a.created_at) - new Date(b.created_at)
      );
      
      let runningBalance = 0;
      tonTxSorted.forEach((tx, i) => {
        const amount = parseFloat(tx.amount);
        if (tx.type === 'DEPOSIT' || tx.type === 'TON_DEPOSIT' || tx.type === 'REFERRAL_REWARD' || tx.type === 'FARMING_REWARD') {
          runningBalance += amount;
        } else {
          runningBalance -= amount;
        }
        
        if (i < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
          console.log(`      ${new Date(tx.created_at).toLocaleString()}: ${amount > 0 ? '+' : ''}${amount} TON (–±–∞–ª–∞–Ω—Å: ${runningBalance.toFixed(6)})`);
        }
      });
      
      console.log(`   üìä –¢–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${runningBalance.toFixed(6)} TON`);
      console.log(`   üí∞ –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${user.balance_ton} TON`);
      
      if (Math.abs(runningBalance - parseFloat(user.balance_ton)) > 0.000001) {
        console.log('   ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –º–µ–∂–¥—É —Ä–∞—Å—á–µ—Ç–Ω—ã–º –∏ —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º!');
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ User ${userId}:`, error.message);
    }
  }

  // 7. –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ö–®–ù –°–ò–°–¢–ï–ú–´
  console.log('\n\nüéØ ===== –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ö–®–ù –°–ò–°–¢–ï–ú–´ =====');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    const { data: allTonDeposits, error: depositsError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, description, created_at, metadata')
      .eq('currency', 'TON')
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .order('created_at', { ascending: false })
      .limit(20);

    if (depositsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsError);
    } else {
      console.log(`üìä –ù–ê–ô–î–ï–ù–û ${allTonDeposits.length} TON –î–ï–ü–û–ó–ò–¢–û–í –≤ —Å–∏—Å—Ç–µ–º–µ:`);
      
      const userDeposits = {};
      allTonDeposits.forEach(tx => {
        if (!userDeposits[tx.user_id]) userDeposits[tx.user_id] = 0;
        userDeposits[tx.user_id] += parseFloat(tx.amount);
      });
      
      console.log('\nüìà TON –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
      Object.entries(userDeposits).forEach(([userId, total]) => {
        console.log(`   User ${userId}: ${total} TON`);
      });
      
      if (!userDeposits[25] && !userDeposits[228]) {
        console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–•–û–î–ö–ê:');
        console.log('   User 25 –∏ User 228 –ù–ï –ò–ú–ï–Æ–¢ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ!');
        console.log('   –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å TonConnect –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TonConnect –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüîç –ü–û–ò–°–ö TONCONNECT –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô:');
    const { data: tonConnectTx, error: tcError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, description, created_at, metadata')
      .or('description.ilike.%TonConnect%,description.ilike.%ton_connect%,description.ilike.%blockchain%')
      .order('created_at', { ascending: false })
      .limit(10);

    if (tonConnectTx && tonConnectTx.length > 0) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonConnectTx.length} TonConnect —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      tonConnectTx.forEach(tx => {
        console.log(`      User ${tx.user_id}: ${tx.amount} ${tx.currency} - ${tx.description}`);
      });
    } else {
      console.log('   üö® TonConnect —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ù–ï –ù–ê–ô–î–ï–ù–´');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }

  console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('üìã –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•');
}

checkProductionUsers();