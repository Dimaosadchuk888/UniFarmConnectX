#!/usr/bin/env node

/**
 * Runtime –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ó–∞–¥–∞—á–∞ 3: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */

// –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
const conflictingVars = [
  'DATABASE_URL',
  'PGHOST',
  'PGPORT', 
  'PGUSER',
  'PGPASSWORD',
  'PGDATABASE',
  'DATABASE_PROVIDER',
  'USE_NEON_DB'
];

console.log('üßπ Runtime –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
conflictingVars.forEach(varName => {
  if (process.env[varName]) {
    console.log(`‚ùå –£–¥–∞–ª—è—é: ${varName}`);
    delete process.env[varName];
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
const remaining = Object.keys(process.env).filter(key => 
  key.includes('DATABASE') || key.startsWith('PG') || key.includes('NEON')
);

console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å DB –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${remaining.length}`);

if (remaining.length > 0) {
  console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
  remaining.forEach(key => console.log(`  - ${key}`));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (process.env.SUPABASE_URL && process.env.SUPABASE_KEY) {
  console.log('‚úÖ Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ');
} else {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
}

console.log('üéØ Runtime –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');