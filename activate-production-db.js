/**
 * Production Database Activation Script
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ep-lucky-boat-a463bggt
 */

import { Pool, neonConfig } from '@neondatabase/serverless';
import ws from 'ws';

// Configure WebSocket for Neon
neonConfig.webSocketConstructor = ws;

// Production database connection string
const PRODUCTION_DATABASE_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

async function testProductionDatabase() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  console.log('üìç Endpoint: ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech');
  
  const pool = new Pool({ 
    connectionString: PRODUCTION_DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    // Test connection
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const client = await pool.connect();
    
    // Test basic query
    console.log('üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
    const result = await client.query('SELECT version()');
    console.log('‚úÖ PostgreSQL –≤–µ—Ä—Å–∏—è:', result.rows[0].version.substring(0, 50) + '...');
    
    // Test users table
    console.log('üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users...');
    const usersCount = await client.query('SELECT COUNT(*) as total FROM users');
    console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:', usersCount.rows[0].total);
    
    // Test sample user data
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const sampleUsers = await client.query('SELECT id, telegram_id, username FROM users LIMIT 3');
    console.log('‚úÖ –û–±—Ä–∞–∑–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', sampleUsers.rows);
    
    client.release();
    await pool.end();
    
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('üéØ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ep-lucky-boat-a463bggt –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ production –±–∞–∑–µ:', error.message);
    await pool.end();
    return false;
  }
}

// Set environment variables
process.env.DATABASE_URL = PRODUCTION_DATABASE_URL;
process.env.PGHOST = 'ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech';
process.env.PGUSER = 'neondb_owner';
process.env.PGPASSWORD = 'npg_SpgdNBV70WKl';
process.env.PGDATABASE = 'neondb';
process.env.PGPORT = '5432';

console.log('üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è production –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UniFarm');
console.log('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
console.log('DATABASE_URL:', process.env.DATABASE_URL.substring(0, 60) + '...');

testProductionDatabase().then(success => {
  if (success) {
    console.log('\nüéâ –ó–ê–î–ê–ß–ê T7 –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ep-lucky-boat-a463bggt –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    process.exit(0);
  } else {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ production –±–∞–∑–µ');
    process.exit(1);
  }
});