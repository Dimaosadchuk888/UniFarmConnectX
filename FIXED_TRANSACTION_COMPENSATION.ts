#!/usr/bin/env tsx

/**
 * üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ß–ï–†–ï–ó –ö–û–†–†–ï–ö–¢–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
 * 
 * –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function fixedTransactionCompensation() {
  console.log('üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ß–ï–†–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò');
  console.log('=' .repeat(50));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–£–ü–ù–´–ï –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const { data: beforeUsers, error: beforeError } = await supabase
      .from('users')
      .select('id, username, balance_ton')
      .in('id', [251, 255])
      .order('id');

    if (beforeError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í:', beforeError.message);
      return;
    }

    console.log('\nüìä –ë–ê–õ–ê–ù–°–´ –î–û –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò:');
    beforeUsers?.forEach(user => {
      console.log(`User ${user.id}: ${user.balance_ton} TON`);
    });

    // 2. –°–û–ó–î–ê–ï–ú –ö–û–ú–ü–ï–ù–°–ê–¶–ò–û–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –¢–ò–ü–û–ú DEPOSIT
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ DEPOSIT...');
    
    const compensationTransactions = [
      {
        user_id: '251',
        type: 'DEPOSIT', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
        amount: 2.0,
        currency: 'TON',
        status: 'completed',
        description: 'Admin compensation for lost deposit - 2 TON restored',
        created_at: new Date().toISOString(),
        metadata: {
          admin_compensation: true,
          reason: 'lost_deposit_bug_fix',
          original_issue: 'User lost 2 TON due to system bug',
          compensation_date: '2025-07-27'
        }
      },
      {
        user_id: '255',
        type: 'DEPOSIT', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
        amount: 2.0,
        currency: 'TON',
        status: 'completed',
        description: 'Admin compensation for lost deposit - 2 TON restored',
        created_at: new Date().toISOString(),
        metadata: {
          admin_compensation: true,
          reason: 'lost_deposit_bug_fix',
          original_issue: 'User lost 2 TON due to system bug',
          compensation_date: '2025-07-27'
        }
      }
    ];

    const { data: createdTransactions, error: createError } = await supabase
      .from('transactions')
      .insert(compensationTransactions)
      .select();

    if (createError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:', createError.message);
      
      // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ç–∏–ø
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Ç–∏–ø FARMING_REWARD...');
      
      const alternativeTransactions = compensationTransactions.map(tx => ({
        ...tx,
        type: 'FARMING_REWARD'
      }));

      const { data: altCreated, error: altError } = await supabase
        .from('transactions')
        .insert(alternativeTransactions)
        .select();

      if (altError) {
        console.error('‚ùå –ò FARMING_REWARD –ù–ï –†–ê–ë–û–¢–ê–ï–¢:', altError.message);
        return;
      } else {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å —Ç–∏–ø–æ–º FARMING_REWARD');
        createdTransactions = altCreated;
      }
    } else {
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —Å —Ç–∏–ø–æ–º DEPOSIT');
    }

    console.log('\nüìã –°–û–ó–î–ê–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    createdTransactions?.forEach(tx => {
      console.log(`   ID ${tx.id}: User ${tx.user_id} - ${tx.amount} ${tx.currency} (${tx.type})`);
    });

    // 3. –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú –ë–ê–õ–ê–ù–°–´ –ù–ê –û–°–ù–û–í–ï –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\n3Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    for (const userId of [251, 255]) {
      console.log(`\nüîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è User ${userId}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: allTransactions, error: txError } = await supabase
        .from('transactions')
        .select('amount, currency, status, type, description')
        .eq('user_id', userId.toString())
        .eq('currency', 'TON')
        .eq('status', 'completed');

      if (txError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User ${userId}:`, txError.message);
        continue;
      }

      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${allTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON`);
      
      // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      let totalBalance = 0;
      allTransactions?.forEach(tx => {
        const amount = Number(tx.amount) || 0;
        totalBalance += amount;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (tx.description?.includes('compensation') || tx.description?.includes('Admin')) {
          console.log(`     ${tx.type}: ${amount} TON - ${tx.description}`);
        }
      });

      console.log(`   –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${totalBalance} TON`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabase
        .from('users')
        .update({ balance_ton: totalBalance })
        .eq('id', userId);

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è User ${userId}:`, updateError.message);
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å User ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${totalBalance} TON`);
      }
    }

    // 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    console.log('\n4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const { data: afterUsers, error: afterError } = await supabase
      .from('users')
      .select('id, username, balance_ton')
      .in('id', [251, 255])
      .order('id');

    if (afterError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò:', afterError.message);
      return;
    }

    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚îÅ'.repeat(60));
    
    let successCount = 0;
    afterUsers?.forEach(afterUser => {
      const beforeUser = beforeUsers?.find(u => u.id === afterUser.id);
      const beforeBalance = Number(beforeUser?.balance_ton || 0);
      const afterBalance = Number(afterUser.balance_ton || 0);
      const change = afterBalance - beforeBalance;
      const success = change >= 1.8; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç 1.8 TON –∫–∞–∫ —É—Å–ø–µ—Ö
      
      console.log(`User ${afterUser.id} (@${afterUser.username}):`);
      console.log(`   –ë—ã–ª–æ: ${beforeBalance} TON`);
      console.log(`   –°—Ç–∞–ª–æ: ${afterBalance} TON`);
      console.log(`   –ü—Ä–∏—Ä–æ—Å—Ç: +${change.toFixed(6)} TON`);
      console.log(`   ${success ? '‚úÖ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ê' : '‚ùå –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ù–ï –ü–û–õ–£–ß–ï–ù–ê'}`);
      console.log('');
      
      if (success) successCount++;
    });

    if (successCount === 2) {
      console.log('üéâ –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–ê–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–ü–ï–®–ù–ê!');
      console.log('   –û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é');
    } else {
      console.log(`‚ö†Ô∏è  –¢–æ–ª—å–∫–æ ${successCount}/2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é`);
    }

    return {
      success: successCount === 2,
      compensated: successCount,
      total: 2,
      finalBalances: afterUsers
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await fixedTransactionCompensation();
    
    console.log('\n‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result?.success ? '–ü–û–õ–ù–û–°–¢–¨–Æ –£–°–ü–ï–®–ù–û' : '–ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–û'}`);
    console.log(`–ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ: ${result?.compensated}/${result?.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –û–ü–ï–†–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();