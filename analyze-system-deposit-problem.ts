#!/usr/bin/env tsx
/**
 * üîç –°–ò–°–¢–ï–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –î–ï–ü–û–ó–ò–¢–û–í
 * –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–±–ª–µ–º—ã
 */

import { supabase } from './core/supabase';

async function analyzeSystemDepositProblem() {
  console.log('üîç –°–ò–°–¢–ï–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('='.repeat(80));

  try {
    // 1. –ù–∞–π—Ç–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost –Ω–æ –±–µ–∑ TON_DEPOSIT
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í:');
    console.log('–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost, –Ω–æ –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    const { data: problematicUsers, error: problematicError } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, ton_boost_active, ton_boost_package, balance_ton, created_at')
      .eq('ton_boost_active', true)
      .gt('ton_boost_package', 0);

    if (problematicError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', problematicError.message);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${problematicUsers?.length || 0}`);

    const problemUsers = [];
    
    if (problematicUsers) {
      for (const user of problematicUsers) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const { data: deposits, error: depositError } = await supabase
          .from('transactions')
          .select('id, amount, created_at')
          .eq('user_id', user.id)
          .eq('type', 'TON_DEPOSIT');

        if (!depositError) {
          const depositCount = deposits?.length || 0;
          const totalDeposited = deposits?.reduce((sum, dep) => sum + parseFloat(dep.amount || '0'), 0) || 0;

          if (depositCount === 0) {
            problemUsers.push({
              ...user,
              depositCount: 0,
              totalDeposited: 0,
              issue: 'NO_DEPOSITS'
            });
          } else if (totalDeposited < 0.5) {
            problemUsers.push({
              ...user,
              depositCount,
              totalDeposited,
              issue: 'INSUFFICIENT_DEPOSITS'
            });
          }
        }
      }
    }

    console.log(`\nüö® –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í: ${problemUsers.length}`);
    
    problemUsers.forEach((user, i) => {
      console.log(`\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ${i + 1}:`);
      console.log(`   ID: ${user.id}, telegram_id: ${user.telegram_id}`);
      console.log(`   username: ${user.username || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
      console.log(`   first_name: ${user.first_name || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
      console.log(`   ton_boost_package: ${user.ton_boost_package}`);
      console.log(`   balance_ton: ${user.balance_ton}`);
      console.log(`   depositCount: ${user.depositCount}`);
      console.log(`   totalDeposited: ${user.totalDeposited}`);
      console.log(`   created_at: ${user.created_at}`);
      console.log(`   issue: ${user.issue}`);
    });

    // 2. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:');
    
    const timeGroups = {
      july: problemUsers.filter(u => u.created_at.startsWith('2025-07')),
      august: problemUsers.filter(u => u.created_at.startsWith('2025-08'))
    };

    console.log(`üìÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è:`);
    console.log(`   –ò—é–ª—å 2025: ${timeGroups.july.length}`);
    console.log(`   –ê–≤–≥—É—Å—Ç 2025: ${timeGroups.august.length}`);

    // 3. –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í:');
    
    const { data: successfulUsers, error: successError } = await supabase
      .from('users')
      .select('id, telegram_id, username, ton_boost_active, ton_boost_package, balance_ton, created_at')
      .eq('ton_boost_active', true)
      .gt('ton_boost_package', 0)
      .limit(10);

    if (!successError && successfulUsers) {
      let successfulCount = 0;
      
      for (const user of successfulUsers) {
        const { data: deposits } = await supabase
          .from('transactions')
          .select('amount')
          .eq('user_id', user.id)
          .eq('type', 'TON_DEPOSIT');

        const totalDeposited = deposits?.reduce((sum, dep) => sum + parseFloat(dep.amount || '0'), 0) || 0;
        
        if (totalDeposited >= 0.5) {
          successfulCount++;
          if (successfulCount <= 3) {
            console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ${successfulCount}:`);
            console.log(`   ID: ${user.id}, telegram_id: ${user.telegram_id}`);
            console.log(`   username: ${user.username || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
            console.log(`   ton_boost_package: ${user.ton_boost_package}`);
            console.log(`   totalDeposited: ${totalDeposited} TON`);
            console.log(`   created_at: ${user.created_at}`);
          }
        }
      }
      
      console.log(`\nüìä –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${successfulCount}`);
    }

    // 4. –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    const { data: duplicateUsers, error: dupError } = await supabase
      .from('users')
      .select('username, COUNT(*) as count')
      .not('username', 'is', null)
      .group('username')
      .having('COUNT(*)', 'gt', 1);

    if (!dupError && duplicateUsers) {
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${duplicateUsers.length}`);
      
      for (const dup of duplicateUsers.slice(0, 5)) {
        console.log(`\nüë• –î—É–±–ª–∏–∫–∞—Ç: ${dup.username} (${dup.count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)`);
        
        const { data: userInstances } = await supabase
          .from('users')
          .select('id, telegram_id, ton_wallet_address, ton_wallet_verified, ton_boost_active, created_at')
          .eq('username', dup.username)
          .order('created_at', { ascending: true });

        userInstances?.forEach((instance, i) => {
          console.log(`   ${i + 1}. ID: ${instance.id}, telegram_id: ${instance.telegram_id}`);
          console.log(`      wallet: ${instance.ton_wallet_address ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
          console.log(`      boost: ${instance.ton_boost_active ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–¢'}`);
          console.log(`      created: ${instance.created_at}`);
        });
      }
    }

    // 5. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å BOC –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° BOC –î–ê–ù–ù–´–ú–ò:');
    
    const { data: bocTransactions, error: bocError } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at, description')
      .eq('type', 'TON_DEPOSIT')
      .ilike('description', '%te6cck%')
      .gte('created_at', '2025-07-01T00:00:00.000Z')
      .order('created_at', { ascending: false })
      .limit(20);

    if (!bocError && bocTransactions) {
      console.log(`üîó –ù–∞–π–¥–µ–Ω–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å BOC –¥–∞–Ω–Ω—ã–º–∏: ${bocTransactions.length}`);
      
      bocTransactions.forEach((tx, i) => {
        console.log(`\nüîë BOC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i + 1}:`);
        console.log(`   user_id: ${tx.user_id}, amount: ${tx.amount} TON`);
        console.log(`   created_at: ${tx.created_at}`);
      });

      // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã
      const bocUserIds = [...new Set(bocTransactions.map(tx => tx.user_id))];
      const problematicBocUsers = problemUsers.filter(u => bocUserIds.includes(u.id));
      
      console.log(`\nüö® –ò–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å BOC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${problematicBocUsers.length}`);
    }

    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n6Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    
    const totalBoostUsers = problematicUsers?.length || 0;
    const problemPercentage = totalBoostUsers > 0 ? (problemUsers.length / totalBoostUsers * 100).toFixed(1) : 0;
    
    console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${totalBoostUsers}`);
    console.log(`   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${problemUsers.length}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${problemPercentage}%`);
    console.log(`   –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω: ${duplicateUsers?.length || 0}`);

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –í–ï–†–û–Ø–¢–ù–´–ï –ü–†–ò–ß–ò–ù–´ –°–ò–°–¢–ï–ú–ù–û–ô –ü–†–û–ë–õ–ï–ú–´:');
    console.log('');
    console.log('1. üîÑ –ü–†–û–ë–õ–ï–ú–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('   - –°–æ–∑–¥–∞—é—Ç—Å—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   - –î–µ–ø–æ–∑–∏—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É ID, –∞ boost –∫ –¥—Ä—É–≥–æ–º—É');
    console.log('');
    console.log('2. ‚è∞ –ü–†–û–ë–õ–ï–ú–ê TIMING –í WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ï:');
    console.log('   - Webhook –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è');
    console.log('   - Boost –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –Ω–æ TON_DEPOSIT –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è');
    console.log('');
    console.log('3. üîó –ü–†–û–ë–õ–ï–ú–ê –° BOC –û–ë–†–ê–ë–û–¢–ö–û–ô:');
    console.log('   - –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç BOC –¥–∞–Ω–Ω—ã–µ');
    console.log('   - –í–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ tx_hash');
    console.log('');
    console.log('4. üîë –ü–†–û–ë–õ–ï–ú–ê –ü–†–ò–í–Ø–ó–ö–ò –ö–û–®–ï–õ–¨–ö–û–í:');
    console.log('   - –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
    console.log('   - –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

analyzeSystemDepositProblem().catch(console.error);