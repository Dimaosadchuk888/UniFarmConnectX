#!/usr/bin/env node

/**
 * –ü–û–ò–°–ö –ê–ö–¢–ò–í–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
 */

import fs from 'fs';
import { execSync } from 'child_process';

console.log('üîç –ü–û–ò–°–ö –ê–ö–¢–ò–í–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê UNIFARMING');
console.log('='.repeat(70));

// 1. –ü–û–ò–°–ö –í–°–ï–• –§–ê–ô–õ–û–í –° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê–ú–ò
console.log('\nüìã 1. –ü–û–ò–°–ö –í–°–ï–• –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');

function findSchedulers() {
  const schedulerFiles = [];
  
  function scanDir(dir) {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = `${dir}/${item}`;
        
        try {
          const stat = fs.statSync(fullPath);
          
          if (stat.isDirectory() && !item.includes('node_modules') && !item.includes('.git')) {
            scanDir(fullPath);
          } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.js'))) {
            const content = fs.readFileSync(fullPath, 'utf8');
            
            // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞–º–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
            if ((content.includes('cron') || content.includes('schedule')) && 
                (content.includes('farming') || content.includes('reward') || content.includes('income'))) {
              schedulerFiles.push({
                path: fullPath,
                size: (content.length / 1024).toFixed(1) + ' KB',
                content: content,
                lastModified: stat.mtime
              });
            }
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    }
  }
  
  scanDir('.');
  return schedulerFiles;
}

const schedulers = findSchedulers();

console.log(`  –ù–∞–π–¥–µ–Ω–æ ${schedulers.length} —Ñ–∞–π–ª–æ–≤ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞–º–∏:`);

schedulers.forEach((scheduler, index) => {
  console.log(`\n  ${index + 1}. ${scheduler.path}`);
  console.log(`     ‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä: ${scheduler.size}`);
  console.log(`     ‚îú‚îÄ‚îÄ –ò–∑–º–µ–Ω–µ–Ω: ${scheduler.lastModified.toLocaleString()}`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  const lines = scheduler.content.split('\n');
  
  // –ò—â–µ–º CRON –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const cronLines = lines.filter(line => line.includes('cron.schedule') || line.includes('*/5'));
  cronLines.forEach(line => {
    console.log(`     ‚îú‚îÄ‚îÄ CRON: ${line.trim()}`);
  });
  
  // –ò—â–µ–º –º–µ—Ç–æ–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  const rewardLines = lines.filter(line => 
    line.includes('addBalance') || 
    line.includes('updateBalance') || 
    line.includes('farming') ||
    line.includes('calculateIncome') ||
    line.includes('processIncome')
  );
  
  if (rewardLines.length > 0) {
    console.log(`     ‚îî‚îÄ‚îÄ –ú–µ—Ç–æ–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (${rewardLines.length}):`);
    rewardLines.slice(0, 3).forEach(line => {
      console.log(`         ‚îÇ ${line.trim()}`);
    });
    if (rewardLines.length > 3) {
      console.log(`         ‚îî‚îÄ‚îÄ ... –µ—â–µ ${rewardLines.length - 3} –º–µ—Ç–æ–¥–æ–≤`);
    }
  }
});

// 2. –ê–ù–ê–õ–ò–ó –°–ï–†–í–ï–†–ê index.ts
console.log('\nüìã 2. –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–û–ì–û –°–ï–†–í–ï–†–ê:');

try {
  const serverContent = fs.readFileSync('server/index.ts', 'utf8');
  console.log(`  ‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä: ${(serverContent.length / 1024).toFixed(1)} KB`);
  
  // –ò—â–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
  const lines = serverContent.split('\n');
  lines.forEach((line, index) => {
    if (line.includes('FarmingScheduler') || 
        line.includes('scheduler') || 
        line.includes('start()') ||
        line.includes('cron')) {
      console.log(`  ‚îú‚îÄ‚îÄ –°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
    }
  });
  
} catch (error) {
  console.log(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è server/index.ts: ${error.message}`);
}

// 3. –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í
console.log('\nüìã 3. –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');

const alternativeFiles = [
  'modules/scheduler/farmingScheduler.ts',
  'modules/scheduler/uniFarmingScheduler.ts', 
  'core/scheduler/uniFarmingScheduler.ts',
  'server/schedulers/farmingScheduler.ts',
  'scripts/farming-scheduler.ts',
  'scripts/uni-farming-scheduler.ts'
];

alternativeFiles.forEach(file => {
  if (fs.existsSync(file)) {
    try {
      const content = fs.readFileSync(file, 'utf8');
      const stat = fs.statSync(file);
      console.log(`  ‚úÖ –ù–ê–ô–î–ï–ù: ${file}`);
      console.log(`     ‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä: ${(content.length / 1024).toFixed(1)} KB`);
      console.log(`     ‚îî‚îÄ‚îÄ –ò–∑–º–µ–Ω–µ–Ω: ${stat.mtime.toLocaleString()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (content.includes('start()') || content.includes('cron.schedule')) {
        console.log(`     ‚ö†Ô∏è  –°–û–î–ï–†–ñ–ò–¢ –ê–ö–¢–ò–í–ù–£–Æ –õ–û–ì–ò–ö–£!`);
      }
    } catch (e) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${file}: ${e.message}`);
    }
  } else {
    console.log(`  ‚ö™ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
  }
});

// 4. –ü–û–ò–°–ö –ó–ê–ü–£–©–ï–ù–ù–´–• –ó–ê–î–ê–ß –ß–ï–†–ï–ó –ü–†–û–¶–ï–°–°–´
console.log('\nüìã 4. –ê–ù–ê–õ–ò–ó –ó–ê–ü–£–©–ï–ù–ù–´–• –ü–†–û–¶–ï–°–°–û–í:');

try {
  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
  const processes = execSync('ps aux | grep -E "tsx|node" | grep -v grep', { encoding: 'utf8' });
  const lines = processes.split('\n').filter(line => line.trim());
  
  console.log(`  –ù–∞–π–¥–µ–Ω–æ ${lines.length} Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:`);
  
  lines.forEach((line, index) => {
    const parts = line.split(/\s+/);
    const pid = parts[1];
    const cpu = parts[2];
    const mem = parts[3];
    const command = line.substring(line.indexOf(parts[10]));
    
    console.log(`\n  ${index + 1}. PID ${pid} (CPU: ${cpu}%, MEM: ${mem}%)`);
    console.log(`     ‚îî‚îÄ‚îÄ ${command.substring(0, 80)}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    try {
      if (command.includes('server/index.ts')) {
        const openFiles = execSync(`lsof -p ${pid} 2>/dev/null | grep -E "\\.ts|\\.js" | head -5`, { encoding: 'utf8' });
        if (openFiles.trim()) {
          console.log(`     ‚îî‚îÄ‚îÄ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã:`);
          openFiles.split('\n').forEach(file => {
            if (file.trim()) console.log(`         ‚îÇ ${file.split(/\s+/).pop()}`);
          });
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ lsof
    }
  });
  
} catch (error) {
  console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${error.message}`);
}

// 5. –ü–û–ò–°–ö –ò–ú–ü–û–†–¢–û–í –°–¢–ê–†–û–ô –õ–û–ì–ò–ö–ò
console.log('\nüìã 5. –ü–û–ò–°–ö –°–¢–ê–†–û–ô –õ–û–ì–ò–ö–ò –§–ê–†–ú–ò–ù–ì–ê:');

function findOldFarmingLogic() {
  const oldLogicFiles = [];
  
  function scanForOldLogic(dir) {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = `${dir}/${item}`;
        
        try {
          const stat = fs.statSync(fullPath);
          
          if (stat.isDirectory() && !item.includes('node_modules') && !item.includes('.git')) {
            scanForOldLogic(fullPath);
          } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.js'))) {
            const content = fs.readFileSync(fullPath, 'utf8');
            
            // –ò—â–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ UnifiedFarmingCalculator
            if ((content.includes('farming') || content.includes('reward')) &&
                content.includes('Math.min') &&
                content.includes('288') &&
                !content.includes('UnifiedFarmingCalculator')) {
              oldLogicFiles.push({
                path: fullPath,
                content: content,
                lastModified: stat.mtime
              });
            }
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }
  
  scanForOldLogic('.');
  return oldLogicFiles;
}

const oldLogic = findOldFarmingLogic();

console.log(`  –ù–∞–π–¥–µ–Ω–æ ${oldLogic.length} —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π:`);

oldLogic.forEach((file, index) => {
  console.log(`\n  ${index + 1}. ${file.path}`);
  console.log(`     ‚îî‚îÄ‚îÄ –ò–∑–º–µ–Ω–µ–Ω: ${file.lastModified.toLocaleString()}`);
  
  // –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  const lines = file.content.split('\n');
  lines.forEach((line, lineNum) => {
    if (line.includes('Math.min') && line.includes('288')) {
      console.log(`       ‚îÇ –°—Ç—Ä–æ–∫–∞ ${lineNum + 1}: ${line.trim()}`);
    }
  });
});

// 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –ö–û–î–ê
console.log('\nüìã 6. –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–ò –í–´–ü–û–õ–ù–Ø–ï–ú–û–ì–û –ö–û–î–ê:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å
const currentTime = new Date();
console.log(`  –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime.toLocaleTimeString()}`);

// –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ª–æ–≥–æ–≤
const balanceChanges = [
  { time: '09:36', balance: 277441.755287 },
  { time: '09:39', balance: 277660.887231 },
  { time: '09:43', balance: 278103.901397 },
  { time: '10:03', balance: 279684.127298 }
];

console.log(`\n  –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞:`);
for (let i = 1; i < balanceChanges.length; i++) {
  const current = balanceChanges[i];
  const previous = balanceChanges[i-1];
  const change = current.balance - previous.balance;
  const expectedInterval = 0.669826;
  const ratio = change / expectedInterval;
  
  console.log(`    ${current.time}: +${change.toFixed(2)} UNI (${ratio.toFixed(0)}x –æ—Ç –Ω–æ—Ä–º—ã)`);
}

console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ò–°–ö–ê:');
console.log('='.repeat(70));

console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
console.log(`  ‚îú‚îÄ‚îÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${schedulers.length}`);
console.log(`  ‚îú‚îÄ‚îÄ –§–∞–π–ª–æ–≤ —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π: ${oldLogic.length}`);
console.log(`  ‚îî‚îÄ‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${lines ? lines.length : 0}`);

console.log(`\nüìä –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´:`);
if (oldLogic.length > 0) {
  console.log(`  ‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–ê –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –≤ ${oldLogic.length} —Ñ–∞–π–ª–∞—Ö`);
  oldLogic.forEach(file => {
    console.log(`    - ${file.path}`);
  });
} else {
  console.log(`  ‚úÖ –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
}

console.log(`\nüìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
console.log(`  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
console.log(`  2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ UnifiedFarmingCalculator`);
console.log(`  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ CRON`);
console.log(`  4. –ù–∞–π—Ç–∏ –≥–¥–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è +400-500 UNI`);