#!/usr/bin/env tsx

/**
 * –≠–ö–°–¢–†–ï–ù–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–†–û–ë–õ–ï–ú–ê –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú –ë–ê–õ–ê–ù–°–ê
 * –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ TON Boost –ø–∞–∫–µ—Ç–∞!
 */

import { supabase } from './core/supabaseClient';
import { BalanceManager } from './core/BalanceManager';

async function emergencyCacheInvestigation() {
  console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º User 25 (DimaOsadchuk) - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 1 —á–∞—Å
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    const { data: recentTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });

    console.log('‚è∞ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 25 –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    if (recentTransactions && recentTransactions.length > 0) {
      recentTransactions.forEach((tx, index) => {
        const time = new Date(tx.created_at).toLocaleTimeString();
        console.log(`${index + 1}. [${time}] ${tx.type} | UNI: ${tx.amount_uni} | TON: ${tx.amount_ton}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`   ID: ${tx.id}`);
      });
    } else {
      console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User 25 –≤ –ë–î
    const { data: currentUser, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton')
      .eq('id', 25)
      .single();

    console.log('\nüí∞ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° USER 25 –í –ë–î:');
    if (currentUser) {
      console.log(`UNI: ${currentUser.balance_uni}`);
      console.log(`TON: ${currentUser.balance_ton}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ BalanceManager (—Å –∫–µ—à–µ–º)
    const balanceManager = BalanceManager.getInstance();
    const cachedBalance = await balanceManager.getUserBalance(25);
    
    console.log('\nüóÑÔ∏è –ë–ê–õ–ê–ù–° –ß–ï–†–ï–ó BALANCEMANAGER (—Å –∫–µ—à–µ–º):');
    console.log(JSON.stringify(cachedBalance, null, 2));

    // 4. –ò—â–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ TON_BOOST_PURCHASE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
    
    const { data: boostPurchases, error: boostError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('type', 'TON_BOOST_PURCHASE')
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: false });

    console.log('\nüöÄ –ü–û–ö–£–ü–ö–ò TON BOOST –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 2 –ß–ê–°–ê:');
    if (boostPurchases && boostPurchases.length > 0) {
      boostPurchases.forEach((purchase, index) => {
        const time = new Date(purchase.created_at).toLocaleTimeString();
        console.log(`${index + 1}. [${time}] TON_BOOST_PURCHASE`);
        console.log(`   –°–ø–∏—Å–∞–Ω–æ TON: ${purchase.amount_ton}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
        console.log(`   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${purchase.id}`);
      });
    } else {
      console.log('   –ü–æ–∫—É–ø–æ–∫ TON Boost –∑–∞ 2 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 5. –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã/—Ä–µ–≤–µ—Ä—Å—ã
    const { data: possibleReversals, error: reversalError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', twoHoursAgo)
      .in('type', ['REFUND', 'REVERSAL', 'TON_DEPOSIT', 'CORRECTION'])
      .order('created_at', { ascending: false });

    console.log('\nüîÑ –í–û–ó–ú–û–ñ–ù–´–ï –í–û–ó–í–†–ê–¢–´/–†–ï–í–ï–†–°–´ –ó–ê 2 –ß–ê–°–ê:');
    if (possibleReversals && possibleReversals.length > 0) {
      possibleReversals.forEach((reversal, index) => {
        const time = new Date(reversal.created_at).toLocaleTimeString();
        console.log(`${index + 1}. [${time}] ${reversal.type}`);
        console.log(`   TON: ${reversal.amount_ton} | UNI: ${reversal.amount_uni}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${reversal.description}`);
        console.log(`   ID: ${reversal.id}`);
      });
    } else {
      console.log('   –í–æ–∑–≤—Ä–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã User 25
    const { data: activeBoosts, error: boostStatusError } = await supabase
      .from('ton_boost_packages')
      .select('*')
      .eq('user_id', 25)
      .eq('is_active', true)
      .order('created_at', { ascending: false });

    console.log('\n‚ö° –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–ê–ö–ï–¢–´:');
    if (activeBoosts && activeBoosts.length > 0) {
      activeBoosts.forEach((boost, index) => {
        console.log(`${index + 1}. –ü–∞–∫–µ—Ç ${boost.package_type} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${boost.amount_paid} TON`);
        console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${boost.is_active} | –°–æ–∑–¥–∞–Ω: ${boost.created_at}`);
        console.log(`   ID: ${boost.id}`);
      });
    } else {
      console.log('   –ê–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 7. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –ò—â–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const { data: duplicateCheck, error: dupError } = await supabase
      .from('transactions')
      .select('type, amount_ton, amount_uni, created_at, description')
      .eq('user_id', 25)
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: true });

    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ù–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –û–ü–ï–†–ê–¶–ò–ò:');
    if (duplicateCheck && duplicateCheck.length > 0) {
      const operationMap = new Map();
      
      duplicateCheck.forEach((tx, index) => {
        const key = `${tx.type}_${tx.amount_ton}_${tx.amount_uni}`;
        if (!operationMap.has(key)) {
          operationMap.set(key, []);
        }
        operationMap.get(key).push({
          index: index + 1,
          time: new Date(tx.created_at).toLocaleTimeString(),
          description: tx.description
        });
      });

      operationMap.forEach((operations, key) => {
        if (operations.length > 1) {
          console.log(`‚ùó –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´: ${key}`);
          operations.forEach(op => {
            console.log(`   ${op.index}. [${op.time}] ${op.description}`);
          });
        }
      });
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ BalanceManager –¥–ª—è User 25 (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.log('\nüìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('Backend –∫–µ—à BalanceManager: TTL 5 –º–∏–Ω—É—Ç');
    console.log('Frontend –∫–µ—à balanceService: TTL 15 —Å–µ–∫—É–Ω–¥');
    console.log('WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –¥–æ–ª–∂–Ω—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à');
    console.log('');
    console.log('üîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. Race condition –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö');
    console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏');
    console.log('3. –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î');
    console.log('4. –ü—Ä–æ–±–ª–µ–º–∞ —Å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏');
    console.log('5. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ BalanceManager.updateUserBalance()');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

emergencyCacheInvestigation().catch(console.error);