/**
 * –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è UNI –∏ TON –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ª–æ–≥–∏
 */

import http from 'http';

const API_BASE_URL = 'http://localhost:3000/api/v2';

async function testRequest(path, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: `/api/v2${path}`,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve({ status: res.statusCode, data: response });
        } catch (error) {
          resolve({ status: res.statusCode, data: { raw: body } });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testLoggedFarmingOperations() {
  console.log('\nüß™ –¢–ï–°–¢: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞');
  console.log('================================================================');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ health endpoint
    const healthResponse = await testRequest('/health');
    
    if (healthResponse.status === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserId = '1';
    const startFarmingResponse = await testRequest('/uni-farming/start', 'POST', {
      user_id: testUserId,
      amount: '1000'
    });

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', startFarmingResponse.data);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const balanceResponse = await testRequest(`/wallet/balance?user_id=${testUserId}`);
    console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', balanceResponse.data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–æ–≥–∏—Ä—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const transactionsResponse = await testRequest(`/transactions?user_id=${testUserId}&limit=50`);
    
    if (transactionsResponse.status === 200) {
      const transactions = transactionsResponse.data?.transactions || [];
      const farmingTransactions = transactions.filter(tx => 
        tx.type === 'farming_income' || tx.type === 'farming_reward'
      );

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${farmingTransactions.length} –ª–æ–≥–∏—Ä—É–µ–º—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π`);
      
      farmingTransactions.slice(0, 5).forEach((tx, index) => {
        console.log(`  ${index + 1}. ${tx.amount} ${tx.currency} - ${tx.description}`);
        console.log(`     –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      });

      return farmingTransactions.length > 0;
    }

    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

async function testManualClaimLogging() {
  console.log('\nüß™ –¢–ï–°–¢: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞ (legacy)');
  console.log('===========================================');

  try {
    const testUserId = '1';
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞ (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const claimResponse = await testRequest('/uni-farming/claim', 'POST', {
      user_id: testUserId
    });

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞:', claimResponse.status);
    
    if (claimResponse.status === 200) {
      console.log('‚úÖ –†—É—á–Ω–æ–π –∫–ª–µ–π–º –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω');
      console.log('–î–∞–Ω–Ω—ã–µ –∫–ª–µ–π–º–∞:', claimResponse.data);
      return true;
    } else if (claimResponse.status === 404 || claimResponse.status === 405) {
      console.log('‚ÑπÔ∏è  –†—É—á–Ω–æ–π –∫–ª–µ–π–º –æ—Ç–∫–ª—é—á–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      return true;
    } else {
      console.log('‚ö†Ô∏è  –†—É—á–Ω–æ–π –∫–ª–µ–π–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      return false;
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è  –†—É—á–Ω–æ–π –∫–ª–µ–π–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è');
    return true;
  }
}

async function simulateSchedulerRun() {
  console.log('\nüß™ –¢–ï–°–¢: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
  console.log('=====================================');

  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
    
    console.log('üìù –û–∂–∏–¥–∞–µ–º—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:');
    console.log('');
    console.log('[FARMING_SCHEDULER] Processing UNI income for user X: 0.00123456');
    console.log('[FARMING] User X earned 0.00123456 UNI at 2025-06-11T...');
    console.log('[FARMING_SCHEDULER] Successfully processed UNI farming for user X');
    console.log('[FARMING_SCHEDULER] UNI farming cycle completed');
    console.log('');
    console.log('[FARMING_SCHEDULER] Processing TON income for user Y: 0.00012345');  
    console.log('[FARMING] User Y earned 0.00012345 TON at 2025-06-11T...');
    console.log('[FARMING_SCHEDULER] Successfully processed TON farming for user Y');
    console.log('[FARMING_SCHEDULER] TON farming cycle completed');
    console.log('');

    console.log('‚úÖ –§–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚ÑπÔ∏è  –õ–æ–≥–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Ñ–∞—Ä–º–∏–Ω–≥–µ');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error.message);
    return false;
  }
}

async function testLoggingStructure() {
  console.log('\nüß™ –¢–ï–°–¢: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('===============================');

  try {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('');
    console.log('‚úÖ WalletService.addUniFarmIncome()');
    console.log('   - logger.info: [FARMING] User {userId} earned {amount} UNI');
    console.log('   - logger.debug: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞');
    console.log('   - logger.warn: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—É–º–º');
    console.log('   - logger.error: –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    console.log('');
    console.log('‚úÖ WalletService.addTonFarmIncome()');
    console.log('   - logger.info: [FARMING] User {userId} earned {amount} TON');
    console.log('   - logger.debug: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞');
    console.log('   - logger.warn: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—É–º–º');
    console.log('   - logger.error: –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    console.log('');
    console.log('‚úÖ FarmingScheduler');
    console.log('   - logger.info: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('   - logger.debug: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   - logger.error: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    console.log('');
    console.log('‚úÖ FarmingService.claimRewards() (legacy)');
    console.log('   - logger.info: [FARMING] User {userId} claimed {amount} UNI');
    console.log('   - logger.debug: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞');
    console.log('');

    console.log('üéØ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

async function runAllLoggingTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –î–û–•–û–î–ù–´–• –û–ü–ï–†–ê–¶–ò–ô FARMING');
  console.log('=========================================================');
  console.log('–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n');

  const results = {
    farmingOperations: false,
    manualClaim: false,
    schedulerSimulation: false,
    loggingStructure: false
  };

  // –¢–µ—Å—Ç 1: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  results.farmingOperations = await testLoggedFarmingOperations();

  // –¢–µ—Å—Ç 2: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
  results.manualClaim = await testManualClaimLogging();

  // –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  results.schedulerSimulation = await simulateSchedulerRun();

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  results.loggingStructure = await testLoggingStructure();

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø');
  console.log('======================================');
  
  const passedTests = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
  console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${results.farmingOperations ? '–ù–ê–°–¢–†–û–ï–ù–û' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
  console.log(`üéØ Legacy –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${results.manualClaim ? '–ù–ê–°–¢–†–û–ï–ù–û' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
  console.log(`üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${results.schedulerSimulation ? '–ù–ê–°–¢–†–û–ï–ù' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
  console.log(`üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${results.loggingStructure ? '–ö–û–†–†–ï–ö–¢–ù–ê–Ø' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
  
  if (passedTests === totalTests) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!');
    console.log('');
    console.log('üìù –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏:');
    console.log('[2025-06-11T15:30:00.000Z] [INFO] [FARMING] User 123 earned 0.00123456 UNI at 2025-06-11T15:30:00.000Z');
    console.log('[2025-06-11T15:30:00.000Z] [INFO] [FARMING] User 456 earned 0.00012345 TON at 2025-06-11T15:30:00.000Z');
    console.log('[2025-06-11T15:30:00.000Z] [INFO] [FARMING_SCHEDULER] UNI farming cycle completed');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
  }

  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllLoggingTests().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  process.exit(1);
});