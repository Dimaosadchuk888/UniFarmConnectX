/**
 * –¢–ï–°–¢ –° BYPASS –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
 * –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ AuthService –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è processReferralInline
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testAuthBypass() {
  console.log('=== –¢–ï–°–¢ –° BYPASS –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testTelegramId = Date.now();
    const testUsername = `BypassTest_${testTelegramId}`;
    const referralCode = 'REF_1750079004411_nddfp2';
    
    console.log('üîç 1. –ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–ê');
    console.log(`Telegram ID: ${testTelegramId}`);
    console.log(`Username: ${testUsername}`);
    console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
    
    // –í—ã–∑—ã–≤–∞–µ–º API —Å bypass –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    console.log('\nüîç 2. –í–´–ó–û–í API –° BYPASS');
    
    const requestData = {
      initData: 'bypass_for_testing',
      ref_by: referralCode,
      telegram_id: testTelegramId,
      username: testUsername,
      first_name: testUsername
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    
    const response = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData)
    });
    
    const data = await response.json();
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(data, null, 2));
    
    if (data.success && data.user) {
      const newUserId = data.user.id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${newUserId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
      console.log('\nüîç 3. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –í –ë–î');
      
      const { data: createdUser } = await supabase
        .from('users')
        .select('id, telegram_id, username, referred_by')
        .eq('id', newUserId)
        .single();
      
      const { data: referralRecord } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', newUserId)
        .single();
      
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î:', createdUser);
      console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å:', referralRecord);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
      console.log('\nüîç 4. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –°–ï–†–í–ï–†–ê');
      console.log('–ò—â–µ–º –ª–æ–≥–∏ —Å –Ω–∞—à–∏–º testTelegramId –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–æ–≥–∞—Ö...');
      
      // –û—Ü–µ–Ω–∫–∞
      console.log('\nüéØ 5. –û–¶–ï–ù–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê');
      
      const referredByCorrect = createdUser?.referred_by == 25; // ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const referralExists = !!referralRecord;
      
      if (referredByCorrect && referralExists) {
        console.log('üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! processReferralInline –†–ê–ë–û–¢–ê–ï–¢!');
      } else {
        console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
        console.log(`   referred_by –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${referredByCorrect}`);
        console.log(`   referral –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ${referralExists}`);
      }
      
      // –û—á–∏—Å—Ç–∫–∞
      await supabase.from('referrals').delete().eq('user_id', newUserId);
      await supabase.from('users').delete().eq('id', newUserId);
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏
      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –ü–û–°–õ–ï –û–®–ò–ë–ö–ò');
      console.log('–ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ testTelegramId –∏–ª–∏ bypass...');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testAuthBypass();