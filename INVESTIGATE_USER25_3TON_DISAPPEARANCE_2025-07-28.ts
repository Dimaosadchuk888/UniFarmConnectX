#!/usr/bin/env tsx

/**
 * –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ 3 TON —É User ID 25
 * –î–∞—Ç–∞: 28.07.2025, 14:04
 * TX Hash: te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKAvrKdS6oJcxoz+BuKjqoPzIvO9XUVeJhy6yJbmMcRUx+lVkSy1hOBMPPYsp+hgwqopkKgqBeqss+9kbXu6HqGFFNTRi7RDwlAAAAGSgAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKlloLwAAAAAAAAAAAAAAAAAADhBvuW
 */

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
dotenv.config();

interface TransactionRecord {
  id: number;
  user_id: string;
  type: string;
  amount: string;
  metadata: any;
  created_at: string;
  status: string;
}

interface UserBalance {
  ton_balance: number;
  uni_balance: number;
  updated_at: string;
}

class User25TONDisappearanceInvestigator {
  private supabase = createClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_KEY!
  );
  
  private targetTxHash = 'te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKAvrKdS6oJcxoz+BuKjqoPzIvO9XUVeJhy6yJbmMcRUx+lVkSy1hOBMPPYsp+hgwqopkKgqBeqss+9kbXu6HqGFFNTRi7RDwlAAAAGSgAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKlloLwAAAAAAAAAAAAAAAAAADhBvuW';
  
  private log(message: string) {
    console.log(`[${new Date().toISOString()}] ${message}`);
  }
  
  private error(message: string) {
    console.error(`[${new Date().toISOString()}] ‚ùå ${message}`);
  }
  
  async investigateCurrentBalance() {
    this.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User ID 25...');
    
    try {
      const { data: user, error } = await this.supabase
        .from('users')
        .select('ton_balance, uni_balance, updated_at')
        .eq('id', '25')
        .single();
        
      if (error) {
        this.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
        return null;
      }
      
      this.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User 25:`);
      this.log(`   TON: ${user.ton_balance}`);
      this.log(`   UNI: ${user.uni_balance}`);
      this.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updated_at}`);
      
      return user;
    } catch (error) {
      this.error(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${error}`);
      return null;
    }
  }
  
  async findTargetTransaction() {
    this.log('üîç –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º hash...');
    
    try {
      // –ü–æ–∏—Å–∫ –ø–æ tx_hash –≤ metadata
      const { data: transactions, error } = await this.supabase
        .from('transactions')
        .select('*')
        .eq('user_id', '25')
        .order('created_at', { ascending: false })
        .limit(20);
        
      if (error) {
        this.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
        return null;
      }
      
      this.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transactions.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25`);
      
      const targetTx = transactions.find(tx => {
        const metadata = tx.metadata || {};
        return metadata.tx_hash === this.targetTxHash || 
               metadata.ton_tx_hash === this.targetTxHash ||
               metadata.blockchain_hash === this.targetTxHash;
      });
      
      if (targetTx) {
        this.log(`‚úÖ –ù–ê–ô–î–ï–ù–ê —Ü–µ–ª–µ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:`);
        this.log(`   ID: ${targetTx.id}`);
        this.log(`   Type: ${targetTx.type}`);
        this.log(`   Amount: ${targetTx.amount}`);
        this.log(`   Status: ${targetTx.status}`);
        this.log(`   Created: ${targetTx.created_at}`);
        this.log(`   Metadata: ${JSON.stringify(targetTx.metadata, null, 2)}`);
        return targetTx;
      } else {
        this.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å hash ${this.targetTxHash.substring(0, 20)}... –ù–ï –ù–ê–ô–î–ï–ù–ê`);
        return null;
      }
    } catch (error) {
      this.error(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error}`);
      return null;
    }
  }
  
  async analyzeRecentTransactions() {
    this.log('üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 25...');
    
    try {
      const { data: transactions, error } = await this.supabase
        .from('transactions')
        .select('*')
        .eq('user_id', '25')
        .gte('created_at', '2025-07-28T12:00:00Z') // –° 12:00 —Å–µ–≥–æ–¥–Ω—è
        .order('created_at', { ascending: false });
        
      if (error) {
        this.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
        return [];
      }
      
      this.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 25 —Å 12:00 (${transactions.length} —à—Ç.):`);
      this.log('='.repeat(80));
      
      transactions.forEach((tx, index) => {
        this.log(`${index + 1}. [${tx.created_at}] ${tx.type} | ${tx.amount} | Status: ${tx.status}`);
        if (tx.metadata) {
          const metadata = tx.metadata;
          if (metadata.tx_hash || metadata.ton_tx_hash) {
            this.log(`   TX Hash: ${metadata.tx_hash || metadata.ton_tx_hash}`);
          }
          if (metadata.transaction_source) {
            this.log(`   Source: ${metadata.transaction_source}`);
          }
          if (metadata.original_type) {
            this.log(`   Original Type: ${metadata.original_type}`);
          }
        }
        this.log('');
      });
      
      return transactions;
    } catch (error) {
      this.error(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error}`);
      return [];
    }
  }
  
  async checkForDuplicateTransactions() {
    this.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
      const { data: allTransactions, error } = await this.supabase
        .from('transactions')
        .select('*')
        .eq('user_id', '25')
        .order('created_at', { ascending: false })
        .limit(50);
        
      if (error) {
        this.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π: ${error.message}`);
        return;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash
      const hashGroups: { [key: string]: TransactionRecord[] } = {};
      
      allTransactions.forEach(tx => {
        const metadata = tx.metadata || {};
        const hash = metadata.tx_hash || metadata.ton_tx_hash || metadata.blockchain_hash;
        
        if (hash) {
          if (!hashGroups[hash]) {
            hashGroups[hash] = [];
          }
          hashGroups[hash].push(tx);
        }
      });
      
      this.log('üìä –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ hash:');
      let duplicatesFound = false;
      
      Object.entries(hashGroups).forEach(([hash, txs]) => {
        if (txs.length > 1) {
          duplicatesFound = true;
          this.log(`‚ö†Ô∏è –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–ª—è hash ${hash.substring(0, 20)}...:`);
          txs.forEach(tx => {
            this.log(`   - ID ${tx.id}: ${tx.type} | ${tx.amount} | ${tx.created_at}`);
          });
          this.log('');
        }
      });
      
      if (!duplicatesFound) {
        this.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
      
    } catch (error) {
      this.error(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–µ–π: ${error}`);
    }
  }
  
  async checkBalanceCalculationLogic() {
    this.log('üßÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞...');
    
    try {
      const { data: allTransactions, error } = await this.supabase
        .from('transactions')
        .select('*')
        .eq('user_id', '25')
        .order('created_at', { ascending: true });
        
      if (error) {
        this.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
        return;
      }
      
      let calculatedTONBalance = 0;
      let calculatedUNIBalance = 0;
      
      this.log('üí∞ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º:');
      this.log('='.repeat(60));
      
      allTransactions.forEach((tx, index) => {
        const amount = parseFloat(tx.amount);
        const isPositive = amount > 0;
        
        if (tx.type.includes('TON') || tx.type.includes('DEPOSIT') || tx.type.includes('FARMING_REWARD')) {
          calculatedTONBalance += amount;
          this.log(`${index + 1}. [${tx.type}] ${isPositive ? '+' : ''}${amount} TON (–ò—Ç–æ–≥–æ TON: ${calculatedTONBalance.toFixed(6)})`);
        } else if (tx.type.includes('UNI')) {
          calculatedUNIBalance += amount;
          this.log(`${index + 1}. [${tx.type}] ${isPositive ? '+' : ''}${amount} UNI (–ò—Ç–æ–≥–æ UNI: ${calculatedUNIBalance.toFixed(6)})`);
        } else {
          this.log(`${index + 1}. [${tx.type}] ${isPositive ? '+' : ''}${amount} (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø)`);
        }
      });
      
      this.log('='.repeat(60));
      this.log(`üìä –†–ê–°–ß–ï–¢–ù–´–ô –±–∞–ª–∞–Ω—Å:`);
      this.log(`   TON: ${calculatedTONBalance.toFixed(6)}`);
      this.log(`   UNI: ${calculatedUNIBalance.toFixed(6)}`);
      
      return { calculatedTONBalance, calculatedUNIBalance };
      
    } catch (error) {
      this.error(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞: ${error}`);
      return null;
    }
  }
  
  async runInvestigation() {
    this.log('üö® –ó–ê–ü–£–°–ö –°–†–û–ß–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ 3 TON —É User ID 25');
    this.log('üìÖ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: 28.07.2025, 14:04');
    this.log('üîó TX Hash: ' + this.targetTxHash.substring(0, 30) + '...');
    this.log('='.repeat(80));
    
    // 1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const currentBalance = await this.investigateCurrentBalance();
    
    // 2. –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const targetTransaction = await this.findTargetTransaction();
    
    // 3. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const recentTransactions = await this.analyzeRecentTransactions();
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    await this.checkForDuplicateTransactions();
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    const calculatedBalances = await this.checkBalanceCalculationLogic();
    
    this.log('='.repeat(80));
    this.log('üìã –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢:');
    this.log('='.repeat(80));
    
    if (currentBalance) {
      this.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance.ton_balance} TON`);
    }
    
    if (targetTransaction) {
      this.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ID ${targetTransaction.id}, ${targetTransaction.type}, ${targetTransaction.amount}`);
    } else {
      this.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º hash –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    }
    
    if (calculatedBalances) {
      this.log(`üßÆ –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${calculatedBalances.calculatedTONBalance.toFixed(6)} TON`);
      if (currentBalance) {
        const difference = currentBalance.ton_balance - calculatedBalances.calculatedTONBalance;
        this.log(`üìä –†–∞–∑–Ω–∏—Ü–∞: ${difference.toFixed(6)} TON`);
      }
    }
    
    this.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å 12:00: ${recentTransactions.length}`);
    
    this.log('='.repeat(80));
    this.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const investigator = new User25TONDisappearanceInvestigator();
investigator.runInvestigation()
  .then(() => {
    console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('\nüí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
  });