#!/usr/bin/env tsx

/**
 * üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º UUID —Ñ–æ—Ä–º–∞—Ç –¥–ª—è ID –∑–∞—è–≤–∫–∏
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { randomUUID } from 'crypto';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function createTestWithdrawalWithUUID() {
  console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° –ü–†–ê–í–ò–õ–¨–ù–´–ú UUID');
  console.log('=' .repeat(55));
  
  try {
    // 1. –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const testUserId = 185;
    
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const { data: testUser, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton')
      .eq('id', testUserId)
      .single();
      
    if (userError || !testUser) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userError?.message}`);
    }
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${testUser.username} (ID: ${testUser.id})`);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${testUser.balance_ton} TON`);

    // 2. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º UUID
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å UUID...');
    
    const withdrawRequest = {
      id: randomUUID(), // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID —Ñ–æ—Ä–º–∞—Ç
      user_id: testUser.id,
      telegram_id: testUser.telegram_id,
      username: testUser.username,
      amount_ton: '1.5', // 1.5 TON –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      ton_wallet: 'EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t',
      status: 'pending',
      created_at: new Date().toISOString()
    };
    
    console.log(`üÜî UUID –∑–∞—è–≤–∫–∏: ${withdrawRequest.id}`);
    console.log(`üí∞ –°—É–º–º–∞: ${withdrawRequest.amount_ton} TON`);
    console.log(`üè¶ –ö–æ—à–µ–ª–µ–∫: ${withdrawRequest.ton_wallet}`);

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data: newRequest, error: insertError } = await supabase
      .from('withdraw_requests')
      .insert(withdrawRequest)
      .select()
      .single();
      
    if (insertError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${insertError.message}`);
    }
    
    console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AdminBotService —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdminBotService...');
    
    try {
      const { AdminBotService } = await import('./modules/adminBot/service');
      const adminBotService = new AdminBotService();
      
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç—É...');
      
      const notificationResult = await adminBotService.notifyWithdrawal(newRequest);
      
      if (notificationResult) {
        console.log('‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –£–°–ü–ï–®–ù–û!');
        console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –°–ï–ô–ß–ê–°!');
      } else {
        console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        console.log('‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –æ—à–∏–±–∫–∞ API –∏–ª–∏ –∞–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
    } catch (serviceError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ AdminBotService:', serviceError);
      console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–≤...');
    
    const { data: admins } = await supabase
      .from('users')
      .select('username, telegram_id, is_admin')
      .eq('is_admin', true);
      
    console.log(`üë• –ê–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${admins?.length || 0}`);
    admins?.forEach((admin, i) => {
      console.log(`   ${i + 1}. @${admin.username} (${admin.telegram_id})`);
    });

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    console.log('\n6Ô∏è‚É£ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥...');
    
    const { data: allRequests } = await supabase
      .from('withdraw_requests')
      .select('id, user_id, amount_ton, status, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
      
    console.log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏: ${allRequests?.length || 0}`);
    allRequests?.forEach((req, i) => {
      const date = new Date(req.created_at).toLocaleString('ru-RU');
      console.log(`   ${i + 1}. ${req.amount_ton} TON (${req.status}) - ${date}`);
    });

    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('\n7Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø...');
    console.log('üéØ –¢–ï–°–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –°–û–ó–î–ê–ù–ê:');
    console.log(`   üÜî ID: ${newRequest.id}`);
    console.log(`   üë§ User: @${newRequest.username} (${newRequest.user_id})`);
    console.log(`   üí∞ Amount: ${newRequest.amount_ton} TON`);
    console.log(`   üè¶ Wallet: ${newRequest.ton_wallet}`);
    console.log(`   üìÖ Created: ${new Date(newRequest.created_at).toLocaleString('ru-RU')}`);
    console.log(`   ‚è≥ Status: ${newRequest.status}`);
    
    console.log('\nüîî –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –í TELEGRAM:');
    console.log('1. –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ');
    console.log('2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:');
    console.log('   - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É');
    console.log('   - TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞');
    console.log('   - –î–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è');
    console.log('   - –ö–Ω–æ–ø–∫–∏: "–û–¥–æ–±—Ä–∏—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "–í—Å–µ –∑–∞—è–≤–∫–∏"');
    console.log('3. Webhook –æ—Ç–≤–µ—á–∞–µ—Ç 200 OK (–±–µ–∑ 500 –æ—à–∏–±–æ–∫)');
    
    console.log('\nüì± –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –∞–¥–º–∏–Ω-–±–æ—Ç–∞');
    console.log('2. –ò—â–∏—Ç–µ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏');
    console.log('3. –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ webhook');
    
    return newRequest;

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î');
    console.log(`‚è∞ ${new Date().toISOString()}\n`);
    
    const result = await createTestWithdrawalWithUUID();
    
    console.log('\nüéâ –ó–ê–Ø–í–ö–ê –°–û–ó–î–ê–ù–ê –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û!');
    console.log('üìß –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–û–í–ï–†–¨–¢–ï TELEGRAM –ê–î–ú–ò–ù-–ë–û–¢–ê!');
    
    if (result) {
      console.log(`\nüÜî ID –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏: ${result.id}`);
    }
    
    console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û:', error);
    process.exit(1);
  }
}

main();