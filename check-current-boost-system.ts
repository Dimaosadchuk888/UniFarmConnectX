import { supabase } from './core/supabaseClient';

async function checkCurrentBoostSystem() {
  const userId = '184';
  
  console.log('=== –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ô –°–ò–°–¢–ï–ú–´ TON BOOST ===\n');
  console.log('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toLocaleString('ru-RU'));
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î\n');
  
  // 1. –¢–µ–∫—É—â–∏–µ boost –ø–∞–∫–µ—Ç—ã
  console.log('1. BOOST –ü–ê–ö–ï–¢–´ –í –°–ò–°–¢–ï–ú–ï:');
  const { data: packages } = await supabase
    .from('boost_packages')
    .select('*')
    .order('price');
    
  if (packages?.length) {
    packages.forEach(p => {
      console.log(`‚îú‚îÄ‚îÄ ID: ${p.id} | ${p.name}`);
      console.log(`‚îÇ   –¶–µ–Ω–∞: ${p.price} TON | –°—Ç–∞–≤–∫–∞: ${p.rate}% –≤ –¥–µ–Ω—å`);
      console.log(`‚îÇ   –ê–∫—Ç–∏–≤–µ–Ω: ${p.is_active ? '‚úÖ' : '‚ùå'}\n`);
    });
  } else {
    console.log('‚îî‚îÄ‚îÄ ‚ùå –¢–∞–±–ª–∏—Ü–∞ boost_packages –ø—É—Å—Ç–∞—è!\n');
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  console.log('2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò TON –ó–ê –°–ï–ì–û–î–ù–Ø:');
  const todayStart = new Date();
  todayStart.setHours(0, 0, 0, 0);
  
  const { data: todayTx } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('currency', 'TON')
    .gte('created_at', todayStart.toISOString())
    .order('created_at', { ascending: false });
    
  if (todayTx?.length) {
    let totalIn = 0, totalOut = 0;
    todayTx.forEach(tx => {
      const amount = parseFloat(tx.amount);
      if (amount > 0) totalIn += amount;
      else totalOut += Math.abs(amount);
      
      const time = new Date(tx.created_at).toLocaleTimeString('ru-RU');
      console.log(`‚îú‚îÄ‚îÄ ${time} | ${tx.type}: ${tx.amount} TON`);
      if (tx.description) console.log(`‚îÇ   ${tx.description}`);
    });
    console.log(`‚îî‚îÄ‚îÄ –ò—Ç–æ–≥–æ: +${totalIn.toFixed(6)} / -${totalOut.toFixed(6)} TON\n`);
  } else {
    console.log('‚îî‚îÄ‚îÄ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n');
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
  console.log('3. –ê–ö–¢–ò–í–ù–´–ï TON –î–ï–ü–û–ó–ò–¢–´:');
  const { data: activeFarming } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId)
    .eq('is_active', true)
    .order('created_at', { ascending: false });
    
  if (activeFarming?.length) {
    activeFarming.forEach(d => {
      console.log(`‚îú‚îÄ‚îÄ ID: ${d.id} | –ü–∞–∫–µ—Ç: ${d.ton_boost_package_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`‚îÇ   –°—É–º–º–∞: ${d.amount || '?'} TON | –°—Ç–∞–≤–∫–∞: ${d.rate || '?'}%`);
      console.log(`‚îÇ   –°–æ–∑–¥–∞–Ω: ${new Date(d.created_at).toLocaleString('ru-RU')}\n`);
    });
  } else {
    console.log('‚îî‚îÄ‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n');
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('4. –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single();
    
  console.log(`‚îú‚îÄ‚îÄ balance_ton: ${user.balance_ton} TON`);
  console.log(`‚îú‚îÄ‚îÄ ton_farming_balance: ${user.ton_farming_balance} TON`);
  console.log(`‚îú‚îÄ‚îÄ –û–±—â–∞—è —Å—É–º–º–∞: ${parseFloat(user.balance_ton) + parseFloat(user.ton_farming_balance)} TON`);
  console.log(`‚îú‚îÄ‚îÄ ton_boost_active: ${user.ton_boost_active ? '‚úÖ' : '‚ùå'}`);
  console.log(`‚îî‚îÄ‚îÄ ton_boost_package: ${user.ton_boost_package || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`);
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º API boost/farming-status
  console.log('5. –î–ê–ù–ù–´–ï –ò–ó API:');
  try {
    const response = await fetch(`http://localhost:3001/api/v2/boost/farming-status?user_id=${userId}`);
    const apiData = await response.json();
    
    if (apiData.success) {
      console.log(`‚îú‚îÄ‚îÄ –î–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ API: ${apiData.data.deposits?.length || 0}`);
      console.log(`‚îú‚îÄ‚îÄ –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${apiData.data.dailyIncomeTon} TON`);
      console.log(`‚îî‚îÄ‚îÄ –°—Ç–∞–≤–∫–∞ –≤ —Å–µ–∫—É–Ω–¥—É: ${apiData.data.totalTonRatePerSecond} TON/—Å–µ–∫\n`);
      
      if (apiData.data.deposits?.length) {
        console.log('   –î–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ API:');
        apiData.data.deposits.forEach((d: any, i: number) => {
          console.log(`   ${i+1}. ${d.package_name}: ${d.amount} TON (${d.rate}% –≤ –¥–µ–Ω—å)`);
        });
      }
    }
  } catch (error) {
    console.log('‚îî‚îÄ‚îÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API\n');
  }
  
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
  console.log('- –ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ ~13 TON');
  console.log('- ton_farming_balance –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (–æ—Å—Ç–∞–ª—Å—è 115 TON)');
  console.log('- API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Å—Ç–∞—Ä—ã–π –¥–µ–ø–æ–∑–∏—Ç');
  console.log('- –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ');
}

checkCurrentBoostSystem();