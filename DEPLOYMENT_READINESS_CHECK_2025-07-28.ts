#!/usr/bin/env tsx

/**
 * –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

console.log('üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ö –î–ï–ü–õ–û–Æ');
console.log('='.repeat(80));

interface EnvironmentCheck {
  name: string;
  required: boolean;
  category: string;
  description: string;
}

const environmentChecks: EnvironmentCheck[] = [
  // Database & Core
  { name: 'SUPABASE_URL', required: true, category: 'Database', description: 'Supabase project URL' },
  { name: 'SUPABASE_KEY', required: true, category: 'Database', description: 'Supabase service role key' },
  { name: 'DATABASE_URL', required: false, category: 'Database', description: 'PostgreSQL connection (optional)' },
  
  // Authentication
  { name: 'JWT_SECRET', required: true, category: 'Security', description: 'JWT token signing secret' },
  
  // Telegram Integration
  { name: 'TELEGRAM_BOT_TOKEN', required: true, category: 'Telegram', description: 'Main bot token (@UniFarming_Bot)' },
  { name: 'TELEGRAM_ADMIN_BOT_TOKEN', required: true, category: 'Telegram', description: 'Admin bot token' },
  { name: 'TELEGRAM_WEBAPP_URL', required: true, category: 'Telegram', description: 'WebApp URL for bot integration' },
  
  // TON Blockchain
  { name: 'TON_API_URL', required: true, category: 'TON', description: 'TON API endpoint' },
  { name: 'TON_MANIFEST_URL', required: true, category: 'TON', description: 'TON Connect manifest URL' },
  
  // Application
  { name: 'APP_DOMAIN', required: true, category: 'Application', description: 'Main application domain' },
  { name: 'NODE_ENV', required: false, category: 'Application', description: 'Environment mode' },
];

function checkEnvironmentVariables(): { ready: boolean; issues: string[] } {
  console.log('üìã –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø\n');
  
  const issues: string[] = [];
  let totalChecks = 0;
  let passedChecks = 0;
  
  const categories = ['Database', 'Security', 'Telegram', 'TON', 'Application'];
  
  categories.forEach(category => {
    console.log(`üìÇ ${category}:`);
    
    const categoryVars = environmentChecks.filter(check => check.category === category);
    categoryVars.forEach(check => {
      totalChecks++;
      const value = process.env[check.name];
      
      if (value) {
        passedChecks++;
        const maskedValue = value.length > 30 
          ? value.substring(0, 15) + '...' + value.substring(value.length - 5)
          : value.substring(0, 20) + '...';
        console.log(`   ‚úÖ ${check.name}: ${maskedValue}`);
      } else {
        const status = check.required ? '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø' : '‚ö†Ô∏è –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û';
        console.log(`   ${status} ${check.name}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
        
        if (check.required) {
          issues.push(`${check.name} - ${check.description}`);
        }
      }
    });
    console.log('');
  });
  
  console.log(`üìä –ò–¢–û–ì–û: ${passedChecks}/${totalChecks} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
  
  return {
    ready: issues.length === 0,
    issues
  };
}

function validateURLs(): { valid: boolean; issues: string[] } {
  console.log('\nüîó –ü–†–û–í–ï–†–ö–ê URL –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò\n');
  
  const issues: string[] = [];
  
  const urls = {
    'APP_DOMAIN': process.env.APP_DOMAIN,
    'TELEGRAM_WEBAPP_URL': process.env.TELEGRAM_WEBAPP_URL,
    'TON_MANIFEST_URL': process.env.TON_MANIFEST_URL,
    'SUPABASE_URL': process.env.SUPABASE_URL
  };
  
  Object.entries(urls).forEach(([name, url]) => {
    if (url) {
      try {
        new URL(url);
        console.log(`‚úÖ ${name}: ${url}`);
      } catch {
        console.log(`‚ùå ${name}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL - ${url}`);
        issues.push(`${name} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL`);
      }
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–æ–≤
  const appDomain = process.env.APP_DOMAIN;
  const webappUrl = process.env.TELEGRAM_WEBAPP_URL;
  const manifestUrl = process.env.TON_MANIFEST_URL;
  
  if (appDomain && webappUrl && manifestUrl) {
    const domainMatch = webappUrl.includes(appDomain.replace('https://', '')) && 
                       manifestUrl.includes(appDomain.replace('https://', ''));
    
    if (domainMatch) {
      console.log('‚úÖ –î–æ–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏');
    } else {
      console.log('‚ö†Ô∏è –î–æ–º–µ–Ω—ã –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏');
      issues.push('–ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤ –º–µ–∂–¥—É APP_DOMAIN, TELEGRAM_WEBAPP_URL –∏ TON_MANIFEST_URL');
    }
  }
  
  return {
    valid: issues.length === 0,
    issues
  };
}

function checkCriticalFiles(): { ready: boolean; issues: string[] } {
  console.log('\nüìÅ –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í\n');
  
  const issues: string[] = [];
  
  const criticalFiles = [
    'client/public/tonconnect-manifest.json',
    'client/public/.well-known/tonconnect-manifest.json',
    'server/index.ts',
    'shared/schema.ts',
    'core/TransactionService.ts',
    'modules/wallet/service.ts'
  ];
  
  criticalFiles.forEach(filePath => {
    try {
      const fs = require('fs');
      if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${filePath}`);
      } else {
        console.log(`‚ùå ${filePath} - –ù–ï –ù–ê–ô–î–ï–ù`);
        issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: ${filePath}`);
      }
    } catch (error) {
      console.log(`‚ùå ${filePath} - –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò`);
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: ${filePath}`);
    }
  });
  
  return {
    ready: issues.length === 0,
    issues
  };
}

function generateDeploymentReport(): void {
  console.log('\n' + '='.repeat(80));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ');
  console.log('='.repeat(80));
  
  const envCheck = checkEnvironmentVariables();
  const urlCheck = validateURLs();
  const fileCheck = checkCriticalFiles();
  
  const allIssues = [...envCheck.issues, ...urlCheck.issues, ...fileCheck.issues];
  
  if (allIssues.length === 0) {
    console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ!');
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('‚úÖ –í—Å–µ URL –≤–∞–ª–∏–¥–Ω—ã –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã');
    console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ');
    console.log('\nüöÄ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–ø–ª–æ–π');
  } else {
    console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    allIssues.forEach((issue, index) => {
      console.log(`${index + 1}. ${issue}`);
    });
    console.log('\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
  }
  
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envCheck.ready ? '–ì–û–¢–û–í–û' : '–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}`);
  console.log(`- URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${urlCheck.valid ? '–ì–û–¢–û–í–û' : '–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}`);
  console.log(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: ${fileCheck.ready ? '–ì–û–¢–û–í–û' : '–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}`);
  
  console.log('\n='.repeat(80));
}

generateDeploymentReport();