// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User #25
import { supabase } from './core/supabaseClient.js';

async function diagnoseUser25Deposits() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ï–ü–û–ó–ò–¢–û–í USER #25');
  console.log('================================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1. –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:');
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_uni, balance_ton, updated_at')
      .eq('id', 25)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    console.log(`   TON: ${user.balance_ton || 0}`);
    console.log(`   UNI: ${user.balance_uni || 0}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updated_at}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n2. –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–≤—Å–µ —Ç–∏–ø—ã):');
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('id, type, amount, amount_ton, amount_uni, currency, status, description, created_at, metadata, tx_hash_unique')
      .eq('user_id', 25)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
      return;
    }
    
    if (!transactions || transactions.length === 0) {
      console.log('   ‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    } else {
      transactions.forEach((tx, i) => {
        console.log(`   ${i+1}. ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type} | –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      TON: ${tx.amount_ton || 0} | UNI: ${tx.amount_uni || 0}`);
        console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${tx.created_at}`);
        console.log(`      tx_hash_unique: ${tx.tx_hash_unique || 'NULL'}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–ù–µ—Ç'}`);
        console.log('      ---');
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    console.log('\n3. TON –î–ï–ü–û–ó–ò–¢–´ –ó–ê 24 –ß–ê–°–ê:');
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const { data: tonDeposits, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .or('type.eq.TON_DEPOSIT,currency.eq.TON,amount_ton.gt.0')
      .gte('created_at', yesterday.toISOString())
      .order('created_at', { ascending: false });
    
    if (tonError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', tonError.message);
    } else if (!tonDeposits || tonDeposits.length === 0) {
      console.log('   ‚ö†Ô∏è TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonDeposits.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      tonDeposits.forEach((dep, i) => {
        console.log(`   ${i+1}. ${dep.amount_ton} TON (${dep.created_at}) - –°—Ç–∞—Ç—É—Å: ${dep.status}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ deposits (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    console.log('\n4. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ DEPOSITS:');
    const { data: deposits, error: depError } = await supabase
      .from('deposits')
      .select('*')
      .eq('user_id', 25)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (depError) {
      console.log('   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ deposits –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else if (!deposits || deposits.length === 0) {
      console.log('   ‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –≤ deposits –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${deposits.length} –∑–∞–ø–∏—Å–µ–π –≤ deposits`);
      deposits.forEach((dep, i) => {
        console.log(`   ${i+1}. ${dep.amount} ${dep.currency} (${dep.created_at})`);
      });
    }
    
    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\n5. –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    const { data: allUsers, error: statsError } = await supabase
      .from('transactions')
      .select('user_id, amount_ton')
      .not('amount_ton', 'is', null)
      .gt('amount_ton', 0)
      .gte('created_at', yesterday.toISOString());
    
    if (!statsError && allUsers) {
      const userStats = {};
      allUsers.forEach(tx => {
        if (!userStats[tx.user_id]) userStats[tx.user_id] = 0;
        userStats[tx.user_id] += parseFloat(tx.amount_ton || 0);
      });
      
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –∑–∞ 24—á: ${Object.keys(userStats).length}`);
      console.log(`   User #25 –≤ —Å–ø–∏—Å–∫–µ: ${userStats[25] ? `–î–∞ (${userStats[25]} TON)` : '–ù–ï–¢!'}`);
    }
    
  } catch (error) {
    console.log('üí• –ö–†–ò–¢–ò–ß–ù–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseUser25Deposits()
  .then(() => {
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(err => {
    console.log('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err.message);
    process.exit(1);
  });