const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function diagnoseTonDepositIssue() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–ê');
  console.log('=======================================');
  
  try {
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184:');
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, description, created_at')
      .eq('user_id', 184)
      .or('currency.eq.TON,description.ilike.%TON%,type.eq.TON_DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(10);

    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions?.length || 0} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      if (transactions && transactions.length > 0) {
        transactions.forEach(tx => {
          console.log(`  - ID: ${tx.id}, –¢–∏–ø: ${tx.type}, –°—É–º–º–∞: ${tx.amount} ${tx.currency}, ${new Date(tx.created_at).toLocaleString()}`);
          console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        });
      } else {
        console.log('  üìù TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User 184:');
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, ton_wallet_address')
      .eq('id', 184)
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
    } else {
      console.log(`‚úÖ User 184 –Ω–∞–π–¥–µ–Ω:`);
      console.log(`  - Telegram ID: ${userData.telegram_id}`);
      console.log(`  - Username: ${userData.username}`);
      console.log(`  - TON Balance: ${userData.balance_ton}`);
      console.log(`  - TON Wallet: ${userData.ton_wallet_address || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
    }

    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ User 184:');
    const { data: allTx, error: allTxError } = await supabase
      .from('transactions')
      .select('id, type, amount, currency, description, created_at')
      .eq('user_id', 184)
      .order('created_at', { ascending: false })
      .limit(20);

    if (allTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTxError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allTx?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      if (allTx && allTx.length > 0) {
        const last5 = allTx.slice(0, 5);
        last5.forEach((tx, idx) => {
          const timeAgo = new Date() - new Date(tx.created_at);
          const minutesAgo = Math.floor(timeAgo / 1000 / 60);
          console.log(`  ${idx + 1}. ${tx.type}: ${tx.amount} ${tx.currency} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        });
      }
    }

    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º server/index.ts –º–∞—Ä—à—Ä—É—Ç ton-deposit:');
    const fs = require('fs');
    const serverIndexPath = 'server/index.ts';
    
    if (fs.existsSync(serverIndexPath)) {
      const serverContent = fs.readFileSync(serverIndexPath, 'utf8');
      const hasTonDepositRoute = serverContent.includes('ton-deposit');
      console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç ton-deposit ${hasTonDepositRoute ? '‚úì' : '‚ùå'} –Ω–∞–π–¥–µ–Ω –≤ server/index.ts`);
      
      if (hasTonDepositRoute) {
        const routes = serverContent.match(/.*ton-deposit.*/g);
        console.log('  –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
        routes?.forEach(route => console.log(`    ${route.trim()}`));
      }
    } else {
      console.log('‚ùå server/index.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log('\n5Ô∏è‚É£ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º TonDepositCard.tsx:');
    const tonDepositCardPath = 'client/src/components/wallet/TonDepositCard.tsx';
    
    if (fs.existsSync(tonDepositCardPath)) {
      const tonDepositContent = fs.readFileSync(tonDepositCardPath, 'utf8');
      const hasApiCall = tonDepositContent.includes('/api/v2/wallet/ton-deposit');
      const hasSuccessHandler = tonDepositContent.includes('data.success');
      
      console.log(`‚úÖ API –≤—ã–∑–æ–≤ ${hasApiCall ? '‚úì' : '‚ùå'} –Ω–∞–π–¥–µ–Ω`);
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—Ö–∞ ${hasSuccessHandler ? '‚úì' : '‚ùå'} –Ω–∞–π–¥–µ–Ω`);
      
      // –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫–∏ —Å fetch
      const fetchLines = tonDepositContent.split('\n').filter(line => line.includes('fetch'));
      if (fetchLines.length > 0) {
        console.log('  –ù–∞–π–¥–µ–Ω–Ω—ã–µ fetch –≤—ã–∑–æ–≤—ã:');
        fetchLines.forEach(line => console.log(`    ${line.trim()}`));
      }
    } else {
      console.log('‚ùå TonDepositCard.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }

  console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≥–¥–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è —Ü–µ–ø–æ—á–∫–∞:');
  console.log('Frontend ‚Üí POST /api/v2/wallet/ton-deposit ‚Üí Controller ‚Üí Database');
  console.log('=======================================');
}

diagnoseTonDepositIssue();