/**
 * –ú–û–ù–ò–¢–û–†–ò–ù–ì USER 25 –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function monitorUser25RealTime() {
  console.log('üì° –ú–û–ù–ò–¢–û–†–ò–ù–ì USER 25 –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò');
  console.log('='.repeat(45));
  
  const userId = 25;
  const monitoringInterval = 20000; // 20 —Å–µ–∫—É–Ω–¥
  const maxChecks = 15; // 5 –º–∏–Ω—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  
  let checksCount = 0;
  let previousBalance = null;
  let previousTonTransactionCount = 0;
  let lastTransactionId = null;
  
  console.log(`üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ User ${userId} (Telegram –∞–∫–∫–∞—É–Ω—Ç)`);
  console.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${monitoringInterval/1000} —Å–µ–∫`);
  console.log(`üéØ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: ${maxChecks}`);
  
  const monitor = setInterval(async () => {
    checksCount++;
    console.log(`\nüìä –ü–†–û–í–ï–†–ö–ê #${checksCount} (${new Date().toLocaleTimeString()})`);
    
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('balance_ton, balance_uni, last_active')
        .eq('id', userId)
        .single();
      
      if (userError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ User 25:', userError.message);
        return;
      }
      
      const currentTonBalance = parseFloat(user.balance_ton || '0');
      const currentUniBalance = parseFloat(user.balance_uni || '0');
      
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${currentTonBalance} TON, ${currentUniBalance.toFixed(2)} UNI`);
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data: tonTransactions, error: txError, count } = await supabase
        .from('transactions')
        .select('*', { count: 'exact' })
        .eq('user_id', userId)
        .eq('currency', 'TON')
        .order('created_at', { ascending: false })
        .limit(5);
      
      if (!txError) {
        console.log(`üìù –í—Å–µ–≥–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${count}`);
        
        if (count > previousTonTransactionCount) {
          console.log(`üÜï –ù–û–í–ê–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø! –ë—ã–ª–æ: ${previousTonTransactionCount}, —Å—Ç–∞–ª–æ: ${count}`);
          previousTonTransactionCount = count;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          if (tonTransactions && tonTransactions.length > 0) {
            const latestTx = tonTransactions[0];
            const txTime = new Date(latestTx.created_at);
            const secondsAgo = Math.floor((Date.now() - txTime.getTime()) / 1000);
            
            console.log(`   üìÑ –ù–û–í–ê–Ø: ID ${latestTx.id}, ${latestTx.type}, ${latestTx.amount} TON`);
            console.log(`   üìÖ –í—Ä–µ–º—è: ${txTime.toLocaleString()} (${secondsAgo} —Å–µ–∫ –Ω–∞–∑–∞–¥)`);
            console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${latestTx.description}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –¥–µ–ø–æ–∑–∏—Ç
            if (latestTx.type === 'DEPOSIT' || latestTx.description.includes('deposit') || latestTx.description.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')) {
              console.log(`   üéØ –≠–¢–û –î–ï–ü–û–ó–ò–¢! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!`);
            }
            
            lastTransactionId = latestTx.id;
          }
        } else if (tonTransactions && tonTransactions.length > 0) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          const latestTx = tonTransactions[0];
          if (latestTx.id !== lastTransactionId) {
            console.log(`   üìÑ –ü–æ—Å–ª–µ–¥–Ω—è—è: ${latestTx.type} ${latestTx.amount} TON`);
            lastTransactionId = latestTx.id;
          }
        }
      }
      
      // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
      if (previousBalance !== null) {
        const tonBalanceChange = currentTonBalance - previousBalance.ton;
        const uniBalanceChange = currentUniBalance - previousBalance.uni;
        
        if (Math.abs(tonBalanceChange) > 0.001) {
          console.log(`üîÑ TON –ë–ê–õ–ê–ù–° –ò–ó–ú–ï–ù–ò–õ–°–Ø! ${tonBalanceChange > 0 ? '+' : ''}${tonBalanceChange.toFixed(6)} TON`);
          console.log(`   –ë—ã–ª–æ: ${previousBalance.ton} TON`);
          console.log(`   –°—Ç–∞–ª–æ: ${currentTonBalance} TON`);
          
          if (tonBalanceChange > 0) {
            console.log('‚úÖ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            if (count === previousTonTransactionCount) {
              console.log('‚ö†Ô∏è –ë–ê–õ–ê–ù–° –û–ë–ù–û–í–ò–õ–°–Ø –ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò!');
              console.log('   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –∑–∞–ø–∏—Å—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
            }
          }
        }
        
        if (Math.abs(uniBalanceChange) > 1) {
          console.log(`üìà UNI –±–∞–ª–∞–Ω—Å: ${uniBalanceChange > 0 ? '+' : ''}${uniBalanceChange.toFixed(2)} UNI`);
        }
        
        if (Math.abs(tonBalanceChange) < 0.001 && Math.abs(uniBalanceChange) < 1) {
          console.log('üìä –ë–∞–ª–∞–Ω—Å—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã');
        }
      }
      
      previousBalance = {
        ton: currentTonBalance,
        uni: currentUniBalance
      };
      
      // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (user.last_active) {
        const lastActiveTime = new Date(user.last_active);
        const minutesAgo = Math.floor((Date.now() - lastActiveTime.getTime()) / 1000 / 60);
        console.log(`üë§ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`);
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ User 25:', error.message);
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
    if (checksCount >= maxChecks) {
      console.log('\nüèÅ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù');
      console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${checksCount} –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ ${(checksCount * monitoringInterval) / 1000 / 60} –º–∏–Ω—É—Ç`);
      console.log('\nüìã –ò–¢–û–ì–ò:');
      console.log('- –ï—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –ë–î - –ø—Ä–æ–±–ª–µ–º–∞ —Å backend –∑–∞–ø–∏—Å—å—é');
      console.log('- –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π');
      console.log('- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω');
      clearInterval(monitor);
    }
  }, monitoringInterval);
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  console.log('\nüìä –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø...');
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  try {
    const { data: initialUser } = await supabase
      .from('users')
      .select('balance_ton, balance_uni')
      .eq('id', userId)
      .single();
    
    const { count: initialCount } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', userId)
      .eq('currency', 'TON');
    
    if (initialUser) {
      previousBalance = {
        ton: parseFloat(initialUser.balance_ton || '0'),
        uni: parseFloat(initialUser.balance_uni || '0')
      };
      previousTonTransactionCount = initialCount || 0;
      
      console.log(`üìä –ù–∞—á–∞–ª—å–Ω—ã–π TON –±–∞–ª–∞–Ω—Å: ${previousBalance.ton} TON`);
      console.log(`üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${previousTonTransactionCount}`);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitorUser25RealTime().catch(console.error);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
process.on('SIGINT', () => {
  console.log('\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ User 25 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});