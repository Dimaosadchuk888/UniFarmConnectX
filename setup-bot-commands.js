/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞ @UniFarming_Bot
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é.
 */

const fs = require('fs');
require('dotenv').config();

const botToken = process.env.TELEGRAM_BOT_TOKEN || '';

if (!botToken) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN) –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const BOT_USERNAME = 'UniFarming_Bot';
const MINI_APP_URL = `https://t.me/${BOT_USERNAME}/UniFarm`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Telegram API
async function callTelegramApi(method, data = {}) {
  try {
    const url = `https://api.telegram.org/bot${botToken}/${method}`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    const result = await response.json();
    
    if (!result.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ${method}:`, result.description);
      return null;
    }
    
    return result.result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ${method}:`, error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
async function getBotInfo() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
  const botInfo = await callTelegramApi('getMe');
  
  if (botInfo) {
    console.log(`‚úÖ –ë–æ—Ç @${botInfo.username} (${botInfo.first_name}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω`);
  }
  
  return botInfo;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function setupBotCommands() {
  console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...');
  
  const commands = [
    {
      command: 'start',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'
    },
    {
      command: 'app',
      description: '–û—Ç–∫—Ä—ã—Ç—å UniFarm Mini App'
    },
    {
      command: 'info',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
    },
    {
      command: 'refcode',
      description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥'
    },
    {
      command: 'ping',
      description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞'
    }
  ];
  
  const result = await callTelegramApi('setMyCommands', { 
    commands: commands
  });
  
  if (result) {
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
  
  return result;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async function setupMenuButton() {
  console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±–æ—Ç–∞...');
  
  const result = await callTelegramApi('setChatMenuButton', {
    menu_button: {
      type: 'web_app',
      text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      web_app: {
        url: MINI_APP_URL
      }
    }
  });
  
  if (result !== null) {
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }
  
  return result;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
async function updateBotDescription() {
  console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞...');
  
  const description = `–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ñ–∞—Ä–º–∏–Ω–≥–µ $UNI –∏ $TON\n–ó–∞–ø—É—Å–∫: ${MINI_APP_URL}`;
  
  const result = await callTelegramApi('setMyDescription', {
    description: description
  });
  
  if (result) {
    console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
  }
  
  return result;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –≤ —Ñ–∞–π–ª–µ telegramBot.js –∏–ª–∏ telegramBot.ts
async function updateStartCommandHandler() {
  console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start...');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const jsFilePath = './server/telegramBot.js';
  const tsFilePath = './server/telegramBot.ts';
  
  let filePath = '';
  let fileContent = '';
  
  if (fs.existsSync(jsFilePath)) {
    filePath = jsFilePath;
    fileContent = fs.readFileSync(jsFilePath, 'utf8');
  } else if (fs.existsSync(tsFilePath)) {
    filePath = tsFilePath;
    fileContent = fs.readFileSync(tsFilePath, 'utf8');
  } else {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª telegramBot.js –∏–ª–∏ telegramBot.ts');
    return false;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  const newStartHandler = filePath.endsWith('.ts') ? 
    `async function handleStartCommand(chatId: number, { userId, username, firstName }: { userId: number, username?: string, firstName?: string }): Promise<any> {
  const welcomeText = \`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm!
  
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ñ–∞—Ä–º–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.

–ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App: ${MINI_APP_URL}\`;

  return sendMessage(chatId, welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "${MINI_APP_URL}" } }]
      ]
    },
    parse_mode: "Markdown"
  });
}` :
    `async function handleStartCommand(chatId, { userId, username, firstName }) {
  const welcomeText = \`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm!
  
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ñ–∞—Ä–º–∏–Ω–≥–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.

–ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App: ${MINI_APP_URL}\`;

  return sendMessage(chatId, welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "${MINI_APP_URL}" } }]
      ]
    },
    parse_mode: "Markdown"
  });
}`;

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app
  const newAppHandler = filePath.endsWith('.ts') ? 
    `async function handleAppCommand(chatId: number): Promise<any> {
  const appText = \`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Mini App: ${MINI_APP_URL}\`;

  return sendMessage(chatId, appText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "${MINI_APP_URL}" } }]
      ]
    }
  });
}` :
    `async function handleAppCommand(chatId) {
  const appText = \`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Mini App: ${MINI_APP_URL}\`;

  return sendMessage(chatId, appText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: "${MINI_APP_URL}" } }]
      ]
    }
  });
}`;
  
  // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è handleStartCommand —É–∂–µ –µ—Å—Ç—å, –∑–∞–º–µ–Ω—è–µ–º –µ—ë
  let updatedContent = fileContent;
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleStartCommand
  if (fileContent.includes('function handleStartCommand')) {
    const startRegex = filePath.endsWith('.ts') ?
      /async function handleStartCommand\(chatId: number,.*?\): Promise<any> {[\s\S]*?}/m :
      /async function handleStartCommand\(chatId,.*?\) {[\s\S]*?}/m;
    
    updatedContent = updatedContent.replace(startRegex, newStartHandler);
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleAppCommand
  if (fileContent.includes('function handleAppCommand')) {
    const appRegex = filePath.endsWith('.ts') ?
      /async function handleAppCommand\(chatId: number\): Promise<any> {[\s\S]*?}/m :
      /async function handleAppCommand\(chatId\) {[\s\S]*?}/m;
    
    updatedContent = updatedContent.replace(appRegex, newAppHandler);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleAppCommand –ø–æ—Å–ª–µ handleStartCommand
    updatedContent = updatedContent.replace(newStartHandler, `${newStartHandler}\n\n${newAppHandler}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥ –µ—Å—Ç—å case –¥–ª—è /app
  if (!fileContent.includes("case '/app':")) {
    // –ò—â–µ–º –±–ª–æ–∫ switch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    const switchCaseRegex = /switch\s*\(\s*command\s*\)\s*{[\s\S]*?}/m;
    let switchCaseMatch = updatedContent.match(switchCaseRegex);
    
    if (switchCaseMatch) {
      const switchCaseBlock = switchCaseMatch[0];
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /app –ø–µ—Ä–µ–¥ default –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
      const newSwitchCase = switchCaseBlock.includes('default:') ?
        switchCaseBlock.replace(/default:/, `case '/app':\n        return handleAppCommand(chatId);\n\n      default:`) :
        switchCaseBlock.replace(/}$/, `      case '/app':\n        return handleAppCommand(chatId);\n}`);
      
      updatedContent = updatedContent.replace(switchCaseBlock, newSwitchCase);
    }
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(filePath, updatedContent, 'utf8');
  console.log(`‚úÖ –§–∞–π–ª ${filePath} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
  
  return true;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ @UniFarming_Bot...');
  console.log(`üëâ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: ${MINI_APP_URL}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
  const botInfo = await getBotInfo();
  if (!botInfo) return;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  await setupBotCommands();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
  await setupMenuButton();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
  await updateBotDescription();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  await updateStartCommandHandler();
  
  console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`‚úÖ Mini App URL: ${MINI_APP_URL}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
  console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
});