/**
 * –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò TON BOOST - 25 –∏—é–ª—è 2025
 * –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –ø–æ—á–µ–º—É –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç ton_farming_data –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function deepActivationCodeAnalysis() {
    console.log('\nüî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ê–ö–¢–ò–í–ê–¶–ò–ò TON BOOST');
    console.log('=' .repeat(70));
    
    try {
        // –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ vs –∑–∞–ø–∏—Å–µ–π ton_farming_data
        console.log('\nüìä –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ü–û–ö–£–ü–û–ö VS –ó–ê–ü–ò–°–ï–ô');
        console.log('-' .repeat(50));
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ TON Boost
        const { data: recentPurchases, error: purchasesError } = await supabase
            .from('transactions')
            .select(`
                user_id,
                type,
                amount,
                description,
                status,
                created_at,
                metadata
            `)
            .or('type.eq.BOOST_PURCHASE,description.ilike.%TON Boost%')
            .order('created_at', { ascending: false })
            .limit(10);

        if (purchasesError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...');
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            const { data: altPurchases, error: altError } = await supabase
                .from('transactions')
                .select('user_id, type, amount, description, status, created_at')
                .eq('type', 'BOOST_PURCHASE')
                .order('created_at', { ascending: false })
                .limit(10);
                
            if (altError) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏:', altError.message);
            } else {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${altPurchases?.length || 0} –ø–æ–∫—É–ø–æ–∫ BOOST_PURCHASE`);
                
                for (const purchase of altPurchases || []) {
                    console.log(`   üõí User ${purchase.user_id}: ${purchase.amount} TON (${new Date(purchase.created_at).toLocaleString('ru-RU')})`);
                }
            }
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentPurchases?.length || 0} –ø–æ–∫—É–ø–æ–∫ TON Boost`);
            
            for (const purchase of recentPurchases || []) {
                console.log(`   üõí User ${purchase.user_id}: ${purchase.amount} TON`);
                console.log(`      Type: ${purchase.type}, Status: ${purchase.status}`);
                console.log(`      Time: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
                console.log(`      Description: ${purchase.description}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ farming –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { data: farmingRecord } = await supabase
                    .from('ton_farming_data')
                    .select('user_id, farming_balance, created_at')
                    .eq('user_id', purchase.user_id.toString())
                    .single();
                    
                if (farmingRecord) {
                    console.log(`      ‚úÖ Farming –∑–∞–ø–∏—Å—å –ù–ê–ô–î–ï–ù–ê: ${farmingRecord.farming_balance} TON`);
                    console.log(`         –°–æ–∑–¥–∞–Ω–∞: ${new Date(farmingRecord.created_at).toLocaleString('ru-RU')}`);
                } else {
                    console.log(`      ‚ùå Farming –∑–∞–ø–∏—Å—å –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –ü–†–û–ë–õ–ï–ú–ê!`);
                }
                console.log('');
            }
        }

        // –®–ê–ì 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ ton_farming_data
        console.log('\nüìä –®–ê–ì 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ò TON_FARMING_DATA');
        console.log('-' .repeat(50));
        
        const testUserId = '999999'; // –¢–µ—Å—Ç–æ–≤—ã–π ID
        const testData = {
            user_id: testUserId,
            boost_active: true,
            boost_package_id: 1,
            farming_rate: '0.01',
            farming_balance: '1',
            boost_expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
            farming_start_timestamp: new Date().toISOString(),
            farming_last_update: new Date().toISOString(),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
        
        console.log('üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
        console.log(`   User ID: ${testUserId}`);
        console.log(`   Data:`, testData);
        
        const { data: testResult, error: testError } = await supabase
            .from('ton_farming_data')
            .upsert(testData, { onConflict: 'user_id' })
            .select();
            
        if (testError) {
            console.log(`‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:`, testError);
            console.log(`   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${testError.code}`);
            console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${testError.message}`);
            console.log(`   –î–µ—Ç–∞–ª–∏: ${testError.details}`);
        } else {
            console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –£–°–ü–ï–®–ù–û —Å–æ–∑–¥–∞–Ω–∞:`, testResult);
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await supabase
                .from('ton_farming_data')
                .delete()
                .eq('user_id', testUserId);
            console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
        }

        // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã ton_farming_data
        console.log('\nüìä –®–ê–ì 3: –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –¢–ê–ë–õ–ò–¶–´ TON_FARMING_DATA');
        console.log('-' .repeat(50));
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
        const { data: sampleRecord, error: sampleError } = await supabase
            .from('ton_farming_data')
            .select('*')
            .limit(1)
            .single();
            
        if (sampleError) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞ –∑–∞–ø–∏—Å–∏:`, sampleError);
        } else {
            console.log('‚úÖ –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã ton_farming_data (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è):');
            const fields = Object.keys(sampleRecord);
            fields.forEach(field => {
                console.log(`   - ${field}: ${typeof sampleRecord[field]} = ${sampleRecord[field]}`);
            });
        }

        // –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ TonFarmingRepository –º–µ—Ç–æ–¥–∞ activateBoost
        console.log('\nüìä –®–ê–ì 4: –ê–ù–ê–õ–ò–ó LOG–û–í TONFARMING REPOSITORY');
        console.log('-' .repeat(50));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è TonFarmingRepository
        console.log('üîç –ò—â–µ–º –æ—à–∏–±–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const { data: recentUsers, error: recentError } = await supabase
            .from('users')
            .select('id, ton_boost_package, updated_at')
            .gt('ton_boost_package', 0)
            .order('updated_at', { ascending: false })
            .limit(5);
            
        if (recentError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', recentError);
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:`);
            
            for (const user of recentUsers || []) {
                console.log(`   üë§ User ${user.id}:`);
                console.log(`      TON Boost Package: ${user.ton_boost_package}`);
                console.log(`      Updated: ${new Date(user.updated_at).toLocaleString('ru-RU')}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ ton_farming_data
                const { data: correspondingRecord } = await supabase
                    .from('ton_farming_data')
                    .select('created_at, updated_at, farming_balance')
                    .eq('user_id', user.id.toString())
                    .single();
                    
                if (correspondingRecord) {
                    const userUpdate = new Date(user.updated_at).getTime();
                    const farmingCreate = new Date(correspondingRecord.created_at).getTime();
                    const timeDiff = Math.abs(userUpdate - farmingCreate) / 1000 / 60; // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
                    
                    console.log(`      ‚úÖ Farming –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`);
                    console.log(`         –°–æ–∑–¥–∞–Ω–∞: ${new Date(correspondingRecord.created_at).toLocaleString('ru-RU')}`);
                    console.log(`         –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiff.toFixed(1)} –º–∏–Ω—É—Ç`);
                    
                    if (timeDiff > 60) {
                        console.log(`         ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –†–ê–ó–ù–ò–¶–ê –í–û –í–†–ï–ú–ï–ù–ò - –≤–æ–∑–º–æ–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                    }
                } else {
                    console.log(`      ‚ùå Farming –∑–∞–ø–∏—Å—å –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!`);
                }
            }
        }

        // –®–ê–ì 5: –ü–æ–∏—Å–∫ failed upsert –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log('\nüìä –®–ê–ì 5: –°–ò–ú–£–õ–Ø–¶–ò–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô');
        console.log('-' .repeat(50));
        
        console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å activateBoost –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ boost –ø–∞–∫–µ—Ç–∞
        const { data: boostPackages, error: packageError } = await supabase
            .from('boost_packages')
            .select('*')
            .eq('id', 1)
            .single();
            
        if (packageError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost –ø–∞–∫–µ—Ç–∞:', packageError);
        } else {
            console.log('‚úÖ Boost –ø–∞–∫–µ—Ç ID 1 –Ω–∞–π–¥–µ–Ω:');
            console.log(`   Name: ${boostPackages.name}`);
            console.log(`   Min Amount: ${boostPackages.min_amount}`);
            console.log(`   Daily Rate: ${boostPackages.daily_rate}`);
            console.log(`   Duration: ${boostPackages.duration_days} –¥–Ω–µ–π`);
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ activateBoost
            const simulatedUserId = '184'; // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const simulatedPackageId = 1;
            const simulatedRate = boostPackages.daily_rate;
            const simulatedExpiresAt = new Date(Date.now() + boostPackages.duration_days * 24 * 60 * 60 * 1000).toISOString();
            const simulatedDepositAmount = boostPackages.min_amount;
            
            console.log('\nüîß –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–ú–£–õ–ò–†–û–í–ê–ù–ù–û–ô –ê–ö–¢–ò–í–ê–¶–ò–ò:');
            console.log(`   userId: "${simulatedUserId}" (${typeof simulatedUserId})`);
            console.log(`   packageId: ${simulatedPackageId} (${typeof simulatedPackageId})`);
            console.log(`   rate: ${simulatedRate} (${typeof simulatedRate})`);
            console.log(`   expiresAt: ${simulatedExpiresAt}`);
            console.log(`   depositAmount: ${simulatedDepositAmount} (${typeof simulatedDepositAmount})`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: existingRecord } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', simulatedUserId)
                .single();
                
            if (existingRecord) {
                console.log('\nüìã –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –ó–ê–ü–ò–°–¨:');
                console.log(`   farming_balance: ${existingRecord.farming_balance}`);
                console.log(`   farming_rate: ${existingRecord.farming_rate}`);
                console.log(`   boost_package_id: ${existingRecord.boost_package_id}`);
                console.log(`   created_at: ${new Date(existingRecord.created_at).toLocaleString('ru-RU')}`);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∫ –≤ –∫–æ–¥–µ
                const currentBalance = parseFloat(existingRecord.farming_balance) || 0;
                const depositToAdd = simulatedDepositAmount || 0;
                const newBalance = currentBalance + depositToAdd;
                
                console.log('\nüßÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:');
                console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance}`);
                console.log(`   –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç: ${depositToAdd}`);
                console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
            } else {
                console.log('\n‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏');
            }
        }

        console.log('\nüìà –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê:');
        console.log('=' .repeat(70));
        console.log('1. üîç –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å—Ö–µ–º—É ton_farming_data - —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
        console.log('2. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –æ–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞');
        console.log('3. üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ vs –∑–∞–ø–∏—Å–∏');
        console.log('4. üîß –°–∏–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å activateBoost');
        console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ TonFarmingRepository –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
deepActivationCodeAnalysis().then(() => {
    console.log('\n‚úÖ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});