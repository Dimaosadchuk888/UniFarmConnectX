/**
 * –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–û–í
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
 */

const https = require('https');

const CYAN = '\x1b[36m';
const GREEN = '\x1b[32m';
const YELLOW = '\x1b[33m';
const RED = '\x1b[31m';
const RESET = '\x1b[0m';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_CONFIG = {
  baseUrl: 'https://uni-farm-connect-x-w81846064.replit.app',
  jwtToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWxlZ3JhbV9pZCI6IjE4NCIsInVzZXJuYW1lIjoiRGltYU9zYWRjaHVrIiwicmVmX2NvZGUiOiJVU0VSMTM1IiwiaWF0IjoxNzUzMTgzNzk0LCJleHAiOjE3NTM3ODg1OTR9.dFnGo6p8z7I4m6aBKLY4-qGmP_LkgjP9qmrOjjNT2jA',
  testTxHash: `final_test_${Date.now()}`,
  testAmount: 3.0,
  walletAddress: 'UQFinalTestWallet...Example'
};

console.log(`${CYAN}üß™ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò TON –î–ï–ü–û–ó–ò–¢–û–í${RESET}`);
console.log('='.repeat(80));

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, TEST_CONFIG.baseUrl);
    const options = {
      hostname: url.hostname,
      port: 443,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Authorization': `Bearer ${TEST_CONFIG.jwtToken}`,
        'Content-Type': 'application/json'
      }
    };

    if (data) {
      data = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(data);
    }

    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonBody = JSON.parse(body);
          resolve({ status: res.statusCode, body: jsonBody });
        } catch (e) {
          resolve({ status: res.statusCode, body: body });
        }
      });
    });

    req.on('error', reject);
    if (data) req.write(data);
    req.end();
  });
}

async function runFullChainTest() {
  console.log(`${YELLOW}üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –¶–ï–ü–û–ß–ö–ò:${RESET}`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    console.log('\n1. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    const balanceBefore = await makeRequest('/api/v2/wallet/balance?user_id=184');
    
    if (balanceBefore.status === 200) {
      console.log(`   ‚úÖ –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${balanceBefore.body.data.tonBalance}`);
      console.log(`   ‚úÖ –¢–µ–∫—É—â–∏–π UNI –±–∞–ª–∞–Ω—Å: ${balanceBefore.body.data.uniBalance}`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceBefore.status}`);
      return;
    }

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TON –¥–µ–ø–æ–∑–∏—Ç
    console.log('\n2. üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ...');
    const depositResult = await makeRequest('/api/v2/wallet/ton-deposit', 'POST', {
      ton_tx_hash: TEST_CONFIG.testTxHash,
      amount: TEST_CONFIG.testAmount,
      wallet_address: TEST_CONFIG.walletAddress
    });

    console.log(`   üì° HTTP Status: ${depositResult.status}`);
    
    if (depositResult.status === 200) {
      console.log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`);
      console.log(`   üìù Transaction ID: ${depositResult.body.transaction_id}`);
      console.log(`   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UnifiedTransactionService: ${depositResult.body.success === true ? '–î–ê' : '–ù–ï–¢'}`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${JSON.stringify(depositResult.body)}`);
      return;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    console.log('\n3. üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    const balanceAfter = await makeRequest('/api/v2/wallet/balance?user_id=184');
    
    if (balanceAfter.status === 200) {
      const oldBalance = parseFloat(balanceBefore.body.data.tonBalance);
      const newBalance = parseFloat(balanceAfter.body.data.tonBalance);
      const expectedBalance = oldBalance + TEST_CONFIG.testAmount;
      
      console.log(`   üìä –ë–∞–ª–∞–Ω—Å –¥–æ: ${oldBalance} TON`);
      console.log(`   üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${newBalance} TON`);
      console.log(`   üìä –û–∂–∏–¥–∞–µ–º—ã–π: ${expectedBalance} TON`);
      
      if (Math.abs(newBalance - expectedBalance) < 0.001) {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ BalanceManager!`);
      } else {
        console.log(`   ‚ùå –ë–∞–ª–∞–Ω—Å –ù–ï –æ–±–Ω–æ–≤–∏–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    console.log('\n4. üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...');
    const duplicateResult = await makeRequest('/api/v2/wallet/ton-deposit', 'POST', {
      ton_tx_hash: TEST_CONFIG.testTxHash, // –¢–æ—Ç –∂–µ hash
      amount: TEST_CONFIG.testAmount,
      wallet_address: TEST_CONFIG.walletAddress
    });

    if (duplicateResult.status === 200 && duplicateResult.body.success === false) {
      console.log(`   ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${duplicateResult.body.error}`);
    } else {
      console.log(`   ‚ùå –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(duplicateResult.body)}`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n5. üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const historyResult = await makeRequest('/api/v2/transactions?page=1&limit=5');
    
    if (historyResult.status === 200) {
      const transactions = historyResult.body.data.transactions;
      const ourTransaction = transactions.find(t => 
        t.description && t.description.includes(TEST_CONFIG.testTxHash)
      );
      
      if (ourTransaction) {
        console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏:`);
        console.log(`      ID: ${ourTransaction.id}`);
        console.log(`      Type: ${ourTransaction.type}`);
        console.log(`      Amount: ${ourTransaction.amount} ${ourTransaction.currency}`);
        console.log(`      Status: ${ourTransaction.status}`);
      } else {
        console.log(`   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
      }
    }

    console.log(`\n${GREEN}üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:${RESET}`);
    console.log('‚úÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ UnifiedTransactionService');
    console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ metadata.tx_hash');
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ BalanceManager');
    console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –î–ï–ü–õ–û–Æ!');

  } catch (error) {
    console.log(`${RED}‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}${RESET}`);
  }
}

runFullChainTest();