import { supabase } from './core/supabase.js';

async function verifyBoostPurchaseType() {
  console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–ò–ü–ê BOOST_PURCHASE\n');
  console.log('='*60 + '\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Ç–∏–ø–æ–º BOOST_PURCHASE
  console.log('1Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° –¢–ò–ü–û–ú BOOST_PURCHASE:\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { data, error } = await supabase
      .from('transactions')
      .insert({
        user_id: 74, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        type: 'BOOST_PURCHASE',
        amount: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'Test BOOST_PURCHASE transaction',
        metadata: {
          test: true,
          created_at: new Date().toISOString()
        }
      })
      .select()
      .single();
      
    if (error) {
      if (error.message.includes('invalid input value for enum')) {
        console.log('‚ùå BOOST_PURCHASE –ù–ï –î–û–ë–ê–í–õ–ï–ù –≤ enum');
        console.log('–û—à–∏–±–∫–∞:', error.message);
      } else {
        console.log('‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
      }
    } else {
      console.log('‚úÖ BOOST_PURCHASE –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!');
      console.log('–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
        id: data.id,
        type: data.type,
        amount: data.amount
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { error: deleteError } = await supabase
        .from('transactions')
        .delete()
        .eq('id', data.id);
        
      if (!deleteError) {
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
      }
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('\n' + '='*60);
  console.log('\n2Ô∏è‚É£ –í–°–ï –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ë–î:\n');
  
  const { data: allTypes } = await supabase
    .from('transactions')
    .select('type')
    .limit(10000);
    
  const uniqueTypes = new Set<string>();
  allTypes?.forEach(t => {
    if (t.type) uniqueTypes.add(t.type);
  });
  
  const sortedTypes = Array.from(uniqueTypes).sort();
  console.log('–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤:', sortedTypes.length);
  sortedTypes.forEach(type => {
    console.log(`- ${type}`);
  });
  
  // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  console.log('\n' + '='*60);
  console.log('\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:\n');
  
  const typesToCheck = [
    'FARMING_REWARD',
    'FARMING_DEPOSIT',
    'REFERRAL_REWARD',
    'MISSION_REWARD',
    'DAILY_BONUS',
    'BOOST_PURCHASE'
  ];
  
  for (const type of typesToCheck) {
    const { count } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .eq('type', type);
      
    const exists = uniqueTypes.has(type);
    console.log(`${type}: ${count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ${exists ? '‚úÖ' : '‚ùå'}`);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata —Å original_type BOOST_PURCHASE
  console.log('\n' + '='*60);
  console.log('\n4Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° metadata.original_type = BOOST_PURCHASE:\n');
  
  const { data: boostTransactions, count: boostCount } = await supabase
    .from('transactions')
    .select('*', { count: 'exact' })
    .eq('metadata->>original_type', 'BOOST_PURCHASE')
    .order('created_at', { ascending: false })
    .limit(5);
    
  if (boostCount && boostCount > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${boostCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å original_type: BOOST_PURCHASE`);
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    boostTransactions?.forEach(tx => {
      console.log(`- ID: ${tx.id}, type: ${tx.type}, amount: ${tx.amount} ${tx.currency}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
    });
  } else {
    console.log('–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å metadata.original_type = BOOST_PURCHASE');
  }
  
  // 5. –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  console.log('\n' + '='*60);
  console.log('\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:\n');
  
  const boostPurchaseExists = uniqueTypes.has('BOOST_PURCHASE');
  
  if (boostPurchaseExists) {
    console.log('‚úÖ –¢–ò–ü BOOST_PURCHASE –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù –í –ë–î!');
    console.log('\nüéØ –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è:');
    console.log('- –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ TON Boost –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø BOOST_PURCHASE');
    console.log('- –°—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å —Ç–∏–ø–æ–º FARMING_REWARD');
    console.log('- –£–ª—É—á—à–∏—Ç—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('- –£–ø—Ä–æ—Å—Ç–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å');
  } else {
    console.log('‚ùå –¢–ò–ü BOOST_PURCHASE –ï–©–Å –ù–ï –î–û–ë–ê–í–õ–ï–ù');
    console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- SQL —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    console.log('- –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ALTER TYPE');
    console.log('- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Supabase');
  }
}

verifyBoostPurchaseType();