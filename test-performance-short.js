/**
 * –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Neon Database
 */

import { Pool } from 'pg';
import { performance } from 'perf_hooks';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
  connectionTimeoutMillis: 10000
});

// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
async function measureQuery(name, query, params = []) {
  const start = performance.now();
  try {
    const result = await pool.query(query, params);
    const end = performance.now();
    const duration = (end - start).toFixed(2);
    console.log(`‚úÖ ${name}: ${duration} –º—Å`);
    return { success: true, duration, rowCount: result.rowCount };
  } catch (error) {
    const end = performance.now();
    const duration = (end - start).toFixed(2);
    console.error(`‚ùå ${name}: ${duration} –º—Å - –û—à–∏–±–∫–∞: ${error.message}`);
    return { success: false, duration, error };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Neon Database');
  console.log('=======================================================');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    await measureQuery('–ü—Ä–æ—Å—Ç–æ–π SELECT 1', 'SELECT 1 as value');
    
    // –¢–µ—Å—Ç 2: –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await measureQuery('–ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'SELECT COUNT(*) FROM users');
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await measureQuery('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'SELECT * FROM users');
    
    // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –ø–æ ID (–æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä—ã–π)
    await measureQuery('–ü–æ–∏—Å–∫ –ø–æ ID', 'SELECT * FROM users WHERE id = $1', [1]);
    
    // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—é
    await measureQuery('–ü–æ–∏—Å–∫ –ø–æ username', "SELECT * FROM users WHERE username = $1", ['test_user']);
    
    // –¢–µ—Å—Ç 6: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await measureQuery('–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏', `
      SELECT 
        username, 
        balance_uni, 
        balance_ton,
        (balance_uni / 100) as average,
        created_at,
        EXTRACT(DAY FROM created_at) as day
      FROM users
      ORDER BY balance_uni DESC
    `);
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüìä –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)');
    const parallelStart = performance.now();
    
    await Promise.all([
      pool.query('SELECT * FROM users WHERE id = $1', [1]),
      pool.query('SELECT * FROM users WHERE id = $1', [2]),
      pool.query('SELECT * FROM users WHERE id = $1', [3]),
      pool.query('SELECT COUNT(*) FROM users'),
      pool.query('SELECT current_timestamp')
    ]);
    
    const parallelEnd = performance.now();
    const parallelDuration = (parallelEnd - parallelStart).toFixed(2);
    console.log(`‚úÖ 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${parallelDuration} –º—Å`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    const dbSizeResult = await pool.query(`
      SELECT 
        pg_size_pretty(pg_database_size(current_database())) as db_size
    `);
    
    console.log(`–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbSizeResult.rows[0].db_size}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü');
    const tableStats = await pool.query(`
      SELECT 
        relname as table_name, 
        n_live_tup as row_count,
        pg_size_pretty(pg_relation_size(quote_ident(relname))) as table_size
      FROM pg_stat_user_tables
      ORDER BY n_live_tup DESC
      LIMIT 5
    `);
    
    console.log('–¢–æ–ø-5 —Ç–∞–±–ª–∏—Ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫:');
    tableStats.rows.forEach((row, i) => {
      console.log(`${i+1}. ${row.table_name}: ${row.row_count} —Å—Ç—Ä–æ–∫, —Ä–∞–∑–º–µ—Ä: ${row.table_size}`);
    });
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await pool.end();
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

runTests().catch(console.error);