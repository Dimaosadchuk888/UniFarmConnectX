/**
 * –ü–†–û–í–ï–†–ö–ê –•–ï–®–ï–ô –ù–ï–î–ê–í–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í User ID 25
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –ª–∏ tx_hash –≤ metadata –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
 */

import { supabase } from './core/supabaseClient';

async function checkRecentDepositsHashes() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –•–ï–®–ï–ô –ù–ï–î–ê–í–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í User ID 25');
  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ tx_hash –≤ metadata');
  console.log('='.repeat(80));

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User ID 25
    const { data: recentDeposits, error: depositsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'completed')
      .order('created_at', { ascending: false })
      .limit(10);

    if (depositsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsError);
      return;
    }

    if (!recentDeposits || recentDeposits.length === 0) {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentDeposits.length} –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User ID 25:`);
    console.log('');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç
    for (let i = 0; i < recentDeposits.length; i++) {
      const deposit = recentDeposits[i];
      const timeAgo = new Date(Date.now() - new Date(deposit.created_at).getTime()).getMinutes();
      
      console.log(`${i + 1}. –î–µ–ø–æ–∑–∏—Ç ID ${deposit.id}`);
      console.log(`   –í—Ä–µ–º—è: ${deposit.created_at} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
      console.log(`   –°—É–º–º–∞: ${deposit.amount_ton} TON`);
      console.log(`   –í–∞–ª—é—Ç–∞: ${deposit.currency}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${deposit.status}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
      if (deposit.metadata) {
        console.log('   ‚úÖ Metadata –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:');
        
        const metadata = deposit.metadata;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º tx_hash
        if (metadata.tx_hash) {
          console.log(`   ‚úÖ tx_hash: ${metadata.tx_hash}`);
        } else {
          console.log('   ‚ùå tx_hash –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_tx_hash
        if (metadata.ton_tx_hash) {
          console.log(`   ‚úÖ ton_tx_hash: ${metadata.ton_tx_hash}`);
        } else {
          console.log('   ‚ùå ton_tx_hash –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º hash_extracted
        if (metadata.hash_extracted !== undefined) {
          console.log(`   ‚úÖ hash_extracted: ${metadata.hash_extracted}`);
        } else {
          console.log('   ‚ùå hash_extracted –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º original_boc
        if (metadata.original_boc) {
          console.log(`   ‚úÖ original_boc: ${metadata.original_boc.substring(0, 50)}...`);
        } else {
          console.log('   ‚ùå original_boc –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º wallet_address
        if (metadata.wallet_address) {
          console.log(`   ‚úÖ wallet_address: ${metadata.wallet_address}`);
        } else {
          console.log('   ‚ùå wallet_address –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º source
        if (metadata.source) {
          console.log(`   ‚úÖ source: ${metadata.source}`);
        } else {
          console.log('   ‚ùå source –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π metadata –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        console.log('   üìÑ –ü–æ–ª–Ω—ã–π metadata:');
        console.log('   ' + JSON.stringify(metadata, null, 6).replace(/\n/g, '\n   '));
        
      } else {
        console.log('   ‚ùå Metadata –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–°–£–¢–°–¢–í–£–ï–¢!');
      }
      
      console.log('');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
    const veryRecentDeposits = recentDeposits.filter(d => 
      new Date(d.created_at) > thirtyMinutesAgo
    );
    
    if (veryRecentDeposits.length > 0) {
      console.log('üïê –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 30 –ú–ò–ù–£–¢:');
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${veryRecentDeposits.length} –æ—á–µ–Ω—å –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      
      for (const deposit of veryRecentDeposits) {
        const hasHash = deposit.metadata?.tx_hash || deposit.metadata?.ton_tx_hash;
        const hashStatus = hasHash ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢';
        const hashValue = deposit.metadata?.tx_hash || deposit.metadata?.ton_tx_hash || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        
        console.log(`- ID ${deposit.id}: ${hashStatus} hash (${hashValue})`);
      }
    } else {
      console.log('‚ÑπÔ∏è –î–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö–µ—à–∞–º
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –•–ï–®–ê–ú:');
    
    const withTxHash = recentDeposits.filter(d => d.metadata?.tx_hash).length;
    const withTonTxHash = recentDeposits.filter(d => d.metadata?.ton_tx_hash).length;
    const withAnyHash = recentDeposits.filter(d => 
      d.metadata?.tx_hash || d.metadata?.ton_tx_hash
    ).length;
    const withMetadata = recentDeposits.filter(d => d.metadata).length;
    
    console.log(`–í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${recentDeposits.length}`);
    console.log(`–° metadata: ${withMetadata}`);
    console.log(`–° tx_hash: ${withTxHash}`);
    console.log(`–° ton_tx_hash: ${withTonTxHash}`);
    console.log(`–° –ª—é–±—ã–º hash: ${withAnyHash}`);
    console.log(`–ë–µ–∑ hash: ${recentDeposits.length - withAnyHash}`);
    
    if (withAnyHash < recentDeposits.length) {
      console.log('\nüö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –µ—Å—Ç—å —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!');
      console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π —Ç–æ–≥–æ, —á—Ç–æ —Ö–µ—à–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.');
    } else {
      console.log('\n‚úÖ –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkRecentDepositsHashes().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});