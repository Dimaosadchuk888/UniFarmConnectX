/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL
 */

import pg from 'pg';
const { Pool } = pg;

async function runSecureQuery() {
  console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionConfig = {
    ssl: {
      rejectUnauthorized: false
    }
  };
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
  if (process.env.DATABASE_URL) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    connectionConfig.connectionString = process.env.DATABASE_URL;
  } else {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Replit');
  }
  
  const pool = new Pool(connectionConfig);
  
  try {
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ö–µ–º—ã
    console.log('\nüìä –ó–∞–ø—Ä–æ—Å 1: SELECT current_database(), current_schema()');
    const dbInfoResult = await pool.query('SELECT current_database() as db, current_schema() as schema');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbInfoResult.rows[0].db}`);
    console.log(`–°—Ö–µ–º–∞: ${dbInfoResult.rows[0].schema}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users');
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      ) as exists
    `);
    
    if (tableCheck.rows[0].exists) {
      // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\nüìä –ó–∞–ø—Ä–æ—Å 2: SELECT * FROM users ORDER BY id DESC LIMIT 10');
      const usersResult = await pool.query('SELECT * FROM users ORDER BY id DESC LIMIT 10');
      
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫):', usersResult.rows.length);
      
      if (usersResult.rows.length > 0) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        usersResult.rows.forEach((user, index) => {
          console.log(`\n--- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1} ---`);
          for (const [key, value] of Object.entries(user)) {
            if (key === 'password' || key === 'password_hash') {
              console.log(`${key}: [–°–ö–†–´–¢–û]`);
            } else {
              console.log(`${key}: ${value}`);
            }
          }
        });
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  } finally {
    await pool.end();
    console.log('\nüîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫
runSecureQuery().catch(err => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});