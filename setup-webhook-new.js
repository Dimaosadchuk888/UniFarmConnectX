/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook Telegram –±–æ—Ç–∞
 * - –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π webhook
 * - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π webhook —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ production, —Ç–∞–∫ –∏ development –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

const fetch = require('node-fetch');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

// –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è URL Replit –ø—Ä–æ–µ–∫—Ç–∞
// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ngrok –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç—É–Ω–Ω–µ–ª–∏
const isProd = process.env.NODE_ENV === 'production';
const BASE_URL = isProd 
  ? 'https://uni-farm-connect-2-misterxuniverse.replit.app'
  : process.env.WEBHOOK_URL || 'https://your-local-tunnel-url.ngrok.io';

// –ü—É—Ç—å –∫ API –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
const WEBHOOK_PATH = '/api/telegram/webhook';
const WEBHOOK_URL = `${BASE_URL}${WEBHOOK_PATH}`;

// –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞');
console.log(`üìå –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${isProd ? 'Production' : 'Development'}`);
console.log(`üìå –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
console.log(`üìå URL webhook: ${WEBHOOK_URL}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
  process.exit(1);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Telegram API
async function callTelegramApi(method, data = {}) {
  try {
    const response = await fetch(`${API_URL}/${method}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    return await response.json();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ ${method}:`, error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
async function getBotInfo() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
  const result = await callTelegramApi('getMe');
  
  if (!result || !result.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    process.exit(1);
  }
  
  console.log(`‚úÖ –ë–æ—Ç @${result.result.username} (ID: ${result.result.id}) –Ω–∞–π–¥–µ–Ω`);
  return result.result;
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook
async function deleteWebhook() {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...');
  const result = await callTelegramApi('deleteWebhook', { drop_pending_updates: true });
  
  if (!result || !result.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    return false;
  }
  
  console.log('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
  return true;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ webhook
async function setWebhook() {
  console.log(`üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ webhook –Ω–∞ URL: ${WEBHOOK_URL}`);
  
  const result = await callTelegramApi('setWebhook', {
    url: WEBHOOK_URL,
    allowed_updates: ['message', 'callback_query', 'inline_query', 'my_chat_member'],
    drop_pending_updates: true,
    max_connections: 40
  });
  
  if (!result || !result.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    return false;
  }
  
  console.log('‚úÖ –ù–æ–≤—ã–π webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  return true;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
async function getWebhookInfo() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook...');
  const result = await callTelegramApi('getWebhookInfo');
  
  if (!result || !result.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    return null;
  }
  
  console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
  console.log(JSON.stringify(result.result, null, 2));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook
  if (result.result.url === WEBHOOK_URL) {
    console.log('‚úÖ Webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL');
  } else if (result.result.url) {
    console.warn(`‚ö†Ô∏è Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π URL: ${result.result.url}`);
  } else {
    console.warn('‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
  
  return result.result;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async function main() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await getBotInfo();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const oldWebhookInfo = await getWebhookInfo();
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    await deleteWebhook();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    const success = await setWebhook();
    
    if (success) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
      const newWebhookInfo = await getWebhookInfo();
      
      console.log(`\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è @${botInfo.username} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
      
      if (newWebhookInfo && newWebhookInfo.pending_update_count > 0) {
        console.log(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í –æ—á–µ—Ä–µ–¥–∏ ${newWebhookInfo.pending_update_count} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
      }
    } else {
      console.error('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫');
    }
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();