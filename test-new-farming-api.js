/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ (–Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏)
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
 * 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
 * 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
 * 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 * 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
 */

import fetch from 'node-fetch';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'https://93cb0060-75d7-4281-ac65-b204cda864a4-00-1j7bpbfst9vfx.pike.replit.dev'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
const USER_ID = 11; // ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
async function callApi(endpoint, method = 'GET', body = null) {
  const headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };

  const options = {
    method,
    headers
  };

  if (body && (method === 'POST' || method === 'PUT')) {
    options.body = JSON.stringify(body);
  }

  const url = `${API_BASE_URL}${endpoint}`;
  console.log(`\n[API Request] ${method} ${url}`);
  if (body) console.log('Request Body:', body);

  try {
    const response = await fetch(url, options);
    const responseText = await response.text();
    
    console.log(`Response Status: ${response.status} ${response.statusText}`);
    
    try {
      const responseData = JSON.parse(responseText);
      console.log('Response Data:', JSON.stringify(responseData, null, 2));
      return { success: true, data: responseData, status: response.status };
    } catch (e) {
      console.log('Response Text:', responseText);
      return { success: false, error: 'Invalid JSON response', text: responseText, status: response.status };
    }
  } catch (error) {
    console.error(`Error calling API: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
async function testGetFarmingInfo() {
  console.log('\n===== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ =====');
  return await callApi(`/api/new-uni-farming/info?user_id=${USER_ID}`);
}

// 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
async function testCreateDeposit(amount = '1000') {
  console.log('\n===== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ =====');
  return await callApi('/api/new-uni-farming/deposit', 'POST', {
    user_id: USER_ID,
    amount
  });
}

// 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
async function testGetDeposits() {
  console.log('\n===== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ =====');
  return await callApi(`/api/new-uni-farming/deposits?user_id=${USER_ID}`);
}

// 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
async function testUpdateFarmingBalance() {
  console.log('\n===== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ =====');
  return await callApi(`/api/new-uni-farming/update-balance?user_id=${USER_ID}`);
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞');
  
  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
    await testGetFarmingInfo();
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
    await testCreateDeposit('1000');
    
    // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    await testGetDeposits();
    
    // –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞
    await testUpdateFarmingBalance();
    
    // –®–∞–≥ 5: –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await testGetFarmingInfo();
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
async function runSingleTest() {
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  // await testGetFarmingInfo();
  // await testCreateDeposit('1000');
  // await testGetDeposits();
  await testUpdateFarmingBalance();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
// runAllTests();

// –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
runSingleTest();