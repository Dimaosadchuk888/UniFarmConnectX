{
  "timestamp": "2025-06-13T13:38:09.987Z",
  "task": "T14_CORRECTED_ANALYSIS",
  "statistics": {
    "totalTables": 20,
    "totalDiscrepancies": 36,
    "totalRecommendations": 36,
    "tablesWithIssues": 20,
    "criticalIssues": 5,
    "mediumIssues": 15,
    "lowIssues": 16
  },
  "schema_definitions": {
    "auth_users": {
      "variableName": "authUsers",
      "tableName": "auth_users",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "username",
          "type": "text",
          "params": "\"username\"",
          "primaryKey": false,
          "notNull": true,
          "unique": true,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "password",
          "type": "text",
          "params": "\"password\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": true,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const authUsers = pgTable(\"auth_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").default('telegram_auth'), \n}"
    },
    "users": {
      "variableName": "users",
      "tableName": "users",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "telegram_id",
          "type": "bigint",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const users = pgTable(\n  \"users\", \n  {\n    id: serial(\"id\").primaryKey(),\n    telegram_id: bigint(\"telegram_id\", { mode: \"number\" }"
    },
    "farming_deposits": {
      "variableName": "farmingDeposits",
      "tableName": "farming_deposits",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": true
        },
        {
          "name": "amount_uni",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const farmingDeposits = pgTable(\"farming_deposits\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").references(() => users.id),\n  amount_uni: numeric(\"amount_uni\", { precision: 18, scale: 6 }"
    },
    "user_balances": {
      "variableName": "userBalances",
      "tableName": "user_balances",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "balance_uni",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const userBalances = pgTable(\"user_balances\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  balance_uni: numeric(\"balance_uni\", { precision: 18, scale: 6 }"
    },
    "transactions": {
      "variableName": "transactions",
      "tableName": "transactions",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": true
        },
        {
          "name": "transaction_type",
          "type": "text",
          "params": "\"transaction_type\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "currency",
          "type": "text",
          "params": "\"currency\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "amount",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const transactions = pgTable(\n  \"transactions\", \n  {\n    id: serial(\"id\").primaryKey(),\n    user_id: integer(\"user_id\").references(() => users.id),\n    transaction_type: text(\"transaction_type\"), \n    currency: text(\"currency\"), \n    amount: numeric(\"amount\", { precision: 18, scale: 6 }"
    },
    "referrals": {
      "variableName": "referrals",
      "tableName": "referrals",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "inviter_id",
          "type": "integer",
          "params": "\"inviter_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "level",
          "type": "integer",
          "params": "\"level\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "reward_uni",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const referrals = pgTable(\n  \"referrals\",\n  {\n    id: serial(\"id\").primaryKey(),\n    user_id: integer(\"user_id\").references(() => users.id).notNull(),\n    inviter_id: integer(\"inviter_id\").references(() => users.id).notNull(),\n    level: integer(\"level\").notNull(), \n    reward_uni: numeric(\"reward_uni\", { precision: 18, scale: 6 }"
    },
    "referral_earnings": {
      "variableName": "referral_earnings",
      "tableName": "referral_earnings",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "source_user_id",
          "type": "integer",
          "params": "\"source_user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "amount",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const referral_earnings = pgTable(\"referral_earnings\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").references(() => users.id).notNull(),\n  source_user_id: integer(\"source_user_id\").references(() => users.id).notNull(),\n  amount: numeric(\"amount\", { precision: 18, scale: 6 }"
    },
    "missions": {
      "variableName": "missions",
      "tableName": "missions",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "type",
          "type": "text",
          "params": "\"type\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "title",
          "type": "text",
          "params": "\"title\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "description",
          "type": "text",
          "params": "\"description\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "reward_uni",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const missions = pgTable(\"missions\", {\n  id: serial(\"id\").primaryKey(),\n  type: text(\"type\"), \n  title: text(\"title\"), \n  description: text(\"description\"), \n  reward_uni: numeric(\"reward_uni\", { precision: 18, scale: 6 }"
    },
    "user_missions": {
      "variableName": "userMissions",
      "tableName": "user_missions",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": true
        },
        {
          "name": "mission_id",
          "type": "integer",
          "params": "\"mission_id\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "missions",
            "column": "id"
          },
          "nullable": true
        },
        {
          "name": "completed_at",
          "type": "timestamp",
          "params": "\"completed_at\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": true,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const userMissions = pgTable(\"user_missions\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").references(() => users.id),\n  mission_id: integer(\"mission_id\").references(() => missions.id),\n  completed_at: timestamp(\"completed_at\").defaultNow()\n}"
    },
    "uni_farming_deposits": {
      "variableName": "uniFarmingDeposits",
      "tableName": "uni_farming_deposits",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "amount",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const uniFarmingDeposits = pgTable(\"uni_farming_deposits\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  amount: numeric(\"amount\", { precision: 18, scale: 6 }"
    },
    "boost_deposits": {
      "variableName": "boostDeposits",
      "tableName": "boost_deposits",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "boost_id",
          "type": "integer",
          "params": "\"boost_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "start_date",
          "type": "timestamp",
          "params": "\"start_date\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "end_date",
          "type": "timestamp",
          "params": "\"end_date\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "bonus_uni",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const boostDeposits = pgTable(\"boost_deposits\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  boost_id: integer(\"boost_id\").notNull(), \n  start_date: timestamp(\"start_date\").notNull(), \n  end_date: timestamp(\"end_date\").notNull(), \n  bonus_uni: numeric(\"bonus_uni\", { precision: 18, scale: 6 }"
    },
    "ton_boost_deposits": {
      "variableName": "tonBoostDeposits",
      "tableName": "ton_boost_deposits",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "boost_package_id",
          "type": "integer",
          "params": "\"boost_package_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "ton_amount",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const tonBoostDeposits = pgTable(\"ton_boost_deposits\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  boost_package_id: integer(\"boost_package_id\").notNull(), \n  ton_amount: numeric(\"ton_amount\", { precision: 18, scale: 5 }"
    },
    "launch_logs": {
      "variableName": "launchLogs",
      "tableName": "launch_logs",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "telegram_user_id",
          "type": "bigint",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const launchLogs = pgTable(\"launch_logs\", {\n  id: serial(\"id\").primaryKey(),\n  telegram_user_id: bigint(\"telegram_user_id\", { mode: \"number\" }"
    },
    "partition_logs": {
      "variableName": "partition_logs",
      "tableName": "partition_logs",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "operation",
          "type": "text",
          "params": "\"operation\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "partition_name",
          "type": "text",
          "params": "\"partition_name\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "message",
          "type": "text",
          "params": "\"message\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "timestamp",
          "type": "timestamp",
          "params": "\"timestamp\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": true,
          "references": null,
          "nullable": false
        },
        {
          "name": "status",
          "type": "text",
          "params": "\"status\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "error_details",
          "type": "text",
          "params": "\"error_details\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const partition_logs = pgTable(\"partition_logs\", {\n  id: serial(\"id\").primaryKey(),\n  operation: text(\"operation\").notNull(), \n  partition_name: text(\"partition_name\"),\n  message: text(\"message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n  status: text(\"status\").notNull(), \n  error_details: text(\"error_details\")\n}"
    },
    "reward_distribution_logs": {
      "variableName": "reward_distribution_logs",
      "tableName": "reward_distribution_logs",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "batch_id",
          "type": "text",
          "params": "\"batch_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "source_user_id",
          "type": "integer",
          "params": "\"source_user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "earned_amount",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const reward_distribution_logs = pgTable(\"reward_distribution_logs\", {\n  id: serial(\"id\").primaryKey(),\n  batch_id: text(\"batch_id\").notNull(), \n  source_user_id: integer(\"source_user_id\").notNull(), \n  earned_amount: numeric(\"earned_amount\", { precision: 18, scale: 6 }"
    },
    "performance_metrics": {
      "variableName": "performance_metrics",
      "tableName": "performance_metrics",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "operation",
          "type": "text",
          "params": "\"operation\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "batch_id",
          "type": "text",
          "params": "\"batch_id\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "duration_ms",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const performance_metrics = pgTable(\n  \"performance_metrics\", \n  {\n    id: serial(\"id\").primaryKey(),\n    operation: text(\"operation\").notNull(), \n    batch_id: text(\"batch_id\"), \n    duration_ms: numeric(\"duration_ms\", { precision: 12, scale: 2 }"
    },
    "boost_packages": {
      "variableName": "boostPackages",
      "tableName": "boost_packages",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "name",
          "type": "text",
          "params": "\"name\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "description",
          "type": "text",
          "params": "\"description\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "price_uni",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const boostPackages = pgTable(\"boost_packages\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price_uni: numeric(\"price_uni\", { precision: 18, scale: 6 }"
    },
    "ton_boost_packages": {
      "variableName": "tonBoostPackages",
      "tableName": "ton_boost_packages",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "name",
          "type": "text",
          "params": "\"name\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "description",
          "type": "text",
          "params": "\"description\"",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        },
        {
          "name": "price_ton",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const tonBoostPackages = pgTable(\"ton_boost_packages\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(), \n  description: text(\"description\"),\n  price_ton: numeric(\"price_ton\", { precision: 18, scale: 5 }"
    },
    "user_boosts": {
      "variableName": "userBoosts",
      "tableName": "user_boosts",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "user_id",
          "type": "integer",
          "params": "\"user_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "users",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "package_id",
          "type": "integer",
          "params": "\"package_id\"",
          "primaryKey": false,
          "notNull": true,
          "unique": false,
          "hasDefault": false,
          "references": {
            "table": "boostPackages",
            "column": "id"
          },
          "nullable": false
        },
        {
          "name": "amount",
          "type": "numeric",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const userBoosts = pgTable(\"user_boosts\", {\n  id: serial(\"id\").primaryKey(),\n  user_id: integer(\"user_id\").notNull().references(() => users.id),\n  package_id: integer(\"package_id\").notNull().references(() => boostPackages.id),\n  amount: numeric(\"amount\", { precision: 18, scale: 6 }"
    },
    "airdrop_participants": {
      "variableName": "airdropParticipants",
      "tableName": "airdrop_participants",
      "fields": [
        {
          "name": "id",
          "type": "serial",
          "params": "\"id\"",
          "primaryKey": true,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": false
        },
        {
          "name": "telegram_id",
          "type": "bigint",
          "params": "",
          "primaryKey": false,
          "notNull": false,
          "unique": false,
          "hasDefault": false,
          "references": null,
          "nullable": true
        }
      ],
      "indexes": [],
      "rawDefinition": "export const airdropParticipants = pgTable(\"airdrop_participants\", {\n  id: serial(\"id\").primaryKey(),\n  telegram_id: bigint(\"telegram_id\", { mode: \"number\" }"
    }
  },
  "code_usage": {
    "users": [
      {
        "file": "modules/admin/service.ts",
        "occurrences": 7
      },
      {
        "file": "modules/airdrop/service.ts",
        "occurrences": 1
      },
      {
        "file": "modules/auth/service.ts",
        "occurrences": 4
      },
      {
        "file": "modules/boost/service.ts",
        "occurrences": 1
      },
      {
        "file": "modules/dailyBonus/service.ts",
        "occurrences": 11
      },
      {
        "file": "modules/farming/service.ts",
        "occurrences": 9
      },
      {
        "file": "modules/missions/service.ts",
        "occurrences": 5
      },
      {
        "file": "modules/referral/service.ts",
        "occurrences": 41
      },
      {
        "file": "modules/user/service.ts",
        "occurrences": 14
      },
      {
        "file": "modules/wallet/service.ts",
        "occurrences": 7
      },
      {
        "file": "server/index.ts",
        "occurrences": 1
      },
      {
        "file": "server/routes.ts",
        "occurrences": 1
      }
    ],
    "transactions": [
      {
        "file": "modules/admin/service.ts",
        "occurrences": 2
      },
      {
        "file": "modules/dailyBonus/service.ts",
        "occurrences": 6
      },
      {
        "file": "modules/farming/service.ts",
        "occurrences": 8
      },
      {
        "file": "modules/missions/service.ts",
        "occurrences": 2
      },
      {
        "file": "modules/wallet/service.ts",
        "occurrences": 13
      },
      {
        "file": "server/index.ts",
        "occurrences": 1
      },
      {
        "file": "server/routes.ts",
        "occurrences": 2
      }
    ],
    "missions": [
      {
        "file": "modules/missions/service.ts",
        "occurrences": 32
      },
      {
        "file": "server/index.ts",
        "occurrences": 1
      },
      {
        "file": "server/routes.ts",
        "occurrences": 4
      }
    ],
    "referrals": [
      {
        "file": "modules/referral/service.ts",
        "occurrences": 16
      },
      {
        "file": "server/routes.ts",
        "occurrences": 2
      }
    ]
  },
  "discrepancies": [
    {
      "type": "missing_critical_index",
      "table": "users",
      "field": "telegram_id",
      "severity": "medium",
      "message": "Критическое поле users.telegram_id не имеет индекса"
    },
    {
      "type": "missing_critical_field",
      "table": "users",
      "field": "ref_code",
      "severity": "high",
      "message": "Критическое поле ref_code отсутствует в таблице users"
    },
    {
      "type": "missing_critical_field",
      "table": "users",
      "field": "parent_ref_code",
      "severity": "high",
      "message": "Критическое поле parent_ref_code отсутствует в таблице users"
    },
    {
      "type": "missing_critical_index",
      "table": "farming_deposits",
      "field": "user_id",
      "severity": "medium",
      "message": "Критическое поле farming_deposits.user_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "user_balances",
      "field": "user_id",
      "severity": "medium",
      "message": "Критическое поле user_balances.user_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "transactions",
      "field": "user_id",
      "severity": "medium",
      "message": "Критическое поле transactions.user_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "transactions",
      "field": "transaction_type",
      "severity": "medium",
      "message": "Критическое поле transactions.transaction_type не имеет индекса"
    },
    {
      "type": "missing_critical_field",
      "table": "transactions",
      "field": "source_user_id",
      "severity": "high",
      "message": "Критическое поле source_user_id отсутствует в таблице transactions"
    },
    {
      "type": "missing_critical_index",
      "table": "referrals",
      "field": "user_id",
      "severity": "medium",
      "message": "Критическое поле referrals.user_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "referrals",
      "field": "inviter_id",
      "severity": "medium",
      "message": "Критическое поле referrals.inviter_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "referrals",
      "field": "level",
      "severity": "medium",
      "message": "Критическое поле referrals.level не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "missions",
      "field": "type",
      "severity": "medium",
      "message": "Критическое поле missions.type не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "user_missions",
      "field": "user_id",
      "severity": "medium",
      "message": "Критическое поле user_missions.user_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "user_missions",
      "field": "mission_id",
      "severity": "medium",
      "message": "Критическое поле user_missions.mission_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "uni_farming_deposits",
      "field": "user_id",
      "severity": "medium",
      "message": "Критическое поле uni_farming_deposits.user_id не имеет индекса"
    },
    {
      "type": "missing_critical_index",
      "table": "airdrop_participants",
      "field": "telegram_id",
      "severity": "medium",
      "message": "Критическое поле airdrop_participants.telegram_id не имеет индекса"
    },
    {
      "type": "missing_critical_field",
      "table": "airdrop_participants",
      "field": "user_id",
      "severity": "high",
      "message": "Критическое поле user_id отсутствует в таблице airdrop_participants"
    },
    {
      "type": "broken_foreign_key",
      "table": "user_boosts",
      "field": "package_id",
      "severity": "high",
      "message": "Поле user_boosts.package_id ссылается на несуществующую таблицу boostPackages"
    },
    {
      "type": "unused_table",
      "table": "auth_users",
      "severity": "low",
      "message": "Таблица auth_users определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "farming_deposits",
      "severity": "low",
      "message": "Таблица farming_deposits определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "user_balances",
      "severity": "low",
      "message": "Таблица user_balances определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "referral_earnings",
      "severity": "low",
      "message": "Таблица referral_earnings определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "user_missions",
      "severity": "low",
      "message": "Таблица user_missions определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "uni_farming_deposits",
      "severity": "low",
      "message": "Таблица uni_farming_deposits определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "boost_deposits",
      "severity": "low",
      "message": "Таблица boost_deposits определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "ton_boost_deposits",
      "severity": "low",
      "message": "Таблица ton_boost_deposits определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "launch_logs",
      "severity": "low",
      "message": "Таблица launch_logs определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "partition_logs",
      "severity": "low",
      "message": "Таблица partition_logs определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "reward_distribution_logs",
      "severity": "low",
      "message": "Таблица reward_distribution_logs определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "performance_metrics",
      "severity": "low",
      "message": "Таблица performance_metrics определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "boost_packages",
      "severity": "low",
      "message": "Таблица boost_packages определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "ton_boost_packages",
      "severity": "low",
      "message": "Таблица ton_boost_packages определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "user_boosts",
      "severity": "low",
      "message": "Таблица user_boosts определена в схеме, но не используется в коде"
    },
    {
      "type": "unused_table",
      "table": "airdrop_participants",
      "severity": "low",
      "message": "Таблица airdrop_participants определена в схеме, но не используется в коде"
    },
    {
      "type": "incorrect_id_type",
      "table": "reward_distribution_logs",
      "field": "batch_id",
      "severity": "medium",
      "message": "ID поле reward_distribution_logs.batch_id имеет тип text вместо integer/serial/bigint"
    },
    {
      "type": "incorrect_id_type",
      "table": "performance_metrics",
      "field": "batch_id",
      "severity": "medium",
      "message": "ID поле performance_metrics.batch_id имеет тип text вместо integer/serial/bigint"
    }
  ],
  "recommendations": [
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "users",
      "field": "telegram_id",
      "sql": "CREATE INDEX idx_users_telegram_id ON users(telegram_id);",
      "description": "Критическое поле users.telegram_id не имеет индекса"
    },
    {
      "priority": "critical",
      "action": "ADD_COLUMN",
      "table": "users",
      "field": "ref_code",
      "sql": "ALTER TABLE users ADD COLUMN ref_code INTEGER;",
      "description": "Критическое поле ref_code отсутствует в таблице users"
    },
    {
      "priority": "critical",
      "action": "ADD_COLUMN",
      "table": "users",
      "field": "parent_ref_code",
      "sql": "ALTER TABLE users ADD COLUMN parent_ref_code INTEGER;",
      "description": "Критическое поле parent_ref_code отсутствует в таблице users"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "farming_deposits",
      "field": "user_id",
      "sql": "CREATE INDEX idx_farming_deposits_user_id ON farming_deposits(user_id);",
      "description": "Критическое поле farming_deposits.user_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "user_balances",
      "field": "user_id",
      "sql": "CREATE INDEX idx_user_balances_user_id ON user_balances(user_id);",
      "description": "Критическое поле user_balances.user_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "transactions",
      "field": "user_id",
      "sql": "CREATE INDEX idx_transactions_user_id ON transactions(user_id);",
      "description": "Критическое поле transactions.user_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "transactions",
      "field": "transaction_type",
      "sql": "CREATE INDEX idx_transactions_transaction_type ON transactions(transaction_type);",
      "description": "Критическое поле transactions.transaction_type не имеет индекса"
    },
    {
      "priority": "critical",
      "action": "ADD_COLUMN",
      "table": "transactions",
      "field": "source_user_id",
      "sql": "ALTER TABLE transactions ADD COLUMN source_user_id INTEGER;",
      "description": "Критическое поле source_user_id отсутствует в таблице transactions"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "referrals",
      "field": "user_id",
      "sql": "CREATE INDEX idx_referrals_user_id ON referrals(user_id);",
      "description": "Критическое поле referrals.user_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "referrals",
      "field": "inviter_id",
      "sql": "CREATE INDEX idx_referrals_inviter_id ON referrals(inviter_id);",
      "description": "Критическое поле referrals.inviter_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "referrals",
      "field": "level",
      "sql": "CREATE INDEX idx_referrals_level ON referrals(level);",
      "description": "Критическое поле referrals.level не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "missions",
      "field": "type",
      "sql": "CREATE INDEX idx_missions_type ON missions(type);",
      "description": "Критическое поле missions.type не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "user_missions",
      "field": "user_id",
      "sql": "CREATE INDEX idx_user_missions_user_id ON user_missions(user_id);",
      "description": "Критическое поле user_missions.user_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "user_missions",
      "field": "mission_id",
      "sql": "CREATE INDEX idx_user_missions_mission_id ON user_missions(mission_id);",
      "description": "Критическое поле user_missions.mission_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "uni_farming_deposits",
      "field": "user_id",
      "sql": "CREATE INDEX idx_uni_farming_deposits_user_id ON uni_farming_deposits(user_id);",
      "description": "Критическое поле uni_farming_deposits.user_id не имеет индекса"
    },
    {
      "priority": "medium",
      "action": "CREATE_INDEX",
      "table": "airdrop_participants",
      "field": "telegram_id",
      "sql": "CREATE INDEX idx_airdrop_participants_telegram_id ON airdrop_participants(telegram_id);",
      "description": "Критическое поле airdrop_participants.telegram_id не имеет индекса"
    },
    {
      "priority": "critical",
      "action": "ADD_COLUMN",
      "table": "airdrop_participants",
      "field": "user_id",
      "sql": "ALTER TABLE airdrop_participants ADD COLUMN user_id INTEGER;",
      "description": "Критическое поле user_id отсутствует в таблице airdrop_participants"
    },
    {
      "priority": "critical",
      "action": "FIX_FOREIGN_KEY",
      "table": "user_boosts",
      "field": "package_id",
      "sql": "-- Исправить внешний ключ user_boosts.package_id",
      "description": "Поле user_boosts.package_id ссылается на несуществующую таблицу boostPackages"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "auth_users",
      "sql": "-- Проверить необходимость таблицы auth_users",
      "description": "Таблица auth_users определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "farming_deposits",
      "sql": "-- Проверить необходимость таблицы farming_deposits",
      "description": "Таблица farming_deposits определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "user_balances",
      "sql": "-- Проверить необходимость таблицы user_balances",
      "description": "Таблица user_balances определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "referral_earnings",
      "sql": "-- Проверить необходимость таблицы referral_earnings",
      "description": "Таблица referral_earnings определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "user_missions",
      "sql": "-- Проверить необходимость таблицы user_missions",
      "description": "Таблица user_missions определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "uni_farming_deposits",
      "sql": "-- Проверить необходимость таблицы uni_farming_deposits",
      "description": "Таблица uni_farming_deposits определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "boost_deposits",
      "sql": "-- Проверить необходимость таблицы boost_deposits",
      "description": "Таблица boost_deposits определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "ton_boost_deposits",
      "sql": "-- Проверить необходимость таблицы ton_boost_deposits",
      "description": "Таблица ton_boost_deposits определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "launch_logs",
      "sql": "-- Проверить необходимость таблицы launch_logs",
      "description": "Таблица launch_logs определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "partition_logs",
      "sql": "-- Проверить необходимость таблицы partition_logs",
      "description": "Таблица partition_logs определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "reward_distribution_logs",
      "sql": "-- Проверить необходимость таблицы reward_distribution_logs",
      "description": "Таблица reward_distribution_logs определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "performance_metrics",
      "sql": "-- Проверить необходимость таблицы performance_metrics",
      "description": "Таблица performance_metrics определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "boost_packages",
      "sql": "-- Проверить необходимость таблицы boost_packages",
      "description": "Таблица boost_packages определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "ton_boost_packages",
      "sql": "-- Проверить необходимость таблицы ton_boost_packages",
      "description": "Таблица ton_boost_packages определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "user_boosts",
      "sql": "-- Проверить необходимость таблицы user_boosts",
      "description": "Таблица user_boosts определена в схеме, но не используется в коде"
    },
    {
      "priority": "low",
      "action": "REVIEW_TABLE",
      "table": "airdrop_participants",
      "sql": "-- Проверить необходимость таблицы airdrop_participants",
      "description": "Таблица airdrop_participants определена в схеме, но не используется в коде"
    },
    {
      "priority": "medium",
      "action": "REVIEW",
      "table": "reward_distribution_logs",
      "field": "batch_id",
      "sql": "-- ID поле reward_distribution_logs.batch_id имеет тип text вместо integer/serial/bigint",
      "description": "ID поле reward_distribution_logs.batch_id имеет тип text вместо integer/serial/bigint"
    },
    {
      "priority": "medium",
      "action": "REVIEW",
      "table": "performance_metrics",
      "field": "batch_id",
      "sql": "-- ID поле performance_metrics.batch_id имеет тип text вместо integer/serial/bigint",
      "description": "ID поле performance_metrics.batch_id имеет тип text вместо integer/serial/bigint"
    }
  ],
  "summary": {
    "system_health": "POOR",
    "readiness_for_t15": "NEEDS_WORK",
    "main_concerns": [
      "5 критических проблем",
      "1 проблем ссылочной целостности",
      "13 отсутствующих индексов",
      "16 неиспользуемых таблиц"
    ]
  }
}