/**
 * TON Connect Transaction Validation Script
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏—ë–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ TON Connect
 * –°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫ —ç–º—É–ª—è—Ü–∏–∏
 */

const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(message, color = 'white') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  log('\n' + '='.repeat(60), 'cyan');
  log(`${title}`, 'cyan');
  log('='.repeat(60), 'cyan');
}

function logSubsection(title) {
  log(`\nüìã ${title}`, 'yellow');
  log('-'.repeat(40), 'yellow');
}

function logCheck(item, status, details = '') {
  const statusIcon = status === 'OK' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
  const statusColor = status === 'OK' ? 'green' : status === 'WARNING' ? 'yellow' : 'red';
  log(`${statusIcon} ${item}`, statusColor);
  if (details) log(`   ${details}`, 'white');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function checkFileExists(filePath) {
  try {
    return fs.existsSync(filePath) && fs.statSync(filePath).isFile();
  } catch (error) {
    return false;
  }
}

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    return null;
  }
}

// –ê–Ω–∞–ª–∏–∑ tonConnectService.ts
function analyzeTonConnectService() {
  logSubsection('1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  
  const servicePath = 'client/src/services/tonConnectService.ts';
  const serviceContent = readFile(servicePath);
  
  if (!serviceContent) {
    logCheck('tonConnectService.ts —Ñ–∞–π–ª', 'ERROR', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ amount –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
  const amountConversionRegex = /Math\.round\(tonAmount \* 1000000000\)\.toString\(\)/;
  if (amountConversionRegex.test(serviceContent)) {
    logCheck('–ö–æ–Ω–≤–µ—Ä—Å–∏—è amount –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã', 'OK', 'Math.round(tonAmount * 1000000000).toString()');
  } else {
    logCheck('–ö–æ–Ω–≤–µ—Ä—Å–∏—è amount –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã', 'ERROR', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const addressRegex = /TON_PROJECT_ADDRESS[\s\S]*?'([^']+)'/;
  const addressMatch = serviceContent.match(addressRegex);
  if (addressMatch) {
    const address = addressMatch[1];
    if (address.startsWith('UQ') || address.startsWith('EQ')) {
      logCheck('–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'OK', `User-friendly —Ñ–æ—Ä–º–∞—Ç: ${address.substring(0, 10)}...`);
    } else {
      logCheck('–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'WARNING', '–í–æ–∑–º–æ–∂–Ω–æ raw —Ñ–æ—Ä–º–∞—Ç');
    }
  } else {
    logCheck('–§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'ERROR', '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ BOC payload
  const bocCreationRegex = /beginCell\(\)[\s\S]*?\.storeUint\(0, 32\)[\s\S]*?\.storeStringTail\(/;
  if (bocCreationRegex.test(serviceContent)) {
    logCheck('BOC payload —Å–æ–∑–¥–∞–Ω–∏–µ', 'OK', 'beginCell() —Å –æ–ø–∫–æ–¥–æ–º 0 –∏ storeStringTail()');
  } else {
    logCheck('BOC payload —Å–æ–∑–¥–∞–Ω–∏–µ', 'ERROR', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ BOC');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ validUntil
  const validUntilRegex = /validUntil:\s*Math\.floor\(Date\.now\(\)\s*\/\s*1000\)\s*\+\s*(\d+)/;
  const validUntilMatch = serviceContent.match(validUntilRegex);
  if (validUntilMatch) {
    const timeout = parseInt(validUntilMatch[1]);
    if (timeout >= 300 && timeout <= 3600) {
      logCheck('validUntil –ø–∞—Ä–∞–º–µ—Ç—Ä', 'OK', `${timeout} —Å–µ–∫—É–Ω–¥ (${Math.round(timeout/60)} –º–∏–Ω)`);
    } else {
      logCheck('validUntil –ø–∞—Ä–∞–º–µ—Ç—Ä', 'WARNING', `${timeout} —Å–µ–∫ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-30 –º–∏–Ω`);
    }
  } else {
    logCheck('validUntil –ø–∞—Ä–∞–º–µ—Ç—Ä', 'ERROR', 'validUntil –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ bounce —Ñ–ª–∞–≥–∞
  const bounceRegex = /bounce:\s*(true|false)/;
  if (bounceRegex.test(serviceContent)) {
    const bounceMatch = serviceContent.match(bounceRegex);
    logCheck('bounce —Ñ–ª–∞–≥', 'OK', `bounce: ${bounceMatch[1]}`);
  } else {
    logCheck('bounce —Ñ–ª–∞–≥', 'ERROR', 'bounce —Ñ–ª–∞–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —ç–º—É–ª—è—Ü–∏–∏');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
  const forcedBypassRegex = /return true;.*–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/;
  if (forcedBypassRegex.test(serviceContent)) {
    logCheck('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–æ–∫', 'ERROR', '–ù–∞–π–¥–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π return true');
  } else {
    logCheck('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–æ–∫', 'OK', '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –ê–Ω–∞–ª–∏–∑ TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
function analyzeTonConnectManifests() {
  logSubsection('2. TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã');
  
  const mainManifest = 'client/public/tonconnect-manifest.json';
  const wellKnownManifest = 'client/public/.well-known/tonconnect-manifest.json';
  
  [mainManifest, wellKnownManifest].forEach((manifestPath, index) => {
    const manifestContent = readFile(manifestPath);
    if (!manifestContent) {
      logCheck(`–ú–∞–Ω–∏—Ñ–µ—Å—Ç ${index + 1} (${manifestPath})`, 'ERROR', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    try {
      const manifest = JSON.parse(manifestContent);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = ['url', 'name', 'iconUrl'];
      requiredFields.forEach(field => {
        if (manifest[field]) {
          logCheck(`${field} –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ ${index + 1}`, 'OK', manifest[field]);
        } else {
          logCheck(`${field} –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ ${index + 1}`, 'ERROR', '–ü–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
      if (manifest.url && manifest.url.includes('replit.app')) {
        logCheck(`URL –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç ${index + 1}`, 'WARNING', 'Replit URL –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ');
      }
      
    } catch (error) {
      logCheck(`–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON –º–∞–Ω–∏—Ñ–µ—Å—Ç ${index + 1}`, 'ERROR', '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON');
    }
  });
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function analyzeTransactionStructure() {
  logSubsection('3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  
  const servicePath = 'client/src/services/tonConnectService.ts';
  const serviceContent = readFile(servicePath);
  
  if (!serviceContent) {
    logCheck('–§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞', 'ERROR', '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª');
    return;
  }
  
  // –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const transactionStructureRegex = /const transaction = \{[\s\S]*?\}/;
  const transactionMatch = serviceContent.match(transactionStructureRegex);
  
  if (transactionMatch) {
    const transactionStr = transactionMatch[0];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const hasValidUntil = /validUntil:/.test(transactionStr);
    const hasMessages = /messages:/.test(transactionStr);
    const hasAddress = /address:/.test(transactionStr);
    const hasAmount = /amount:/.test(transactionStr);
    
    logCheck('validUntil –ø–æ–ª–µ', hasValidUntil ? 'OK' : 'ERROR');
    logCheck('messages –º–∞—Å—Å–∏–≤', hasMessages ? 'OK' : 'ERROR');
    logCheck('address –≤ message', hasAddress ? 'OK' : 'ERROR');
    logCheck('amount –≤ message', hasAmount ? 'OK' : 'ERROR');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å —ç–º—É–ª—è—Ü–∏–∏
    const hasStateInit = /stateInit:/.test(transactionStr);
    if (hasStateInit) {
      logCheck('stateInit –ø–æ–ª–µ', 'WARNING', '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–∏–º');
    } else {
      logCheck('stateInit –ø–æ–ª–µ', 'OK', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
  } else {
    logCheck('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'ERROR', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ');
  }
}

// –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ TonDepositCard
function analyzeTonDepositCard() {
  logSubsection('4. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TonDepositCard');
  
  const componentPath = 'client/src/components/wallet/TonDepositCard.tsx';
  const componentContent = readFile(componentPath);
  
  if (!componentContent) {
    logCheck('TonDepositCard.tsx', 'ERROR', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ sendTonTransaction
  const sendTransactionRegex = /sendTonTransaction\(\s*tonConnectUI,\s*([^,]+),\s*([^)]+)\)/;
  const sendTransactionMatch = componentContent.match(sendTransactionRegex);
  
  if (sendTransactionMatch) {
    logCheck('–í—ã–∑–æ–≤ sendTonTransaction', 'OK', '–ù–∞–π–¥–µ–Ω –≤ handleDeposit');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const amountParam = sendTransactionMatch[1].trim();
    const commentParam = sendTransactionMatch[2].trim();
    
    logCheck('–ü–∞—Ä–∞–º–µ—Ç—Ä amount', 'OK', amountParam);
    logCheck('–ü–∞—Ä–∞–º–µ—Ç—Ä comment', 'OK', commentParam);
  } else {
    logCheck('–í—ã–∑–æ–≤ sendTonTransaction', 'ERROR', '–ù–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  const errorHandlingRegex = /catch\s*\([^)]*\)\s*\{[\s\S]*?showError/;
  if (errorHandlingRegex.test(componentContent)) {
    logCheck('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', 'OK', '–ù–∞–π–¥–µ–Ω try-catch —Å showError');
  } else {
    logCheck('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', 'WARNING', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π');
  }
}

// –ê–Ω–∞–ª–∏–∑ App.tsx –∏ TonConnectUIProvider
function analyzeAppStructure() {
  logSubsection('5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  
  const appPath = 'client/src/App.tsx';
  const appContent = readFile(appPath);
  
  if (!appContent) {
    logCheck('App.tsx', 'ERROR', '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TonConnectUIProvider
  const tonConnectProviderRegex = /<TonConnectUIProvider\s+manifestUrl="([^"]+)"/;
  const providerMatch = appContent.match(tonConnectProviderRegex);
  
  if (providerMatch) {
    const manifestUrl = providerMatch[1];
    logCheck('TonConnectUIProvider', 'OK', `manifestUrl: ${manifestUrl}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    if (manifestUrl.includes('replit.app')) {
      logCheck('Manifest URL', 'WARNING', '–•–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π Replit URL');
    } else {
      logCheck('Manifest URL', 'OK', '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Replit');
    }
  } else {
    logCheck('TonConnectUIProvider', 'ERROR', '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ App.tsx');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const providerHierarchyRegex = /TonConnectUIProvider[\s\S]*?QueryClientProvider[\s\S]*?ErrorBoundary/;
  if (providerHierarchyRegex.test(appContent)) {
    logCheck('–ò–µ—Ä–∞—Ä—Ö–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤', 'OK', 'TonConnect ‚Üí QueryClient ‚Üí ErrorBoundary');
  } else {
    logCheck('–ò–µ—Ä–∞—Ä—Ö–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤', 'WARNING', '–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
  logSubsection('6. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  
  const requiredEnvVars = [
    'VITE_TON_BOOST_RECEIVER_ADDRESS',
    'VITE_APP_URL',
    'TELEGRAM_WEBAPP_URL'
  ];
  
  // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –∫–æ–¥–µ
  const servicePath = 'client/src/services/tonConnectService.ts';
  const serviceContent = readFile(servicePath);
  
  if (serviceContent) {
    requiredEnvVars.forEach(envVar => {
      if (serviceContent.includes(envVar)) {
        logCheck(`${envVar}`, 'OK', '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ');
      } else {
        logCheck(`${envVar}`, 'WARNING', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ');
      }
    });
  }
}

// –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —ç–º—É–ª—è—Ü–∏–∏
function findEmulationIssues() {
  logSubsection('7. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —ç–º—É–ª—è—Ü–∏–∏');
  
  const servicePath = 'client/src/services/tonConnectService.ts';
  const serviceContent = readFile(servicePath);
  
  if (!serviceContent) {
    logCheck('–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞', 'ERROR', '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞');
    return;
  }
  
  const issues = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ bounce —Ñ–ª–∞–≥–∞
  if (!/bounce:\s*(true|false)/.test(serviceContent)) {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç bounce —Ñ–ª–∞–≥ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  const commentRegex = /UniFarmBoost:\$\{userId\}:\$\{boostId\}/;
  if (commentRegex.test(serviceContent)) {
    issues.push('–î–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã BOC');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥
  if (/return true;.*—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/.test(serviceContent)) {
    issues.push('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback BOC
  if (/fallbackPayload = 'te6/.test(serviceContent)) {
    issues.push('–•–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π fallback BOC –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º');
  }
  
  if (issues.length === 0) {
    logCheck('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', 'OK', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  } else {
    issues.forEach(issue => {
      logCheck('–ü—Ä–æ–±–ª–µ–º–∞ —ç–º—É–ª—è—Ü–∏–∏', 'WARNING', issue);
    });
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
function generateRecommendations() {
  logSubsection('8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é');
  
  log('\nüìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', 'yellow');
  log('1. –î–æ–±–∞–≤–∏—Ç—å bounce: false –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'white');
  log('2. –°–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ "UniFarm" –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è BOC', 'white');
  log('3. –£–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π return true –∏–∑ isTonPaymentReady()', 'white');
  log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ TonAPI', 'white');
  log('5. –ó–∞–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π fallback BOC –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π', 'white');
  
  log('\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:', 'yellow');
  log('6. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π', 'white');
  log('7. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö URL', 'white');
  log('8. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —ç–º—É–ª—è—Ü–∏–∏', 'white');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  logSection('üîß TON Connect Transaction Validation Analysis');
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏—ë–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ TON Connect', 'white');
  log('–¶–µ–ª—å: —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —ç–º—É–ª—è—Ü–∏–∏ –≤ Tonkeeper/Ton Space\n', 'white');
  
  try {
    analyzeTonConnectService();
    analyzeTonConnectManifests();
    analyzeTransactionStructure();
    analyzeTonDepositCard();
    analyzeAppStructure();
    checkEnvironmentVariables();
    findEmulationIssues();
    generateRecommendations();
    
    logSection('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    log('–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥', 'green');
    log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º', 'green');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`, 'red');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
  main();
}

module.exports = {
  analyzeTonConnectService,
  analyzeTonConnectManifests,
  analyzeTransactionStructure,
  findEmulationIssues
};