/**
 * –¢–µ—Å—Ç –≤–Ω–µ—à–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook
 */

import fetch from 'node-fetch';

const WEBHOOK_URL = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app/webhook';

const testUpdate = {
  update_id: 123456789,
  message: {
    message_id: 1,
    from: {
      id: 123456789,
      is_bot: false,
      first_name: "Test",
      username: "testuser"
    },
    chat: {
      id: 123456789,
      type: "private"
    },
    date: Math.floor(Date.now() / 1000),
    text: "/start"
  }
};

async function testExternalWebhook() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É—é –≤–Ω–µ—à–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook...');
  console.log(`üìç URL: ${WEBHOOK_URL}`);
  
  try {
    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot'
      },
      body: JSON.stringify(testUpdate)
    });

    const result = await response.text();
    console.log(`üìå –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log('üìÑ –û—Ç–≤–µ—Ç:', result);

    if (response.status === 200) {
      console.log('‚úÖ –í–Ω–µ—à–Ω–∏–π webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      return true;
    } else {
      console.log('‚ùå –í–Ω–µ—à–Ω–∏–π webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return false;
  }
}

testExternalWebhook().then(success => {
  console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:', success ? 'Webhook –≥–æ—Ç–æ–≤' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
});