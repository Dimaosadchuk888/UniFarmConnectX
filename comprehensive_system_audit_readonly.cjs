const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function comprehensiveSystemAudit() {
  console.log('=== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ (READ-ONLY) ===\n');
  
  const auditResults = {
    tonTransactions: {},
    referralAnomalies: {},
    systemHealth: {},
    userPatterns: {},
    timelineAnalysis: {}
  };
  
  try {
    // 1. –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    console.log('üîç 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...');
    const { data: allTonTx, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .gte('created_at', '2025-07-14T00:00:00')
      .order('created_at', { ascending: false });
      
    if (tonError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${allTonTx?.length || 0}`);
      
      const tonStats = {
        total: allTonTx?.length || 0,
        byType: {},
        byUser: {},
        totalVolume: 0,
        suspiciousPatterns: []
      };
      
      allTonTx?.forEach(tx => {
        tonStats.totalVolume += parseFloat(tx.amount);
        tonStats.byType[tx.type] = (tonStats.byType[tx.type] || 0) + 1;
        tonStats.byUser[tx.user_id] = (tonStats.byUser[tx.user_id] || 0) + 1;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if (parseFloat(tx.amount) > 10) {
          tonStats.suspiciousPatterns.push({
            id: tx.id,
            user_id: tx.user_id,
            amount: tx.amount,
            type: tx.type,
            created_at: tx.created_at
          });
        }
      });
      
      console.log(`üí∞ –û–±—â–∏–π –æ–±—ä–µ–º TON: ${tonStats.totalVolume.toFixed(6)}`);
      console.log(`üìà –ü–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      Object.entries(tonStats.byType).forEach(([type, count]) => {
        console.log(`   ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      console.log(`üë§ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:`);
      Object.entries(tonStats.byUser)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .forEach(([userId, count]) => {
          console.log(`   User ${userId}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        });
        
      if (tonStats.suspiciousPatterns.length > 0) {
        console.log(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (>10 TON):`);
        tonStats.suspiciousPatterns.forEach(tx => {
          console.log(`   User ${tx.user_id}: ${tx.amount} TON, ${tx.type}, ${tx.created_at}`);
        });
      }
      
      auditResults.tonTransactions = tonStats;
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π
    console.log('\nüîç 2. –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π...');
    const { data: referralTx, error: refError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .gte('created_at', '2025-07-20T00:00:00')
      .order('created_at', { ascending: false });
      
    if (refError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', refError);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 –¥–Ω—è: ${referralTx?.length || 0}`);
      
      const refStats = {
        total: referralTx?.length || 0,
        bySourceUser: {},
        totalRewards: 0,
        anomalousUsers: []
      };
      
      referralTx?.forEach(tx => {
        refStats.totalRewards += parseFloat(tx.amount);
        const sourceUserId = tx.metadata?.source_user_id;
        if (sourceUserId) {
          if (!refStats.bySourceUser[sourceUserId]) {
            refStats.bySourceUser[sourceUserId] = { count: 0, total: 0 };
          }
          refStats.bySourceUser[sourceUserId].count++;
          refStats.bySourceUser[sourceUserId].total += parseFloat(tx.amount);
        }
      });
      
      // –ù–∞–π—Ç–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (>100 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
      Object.entries(refStats.bySourceUser).forEach(([userId, data]) => {
        if (data.count > 100) {
          refStats.anomalousUsers.push({
            userId: parseInt(userId),
            count: data.count,
            total: data.total.toFixed(2)
          });
        }
      });
      
      console.log(`üí∞ –û–±—â–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: ${refStats.totalRewards.toFixed(2)} UNI`);
      console.log(`üö® –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (>100 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
      refStats.anomalousUsers.forEach(user => {
        console.log(`   User ${user.userId}: ${user.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${user.total} UNI`);
      });
      
      auditResults.referralAnomalies = refStats;
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüîç 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const { data: recentUsers, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, created_at, referred_by')
      .gte('created_at', '2025-07-19T00:00:00')
      .order('created_at', { ascending: false });
      
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
    } else {
      console.log(`üìä –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 3 –¥–Ω—è: ${recentUsers?.length || 0}`);
      
      const userStats = {
        total: recentUsers?.length || 0,
        withReferrals: 0,
        byReferrer: {},
        suspiciousPatterns: []
      };
      
      recentUsers?.forEach(user => {
        if (user.referred_by) {
          userStats.withReferrals++;
          userStats.byReferrer[user.referred_by] = (userStats.byReferrer[user.referred_by] || 0) + 1;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∏–º–µ–Ω–∞—Ö
        if (user.username && user.username.includes('test_user_')) {
          userStats.suspiciousPatterns.push({
            id: user.id,
            telegram_id: user.telegram_id,
            username: user.username,
            created_at: user.created_at
          });
        }
      });
      
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${userStats.withReferrals}/${userStats.total}`);
      console.log(`üìà –¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:`);
      Object.entries(userStats.byReferrer)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .forEach(([referrerId, count]) => {
          console.log(`   User ${referrerId}: ${count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
        });
        
      if (userStats.suspiciousPatterns.length > 0) {
        console.log(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (test_user_*):`);
        userStats.suspiciousPatterns.forEach(user => {
          console.log(`   User ${user.id}: ${user.username}, ${user.created_at}`);
        });
      }
      
      auditResults.userPatterns = userStats;
    }
    
    // 4. –ê–Ω–∞–ª–∏–∑ farming –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüîç 4. –ê–Ω–∞–ª–∏–∑ farming –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    const { data: farmingTx, error: farmingError } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['FARMING_REWARD', 'FARMING_DEPOSIT'])
      .gte('created_at', '2025-07-20T00:00:00')
      .order('created_at', { ascending: false });
      
    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', farmingError);
    } else {
      console.log(`üìä Farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 –¥–Ω—è: ${farmingTx?.length || 0}`);
      
      const farmingStats = {
        total: farmingTx?.length || 0,
        rewards: 0,
        deposits: 0,
        byUser: {},
        anomalousRewards: []
      };
      
      farmingTx?.forEach(tx => {
        if (tx.type === 'FARMING_REWARD') {
          farmingStats.rewards += parseFloat(tx.amount);
          
          // –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥
          if (parseFloat(tx.amount) > 100) {
            farmingStats.anomalousRewards.push({
              user_id: tx.user_id,
              amount: tx.amount,
              created_at: tx.created_at
            });
          }
        } else if (tx.type === 'FARMING_DEPOSIT') {
          farmingStats.deposits += parseFloat(tx.amount);
        }
        
        if (!farmingStats.byUser[tx.user_id]) {
          farmingStats.byUser[tx.user_id] = { rewards: 0, deposits: 0, count: 0 };
        }
        farmingStats.byUser[tx.user_id].count++;
        if (tx.type === 'FARMING_REWARD') {
          farmingStats.byUser[tx.user_id].rewards += parseFloat(tx.amount);
        } else {
          farmingStats.byUser[tx.user_id].deposits += parseFloat(tx.amount);
        }
      });
      
      console.log(`üåæ –û–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã farming: ${farmingStats.rewards.toFixed(2)} UNI`);
      console.log(`üí∞ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã: ${farmingStats.deposits.toFixed(2)} UNI`);
      
      if (farmingStats.anomalousRewards.length > 0) {
        console.log(`‚ö†Ô∏è –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ farming –Ω–∞–≥—Ä–∞–¥—ã (>100 UNI):`);
        farmingStats.anomalousRewards.slice(0, 10).forEach(tx => {
          console.log(`   User ${tx.user_id}: ${tx.amount} UNI, ${tx.created_at}`);
        });
      }
      
      auditResults.systemHealth = farmingStats;
    }
    
    // 5. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüîç 5. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...');
    const { data: allRecentTx, error: timeError } = await supabase
      .from('transactions')
      .select('created_at, type, user_id')
      .gte('created_at', '2025-07-20T00:00:00')
      .order('created_at', { ascending: false });
      
    if (timeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', timeError);
    } else {
      const timeStats = {
        total: allRecentTx?.length || 0,
        byHour: {},
        peakActivity: [],
        anomalousHours: []
      };
      
      allRecentTx?.forEach(tx => {
        const hour = tx.created_at.substring(0, 13); // YYYY-MM-DDTHH
        timeStats.byHour[hour] = (timeStats.byHour[hour] || 0) + 1;
      });
      
      // –ù–∞–π—Ç–∏ —á–∞—Å—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      Object.entries(timeStats.byHour).forEach(([hour, count]) => {
        if (count > 200) {
          timeStats.anomalousHours.push({ hour, count });
        }
      });
      
      console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 –¥–Ω—è: ${timeStats.total}`);
      console.log(`‚ö†Ô∏è –ß–∞—Å—ã —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (>200 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
      timeStats.anomalousHours
        .sort((a, b) => b.count - a.count)
        .slice(0, 10)
        .forEach(({ hour, count }) => {
          console.log(`   ${hour}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        });
      
      auditResults.timelineAnalysis = timeStats;
    }
    
    // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    console.log('\n=== –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó ===');
    console.log(`üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${auditResults.tonTransactions.total || 0}`);
    console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${auditResults.referralAnomalies.total || 0}`);
    console.log(`   –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${auditResults.userPatterns.total || 0}`);
    console.log(`   Farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${auditResults.systemHealth.total || 0}`);
    
    console.log(`\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏:`);
    console.log(`   –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${auditResults.referralAnomalies.anomalousUsers?.length || 0}`);
    console.log(`   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${auditResults.userPatterns.suspiciousPatterns?.length || 0}`);
    console.log(`   –ß–∞—Å–æ–≤ —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: ${auditResults.timelineAnalysis.anomalousHours?.length || 0}`);
    
    console.log('\n=== –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù ===');
    
    return auditResults;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error);
    return null;
  }
}

comprehensiveSystemAudit();