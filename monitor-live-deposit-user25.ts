/**
 * –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ü–û–õ–ù–ï–ù–ò–Ø USER 25 –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫—É–¥–∞ –ø–æ–π–¥–µ—Ç –¥–µ–ø–æ–∑–∏—Ç –∏ —á—Ç–æ —Å –Ω–∏–º –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
 */

import { supabase } from './core/supabase.js';

let monitoringActive = true;
let lastTransactionId = 0;
let lastBalanceCheck = { uni: 0, ton: 0 };

async function monitorDeposit() {
  console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–ï–ü–û–ó–ò–¢–ê USER 25 - –ó–ê–ü–£–©–ï–ù');
  console.log('‚è∞ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', new Date().toISOString());

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log('\n=== –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è User 25
  const { data: profiles } = await supabase
    .from('users')
    .select('id, telegram_id, username, balance_uni, balance_ton, updated_at')
    .or('telegram_id.eq.25,id.eq.25');

  console.log('üë• –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π User 25:', profiles?.length || 0);
  
  if (profiles) {
    profiles.forEach((profile, i) => {
      console.log(`  –ü—Ä–æ—Ñ–∏–ª—å ${i+1}:`);
      console.log(`    internal_id: ${profile.id}`);
      console.log(`    telegram_id: ${profile.telegram_id}`);
      console.log(`    username: ${profile.username}`);
      console.log(`    balance_uni: ${profile.balance_uni}`);
      console.log(`    balance_ton: ${profile.balance_ton}`);
      console.log(`    updated_at: ${profile.updated_at}`);
      console.log('    ---');
      
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
      if (profile.telegram_id === 25) {
        lastBalanceCheck.uni = parseFloat(profile.balance_uni) || 0;
        lastBalanceCheck.ton = parseFloat(profile.balance_ton) || 0;
        console.log(`üìä –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: ${lastBalanceCheck.uni} UNI, ${lastBalanceCheck.ton} TON`);
      }
    });
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: lastTx } = await supabase
    .from('transactions')
    .select('id')
    .order('id', { ascending: false })
    .limit(1);
  
  if (lastTx && lastTx[0]) {
    lastTransactionId = lastTx[0].id;
    console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ: ID ${lastTransactionId}`);
  }

  console.log('\nüöÄ –ì–û–¢–û–í –ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–£! –î–µ–ª–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...\n');

  // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  const monitorInterval = setInterval(async () => {
    try {
      await checkForChanges();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
  setTimeout(() => {
    monitoringActive = false;
    clearInterval(monitorInterval);
    console.log('\n‚è∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù (10 –º–∏–Ω—É—Ç)');
  }, 10 * 60 * 1000);
}

async function checkForChanges() {
  if (!monitoringActive) return;

  const now = new Date().toISOString();
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: newTransactions } = await supabase
    .from('transactions')
    .select('*')
    .gt('id', lastTransactionId)
    .order('id', { ascending: true });

  if (newTransactions && newTransactions.length > 0) {
    console.log(`\nüÜï –ù–û–í–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´: ${newTransactions.length}`);
    
    newTransactions.forEach((tx) => {
      console.log(`  ‚ö° ID ${tx.id}: User ${tx.user_id} | ${tx.type}`);
      console.log(`     –°—É–º–º–∞: ${tx.amount_uni || tx.amount_ton} ${tx.currency}`);
      console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`     –í—Ä–µ–º—è: ${tx.created_at}`);
      console.log(`     Hash: ${tx.tx_hash || '–Ω–µ—Ç'}`);
      
      // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ User 25
      if (tx.user_id === 25) {
        console.log(`     üéØ –≠–¢–û –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø USER 25!`);
        console.log(`     üîç –¢–∏–ø: ${tx.type}`);
        console.log(`     üí∞ –°—É–º–º–∞: ${tx.amount_uni || tx.amount_ton} ${tx.currency}`);
      }
      
      // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ User 227 (–¥—É–±–ª–∏–∫–∞—Ç)
      if (tx.user_id === 227) {
        console.log(`     ‚ö†Ô∏è –≠–¢–û –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–ê USER 227!`);
        console.log(`     üîç –¢–∏–ø: ${tx.type}`);
        console.log(`     üí∞ –°—É–º–º–∞: ${tx.amount_uni || tx.amount_ton} ${tx.currency}`);
      }
      
      console.log('     ---');
      
      lastTransactionId = Math.max(lastTransactionId, tx.id);
    });
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
  const { data: currentProfiles } = await supabase
    .from('users')
    .select('id, telegram_id, balance_uni, balance_ton, updated_at')
    .or('telegram_id.eq.25,id.eq.25');

  if (currentProfiles) {
    currentProfiles.forEach((profile) => {
      const currentUni = parseFloat(profile.balance_uni) || 0;
      const currentTon = parseFloat(profile.balance_ton) || 0;
      
      if (profile.telegram_id === 25) {
        const uniDiff = currentUni - lastBalanceCheck.uni;
        const tonDiff = currentTon - lastBalanceCheck.ton;
        
        if (Math.abs(uniDiff) > 0.001 || Math.abs(tonDiff) > 0.001) {
          console.log(`\nüìä –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –û–°–ù–û–í–ù–û–ì–û –ü–†–û–§–ò–õ–Ø (telegram_id=25):`);
          console.log(`   UNI: ${lastBalanceCheck.uni} ‚Üí ${currentUni} (${uniDiff > 0 ? '+' : ''}${uniDiff.toFixed(6)})`);
          console.log(`   TON: ${lastBalanceCheck.ton} ‚Üí ${currentTon} (${tonDiff > 0 ? '+' : ''}${tonDiff.toFixed(6)})`);
          console.log(`   –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${profile.updated_at}`);
          
          lastBalanceCheck.uni = currentUni;
          lastBalanceCheck.ton = currentTon;
        }
      }
      
      if (profile.id === 25 && profile.telegram_id !== 25) {
        console.log(`\n‚ö†Ô∏è –ë–ê–õ–ê–ù–° –î–£–ë–õ–ò–ö–ê–¢–ê (internal_id=25, telegram_id=${profile.telegram_id}):`);
        console.log(`   UNI: ${profile.balance_uni}`);
        console.log(`   TON: ${profile.balance_ton}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${profile.updated_at}`);
      }
    });
  }
}

monitorDeposit();