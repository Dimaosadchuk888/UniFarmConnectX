import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function analyzeActualProblem() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ –î–£–ë–õ–ò–ö–ê–¢–û–í');
  console.log('=' .repeat(80));

  try {
    // 1. –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã TON_DEPOSIT —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º tx_hash_unique
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í TON_DEPOSIT –° –û–î–ò–ù–ê–ö–û–í–´–ú TX_HASH:');
    
    const { data: tonDeposits, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .not('tx_hash_unique', 'is', null)
      .order('created_at', { ascending: false })
      .limit(500);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON_DEPOSIT:', error);
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tonDeposits?.length || 0} TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å tx_hash_unique`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash_unique –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const hashGroups = {};
    tonDeposits?.forEach(tx => {
      const hash = tx.tx_hash_unique;
      if (!hashGroups[hash]) hashGroups[hash] = [];
      hashGroups[hash].push(tx);
    });

    // –ò—â–µ–º –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    let duplicateGroups = 0;
    let totalDuplicates = 0;
    Object.entries(hashGroups).forEach(([hash, transactions]) => {
      if (transactions.length > 1) {
        duplicateGroups++;
        totalDuplicates += transactions.length;
        
        console.log(`\nüö® –î–£–ë–õ–ò–ö–ê–¢ TON_DEPOSIT #${duplicateGroups}:`);
        console.log(`   TX Hash: ${hash.substring(0, 20)}...`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        
        transactions.forEach((tx, i) => {
          console.log(`   ${i + 1}. ID: ${tx.id} | User: ${tx.user_id} | ${tx.created_at}`);
          console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status} | –°—É–º–º–∞: ${tx.amount_ton} TON`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log(`      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata)}`);
        });
      }
    });

    console.log(`\nüìä –ò–¢–û–ì–û TON_DEPOSIT –î–£–ë–õ–ò–ö–ê–¢–û–í:`);
    console.log(`   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateGroups}`);
    console.log(`   –í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`);

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º BOC –¥—É–±–ª–∏–∫–∞—Ç—ã
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö BOC –î–£–ë–õ–ò–ö–ê–¢–û–í (–°–£–§–§–ò–ö–°–´):');
    
    const bocHashes = tonDeposits
      ?.filter(tx => tx.tx_hash_unique && tx.tx_hash_unique.startsWith('te6'))
      .map(tx => ({
        id: tx.id,
        user_id: tx.user_id,
        full_hash: tx.tx_hash_unique,
        base_boc: tx.tx_hash_unique.replace(/_\d{13}_[a-z0-9]+$/, ''),
        created_at: tx.created_at,
        status: tx.status
      })) || [];

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${bocHashes.length} BOC —Ö–µ—à–µ–π`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É BOC
    const bocGroups = {};
    bocHashes.forEach(tx => {
      const baseBoc = tx.base_boc;
      if (!bocGroups[baseBoc]) bocGroups[baseBoc] = [];
      bocGroups[baseBoc].push(tx);
    });

    let bocDuplicates = 0;
    Object.entries(bocGroups).forEach(([baseBoc, transactions]) => {
      if (transactions.length > 1) {
        bocDuplicates++;
        console.log(`\nüö® BOC –î–£–ë–õ–ò–ö–ê–¢ #${bocDuplicates}:`);
        console.log(`   –ë–∞–∑–æ–≤—ã–π BOC: ${baseBoc.substring(0, 30)}...`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        
        transactions.forEach((tx, i) => {
          const suffix = tx.full_hash.replace(baseBoc, '');
          console.log(`   ${i + 1}. ID: ${tx.id} | User: ${tx.user_id} | ${tx.created_at.substring(11, 19)}`);
          console.log(`      –°—É—Ñ—Ñ–∏–∫—Å: ${suffix}`);
          console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        });
      }
    });

    console.log(`\nüìä –ò–¢–û–ì–û BOC –î–£–ë–õ–ò–ö–ê–¢–û–í: ${bocDuplicates}`);

    // 3. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:');
    
    if (duplicateGroups > 0 || bocDuplicates > 0) {
      const allDuplicateGroups = [
        ...Object.values(hashGroups).filter(group => group.length > 1),
        ...Object.values(bocGroups).filter(group => group.length > 1)
      ];

      const timeGaps = [];
      allDuplicateGroups.forEach(group => {
        for (let i = 1; i < group.length; i++) {
          const gap = Math.abs(
            new Date(group[i].created_at).getTime() - 
            new Date(group[i-1].created_at).getTime()
          ) / 1000;
          timeGaps.push(gap);
        }
      });

      if (timeGaps.length > 0) {
        const avgGap = timeGaps.reduce((a, b) => a + b, 0) / timeGaps.length;
        const minGap = Math.min(...timeGaps);
        const maxGap = Math.max(...timeGaps);
        
        console.log(`–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:`);
        console.log(`  –°—Ä–µ–¥–Ω–µ–µ: ${avgGap.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
        console.log(`  –ú–∏–Ω–∏–º—É–º: ${minGap.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
        console.log(`  –ú–∞–∫—Å–∏–º—É–º: ${maxGap.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      }
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    
    if (duplicateGroups === 0 && bocDuplicates === 0) {
      console.log('‚úÖ –ù–ï–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í TON_DEPOSIT —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º tx_hash_unique!');
      console.log('ü§î –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ...');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–ª–∏ –±–µ–∑ tx_hash_unique');
    } else {
      console.log(`üö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ TON_DEPOSIT:`);
      console.log(`   ${duplicateGroups} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ tx_hash_unique`);
      console.log(`   ${bocDuplicates} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ BOC`);
      console.log(`   ‚úÖ –¢–ï–û–†–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!`);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeActualProblem().catch(console.error);