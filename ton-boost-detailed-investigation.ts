import { supabase } from './core/supabase';

async function investigateTonBoost() {
  console.log('=== TON BOOST –î–ï–¢–ê–õ–¨–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï ===\n');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üìä 1. –°–û–°–¢–û–Ø–ù–ò–ï –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:\n');
    
    const { data: lastReward, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (!rewardError && lastReward) {
      const now = new Date();
      const lastTime = new Date(lastReward.created_at);
      const diffMinutes = (now.getTime() - lastTime.getTime()) / 60000;
      
      console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${diffMinutes.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      console.log(`–í—Ä–µ–º—è: ${lastTime.toLocaleString()}`);
      console.log(`–°—É–º–º–∞: ${lastReward.amount} TON`);
      console.log(`–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${diffMinutes > 10 ? '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢' : '‚úÖ –†–ê–ë–û–¢–ê–ï–¢'}\n`);
    } else {
      console.log('‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON Boost\n');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
    console.log('üë§ 2. –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 74:\n');
    
    // –ò–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active, ton_boost_package_id, ton_farming_balance')
      .eq('id', 74)
      .single();

    if (!userError && userData) {
      console.log('–¢–∞–±–ª–∏—Ü–∞ users:');
      console.log(`  balance_ton: ${userData.balance_ton} TON`);
      console.log(`  ton_boost_active: ${userData.ton_boost_active}`);
      console.log(`  ton_boost_package_id: ${userData.ton_boost_package_id || 'NULL'}`);
      console.log(`  ton_farming_balance: ${userData.ton_farming_balance || 'NULL'} ${userData.ton_farming_balance ? '‚úÖ' : '‚ùå'}\n`);
    }

    // –ò–∑ —Ç–∞–±–ª–∏—Ü—ã ton_farming_data
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', 74)
      .single();

    if (!farmingError && farmingData) {
      console.log('–¢–∞–±–ª–∏—Ü–∞ ton_farming_data:');
      console.log(`  farming_balance: ${farmingData.farming_balance} TON ${parseFloat(farmingData.farming_balance) > 0 ? '‚úÖ' : '‚ùå'}`);
      console.log(`  boost_active: ${farmingData.boost_active}`);
      console.log(`  boost_package_id: ${farmingData.boost_package_id}`);
      console.log(`  farming_rate: ${farmingData.farming_rate}%`);
      console.log(`  updated_at: ${new Date(farmingData.updated_at).toLocaleString()}\n`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ TON Boost
    console.log('üõí 3. –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–ö–£–ü–ö–ò TON BOOST:\n');
    
    const { data: purchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .in('type', ['BOOST_PURCHASE', 'FARMING_REWARD'])
      .eq('currency', 'TON')
      .like('description', '%Boost%')
      .order('created_at', { ascending: false })
      .limit(5);

    if (!purchaseError && purchases) {
      const boostPurchases = purchases.filter(t => 
        t.description && (t.description.includes('–ü–æ–∫—É–ø–∫–∞ TON Boost') || t.amount < 0)
      );
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: ${boostPurchases.length}`);
      
      if (boostPurchases.length > 0) {
        console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:');
        boostPurchases.slice(0, 3).forEach(p => {
          console.log(`  ${new Date(p.created_at).toLocaleString()}: ${p.amount} TON - ${p.description}`);
          if (p.metadata) {
            console.log(`    Metadata: ${JSON.stringify(p.metadata)}`);
          }
        });
      }
    }

    // 4. –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîç 4. –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:\n');
    
    console.log('–ü–†–û–ë–õ–ï–ú–ê #1: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
    console.log('  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç setInterval –≤–º–µ—Å—Ç–æ cron');
    console.log('  - –ù–µ—Ç –ª–æ–≥–æ–≤ –æ —Å—Ç–∞—Ä—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
    console.log('  - –û—à–∏–±–∫–∏ –≤ –º–µ—Ç–æ–¥–µ start() –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n');
    
    console.log('–ü–†–û–ë–õ–ï–ú–ê #2: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞');
    console.log('  - –ö–æ–¥: userDeposit = balance_ton - 10');
    console.log('  - –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: userDeposit = farming_balance');
    console.log(`  - –¢–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç: ${userData?.balance_ton} TON`);
    console.log(`  - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç: ${farmingData?.farming_balance || 0} TON\n`);
    
    console.log('–ü–†–û–ë–õ–ï–ú–ê #3: farming_balance –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
    console.log('  - activateBoost() –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞');
    console.log('  - purchaseBoost() –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç —Å—É–º–º—É –≤ activateBoost()');
    console.log('  - –†–µ–∑—É–ª—å—Ç–∞—Ç: farming_balance –≤—Å–µ–≥–¥–∞ 0\n');

    // 5. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    console.log('üí∞ 5. –§–ò–ù–ê–ù–°–û–í–û–ï –í–û–ó–î–ï–ô–°–¢–í–ò–ï:\n');
    
    if (userData && farmingData) {
      const balanceTon = parseFloat(userData.balance_ton || '0');
      const farmingBalance = parseFloat(farmingData.farming_balance || '0');
      const rate = parseFloat(farmingData.farming_rate || '0') / 100;
      
      const currentDailyIncome = (balanceTon - 10) * rate;
      const correctDailyIncome = farmingBalance * rate;
      
      console.log(`–¢–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç (–Ω–µ–≤–µ—Ä–Ω—ã–π):`);
      console.log(`  –ë–∞–∑–∞: ${balanceTon - 10} TON`);
      console.log(`  –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${currentDailyIncome.toFixed(3)} TON`);
      
      console.log(`\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:`);
      console.log(`  –ë–∞–∑–∞: ${farmingBalance} TON`);
      console.log(`  –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${correctDailyIncome.toFixed(3)} TON`);
      
      if (farmingBalance > 0 && currentDailyIncome > 0) {
        const overcharge = currentDailyIncome / correctDailyIncome;
        console.log(`\n‚ùå –ó–ê–í–´–®–ï–ù–ò–ï: –≤ ${overcharge.toFixed(1)} —Ä–∞–∑!`);
      }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìà 6. –í–°–ï –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n');
    
    const { data: activeUsers, error: activeError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_active, boost_package_id')
      .eq('boost_active', true);

    if (!activeError && activeUsers) {
      console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}`);
      
      let zeroBalanceCount = 0;
      activeUsers.forEach(u => {
        if (parseFloat(u.farming_balance) === 0) zeroBalanceCount++;
      });
      
      console.log(`–° –Ω—É–ª–µ–≤—ã–º farming_balance: ${zeroBalanceCount} (${(zeroBalanceCount/activeUsers.length*100).toFixed(0)}%)`);
      
      if (zeroBalanceCount === activeUsers.length) {
        console.log('\n‚ùå –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç farming_balance = 0!');
        console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–∫–µ—Ç–æ–≤.');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

investigateTonBoost();