/**
 * T63 - –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ UNI
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –æ—Ç farming —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function checkRealDeposits() {
  console.log('=== –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í ===');
  
  const { data: users, error } = await supabase
    .from('users')
    .select('id, telegram_id, username, balance_uni, balance_ton, uni_farming_rate, referred_by')
    .gt('uni_farming_rate', 0)
    .order('id');
    
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
  
  console.log('\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏:');
  users.forEach(user => {
    console.log(`ID ${user.id} (${user.telegram_id}): ${user.balance_uni} UNI, rate: ${user.uni_farming_rate}, referrer: ${user.referred_by || 'none'}`);
  });
  
  return users;
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª UNI farming income
 */
async function simulateRealFarmingCycle(users) {
  console.log('\n=== –°–ò–ú–£–õ–Ø–¶–ò–Ø UNI FARMING –¶–ò–ö–õ–ê ===');
  
  const results = [];
  
  for (const user of users) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
    const farmingRate = parseFloat(user.uni_farming_rate);
    const income = farmingRate * (5 / 60); // 5 –º–∏–Ω—É—Ç –∏–∑ 60 –≤ —á–∞—Å–µ
    const currentBalance = parseFloat(user.balance_uni);
    const newBalance = currentBalance + income;
    
    console.log(`User ID ${user.id}: +${income.toFixed(6)} UNI (${currentBalance.toFixed(6)} ‚Üí ${newBalance.toFixed(6)})`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
      .from('users')
      .update({ balance_uni: newBalance.toFixed(6) })
      .eq('id', user.id);
      
    if (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ User ID ${user.id}:`, error);
      continue;
    }
    
    results.push({
      userId: user.id,
      income: income,
      newBalance: newBalance,
      referrerId: user.referred_by
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é farming –¥–æ—Ö–æ–¥–∞
    await supabase
      .from('transactions')
      .insert({
        user_id: user.id,
        type: 'FARMING_REWARD',
        amount: income.toFixed(6),
        currency: 'UNI',
        status: 'completed',
        description: `UNI farming income (rate: ${farmingRate})`
      });
  }
  
  return results;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ farming –¥–æ—Ö–æ–¥–∞
 */
async function processReferralRewards(farmingResults) {
  console.log('\n=== –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø ===');
  
  for (const result of farmingResults) {
    if (!result.referrerId) {
      console.log(`User ID ${result.userId}: –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞`);
      continue;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é (1 —É—Ä–æ–≤–µ–Ω—å = 100% –æ—Ç –¥–æ—Ö–æ–¥–∞)
    const referralReward = result.income * 1.0; // 100% –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const { data: referrer, error } = await supabase
      .from('users')
      .select('id, balance_uni, username')
      .eq('id', result.referrerId)
      .single();
      
    if (error || !referrer) {
      console.log(`User ID ${result.userId}: —Ä–µ—Ñ–µ—Ä–µ—Ä ID ${result.referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    const currentReferrerBalance = parseFloat(referrer.balance_uni);
    const newReferrerBalance = currentReferrerBalance + referralReward;
    
    console.log(`User ID ${result.userId} ‚Üí Referrer ID ${result.referrerId}: +${referralReward.toFixed(6)} UNI`);
    console.log(`  Referrer ${referrer.username}: ${currentReferrerBalance.toFixed(6)} ‚Üí ${newReferrerBalance.toFixed(6)} UNI`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    await supabase
      .from('users')
      .update({ balance_uni: newReferrerBalance.toFixed(6) })
      .eq('id', result.referrerId);
      
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
    await supabase
      .from('transactions')
      .insert({
        user_id: result.referrerId,
        type: 'REFERRAL_REWARD',
        amount: referralReward.toFixed(6),
        currency: 'UNI',
        status: 'completed',
        description: `Referral reward from User ID ${result.userId} farming`
      });
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runRealDepositsTest() {
  try {
    console.log('T63 - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• UNI –î–ï–ü–û–ó–ò–¢–û–í');
    console.log('='.repeat(60));
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    const activeUsers = await checkRealDeposits();
    
    if (activeUsers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏');
      return;
    }
    
    console.log(`\nüîÑ –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º UNI farming`);
    
    // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–∏–∫–ª farming —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    const farmingResults = await simulateRealFarmingCycle(activeUsers);
    
    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    await processReferralRewards(farmingResults);
    
    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const totalIncome = farmingResults.reduce((sum, r) => sum + r.income, 0);
    console.log(`–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç farming: ${totalIncome.toFixed(6)} UNI`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏: ${farmingResults.filter(r => r.referrerId).length}`);
    
    console.log('\n‚úÖ T63 COMPLETED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå T63 ERROR:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runRealDepositsTest();