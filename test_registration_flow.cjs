const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testRegistrationFlow() {
  console.log('=== –¢–ï–°–¢ –ü–†–û–¶–ï–°–°–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: users, error: usersError } = await supabase
    .from('users')
    .select('id, telegram_id, username, referred_by, created_at')
    .order('created_at', { ascending: false })
    .limit(3);
  
  if (usersError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
    return;
  }
  
  console.log('\n=== –ü–û–°–õ–ï–î–ù–ò–ï 3 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
  users.forEach(user => {
    console.log(`User ${user.id}: TG ${user.telegram_id} (${user.username})`);
    console.log(`  referred_by: ${user.referred_by}`);
    console.log(`  created: ${user.created_at}`);
    console.log('');
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ referrals
  const { data: referrals, error: referralsError } = await supabase
    .from('referrals')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(5);
  
  if (referralsError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è referrals:', referralsError);
    return;
  }
  
  console.log('\n=== –ó–ê–ü–ò–°–ò –í REFERRALS ===');
  console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${referrals.length}`);
  if (referrals.length > 0) {
    referrals.forEach(ref => {
      console.log(`User ${ref.user_id} -> Inviter ${ref.inviter_id}, Level ${ref.level}`);
      console.log(`  Created: ${ref.created_at}`);
    });
  } else {
    console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals!');
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∏–º User 184 (–æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
  const { data: user184, error: user184Error } = await supabase
    .from('users')
    .select('id, telegram_id, username, ref_code, referred_by, created_at')
    .eq('id', 184)
    .single();
  
  if (user184Error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è User 184:', user184Error);
    return;
  }
  
  console.log('\n=== –î–ê–ù–ù–´–ï USER 184 (–û–°–ù–û–í–ù–û–ô –†–ï–§–ï–†–ï–†) ===');
  console.log(`User 184: TG ${user184.telegram_id} (${user184.username})`);
  console.log(`Ref code: ${user184.ref_code}`);
  console.log(`Referred by: ${user184.referred_by}`);
  console.log(`Created: ${user184.created_at}`);
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ—Ö –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ User 184
  const { data: shouldBeReferrals, error: shouldBeError } = await supabase
    .from('users')
    .select('id, telegram_id, username, referred_by, created_at')
    .eq('referred_by', 184)
    .order('created_at', { ascending: false });
  
  if (shouldBeError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ User 184:', shouldBeError);
    return;
  }
  
  console.log('\n=== –†–ï–§–ï–†–ê–õ–´ USER 184 –í –¢–ê–ë–õ–ò–¶–ï USERS ===');
  console.log(`–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${shouldBeReferrals.length}`);
  if (shouldBeReferrals.length > 0) {
    shouldBeReferrals.forEach(user => {
      console.log(`User ${user.id}: TG ${user.telegram_id} (${user.username})`);
      console.log(`  Created: ${user.created_at}`);
    });
  } else {
    console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ users!');
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–ø–∏—Å–∏ –≤ referrals –¥–ª—è User 184
  const { data: referralsFor184, error: ref184Error } = await supabase
    .from('referrals')
    .select('*')
    .eq('inviter_id', 184)
    .order('created_at', { ascending: false });
  
  if (ref184Error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referrals –¥–ª—è User 184:', ref184Error);
    return;
  }
  
  console.log('\n=== –ó–ê–ü–ò–°–ò –í REFERRALS –î–õ–Ø USER 184 ===');
  console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${referralsFor184.length}`);
  if (referralsFor184.length > 0) {
    referralsFor184.forEach(ref => {
      console.log(`User ${ref.user_id} -> Inviter ${ref.inviter_id}, Level ${ref.level}`);
      console.log(`  Created: ${ref.created_at}`);
    });
  } else {
    console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ referrals –¥–ª—è User 184!');
  }
  
  console.log('\n=== –í–´–í–û–î–´ ===');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É processReferral() –≤ auth/service.ts');
  console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∑–æ–≤ processReferral() –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã referrals');
  
  process.exit(0);
}

testRegistrationFlow().catch(console.error);