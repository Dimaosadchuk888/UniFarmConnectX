/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON BOOST - 25 –∏—é–ª—è 2025
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –≤ users, –Ω–æ –ë–ï–ó –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data
 * –¢–û–õ–¨–ö–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê!
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

interface UserWithTonBoost {
    id: number;
    ton_boost_package: number | null;
    ton_boost_package_id: number | null;
    ton_boost_rate: number | null;
    balance_ton: number;
    created_at: string;
}

interface TonFarmingRecord {
    user_id: string;
    boost_package_id: number;
    farming_balance: number;
    rate_ton_per_second: number;
    created_at: string;
}

interface BoostPurchaseRecord {
    id: number;
    user_id: number;
    amount: number;
    status: string;
    created_at: string;
}

async function criticalTonBoostSyncDiagnostic() {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON BOOST');
    console.log('=' .repeat(70));
    
    try {
        // 1. –ü–û–õ–£–ß–ê–ï–ú –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST –ü–ê–ö–ï–¢–ê–ú–ò
        console.log('\nüìä –®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON BOOST –í –¢–ê–ë–õ–ò–¶–ï USERS');
        const { data: usersWithTonBoost, error: usersError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_package_id, ton_boost_rate, balance_ton, created_at')
            .not('ton_boost_package', 'is', null)
            .order('id', { ascending: true });

        if (usersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithTonBoost?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–∞–∫–µ—Ç–∞–º–∏`);

        // 2. –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –ó–ê–ü–ò–°–ò –ò–ó TON_FARMING_DATA
        console.log('\nüìä –®–ê–ì 2: –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–ï TON_FARMING_DATA');
        const { data: farmingRecords, error: farmingError } = await supabase
            .from('ton_farming_data')
            .select('*')
            .order('user_id', { ascending: true });

        if (farmingError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è farming –¥–∞–Ω–Ω—ã—Ö:', farmingError);
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingRecords?.length || 0} –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data`);

        // 3. –ü–û–ò–°–ö –ù–ï–°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        console.log('\nüîç –®–ê–ì 3: –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ë–ï–ó –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
        
        if (!usersWithTonBoost || !farmingRecords) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }

        const farmingUserIds = new Set(farmingRecords.map(r => r.user_id));
        const missingUsers = usersWithTonBoost.filter(user => 
            !farmingUserIds.has(user.id.toString())
        );

        console.log(`üö® –ù–ê–ô–î–ï–ù–û ${missingUsers.length} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò –ë–ï–ó FARMING –ó–ê–ü–ò–°–ï–ô:`);
        
        if (missingUsers.length > 0) {
            console.log('\n' + '‚ö†Ô∏è '.repeat(35));
            console.log('–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ü–£–©–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
            console.log('‚ö†Ô∏è '.repeat(35));
            
            missingUsers.forEach((user, index) => {
                console.log(`\n${index + 1}. üö® USER ID ${user.id}:`);
                console.log(`   üì¶ TON Boost Package: ${user.ton_boost_package}`);
                console.log(`   üÜî Package ID: ${user.ton_boost_package_id}`);
                console.log(`   ‚ö° Rate: ${user.ton_boost_rate} TON/—Å–µ–∫`);
                console.log(`   üí∞ Balance TON: ${user.balance_ton}`);
                console.log(`   üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
                console.log(`   ‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ò –í ton_farming_data - –ù–ï –ü–û–õ–£–ß–ê–ï–¢ –î–û–•–û–î–´!`);
            });
        }

        // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–ö–£–ü–ö–ò (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
        console.log('\nüì¶ –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ü–û–ö–£–ü–û–ö TON BOOST');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        const { data: recentPurchases, error: purchasesError } = await supabase
            .from('boost_purchases')
            .select('*')
            .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
            .order('created_at', { ascending: false });

        if (!purchasesError && recentPurchases && recentPurchases.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentPurchases.length} –ø–æ–∫—É–ø–æ–∫ –∑–∞ 24 —á–∞—Å–∞:`);
            recentPurchases.forEach((purchase: any, index) => {
                const isMissing = missingUsers.some(u => u.id === purchase.user_id);
                console.log(`  ${index + 1}. User ${purchase.user_id}: ${purchase.amount} TON, Status: ${purchase.status}`);
                console.log(`     –í—Ä–µ–º—è: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
                if (isMissing) {
                    console.log(`     üö® –≠–¢–û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í –°–ü–ò–°–ö–ï –ü–†–û–ü–£–©–ï–ù–ù–´–•!`);
                }
            });
        } else {
            console.log('‚ÑπÔ∏è –ü–æ–∫—É–ø–æ–∫ –∑–∞ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // 5. –ü–†–û–í–ï–†–Ø–ï–ú –î–û–•–û–î–´ –î–õ–Ø –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        if (missingUsers.length > 0) {
            console.log('\nüí∞ –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –î–û–•–û–î–û–í –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
            
            const missingUserIds = missingUsers.map(u => u.id);
            const { data: incomes, error: incomesError } = await supabase
                .from('transactions')
                .select('user_id, amount, description, created_at')
                .eq('type', 'FARMING_REWARD')
                .eq('currency', 'TON')
                .in('user_id', missingUserIds)
                .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
                .order('created_at', { ascending: false });

            if (!incomesError && incomes) {
                console.log(`üìä –î–æ—Ö–æ–¥—ã –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${incomes.length}`);
                if (incomes.length === 0) {
                    console.log('üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –ü–û–õ–£–ß–ê–Æ–¢ –î–û–•–û–î–´!');
                } else {
                    incomes.forEach(income => {
                        console.log(`  User ${income.user_id}: +${income.amount} TON, ${new Date(income.created_at).toLocaleString('ru-RU')}`);
                    });
                }
            }
        }

        // 6. –û–ë–©–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
        console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${usersWithTonBoost.length}`);
        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å farming: ${usersWithTonBoost.length - missingUsers.length}`);
        console.log(`üö® –ü–†–û–ü–£–©–ï–ù–´ (–ù–ï –ü–û–õ–£–ß–ê–Æ–¢ –î–û–•–û–î–´): ${missingUsers.length}`);
        console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${((usersWithTonBoost.length - missingUsers.length) / usersWithTonBoost.length * 100).toFixed(1)}%`);

        if (missingUsers.length > 0) {
            console.log('\n' + 'üö®'.repeat(35));
            console.log('–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!');
            console.log('üö®'.repeat(35));
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–µ–ø–æ–∑–∏—Ç—ã, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥—ã!');
            console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }

    console.log('\n' + '=' .repeat(70));
    console.log('üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
criticalTonBoostSyncDiagnostic().then(() => {
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
});