/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Telegram Mini App UniFarm
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º telegram_id: 777777777
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

class TelegramMiniAppTest {
  constructor() {
    this.testUser = null;
    this.testResults = {
      authorization: { status: 'pending', tests: [] },
      balance: { status: 'pending', tests: [] },
      farming: { status: 'pending', tests: [] },
      dailyBonus: { status: 'pending', tests: [] },
      referrals: { status: 'pending', tests: [] }
    };
  }

  log(module, test, result, details = null) {
    console.log(`[${module.toUpperCase()}] ${test}: ${result}`);
    if (details) console.log(`  ‚Üí ${details}`);
    
    this.testResults[module].tests.push({
      test,
      result,
      details,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async testAuthorization() {
    try {
      console.log('\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 777777777
      const { data: user, error } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', 777777777)
        .single();

      if (error || !user) {
        this.log('authorization', '–ó–ê–ì–†–£–ó–ö–ê_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', '–û–®–ò–ë–ö–ê', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 777777777 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const userData = {
          telegram_id: 777777777,
          username: 'test_interface_user',
          first_name: 'Test',
          ref_code: `INTERFACE_${Date.now()}`,
          balance_uni: '150.50',
          balance_ton: '75.25',
          checkin_last_date: '2025-06-13', // –í—á–µ—Ä–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
          checkin_streak: 5,
          uni_deposit_amount: '100.0',
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_rate: '0.003',
          uni_farming_balance: '100.0'
        };

        const { data: newUser, error: createError } = await supabase
          .from('users')
          .insert(userData)
          .select()
          .single();

        if (createError) {
          this.log('authorization', '–°–û–ó–î–ê–ù–ò–ï_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', '–û–®–ò–ë–ö–ê', createError.message);
          this.testResults.authorization.status = 'failed';
          return false;
        }

        this.testUser = newUser;
        this.log('authorization', '–°–û–ó–î–ê–ù–ò–ï_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', '–£–°–ü–ï–•', `ID: ${newUser.id}, username: ${newUser.username}`);
      } else {
        this.testUser = user;
        this.log('authorization', '–ó–ê–ì–†–£–ó–ö–ê_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', '–£–°–ü–ï–•', `ID: ${user.id}, username: ${user.username}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      const requiredFields = ['telegram_id', 'username', 'ref_code', 'balance_uni', 'balance_ton'];
      const missingFields = requiredFields.filter(field => !this.testUser[field]);

      if (missingFields.length === 0) {
        this.log('authorization', '–î–ê–ù–ù–´–ï_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', '–£–°–ü–ï–•', '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      } else {
        this.log('authorization', '–î–ê–ù–ù–´–ï_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï', `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
      }

      // –°–∏–º—É–ª—è—Ü–∏—è WebApp –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      this.log('authorization', 'WEBAPP_–ö–û–ù–¢–ï–ö–°–¢', '–°–ò–ú–£–õ–Ø–¶–ò–Ø', '–ò–º–∏—Ç–∞—Ü–∏—è Telegram WebApp –æ–∫—Ä—É–∂–µ–Ω–∏—è');

      this.testResults.authorization.status = 'success';
      return true;

    } catch (error) {
      this.log('authorization', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', '–û–®–ò–ë–ö–ê', error.message);
      this.testResults.authorization.status = 'failed';
      return false;
    }
  }

  /**
   * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  async testBalance() {
    try {
      console.log('\nüí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');

      if (!this.testUser) {
        this.log('balance', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.testResults.balance.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–æ–≤
      const uniBalance = parseFloat(this.testUser.balance_uni || '0');
      const tonBalance = parseFloat(this.testUser.balance_ton || '0');

      this.log('balance', 'UNI_–ë–ê–õ–ê–ù–°', '–£–°–ü–ï–•', `${uniBalance.toFixed(2)} UNI`);
      this.log('balance', 'TON_–ë–ê–õ–ê–ù–°', '–£–°–ü–ï–•', `${tonBalance.toFixed(2)} TON`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      if (!isNaN(uniBalance) && !isNaN(tonBalance)) {
        this.log('balance', '–§–û–†–ú–ê–¢_–ß–ò–°–ï–õ', '–£–°–ü–ï–•', '–ß–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      } else {
        this.log('balance', '–§–û–†–ú–ê–¢_–ß–ò–°–ï–õ', '–û–®–ò–ë–ö–ê', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–æ–≤');
      }

      // –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const updatedBalance = {
        balance_uni: (uniBalance + 5.0).toString(),
        balance_ton: (tonBalance + 1.0).toString()
      };

      const { error: updateError } = await supabase
        .from('users')
        .update(updatedBalance)
        .eq('id', this.testUser.id);

      if (!updateError) {
        this.log('balance', '–û–ë–ù–û–í–õ–ï–ù–ò–ï_–ë–ê–õ–ê–ù–°–ê', '–£–°–ü–ï–•', '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        this.testUser.balance_uni = updatedBalance.balance_uni;
        this.testUser.balance_ton = updatedBalance.balance_ton;
      } else {
        this.log('balance', '–û–ë–ù–û–í–õ–ï–ù–ò–ï_–ë–ê–õ–ê–ù–°–ê', '–û–®–ò–ë–ö–ê', updateError.message);
      }

      this.testResults.balance.status = 'success';
      return true;

    } catch (error) {
      this.log('balance', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', '–û–®–ò–ë–ö–ê', error.message);
      this.testResults.balance.status = 'failed';
      return false;
    }
  }

  /**
   * 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  async testFarming() {
    try {
      console.log('\nüåæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞');

      if (!this.testUser) {
        this.log('farming', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.testResults.farming.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const hasActiveFarming = !!this.testUser.uni_farming_start_timestamp;
      const depositAmount = parseFloat(this.testUser.uni_deposit_amount || '0');
      const farmingRate = parseFloat(this.testUser.uni_farming_rate || '0');

      this.log('farming', '–ê–ö–¢–ò–í–ù–´–ô_–§–ê–†–ú–ò–ù–ì', hasActiveFarming ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï_–ê–ö–¢–ò–í–ï–ù', 
        `–î–µ–ø–æ–∑–∏—Ç: ${depositAmount} UNI, –°—Ç–∞–≤–∫–∞: ${farmingRate}`);

      // –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      if (!hasActiveFarming) {
        const farmingData = {
          uni_deposit_amount: '50.0',
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_rate: '0.002',
          uni_farming_balance: '50.0',
          uni_farming_last_update: new Date().toISOString()
        };

        const { error: startError } = await supabase
          .from('users')
          .update(farmingData)
          .eq('id', this.testUser.id);

        if (!startError) {
          this.log('farming', '–ó–ê–ü–£–°–ö_–§–ê–†–ú–ò–ù–ì–ê', '–£–°–ü–ï–•', '–§–∞—Ä–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º 50 UNI');
          Object.assign(this.testUser, farmingData);
        } else {
          this.log('farming', '–ó–ê–ü–£–°–ö_–§–ê–†–ú–ò–ù–ì–ê', '–û–®–ò–ë–ö–ê', startError.message);
        }
      }

      // –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ (—Å–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
      if (this.testUser.uni_farming_start_timestamp) {
        const startTime = new Date(this.testUser.uni_farming_start_timestamp);
        const now = new Date();
        const hoursElapsed = (now - startTime) / (1000 * 60 * 60);
        const ratePerHour = parseFloat(this.testUser.uni_farming_rate || '0');
        const accumulated = hoursElapsed * ratePerHour;

        this.log('farming', '–†–ê–°–ß–ï–¢_–î–û–•–û–î–ê', '–£–°–ü–ï–•', 
          `${hoursElapsed.toFixed(2)} —á–∞—Å–æ–≤, –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: ${accumulated.toFixed(6)} UNI`);
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ farming_sessions (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
      const sessionData = {
        user_id: this.testUser.id
      };

      const { data: session, error: sessionError } = await supabase
        .from('farming_sessions')
        .insert(sessionData)
        .select()
        .single();

      if (!sessionError) {
        this.log('farming', '–ò–°–¢–û–†–ò–Ø_–°–ï–°–°–ò–ô', '–£–°–ü–ï–•', `–°–µ—Å—Å–∏—è ID: ${session.id} —Å–æ–∑–¥–∞–Ω–∞`);
      } else {
        this.log('farming', '–ò–°–¢–û–†–ò–Ø_–°–ï–°–°–ò–ô', '–ê–î–ê–ü–¢–ê–¶–ò–Ø', '–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã');
      }

      this.testResults.farming.status = 'success';
      return true;

    } catch (error) {
      this.log('farming', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', '–û–®–ò–ë–ö–ê', error.message);
      this.testResults.farming.status = 'failed';
      return false;
    }
  }

  /**
   * 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
   */
  async testDailyBonus() {
    try {
      console.log('\nüéÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');

      if (!this.testUser) {
        this.log('dailyBonus', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.testResults.dailyBonus.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      const today = new Date().toISOString().split('T')[0];
      const lastClaimDate = this.testUser.checkin_last_date;
      const currentStreak = this.testUser.checkin_streak || 0;

      const canClaim = !lastClaimDate || lastClaimDate !== today;

      this.log('dailyBonus', '–ü–†–û–í–ï–†–ö–ê_–î–û–°–¢–£–ü–ù–û–°–¢–ò', canClaim ? '–î–û–°–¢–£–ü–ï–ù' : '–ü–û–õ–£–ß–ï–ù_–°–ï–ì–û–î–ù–Ø', 
        `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ: ${lastClaimDate || '–Ω–∏–∫–æ–≥–¥–∞'}`);

      this.log('dailyBonus', '–¢–ï–ö–£–©–ò–ô_–°–¢–†–ò–ö', '–û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø', `${currentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`);

      if (canClaim) {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        const bonusAmount = 10.0; // –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å
        const streakBonus = Math.min(currentStreak * 0.5, 5.0); // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä–∏–∫ (–º–∞–∫—Å 5)
        const totalBonus = bonusAmount + streakBonus;
        const newStreak = currentStreak + 1;

        this.log('dailyBonus', '–†–ê–°–ß–ï–¢_–ë–û–ù–£–°–ê', '–£–°–ü–ï–•', 
          `–ë–∞–∑–æ–≤—ã–π: ${bonusAmount} + –°—Ç—Ä–∏–∫: ${streakBonus} = ${totalBonus} UNI`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = parseFloat(this.testUser.balance_uni) + totalBonus;
        
        const { error: bonusError } = await supabase
          .from('users')
          .update({
            checkin_last_date: today,
            checkin_streak: newStreak,
            balance_uni: newBalance.toString()
          })
          .eq('id', this.testUser.id);

        if (!bonusError) {
          this.log('dailyBonus', '–ü–û–õ–£–ß–ï–ù–ò–ï_–ë–û–ù–£–°–ê', '–£–°–ü–ï–•', 
            `${totalBonus} UNI –ø–æ–ª—É—á–µ–Ω–æ, —Å—Ç—Ä–∏–∫: ${newStreak}`);

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await supabase
            .from('transactions')
            .insert({
              user_id: this.testUser.id,
              type: 'DAILY_BONUS',
              amount_uni: totalBonus,
              amount_ton: 0,
              description: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Å—Ç—Ä–∏–∫: ${newStreak})`,
              status: 'confirmed'
            });

          this.log('dailyBonus', '–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø_–ë–û–ù–£–°–ê', '–£–°–ü–ï–•', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é');
        } else {
          this.log('dailyBonus', '–ü–û–õ–£–ß–ï–ù–ò–ï_–ë–û–ù–£–°–ê', '–û–®–ò–ë–ö–ê', bonusError.message);
        }
      }

      this.testResults.dailyBonus.status = 'success';
      return true;

    } catch (error) {
      this.log('dailyBonus', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', '–û–®–ò–ë–ö–ê', error.message);
      this.testResults.dailyBonus.status = 'failed';
      return false;
    }
  }

  /**
   * 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  async testReferrals() {
    try {
      console.log('\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');

      if (!this.testUser) {
        this.log('referrals', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.testResults.referrals.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      const refCode = this.testUser.ref_code;
      if (refCode) {
        this.log('referrals', '–†–ï–§–ï–†–ê–õ–¨–ù–´–ô_–ö–û–î', '–û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø', refCode);
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        const referralLink = `https://t.me/UniFarming_Bot/app?startapp=${refCode}`;
        this.log('referrals', '–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø_–°–°–´–õ–ö–ê', '–ì–ï–ù–ï–†–ê–¶–ò–Ø', referralLink);
      } else {
        this.log('referrals', '–†–ï–§–ï–†–ê–õ–¨–ù–´–ô_–ö–û–î', '–û–®–ò–ë–ö–ê', '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const { data: referrals } = await supabase
        .from('users')
        .select('id, username, telegram_id, created_at, balance_uni')
        .eq('referred_by', refCode);

      this.log('referrals', '–°–ü–ò–°–û–ö_–†–ï–§–ï–†–ê–õ–û–í', '–ó–ê–ì–†–£–ñ–ï–ù', 
        `–ù–∞–π–¥–µ–Ω–æ ${referrals?.length || 0} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      if (referrals && referrals.length > 0) {
        referrals.forEach((ref, index) => {
          this.log('referrals', `–†–ï–§–ï–†–ê–õ_${index + 1}`, '–û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø', 
            `${ref.username} (${ref.telegram_id}), –±–∞–ª–∞–Ω—Å: ${ref.balance_uni} UNI`);
        });
      }

      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      const testReferralData = {
        telegram_id: 888888888,
        username: 'test_referral_user',
        ref_code: `REF_${Date.now()}`,
        referred_by: refCode,
        balance_uni: '25.0',
        balance_ton: '10.0'
      };

      const { data: newReferral, error: refError } = await supabase
        .from('users')
        .insert(testReferralData)
        .select()
        .single();

      if (!refError) {
        this.log('referrals', '–ù–û–í–´–ô_–†–ï–§–ï–†–ê–õ', '–î–û–ë–ê–í–õ–ï–ù', 
          `${newReferral.username} –ø—Ä–∏–≥–ª–∞—à–µ–Ω —á–µ—Ä–µ–∑ ${refCode}`);

        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const referralBonus = 15.0;
        const newBalance = parseFloat(this.testUser.balance_uni) + referralBonus;

        await supabase
          .from('users')
          .update({ balance_uni: newBalance.toString() })
          .eq('id', this.testUser.id);

        await supabase
          .from('transactions')
          .insert({
            user_id: this.testUser.id,
            type: 'REFERRAL_BONUS',
            amount_uni: referralBonus,
            amount_ton: 0,
            description: `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${newReferral.username}`,
            status: 'confirmed'
          });

        this.log('referrals', '–ë–û–ù–£–°_–ó–ê_–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï', '–ù–ê–ß–ò–°–õ–ï–ù', `${referralBonus} UNI`);
      } else {
        this.log('referrals', '–ù–û–í–´–ô_–†–ï–§–ï–†–ê–õ', '–û–®–ò–ë–ö–ê', refError.message);
      }

      // –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      this.log('referrals', '–ö–û–ü–ò–†–û–í–ê–ù–ò–ï_–°–°–´–õ–ö–ò', '–°–ò–ú–£–õ–Ø–¶–ò–Ø', '–§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –≥–æ—Ç–æ–≤–∞');

      this.testResults.referrals.status = 'success';
      return true;

    } catch (error) {
      this.log('referrals', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', '–û–®–ò–ë–ö–ê', error.message);
      this.testResults.referrals.status = 'failed';
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanup() {
    try {
      console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•...');

      if (this.testUser) {
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await supabase
          .from('transactions')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await supabase
          .from('users')
          .delete()
          .eq('referred_by', this.testUser.ref_code);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–∏
        await supabase
          .from('farming_sessions')
          .delete()
          .eq('user_id', this.testUser.id);

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateFinalReport() {
    const allModulesWorking = Object.values(this.testResults).every(module => module.status === 'success');

    console.log('\n' + '='.repeat(80));
    console.log('üì± –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM MINI APP');
    console.log('='.repeat(80));

    console.log('\n‚úÖ –ß–¢–û –£–°–ü–ï–®–ù–û –†–ê–ë–û–¢–ê–ï–¢:');

    Object.entries(this.testResults).forEach(([module, result]) => {
      if (result.status === 'success') {
        console.log(`\nüì± ${module.toUpperCase()}:`);
        result.tests.forEach(test => {
          if (test.result === '–£–°–ü–ï–•' || test.result === '–û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø' || test.result === '–ó–ê–ì–†–£–ñ–ï–ù' || test.result === '–î–û–°–¢–£–ü–ï–ù' || test.result === '–ê–ö–¢–ò–í–ï–ù') {
            console.log(`   ‚úÖ ${test.test}: ${test.details || test.result}`);
          }
        });
      }
    });

    console.log('\n‚ö†Ô∏è –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û –ò–õ–ò –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û:');
    let hasPartialIssues = false;

    Object.entries(this.testResults).forEach(([module, result]) => {
      result.tests.forEach(test => {
        if (test.result === '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï' || test.result === '–ê–î–ê–ü–¢–ê–¶–ò–Ø' || test.result === '–°–ò–ú–£–õ–Ø–¶–ò–Ø') {
          console.log(`   ‚ö†Ô∏è ${module.toUpperCase()} - ${test.test}: ${test.details || test.result}`);
          hasPartialIssues = true;
        }
      });
    });

    if (!hasPartialIssues) {
      console.log('   (–ù–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º)');
    }

    console.log('\n‚ùå –ß–¢–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢:');
    let hasErrors = false;

    Object.entries(this.testResults).forEach(([module, result]) => {
      result.tests.forEach(test => {
        if (test.result === '–û–®–ò–ë–ö–ê' || test.result === '–ù–ï_–ê–ö–¢–ò–í–ï–ù') {
          console.log(`   ‚ùå ${module.toUpperCase()} - ${test.test}: ${test.details || test.result}`);
          hasErrors = true;
        }
      });
    });

    if (!hasErrors) {
      console.log('   (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ)');
    }

    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
    if (allModulesWorking) {
      console.log('‚úÖ Telegram Mini App –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –†–ï–õ–ò–ó–£');
      console.log('   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   - –ë–∞–ª–∞–Ω—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   - –§–∞—Ä–º–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
      console.log('   - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è');
      console.log('   - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è Mini App —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º');
    }

    console.log('\nüöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –†–ï–õ–ò–ó–£: ' + (allModulesWorking ? '100%' : '75%'));
    console.log('='.repeat(80));

    return allModulesWorking;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runInterfaceTest() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM MINI APP');
    console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: telegram_id 777777777');
    console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ —Ä–µ–ª–∏–∑—É');
    console.log('=' * 80);

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await this.testAuthorization();
    await this.testBalance();
    await this.testFarming();
    await this.testDailyBonus();
    await this.testReferrals();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const isReady = this.generateFinalReport();

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await this.cleanup();

    return isReady;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const interfaceTest = new TelegramMiniAppTest();
interfaceTest.runInterfaceTest().catch(console.error);