#!/usr/bin/env tsx
/**
 * üö® –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ì–û –î–ï–ü–û–ó–ò–¢–ê USER 255
 * –ò—â–µ–º –Ω–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 1.1 TON –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è
 */

import { supabase } from './core/supabase';

async function urgentCheckUser255() {
  console.log('üö® –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ì–û –î–ï–ü–û–ó–ò–¢–ê USER 255 (1.1 TON)');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –ù–û–í–û–ì–û –î–ï–ü–û–ó–ò–¢–ê 1.1 TON:');
    
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
    
    const { data: veryRecentDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 255)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .eq('currency', 'TON')
      .gte('created_at', thirtyMinutesAgo)
      .order('created_at', { ascending: false });

    console.log(`üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤ User 255 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç: ${veryRecentDeposits?.length || 0}`);
    
    if (veryRecentDeposits && veryRecentDeposits.length > 0) {
      console.log('\nüéØ –ù–ê–ô–î–ï–ù –ù–û–í–´–ô –î–ï–ü–û–ó–ò–¢!');
      
      veryRecentDeposits.forEach((tx, i) => {
        const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
        console.log(`\n   ${i + 1}. –î–ï–ü–û–ó–ò–¢ #${tx.id}:`);
        console.log(`      üí∞ –°—É–º–º–∞: ${tx.amount_ton} TON`);
        console.log(`      üìÖ –°–æ–∑–¥–∞–Ω: ${tx.created_at} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        console.log(`      ‚úÖ –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      üéØ –¢–∏–ø: ${tx.type}`);
        console.log(`      üîó Hash: ${tx.tx_hash_unique?.slice(0, 40) || '–ù–ï–¢'}...`);
        console.log(`      üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–ù–ï–¢'}`);
        
        if (parseFloat(tx.amount_ton) === 1.1) {
          console.log(`      üéâ –≠–¢–û –ò–°–ö–û–ú–´–ô –î–ï–ü–û–ó–ò–¢ 1.1 TON!`);
        }
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
      const targetDeposit = veryRecentDeposits.find(tx => parseFloat(tx.amount_ton) === 1.1);
      
      if (targetDeposit) {
        console.log(`\nüîç –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–ê 1.1 TON (#${targetDeposit.id}):`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${targetDeposit.status}`);
        console.log(`   –¢–∏–ø: ${targetDeposit.type}`);
        console.log(`   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${targetDeposit.created_at}`);
        
        if (targetDeposit.status === 'completed') {
          console.log(`   ‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ completed - –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å!`);
        } else {
          console.log(`   ‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç –ù–ï completed - —Å—Ç–∞—Ç—É—Å: ${targetDeposit.status}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê USER 255:');
        
        const { data: balance } = await supabase
          .from('user_balances')
          .select('*')
          .eq('user_id', 255)
          .single();
          
        if (balance) {
          console.log(`üí∞ UNI –±–∞–ª–∞–Ω—Å: ${balance.uni_balance}`);
          console.log(`üíé TON –±–∞–ª–∞–Ω—Å: ${balance.ton_balance}`);
          console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${balance.updated_at}`);
          
          const balanceTime = new Date(balance.updated_at).getTime();
          const depositTime = new Date(targetDeposit.created_at).getTime();
          const timeDiff = (balanceTime - depositTime) / (1000 * 60);
          
          console.log(`\n‚è±Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏:`);
          console.log(`   –î–µ–ø–æ–∑–∏—Ç: ${targetDeposit.created_at}`);
          console.log(`   –ë–∞–ª–∞–Ω—Å:  ${balance.updated_at}`);
          console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${Math.round(timeDiff)} –º–∏–Ω—É—Ç`);
          
          if (timeDiff > 0) {
            console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ü–û–°–õ–ï –¥–µ–ø–æ–∑–∏—Ç–∞`);
          } else {
            console.log(`   ‚ùå –ë–∞–ª–∞–Ω—Å –ù–ï –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞!`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–æ –ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ TON –±–∞–ª–∞–Ω—Å–∞
          console.log(`\nüíé –ê–Ω–∞–ª–∏–∑ TON –±–∞–ª–∞–Ω—Å–∞:`);
          console.log(`   –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${balance.ton_balance}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π + 1.1)
          const expectedIncrease = 1.1;
          console.log(`   –û–∂–∏–¥–∞–µ–º–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ: +${expectedIncrease} TON`);
          console.log(`   –î–µ–ø–æ–∑–∏—Ç –Ω–∞: ${targetDeposit.amount_ton} TON`);
          
          if (targetDeposit.status === 'completed' && timeDiff <= 0) {
            console.log(`\nüö® –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê:`);
            console.log(`   - –î–µ–ø–æ–∑–∏—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ completed`);
            console.log(`   - –ù–æ –±–∞–ª–∞–Ω—Å –ù–ï –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞`);
            console.log(`   - –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`);
          }
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
        
        const { data: relatedTransactions } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', 255)
          .gte('created_at', thirtyMinutesAgo)
          .order('created_at', { ascending: false });
          
        if (relatedTransactions && relatedTransactions.length > 0) {
          console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 255 –∑–∞ 30 –º–∏–Ω—É—Ç: ${relatedTransactions.length}`);
          
          relatedTransactions.forEach((tx, i) => {
            console.log(`\n   ${i + 1}. TX #${tx.id}:`);
            console.log(`      –¢–∏–ø: ${tx.type}`);
            console.log(`      –í–∞–ª—é—Ç–∞: ${tx.currency}`);
            console.log(`      –°—É–º–º–∞: ${tx.currency === 'TON' ? tx.amount_ton : tx.amount_uni}`);
            console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
            console.log(`      –í—Ä–µ–º—è: ${tx.created_at}`);
          });
        }
        
      } else {
        console.log(`\n‚ùå –î–µ–ø–æ–∑–∏—Ç –Ω–∞ 1.1 TON –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö`);
        console.log(`–í–æ–∑–º–æ–∂–Ω–æ —Å—É–º–º–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –µ—â–µ –Ω–µ –ø–æ–ø–∞–ª –≤ –±–∞–∑—É`);
      }
      
    } else {
      console.log('\n‚ùå –ù–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      console.log('–ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å...');
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ - –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
      
      const { data: hourlyDeposits } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', 255)
        .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
        .eq('currency', 'TON')
        .gte('created_at', oneHourAgo)
        .order('created_at', { ascending: false });
        
      console.log(`üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${hourlyDeposits?.length || 0}`);
      
      if (hourlyDeposits && hourlyDeposits.length > 0) {
        hourlyDeposits.forEach((tx, i) => {
          const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / (1000 * 60));
          console.log(`\n   ${i + 1}. ${tx.amount_ton} TON - ${tx.status} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
          
          if (parseFloat(tx.amount_ton) === 1.1) {
            console.log(`      üéØ –ù–ê–ô–î–ï–ù –î–ï–ü–û–ó–ò–¢ 1.1 TON!`);
          }
        });
      }
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('üéØ –°–¢–ê–¢–£–° –ü–†–û–í–ï–†–ö–ò –ó–ê–í–ï–†–®–ï–ù');
    console.log('='.repeat(80));
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –°–†–û–ß–ù–û–ô –ü–†–û–í–ï–†–ö–ò:', error);
  }
}

urgentCheckUser255().catch(console.error);