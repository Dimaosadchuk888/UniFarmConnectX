#!/usr/bin/env node
/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ
 */

const http = require('http');
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL || 'https://xvwzpqjfkrlpvwvmgqpn.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh2d3pwcWpma3JscHZ3dm1ncXBuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI2MzUwNzMsImV4cCI6MjA0ODIxMTA3M30.j1wJVkGd91hC-k9O-_HhcK-7y7OqHoJ5CyMJRr5g6Zo';

const supabase = createClient(supabaseUrl, supabaseKey);

async function comprehensiveAccountInvestigation() {
  console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('='.repeat(60));
  
  // 1. –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –°–ò–°–¢–ï–ú–ï');
  
  try {
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, created_at')
      .order('created_at', { ascending: true });
    
    if (usersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersError.message}`);
      return;
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${allUsers.length}`);
    console.log('\nüìã –î–ï–¢–ê–õ–ò –ü–û –ö–ê–ñ–î–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:');
    
    const userMap = new Map();
    const telegramIdMap = new Map();
    const usernameMap = new Map();
    
    allUsers.forEach((user, index) => {
      const uniBalance = parseFloat(user.balance_uni || 0);
      const tonBalance = parseFloat(user.balance_ton || 0);
      const createdDate = new Date(user.created_at).toLocaleDateString('ru-RU');
      
      console.log(`\n${index + 1}. User #${user.id}`);
      console.log(`   Telegram ID: ${user.telegram_id}`);
      console.log(`   Username: ${user.username || 'NULL'}`);
      console.log(`   UNI Balance: ${uniBalance.toFixed(6)}`);
      console.log(`   TON Balance: ${tonBalance.toFixed(6)}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${createdDate}`);
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      userMap.set(user.id, user);
      
      if (telegramIdMap.has(user.telegram_id)) {
        telegramIdMap.get(user.telegram_id).push(user);
      } else {
        telegramIdMap.set(user.telegram_id, [user]);
      }
      
      if (user.username) {
        if (usernameMap.has(user.username)) {
          usernameMap.get(user.username).push(user);
        } else {
          usernameMap.set(user.username, [user]);
        }
      }
    });
    
    // 2. –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –ò –ö–û–ù–§–õ–ò–ö–¢–û–í');
    
    console.log('\nüîç –î–£–ë–õ–ò–ö–ê–¢–´ –ü–û TELEGRAM_ID:');
    let telegramDuplicates = 0;
    telegramIdMap.forEach((users, telegramId) => {
      if (users.length > 1) {
        telegramDuplicates++;
        console.log(`‚ùó Telegram ID ${telegramId}: ${users.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
        users.forEach(user => {
          console.log(`   - User #${user.id} (username: ${user.username || 'NULL'})`);
        });
      }
    });
    
    if (telegramDuplicates === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ telegram_id –ù–ï –ù–ê–ô–î–ï–ù–û');
    }
    
    console.log('\nüîç –î–£–ë–õ–ò–ö–ê–¢–´ –ü–û USERNAME:');
    let usernameDuplicates = 0;
    usernameMap.forEach((users, username) => {
      if (users.length > 1) {
        usernameDuplicates++;
        console.log(`‚ùó Username "${username}": ${users.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
        users.forEach(user => {
          console.log(`   - User #${user.id} (telegram_id: ${user.telegram_id})`);
        });
      }
    });
    
    if (usernameDuplicates === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ username –ù–ï –ù–ê–ô–î–ï–ù–û');
    }
    
    // 3. –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    
    const { data: tonTransactions, error: txError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, type, currency, description, metadata, created_at')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
    
    if (txError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txError.message}`);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
      
      if (tonTransactions.length > 0) {
        console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï 10 TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
        tonTransactions.slice(0, 10).forEach((tx, index) => {
          const amount = parseFloat(tx.amount_ton || 0);
          const date = new Date(tx.created_at).toLocaleString('ru-RU');
          const user = userMap.get(tx.user_id);
          const txHash = tx.metadata?.tx_hash || 'N/A';
          
          console.log(`\n${index + 1}. Transaction #${tx.id}`);
          console.log(`   User: #${tx.user_id} (telegram_id: ${user?.telegram_id})`);
          console.log(`   Amount: ${amount.toFixed(6)} TON`);
          console.log(`   Type: ${tx.type}`);
          console.log(`   Description: ${tx.description}`);
          console.log(`   TX Hash: ${txHash}`);
          console.log(`   Date: ${date}`);
        });
      } else {
        console.log('‚ö†Ô∏è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –ù–ï–¢!');
      }
    }
    
    // 4. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í 25 –ò 227
    console.log('\n4Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ö–ö–ê–£–ù–¢–û–í #25 –ò #227');
    
    const user25 = userMap.get(25);
    const user227 = userMap.get(227);
    
    if (user25) {
      console.log('\nüìã USER #25:');
      console.log(`   Telegram ID: ${user25.telegram_id}`);
      console.log(`   Username: ${user25.username || 'NULL'}`);
      console.log(`   TON Balance: ${parseFloat(user25.balance_ton || 0).toFixed(6)}`);
      console.log(`   UNI Balance: ${parseFloat(user25.balance_uni || 0).toFixed(6)}`);
      
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è user 25
      const user25Transactions = tonTransactions.filter(tx => tx.user_id === 25);
      console.log(`   TON –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${user25Transactions.length}`);
      if (user25Transactions.length > 0) {
        user25Transactions.forEach(tx => {
          console.log(`     - ${tx.description} (${parseFloat(tx.amount_ton || 0).toFixed(6)} TON)`);
        });
      }
    } else {
      console.log('\n‚ùå USER #25 –ù–ï –ù–ê–ô–î–ï–ù');
    }
    
    if (user227) {
      console.log('\nüìã USER #227:');
      console.log(`   Telegram ID: ${user227.telegram_id}`);
      console.log(`   Username: ${user227.username || 'NULL'}`);
      console.log(`   TON Balance: ${parseFloat(user227.balance_ton || 0).toFixed(6)}`);
      console.log(`   UNI Balance: ${parseFloat(user227.balance_uni || 0).toFixed(6)}`);
      
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è user 227
      const user227Transactions = tonTransactions.filter(tx => tx.user_id === 227);
      console.log(`   TON –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${user227Transactions.length}`);
      if (user227Transactions.length > 0) {
        user227Transactions.forEach(tx => {
          console.log(`     - ${tx.description} (${parseFloat(tx.amount_ton || 0).toFixed(6)} TON)`);
        });
      }
    } else {
      console.log('\n‚ùå USER #227 –ù–ï –ù–ê–ô–î–ï–ù');
    }
    
    // 5. –ü–û–ò–°–ö USERNAME –ö–û–ù–§–õ–ò–ö–¢–ê
    if (user25 && user227 && user25.username === user227.username) {
      console.log(`\nüö® –ö–û–ù–§–õ–ò–ö–¢ USERNAME –ü–û–î–¢–í–ï–†–ñ–î–ï–ù:`);
      console.log(`   User #25 –∏ User #227 –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π username: "${user25.username}"`);
      console.log(`   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É getUserByUsername() - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–Ω–∞–µ—Ç –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å!`);
    }
    
    // 6. –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    
    const activeUsers = allUsers.filter(user => {
      const uniBalance = parseFloat(user.balance_uni || 0);
      const tonBalance = parseFloat(user.balance_ton || 0);
      return uniBalance > 0 || tonBalance > 0;
    });
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –±–∞–ª–∞–Ω—Å–æ–º > 0): ${activeUsers.length}`);
    
    activeUsers.forEach((user, index) => {
      const uniBalance = parseFloat(user.balance_uni || 0);
      const tonBalance = parseFloat(user.balance_ton || 0);
      console.log(`${index + 1}. User #${user.id} - UNI: ${uniBalance.toFixed(2)}, TON: ${tonBalance.toFixed(6)}`);
    });
    
    // 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    console.log('\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
    
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê getUserByTelegramId –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    const uniqueTelegramIds = Array.from(telegramIdMap.keys());
    
    for (const telegramId of uniqueTelegramIds.slice(0, 10)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 10
      try {
        const { data: foundUser, error } = await supabase
          .from('users')
          .select('id, telegram_id, username')
          .eq('telegram_id', telegramId)
          .single();
        
        if (error && error.code === 'PGRST116') {
          console.log(`‚ùå Telegram ID ${telegramId}: MULTIPLE ROWS - ${telegramIdMap.get(telegramId).length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        } else if (error) {
          console.log(`‚ùå Telegram ID ${telegramId}: ERROR - ${error.message}`);
        } else if (foundUser) {
          console.log(`‚úÖ Telegram ID ${telegramId}: User #${foundUser.id} (${foundUser.username || 'NULL'})`);
        } else {
          console.log(`‚ö†Ô∏è Telegram ID ${telegramId}: –ù–ï –ù–ê–ô–î–ï–ù`);
        }
      } catch (error) {
        console.log(`üí• Telegram ID ${telegramId}: EXCEPTION - ${error.message}`);
      }
    }
    
    // 8. –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î
    console.log('\n7Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´');
    
    console.log('\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:');
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    console.log(`   - –î—É–±–ª–∏–∫–∞—Ç–æ–≤ telegram_id: ${telegramDuplicates}`);
    console.log(`   - –î—É–±–ª–∏–∫–∞—Ç–æ–≤ username: ${usernameDuplicates}`);
    console.log(`   - TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
    
    console.log('\nüö® –¢–û–ß–ö–ò –û–¢–ö–ê–ó–ê –í –¶–ï–ü–û–ß–ö–ï:');
    
    if (telegramDuplicates > 0) {
      console.log('‚ùó –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ TELEGRAM_ID - getUserByTelegramId() –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å wrong user');
    }
    
    if (usernameDuplicates > 0) {
      console.log('‚ùó –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ USERNAME - getUserByUsername() –Ω–µ –∑–Ω–∞–µ—Ç –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å');
    }
    
    if (tonTransactions.length === 0) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–ò –û–î–ù–û–ô TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –°–û–ó–î–ê–ù–û - processTonDeposit() –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª!');
    }
    
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã telegram_id/username');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ tonDeposit() controller');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
    console.log('4. –°–æ–∑–¥–∞—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
  } catch (error) {
    console.log(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
comprehensiveAccountInvestigation()
  .then(() => console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'))
  .catch(error => console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error));