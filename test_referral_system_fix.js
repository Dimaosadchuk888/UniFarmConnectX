/**
 * –°–ö–†–ò–ü–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
 */

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
console.log('======================================================================\n');

async function testReferralSystemFix() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    console.log('--------------------------------------------------');
    
    const testUserId = 999999999; // –¢–µ—Å—Ç–æ–≤—ã–π telegram_id
    const refCode = 'TEST_REF_' + Date.now();
    
    console.log(`üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
    telegram_id: ${testUserId}
    ref_code: ${refCode}
    –í—Ä–µ–º—è: ${new Date().toISOString()}\n`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    console.log('2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.log('--------------------------------------------------');
    
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await fetch('/api/v2/auth/telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-Init-Data': 'mock_init_data'
        },
        body: JSON.stringify({
          initData: `user=${JSON.stringify({
            id: testUserId,
            username: 'test_user_' + Date.now(),
            first_name: 'Test User'
          })}`,
          ref_by: refCode
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (data.success && data.data.user) {
          const userId = data.data.user.id;
          console.log(`‚úÖ User ID: ${userId}`);
          
          // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω
          console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø referred_by:');
          console.log('--------------------------------------------------');
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          try {
            const userResponse = await fetch(`/api/v2/user/${userId}`, {
              headers: {
                'Authorization': `Bearer ${data.data.token}`
              }
            });
            
            if (userResponse.ok) {
              const userData = await userResponse.json();
              console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
              
              if (userData.data.referred_by) {
                console.log(`‚úÖ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω: ${userData.data.referred_by}`);
              } else {
                console.log('‚ùå referred_by –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω (null)');
              }
            } else {
              console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResponse.status);
            }
          } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
          }
          
          // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ referrals (—á–µ—Ä–µ–∑ backend –ª–æ–≥)
          console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ï–ô –í –¢–ê–ë–õ–ò–¶–ï REFERRALS:');
          console.log('--------------------------------------------------');
          console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ server logs –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:');
          console.log('   ‚úÖ "[AuthService] ‚úÖ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê"');
          console.log('   ‚ùå "[AuthService] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è referrals –∑–∞–ø–∏—Å–∏"');
          
        }
      } else {
        const errorData = await response.json();
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', errorData);
      }
    } catch (error) {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    console.log('\n5Ô∏è‚É£ –û–¶–ï–ù–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('--------------------------------------------------');
    console.log('üéØ –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:');
    console.log('   1. ‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π: parseInt(newUserId)');
    console.log('   2. ‚úÖ –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è reward: "0" –≤–º–µ—Å—Ç–æ 0');
    console.log('   3. ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ Supabase');
    console.log('   4. ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—Ö–∞');
    
    console.log('\nüìä –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('   ‚úÖ referred_by –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ');
    console.log('   ‚úÖ –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∑–∞–ø–∏—Å–∏ –≤ referrals');
    console.log('   ‚úÖ buildReferrerChain() –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏');
    console.log('   ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
  testReferralSystemFix();
} else {
  console.log('‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞');
  console.log('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ testReferralSystemFix –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞');
}