#!/usr/bin/env tsx
/**
 * üîç –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê TON BLOCKCHAIN: –ò—â–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫
 */

import { verifyTonTransaction } from './core/tonApiClient';
import { supabase } from './core/supabase';

async function checkTonBlockchainDirect() {
  console.log('üîç –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê TON BLOCKCHAIN: –ò—â–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
  console.log('='.repeat(80));

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π TON –∫–æ—à–µ–ª–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n1Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ê–î–ú–ò–ù–°–ö–û–ì–û –ö–û–®–ï–õ–¨–ö–ê:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const adminWallet = process.env.TON_ADMIN_WALLET || process.env.TON_RECEIVER_ADDRESS;
    console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫:', adminWallet ? adminWallet.slice(0, 20) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù');

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ blockchain –¥–µ–ø–æ–∑–∏—Ç—ã —Å BOC –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í –° BOC –î–ê–ù–ù–´–ú–ò:');
    
    const { data: bocDeposits, error: bocError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .ilike('description', '%te6cck%')
      .gte('created_at', '2025-08-04T07:00:00.000Z')
      .order('created_at', { ascending: false });

    if (!bocError && bocDeposits) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å BOC –¥–∞–Ω–Ω—ã–º–∏: ${bocDeposits.length}`);
      
      for (const dep of bocDeposits) {
        console.log(`\nüîó Blockchain –¥–µ–ø–æ–∑–∏—Ç:`);
        console.log(`   user_id: ${dep.user_id}, amount: ${dep.amount} TON`);
        console.log(`   created_at: ${dep.created_at}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º BOC –¥–∞–Ω–Ω—ã–µ –∏–∑ description
        const bocMatch = dep.description.match(/te6cck[A-Za-z0-9+/=]+/);
        if (bocMatch) {
          const bocData = bocMatch[0];
          console.log(`   üîë BOC: ${bocData.substring(0, 50)}...`);
          
          try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            console.log(`   üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è BOC —á–µ—Ä–µ–∑ TonAPI...`);
            const verification = await verifyTonTransaction(bocData);
            
            if (verification.isValid) {
              console.log(`   ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:`);
              console.log(`      amount: ${verification.amount} TON`);
              console.log(`      sender: ${verification.sender?.slice(0, 20)}...`);
              console.log(`      recipient: ${verification.recipient?.slice(0, 20)}...`);
              console.log(`      timestamp: ${new Date(verification.timestamp! * 1000).toISOString()}`);
              console.log(`      status: ${verification.status}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å—É–º–º–∞ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ 0.65 –∏–ª–∏ 1.0
              if (verification.amount === '0.65' || verification.amount === '1.0' || verification.amount === '1') {
                console.log(`   üéØ –ù–ê–ô–î–ï–ù –ü–û–¢–ï–†–Ø–ù–ù–´–ô –î–ï–ü–û–ó–ò–¢! –°—É–º–º–∞: ${verification.amount} TON`);
                console.log(`   üö® –ü—Ä–∏–≤—è–∑–∞–Ω –∫ user_id: ${dep.user_id}, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 255!`);
              }
            } else {
              console.log(`   ‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å`);
            }
          } catch (verifyError) {
            console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:`, verifyError instanceof Error ? verifyError.message : String(verifyError));
          }
        }
      }
    }

    // 3. –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –∫–æ–≥–¥–∞ –º–æ–≥–ª–∏ –±—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\n3Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 255:');
    
    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255 –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const { data: firstBoost, error: boostError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 255)
      .ilike('description', '%TON Boost%')
      .gte('created_at', '2025-08-04T00:00:00.000Z')
      .order('created_at', { ascending: true })
      .limit(1);

    if (!boostError && firstBoost && firstBoost.length > 0) {
      const boostTime = new Date(firstBoost[0].created_at);
      console.log(`‚úÖ –ü–µ—Ä–≤—ã–π TON Boost –¥–æ—Ö–æ–¥: ${firstBoost[0].created_at}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${firstBoost[0].description}`);
      
      // –ò—â–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —á–∞—Å –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ boost
      const hourBefore = new Date(boostTime.getTime() - 60 * 60 * 1000);
      const hourAfter = new Date(boostTime.getTime() + 60 * 60 * 1000);
      
      console.log(`\nüîç –ü–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å ${hourBefore.toISOString()} –ø–æ ${hourAfter.toISOString()}:`);
      
      const { data: suspiciousDeposits, error: susError } = await supabase
        .from('transactions')
        .select('*')
        .eq('type', 'TON_DEPOSIT')
        .gte('created_at', hourBefore.toISOString())
        .lte('created_at', hourAfter.toISOString())
        .order('created_at', { ascending: true });

      if (!susError && suspiciousDeposits) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —ç—Ç–æ –≤—Ä–µ–º—è: ${suspiciousDeposits.length}`);
        suspiciousDeposits.forEach((dep, i) => {
          console.log(`\nüïí –î–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
          console.log(`   user_id: ${dep.user_id}, amount: ${dep.amount} TON`);
          console.log(`   created_at: ${dep.created_at}`);
          console.log(`   description: ${dep.description.substring(0, 100)}...`);
          
          const depTime = new Date(dep.created_at).getTime();
          const boostTimestamp = boostTime.getTime();
          const diffMinutes = Math.round((boostTimestamp - depTime) / (1000 * 60));
          console.log(`   ‚è∞ ${diffMinutes} –º–∏–Ω—É—Ç –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ boost`);
        });
      }
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255
    console.log('\n4Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 255:');
    const { data: user255, error: user255Error } = await supabase
      .from('users')
      .select('ton_boost_package, ton_boost_active, ton_boost_rate, ton_farming_balance, balance_ton')
      .eq('id', 255)
      .single();

    if (!user255Error && user255) {
      console.log('‚úÖ TON Boost —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255:', {
        ton_boost_package: user255.ton_boost_package,
        ton_boost_active: user255.ton_boost_active,
        ton_boost_rate: user255.ton_boost_rate,
        ton_farming_balance: user255.ton_farming_balance,
        balance_ton: user255.balance_ton
      });
      
      if (user255.ton_boost_active && user255.ton_boost_package > 0) {
        console.log('üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: TON Boost –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ù–ï–¢!');
        console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–æ—à–µ–ª –≤ blockchain, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –µ–≥–æ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞');
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï BLOCKCHAIN –ê–ù–ê–õ–ò–ó–ê:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ blockchain —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('2. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏ BOC –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TonAPI');
    console.log('3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ boost');
    console.log('4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —á—Ç–æ TON Boost –∞–∫—Ç–∏–≤–µ–Ω –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('\nüö® –í–´–í–û–î: –î–µ–ø–æ–∑–∏—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ blockchain, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π!');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê BLOCKCHAIN –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

checkTonBlockchainDirect().catch(console.error);