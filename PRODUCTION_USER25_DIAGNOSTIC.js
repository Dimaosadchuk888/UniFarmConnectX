#!/usr/bin/env node

/**
 * –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: User #25 TON –±–∞–ª–∞–Ω—Å
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ Production –æ–∫—Ä—É–∂–µ–Ω–∏–∏
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

// Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: Production –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  console.error('–ù—É–∂–Ω—ã: SUPABASE_URL, SUPABASE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function productionUser25Diagnostic() {
  console.log('üè≠ PRODUCTION –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: User #25 TON –±–∞–ª–∞–Ω—Å');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log(`üîó Database: ${supabaseUrl.substring(0, 30)}...`);
  console.log('‚ö†Ô∏è  –†–ï–ñ–ò–ú: –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
  
  // 1. –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø User #25
  console.log('\n1Ô∏è‚É£ –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê User #25');
  console.log('-'.repeat(60));
  
  const { data: user25, error: userError } = await supabase
    .from('users')
    .select('id, username, telegram_id, balance_ton, balance_uni, created_at, referral_code')
    .eq('id', 25)
    .single();

  if (userError) {
    console.error('‚ùå User #25 –ù–ï –ù–ê–ô–î–ï–ù –≤ Production –ë–î:', userError.message);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id –∏–ª–∏ username
    console.log('\nüîç –ü–û–ò–°–ö User #25 –ø–æ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...');
    
    const { data: userByName } = await supabase
      .from('users')
      .select('id, username, telegram_id, balance_ton')
      .ilike('username', '%DimaOsadchuk%')
      .limit(5);
    
    if (userByName && userByName.length > 0) {
      console.log('üë§ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º:');
      userByName.forEach(u => {
        console.log(`   ID:${u.id} | @${u.username} | TG:${u.telegram_id} | TON:${u.balance_ton}`);
      });
    }
    
    return;
  }

  console.log('‚úÖ User #25 –ù–ê–ô–î–ï–ù –≤ Production –ë–î!');
  console.log(`üë§ Username: @${user25.username}`);
  console.log(`üìû Telegram ID: ${user25.telegram_id}`);
  console.log(`üí∞ TON Balance: ${user25.balance_ton}`);
  console.log(`ü™ô UNI Balance: ${user25.balance_uni}`);
  console.log(`üîó Referral Code: ${user25.referral_code}`);
  console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${user25.created_at}`);

  // 2. –ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User #25
  console.log('\n2Ô∏è‚É£ –ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User #25');
  console.log('-'.repeat(60));
  
  const { data: allTransactions, error: txError } = await supabase
    .from('transactions')
    .select('id, type, amount_ton, amount_uni, currency, description, status, created_at, metadata')
    .eq('user_id', 25)
    .order('created_at', { ascending: true });

  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    return;
  }

  console.log(`üìä –í–°–ï–ì–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25: ${allTransactions.length}`);
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const tonTransactions = allTransactions.filter(tx => 
    parseFloat(tx.amount_ton || 0) > 0 || 
    tx.currency === 'TON' ||
    tx.description?.includes('TON')
  );
  
  console.log(`ü™ô TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);

  if (tonTransactions.length > 0) {
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–°–¢–û–†–ò–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('–î–∞—Ç–∞       | ID     | –¢–∏–ø           | –°—É–º–º–∞ TON | –°—Ç–∞—Ç—É—Å    | –û–ø–∏—Å–∞–Ω–∏–µ');
    console.log('-'.repeat(90));
    
    let runningBalance = 0;
    tonTransactions.forEach(tx => {
      const amount = parseFloat(tx.amount_ton || 0);
      const date = tx.created_at.split('T')[0];
      const time = tx.created_at.split('T')[1].substring(0, 5);
      
      if (tx.type === 'FARMING_REWARD' || tx.type === 'REFERRAL_REWARD') {
        runningBalance += amount;
      } else if (tx.type?.includes('WITHDRAWAL')) {
        runningBalance -= amount;
      } else {
        runningBalance += amount;
      }
      
      console.log(`${date} ${time} | ${String(tx.id).padEnd(6)} | ${String(tx.type).padEnd(13)} | ${String(amount).padEnd(9)} | ${String(tx.status).padEnd(9)} | ${(tx.description || '').substring(0, 40)}...`);
    });
    
    console.log('-'.repeat(90));
    console.log(`üìä –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–° –ü–û –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú: ${runningBalance.toFixed(6)} TON`);
    console.log(`üí∞ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–° –í –ë–î: ${user25.balance_ton} TON`);
    
    const discrepancy = parseFloat(user25.balance_ton) - runningBalance;
    console.log(`‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${discrepancy.toFixed(6)} TON`);
    
    if (Math.abs(discrepancy) > 0.001) {
      console.log('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í!');
    } else {
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }
  }

  // 3. –ê–ù–ê–õ–ò–ó BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('-'.repeat(60));
  
  const blockchainDeposits = allTransactions.filter(tx => 
    tx.description?.includes('blockchain') ||
    tx.description?.includes('deposit') ||
    tx.type === 'TON_DEPOSIT' ||
    tx.type === 'FARMING_REWARD'
  );
  
  console.log(`üîó Blockchain/Deposit —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${blockchainDeposits.length}`);
  
  if (blockchainDeposits.length > 0) {
    console.log('\nüìã –î–ï–¢–ê–õ–ò BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í:');
    blockchainDeposits.slice(0, 10).forEach(tx => {
      console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[0]} | ${tx.type}`);
      console.log(`  TON: ${tx.amount_ton} | –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      if (tx.metadata) {
        console.log(`  Metadata: ${JSON.stringify(tx.metadata)}`);
      }
      console.log('  ---');
    });
  }

  // 4. –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø TON');
  console.log('-'.repeat(60));
  
  const debitTransactions = allTransactions.filter(tx => {
    const desc = (tx.description || '').toLowerCase();
    const type = (tx.type || '').toLowerCase();
    
    return desc.includes('withdraw') ||
           desc.includes('—Å–ø–∏—Å–∞–Ω–∏–µ') ||
           desc.includes('–≤—ã–≤–æ–¥') ||
           desc.includes('subtract') ||
           type.includes('withdrawal') ||
           type.includes('deduct') ||
           type.includes('fee');
  });
  
  console.log(`üí∏ –û–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è: ${debitTransactions.length}`);
  
  if (debitTransactions.length > 0) {
    console.log('\nüìã –î–ï–¢–ê–õ–ò –û–ü–ï–†–ê–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø:');
    debitTransactions.forEach(tx => {
      console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[0]} | ${tx.type}`);
      console.log(`  TON: -${tx.amount_ton} | –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log('  ---');
    });
  }

  // 5. –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó
  console.log('\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó User #25');
  console.log('='.repeat(60));
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Production –ë–î`);
  console.log(`üìä –û–±—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions.length}`);
  console.log(`ü™ô TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
  console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user25.balance_ton} TON`);
  console.log(`üîó Blockchain –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${blockchainDeposits.length}`);
  console.log(`üí∏ –û–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è: ${debitTransactions.length}`);
  
  if (tonTransactions.length === 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
    console.log('   –ë–∞–ª–∞–Ω—Å 0.31 TON —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î');
    console.log('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚Ä¢ –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(80));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if (process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT) {
  productionUser25Diagnostic().catch(console.error);
} else {
  console.log('‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Production –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('   –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Production —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É');
}