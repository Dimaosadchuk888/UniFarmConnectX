/**
 * SQL –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TON Boost
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
 */

import { supabase } from './core/supabase.js';

async function runSQLChecks() {
  console.log('=== SQL –ü–†–û–í–ï–†–ö–ò TON BOOST ===');
  console.log('–î–∞—Ç–∞:', new Date().toISOString());
  console.log('\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–ª—è User 74
  console.log('üîç 1. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê USER 74');
  console.log('=' .repeat(50));
  
  // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫ user 74
  const { data: user74Purchases, error: e1 } = await supabase
    .from('transactions')
    .select('id, created_at, amount, amount_ton, description, metadata')
    .eq('user_id', 74)
    .eq('type', 'BOOST_PURCHASE')
    .order('created_at');

  if (!e1 && user74Purchases) {
    console.log(`\n–í—Å–µ –ø–æ–∫—É–ø–∫–∏ User 74 (${user74Purchases.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
    
    let runningTotal = 0;
    let prevBalance = 0;
    
    for (const tx of user74Purchases) {
      const amount = parseFloat(tx.amount_ton || tx.amount || '0');
      runningTotal += amount;
      
      console.log(`\n${tx.created_at}:`);
      console.log(`  ID: ${tx.id}`);
      console.log(`  –°—É–º–º–∞: ${amount} TON`);
      console.log(`  –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${prevBalance} + ${amount} = ${runningTotal} TON`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
      if (tx.metadata) {
        try {
          const meta = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          console.log(`  Package ID: ${meta.boost_package_id}`);
          console.log(`  –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å: ${prevBalance > 0 ? '–î–ê' : '–ù–ï–¢ (–ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞)'}`);
        } catch (e) {
          console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ metadata`);
        }
      }
      
      prevBalance = runningTotal;
    }
    
    console.log(`\nüìä –ò–¢–û–ì–û –∫—É–ø–ª–µ–Ω–æ: ${runningTotal} TON`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π farming_balance
    const { data: currentData } = await supabase
      .from('ton_farming_data')
      .select('farming_balance')
      .eq('user_id', 74)
      .single();
    
    if (currentData) {
      console.log(`üìä –¢–µ–∫—É—â–∏–π farming_balance: ${currentData.farming_balance} TON`);
      console.log(`‚ùó –†–∞–∑–Ω–∏—Ü–∞: ${currentData.farming_balance} - ${runningTotal} = ${parseFloat(currentData.farming_balance) - runningTotal} TON`);
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–æ—Ö–æ–¥–∞
  console.log('\n\nüîç 2. –ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –î–û–•–û–î–ê');
  console.log('=' .repeat(50));
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è user 74
  const { data: recentIncomes, error: e2 } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .eq('type', 'FARMING_REWARD')
    .like('description', '%TON Boost%')
    .order('created_at', { ascending: false })
    .limit(10);

  if (!e2 && recentIncomes) {
    console.log(`\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–æ—Ö–æ–¥–∞:`);
    
    for (const income of recentIncomes) {
      const amount = parseFloat(income.amount_ton || income.amount || '0');
      console.log(`\n${income.created_at}:`);
      console.log(`  –°—É–º–º–∞: ${amount} TON`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${income.description}`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
      const packageMatch = income.description.match(/–ø–∞–∫–µ—Ç (\d+)/);
      if (packageMatch) {
        console.log(`  Package ID –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è: ${packageMatch[1]}`);
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥
    if (recentIncomes.length > 0) {
      const totalIncome = recentIncomes.reduce((sum, tx) => 
        sum + parseFloat(tx.amount_ton || tx.amount || '0'), 0
      );
      console.log(`\nüìä –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${(totalIncome / recentIncomes.length).toFixed(6)} TON`);
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata –æ—à–∏–±–æ–∫
  console.log('\n\nüîç 3. –ê–ù–ê–õ–ò–ó METADATA –û–®–ò–ë–û–ö');
  console.log('=' .repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö metadata
  const { data: metadataIssues, error: e3 } = await supabase
    .rpc('check_invalid_json_metadata');

  if (e3) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å RPC, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä—É—á–Ω—É—é...');
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
    const { data: txWithMeta } = await supabase
      .from('transactions')
      .select('id, metadata')
      .not('metadata', 'is', null)
      .limit(100);
    
    if (txWithMeta) {
      const issues = [];
      for (const tx of txWithMeta) {
        try {
          if (typeof tx.metadata === 'string' && tx.metadata.trim() !== '') {
            JSON.parse(tx.metadata);
          }
        } catch (e) {
          issues.push({ id: tx.id, error: e.message, sample: tx.metadata.substring(0, 50) });
        }
      }
      
      if (issues.length > 0) {
        console.log(`\n‚ùå –ù–∞–π–¥–µ–Ω–æ ${issues.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON:`);
        issues.slice(0, 5).forEach(issue => {
          console.log(`  TX ${issue.id}: ${issue.sample}... (${issue.error})`);
        });
      } else {
        console.log('‚úÖ –í—Å–µ metadata –≤–∞–ª–∏–¥–Ω—ã');
      }
    }
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
  console.log('\n\nüîç 4. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø–ú–ò');
  console.log('=' .repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–∏–Ω–≥–æ–º
  const { data: allUsers, error: e4 } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance')
    .gt('farming_balance', 0)
    .order('user_id');

  if (!e4 && allUsers) {
    console.log(`\n–ü—Ä–æ–≤–µ—Ä—è–µ–º ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å farming_balance > 0:`);
    
    const discrepancies = [];
    
    for (const user of allUsers) {
      // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫
      const { data: purchases } = await supabase
        .from('transactions')
        .select('amount, amount_ton')
        .eq('user_id', user.user_id)
        .eq('type', 'BOOST_PURCHASE');
      
      if (purchases) {
        const totalPurchased = purchases.reduce((sum, tx) => 
          sum + parseFloat(tx.amount_ton || tx.amount || '0'), 0
        );
        
        const farmingBalance = parseFloat(user.farming_balance);
        const diff = Math.abs(farmingBalance - totalPurchased);
        
        if (diff > 0.01) {
          discrepancies.push({
            user_id: user.user_id,
            farming_balance: farmingBalance,
            total_purchased: totalPurchased,
            difference: farmingBalance - totalPurchased
          });
        }
      }
    }
    
    if (discrepancies.length > 0) {
      console.log(`\n‚ùå –ù–∞–π–¥–µ–Ω–æ ${discrepancies.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏:`);
      discrepancies.slice(0, 10).forEach(d => {
        console.log(`  User ${d.user_id}: farming=${d.farming_balance}, purchased=${d.total_purchased}, diff=${d.difference.toFixed(2)}`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∞–º');
    }
  }

  // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('\n\nüîç 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('=' .repeat(50));
  
  const { data: txStats, error: e5 } = await supabase
    .from('transactions')
    .select('type')
    .in('type', ['BOOST_PURCHASE', 'FARMING_REWARD'])
    .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());

  if (!e5 && txStats) {
    const stats = txStats.reduce((acc, tx) => {
      acc[tx.type] = (acc[tx.type] || 0) + 1;
      return acc;
    }, {});
    
    console.log('\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:');
    Object.entries(stats).forEach(([type, count]) => {
      console.log(`  ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    });
  }

  console.log('\n=== –ö–û–ù–ï–¶ SQL –ü–†–û–í–ï–†–û–ö ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
runSQLChecks()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });