/**
 * –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
 */

const { exec } = require('child_process');

function executeSQL(query) {
  return new Promise((resolve, reject) => {
    const command = `psql "${process.env.DATABASE_URL}" -c "${query}"`;
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(new Error(stderr || error.message));
      } else {
        resolve(stdout);
      }
    });
  });
}

async function quickCheck() {
  try {
    console.log('üîç –ü–û–ò–°–ö –¢–ê–ë–õ–ò–¶ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü—ã
    const tablesQuery = `SELECT schemaname, tablename FROM pg_tables WHERE tablename LIKE '%user%';`;
    const tables = await executeSQL(tablesQuery);
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log(tables);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ö–µ–º
    const schemas = ['public', 'auth'];
    
    for (const schema of schemas) {
      try {
        console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã: ${schema}`);
        const testQuery = `SELECT COUNT(*) FROM ${schema}.users;`;
        const result = await executeSQL(testQuery);
        console.log(`‚úÖ –°—Ö–µ–º–∞ ${schema}.users –Ω–∞–π–¥–µ–Ω–∞:`, result.trim());
        
        // –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º User 228
        const user228Query = `SELECT id, balance_ton FROM ${schema}.users WHERE id = 228;`;
        const user228 = await executeSQL(user228Query);
        
        if (user228.includes('228')) {
          console.log(`üë§ User 228 –Ω–∞–π–¥–µ–Ω –≤ ${schema}.users:`, user228.trim());
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
          console.log('\nüí∞ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò...');
          
          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const transactionQuery = `
            INSERT INTO ${schema}.transactions (user_id, type, amount, currency, description, created_at) 
            VALUES (228, 'FARMING_REWARD', '1.0', 'TON', '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–∞ d1077cd0', NOW()) 
            RETURNING id;
          `;
          
          const transResult = await executeSQL(transactionQuery);
          console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', transResult.trim());
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          const balanceQuery = `
            UPDATE ${schema}.users 
            SET balance_ton = (CAST(balance_ton AS DECIMAL) + 1.0)::TEXT 
            WHERE id = 228 
            RETURNING balance_ton;
          `;
          
          const balResult = await executeSQL(balanceQuery);
          console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', balResult.trim());
          
          console.log('\nüéâ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
          return;
        }
        
      } catch (schemaError) {
        console.log(`‚ùå –°—Ö–µ–º–∞ ${schema} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, schemaError.message);
      }
    }
    
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ö–µ–º—É —Å —Ç–∞–±–ª–∏—Ü–µ–π users');
    
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê:', error.message);
  }
}

quickCheck();