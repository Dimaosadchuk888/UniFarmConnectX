// –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ TON BOOST –ù–ê–ì–†–ê–î
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ TON Boost
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025
// –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface TonBoostInvestigation {
  tableExists: boolean;
  purchasesCount: number;
  usersPurchases: any[];
  rewardTransactions: any[];
  systemSchedulers: any[];
  boostIncomeAnalysis: {
    expectedRewards: number;
    actualRewards: number;
    missingRewards: number;
  };
}

async function investigateTonBoostSystem(): Promise<TonBoostInvestigation> {
  console.log('üîç –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï TON BOOST –°–ò–°–¢–ï–ú–´');
  console.log('='.repeat(70));

  const investigation: TonBoostInvestigation = {
    tableExists: false,
    purchasesCount: 0,
    usersPurchases: [],
    rewardTransactions: [],
    systemSchedulers: [],
    boostIncomeAnalysis: {
      expectedRewards: 0,
      actualRewards: 0,
      missingRewards: 0
    }
  };

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ton_boost_purchases
  try {
    console.log('\nüìã 1. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ ton_boost_purchases:');
    
    const { data: purchases, error: purchasesError } = await supabase
      .from('ton_boost_purchases')
      .select('*')
      .order('created_at', { ascending: false });

    if (purchasesError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: ${purchasesError.message}`);
      investigation.tableExists = false;
    } else {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${purchases?.length || 0}`);
      investigation.tableExists = true;
      investigation.purchasesCount = purchases?.length || 0;
      investigation.usersPurchases = purchases || [];
      
      if (purchases && purchases.length > 0) {
        console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:`);
        purchases.slice(0, 5).forEach(purchase => {
          console.log(`   User ${purchase.user_id}: ${purchase.package_type} - ${purchase.amount_ton} TON (${purchase.status})`);
        });
      }
    }
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: ${error}`);
    investigation.tableExists = false;
  }

  // 2. –ò—â–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å TON Boost –¥–æ—Ö–æ–¥–∞–º–∏
  try {
    console.log('\nüí∞ 2. –ê–ù–ê–õ–ò–ó TON BOOST –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ TON_BOOST_INCOME –∏–ª–∏ FARMING_REWARD —Å TON Boost –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const { data: boostRewards, error: rewardsError } = await supabase
      .from('transactions')
      .select('*')
      .or('type.eq.TON_BOOST_INCOME,type.eq.FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(50);

    if (rewardsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${rewardsError.message}`);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD/TON_BOOST_INCOME: ${boostRewards?.length || 0}`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å TON Boost
      const potentialBoostRewards = (boostRewards || []).filter(tx => 
        tx.metadata?.boost_multiplier || 
        tx.metadata?.ton_boost_active || 
        tx.description?.includes('boost') ||
        tx.description?.includes('TON Boost')
      );
      
      console.log(`üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ TON Boost –Ω–∞–≥—Ä–∞–¥—ã: ${potentialBoostRewards.length}`);
      investigation.rewardTransactions = potentialBoostRewards;
      
      if (potentialBoostRewards.length > 0) {
        console.log(`üìù –ü—Ä–∏–º–µ—Ä—ã TON Boost –Ω–∞–≥—Ä–∞–¥:`);
        potentialBoostRewards.slice(0, 3).forEach(tx => {
          console.log(`   User ${tx.user_id}: ${tx.amount_uni || tx.amount_ton} ${tx.amount_uni ? 'UNI' : 'TON'} - ${tx.created_at.substring(0, 19)}`);
        });
      } else {
        console.log(`‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å TON Boost –Ω–∞–≥—Ä–∞–¥–∞–º–∏!`);
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error}`);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost
  try {
    console.log('\nüë• 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ê–ö–¢–ò–í–ù–´–ú TON BOOST:');
    
    const { data: boostUsers, error: usersError } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_multiplier, balance_ton, balance_uni, uni_farming_active')
      .eq('ton_boost_active', true);

    if (usersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersError.message}`);
    } else {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${boostUsers?.length || 0}`);
      
      if (boostUsers && boostUsers.length > 0) {
        for (const user of boostUsers) {
          console.log(`\n   User ${user.id} (@${user.username || 'N/A'}):`);
          console.log(`      TON Boost: ‚úÖ –∞–∫—Ç–∏–≤–µ–Ω (${user.ton_boost_multiplier || 2}x)`);
          console.log(`      UNI —Ñ–∞—Ä–º–∏–Ω–≥: ${user.uni_farming_active ? '‚úÖ –∞–∫—Ç–∏–≤–µ–Ω' : '‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
          console.log(`      –ë–∞–ª–∞–Ω—Å—ã: ${user.balance_uni} UNI, ${user.balance_ton} TON`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { data: userRewards } = await supabase
            .from('transactions')
            .select('*')
            .eq('user_id', user.id)
            .eq('type', 'FARMING_REWARD')
            .order('created_at', { ascending: false })
            .limit(5);
          
          if (userRewards && userRewards.length > 0) {
            console.log(`      –ü–æ—Å–ª–µ–¥–Ω–∏–µ FARMING_REWARD (5 —à—Ç.):`);
            userRewards.forEach(reward => {
              console.log(`         ${reward.amount_uni} UNI - ${reward.created_at.substring(0, 19)}`);
            });
          } else {
            console.log(`      ‚ùå –ù–ï–¢ –Ω–∞–≥—Ä–∞–¥ FARMING_REWARD!`);
          }
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error}`);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ (cron jobs)
  try {
    console.log('\n‚è∞ 4. –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const { data: recentRewards } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', new Date(Date.now() - 10 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false });

    console.log(`üìä FARMING_REWARD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç: ${recentRewards?.length || 0}`);
    
    if (recentRewards && recentRewards.length > 0) {
      console.log(`‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:`);
      recentRewards.slice(0, 3).forEach(reward => {
        console.log(`   User ${reward.user_id}: ${reward.amount_uni} UNI - ${reward.created_at.substring(11, 19)}`);
      });
    } else {
      console.log(`‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤: ${error}`);
  }

  // 5. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
  console.log('\nüîß 5. –§–ê–ô–õ–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
  console.log('   –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  return investigation;
}

async function analyzeBoostRewardLogic(): Promise<void> {
  console.log('\nüß† –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò TON BOOST –ù–ê–ì–†–ê–î:');
  console.log('='.repeat(70));

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å TON Boost –Ω–∞–≥—Ä–∞–¥—ã
    const { data: eligibleUsers } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_multiplier, uni_farming_active')
      .eq('ton_boost_active', true)
      .eq('uni_farming_active', true);

    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –ø–æ–ª—É—á–∞—Ç—å TON Boost –Ω–∞–≥—Ä–∞–¥—ã: ${eligibleUsers?.length || 0}`);

    if (eligibleUsers && eligibleUsers.length > 0) {
      for (const user of eligibleUsers) {
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ
        const { data: farmingDeposits } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', user.id)
          .eq('type', 'FARMING_DEPOSIT')
          .order('created_at', { ascending: false })
          .limit(1);

        if (farmingDeposits && farmingDeposits.length > 0) {
          const deposit = farmingDeposits[0];
          console.log(`   ‚úÖ –ï—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${deposit.amount_uni} UNI`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞–µ—Ç –ª–∏ –æ–Ω –Ω–∞–≥—Ä–∞–¥—ã
          const { data: recentRewards } = await supabase
            .from('transactions')
            .select('*')
            .eq('user_id', user.id)
            .eq('type', 'FARMING_REWARD')
            .gte('created_at', new Date(Date.now() - 5 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            .order('created_at', { ascending: false});

          if (recentRewards && recentRewards.length > 0) {
            const avgReward = recentRewards.reduce((sum, r) => sum + parseFloat(r.amount_uni || '0'), 0) / recentRewards.length;
            console.log(`   ‚úÖ –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã: ${recentRewards.length} –∑–∞ 5 –º–∏–Ω, —Å—Ä–µ–¥–Ω—è—è: ${avgReward.toFixed(6)} UNI`);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã boost –º–Ω–æ–∂–∏—Ç–µ–ª—é
            const baseReward = parseFloat(deposit.amount_uni) * 0.01 / (24 * 60 * 60); // 1% –≤ –¥–µ–Ω—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            const expectedBoostReward = baseReward * (user.ton_boost_multiplier || 2);
            const actualReward = avgReward;
            
            console.log(`   üìä –û–∂–∏–¥–∞–µ–º–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å boost: ${expectedBoostReward.toFixed(8)} UNI/—Å–µ–∫`);
            console.log(`   üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${(actualReward/30).toFixed(8)} UNI/—Å–µ–∫`); // –∑–∞ 30 —Å–µ–∫
            
            if (Math.abs(actualReward/30 - expectedBoostReward) < expectedBoostReward * 0.1) {
              console.log(`   ‚úÖ TON Boost –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ü–†–ê–í–ò–õ–¨–ù–û`);
            } else {
              console.log(`   ‚ùå TON Boost –º–Ω–æ–∂–∏—Ç–µ–ª—å –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
            }
          } else {
            console.log(`   ‚ùå –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç`);
          }
        } else {
          console.log(`   ‚ùå –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ`);
        }
      }
    } else {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å TON Boost –Ω–∞–≥—Ä–∞–¥—ã`);
      console.log(`   (–Ω—É–∂–Ω–æ: ton_boost_active = true –ò uni_farming_active = true)`);
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏–∫–∏: ${error}`);
  }
}

async function main(): Promise<void> {
  console.log('üö® –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–û–ß–ï–ú–£ –ù–ï–¢ TON BOOST –ù–ê–ì–†–ê–î');
  console.log('='.repeat(80));
  console.log('–î–∞—Ç–∞:', new Date().toISOString());
  console.log('');

  const investigation = await investigateTonBoostSystem();
  await analyzeBoostRewardLogic();

  console.log('\n' + '='.repeat(80));
  console.log('üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
  console.log('='.repeat(80));

  if (!investigation.tableExists) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ ton_boost_purchases –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  } else if (investigation.purchasesCount === 0) {
    console.log('‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ ton_boost_purchases –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
  } else {
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_boost_purchases —Å–æ–¥–µ—Ä–∂–∏—Ç ${investigation.purchasesCount} –∑–∞–ø–∏—Å–µ–π`);
  }

  if (investigation.rewardTransactions.length === 0) {
    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å TON Boost –Ω–∞–≥—Ä–∞–¥–∞–º–∏');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
    console.log('   - –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost –Ω–∞–≥—Ä–∞–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   - –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ FARMING_REWARD –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ boost');
  }

  console.log('\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞');
  console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è TON Boost –º–Ω–æ–∂–∏—Ç–µ–ª—è');
  console.log('3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ TON Boost –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–µ—á–∞—é—Ç—Å—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
}

// –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
main().catch(console.error);