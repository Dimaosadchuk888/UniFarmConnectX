/**
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê USER #25
 * –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–∞ 0.1 TON
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function restoreUser25Balance() {
  console.log('üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê USER #25');
  console.log('='.repeat(40));
  
  try {
    const userId = 25;
    const missingAmount = 0.1; // TON
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user, error: getUserError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni')
      .eq('id', userId)
      .single();
    
    if (getUserError || !user) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è User #25:', getUserError?.message);
      return;
    }
    
    console.log('üìä –î–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
    
    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const currentTon = parseFloat(user.balance_ton || '0');
    const newTonBalance = currentTon + missingAmount;
    
    console.log(`\nüîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï:`);
    console.log(`   –î–æ–±–∞–≤–ª—è–µ–º: ${missingAmount} TON`);
    console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newTonBalance} TON`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    const { error: updateError } = await supabase
      .from('users')
      .update({ 
        balance_ton: newTonBalance,
        last_active: new Date().toISOString()
      })
      .eq('id', userId);
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError.message);
      return;
    }
    
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: updatedUser, error: checkError } = await supabase
      .from('users')
      .select('balance_ton, balance_uni')
      .eq('id', userId)
      .single();
    
    if (checkError || !updatedUser) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', checkError?.message);
      return;
    }
    
    console.log('\nüìä –ü–û–°–õ–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${updatedUser.balance_ton}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${updatedUser.balance_uni}`);
    
    // 5. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    const { data: compensationTx, error: txError } = await supabase
      .from('transactions')
      .insert({
        user_id: userId,
        amount_ton: missingAmount,
        amount_uni: 0,
        type: 'DEPOSIT',
        currency: 'TON',
        status: 'completed',
        description: `Balance restoration: compensation for lost deposit 00a1ba3c2614f4d65cc346805feea960`,
        metadata: {
          source: 'balance_restoration',
          original_type: 'COMPENSATION',
          reason: 'Lost TON deposit recovery',
          original_tx_id: 840416,
          restored_at: new Date().toISOString()
        }
      })
      .select()
      .single();
    
    if (txError) {
      console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', txError.message);
    } else {
      console.log(`‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${compensationTx.id}`);
    }
    
    console.log('\nüéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('   User #25 –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ 0.1 TON –æ–±—Ä–∞—Ç–Ω–æ');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
restoreUser25Balance().catch(console.error);