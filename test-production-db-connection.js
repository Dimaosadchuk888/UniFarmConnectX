/**
 * Final Test - Production Database Connection
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç production –±–∞–∑—É ep-lucky-boat-a463bggt
 */

import { Pool, neonConfig } from '@neondatabase/serverless';
import ws from 'ws';

neonConfig.webSocketConstructor = ws;

const PRODUCTION_DATABASE_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

async function finalTest() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Production Database ep-lucky-boat-a463bggt');
  
  const pool = new Pool({ connectionString: PRODUCTION_DATABASE_URL });

  try {
    const client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ production –±–∞–∑–µ:', tables.rows.length);
    tables.rows.forEach(row => console.log(`  - ${row.table_name}`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const users = await client.query('SELECT id, username, telegram_id FROM users ORDER BY id LIMIT 5');
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    users.rows.forEach(user => {
      console.log(`  - ID: ${user.id}, Username: ${user.username}, Telegram: ${user.telegram_id}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã transactions:');
    const transactions = await client.query('SELECT COUNT(*) as count FROM transactions');
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ: ${transactions.rows[0].count}`);
    
    console.log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã missions:');
    const missions = await client.query('SELECT COUNT(*) as count FROM missions');
    console.log(`‚úÖ –ú–∏—Å—Å–∏–π –≤ –±–∞–∑–µ: ${missions.rows[0].count}`);
    
    client.release();
    await pool.end();
    
    console.log('\nüéØ –ó–ê–î–ê–ß–ê T7 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('‚úÖ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ep-lucky-boat-a463bggt –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚úÖ API endpoints –∑–∞—â–∏—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –û—à–∏–±–∫–∏ "endpoint is disabled" —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    await pool.end();
    return false;
  }
}

finalTest();