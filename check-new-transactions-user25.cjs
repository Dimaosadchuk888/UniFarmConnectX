/**
 * –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 25
 * –ü–æ–∏—Å–∫ 2 –Ω–æ–≤—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkNewTransactionsUser25() {
  console.log('üöÄ –ü–û–ò–°–ö –ù–û–í–´–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 25');
  console.log('='.repeat(45));
  
  const userId = 25;
  const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user } = await supabase
      .from('users')
      .select('balance_ton, balance_uni, last_active')
      .eq('id', userId)
      .single();
    
    console.log('üë§ CURRENT STATE USER 25:');
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_active}`);
    
    // 2. –ò—â–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    const { data: recentTx, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false });
    
    console.log(`\nüìä –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 10 –ú–ò–ù–£–¢ (${recentTx?.length || 0}):`);
    
    if (recentTx && recentTx.length > 0) {
      recentTx.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        const secondsAgo = Math.floor((Date.now() - time.getTime()) / 1000) % 60;
        
        console.log(`\n   ${i + 1}. ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      –í–∞–ª—é—Ç–∞: ${tx.currency}`);
        console.log(`      –°—É–º–º–∞: ${tx.amount}`);
        console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${minutesAgo}:${secondsAgo.toString().padStart(2, '0')} –Ω–∞–∑–∞–¥)`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        
        // –í—ã–¥–µ–ª—è–µ–º TON –¥–µ–ø–æ–∑–∏—Ç—ã
        if (tx.currency === 'TON' && (tx.type === 'DEPOSIT' || tx.description.includes('deposit'))) {
          console.log(`      üéØ –ù–û–í–´–ô TON –î–ï–ü–û–ó–ò–¢ –ù–ê–ô–î–ï–ù!`);
        }
        
        if (tx.metadata) {
          console.log(`      Metadata: ${JSON.stringify(tx.metadata)}`);
        }
      });
    } else {
      console.log('   ‚ùå –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const { data: tonDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('currency', 'TON')
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false });
    
    console.log(`\nüíé TON –î–ï–ü–û–ó–ò–¢–´ –ó–ê 10 –ú–ò–ù–£–¢ (${tonDeposits?.length || 0}):`);
    
    if (tonDeposits && tonDeposits.length > 0) {
      tonDeposits.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const secondsAgo = Math.floor((Date.now() - time.getTime()) / 1000);
        console.log(`   ${i + 1}. ${tx.amount} TON - ${tx.description} (${secondsAgo} —Å–µ–∫ –Ω–∞–∑–∞–¥)`);
      });
      console.log('‚úÖ –ù–û–í–´–ï TON –î–ï–ü–û–ó–ò–¢–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!');
    } else {
      console.log('   ‚ùå –ù–æ–≤—ã–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   ü§î –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã - –æ–Ω–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ backend');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
    const { data: systemTonDeposits } = await supabase
      .from('transactions')
      .select('id, user_id, amount, created_at, description')
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false });
    
    console.log(`\nüåê –í–°–ï TON –î–ï–ü–û–ó–ò–¢–´ –í –°–ò–°–¢–ï–ú–ï –ó–ê 10 –ú–ò–ù–£–¢ (${systemTonDeposits?.length || 0}):`);
    
    if (systemTonDeposits && systemTonDeposits.length > 0) {
      systemTonDeposits.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`   ${i + 1}. User ${tx.user_id}: ${tx.amount} TON (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥) - ${tx.description.substring(0, 50)}...`);
        
        if (tx.user_id === userId) {
          console.log(`      üéØ –≠–¢–û –í–ê–® –î–ï–ü–û–ó–ò–¢!`);
        }
      });
    } else {
      console.log('   ‚ùå –ù–ò –û–î–ù–û–ì–û TON –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞ 10 –º–∏–Ω—É—Ç');
      console.log('   üö® –ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç TON –¥–µ–ø–æ–∑–∏—Ç—ã!');
    }
    
    // 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (–ª—é–±—ã–µ)
    const { data: latestSystem } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at')
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log('\nüîÑ –ü–û–°–õ–ï–î–ù–ò–ï 10 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –°–ò–°–¢–ï–ú–ï:');
    if (latestSystem) {
      latestSystem.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`   ${i + 1}. User ${tx.user_id}: ${tx.type} ${tx.amount} ${tx.currency} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
      });
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:');
    if (tonDeposits && tonDeposits.length >= 2) {
      console.log('‚úÖ –û–±–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else if (tonDeposits && tonDeposits.length === 1) {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ 2');
    } else {
      console.log('‚ùå –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–±–ª–µ–º–∞ —Å backend –∑–∞–ø–∏—Å—å—é');
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }
}

checkNewTransactionsUser25().catch(console.error);