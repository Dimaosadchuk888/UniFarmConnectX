import { supabase } from './core/supabase';
import * as fs from 'fs';
import * as path from 'path';

async function deepConfigInvestigation() {
  console.log('=== TON BOOST –ì–õ–£–ë–û–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===\n');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('üìÅ 1. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´:\n');
    
    const schedulerPath = './modules/scheduler/tonBoostIncomeScheduler.ts';
    const serverIndexPath = './server/index.ts';
    
    if (fs.existsSync(schedulerPath)) {
      console.log(`‚úÖ –§–∞–π–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${schedulerPath}`);
      
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const content = fs.readFileSync(schedulerPath, 'utf-8');
      
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
      const classMatch = content.match(/class\s+(\w+)\s*{/);
      if (classMatch) {
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: ${classMatch[1]}`);
      }
      
      // –ò—â–µ–º —ç–∫—Å–ø–æ—Ä—Ç
      const exportMatch = content.match(/export\s+const\s+(\w+)\s*=\s*new/);
      if (exportMatch) {
        console.log(`  –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${exportMatch[1]}`);
      }
      
      // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
      const repoImports = content.match(/from\s+['"]([^'"]*TonFarming[^'"]*)['"]/g);
      if (repoImports) {
        console.log(`  –ò–º–ø–æ—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:`);
        repoImports.forEach(imp => console.log(`    ${imp}`));
      }
    } else {
      console.log(`‚ùå –§–∞–π–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω!`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ server/index.ts
    if (fs.existsSync(serverIndexPath)) {
      const serverContent = fs.readFileSync(serverIndexPath, 'utf-8');
      const importMatch = serverContent.match(/import\s*{\s*(\w+)\s*}\s*from\s*['"]([^'"]*tonBoost[^'"]*)['"]/i);
      
      if (importMatch) {
        console.log(`\n  –ò–º–ø–æ—Ä—Ç –≤ server/index.ts:`);
        console.log(`    –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${importMatch[1]}`);
        console.log(`    –ü—É—Ç—å: ${importMatch[2]}`);
      }
    }

    // 2. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\nüîé 2. –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í –ò –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –§–ê–ô–õ–û–í:\n');
    
    const findFiles = (dir: string, pattern: RegExp): string[] => {
      const results: string[] = [];
      
      try {
        const files = fs.readdirSync(dir);
        
        for (const file of files) {
          const fullPath = path.join(dir, file);
          const stat = fs.statSync(fullPath);
          
          if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
            results.push(...findFiles(fullPath, pattern));
          } else if (pattern.test(file)) {
            results.push(fullPath);
          }
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
      }
      
      return results;
    };

    const tonBoostFiles = findFiles('.', /ton.*boost|boost.*scheduler/i);
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å 'ton boost' –∏–ª–∏ 'boost scheduler': ${tonBoostFiles.length}`);
    tonBoostFiles.forEach(file => console.log(`  - ${file}`));

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüóÑÔ∏è 3. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    const { data: tonFarmingData, error: tfError } = await supabase
      .from('ton_farming_data')
      .select('count')
      .limit(1);
    
    console.log(`–¢–∞–±–ª–∏—Ü–∞ ton_farming_data: ${tfError ? '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞' : '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const alternativeTables = ['ton_boost_data', 'boost_farming_data', 'ton_boost_farming'];
    
    for (const tableName of alternativeTables) {
      const { error } = await supabase
        .from(tableName)
        .select('count')
        .limit(1);
      
      console.log(`–¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${error ? '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞' : '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
    }

    // 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    console.log('\nüì¶ 4. –ê–ù–ê–õ–ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø TonFarmingRepository:\n');
    
    const repoPath = './modules/boost/TonFarmingRepository.ts';
    if (fs.existsSync(repoPath)) {
      const repoContent = fs.readFileSync(repoPath, 'utf-8');
      
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      const tableMatch = repoContent.match(/from\(['"](\w+)['"]\)/);
      if (tableMatch) {
        console.log(`  –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞: ${tableMatch[1]}`);
      }
      
      // –ò—â–µ–º –º–µ—Ç–æ–¥—ã
      const methods = repoContent.match(/async\s+(\w+)\s*\(/g);
      if (methods) {
        console.log(`  –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: ${methods.length}`);
        console.log(`  –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:`);
        methods.slice(0, 5).forEach(m => console.log(`    - ${m.replace(/async\s+/, '').replace(/\s*\(/, '')}`));
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
    console.log('\nüë§ 5. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 74:\n');
    
    const { data: userData, error: userError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', 74)
      .single();

    if (!userError && userData) {
      console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data:');
      Object.entries(userData).forEach(([key, value]) => {
        if (key.includes('farming') || key.includes('boost')) {
          console.log(`  ${key}: ${value}`);
        }
      });
    } else {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ton_farming_data');
    }

    // 6. –í—ã–≤–æ–¥—ã
    console.log('\nüìä 6. –í–´–í–û–î–´:\n');
    
    console.log('–ü–†–û–í–ï–†–û–ß–ù–´–ô –°–ü–ò–°–û–ö:');
    console.log('[ ] –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç');
    console.log('[ ] –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ server/index.ts');
    console.log('[ ] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ë–î');
    console.log('[ ] –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
    console.log('[ ] –ú–µ—Ç–æ–¥—ã start() –∏ processTonBoostIncome() —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    
    console.log('\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞');
    console.log('2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ë–î');
    console.log('3. –ù–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–ª–∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π');
    console.log('4. –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

deepConfigInvestigation();