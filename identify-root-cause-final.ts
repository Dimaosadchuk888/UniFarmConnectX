#!/usr/bin/env tsx
/**
 * üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–†–ù–Ø –ü–†–û–ë–õ–ï–ú–´
 * –ù–∞—à–ª–∏ —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ –¥–≤–æ–π–Ω—ã—Ö –ø—É—Ç—è—Ö —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

import { supabase } from './core/supabase';

async function identifyRootCauseFinal() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–†–ù–Ø –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É DEPOSIT –∏ TON_DEPOSIT
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const { data: depositTypes, error: typesError } = await supabase
      .from('transactions')
      .select('type, COUNT(*) as count')
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .gte('created_at', '2025-07-01T00:00:00.000Z');

    if (!typesError) {
      console.log('üìä –¢–∏–ø—ã –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      const typeMap = {};
      depositTypes?.forEach(row => {
        typeMap[row.type] = row.count;
        console.log(`   ${row.type}: ${row.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
    }

    // 2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Ö —Ç–∏–ø—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\n2Ô∏è‚É£ –¢–ò–ü–´ –î–ï–ü–û–ó–ò–¢–û–í –£ –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    const problematicUsers = [255, 305, 192, 230, 246];
    
    for (const userId of problematicUsers) {
      const { data: userDeposits } = await supabase
        .from('transactions')
        .select('type, amount, created_at, currency')
        .eq('user_id', userId)
        .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
        .order('created_at', { ascending: true });

      console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:`);
      
      const depositCount = userDeposits?.filter(tx => tx.type === 'DEPOSIT').length || 0;
      const tonDepositCount = userDeposits?.filter(tx => tx.type === 'TON_DEPOSIT').length || 0;
      
      console.log(`   DEPOSIT: ${depositCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`   TON_DEPOSIT: ${tonDepositCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      if (userDeposits && userDeposits.length > 0) {
        console.log(`   –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${userDeposits[0].type} ${userDeposits[0].amount} (${userDeposits[0].created_at.slice(0, 16)})`);
      }
    }

    // 3. –ê–Ω–∞–ª–∏–∑ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ - –ø–æ–∏—Å–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –°–õ–ï–î–û–í –û–¢–ö–õ–û–ù–ï–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏ –≤ –±–ª–∏–∑–∫–æ–µ –≤—Ä–µ–º—è
    const { data: suspiciousDeposits } = await supabase
      .from('transactions')
      .select('user_id, type, amount, created_at, currency')
      .in('amount', ['0.65', '1.0', '1', '0.650000', '1.000000'])
      .eq('currency', 'TON')  
      .gte('created_at', '2025-07-01T00:00:00.000Z')
      .order('created_at', { ascending: false })
      .limit(20);

    if (suspiciousDeposits) {
      console.log(`üìã –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã (0.65, 1.0 TON):`);
      suspiciousDeposits.forEach((dep, i) => {
        console.log(`   ${i + 1}. user_id ${dep.user_id}: ${dep.type} ${dep.amount} TON (${dep.created_at.slice(0, 16)})`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å DEPOSIT –∑–∞–ø–∏—Å—è–º–∏
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° DEPOSIT –ó–ê–ü–ò–°–Ø–ú–ò:');
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å DEPOSIT –Ω–æ –Ω–µ—Ç TON_DEPOSIT
    const { data: depositUsers } = await supabase
      .from('transactions')
      .select('user_id')
      .eq('type', 'DEPOSIT')
      .eq('currency', 'TON')
      .gte('created_at', '2025-07-01T00:00:00.000Z');

    const uniqueDepositUsers = [...new Set(depositUsers?.map(tx => tx.user_id) || [])];
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å DEPOSIT –∑–∞–ø–∏—Å—è–º–∏: ${uniqueDepositUsers.length}`);
    
    for (const userId of uniqueDepositUsers.slice(0, 5)) {
      const { data: user } = await supabase
        .from('users')
        .select('id, username, ton_boost_active, ton_boost_package')
        .eq('id', userId)
        .single();

      const { data: tonDepositCount } = await supabase
        .from('transactions')
        .select('id')
        .eq('user_id', userId)
        .eq('type', 'TON_DEPOSIT');

      console.log(`\nüìã User ${userId} (${user?.username || 'N/A'}):`);
      console.log(`   TON Boost: ${user?.ton_boost_active ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–¢'} (–ø–∞–∫–µ—Ç ${user?.ton_boost_package || 0})`);
      console.log(`   TON_DEPOSIT –∑–∞–ø–∏—Å–µ–π: ${tonDepositCount?.length || 0}`);
      
      if (user?.ton_boost_active && (tonDepositCount?.length || 0) === 0) {
        console.log(`   üö® –ù–ê–ô–î–ï–ù –ü–†–û–ë–õ–ï–ú–ù–´–ô: boost –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ TON_DEPOSIT –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!`);
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ö–û–†–ï–ù–¨ –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù:');
    console.log('');
    console.log('üîç –ü–†–û–ë–õ–ï–ú–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´:');
    console.log('1. UnifiedTransactionService –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ TON_DEPOSIT –∏–∑-–∑–∞ –ª–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
    console.log('2. –ù–æ —Å–æ–∑–¥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ DEPOSIT –∑–∞–ø–∏—Å–∏');
    console.log('3. TON Boost —Å–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ TON_DEPOSIT –∑–∞–ø–∏—Å–∏');
    console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç: boost –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö" –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ—Ç');
    console.log('');
    console.log('üí° –ú–ï–•–ê–ù–ò–ó–ú –°–ë–û–Ø:');
    console.log('- Webhook –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
    console.log('- UnifiedTransactionService.createTransaction() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');  
    console.log('- –°–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç "–ø–æ—Ö–æ–∂—É—é" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    console.log('- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è { success: false, error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }');
    console.log('- –ù–û –±–∞–ª–∞–Ω—Å —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –ø—É—Ç—å');
    console.log('- TON Boost –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —á–µ—Ä–µ–∑ scheduler');
    console.log('');
    console.log('üîß –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤ UnifiedTransactionService');
    console.log('2. –û–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω—ã–π –ø—É—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è TON_DEPOSIT');
    console.log('3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

identifyRootCauseFinal().catch(console.error);