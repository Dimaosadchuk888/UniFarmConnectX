/**
 * –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º SQL –∑–∞–ø—Ä–æ—Å–æ–º
 */

import { supabase } from './core/supabase';
import { UnifiedTransactionService } from './core/TransactionService';

const TARGET_BOC = 'te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKABZpFBvrrFJAWiokVZF0jaVpS4WogHhGrlhtGT3Nx2c+u4VTiWDwFKqA5bFP1f+FcnGm3mCx5TtEYlGNh1ccWBFNTRi7RHrhaAAAG8AAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKh3NZQAAAAAAAAAAAAAAAAAABGzPzj';

async function testDuplicationFixFinal() {
  console.log('\nüîß === –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò ===\n');

  const userId = 184;
  const transactionService = UnifiedTransactionService.getInstance();

  try {
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤...');
    await supabase
      .from('transactions')
      .delete()
      .eq('user_id', userId)
      .like('description', '%FINAL_DEDUPLICATION_TEST%');

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const result1 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 2.0,
      description: 'FINAL_DEDUPLICATION_TEST - First transaction',
      metadata: {
        tx_hash: TARGET_BOC,
        test_id: 'test_1'
      }
    });

    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç 1: ${result1.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
    if (!result1.success) console.log(`–û—à–∏–±–∫–∞: ${result1.error}`);

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Ç–µ–º –∂–µ BOC
    console.log('\n2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç...');
    const result2 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 2.0,
      description: 'FINAL_DEDUPLICATION_TEST - Duplicate (should fail)',
      metadata: {
        tx_hash: TARGET_BOC,
        test_id: 'test_2'
      }
    });

    const deduplicationWorked = !result2.success;
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç 2: ${deduplicationWorked ? '‚úÖ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù (—Ö–æ—Ä–æ—à–æ)' : '‚ùå –ü–†–û–®–ï–õ (–ø–ª–æ—Ö–æ)'}`);
    if (!result2.success) console.log(`‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: ${result2.error}`);

    // –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
    console.log('\n3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º...');
    const bocWithSuffix = `${TARGET_BOC}_1754226000000_test456`;
    const result3 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 2.0,
      description: 'FINAL_DEDUPLICATION_TEST - Suffix duplicate (should fail)',
      metadata: {
        tx_hash: bocWithSuffix,
        test_id: 'test_3'
      }
    });

    const suffixDeduplicationWorked = !result3.success;
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç 3: ${suffixDeduplicationWorked ? '‚úÖ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù (—Ö–æ—Ä–æ—à–æ)' : '‚ùå –ü–†–û–®–ï–õ (–ø–ª–æ—Ö–æ)'}`);
    if (!result3.success) console.log(`‚úÖ –°—É—Ñ—Ñ–∏–∫—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: ${result3.error}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: finalCheck, error: checkError } = await supabase
      .from('transactions')
      .select('id, tx_hash_unique, description')
      .eq('user_id', userId)
      .like('description', '%FINAL_DEDUPLICATION_TEST%');

    const dbCount = finalCheck?.length || 0;
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î: ${dbCount}`);
    
    if (dbCount === 1) {
      console.log('‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      finalCheck?.forEach((tx, i) => {
        console.log(`  ${i+1}. ID: ${tx.id}, Hash: ${tx.tx_hash_unique?.substring(0, 30)}...`);
      });
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await supabase
      .from('transactions')
      .delete()
      .eq('user_id', userId)
      .like('description', '%FINAL_DEDUPLICATION_TEST%');

    // –ò–¢–û–ì–ò
    console.log('\nüéØ –ò–¢–û–ì–ò:');
    console.log(`‚úÖ –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${result1.success}`);
    console.log(`‚úÖ –î—É–±–ª–∏–∫–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${deduplicationWorked}`);
    console.log(`‚úÖ –°—É—Ñ—Ñ–∏–∫—Å –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${suffixDeduplicationWorked}`);
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–∏—Å—Ç–∞—è: ${dbCount === 1}`);

    const allPassed = result1.success && deduplicationWorked && suffixDeduplicationWorked && dbCount === 1;
    
    if (allPassed) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testDuplicationFixFinal().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});