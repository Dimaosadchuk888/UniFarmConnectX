/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π webhook –¥–ª—è Telegram
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ URL –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
 */

import https from 'https';

const BASE_URL = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app';
const WEBHOOK_PATHS = [
  '/webhook',
  '/api/webhook', 
  '/api/v2/webhook',
  '/api/telegram/webhook',
  '/api/v2/telegram/webhook',
  '/telegram/webhook'
];

const testUpdate = {
  update_id: 123456789,
  message: {
    message_id: 1,
    from: { id: 123456789, first_name: "Test", username: "testuser" },
    chat: { id: 123456789, type: "private" },
    date: Math.floor(Date.now() / 1000),
    text: "/start"
  }
};

function makeRequest(url, method = 'POST', data = null) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot'
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed, raw: responseData });
        } catch (e) {
          resolve({ status: res.statusCode, data: null, raw: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testAllWebhookPaths() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ webhook...');
  console.log('‚îÄ'.repeat(60));
  
  let workingPaths = [];
  
  for (const path of WEBHOOK_PATHS) {
    const fullUrl = BASE_URL + path;
    
    try {
      const response = await makeRequest(fullUrl, 'POST', testUpdate);
      
      console.log(`üìç ${path.padEnd(25)} ‚Üí ${response.status}`);
      
      if (response.status === 200) {
        console.log(`‚úÖ –†–ê–ë–û–ß–ò–ô –ü–£–¢–¨ –ù–ê–ô–î–ï–ù: ${path}`);
        console.log(`üìÑ –û—Ç–≤–µ—Ç: ${response.raw}`);
        workingPaths.push(path);
        console.log('‚îÄ'.repeat(40));
      } else if (response.status === 404) {
        console.log(`‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      } else if (response.status === 500) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.raw}`);
      } else {
        console.log(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å ${response.status}: ${response.raw}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('‚îÄ'.repeat(60));
  
  if (workingPaths.length > 0) {
    console.log('‚úÖ –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• –ü–£–¢–ï–ô:', workingPaths.length);
    workingPaths.forEach(path => console.log(`  ‚Ä¢ ${BASE_URL}${path}`));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª—É—á—à–∏–π –ø—É—Ç—å —Å Telegram webhook
    const bestPath = workingPaths[0];
    console.log(`\nüéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞ –ª—É—á—à–∏–π –ø—É—Ç—å: ${bestPath}`);
    return BASE_URL + bestPath;
  } else {
    console.log('‚ùå –ù–ò –û–î–ò–ù –ü–£–¢–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–µ—Ä–∞');
    return null;
  }
}

async function main() {
  console.log('üöÄ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook –ø—É—Ç–µ–π –¥–ª—è Telegram');
  console.log(`üåê –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`);
  console.log('‚îÄ'.repeat(60));
  
  const workingUrl = await testAllWebhookPaths();
  
  if (workingUrl) {
    console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π webhook URL: ${workingUrl}`);
  } else {
    console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
    console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

main().catch(console.error);