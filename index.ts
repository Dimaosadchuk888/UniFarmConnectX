#!/usr/bin/env node

import { startServer } from './core/server';

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function bootstrap() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm...');
    console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
    
    await startServer();
    
    console.log('‚úÖ UniFarm —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error: Error) => {
  console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  console.error('–ü—Ä–æ–º–∏—Å:', promise);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
bootstrap();