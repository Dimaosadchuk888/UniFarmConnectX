/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–ï
 * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è user_id=48
 */

import { createClient } from '@supabase/supabase-js';

async function generateFinalReferralReport() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–ï');
  console.log('='.repeat(70));
  
  const baseUserId = 48;
  
  // 1. –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  console.log('\nüìä 1. –û–°–ù–û–í–ù–û–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:');
  console.log('-'.repeat(50));
  
  const { data: mainUser, error: mainError } = await supabase
    .from('users')
    .select('*')
    .eq('id', baseUserId)
    .single();
  
  if (mainError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', mainError.message);
    return;
  }
  
  console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${mainUser.username} (ID: ${baseUserId})`);
  console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${mainUser.ref_code}`);
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å—ã: ${mainUser.balance_uni} UNI, ${mainUser.balance_ton} TON`);
  console.log(`üìà UNI —Ñ–∞—Ä–º–∏–Ω–≥: ${mainUser.uni_farming_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} (–¥–µ–ø–æ–∑–∏—Ç: ${mainUser.uni_deposit_amount} UNI)`);
  console.log(`üöÄ TON Boost: –ü–∞–∫–µ—Ç ${mainUser.ton_boost_package} (—Å—Ç–∞–≤–∫–∞: ${(mainUser.ton_boost_rate * 100).toFixed(1)}%)`);
  
  // 2. –ê–ù–ê–õ–ò–ó –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´
  console.log('\nüìä 2. –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:');
  console.log('-'.repeat(50));
  
  const { data: allPartners, error: partnersError } = await supabase
    .from('users')
    .select('id, username, telegram_id, referred_by, balance_uni, balance_ton, ref_code, uni_farming_active, ton_boost_package')
    .gte('telegram_id', 999999000)
    .order('id');
  
  if (partnersError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', partnersError.message);
    return;
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${allPartners.length}`);
  
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
  console.log('\nüîó –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê:');
  console.log('-'.repeat(50));
  
  let chainStructure = [];
  let currentReferrer = baseUserId;
  let level = 0;
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  chainStructure.push({
    level: 0,
    user_id: baseUserId,
    username: mainUser.username,
    telegram_id: mainUser.telegram_id,
    ref_code: mainUser.ref_code,
    balance_uni: mainUser.balance_uni,
    balance_ton: mainUser.balance_ton,
    referrer_id: null
  });
  
  // –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –ø–æ referred_by
  while (currentReferrer && level < 20) {
    const nextPartner = allPartners.find(p => p.referred_by === currentReferrer);
    
    if (nextPartner) {
      level++;
      chainStructure.push({
        level: level,
        user_id: nextPartner.id,
        username: nextPartner.username,
        telegram_id: nextPartner.telegram_id,
        ref_code: nextPartner.ref_code,
        balance_uni: nextPartner.balance_uni,
        balance_ton: nextPartner.balance_ton,
        referrer_id: currentReferrer
      });
      currentReferrer = nextPartner.id;
    } else {
      break;
    }
  }
  
  console.log('–£—Ä–æ–≤–µ–Ω—å | User ID | Username         | Telegram ID  | Ref Code                      | –ë–∞–ª–∞–Ω—Å—ã (UNI/TON)');
  console.log('-'.repeat(110));
  
  chainStructure.forEach(user => {
    const levelStr = user.level === 0 ? 'MAIN' : user.level.toString().padStart(2);
    console.log(`   ${levelStr}    | ${user.user_id.toString().padStart(7)} | ${user.username.padEnd(16)} | ${user.telegram_id} | ${user.ref_code.padEnd(29)} | ${user.balance_uni}/${user.balance_ton}`);
  });
  
  console.log(`\nüìà –î–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏: ${level} —É—Ä–æ–≤–Ω–µ–π`);
  console.log(`üéØ –¶–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞: 20 —É—Ä–æ–≤–Ω–µ–π`);
  console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${((level / 20) * 100).toFixed(1)}%`);
  
  // 3. –ê–ù–ê–õ–ò–ó –ü–†–Ø–ú–´–• –†–ï–§–ï–†–ê–õ–û–í
  console.log('\nüìä 3. –ü–†–Ø–ú–´–ï –†–ï–§–ï–†–ê–õ–´ USER_ID=48:');
  console.log('-'.repeat(50));
  
  const directReferrals = allPartners.filter(p => p.referred_by === baseUserId);
  console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${directReferrals.length}`);
  
  if (directReferrals.length > 0) {
    directReferrals.forEach((referral, idx) => {
      console.log(`   ${idx + 1}. ID: ${referral.id} | ${referral.username} | –ë–∞–ª–∞–Ω—Å—ã: ${referral.balance_uni} UNI, ${referral.balance_ton} TON`);
    });
  }
  
  // 4. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ò –ù–ê–ß–ò–°–õ–ï–ù–ò–ô
  console.log('\nüìä 4. –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø:');
  console.log('-'.repeat(50));
  
  const { data: referralTransactions, error: refTxError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', baseUserId)
    .ilike('description', '%referral%')
    .order('created_at', { ascending: false })
    .limit(20);
  
  if (!refTxError && referralTransactions?.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${referralTransactions.length}`);
    
    referralTransactions.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      console.log(`   ${idx + 1}. ID: ${tx.id} | +${amount} ${currency} | ${tx.description}`);
    });
    
    const totalReferralUni = referralTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || 0), 0);
    const totalReferralTon = referralTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || 0), 0);
    
    console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferralUni.toFixed(4)} UNI + ${totalReferralTon.toFixed(4)} TON`);
  } else {
    console.log('üìù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 5. –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–ê–†–¢–ù–ï–†–û–í
  console.log('\nüìä 5. –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ê–†–¢–ù–ï–†–û–í:');
  console.log('-'.repeat(50));
  
  const { data: partnerTransactions, error: partnerTxError } = await supabase
    .from('transactions')
    .select('user_id, type, amount_uni, amount_ton, description, created_at')
    .in('user_id', allPartners.map(p => p.id))
    .order('created_at', { ascending: false })
    .limit(30);
  
  if (!partnerTxError && partnerTransactions?.length > 0) {
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const activityByUser = {};
    partnerTransactions.forEach(tx => {
      if (!activityByUser[tx.user_id]) {
        activityByUser[tx.user_id] = [];
      }
      activityByUser[tx.user_id].push(tx);
    });
    
    Object.keys(activityByUser).forEach(userId => {
      const partner = allPartners.find(p => p.id == userId);
      const transactions = activityByUser[userId];
      const uniTotal = transactions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || 0), 0);
      const tonTotal = transactions.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || 0), 0);
      
      if (partner) {
        console.log(`   ${partner.username} (ID: ${userId}): ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π | –°—É–º–º–∞: ${uniTotal.toFixed(2)} UNI + ${tonTotal.toFixed(2)} TON`);
      }
    });
    
    const activePartners = Object.keys(activityByUser).length;
    console.log(`\nüìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${activePartners}/${allPartners.length}`);
  } else {
    console.log('üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞');
  }
  
  // 6. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ò
  console.log('\nüìä 6. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ò:');
  console.log('-'.repeat(50));
  
  const allUsers = [mainUser, ...allPartners];
  const totalUsers = allUsers.length;
  const totalUniBalance = allUsers.reduce((sum, u) => sum + parseFloat(u.balance_uni || 0), 0);
  const totalTonBalance = allUsers.reduce((sum, u) => sum + parseFloat(u.balance_ton || 0), 0);
  const activeUniUsers = allUsers.filter(u => u.uni_farming_active === true).length;
  const tonBoostUsers = allUsers.filter(u => u.ton_boost_package && u.ton_boost_package > 0).length;
  
  console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
  console.log(`üí∞ –û–±—â–∏–π UNI –±–∞–ª–∞–Ω—Å —Å–µ—Ç–∏: ${totalUniBalance.toFixed(2)} UNI`);
  console.log(`üí∞ –û–±—â–∏–π TON –±–∞–ª–∞–Ω—Å —Å–µ—Ç–∏: ${totalTonBalance.toFixed(2)} TON`);
  console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${activeUniUsers}`);
  console.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${tonBoostUsers}`);
  console.log(`üîó –ì–ª—É–±–∏–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: ${level} —É—Ä–æ–≤–Ω–µ–π`);
  
  // 7. –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê
  console.log('\nüìä 7. –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:');
  console.log('-'.repeat(50));
  
  const readinessChecks = [
    { check: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω', status: mainUser ? '‚úÖ' : '‚ùå' },
    { check: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞', status: level >= 10 ? '‚úÖ' : 'üü°' },
    { check: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã –∏–º–µ—é—Ç –±–∞–ª–∞–Ω—Å—ã', status: allPartners.every(p => p.balance_uni > 0) ? '‚úÖ' : '‚ùå' },
    { check: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã', status: referralTransactions?.length > 0 ? '‚úÖ' : 'üìù' },
    { check: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', status: partnerTransactions?.length > 0 ? '‚úÖ' : 'üìù' },
    { check: '–¶–µ–ø–æ—á–∫–∞ –¥–æ 20 —É—Ä–æ–≤–Ω—è', status: level === 20 ? '‚úÖ' : 'üîÑ' }
  ];
  
  readinessChecks.forEach(item => {
    console.log(`   ${item.status} ${item.check}`);
  });
  
  const readyCount = readinessChecks.filter(item => item.status === '‚úÖ').length;
  const readinessPercent = (readyCount / readinessChecks.length) * 100;
  
  console.log(`\nüìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: ${readinessPercent.toFixed(1)}%`);
  
  // 8. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
  console.log('\nüìä 8. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('-'.repeat(50));
  
  if (level === 20) {
    console.log('‚úÖ 20-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∞');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    console.log('üì± –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
  } else if (level >= 10) {
    console.log(`üü° –°–æ–∑–¥–∞–Ω–æ ${level} —É—Ä–æ–≤–Ω–µ–π –∏–∑ 20 (—á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–æ)`);
    console.log('üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Ä–æ–≤–Ω–µ–π');
    console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞');
  } else {
    console.log(`‚ùå –°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ ${level} —É—Ä–æ–≤–Ω–µ–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞)`);
    console.log('üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
  }
  
  console.log('\nüìã –°–°–´–õ–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/UniFarming_Bot/UniFarm?startapp=${mainUser.ref_code}`);
  console.log(`üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: https://uni-farm-connect-x-osadchukdmitro2.replit.app`);
  console.log(`üë§ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–±–∏–Ω–µ—Ç: user_id=${baseUserId}`);
  
  console.log('\n' + '='.repeat(70));
  console.log('üéØ –û–¢–ß–ï–¢ –ü–û –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–ï –ó–ê–í–ï–†–®–ï–ù');
  
  return {
    main_user: mainUser,
    partners_count: allPartners.length,
    chain_length: level,
    readiness_percent: readinessPercent,
    total_network_uni: totalUniBalance,
    total_network_ton: totalTonBalance,
    referral_rewards: referralTransactions?.length || 0
  };
}

generateFinalReferralReport().catch(console.error);