/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê TON –ë–ê–õ–ê–ù–°–û–í
 * –¶–µ–ª—å: –ù–∞–π—Ç–∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * –ü—Ä–æ–±–ª–µ–º—ã: –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è/–≤–æ–∑–≤—Ä–∞—Ç—ã TON –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö –∏ TON Boost
 */

import { supabase } from './core/supabase';

async function analyzeTonBalanceFlow() {
  console.log('üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê TON –ë–ê–õ–ê–ù–°–û–í');
  console.log('=' * 70);
  
  try {
    // 1. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –í–†–ï–ú–ï–ù–ù–´–ú–ò –ò–ù–¢–ï–†–í–ê–õ–ê–ú–ò
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (72 —á–∞—Å–∞):');
    console.log('-'.repeat(50));
    
    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    
    const { data: tonTransactions, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', threeDaysAgo.toISOString())
      .or('currency.eq.TON,amount_ton.neq.0')
      .order('created_at', { ascending: false })
      .limit(50);
    
    if (tonError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError);
      return;
    }
    
    if (!tonTransactions || tonTransactions.length === 0) {
      console.log('‚ö†Ô∏è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 72 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userFlows = new Map();
    
    tonTransactions.forEach(tx => {
      const userId = tx.user_id.toString();
      if (!userFlows.has(userId)) {
        userFlows.set(userId, []);
      }
      userFlows.get(userId).push({
        id: tx.id,
        amount: parseFloat(tx.amount_ton || '0'),
        type: tx.type,
        description: tx.description,
        created_at: tx.created_at,
        metadata: tx.metadata
      });
    });
    
    console.log(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userFlows.size}`);
    
    // 2. –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í –°–ü–ò–°–ê–ù–ò–ï ‚Üí –í–û–ó–í–†–ê–¢
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–ê–¢–¢–ï–†–ù–û–í –°–ü–ò–°–ê–ù–ò–ï ‚Üí –í–û–ó–í–†–ê–¢:');
    console.log('-'.repeat(50));
    
    let suspiciousPatternsFound = 0;
    let totalReversalPatterns = 0;
    
    for (const [userId, transactions] of userFlows) {
      if (transactions.length < 2) continue;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      transactions.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
      
      let userSuspiciousPatterns = 0;
      
      for (let i = 0; i < transactions.length - 1; i++) {
        const tx1 = transactions[i];
        const tx2 = transactions[i + 1];
        
        const amount1 = tx1.amount;
        const amount2 = tx2.amount;
        const timeDiff = (new Date(tx2.created_at).getTime() - new Date(tx1.created_at).getTime()) / 1000;
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω: —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—É–º–º—ã
        if (amount1 < 0 && amount2 > 0 && Math.abs(Math.abs(amount1) - amount2) < 0.001 && timeDiff < 3600) {
          console.log(`\nüî¥ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù - User ${userId}:`);
          console.log(`  –°–ø–∏—Å–∞–Ω–∏–µ: ${amount1} TON (${new Date(tx1.created_at).toLocaleString()})`);
          console.log(`  –í–æ–∑–≤—Ä–∞—Ç:  +${amount2} TON (${new Date(tx2.created_at).toLocaleString()})`);
          console.log(`  –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(timeDiff)} —Å–µ–∫—É–Ω–¥`);
          console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ 1: ${tx1.description}`);
          console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ 2: ${tx2.description}`);
          
          if (tx1.metadata?.tx_hash || tx2.metadata?.tx_hash) {
            console.log(`  TX Hash 1: ${tx1.metadata?.tx_hash || '–Ω–µ—Ç'}`);
            console.log(`  TX Hash 2: ${tx2.metadata?.tx_hash || '–Ω–µ—Ç'}`);
          }
          
          userSuspiciousPatterns++;
          totalReversalPatterns++;
        }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (Math.abs(amount1 - amount2) < 0.001 && amount1 !== 0 && timeDiff < 300) {
          console.log(`\nüü† –í–û–ó–ú–û–ñ–ù–û–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï - User ${userId}:`);
          console.log(`  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1: ${amount1} TON (${new Date(tx1.created_at).toLocaleString()})`);
          console.log(`  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 2: ${amount2} TON (${new Date(tx2.created_at).toLocaleString()})`);
          console.log(`  –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(timeDiff)} —Å–µ–∫—É–Ω–¥`);
          
          userSuspiciousPatterns++;
        }
      }
      
      if (userSuspiciousPatterns > 0) {
        suspiciousPatternsFound++;
      }
    }
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–¢–¢–ï–†–ù–û–í:`);
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏: ${suspiciousPatternsFound}`);
    console.log(`- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${totalReversalPatterns}`);
    
    // 3. –ê–ù–ê–õ–ò–ó TON BOOST –ê–ö–¢–ò–í–ù–û–°–¢–ò
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON BOOST –ê–ö–¢–ò–í–ù–û–°–¢–ò:');
    console.log('-'.repeat(50));
    
    const boostTransactions = tonTransactions.filter(tx => 
      tx.description?.toLowerCase().includes('boost') ||
      tx.metadata?.original_type?.includes('BOOST') ||
      tx.type === 'BOOST_PURCHASE'
    );
    
    console.log(`üìä TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${boostTransactions.length}`);
    
    if (boostTransactions.length > 0) {
      const boostByUser = new Map();
      
      boostTransactions.forEach(tx => {
        const userId = tx.user_id.toString();
        if (!boostByUser.has(userId)) {
          boostByUser.set(userId, { purchases: [], deposits: [], incomes: [] });
        }
        
        const userData = boostByUser.get(userId);
        const amount = parseFloat(tx.amount_ton || '0');
        
        if (amount < 0 || tx.description?.toLowerCase().includes('–ø–æ–∫—É–ø–∫–∞')) {
          userData.purchases.push(tx);
        } else if (tx.metadata?.original_type === 'TON_BOOST_DEPOSIT') {
          userData.deposits.push(tx);
        } else if (tx.metadata?.original_type === 'TON_BOOST_INCOME') {
          userData.incomes.push(tx);
        }
      });
      
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: ${boostByUser.size}`);
      
      for (const [userId, data] of boostByUser) {
        const { purchases, deposits, incomes } = data;
        
        if (purchases.length > 0 || deposits.length > 0) {
          console.log(`\nüë§ User ${userId}:`);
          console.log(`  üí∞ –ü–æ–∫—É–ø–æ–∫: ${purchases.length}`);
          console.log(`  üì• –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
          console.log(`  üìà –î–æ—Ö–æ–¥–æ–≤: ${incomes.length}`);
          
          // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
          if (deposits.length > 0 && purchases.length === 0) {
            console.log(`  ‚ö†Ô∏è –°–¢–†–ê–ù–ù–û: –ï—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–æ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫`);
          }
          
          if (deposits.length > purchases.length) {
            console.log(`  üî¥ –ü–†–û–ë–õ–ï–ú–ê: –î–µ–ø–æ–∑–∏—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –ø–æ–∫—É–ø–æ–∫!`);
          }
          
          // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
          if (purchases.length > 0 && deposits.length > 0) {
            purchases.forEach(purchase => {
              const purchaseTime = new Date(purchase.created_at).getTime();
              
              deposits.forEach(deposit => {
                const depositTime = new Date(deposit.created_at).getTime();
                const timeDiff = Math.abs(depositTime - purchaseTime) / 1000;
                
                if (timeDiff < 60) {
                  console.log(`  ‚ö° –ü–æ–∫—É–ø–∫–∞ –∏ –¥–µ–ø–æ–∑–∏—Ç —Å —Ä–∞–∑–Ω–∏—Ü–µ–π ${Math.round(timeDiff)} —Å–µ–∫—É–Ω–¥`);
                }
              });
            });
          }
        }
      }
    }
    
    // 4. –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò TRANSACTION –•–ï–®–ï–ô
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò TX –•–ï–®–ï–ô:');
    console.log('-'.repeat(50));
    
    const hashMap = new Map();
    const duplicatedHashes = [];
    
    tonTransactions.forEach(tx => {
      const hash = tx.metadata?.tx_hash || tx.metadata?.ton_tx_hash;
      if (hash) {
        if (!hashMap.has(hash)) {
          hashMap.set(hash, []);
        }
        hashMap.get(hash).push(tx);
      }
    });
    
    for (const [hash, transactions] of hashMap) {
      if (transactions.length > 1) {
        duplicatedHashes.push({ hash, transactions });
      }
    }
    
    if (duplicatedHashes.length > 0) {
      console.log(`üî¥ –ù–ê–ô–î–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• TX –•–ï–®–ï–ô: ${duplicatedHashes.length}`);
      
      duplicatedHashes.forEach(({ hash, transactions }, index) => {
        console.log(`\n${index + 1}. Hash: ${hash}`);
        transactions.forEach(tx => {
          console.log(`   - ID ${tx.id}, User ${tx.user_id}, ${tx.amount_ton} TON, ${new Date(tx.created_at).toLocaleString()}`);
        });
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö TX —Ö–µ—à–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // 5. –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –ë–ê–õ–ê–ù–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –ë–ê–õ–ê–ù–°–û–í:');
    console.log('-'.repeat(50));
    
    const activeUserIds = Array.from(userFlows.keys()).slice(0, 10); // –¢–æ–ø 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö
    
    for (const userId of activeUserIds) {
      const { data: userBalance, error: balanceError } = await supabase
        .from('users')
        .select('id, balance_ton, balance_uni')
        .eq('id', parseInt(userId))
        .single();
      
      if (!balanceError && userBalance) {
        const userTxs = userFlows.get(userId);
        const totalFlow = userTxs.reduce((sum, tx) => sum + tx.amount, 0);
        
        console.log(`User ${userId}: –ë–∞–ª–∞–Ω—Å ${userBalance.balance_ton} TON, –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalFlow.toFixed(6)} TON`);
        
        if (Math.abs(totalFlow) > parseFloat(userBalance.balance_ton) * 2) {
          console.log(`  ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤ 2+ —Ä–∞–∑–∞`);
        }
      }
    }
    
    // 6. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\n6Ô∏è‚É£ –£–ó–ö–ò–ï –ú–ï–°–¢–ê –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('='.repeat(50));
    
    console.log('\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    
    if (totalReversalPatterns > 0) {
      console.log(`‚ùå ${totalReversalPatterns} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∏—Å–∞–Ω–∏–µ‚Üí–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–π–¥–µ–Ω–æ`);
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É TransactionService –∏ BalanceManager');
    }
    
    if (duplicatedHashes.length > 0) {
      console.log(`‚ùå ${duplicatedHashes.length} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö TX —Ö–µ—à–µ–π`);
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£—Å–∏–ª–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –≤ TransactionService');
    }
    
    console.log('\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –û–ë–õ–ê–°–¢–ò –î–õ–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log('1. core/TransactionService.ts - –ª–æ–≥–∏–∫–∞ shouldUpdateBalance()');
    console.log('2. core/BalanceManager.ts - –æ–ø–µ—Ä–∞—Ü–∏–∏ add/subtract/set');
    console.log('3. modules/boost/service.ts - –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤');
    console.log('4. modules/wallet/service.ts - –æ–±—Ä–∞–±–æ—Ç–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('5. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ tx_hash_unique –ø–æ–ª—é');
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeTonBalanceFlow()
  .then(() => {
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });