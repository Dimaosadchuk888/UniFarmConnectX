/**
 * üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ –ù–ê –ù–ê–õ–ò–ß–ò–ï –î–ê–ù–ù–´–• –û –ü–ê–ö–ï–¢–ï 290
 */

import { supabase } from './core/supabase';

async function checkAllTablesFor290() {
  console.log('\nüîç === –ü–û–ò–°–ö –ü–ê–ö–ï–¢–ê ID 290 –í–û –í–°–ï–• –¢–ê–ë–õ–ò–¶–ê–• ===\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const { data: allTables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .order('table_name');
      
    if (tablesError || !allTables) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', tablesError?.message);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allTables.length} —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`);
    allTables.forEach(table => {
      console.log(`   - ${table.table_name}`);
    });

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å ID/boost_id/package_id = 290...\n');

    // –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ID 290
    const possibleFields = ['id', 'boost_id', 'package_id', 'ton_boost_package_id', 'boost_package_id'];

    for (const table of allTables) {
      const tableName = table.table_name;
      
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
      console.log('================================');

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const { data: columns, error: columnsError } = await supabase
          .from('information_schema.columns')
          .select('column_name, data_type')
          .eq('table_name', tableName)
          .eq('table_schema', 'public');

        if (columnsError) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${columnsError.message}`);
          continue;
        }

        const columnNames = columns?.map(col => col.column_name) || [];
        console.log(`   üìä –ö–æ–ª–æ–Ω–∫–∏: ${columnNames.join(', ')}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–∂–¥–æ–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ
        for (const field of possibleFields) {
          if (columnNames.includes(field)) {
            try {
              const { data: records, error: recordsError } = await supabase
                .from(tableName)
                .select('*')
                .eq(field, 290)
                .limit(5);

              if (!recordsError && records?.length) {
                console.log(`   üéØ –ù–ê–ô–î–ï–ù–û! –í –ø–æ–ª–µ ${field}:`);
                records.forEach((record, index) => {
                  console.log(`      –ó–∞–ø–∏—Å—å #${index + 1}: ${JSON.stringify(record, null, 8)}`);
                });
              } else if (recordsError) {
                console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è ${field}: ${recordsError.message}`);
              }
            } catch (e) {
              console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${field}: ${e}`);
            }
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º JSON –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ 290
        const jsonColumns = columns?.filter(col => 
          col.data_type === 'json' || col.data_type === 'jsonb'
        ) || [];

        for (const jsonCol of jsonColumns) {
          try {
            const { data: jsonRecords, error: jsonError } = await supabase
              .from(tableName)
              .select('*')
              .or(`${jsonCol.column_name}::text.ilike.%290%`);

            if (!jsonError && jsonRecords?.length) {
              console.log(`   üéØ –ù–ê–ô–î–ï–ù–û –≤ JSON –ø–æ–ª–µ ${jsonCol.column_name}:`);
              jsonRecords.slice(0, 3).forEach((record, index) => {
                console.log(`      JSON –∑–∞–ø–∏—Å—å #${index + 1}: ${JSON.stringify(record, null, 8)}`);
              });
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ JSON –ø–æ–∏—Å–∫–∞
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ 290
        const textColumns = columns?.filter(col => 
          col.data_type === 'text' || col.data_type === 'character varying'
        ) || [];

        for (const textCol of textColumns) {
          if (textCol.column_name === 'description' || textCol.column_name.includes('name')) {
            try {
              const { data: textRecords, error: textError } = await supabase
                .from(tableName)
                .select('*')
                .ilike(textCol.column_name, '%290%')
                .limit(3);

              if (!textError && textRecords?.length) {
                console.log(`   üéØ –ù–ê–ô–î–ï–ù–û –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ ${textCol.column_name}:`);
                textRecords.forEach((record, index) => {
                  console.log(`      –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å—å #${index + 1}: ${JSON.stringify(record, null, 8)}`);
                });
              }
            } catch (e) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            }
          }
        }

        console.log(`   ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

      } catch (tableError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: ${tableError}`);
      }
    }

    console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAllTablesFor290();