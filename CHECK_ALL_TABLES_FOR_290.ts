/**
 * üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290
 * –ò—â–µ–º –í–°–ï –°–õ–ï–î–´ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
 */

import { supabase } from './core/supabase';

async function checkAllTablesForUser290() {
  console.log('\nüîç === –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290 ===\n');

  const userId = 290;

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data - –ö–õ–Æ–ß–ï–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê!
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê ton_farming_data (–ö–õ–Æ–ß–ï–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê):');
    console.log('===============================================');
    
    const { data: tonFarmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId);

    if (farmingError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ton_farming_data:', farmingError.message);
    } else if (!tonFarmingData?.length) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–ê–ü–ò–°–ò –í ton_farming_data –ù–ï–¢!');
      console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonFarmingData.length} –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data:`);
      tonFarmingData.forEach((record, index) => {
        console.log(`\n   –ó–∞–ø–∏—Å—å #${index + 1}:`);
        console.log(`     ID: ${record.id}`);
        console.log(`     User ID: ${record.user_id}`);
        console.log(`     Boost –∞–∫—Ç–∏–≤–µ–Ω: ${record.boost_active}`);
        console.log(`     Boost Package ID: ${record.boost_package_id}`);
        console.log(`     Farming Balance: ${record.farming_balance}`);
        console.log(`     Farming Rate: ${record.farming_rate}`);
        console.log(`     Farming Start: ${record.farming_start_timestamp}`);
        console.log(`     Boost –∏—Å—Ç–µ–∫–∞–µ—Ç: ${record.boost_expires_at}`);
        console.log(`     –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${record.farming_last_update}`);
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º boost_purchases - –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê boost_purchases:');
    console.log('===========================');
    
    const { data: boostPurchases, error: purchasesError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('user_id', userId);

    if (purchasesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ boost_purchases:', purchasesError.message);
    } else if (!boostPurchases?.length) {
      console.log('‚ö†Ô∏è –ü–æ–∫—É–ø–æ–∫ boost –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostPurchases.length} –ø–æ–∫—É–ø–æ–∫ boost –ø–∞–∫–µ—Ç–æ–≤:`);
      boostPurchases.forEach((purchase, index) => {
        console.log(`\n   –ü–æ–∫—É–ø–∫–∞ #${index + 1}:`);
        console.log(`     ID: ${purchase.id}`);
        console.log(`     Boost ID: ${purchase.boost_id}`);
        console.log(`     –°—É–º–º–∞: ${purchase.amount_ton} TON`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${purchase.status}`);
        console.log(`     TX Hash: ${purchase.tx_hash || '–ù–ï–¢'}`);
        console.log(`     –î–∞—Ç–∞: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º boosts - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê boosts (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã):');
    console.log('====================================');
    
    const { data: boosts, error: boostsError } = await supabase
      .from('boosts')
      .select('*')
      .order('id', { ascending: true });

    if (boostsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ boosts:', boostsError.message);
    } else if (!boosts?.length) {
      console.log('‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boosts.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤:`);
      boosts.forEach(boost => {
        console.log(`   –ü–∞–∫–µ—Ç ID ${boost.id}: ${boost.name || '–ë–ï–ó –ò–ú–ï–ù–ò'}`);
        console.log(`     –¶–µ–Ω–∞: ${boost.price_ton || boost.min_amount || '–ù–ï–¢'} TON`);
        console.log(`     –°—Ç–∞–≤–∫–∞: ${boost.daily_rate || '–ù–ï–¢'}%`);
        console.log(`     –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${boost.duration_days || '–ù–ï–¢'} –¥–Ω–µ–π`);
        console.log(`     –ê–∫—Ç–∏–≤–µ–Ω: ${boost.is_active !== false}`);
        console.log('     ---');
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º farming_deposits - —Ñ–∞—Ä–º–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê farming_deposits:');
    console.log('============================');
    
    const { data: farmingDeposits, error: farmingDepositsError } = await supabase
      .from('farming_deposits')
      .select('*')
      .eq('user_id', userId);

    if (farmingDepositsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ farming_deposits:', farmingDepositsError.message);
    } else if (!farmingDeposits?.length) {
      console.log('‚ÑπÔ∏è –ó–∞–ø–∏—Å–µ–π –≤ farming_deposits –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingDeposits.length} –∑–∞–ø–∏—Å–µ–π –≤ farming_deposits:`);
      farmingDeposits.forEach((deposit, index) => {
        console.log(`   –î–µ–ø–æ–∑–∏—Ç #${index + 1}: ${deposit.amount} ${deposit.currency || '–ë–ï–ó –í–ê–õ–Æ–¢–´'}`);
      });
    }

    // 5. –ê–ù–ê–õ–ò–ó: –ì–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è –∑–∞–ø–∏—Å—å –≤ ton_farming_data?
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    console.log('==================');
    
    if (!tonFarmingData?.length) {
      console.log('üö® –ö–û–†–ù–ï–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê:');
      console.log('');
      console.log('‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢ –∑–∞–ø–∏—Å—å –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 290');
      console.log('‚ùå –ú–µ—Ç–æ–¥ TonFarmingRepository.activateBoost() –ù–ï –°–†–ê–ë–û–¢–ê–õ');
      console.log('‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–ª–∞—Ç');
      console.log('');
      console.log('‚úÖ –ß–¢–û –î–û–õ–ñ–ù–û –ë–´–õ–û –ü–†–û–ò–ó–û–ô–¢–ò:');
      console.log('   1. –î–µ–ø–æ–∑–∏—Ç 1 TON ‚Üí –∑–∞–ø–∏—Å–∞–Ω –≤ transactions ‚úÖ');
      console.log('   2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ ‚Üí users.ton_boost_package = 1 ‚úÖ');
      console.log('   3. TonFarmingRepository.activateBoost() ‚Üí —Å–æ–∑–¥–∞—Ç—å ton_farming_data ‚ùå');
      console.log('   4. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã ‚ùå');
      console.log('');
      console.log('üí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ ton_farming_data');
      console.log('   –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ users –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 290
    console.log('\n6Ô∏è‚É£ –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 290 –í USERS:');
    console.log('=====================================');
    
    const { data: user290, error: userError } = await supabase
      .from('users')
      .select('ton_boost_package, ton_boost_package_id, ton_boost_active, ton_farming_balance, ton_farming_rate, ton_farming_start_timestamp, balance_ton')
      .eq('id', userId)
      .single();

    if (!userError && user290) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users:');
      console.log(`   ton_boost_package: ${user290.ton_boost_package}`);
      console.log(`   ton_boost_package_id: ${user290.ton_boost_package_id}`);
      console.log(`   ton_boost_active: ${user290.ton_boost_active}`);
      console.log(`   ton_farming_balance: ${user290.ton_farming_balance}`);
      console.log(`   ton_farming_rate: ${user290.ton_farming_rate}`);
      console.log(`   ton_farming_start_timestamp: ${user290.ton_farming_start_timestamp || '–ù–ï–¢'}`);
      console.log(`   balance_ton: ${user290.balance_ton}`);
      
      // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö users vs ton_farming_data
      console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï users vs ton_farming_data:');
      if (user290.ton_boost_package && !tonFarmingData?.length) {
        console.log('üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ü–∞–∫–µ—Ç –µ—Å—Ç—å –≤ users, –Ω–æ –Ω–µ—Ç –≤ ton_farming_data!');
        console.log('   –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ TonFarmingRepository.activateBoost() –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
      }
    }

    console.log('\n‚úÖ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
checkAllTablesForUser290();