/**
 * üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ –î–õ–Ø USER 290
 * 
 * –ê–Ω–∞–ª–∏–∑ –≥–¥–µ –∏–º–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 290 –∏ –∫–∞–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ
 */

import { supabase } from './core/supabase';

async function checkAllTablesForUser290() {
  console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ê–ë–õ–ò–¶ –î–õ–Ø USER 290 ===\n');
  
  const userId = 290;
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú users —Ç–∞–±–ª–∏—Ü—É
    console.log('1Ô∏è‚É£ –¢–ê–ë–õ–ò–¶–ê users:');
    console.log('================');
    
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (userData) {
      console.log('‚úÖ –ù–ê–ô–î–ï–ù–û –≤ users:');
      console.log(`   id: ${userData.id}`);
      console.log(`   ton_boost_package: ${userData.ton_boost_package}`);
      console.log(`   ton_boost_active: ${userData.ton_boost_active}`);
      console.log(`   ton_boost_rate: ${userData.ton_boost_rate}`);
      console.log(`   ton_boost_package_id: ${userData.ton_boost_package_id}`);
      console.log(`   balance_ton: ${userData.balance_ton}`);
      console.log(`   ton_farming_balance: ${userData.ton_farming_balance}`);
      console.log(`   ton_farming_rate: ${userData.ton_farming_rate}`);
      console.log(`   ton_farming_start_timestamp: ${userData.ton_farming_start_timestamp}`);
      console.log(`   ton_farming_last_update: ${userData.ton_farming_last_update}`);
      console.log(`   created_at: ${userData.created_at}`);
    } else {
      console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –≤ users');
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú ton_farming_data —Ç–∞–±–ª–∏—Ü—É
    console.log('\n2Ô∏è‚É£ –¢–ê–ë–õ–ò–¶–ê ton_farming_data:');
    console.log('============================');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId.toString());

    if (farmingData && farmingData.length > 0) {
      console.log('‚úÖ –ù–ê–ô–î–ï–ù–û –≤ ton_farming_data:');
      farmingData.forEach((record, index) => {
        console.log(`   –ó–∞–ø–∏—Å—å ${index + 1}:`);
        console.log(`     user_id: "${record.user_id}" (${typeof record.user_id})`);
        console.log(`     boost_active: ${record.boost_active}`);
        console.log(`     boost_package_id: ${record.boost_package_id}`);
        console.log(`     farming_balance: ${record.farming_balance}`);
        console.log(`     farming_rate: ${record.farming_rate}`);
        console.log(`     created_at: ${record.created_at}`);
      });
    } else {
      console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –≤ ton_farming_data');
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú transactions —Ç–∞–±–ª–∏—Ü—É
    console.log('\n3Ô∏è‚É£ –¢–ê–ë–õ–ò–¶–ê transactions:');
    console.log('========================');
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (transactions && transactions.length > 0) {
      console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      transactions.forEach((tx, index) => {
        console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
        console.log(`     ID: ${tx.id}`);
        console.log(`     –¢–∏–ø: ${tx.type}`);
        console.log(`     –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`     –î–∞—Ç–∞: ${tx.created_at}`);
        console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata || {})}`);
        console.log('     ---');
      });
    } else {
      console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }

    // 4. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ö–ê–ö–£–Æ –°–ò–°–¢–ï–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–õ–ò –†–ê–ù–¨–®–ï
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´:');
    console.log('===============================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: workingUsers, error: workingError } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_active, ton_farming_balance, ton_farming_rate, created_at')
      .not('ton_boost_package', 'is', null)
      .neq('ton_boost_package', 0)
      .eq('ton_boost_active', true)
      .limit(3);

    if (workingUsers && workingUsers.length > 0) {
      console.log('‚úÖ –†–ê–ë–û–ß–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):');
      workingUsers.forEach((user, index) => {
        console.log(`   User ${user.id}:`);
        console.log(`     ton_boost_active: ${user.ton_boost_active}`);
        console.log(`     ton_farming_balance: ${user.ton_farming_balance}`);
        console.log(`     ton_farming_rate: ${user.ton_farming_rate}`);
        console.log(`     created_at: ${user.created_at}`);
        console.log('     ---');
      });
    }

    // 5. –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ê–ë–û–ß–ï–ô –°–ò–°–¢–ï–ú–û–ô
    console.log('\n5Ô∏è‚É£ –í–´–í–û–î–´:');
    console.log('===========');
    
    if (userData) {
      console.log('üîç –ê–ù–ê–õ–ò–ó User 290:');
      
      if (userData.ton_farming_balance && userData.ton_farming_balance !== '0') {
        console.log('   ‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ï–°–¢–¨ ton_farming_balance –≤ users —Ç–∞–±–ª–∏—Ü–µ');
        console.log(`   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ: ${userData.ton_farming_balance}`);
        console.log('   üí° –°–ò–°–¢–ï–ú–ê –†–ê–ù–¨–®–ï –†–ê–ë–û–¢–ê–õ–ê –ß–ï–†–ï–ó users –¢–ê–ë–õ–ò–¶–£!');
        console.log('');
        console.log('üö® –ü–†–û–ë–õ–ï–ú–ê:');
        console.log('   TonFarmingRepository –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ton_farming_data —Ç–∞–±–ª–∏—Ü—É,');
        console.log('   –Ω–æ —Ä–∞–Ω—å—à–µ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—è –≤ users —Ç–∞–±–ª–∏—Ü–µ!');
        console.log('');
        console.log('üîß –†–ï–®–ï–ù–ò–ï:');
        console.log('   –í–ö–õ–Æ–ß–ò–¢–¨ fallback —Ä–µ–∂–∏–º –≤ TonFarmingRepository');
        console.log('   –∏–ª–∏ –í–ï–†–ù–£–¢–¨ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ users —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ primary');
      } else {
        console.log('   ‚ùå ton_farming_balance –ø—É—Å—Ç–æ–π –≤ users —Ç–∞–±–ª–∏—Ü–µ');
        console.log('   üí° –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ ton_farming_data');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–æ–æ–±—â–µ
      if (userData.ton_boost_package && !userData.ton_boost_active) {
        console.log('');
        console.log('üîç –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ê–¶–ò–ò:');
        console.log('   ‚úÖ –ü–∞–∫–µ—Ç –∑–∞–ø–∏—Å–∞–Ω (ton_boost_package)');
        console.log('   ‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (ton_boost_active = false)');
        console.log('   üí° –ê–ö–¢–ò–í–ê–¶–ò–Ø –ó–ê–°–¢–†–Ø–õ–ê –ù–ê –ü–û–õ–û–í–ò–ù–ï!');
      }
    }

    // 6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Æ
    console.log('\n6Ô∏è‚É£ –ü–õ–ê–ù –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('=======================');
    console.log('');
    console.log('üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø:');
    console.log('   1. –û–ü–†–ï–î–ï–õ–ò–¢–¨ –∫–∞–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ä–∞–Ω—å—à–µ:');
    console.log('      - users —Ç–∞–±–ª–∏—Ü–∞ (ton_farming_balance –ø–æ–ª—è)');
    console.log('      - ton_farming_data —Ç–∞–±–ª–∏—Ü–∞');
    console.log('');
    console.log('   2. –í–ï–†–ù–£–¢–¨ TonFarmingRepository –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:');
    console.log('      - –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø–æ–ª—è users - –≤–∫–ª—é—á–∏—Ç—å fallback');
    console.log('      - –ï—Å–ª–∏ ton_farming_data - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('');
    console.log('   3. –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

    console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAllTablesForUser290();