#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!,
  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!
);

console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ FARMING_REWARD');
console.log('='.repeat(60));

async function analyzeFarmingRewardSystem() {
  try {
    // 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n1Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê FARMING_REWARD –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    console.log('-'.repeat(50));
    
    const { data: farmingRewards, error: farmingError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, amount_uni, description, metadata, created_at')
      .eq('type', 'FARMING_REWARD')
      .gt('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(100);

    if (!farmingError && farmingRewards) {
      console.log(`üìä –í—Å–µ–≥–æ FARMING_REWARD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${farmingRewards.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –æ–ø–∏—Å–∞–Ω–∏—è
      const descriptionTypes = new Map<string, number>();
      const tonRewards = [];
      const uniRewards = [];
      
      farmingRewards.forEach(tx => {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–∏–ø–æ–≤
        const desc = tx.description?.toLowerCase() || '';
        let category = '–î—Ä—É–≥–æ–µ';
        
        if (desc.includes('ton boost') || desc.includes('—Ç–æ–Ω –±—É—Å—Ç')) {
          category = 'TON Boost –¥–æ—Ö–æ–¥';
          tonRewards.push(tx);
        } else if (desc.includes('uni farming') || desc.includes('—É–Ω–∏ —Ñ–∞—Ä–º–∏–Ω–≥')) {
          category = 'UNI Farming –¥–æ—Ö–æ–¥';
          uniRewards.push(tx);
        } else if (desc.includes('referral') || desc.includes('—Ä–µ—Ñ–µ—Ä–∞–ª')) {
          category = 'Referral –¥–æ—Ö–æ–¥';
        } else if (desc.includes('deposit') || desc.includes('–¥–µ–ø–æ–∑–∏—Ç')) {
          category = '–î–µ–ø–æ–∑–∏—Ç (—á–µ—Ä–µ–∑ FARMING_REWARD)';
          if (parseFloat(tx.amount_ton || '0') > 0) {
            tonRewards.push(tx);
          }
        }
        
        descriptionTypes.set(category, (descriptionTypes.get(category) || 0) + 1);
      });
      
      console.log('\nüìã –ü–û–î–¢–ò–ü–´ FARMING_REWARD –ü–û –û–ü–ò–°–ê–ù–ò–Æ:');
      Array.from(descriptionTypes.entries())
        .sort(([,a], [,b]) => b - a)
        .forEach(([type, count]) => {
          console.log(`   ${type}: ${count}`);
        });
      
      console.log(`\nüí∞ TON-—Å–≤—è–∑–∞–Ω–Ω—ã–µ FARMING_REWARD: ${tonRewards.length}`);
      console.log(`üåæ UNI-—Å–≤—è–∑–∞–Ω–Ω—ã–µ FARMING_REWARD: ${uniRewards.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (tonRewards.length > 0) {
        console.log('\nüîç –ü–†–ò–ú–ï–†–´ TON FARMING_REWARD:');
        tonRewards.slice(0, 5).forEach(tx => {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
          console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log(`      Metadata: ${JSON.stringify(metadata).substring(0, 80)}...`);
          console.log(`      –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
          console.log('');
        });
      }
    }

    // 2. –ê–Ω–∞–ª–∏–∑ metadata.original_type
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó METADATA.ORIGINAL_TYPE –í FARMING_REWARD');
    console.log('-'.repeat(50));
    
    const { data: metadataAnalysis, error: metaError } = await supabase
      .from('transactions')
      .select('id, description, metadata, amount_ton, amount_uni')
      .eq('type', 'FARMING_REWARD')
      .not('metadata', 'is', null)
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .limit(50);

    if (!metaError && metadataAnalysis) {
      const originalTypes = new Map<string, number>();
      const tonDepositCandidates = [];
      
      metadataAnalysis.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        
        if (metadata.original_type) {
          originalTypes.set(metadata.original_type, (originalTypes.get(metadata.original_type) || 0) + 1);
          
          if (metadata.original_type === 'TON_DEPOSIT') {
            tonDepositCandidates.push(tx);
          }
        }
      });
      
      console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê METADATA.ORIGINAL_TYPE:');
      Array.from(originalTypes.entries())
        .sort(([,a], [,b]) => b - a)
        .forEach(([type, count]) => {
          console.log(`   ${type}: ${count}`);
        });
      
      if (tonDepositCandidates.length > 0) {
        console.log(`\nüíé –ù–ê–ô–î–ï–ù–û ${tonDepositCandidates.length} FARMING_REWARD –° ORIGINAL_TYPE = 'TON_DEPOSIT':`);
        tonDepositCandidates.forEach(tx => {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
          console.log(`   ID: ${tx.id}, Amount: ${tx.amount_ton} TON, TX_Hash: ${metadata.tx_hash?.substring(0, 20)}...`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log('');
        });
      }
    }

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ FARMING_REWARD vs DEPOSIT
    console.log('\n3Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï FARMING_REWARD VS DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    console.log('-'.repeat(50));
    
    const { data: depositTransactions, error: depositError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, description, metadata, created_at')
      .eq('type', 'DEPOSIT')
      .gt('amount_ton', 0.01)
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(20);

    if (!depositError && depositTransactions) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${depositTransactions.length} —Ä–µ–∞–ª—å–Ω—ã—Ö DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      depositTransactions.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON`);
        console.log(`      TX_Hash: ${metadata.tx_hash?.substring(0, 30)}...`);
        console.log(`      –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        console.log('');
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ FARMING_REWARD –∑–∞–ø–∏—Å–∏
      const depositUserIds = depositTransactions.map(tx => tx.user_id);
      const { data: correspondingFarming, error: corrError } = await supabase
        .from('transactions')
        .select('id, user_id, amount_ton, description, metadata')
        .eq('type', 'FARMING_REWARD')
        .in('user_id', depositUserIds)
        .gt('amount_ton', 0.01)
        .order('created_at', { ascending: false })
        .limit(10);
      
      if (!corrError && correspondingFarming) {
        console.log(`üîó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ FARMING_REWARD –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${correspondingFarming.length}`);
        correspondingFarming.forEach(tx => {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
          if (metadata.original_type === 'TON_DEPOSIT' || tx.description?.includes('deposit')) {
            console.log(`   –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ID ${tx.id}, User ${tx.user_id}, ${tx.amount_ton} TON - ${tx.description}`);
          }
        });
      }
    }

    // 4. –ê–Ω–∞–ª–∏–∑ UnifiedTransactionService –º–∞–ø–ø–∏–Ω–≥–∞
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó UNIFIED TRANSACTION SERVICE –õ–û–ì–ò–ö–ò');
    console.log('-'.repeat(50));
    
    console.log('üìã –¢–ï–ö–£–©–ò–ô –ú–ê–ü–ü–ò–ù–ì (–∏–∑ core/TransactionService.ts):');
    console.log("   'TON_DEPOSIT': 'FARMING_REWARD'");
    console.log("   'UNI_DEPOSIT': 'FARMING_REWARD'");
    console.log("   'TON_BOOST_INCOME': 'FARMING_REWARD'");
    console.log("   'BOOST_PURCHASE': 'FARMING_REWARD'");
    
    console.log('\nü§î –í–û–ü–†–û–°: –î–æ–ª–∂–Ω—ã –ª–∏ TON –¥–µ–ø–æ–∑–∏—Ç—ã –±—ã—Ç—å FARMING_REWARD –∏–ª–∏ DEPOSIT?');
    console.log('üí° –ê–ù–ê–õ–ò–ó:');
    console.log('   ‚úÖ FARMING_REWARD —Å–æ–¥–µ—Ä–∂–∏—Ç TON –¥–æ—Ö–æ–¥—ã –∏ –¥–µ–ø–æ–∑–∏—Ç—ã');
    console.log('   ‚úÖ Metadata.original_type –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å –ø–æ–¥—Ç–∏–ø—ã');
    console.log('   ‚ùå DEPOSIT —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ blockchain –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
    console.log('   ‚ùå –í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –¥–≤—É—Ö —Ç–∏–ø–∞—Ö');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeFarmingRewardSystem();
