/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB
 */

import { spawn } from 'child_process';
import { readFileSync } from 'fs';
import { createInterface } from 'readline';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

let appProcess = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function startApp() {
  return new Promise((resolve, reject) => {
    log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Neon DB...', colors.magenta);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env.neon
    const envConfig = {};
    try {
      const envFile = readFileSync('.env.neon', 'utf8');
      envFile.split('\n').forEach(line => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (line.trim() && !line.startsWith('#')) {
          const [key, value] = line.split('=').map(part => part.trim());
          envConfig[key] = value;
        }
      });
      
      log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.neon:', colors.green);
      Object.keys(envConfig).forEach(key => {
        if (key === 'DATABASE_URL') {
          log(`  ${key}=${envConfig[key].replace(/:[^:]*@/, ':***@')}`, colors.reset);
        } else {
          log(`  ${key}=${envConfig[key]}`, colors.reset);
        }
      });
    } catch (err) {
      log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${err.message}`, colors.yellow);
      log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', colors.yellow);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const env = { 
      ...process.env,
      ...envConfig,
      NODE_ENV: 'production' 
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Neon DB
    appProcess = spawn('node', ['dist/index.js'], { 
      env, 
      stdio: 'pipe',
      env: {
        ...env,
        DATABASE_PROVIDER: 'neon',
        USE_LOCAL_DB_ONLY: 'false',
        FORCE_NEON_DB: 'true',
        DISABLE_REPLIT_DB: 'true',
        OVERRIDE_DB_PROVIDER: 'neon',
        DISABLE_AUTO_PARTITIONING: 'true',
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
    appProcess.stdout.on('data', (data) => {
      const output = data.toString();
      process.stdout.write(output);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      if (output.includes('Server is listening') || 
          output.includes('serving on port') ||
          output.includes('All cron jobs initialized')) {
        resolve(true);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    appProcess.stderr.on('data', (data) => {
      const output = data.toString();
      process.stderr.write(`${colors.red}${output}${colors.reset}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      if (output.includes('FATAL ERROR') || output.includes('Uncaught Exception')) {
        reject(new Error('Fatal error in server'));
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    appProcess.on('close', (code) => {
      if (code !== 0 && code !== null) {
        log(`\n‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º ${code}`, colors.red);
        reject(new Error(`Process exited with code ${code}`));
      } else {
        log('\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É', colors.yellow);
        resolve(false);
      }
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–æ–ª–≥–æ
    setTimeout(() => {
      log('\n‚è≥ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...', colors.yellow);
      resolve(true);
    }, 15000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Å—Ç–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤—ã—Ö–æ–¥–∞
function cleanupAndExit() {
  log('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', colors.yellow);
  
  if (appProcess && !appProcess.killed) {
    appProcess.kill();
    appProcess = null;
  }
  
  log('–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞', colors.yellow);
  process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', cleanupAndExit);
process.on('SIGTERM', cleanupAndExit);

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const serverStarted = await startApp();
    
    if (serverStarted) {
      log('\n‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —Å Neon DB', colors.green);
      log('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ URL: http://localhost:3000', colors.magenta);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å readline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const rl = createInterface({
        input: process.stdin,
        output: process.stdout,
        prompt: 'UniFarm> '
      });
      
      log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', colors.magenta);
      log('  exit - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', colors.reset);
      
      rl.prompt();
      
      rl.on('line', (line) => {
        const command = line.trim();
        
        if (command === 'exit' || command === 'quit') {
          rl.close();
          cleanupAndExit();
        } else {
          log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`, colors.yellow);
          log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: exit', colors.yellow);
        }
        
        rl.prompt();
      });
      
      rl.on('close', () => {
        cleanupAndExit();
      });
    } else {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', colors.red);
      process.exit(1);
    }
  } catch (err) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  log(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
  process.exit(1);
});