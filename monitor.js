/**
 * –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è UniFarm
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
 * 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (–ø–∞–º—è—Ç—å, CPU)
 * 4. –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
 */

const fs = require('fs').promises;
const http = require('http');
const path = require('path');
const os = require('os');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  serverUrl: 'https://uni-farm-connect-xo-osadchukdmitro2.replit.app',
  healthEndpoint: '/api/health',
  dbStatusEndpoint: '/api/admin/db-status',
  checkIntervalSec: 60,
  logFile: 'monitor-log.txt',
  errorLogFile: 'error-log.txt',
  maxLogSize: 5 * 1024 * 1024 // 5 MB
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
const state = {
  serverStatus: 'unknown',
  dbStatus: 'unknown',
  lastServerCheck: null,
  lastDbCheck: null,
  restarts: 0,
  errors: 0,
  memoryUsage: {
    history: []
  }
};

// –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
async function logMessage(message, isError = false) {
  const timestamp = new Date().toISOString();
  const formattedMessage = `[${timestamp}] ${message}\n`;
  
  console.log(message);
  
  try {
    const logFile = isError ? config.errorLogFile : config.logFile;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–æ—Ç–∏—Ä—É–µ–º
    try {
      const stats = await fs.stat(logFile);
      if (stats.size > config.maxLogSize) {
        const backupFile = `${logFile}.old`;
        await fs.rename(logFile, backupFile);
      }
    } catch (err) {
      // –§–∞–π–ª, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }
    
    await fs.appendFile(logFile, formattedMessage);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:', err);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
  return new Promise((resolve) => {
    http.get(`${config.serverUrl}${config.healthEndpoint}`, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const result = JSON.parse(data);
            state.serverStatus = 'up';
            state.lastServerCheck = new Date();
            resolve({ status: 'up', data: result });
          } catch (err) {
            state.serverStatus = 'error';
            state.errors++;
            resolve({ status: 'error', error: 'Invalid JSON response' });
          }
        } else {
          state.serverStatus = 'down';
          state.errors++;
          resolve({ status: 'down', statusCode: res.statusCode });
        }
      });
    }).on('error', (err) => {
      state.serverStatus = 'unreachable';
      state.errors++;
      resolve({ status: 'unreachable', error: err.message });
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseStatus() {
  return new Promise((resolve) => {
    http.get(`${config.serverUrl}${config.dbStatusEndpoint}`, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const result = JSON.parse(data);
            state.dbStatus = result.connected ? 'connected' : 'disconnected';
            state.lastDbCheck = new Date();
            resolve({ status: state.dbStatus, data: result });
          } catch (err) {
            state.dbStatus = 'error';
            state.errors++;
            resolve({ status: 'error', error: 'Invalid JSON response' });
          }
        } else {
          state.dbStatus = 'unknown';
          state.errors++;
          resolve({ status: 'error', statusCode: res.statusCode });
        }
      });
    }).on('error', (err) => {
      state.dbStatus = 'unreachable';
      state.errors++;
      resolve({ status: 'unreachable', error: err.message });
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
function checkResourceUsage() {
  const memoryUsage = process.memoryUsage();
  const systemMemory = {
    total: os.totalmem(),
    free: os.freemem(),
    used: os.totalmem() - os.freemem()
  };
  
  const cpuUsage = os.loadavg();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  state.memoryUsage.history.push({
    timestamp: Date.now(),
    rss: memoryUsage.rss,
    heapTotal: memoryUsage.heapTotal,
    heapUsed: memoryUsage.heapUsed,
    systemUsedPercent: (systemMemory.used / systemMemory.total) * 100
  });
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
  if (state.memoryUsage.history.length > 100) {
    state.memoryUsage.history.shift();
  }
  
  return {
    memory: memoryUsage,
    systemMemory,
    cpuUsage
  };
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
function generateStatusReport() {
  const now = new Date();
  const uptime = process.uptime();
  
  const uptimeStr = `${Math.floor(uptime / 3600)}—á ${Math.floor((uptime % 3600) / 60)}–º ${Math.floor(uptime % 60)}—Å`;
  
  const resourceUsage = checkResourceUsage();
  
  const memoryMB = Math.round(resourceUsage.memory.rss / (1024 * 1024));
  const heapMB = Math.round(resourceUsage.memory.heapUsed / (1024 * 1024));
  const systemMemPercent = Math.round((resourceUsage.systemMemory.used / resourceUsage.systemMemory.total) * 100);
  
  const report = [
    '=== –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò UNIFARM ===',
    `–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: ${now.toISOString()}`,
    `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞: ${uptimeStr}`,
    '',
    `–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: ${state.serverStatus}`,
    `–°—Ç–∞—Ç—É—Å –ë–î: ${state.dbStatus}`,
    `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${state.errors}`,
    '',
    `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memoryMB} MB (RSS)`,
    `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—É—á–∏: ${heapMB} MB`,
    `–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏: ${systemMemPercent}%`,
    `–ó–∞–≥—Ä—É–∑–∫–∞ CPU (1,5,15 –º–∏–Ω): ${resourceUsage.cpuUsage.join(', ')}`,
    '',
    '=== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ==='
  ].join('\n');
  
  return report;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runHealthCheck() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const serverHealth = await checkServerHealth();
    
    if (serverHealth.status === 'up') {
      await logMessage(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ`);
    } else {
      await logMessage(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ${serverHealth.status}`, true);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
    const dbStatus = await checkDatabaseStatus();
    
    if (dbStatus.status === 'connected') {
      await logMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ`);
    } else {
      await logMessage(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: ${dbStatus.status}`, true);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    checkResourceUsage();
    
    // –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
    if (state.serverStatus === 'up' && state.dbStatus === 'connected') {
      if (Math.random() < 0.1) { // ~10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        const report = generateStatusReport();
        await logMessage(report);
      }
    } else {
      // –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      const report = generateStatusReport();
      await logMessage(`‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê!\n${report}`, true);
    }
  } catch (err) {
    await logMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${err.message}`, true);
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
  await logMessage('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ UniFarm');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
  await runHealthCheck();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  setInterval(runHealthCheck, config.checkIntervalSec * 1000);
  
  // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
  setInterval(async () => {
    const report = generateStatusReport();
    await logMessage(`üìä –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç:\n${report}`);
  }, 30 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
startMonitoring().catch(async (err) => {
  await logMessage(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${err.message}`, true);
});