/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–ª–∏ DATABASE_URL –≤ Secrets –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π
 */

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π DATABASE_URL
process.env.DATABASE_URL = "postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require";

console.log("‚úÖ DATABASE_URL –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –±–∞–∑—É");
console.log("üéØ Endpoint:", process.env.DATABASE_URL.match(/ep-[^.]*/)[0]);

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
import pkg from 'pg';
const { Pool } = pkg;

async function testConnection() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    const result = await pool.query('SELECT COUNT(*) as users FROM public.users');
    console.log(`üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: ${result.rows[0].users}`);
    
    if (result.rows[0].users == 4) {
      console.log("‚úÖ –£–°–ü–Ü–•! –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –±–∞–∑–∞ –∑ 4 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏");
    } else {
      console.log("‚ö†Ô∏è –¶–µ –¥–æ—Å—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –±–∞–∑–∞");
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", error.message);
  } finally {
    await pool.end();
  }
}

testConnection();