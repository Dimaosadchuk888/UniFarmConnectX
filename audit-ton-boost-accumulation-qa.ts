#!/usr/bin/env ts-node
import { supabase } from './core/supabase';

/**
 * QA –ê—É–¥–∏—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ TON Boost
 * –†–æ–ª—å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç–æ—Ä / QA –∏–Ω–∂–µ–Ω–µ—Ä
 * –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
 */

async function auditTonBoostAccumulation() {
  console.log('üîç QA –ê–£–î–ò–¢ TON BOOST: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n');
  console.log('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toISOString());
  console.log('=' .repeat(70) + '\n');

  const testUserId = 74; // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const cutoffDate = '2025-01-14T04:30:00'; // –ü–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê farming_balance
    console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê farming_balance\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data
    const { data: tonData, error: tonError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', testUserId)
      .single();

    let currentFarmingBalance = 0;
    let farmingRate = 0;
    let boostPackageId = null;
    let lastUpdate = null;

    if (tonData) {
      currentFarmingBalance = parseFloat(tonData.farming_balance) || 0;
      farmingRate = parseFloat(tonData.farming_rate) || 0;
      boostPackageId = tonData.boost_package_id;
      lastUpdate = tonData.farming_last_update;
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data:');
      console.log(`   - farming_balance: ${currentFarmingBalance} TON`);
      console.log(`   - farming_rate: ${farmingRate} (${farmingRate * 100}% –≤ –¥–µ–Ω—å)`);
      console.log(`   - boost_package_id: ${boostPackageId}`);
      console.log(`   - farming_last_update: ${lastUpdate}`);
      console.log(`   - boost_active: ${tonData.boost_active}`);
    } else {
      // Fallback –Ω–∞ —Ç–∞–±–ª–∏—Ü—É users
      const { data: userData } = await supabase
        .from('users')
        .select('ton_farming_balance, ton_farming_rate, ton_boost_package_id, ton_farming_last_update')
        .eq('id', testUserId)
        .single();
      
      if (userData) {
        currentFarmingBalance = parseFloat(userData.ton_farming_balance) || 0;
        farmingRate = parseFloat(userData.ton_farming_rate) || 0;
        boostPackageId = userData.ton_boost_package_id;
        lastUpdate = userData.ton_farming_last_update;
        
        console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback (—Ç–∞–±–ª–∏—Ü–∞ users):');
        console.log(`   - ton_farming_balance: ${currentFarmingBalance} TON`);
        console.log(`   - ton_farming_rate: ${farmingRate}`);
        console.log(`   - ton_boost_package_id: ${boostPackageId}`);
      }
    }

    // 2. –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô BOOST_PURCHASE
    console.log('\nüìà 2. –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô BOOST_PURCHASE\n');
    
    const { data: purchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', testUserId)
      .eq('type', 'BOOST_PURCHASE')
      .gte('created_at', cutoffDate)
      .order('created_at', { ascending: false });

    let totalNewDeposits = 0;
    let hasMetadata = true;
    
    if (purchases && purchases.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE –ø–æ—Å–ª–µ ${cutoffDate}:\n`);
      
      purchases.forEach((tx, idx) => {
        const amount = parseFloat(tx.amount) || 0;
        totalNewDeposits += amount;
        
        console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${idx + 1}:`);
        console.log(`   - ID: ${tx.id}`);
        console.log(`   - –î–∞—Ç–∞: ${tx.created_at}`);
        console.log(`   - –°—É–º–º–∞: ${amount} TON`);
        console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        
        if (tx.metadata) {
          const meta = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          console.log(`   - Metadata:`);
          console.log(`     ‚Ä¢ original_type: ${meta.original_type || '–ù–ï–¢'}`);
          console.log(`     ‚Ä¢ boost_package_id: ${meta.boost_package_id || '–ù–ï–¢'}`);
          console.log(`     ‚Ä¢ package_name: ${meta.package_name || '–ù–ï–¢'}`);
          console.log(`     ‚Ä¢ daily_rate: ${meta.daily_rate || '–ù–ï–¢'}`);
          
          if (!meta.original_type || meta.original_type !== 'TON_BOOST_PURCHASE') {
            hasMetadata = false;
          }
        } else {
          console.log(`   - Metadata: ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
          hasMetadata = false;
        }
        console.log('');
      });
      
      console.log(`üí∞ –°—É–º–º–∞ –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalNewDeposits} TON`);
      console.log(`üìä –¢–µ–∫—É—â–∏–π farming_balance: ${currentFarmingBalance} TON`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ
      if (currentFarmingBalance >= totalNewDeposits) {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å—Ç–∞—Ä—ã–µ)`);
      } else {
        console.log(`‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—É–º–º—ã –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤!`);
      }
      
      if (hasMetadata) {
        console.log(`‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ metadata`);
      } else {
        console.log(`‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ metadata –∏–ª–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º original_type`);
      }
    } else {
      console.log('‚ùå –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ', cutoffDate);
    }

    // 3. –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô FARMING_REWARD
    console.log('\nüíµ 3. –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô FARMING_REWARD\n');
    
    const { data: rewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', testUserId)
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', cutoffDate)
      .order('created_at', { ascending: false })
      .limit(10);

    if (rewards && rewards.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rewards.length} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π FARMING_REWARD:\n`);
      
      let tonBoostRewards = 0;
      let lastRewardTime = null;
      let firstRewardTime = null;
      
      rewards.forEach((tx, idx) => {
        const amount = parseFloat(tx.amount) || 0;
        const meta = tx.metadata ? (typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata) : {};
        
        if (meta.original_type === 'TON_BOOST_INCOME' || tx.description?.includes('TON Boost')) {
          tonBoostRewards++;
          if (!firstRewardTime) firstRewardTime = new Date(tx.created_at);
          lastRewardTime = new Date(tx.created_at);
          
          console.log(`TON Boost –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ #${tonBoostRewards}:`);
          console.log(`   - –í—Ä–µ–º—è: ${tx.created_at}`);
          console.log(`   - –°—É–º–º–∞: ${amount} TON`);
          console.log(`   - original_type: ${meta.original_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç
          const expectedPerCycle = (currentFarmingBalance * farmingRate) / (24 * 12); // –∑–∞ 5 –º–∏–Ω—É—Ç
          const deviation = Math.abs(amount - expectedPerCycle) / expectedPerCycle * 100;
          
          console.log(`   - –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${expectedPerCycle.toFixed(9)} TON`);
          console.log(`   - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${deviation.toFixed(2)}%`);
          
          if (deviation < 5) {
            console.log(`   - ‚úÖ –°—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
          } else {
            console.log(`   - ‚ö†Ô∏è  –ë–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã`);
          }
          console.log('');
        }
      });
      
      if (tonBoostRewards > 0) {
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TON Boost –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:`);
        console.log(`   - –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${tonBoostRewards}`);
        
        if (lastRewardTime && firstRewardTime && tonBoostRewards > 1) {
          const timeDiff = lastRewardTime.getTime() - firstRewardTime.getTime();
          const avgInterval = timeDiff / (tonBoostRewards - 1) / 1000 / 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö
          console.log(`   - –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${avgInterval.toFixed(1)} –º–∏–Ω—É—Ç`);
          
          if (avgInterval >= 4 && avgInterval <= 6) {
            console.log(`   - ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ~5 –º–∏–Ω—É—Ç–∞–º`);
          } else {
            console.log(`   - ‚ö†Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö 5 –º–∏–Ω—É—Ç`);
          }
        }
      } else {
        console.log('‚ùå TON Boost –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      console.log('‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏—è FARMING_REWARD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ', cutoffDate);
    }

    // 4. –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
    console.log('\n‚è∞ 4. –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê (CRON)\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    const { data: lastReward } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', testUserId)
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
    
    if (lastReward) {
      const lastRewardDate = new Date(lastReward.created_at);
      const now = new Date();
      const minutesAgo = (now.getTime() - lastRewardDate.getTime()) / 1000 / 60;
      
      console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${lastReward.created_at}`);
      console.log(`‚è±Ô∏è  –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${minutesAgo.toFixed(1)} –º–∏–Ω—É—Ç`);
      
      if (minutesAgo <= 6) {
        console.log(`‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–µ–Ω–µ–µ 6 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)`);
      } else if (minutesAgo <= 10) {
        console.log(`‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ø—Ä–æ—à–ª–æ ${minutesAgo.toFixed(1)} –º–∏–Ω—É—Ç)`);
      } else {
        console.log(`‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–æ—à–ª–æ ${minutesAgo.toFixed(1)} –º–∏–Ω—É—Ç)`);
      }
    }

    // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    console.log('\n' + '=' .repeat(70));
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n');
    
    console.log('SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('```sql');
    console.log(`-- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ farming_balance`);
    console.log(`SELECT * FROM ton_farming_data WHERE user_id = ${testUserId};`);
    console.log(`\n-- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE`);
    console.log(`SELECT * FROM transactions WHERE user_id = ${testUserId} AND type = 'BOOST_PURCHASE' AND created_at >= '${cutoffDate}' ORDER BY created_at DESC;`);
    console.log(`\n-- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`);
    console.log(`SELECT * FROM transactions WHERE user_id = ${testUserId} AND type = 'FARMING_REWARD' AND created_at >= '${cutoffDate}' ORDER BY created_at DESC LIMIT 10;`);
    console.log(`\n-- 4. –°—É–º–º–∞ –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    console.log(`SELECT SUM(amount) as total FROM transactions WHERE user_id = ${testUserId} AND type = 'BOOST_PURCHASE';`);
    console.log('```');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
auditTonBoostAccumulation()
  .then(() => {
    console.log('\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞:', error);
    process.exit(1);
  });