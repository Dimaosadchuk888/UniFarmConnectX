#!/usr/bin/env tsx

/**
 * CACHE CLEANUP VERIFICATION SCRIPT
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 */

import dotenv from 'dotenv';
dotenv.config();

interface VerificationResult {
  component: string;
  status: 'OK' | 'WARNING' | 'ERROR';
  details: string;
}

class CacheCleanupVerifier {
  private results: VerificationResult[] = [];
  
  private log(message: string) {
    console.log(`[${new Date().toISOString()}] ${message}`);
  }
  
  private addResult(component: string, status: 'OK' | 'WARNING' | 'ERROR', details: string) {
    this.results.push({ component, status, details });
    const emoji = status === 'OK' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    this.log(`${emoji} ${component}: ${details}`);
  }
  
  async verifyServerProcess() {
    try {
      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(exec);
      
      const { stdout } = await execAsync('ps aux | grep "tsx server" | grep -v grep | wc -l');
      const processCount = parseInt(stdout.trim());
      
      if (processCount === 1) {
        this.addResult('Server Process', 'OK', '–û–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å');
      } else if (processCount === 0) {
        this.addResult('Server Process', 'ERROR', '–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      } else {
        this.addResult('Server Process', 'WARNING', `${processCount} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)`);
      }
    } catch (error) {
      this.addResult('Server Process', 'ERROR', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
    }
  }
  
  async verifyMemoryState() {
    try {
      const memInfo = process.memoryUsage();
      const usedMB = Math.round(memInfo.heapUsed / 1024 / 1024);
      const totalMB = Math.round(memInfo.heapTotal / 1024 / 1024);
      
      if (usedMB < 100) {
        this.addResult('Memory Usage', 'OK', `${usedMB}MB/${totalMB}MB (—á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)`);
      } else if (usedMB < 200) {
        this.addResult('Memory Usage', 'WARNING', `${usedMB}MB/${totalMB}MB (—É–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)`);
      } else {
        this.addResult('Memory Usage', 'ERROR', `${usedMB}MB/${totalMB}MB (–≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)`);
      }
    } catch (error) {
      this.addResult('Memory Usage', 'ERROR', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: ${error}`);
    }
  }
  
  async verifyEnvironmentVariables() {
    const requiredVars = [
      'SUPABASE_URL',
      'SUPABASE_ANON_KEY',
      'TELEGRAM_BOT_TOKEN',
      'TELEGRAM_ADMIN_BOT_TOKEN'
    ];
    
    let allPresent = true;
    const missing: string[] = [];
    
    requiredVars.forEach(varName => {
      if (!process.env[varName]) {
        allPresent = false;
        missing.push(varName);
      }
    });
    
    if (allPresent) {
      this.addResult('Environment Variables', 'OK', `–í—Å–µ ${requiredVars.length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
    } else {
      this.addResult('Environment Variables', 'ERROR', `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.join(', ')}`);
    }
  }
  
  async verifyWebhookEndpoints() {
    try {
      const baseUrl = 'https://uni-farm-connect-unifarm01010101.replit.app';
      const endpoints = [
        '/api/v2/telegram/webhook',
        '/api/v2/admin-bot/webhook'
      ];
      
      for (const endpoint of endpoints) {
        try {
          const response = await fetch(`${baseUrl}${endpoint}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ test: true })
          });
          
          if (response.ok) {
            this.addResult(`Webhook ${endpoint}`, 'OK', `HTTP ${response.status} ${response.statusText}`);
          } else {
            this.addResult(`Webhook ${endpoint}`, 'WARNING', `HTTP ${response.status} ${response.statusText}`);
          }
        } catch (error) {
          this.addResult(`Webhook ${endpoint}`, 'ERROR', `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error}`);
        }
      }
    } catch (error) {
      this.addResult('Webhook Endpoints', 'ERROR', `–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    }
  }
  
  async runVerification() {
    this.log('üîç –ó–ê–ü–£–°–ö –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê');
    this.log('===============================================');
    
    await this.verifyServerProcess();
    await this.verifyMemoryState();
    await this.verifyEnvironmentVariables();
    await this.verifyWebhookEndpoints();
    
    this.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    this.log('==================');
    
    const okCount = this.results.filter(r => r.status === 'OK').length;
    const warningCount = this.results.filter(r => r.status === 'WARNING').length;
    const errorCount = this.results.filter(r => r.status === 'ERROR').length;
    
    this.log(`‚úÖ OK: ${okCount}`);
    this.log(`‚ö†Ô∏è WARNING: ${warningCount}`);
    this.log(`‚ùå ERROR: ${errorCount}`);
    
    if (errorCount === 0 && warningCount === 0) {
      this.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–©–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï');
    } else if (errorCount === 0) {
      this.log('\nüü° –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ï–°–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø');
    } else {
      this.log('\nüî¥ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´');
    }
    
    return { ok: okCount, warnings: warningCount, errors: errorCount };
  }
}

// –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const verifier = new CacheCleanupVerifier();
verifier.runVerification()
  .then(result => {
    console.log(`\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.errors === 0 ? '–£–°–ü–ï–®–ù–û' : '–° –û–®–ò–ë–ö–ê–ú–ò'}`);
    process.exit(result.errors > 0 ? 1 : 0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    process.exit(1);
  });