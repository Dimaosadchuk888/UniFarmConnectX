#!/usr/bin/env tsx
/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ User ID –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏—Ö –±–∞–ª–∞–Ω—Å—ã
 */

import { supabase } from './core/supabase';
import { SupabaseUserRepository } from './modules/user/service';
import jwt from 'jsonwebtoken';

const userRepository = new SupabaseUserRepository();

async function checkUserIdConflict() {
  console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–õ–ò–ö–¢–ê USER ID');
  console.log('='.repeat(80));
  
  const userId = 184; // ID –∏–∑ –ª–æ–≥–æ–≤
  const testUsername = 'test_user_1752129840905'; // Username –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    console.log('\n1Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–û ID 184:');
    const userById = await userRepository.getUserById(userId);
    if (userById) {
      console.log(`   ID: ${userById.id}`);
      console.log(`   telegram_id: ${userById.telegram_id}`);
      console.log(`   username: ${userById.username}`);
      console.log(`   balance_ton: ${userById.balance_ton} TON`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–û USERNAME:');
    const { data: userByUsername } = await supabase
      .from('users')
      .select('*')
      .eq('username', testUsername)
      .single();
      
    if (userByUsername) {
      console.log(`   ID: ${userByUsername.id}`);
      console.log(`   telegram_id: ${userByUsername.telegram_id}`);
      console.log(`   username: ${userByUsername.username}`);
      console.log(`   balance_ton: ${userByUsername.balance_ton} TON`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –º–∞–ª—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    console.log('\n3Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ë–ê–õ–ê–ù–°–û–ú ‚â§ 0.1 TON:');
    const { data: lowBalanceUsers } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton')
      .lte('balance_ton', 0.1)
      .limit(10);
      
    if (lowBalanceUsers && lowBalanceUsers.length > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${lowBalanceUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
      lowBalanceUsers.forEach(u => {
        console.log(`   - ID: ${u.id}, telegram_id: ${u.telegram_id}, username: ${u.username}, balance: ${u.balance_ton} TON`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç getOrCreateUserFromTelegram
    console.log('\n4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø getOrCreateUserFromTelegram:');
    if (userById) {
      console.log(`   –ü–æ–∏—Å–∫ –ø–æ telegram_id: ${userById.telegram_id}`);
      const simulatedUser = await userRepository.getUserByTelegramId(userById.telegram_id);
      if (simulatedUser) {
        console.log(`   –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${simulatedUser.id}, balance: ${simulatedUser.balance_ton} TON`);
      } else {
        console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù –ø–æ telegram_id!`);
      }
    }
    
    // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó JWT –¢–û–ö–ï–ù–ê:');
    if (process.env.JWT_SECRET && userById) {
      const testToken = jwt.sign({
        userId: userById.id,
        telegram_id: userById.telegram_id,
        username: userById.username
      }, process.env.JWT_SECRET);
      
      console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π JWT —Å–æ–∑–¥–∞–Ω –¥–ª—è user ID ${userById.id}`);
      
      const decoded = jwt.verify(testToken, process.env.JWT_SECRET) as any;
      console.log(`   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT —Å–æ–¥–µ—Ä–∂–∏—Ç:`);
      console.log(`   - userId: ${decoded.userId}`);
      console.log(`   - telegram_id: ${decoded.telegram_id}`);
      console.log(`   - username: ${decoded.username}`);
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ telegram_id
    console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í:');
    if (userById && userById.telegram_id) {
      const { data: duplicates } = await supabase
        .from('users')
        .select('id, telegram_id, username, balance_ton')
        .eq('telegram_id', userById.telegram_id);
        
      if (duplicates && duplicates.length > 1) {
        console.log(`   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û ${duplicates.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º telegram_id!`);
        duplicates.forEach(u => {
          console.log(`   - ID: ${u.id}, balance: ${u.balance_ton} TON${u.id === userId ? ' (–û–°–ù–û–í–ù–û–ô)' : ''}`);
        });
      } else {
        console.log('   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }
    
    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log(`   –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID ${userId}) –∏–º–µ–µ—Ç –±–∞–ª–∞–Ω—Å: ${userById?.balance_ton || '?'} TON`);
    console.log(`   –ü—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–∏—Ç: 0.01 TON`);
    
    if (userById && parseFloat(userById.balance_ton || '0') > 1) {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–∞–∑–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. JWT —Ç–æ–∫–µ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('   2. getOrCreateUserFromTelegram —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('   3. –ï—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º telegram_id');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
}

checkUserIdConflict();