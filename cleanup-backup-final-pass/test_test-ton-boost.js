/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤
 */

import fetch from 'node-fetch';

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = 'https://93cb0060-75d7-4281-ac65-b204cda864a4-00-1j7bpbfst9vfx.pike.replit.dev';

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const API_HEADERS = {
  'Content-Type': 'application/json',
  'X-Development-Mode': 'true',
  'X-Development-User-Id': '1'
};

// 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö TON –±—É—Å—Ç-–ø–∞–∫–µ—Ç–æ–≤
async function getBoostPackages() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/ton-boosts`, {
      method: 'GET',
      headers: API_HEADERS
    });
    
    const data = await response.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ TON Boost –ø–∞–∫–µ—Ç–æ–≤:', JSON.stringify(data, null, 2));
    return data.data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ TON Boost –ø–∞–∫–µ—Ç–æ–≤:', error);
    return [];
  }
}

// 2. –ü–æ–∫—É–ø–∞–µ–º TON –±—É—Å—Ç-–ø–∞–∫–µ—Ç
async function purchaseBoostPackage(boostId) {
  console.log(`üõí –ü–æ–∫—É–ø–∫–∞ TON Boost –ø–∞–∫–µ—Ç–∞ —Å ID=${boostId}...`);
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/ton-boosts/purchase`, {
      method: 'POST',
      headers: API_HEADERS,
      body: JSON.stringify({
        user_id: 1,
        boost_id: boostId,
        payment_method: 'internal_balance'
      })
    });
    
    const data = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ TON Boost –ø–∞–∫–µ—Ç–∞:', JSON.stringify(data, null, 2));
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ TON Boost –ø–∞–∫–µ—Ç–∞:', error);
    return { success: false, error: error.message };
  }
}

// 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserActiveBoosts() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/ton-boosts/active?user_id=1`, {
      method: 'GET',
      headers: API_HEADERS
    });
    
    const data = await response.json();
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã:', JSON.stringify(data, null, 2));
    return data.data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤:', error);
    return [];
  }
}

// 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getTonFarmingInfo() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/ton-farming/info?user_id=1`, {
      method: 'GET',
      headers: API_HEADERS
    });
    
    const data = await response.json();
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ:', JSON.stringify(data, null, 2));
    return data.data || {};
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ:', error);
    return {};
  }
}

// 5. –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserBalance() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/users/1`, {
      method: 'GET',
      headers: API_HEADERS
    });
    
    const data = await response.json();
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(data.data.balance, null, 2));
    return data.data.balance || {};
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return {};
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TON Boost
async function testTonBoost() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TON Boost —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É—Å—Ç-–ø–∞–∫–µ—Ç–æ–≤
    const boostPackages = await getBoostPackages();
    if (!boostPackages.length) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—É—Å—Ç-–ø–∞–∫–µ—Ç–æ–≤');
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±—É—Å—Ç-–ø–∞–∫–µ—Ç
    const smallestBoost = boostPackages.sort((a, b) => 
      parseFloat(a.priceTon) - parseFloat(b.priceTon)
    )[0];
    
    console.log(`\nüì¶ –í—ã–±—Ä–∞–Ω –±—É—Å—Ç-–ø–∞–∫–µ—Ç "${smallestBoost.name}" –∑–∞ ${smallestBoost.priceTon} TON\n`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const initialBalance = await getUserBalance();
    console.log(`\nüí∞ –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${initialBalance.ton}\n`);
    
    // 3. –ü–æ–∫—É–ø–∞–µ–º –±—É—Å—Ç-–ø–∞–∫–µ—Ç —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const purchaseResult = await purchaseBoostPackage(smallestBoost.id);
    
    if (!purchaseResult.success) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –±—É—Å—Ç-–ø–∞–∫–µ—Ç: ${purchaseResult.message}`);
    }
    
    console.log('\n‚úÖ –ë—É—Å—Ç-–ø–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω\n');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedBalance = await getUserBalance();
    console.log(`\nüí∞ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π TON –±–∞–ª–∞–Ω—Å: ${updatedBalance.ton}\n`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç-–ø–∞–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeBoosts = await getUserActiveBoosts();
    
    if (!activeBoosts.length) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç-–ø–∞–∫–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏');
    }
    
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${activeBoosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç-–ø–∞–∫–µ—Ç–æ–≤\n`);
    
    // 6. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ 
    const farmingInfo = await getTonFarmingInfo();
    
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON Boost —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TON Boost: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testTonBoost();