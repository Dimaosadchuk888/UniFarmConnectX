/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
 * —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE –∏ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  connectionString: process.env.DATABASE_URL,
};

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool(dbConfig);

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function executeQuery(query, params = []) {
  const client = await pool.connect();
  try {
    return await client.query(query, params);
  } finally {
    client.release();
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function createTestReferralStructure(depth = 5, branchingFactor = 2) {
  console.log(`\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–ª—É–±–∏–Ω–æ–π ${depth} —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤–µ—Ç–≤–ª–µ–Ω–∏—è ${branchingFactor}...`);
  
  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  await executeQuery(`
    DELETE FROM users 
    WHERE username LIKE 'test_ref_%'
  `);
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const rootInsertResult = await executeQuery(`
    INSERT INTO users (username, ref_code, parent_ref_code, balance_uni, balance_ton)
    VALUES ('test_ref_root', 'ROOT123', NULL, '1000.0', '10.0')
    RETURNING id, ref_code
  `);
  
  const rootId = rootInsertResult.rows[0].id;
  const rootRefCode = rootInsertResult.rows[0].ref_code;
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${rootId}, ref_code: ${rootRefCode}`);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  async function createChildrenRecursive(parentId, parentRefCode, currentDepth, prefix = '') {
    if (currentDepth >= depth) return;
    
    const users = [];
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    for (let i = 0; i < branchingFactor; i++) {
      const userId = `${prefix}${currentDepth}_${i}`;
      const refCode = `REF_${userId}`;
      
      users.push({
        userId,
        refCode,
        username: `test_ref_${userId}`
      });
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞–∫–µ—Ç–Ω–æ
    for (const user of users) {
      const insertResult = await executeQuery(`
        INSERT INTO users (username, ref_code, parent_ref_code, balance_uni, balance_ton)
        VALUES ($1, $2, $3, '100.0', '1.0')
        RETURNING id
      `, [user.username, user.refCode, parentRefCode]);
      
      const id = insertResult.rows[0].id;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ referrals
      await executeQuery(`
        INSERT INTO referrals (user_id, inviter_id, level)
        VALUES ($1, $2, 1)
      `, [id, parentId]);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await createChildrenRecursive(id, user.refCode, currentDepth + 1, `${userId}_`);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  await createChildrenRecursive(rootId, rootRefCode, 1);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const countResult = await executeQuery(`
    SELECT COUNT(*) FROM users WHERE username LIKE 'test_ref_%'
  `);
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${countResult.rows[0].count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ`);
  
  return {
    rootId,
    rootRefCode,
    totalUsers: parseInt(countResult.rows[0].count)
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE
 */
async function testReferralStructureQuery(rootId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${rootId}...`);
  
  console.time('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE-–∑–∞–ø—Ä–æ—Å
  const result = await executeQuery(`
    WITH RECURSIVE referral_chain AS (
      -- –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—É—Ä–æ–≤–µ–Ω—å 1)
      SELECT 
        u.id, 
        u.username, 
        u.ref_code, 
        u.parent_ref_code,
        1 AS level
      FROM 
        users u
      INNER JOIN
        (SELECT ref_code FROM users WHERE id = $1) root
      ON u.parent_ref_code = root.ref_code
      
      UNION ALL
      
      -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
      SELECT 
        u.id, 
        u.username, 
        u.ref_code, 
        u.parent_ref_code, 
        rc.level + 1 AS level
      FROM 
        users u
      INNER JOIN 
        referral_chain rc ON u.parent_ref_code = rc.ref_code
      WHERE 
        rc.level < 20  -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
    )
    -- –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    SELECT 
      level,
      COUNT(*) AS count,
      ARRAY_AGG(id) AS user_ids
    FROM 
      referral_chain
    GROUP BY 
      level
    ORDER BY 
      level
  `, [rootId]);
  
  console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º:');
  result.rows.forEach(row => {
    console.log(`   –£—Ä–æ–≤–µ–Ω—å ${row.level}: ${row.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const totalReferrals = result.rows.reduce((sum, row) => sum + parseInt(row.count), 0);
  console.log(`\n‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferrals}`);
  
  return {
    levels: result.rows.map(row => ({
      level: parseInt(row.level),
      count: parseInt(row.count),
      user_ids: row.user_ids
    })),
    totalReferrals
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ (–≤—ã—à–µ—Å—Ç–æ—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) —Å –ø–æ–º–æ—â—å—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE
 */
async function testInvitersQuery(userId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º parent_ref_code –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userResult = await executeQuery(`
    SELECT parent_ref_code FROM users WHERE id = $1
  `, [userId]);
  
  if (!userResult.rows[0] || !userResult.rows[0].parent_ref_code) {
    console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç parent_ref_code');
    return [];
  }
  
  const parentRefCode = userResult.rows[0].parent_ref_code;
  
  console.time('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
  const result = await executeQuery(`
    WITH RECURSIVE inviter_chain AS (
      -- –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
      SELECT 
        u.id, 
        u.username,
        u.ref_code, 
        u.parent_ref_code,
        1 AS level
      FROM 
        users u
      WHERE 
        u.ref_code = $1
      
      UNION ALL
      
      -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
      SELECT 
        u.id, 
        u.username,
        u.ref_code, 
        u.parent_ref_code, 
        ic.level + 1 AS level
      FROM 
        users u
      INNER JOIN 
        inviter_chain ic ON u.ref_code = ic.parent_ref_code
      WHERE 
        u.parent_ref_code IS NOT NULL AND
        ic.level < 20
    )
    -- –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    SELECT 
      id,
      username,
      level
    FROM 
      inviter_chain
    ORDER BY 
      level
  `, [parentRefCode]);
  
  console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤');
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤:');
  result.rows.forEach(row => {
    console.log(`   –£—Ä–æ–≤–µ–Ω—å ${row.level}: ID ${row.id}, Username: ${row.username}`);
  });
  
  return result.rows;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
 */
async function testReferralRewardProcessing(userId, amount = 100) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å —Å—É–º–º–æ–π ${amount} UNI...`);
  
  console.time('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–∞
  const batchId = `test-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ
  await executeQuery(`
    INSERT INTO reward_distribution_logs 
    (source_user_id, batch_id, currency, earned_amount, status, processed_at)
    VALUES ($1, $2, 'UNI', $3, 'processing', NOW())
  `, [userId, batchId, amount.toString()]);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE
  const invitersResult = await executeQuery(`
    WITH RECURSIVE inviter_chain AS (
      -- –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º parent_ref_code –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      SELECT 
        u.parent_ref_code
      FROM 
        users u
      WHERE 
        u.id = $1
      
      UNION ALL
      
      -- –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
      SELECT 
        u.parent_ref_code
      FROM 
        users u
      INNER JOIN 
        inviter_chain ic ON u.ref_code = ic.parent_ref_code
      WHERE 
        u.parent_ref_code IS NOT NULL
    )
    -- –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    SELECT 
      u.id,
      u.username,
      u.ref_code,
      u.parent_ref_code,
      CASE 
        WHEN u.ref_code = (SELECT parent_ref_code FROM users WHERE id = $1) THEN 1
        ELSE NULL -- –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º NULL, —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –¥–∞–ª—å—à–µ
      END AS level
    FROM 
      inviter_chain ic
    JOIN 
      users u ON ic.parent_ref_code = u.ref_code
  `, [userId]);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ
  if (invitersResult.rows.length === 0) {
    await executeQuery(`
      UPDATE reward_distribution_logs
      SET status = 'completed', levels_processed = 0, inviter_count = 0, total_distributed = '0', completed_at = NOW()
      WHERE batch_id = $1
    `, [batchId]);
    
    console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('‚úÖ –ù–µ—Ç –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π');
    return { totalRewardsDistributed: 0 };
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
  const inviters = invitersResult.rows;
  const invitersByRefCode = {};
  
  inviters.forEach(inviter => {
    invitersByRefCode[inviter.ref_code] = inviter;
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ–≥–æ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
  const directInviter = inviters.find(inv => inv.level === 1);
  
  if (!directInviter) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä—è–º–æ–≥–æ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞');
    return { totalRewardsDistributed: 0 };
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Å–µ—Ö –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
  let currentLevel = 1;
  let currentRefCode = directInviter.ref_code;
  
  while (currentRefCode && currentLevel <= 20) {
    const currentInviter = invitersByRefCode[currentRefCode];
    if (!currentInviter) break;
    
    currentInviter.level = currentLevel;
    currentRefCode = currentInviter.parent_ref_code;
    currentLevel++;
  }
  
  // –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º
  const levelPercents = [
    5.0,  // –£—Ä–æ–≤–µ–Ω—å 1: 5%
    3.0,  // –£—Ä–æ–≤–µ–Ω—å 2: 3%
    2.0,  // –£—Ä–æ–≤–µ–Ω—å 3: 2%
    1.0,  // –£—Ä–æ–≤–µ–Ω—å 4: 1%
    0.8,  // –£—Ä–æ–≤–µ–Ω—å 5: 0.8%
    0.5,  // –£—Ä–æ–≤–µ–Ω—å 6: 0.5%
    0.3,  // –£—Ä–æ–≤–µ–Ω—å 7: 0.3%
    0.3,  // –£—Ä–æ–≤–µ–Ω—å 8: 0.3%
    0.3,  // –£—Ä–æ–≤–µ–Ω—å 9: 0.3%
    0.3,  // –£—Ä–æ–≤–µ–Ω—å 10: 0.3%
    0.2,  // –£—Ä–æ–≤–µ–Ω—å 11: 0.2%
    0.2,  // –£—Ä–æ–≤–µ–Ω—å 12: 0.2%
    0.2,  // –£—Ä–æ–≤–µ–Ω—å 13: 0.2%
    0.2,  // –£—Ä–æ–≤–µ–Ω—å 14: 0.2%
    0.2,  // –£—Ä–æ–≤–µ–Ω—å 15: 0.2%
    0.1,  // –£—Ä–æ–≤–µ–Ω—å 16: 0.1%
    0.1,  // –£—Ä–æ–≤–µ–Ω—å 17: 0.1%
    0.1,  // –£—Ä–æ–≤–µ–Ω—å 18: 0.1%
    0.1,  // –£—Ä–æ–≤–µ–Ω—å 19: 0.1%
    0.1   // –£—Ä–æ–≤–µ–Ω—å 20: 0.1%
  ];
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const client = await pool.connect();
  let totalRewardsDistributed = 0;
  let inviterCount = 0;
  
  try {
    await client.query('BEGIN');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≤–∞–π—Ç–µ—Ä–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    for (const inviter of inviters.filter(inv => inv.level !== null)) {
      const level = inviter.level;
      
      if (level <= 0 || level > 20) continue;
      
      const percent = levelPercents[level - 1];
      const bonusAmount = amount * (percent / 100);
      
      if (bonusAmount <= 0) continue;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const balanceResult = await client.query(
        'SELECT balance_uni FROM users WHERE id = $1',
        [inviter.id]
      );
      
      if (balanceResult.rows.length === 0) continue;
      
      const currentBalance = parseFloat(balanceResult.rows[0].balance_uni || 0);
      const newBalance = currentBalance + bonusAmount;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await client.query(
        'UPDATE users SET balance_uni = $1 WHERE id = $2',
        [newBalance.toString(), inviter.id]
      );
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query(`
        INSERT INTO transactions (
          user_id, type, currency, amount, status, source, 
          description, source_user_id, category, data
        )
        VALUES ($1, 'referral', 'UNI', $2, 'confirmed', 'Referral Income', 
                $3, $4, 'bonus', $5)
      `, [
        inviter.id,
        bonusAmount.toString(),
        `Referral reward from level ${level} farming (test)`,
        userId,
        JSON.stringify({
          batch_id: batchId,
          level: level,
          percent: percent
        })
      ]);
      
      totalRewardsDistributed += bonusAmount;
      inviterCount++;
      
      console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ID ${inviter.id}, Username: ${inviter.username}, –ë–æ–Ω—É—Å: ${bonusAmount.toFixed(6)} UNI (${percent}%)`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    await client.query(`
      UPDATE reward_distribution_logs
      SET 
        status = 'completed', 
        levels_processed = $1, 
        inviter_count = $2, 
        total_distributed = $3, 
        completed_at = NOW()
      WHERE batch_id = $4
    `, [
      inviters.filter(inv => inv.level !== null).length,
      inviterCount,
      totalRewardsDistributed.toString(),
      batchId
    ]);
    
    await client.query('COMMIT');
    
    console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ${totalRewardsDistributed.toFixed(6)} UNI —Å—Ä–µ–¥–∏ ${inviterCount} –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤`);
    
    return { totalRewardsDistributed, inviterCount };
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π:', error);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∂—É—Ä–Ω–∞–ª
    await executeQuery(`
      UPDATE reward_distribution_logs
      SET status = 'failed', error_message = $1, completed_at = NOW()
      WHERE batch_id = $2
    `, [error.message, batchId]);
    
    return { totalRewardsDistributed: 0, error: error.message };
  } finally {
    client.release();
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏
 */
async function testPerformanceComparison(rootId) {
  console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π...`);
  
  // –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥)
  console.log(`\nüìä –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥):`);
  console.time('‚è±Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
  let queryCount = 0;
  
  async function getChildrenRecursive(refCode, currentLevel, maxLevel) {
    if (currentLevel > maxLevel) return [];
    
    const result = await executeQuery(`
      SELECT id, ref_code FROM users WHERE parent_ref_code = $1
    `, [refCode]);
    
    queryCount++;
    
    let children = result.rows;
    let totalChildren = children.length;
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–µ—Ç–µ–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    for (const child of children) {
      const grandchildren = await getChildrenRecursive(child.ref_code, currentLevel + 1, maxLevel);
      totalChildren += grandchildren;
    }
    
    return totalChildren;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º ref_code –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const rootResult = await executeQuery(`
    SELECT ref_code FROM users WHERE id = $1
  `, [rootId]);
  
  const rootRefCode = rootResult.rows[0].ref_code;
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥
  const totalStandard = await getChildrenRecursive(rootRefCode, 1, 5);
  
  console.timeEnd('‚è±Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
  console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤: ${queryCount}`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${totalStandard} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
  
  // –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE)
  console.log(`\nüìä –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE):`);
  console.time('‚è±Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE-–∑–∞–ø—Ä–æ—Å
  const result = await executeQuery(`
    WITH RECURSIVE referral_chain AS (
      -- –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      SELECT 
        id, 
        ref_code, 
        parent_ref_code,
        1 AS level
      FROM 
        users
      WHERE 
        parent_ref_code = $1
      
      UNION ALL
      
      -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
      SELECT 
        u.id, 
        u.ref_code, 
        u.parent_ref_code, 
        rc.level + 1 AS level
      FROM 
        users u
      INNER JOIN 
        referral_chain rc ON u.parent_ref_code = rc.ref_code
      WHERE 
        rc.level < 5
    )
    SELECT COUNT(*) as total FROM referral_chain
  `, [rootRefCode]);
  
  console.timeEnd('‚è±Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
  console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤: 1`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${result.rows[0].total} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
  
  // –†–∞—Å—á–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è
  const speedup = queryCount;
  console.log(`\nüöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${speedup}x (${queryCount} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ç–∏–≤ 1)`);
  
  return {
    standard: {
      time: null, // –ù—É–∂–Ω–æ –∑–∞—Å–µ—á—å –≤—Ä—É—á–Ω—É—é
      queryCount,
      count: totalStandard
    },
    optimized: {
      time: null, // –ù—É–∂–Ω–æ –∑–∞—Å–µ—á—å –≤—Ä—É—á–Ω—É—é
      queryCount: 1,
      count: parseInt(result.rows[0].total)
    },
    speedup
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runTests() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { rootId } = await createTestReferralStructure(5, 3);
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    await testReferralStructureQuery(rootId);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–ª—É–±–∏–Ω–æ–π 3 –¥–ª—è —Ç–µ—Å—Ç–∞
    const leafResult = await executeQuery(`
      WITH RECURSIVE referral_chain AS (
        SELECT id, ref_code, parent_ref_code, 1 AS level
        FROM users
        WHERE parent_ref_code = (SELECT ref_code FROM users WHERE id = $1)
        
        UNION ALL
        
        SELECT u.id, u.ref_code, u.parent_ref_code, rc.level + 1
        FROM users u
        JOIN referral_chain rc ON u.parent_ref_code = rc.ref_code
        WHERE rc.level < 2
      )
      SELECT id FROM referral_chain
      WHERE level = 2
      LIMIT 1
    `, [rootId]);
    
    if (leafResult.rows.length > 0) {
      const leafId = leafResult.rows[0].id;
      await testInvitersQuery(leafId);
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
      await testReferralRewardProcessing(leafId, 100);
    }
    
    // –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await testPerformanceComparison(rootId);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await executeQuery(`
      DELETE FROM users 
      WHERE username LIKE 'test_ref_%'
    `);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();