/**
 * –¢–ï–°–¢–û–í–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ü–û–í–ù–û–á –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò TELEGRAM –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
 * 
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª—é—î –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤—ñ–¥—Å—Ç–µ–∂—É—î
 * –≤–µ—Å—å –ª–∞–Ω—Ü—é–∂–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: API ‚Üí Controller ‚Üí Service ‚Üí Neon DB
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '.env') });

console.log('üöÄ [TELEGRAM DIAGNOSIS] –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');

/**
 * –°–∏–º—É–ª—é—î —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
function generateTestTelegramData() {
  const testUserId = Math.floor(Math.random() * 1000000) + 100000;
  const testUsername = `test_user_${Date.now()}`;
  
  return {
    initData: {
      user: {
        id: testUserId,
        username: testUsername,
        first_name: `TestUser`,
        last_name: `Telegram`,
        language_code: 'uk'
      }
    },
    telegram_id: testUserId,
    username: testUsername,
    first_name: 'TestUser',
    last_name: 'Telegram'
  };
}

/**
 * –¢–µ—Å—Ç—É—î API endpoint —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
 */
async function testRegistrationAPI() {
  console.log('\nüìã [API TEST] –¢–µ—Å—Ç—É—î–º–æ /api/register/telegram endpoint...');
  
  const testData = generateTestTelegramData();
  console.log('[API TEST] –ì–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:', {
    telegramId: testData.telegram_id,
    username: testData.username,
    hasInitData: !!testData.initData
  });
  
  try {
    const response = await fetch('http://localhost:5000/api/register/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    console.log(`[API TEST] –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log('[API TEST] ‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ API:', {
        success: result.success,
        userId: result.user?.id,
        telegramId: result.user?.telegram_id,
        username: result.user?.username,
        refCode: result.user?.referralCode
      });
      return result.user;
    } else {
      const errorText = await response.text();
      console.error('[API TEST] ‚ùå –ü–æ–º–∏–ª–∫–∞ API:', errorText);
      return null;
    }
  } catch (error) {
    console.error('[API TEST] ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ:', error.message);
    return null;
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Neon DB
 */
async function verifyNeonDBStorage(userId, telegramId) {
  console.log('\nüóÑÔ∏è [DB VERIFY] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Neon DB...');
  
  try {
    // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î
    const { execute_sql_query } = await import('./execute-sql-direct.js');
    
    const checkQuery = `
      SELECT id, username, telegram_id, ref_code, created_at, balance_uni, balance_ton
      FROM users 
      WHERE telegram_id = $1 OR id = $2
      ORDER BY created_at DESC 
      LIMIT 1
    `;
    
    const result = await execute_sql_query(checkQuery, [telegramId, userId]);
    
    if (result && result.length > 0) {
      const user = result[0];
      console.log('[DB VERIFY] ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ Neon DB:', {
        id: user.id,
        username: user.username,
        telegramId: user.telegram_id,
        refCode: user.ref_code,
        createdAt: user.created_at,
        balanceUni: user.balance_uni,
        balanceTon: user.balance_ton
      });
      return true;
    } else {
      console.error('[DB VERIFY] ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ Neon DB');
      return false;
    }
  } catch (error) {
    console.error('[DB VERIFY] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ë–î:', error.message);
    return false;
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Neon
 */
async function checkNeonStatistics() {
  console.log('\nüìä [DB STATS] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Neon DB...');
  
  try {
    const { execute_sql_query } = await import('./execute-sql-direct.js');
    
    const statsQuery = `
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN telegram_id IS NOT NULL THEN 1 END) as telegram_users,
        COUNT(CASE WHEN guest_id IS NOT NULL THEN 1 END) as guest_users,
        MAX(created_at) as last_registration
      FROM users
    `;
    
    const result = await execute_sql_query(statsQuery);
    
    if (result && result.length > 0) {
      const stats = result[0];
      console.log('[DB STATS] üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Neon DB:', {
        totalUsers: stats.total_users,
        telegramUsers: stats.telegram_users,
        guestUsers: stats.guest_users,
        lastRegistration: stats.last_registration
      });
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 3 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      const recentQuery = `
        SELECT id, username, telegram_id, ref_code, created_at
        FROM users 
        ORDER BY created_at DESC 
        LIMIT 3
      `;
      
      const recentUsers = await execute_sql_query(recentQuery);
      console.log('[DB STATS] üïí –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:');
      recentUsers.forEach((user, index) => {
        console.log(`  ${index + 1}. ID: ${user.id}, Username: ${user.username}, Telegram ID: ${user.telegram_id}, Created: ${user.created_at}`);
      });
      
      return true;
    }
  } catch (error) {
    console.error('[DB STATS] ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
async function runFullDiagnosis() {
  console.log('üéØ [TELEGRAM DIAGNOSIS] –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n');
  
  try {
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await checkNeonStatistics();
    
    // 2. –¢–µ—Å—Ç—É—î–º–æ API —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const registeredUser = await testRegistrationAPI();
    
    if (registeredUser) {
      // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
      const isStoredInDB = await verifyNeonDBStorage(
        registeredUser.id, 
        registeredUser.telegram_id
      );
      
      // 4. –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
      console.log('\nüéØ [FINAL REPORT] –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
      console.log(`‚úÖ API —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: ${registeredUser ? '–ü–†–ê–¶–Æ–Ñ' : '–ù–ï –ü–†–ê–¶–Æ–Ñ'}`);
      console.log(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Neon DB: ${isStoredInDB ? '–ü–†–ê–¶–Æ–Ñ' : '–ù–ï –ü–†–ê–¶–Æ–Ñ'}`);
      
      if (registeredUser && isStoredInDB) {
        console.log('\nüéâ [SUCCESS] –°–∏—Å—Ç–µ–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!');
        console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ Neon DB –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ telegram_id —Ç–∞ —ñ–º–µ–Ω–∞–º–∏.');
      } else {
        console.log('\n‚ö†Ô∏è [WARNING] –í–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
      }
    } else {
      console.log('\n‚ùå [ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ API —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.');
    }
    
  } catch (error) {
    console.error('\nüí• [FATAL ERROR] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π SQL executor
async function createSQLExecutor() {
  const sqlExecutorContent = `
import pkg from 'pg';
const { Client } = pkg;

export async function execute_sql_query(query, params = []) {
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });
  
  try {
    await client.connect();
    const result = await client.query(query, params);
    return result.rows;
  } catch (error) {
    console.error('SQL Error:', error.message);
    throw error;
  } finally {
    await client.end();
  }
}
`;

  // –ó–∞–ø–∏—Å—É—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π —Ñ–∞–π–ª
  const fs = await import('fs');
  fs.writeFileSync('./execute-sql-direct.js', sqlExecutorContent);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É
(async () => {
  try {
    await createSQLExecutor();
    await runFullDiagnosis();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
})();