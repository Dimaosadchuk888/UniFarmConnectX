/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ API
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö Neon
 */

import fetch from 'node-fetch';
import crypto from 'crypto';

// –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const BASE_URL = 'http://localhost:5000';

/**
 * –ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
function generateTestUser(index) {
  const telegramId = 500000000 + index; // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π ID –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
  const username = `realtest_user_${index}`;
  const guestId = `guest_real_${index}_${Date.now()}`;
  
  return {
    telegram_id: telegramId,
    username: username,
    first_name: `TestUser${index}`,
    last_name: 'Telegram',
    guest_id: guestId,
    authData: `fake_auth_data_${telegramId}`,
    testMode: true
  };
}

/**
 * –°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Telegram API
 */
async function createTelegramUser(userData) {
  try {
    console.log(`\nüöÄ –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userData.username} (ID: ${userData.telegram_id})`);
    
    const response = await fetch(`${BASE_URL}/api/register/telegram`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        authData: userData.authData,
        userId: userData.telegram_id,
        username: userData.username,
        firstName: userData.first_name,
        lastName: userData.last_name,
        guest_id: userData.guest_id,
        testMode: true
      })
    });
    
    const responseText = await response.text();
    console.log(`üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const result = JSON.parse(responseText);
      console.log(`‚úÖ –£–°–ü–Ü–®–ù–û —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:`);
      console.log(`   - ID –≤ –ë–î: ${result.user?.id}`);
      console.log(`   - Telegram ID: ${result.user?.telegram_id}`);
      console.log(`   - Username: ${result.user?.username}`);
      console.log(`   - Ref Code: ${result.user?.ref_code}`);
      
      return {
        success: true,
        user: result.user,
        dbId: result.user?.id
      };
    } else {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:`);
      console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${responseText}`);
      
      return {
        success: false,
        error: responseText,
        status: response.status
      };
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:`, error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ SQL
 */
async function checkUserInDatabase(telegramId) {
  try {
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegramId} –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö...`);
    
    // –¢—É—Ç –±–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ execute_sql_tool, –∞–ª–µ –≤ Node.js —Å–∫—Ä–∏–ø—Ç—ñ
    // –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏
    console.log(`   SQL –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: SELECT * FROM public.users WHERE telegram_id = ${telegramId};`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ë–î:`, error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function runTelegramUserTests() {
  console.log('üéØ –ü–û–ß–ê–¢–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–¢–í–û–†–ï–ù–ù–Ø TELEGRAM –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í');
  console.log('=' * 60);
  
  const testResults = [];
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ 2 —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  for (let i = 1; i <= 2; i++) {
    const userData = generateTestUser(i);
    const result = await createTelegramUser(userData);
    
    testResults.push({
      index: i,
      telegramId: userData.telegram_id,
      username: userData.username,
      result: result
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if (result.success) {
      await checkUserInDatabase(userData.telegram_id);
    }
    
    // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ó–≤—ñ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  console.log('\nüìã –ó–í–Ü–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:');
  console.log('=' * 60);
  
  let successCount = 0;
  testResults.forEach(test => {
    console.log(`–¢–µ—Å—Ç ${test.index}: ${test.username} (${test.telegramId})`);
    if (test.result.success) {
      console.log(`   ‚úÖ –£–°–ü–Ü–• - ID –≤ –ë–î: ${test.result.dbId}`);
      successCount++;
    } else {
      console.log(`   ‚ùå –ü–û–ú–ò–õ–ö–ê: ${test.result.error}`);
    }
  });
  
  console.log(`\nüéØ –ü—ñ–¥—Å—É–º–æ–∫: ${successCount}/${testResults.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
  
  if (successCount === testResults.length) {
    console.log('‚úÖ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò! Telegram –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
  } else {
    console.log('‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.');
  }
  
  return testResults;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
runTelegramUserTests()
  .then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
    process.exit(1);
  });