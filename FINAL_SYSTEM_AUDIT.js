/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ UNIFARM
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∑–∞–ø—É—Å–∫—É
 */

import dotenv from 'dotenv';
import fetch from 'node-fetch';
import fs from 'fs';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

class FinalSystemAudit {
  constructor() {
    this.auditResults = {
      webhook: { status: 'unknown', url: '', comment: '' },
      initData: { used: false, problems: [] },
      envVariables: { extra: [], missing: [] },
      apiErrors: {},
      manifest: { connected: false, tags: false },
      health: { main: false, api: false },
      overallStatus: 'unknown'
    };
    
    this.currentUrl = `https://${process.env.REPLIT_DEV_DOMAIN}`;
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    console.log('üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã UniFarm');
    console.log(`–°—Ä–µ–¥–∞: Replit / Supabase / Telegram WebApp`);
    console.log(`URL: ${this.currentUrl}\n`);
  }

  /**
   * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Webhook
   */
  async auditWebhook() {
    console.log('üîó –ê—É–¥–∏—Ç Webhook...');
    
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/getWebhookInfo`);
      const data = await response.json();
      
      if (data.ok) {
        const webhookUrl = data.result.url;
        this.auditResults.webhook.url = webhookUrl;
        
        if (webhookUrl.includes('.replit.dev')) {
          if (webhookUrl === `${this.currentUrl}/webhook`) {
            this.auditResults.webhook.status = '‚úÖ';
            this.auditResults.webhook.comment = '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π production URL';
          } else {
            this.auditResults.webhook.status = '‚ùå';
            this.auditResults.webhook.comment = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π dev URL';
          }
        } else if (webhookUrl === '') {
          this.auditResults.webhook.status = '‚ö†Ô∏è';
          this.auditResults.webhook.comment = 'Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling —Ä–µ–∂–∏–º)';
        } else {
          this.auditResults.webhook.status = '‚ùå';
          this.auditResults.webhook.comment = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL';
        }
      } else {
        this.auditResults.webhook.status = '‚ùå';
        this.auditResults.webhook.comment = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
      }
    } catch (error) {
      this.auditResults.webhook.status = '‚ùå';
      this.auditResults.webhook.comment = `–û—à–∏–±–∫–∞: ${error.message}`;
    }
  }

  /**
   * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ initData –∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  auditInitData() {
    console.log('üì¶ –ê—É–¥–∏—Ç initData...');
    
    const files = [
      'client/src/main.tsx',
      'client/src/hooks/useTelegram.ts',
      'client/src/services/telegramService.ts',
      'client/src/contexts/userContext.tsx'
    ];
    
    let initDataUsed = false;
    const problems = [];
    
    files.forEach(filePath => {
      try {
        if (fs.existsSync(filePath)) {
          const content = fs.readFileSync(filePath, 'utf8');
          
          if (content.includes('window.Telegram?.WebApp.initData')) {
            initDataUsed = true;
          }
          
          if (content.includes('initDataUnsafe') && !content.includes('initData')) {
            problems.push(`${filePath}: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ initDataUnsafe –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData`);
          }
          
          if (content.includes('telegram_id') || content.includes('telegramId')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ telegram_id
          }
        }
      } catch (error) {
        problems.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${filePath}: ${error.message}`);
      }
    });
    
    this.auditResults.initData.used = initDataUsed;
    this.auditResults.initData.problems = problems;
  }

  /**
   * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  auditEnvironmentVariables() {
    console.log('üîê –ê—É–¥–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    const requiredVars = [
      'SUPABASE_URL',
      'SUPABASE_KEY',
      'TELEGRAM_BOT_TOKEN',
      'JWT_SECRET',
      'SESSION_SECRET'
    ];
    
    const obsoleteVars = [
      'DATABASE_URL',
      'PGHOST',
      'PGUSER',
      'PGPASSWORD',
      'PGDATABASE',
      'PGPORT',
      'NEON_URL',
      'DATABASE_PROVIDER',
      'USE_NEON_DB'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    requiredVars.forEach(varName => {
      if (!process.env[varName]) {
        this.auditResults.envVariables.missing.push(varName);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    obsoleteVars.forEach(varName => {
      if (process.env[varName]) {
        this.auditResults.envVariables.extra.push(varName);
      }
    });
  }

  /**
   * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ API
   */
  async auditAPIErrors() {
    console.log('üì° –ê—É–¥–∏—Ç –æ—à–∏–±–æ–∫ API...');
    
    const endpoints = [
      { path: '/api/v2/auth/telegram', method: 'POST', name: 'auth_telegram' },
      { path: '/api/v2/register/telegram', method: 'POST', name: 'register_telegram' },
      { path: '/api/v2/users/profile', method: 'GET', name: 'user_profile' },
      { path: '/api/v2/wallet/balance', method: 'GET', name: 'wallet_balance' },
      { path: '/api/v2/farming/start', method: 'POST', name: 'farming_start' }
    ];
    
    for (const endpoint of endpoints) {
      try {
        const options = {
          method: endpoint.method,
          headers: { 'Content-Type': 'application/json' }
        };
        
        if (endpoint.method === 'POST') {
          options.body = JSON.stringify({
            telegram_id: 'test_user',
            username: 'test'
          });
        }
        
        const response = await fetch(`${this.currentUrl}${endpoint.path}`, options);
        
        if (response.status === 200) {
          this.auditResults.apiErrors[endpoint.name] = '200 ‚úÖ';
        } else if (response.status === 401) {
          this.auditResults.apiErrors[endpoint.name] = '401 ‚ö†Ô∏è (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)';
        } else if (response.status === 500) {
          this.auditResults.apiErrors[endpoint.name] = '500 ‚ùå';
        } else {
          this.auditResults.apiErrors[endpoint.name] = `${response.status} ‚ö†Ô∏è`;
        }
      } catch (error) {
        this.auditResults.apiErrors[endpoint.name] = `‚ùå ${error.message}`;
      }
    }
  }

  /**
   * 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Manifest –∏ Telegram WebApp
   */
  async auditManifestAndTelegram() {
    console.log('üì± –ê—É–¥–∏—Ç Manifest –∏ Telegram WebApp...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const response = await fetch(this.currentUrl);
      const htmlContent = await response.text();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest
      this.auditResults.manifest.connected = htmlContent.includes('rel="manifest"');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤
      const hasWebAppReady = htmlContent.includes('telegram-web-app-ready');
      const hasViewport = htmlContent.includes('user-scalable=no');
      const hasThemeColor = htmlContent.includes('theme-color');
      const hasTelegramScript = htmlContent.includes('telegram-web-app.js');
      
      this.auditResults.manifest.tags = hasWebAppReady && hasViewport && hasThemeColor && hasTelegramScript;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ manifest.json
      try {
        const manifestResponse = await fetch(`${this.currentUrl}/client/manifest.json`);
        if (manifestResponse.status !== 200) {
          this.auditResults.manifest.connected = false;
        }
      } catch (error) {
        this.auditResults.manifest.connected = false;
      }
      
    } catch (error) {
      this.auditResults.manifest.connected = false;
      this.auditResults.manifest.tags = false;
    }
  }

  /**
   * 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Health endpoints
   */
  async auditHealthEndpoints() {
    console.log('üìä –ê—É–¥–∏—Ç Health endpoints...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ /health
      const healthResponse = await fetch(`${this.currentUrl}/health`);
      this.auditResults.health.main = healthResponse.status === 200;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/v2/health
      const apiHealthResponse = await fetch(`${this.currentUrl}/api/v2/health`);
      this.auditResults.health.api = apiHealthResponse.status === 200;
      
    } catch (error) {
      this.auditResults.health.main = false;
      this.auditResults.health.api = false;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
   */
  determineOverallStatus() {
    const issues = [];
    
    if (this.auditResults.webhook.status === '‚ùå') issues.push('webhook');
    if (this.auditResults.envVariables.extra.length > 0) issues.push('–ª–∏—à–Ω–∏–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    if (this.auditResults.envVariables.missing.length > 0) issues.push('–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    if (!this.auditResults.manifest.connected || !this.auditResults.manifest.tags) issues.push('manifest/—Ç–µ–≥–∏');
    if (!this.auditResults.health.main || !this.auditResults.health.api) issues.push('health endpoints');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö API –æ—à–∏–±–æ–∫
    const criticalApiErrors = Object.values(this.auditResults.apiErrors).filter(status => 
      status.includes('500 ‚ùå') || status.includes('‚ùå')
    );
    
    if (criticalApiErrors.length > 0) issues.push('–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ API –æ—à–∏–±–∫–∏');
    
    if (issues.length === 0) {
      this.auditResults.overallStatus = 'üü¢ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω';
    } else if (issues.length <= 2) {
      this.auditResults.overallStatus = 'üü° –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞';
    } else {
      this.auditResults.overallStatus = 'üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateFinalReport() {
    const currentDate = new Date().toLocaleString('ru-RU');
    
    console.log('\n\nüõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ UNIFARM');
    console.log(`–î–∞—Ç–∞: ${currentDate}`);
    console.log('–°—Ä–µ–¥–∞: Replit / Supabase / Telegram WebApp\n');
    
    console.log('üîó Webhook:');
    console.log(`‚Ä¢ URL: ${this.auditResults.webhook.status} ${this.auditResults.webhook.url}`);
    console.log(`‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${this.auditResults.webhook.comment}\n`);
    
    console.log('üì¶ initData:');
    console.log(`‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${this.auditResults.initData.used ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: ${this.auditResults.initData.problems.length > 0 ? this.auditResults.initData.problems.join(', ') : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}\n`);
    
    console.log('üîê .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log(`‚Ä¢ –õ–∏—à–Ω–∏–µ: ${this.auditResults.envVariables.extra.length > 0 ? this.auditResults.envVariables.extra.join(', ') : '–ù–µ—Ç'}`);
    console.log(`‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${this.auditResults.envVariables.missing.length > 0 ? this.auditResults.envVariables.missing.join(', ') : '–ù–µ—Ç'}\n`);
    
    console.log('üì° –û—à–∏–±–∫–∏ API:');
    Object.entries(this.auditResults.apiErrors).forEach(([endpoint, status]) => {
      console.log(`‚Ä¢ ${endpoint}: ${status}`);
    });
    console.log();
    
    console.log('üì± Manifest / Telegram WebApp:');
    console.log(`‚Ä¢ Manifest –ø–æ–¥–∫–ª—é—á–µ–Ω: ${this.auditResults.manifest.connected ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚Ä¢ –¢–µ–≥–∏: ${this.auditResults.manifest.tags ? '‚úÖ' : '‚ùå'}\n`);
    
    console.log('üìä Health / –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`‚Ä¢ /health: ${this.auditResults.health.main ? '200 ‚úÖ' : '‚ùå'}`);
    console.log(`‚Ä¢ /api/v2/health: ${this.auditResults.health.api ? '200 ‚úÖ' : '‚ùå'}\n`);
    
    console.log(`üìå –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${this.auditResults.overallStatus}\n`);
    
    return this.auditResults;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞
   */
  async runFullAudit() {
    try {
      await this.auditWebhook();
      this.auditInitData();
      this.auditEnvironmentVariables();
      await this.auditAPIErrors();
      await this.auditManifestAndTelegram();
      await this.auditHealthEndpoints();
      this.determineOverallStatus();
      
      const report = this.generateFinalReport();
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      fs.writeFileSync('FINAL_AUDIT_REPORT.json', JSON.stringify(report, null, 2));
      
      return report;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error.message);
      throw error;
    }
  }
}

async function main() {
  const audit = new FinalSystemAudit();
  await audit.runFullAudit();
}

main().catch(console.error);