const jwt = require('jsonwebtoken');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function debugJwtAuth() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JWT AUTHENTICATION');
  console.log('=================================');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ User 184
  const { data: user, error } = await supabase
    .from('users')
    .select('id, telegram_id, username, first_name, ref_code')
    .eq('id', 184)
    .single();

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return;
  }

  console.log('1Ô∏è‚É£ User 184 –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:');
  console.log('  - ID:', user.id);
  console.log('  - telegram_id:', user.telegram_id);
  console.log('  - username:', user.username);

  // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
  const jwtSecret = process.env.JWT_SECRET || 'test_secret_key';
  const payload = {
    telegram_id: user.telegram_id,
    username: user.username, 
    ref_code: user.ref_code
  };

  const token = jwt.sign(payload, jwtSecret, { expiresIn: '7d' });

  console.log('\n2Ô∏è‚É£ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:');
  console.log('  - JWT Secret:', jwtSecret.substring(0, 15) + '...');
  console.log('  - Payload:', payload);
  console.log('  - Token –¥–ª–∏–Ω–∞:', token.length);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
  try {
    const decoded = jwt.verify(token, jwtSecret);
    console.log('\n3Ô∏è‚É£ JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:');
    console.log('  - telegram_id:', decoded.telegram_id);
    console.log('  - username:', decoded.username);
    console.log('  - ref_code:', decoded.ref_code);
    console.log('  - exp:', new Date(decoded.exp * 1000).toLocaleString());
  } catch (jwtError) {
    console.error('\n‚ùå JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', jwtError.message);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ middleware –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ middleware:');
  const { data: foundUser, error: findError } = await supabase
    .from('users')
    .select('id, telegram_id, username')
    .eq('telegram_id', payload.telegram_id)
    .single();

  if (findError) {
    console.error('‚ùå Middleware –Ω–µ –Ω–∞–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', findError.message);
    console.log('‚ùå –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: middleware –∏—â–µ—Ç –ø–æ telegram_id, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  } else {
    console.log('‚úÖ Middleware –Ω–∞–π–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log('  - ID:', foundUser.id);
    console.log('  - telegram_id:', foundUser.telegram_id);
    console.log('  - username:', foundUser.username);
  }

  console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  if (findError) {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ JWT middleware - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ telegram_id');
  } else {
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –∏ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ middleware');
  }
}

debugJwtAuth();