/**
 * –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï METODA getRealReferralStats –ë–ï–ó API
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class TestReferralService {
  constructor() {
    this.supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
  }

  async getRealReferralStats(userId) {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getRealReferralStats –¥–ª—è userId:', userId);
      
      // –¢–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∫–æ–¥ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ
      const { data: user, error: userError } = await this.supabase
        .from('users')
        .select('id, username, ref_code')
        .eq('id', userId)
        .single();
        
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        hasUser: !!user,
        userError: userError,
        userData: user
      });

      if (userError || !user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º fallback');
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data: referralTransactions, error: refError } = await this.supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .eq('type', 'REFERRAL_REWARD');
        
      console.log('üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
        count: referralTransactions?.length || 0,
        error: refError?.message || '–Ω–µ—Ç'
      });

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
      const { data: allUsers, error: usersError } = await this.supabase
        .from('users')
        .select('id, username, referred_by, ref_code')
        .limit(100);
        
      console.log('üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', {
        count: allUsers?.length || 0,
        error: usersError?.message || '–Ω–µ—Ç'
      });

      return {
        success: true,
        data: {
          user_id: userId,
          username: user.username,
          total_referrals: 0,
          referral_counts: {},
          level_income: {},
          referrals: []
        }
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–µ—Ç–æ–¥–µ:', error.message);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  }
}

async function testReferralMethodDirect() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ ReferralService...\n');
  
  const testService = new TestReferralService();
  
  try {
    const result = await testService.getRealReferralStats(48);
    console.log('\n‚úÖ –ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:');
    console.log(JSON.stringify(result, null, 2));
  } catch (error) {
    console.log('\n‚ùå –ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:');
    console.log('Error message:', error.message);
    console.log('Error stack:', error.stack);
  }
}

testReferralMethodDirect();