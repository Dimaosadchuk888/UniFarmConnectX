/**
 * –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–ê getRealReferralStats –ë–ï–ó API
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1bm5zdmljYmVic3NyanFlZG9yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMDU0NjE3MiwiZXhwIjoyMDQ2MTIyMTcyfQ.qe7iifh-kILRJoJT1Wvp6T7pBR1F7YRzLiHb9tREf7I';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testReferralMethodDirect() {
  console.log('üîç –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–ê getRealReferralStats');
  console.log('='.repeat(70));
  
  const userId = 48;
  
  try {
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID =', userId);
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('id', userId)
      .single();

    if (userError || !user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);

    console.log('\n2Ô∏è‚É£ –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    const { data: referralTransactions, error: refError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .ilike('description', '%referral%')
      .order('created_at', { ascending: false });

    if (refError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', refError.message);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralTransactions?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    if (referralTransactions && referralTransactions.length > 0) {
      console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
      referralTransactions.slice(0, 5).forEach((tx, index) => {
        console.log(`   ${index + 1}. ID: ${tx.id}, UNI: ${tx.amount_uni || 0}, TON: ${tx.amount_ton || 0}, –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      });
    }

    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏...');
    
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('id, username, first_name, referred_by, balance_uni, balance_ton, uni_farming_start_timestamp, ton_boost_package')
      .order('id', { ascending: true });

    if (usersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ`);

    // –°—Ç—Ä–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    console.log('\n4Ô∏è‚É£ –°—Ç—Ä–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É...');
    
    function buildReferralChain(startUserId, users, level = 1, visited = new Set()) {
      if (level > 20 || visited.has(startUserId)) return [];

      visited.add(startUserId);

      const directReferrals = users.filter(u => u.referred_by === startUserId);
      let chain = [];

      directReferrals.forEach(referral => {
        chain.push({
          ...referral,
          level: level,
          referrer_id: startUserId
        });

        const subChain = buildReferralChain(referral.id, users, level + 1, visited);
        chain.push(...subChain);
      });

      return chain;
    }

    const referralChain = buildReferralChain(userId, allUsers || []);
    console.log(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –∏–∑ ${referralChain.length} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤`);

    if (referralChain.length > 0) {
      console.log('\nüë• –°–¢–†–£–ö–¢–£–†–ê –ü–ê–†–¢–ù–ï–†–û–í:');
      const partnersByLevel = {};
      referralChain.forEach(partner => {
        if (!partnersByLevel[partner.level]) {
          partnersByLevel[partner.level] = [];
        }
        partnersByLevel[partner.level].push(partner);
      });

      for (let level = 1; level <= 9; level++) {
        const partners = partnersByLevel[level] || [];
        if (partners.length > 0) {
          console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${partners.length} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤`);
          partners.forEach(p => {
            console.log(`     ID: ${p.id}, Username: ${p.username}, UNI: ${p.balance_uni || 0}, TON: ${p.balance_ton || 0}`);
          });
        }
      }
    }

    console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
  
  console.log('\n' + '='.repeat(70));
}

testReferralMethodDirect().catch(console.error);