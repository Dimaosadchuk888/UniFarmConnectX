#!/usr/bin/env tsx

/**
 * üîç –ü–†–û–î–ê–ö–®–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

import { supabase } from './core/supabaseClient';

async function productionMonitoring() {
  console.log('üîç –ü–†–û–î–ê–ö–®–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    console.log('üìä –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const { data: recentTransactions, error } = await supabase
      .from('transactions')
      .select('user_id, type, amount, amount_uni, amount_ton, currency, created_at, description')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });

    if (recentTransactions && recentTransactions.length > 0) {
      console.log(`–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å: ${recentTransactions.length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const duplicateMap = new Map();
      
      recentTransactions.forEach(tx => {
        const key = `${tx.user_id}_${tx.type}_${tx.amount_uni || tx.amount_ton || tx.amount}_${tx.currency}`;
        if (!duplicateMap.has(key)) {
          duplicateMap.set(key, []);
        }
        duplicateMap.get(key).push({
          time: new Date(tx.created_at).toLocaleTimeString(),
          description: tx.description
        });
      });

      let duplicatesFound = 0;
      duplicateMap.forEach((transactions, key) => {
        if (transactions.length > 1) {
          duplicatesFound++;
          console.log(`\n‚ùó –î–£–ë–õ–ò–ö–ê–¢: ${key}`);
          transactions.forEach((tx, index) => {
            console.log(`   ${index + 1}. [${tx.time}] ${tx.description}`);
          });
        }
      });

      if (duplicatesFound === 0) {
        console.log('‚úÖ –û–¢–õ–ò–ß–ù–û: –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      } else {
        console.log(`\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicatesFound} —Ç–∏–ø–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ User 25 (–µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ —Å –Ω–∏–º)
    console.log('\nüë§ –ü–†–û–í–ï–†–ö–ê USER 25:');
    const { data: user25Recent, error: user25Error } = await supabase
      .from('transactions')
      .select('type, amount_uni, amount_ton, created_at, description')
      .eq('user_id', 25)
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });

    if (user25Recent && user25Recent.length > 0) {
      console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25 –∑–∞ —á–∞—Å: ${user25Recent.length}`);
      user25Recent.forEach((tx, index) => {
        const time = new Date(tx.created_at).toLocaleTimeString();
        console.log(`${index + 1}. [${time}] ${tx.type} | UNI: ${tx.amount_uni} | TON: ${tx.amount_ton}`);
      });
    } else {
      console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º DAILY_BONUS –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
    console.log('\nüéÅ –ê–ù–ê–õ–ò–ó DAILY_BONUS –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const { data: dailyBonuses, error: bonusError } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at, description')
      .eq('type', 'DAILY_BONUS')
      .eq('currency', 'UNI')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });

    if (dailyBonuses && dailyBonuses.length > 0) {
      console.log(`DAILY_BONUS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å: ${dailyBonuses.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å—É–º–º–µ
      const bonusMap = new Map();
      dailyBonuses.forEach(bonus => {
        const key = `User_${bonus.user_id}_${bonus.amount}`;
        if (!bonusMap.has(key)) {
          bonusMap.set(key, []);
        }
        bonusMap.get(key).push({
          time: new Date(bonus.created_at).toLocaleTimeString(),
          description: bonus.description
        });
      });

      let bonusDuplicates = 0;
      bonusMap.forEach((bonuses, key) => {
        if (bonuses.length > 1) {
          bonusDuplicates++;
          console.log(`‚ùó –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ô BONUS: ${key}`);
          bonuses.forEach((bonus, index) => {
            console.log(`   ${index + 1}. [${bonus.time}] ${bonus.description}`);
          });
        }
      });

      if (bonusDuplicates === 0) {
        console.log('‚úÖ –û–¢–õ–ò–ß–ù–û: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DAILY_BONUS –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      } else {
        console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${bonusDuplicates} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DAILY_BONUS`);
      }
    } else {
      console.log('DAILY_BONUS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 4. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
    console.log('- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ awardUniBonus()');
    console.log('- ‚úÖ –°–æ–∑–¥–∞–Ω DeduplicationHelper –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫');
    console.log('- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
    console.log('- üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
  }
}

productionMonitoring().catch(console.error);