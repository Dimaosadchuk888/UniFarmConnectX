/**
 * –ü–†–û–í–ï–†–ö–ê –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 184
 * –í–∫–ª—é—á–∞—è –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –Ω–µ —Ç–æ–ª—å–∫–æ DEPOSIT
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkAllTonTransactions() {
  console.log('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 184');
  console.log('='.repeat(50));
  
  const userId = 184;
  
  try {
    // 1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user } = await supabase
      .from('users')
      .select('balance_ton, balance_uni, telegram_id')
      .eq('id', userId)
      .single();
    
    console.log('üë§ USER 184:');
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
    console.log(`   Telegram ID: ${user.telegram_id}`);
    
    // 2. –í–°–ï TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
    const { data: allTonTx, error: allError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
    
    console.log(`\nüìä –í–°–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (${allTonTx?.length || 0}):`);
    
    if (allTonTx && allTonTx.length > 0) {
      let totalBalance = 0;
      const typeCounters = {};
      
      allTonTx.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const timeAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        const amount = parseFloat(tx.amount || tx.amount_ton || 0);
        
        console.log(`\n   ${i + 1}. ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      –°—É–º–º–∞: ${amount} TON`);
        console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        if (tx.type === 'DEPOSIT' || tx.type === 'FARMING_REWARD' || tx.type === 'REFERRAL_REWARD') {
          totalBalance += amount;
        } else if (tx.type === 'WITHDRAWAL') {
          totalBalance -= amount;
        }
        
        // –°—á–µ—Ç—á–∏–∫ —Ç–∏–ø–æ–≤
        typeCounters[tx.type] = (typeCounters[tx.type] || 0) + 1;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
        if (tx.metadata) {
          console.log(`      Metadata: ${JSON.stringify(tx.metadata)}`);
        }
      });
      
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–û–í:`);
      Object.entries(typeCounters).forEach(([type, count]) => {
        console.log(`   ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      console.log(`\nüí∞ –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê:`);
      console.log(`   –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalBalance} TON`);
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${user.balance_ton} TON`);
      
      const diff = parseFloat(user.balance_ton) - totalBalance;
      if (Math.abs(diff) > 0.001) {
        console.log(`   ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${diff} TON`);
        console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   - –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
        console.log('   - –ï—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º`);
      }
      
    } else {
      console.log('   ‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log(`   ü§î –ù–û –±–∞–ª–∞–Ω—Å ${user.balance_ton} TON –µ—Å—Ç—å!`);
      console.log('   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –∑–∞–ø–∏—Å—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüîÑ –ü–û–°–õ–ï–î–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const { data: recentSystem } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at')
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (recentSystem) {
      console.log('   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ:');
      recentSystem.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const timeAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`      ${i + 1}. User ${tx.user_id}: ${tx.type} ${tx.amount} ${tx.currency} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –æ—Ç User 184 —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏
    console.log('\nüîç –ü–û–ò–°–ö –í–û–ó–ú–û–ñ–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í –î–†–£–ì–ò–• –¢–ò–ü–û–í:');
    const { data: possibleDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .or('description.ilike.%deposit%,description.ilike.%–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ%,description.ilike.%blockchain%')
      .order('created_at', { ascending: false });
    
    if (possibleDeposits && possibleDeposits.length > 0) {
      console.log(`   üìÑ –ù–∞–π–¥–µ–Ω–æ ${possibleDeposits.length} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      possibleDeposits.forEach((tx, i) => {
        console.log(`      ${i + 1}. ${tx.type}: ${tx.amount} ${tx.currency} - ${tx.description}`);
      });
    } else {
      console.log('   ‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

checkAllTonTransactions().catch(console.error);