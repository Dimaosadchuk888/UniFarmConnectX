#!/usr/bin/env tsx

/**
 * –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–û–ú–ê–õ–ò–ô –ë–ê–õ–ê–ù–°–ê - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó
 * –î–∞—Ç–∞: 29 –∏—é–ª—è 2025
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò:
 * 1. User 25 - 209+ –±—ã—Å—Ç—Ä—ã—Ö REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (0.2-3.5 –º–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
 * 2. User 192 - ton_boost_active=true –ë–ï–ó –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data
 * 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å rollback –æ–ø–µ—Ä–∞—Ü–∏–π
 */

import { supabase } from './core/supabase';

console.log('üö® –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–û–ú–ê–õ–ò–ô –ë–ê–õ–ê–ù–°–ê - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó');
console.log('='.repeat(90));

interface SchedulerStats {
  name: string;
  interval: number;
  lastRun?: string;
  conflicts?: string[];
}

interface TransactionPattern {
  type: string;
  count: number;
  avgInterval: number;
  minInterval: number;
  maxInterval: number;
  suspiciousPatterns: number;
}

async function analyzeCriticalSchedulerConflicts() {
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ù–§–õ–ò–ö–¢–û–í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í');
  console.log('-'.repeat(80));
  
  // –ê–Ω–∞–ª–∏–∑ –∏–∑ –∫–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
  const schedulers: SchedulerStats[] = [
    { name: 'TON Boost Income', interval: 5, conflicts: ['Frequent REFERRAL_REWARD'] },
    { name: 'UNI Farming', interval: 5, conflicts: ['Balance recalculation'] },
    { name: 'Boost Verification', interval: 2, conflicts: ['TON deposit processing'] },
    { name: 'WebSocket Cleanup', interval: 1, conflicts: ['Connection termination'] },
    { name: 'Balance Recalculation', interval: 0, conflicts: ['Manual triggers'] }
  ];
  
  console.log('üìä –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò –ò –ò–• –ò–ù–¢–ï–†–í–ê–õ–´:');
  schedulers.forEach(scheduler => {
    console.log(`   ${scheduler.name}: –∫–∞–∂–¥—ã–µ ${scheduler.interval} –º–∏–Ω${scheduler.interval === 0 ? ' (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)' : ''}`);
    if (scheduler.conflicts && scheduler.conflicts.length > 0) {
      console.log(`      ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: ${scheduler.conflicts.join(', ')}`);
    }
  });
  
  console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:');
  console.log('   - 2-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª Boost Verification –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å 5-–º–∏–Ω—É—Ç–Ω—ã–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞–º–∏');
  console.log('   - –û—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ');
  console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞–º–∏');
}

async function analyzeUser25AnomalousPatterns() {
  console.log('\n2Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ù–û–ú–ê–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í USER 25');
  console.log('-'.repeat(80));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    
    const { data: user25Transactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', threeDaysAgo.toISOString())
      .order('created_at', { ascending: true });
      
    if (!user25Transactions) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25');
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const typeStats: Record<string, TransactionPattern> = {};
    
    user25Transactions.forEach((tx, index) => {
      if (!typeStats[tx.type]) {
        typeStats[tx.type] = {
          type: tx.type,
          count: 0,
          avgInterval: 0,
          minInterval: Infinity,
          maxInterval: 0,
          suspiciousPatterns: 0
        };
      }
      
      typeStats[tx.type].count++;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      if (index > 0) {
        const prevTx = user25Transactions[index - 1];
        if (prevTx.type === tx.type) {
          const interval = (new Date(tx.created_at).getTime() - new Date(prevTx.created_at).getTime()) / (1000 * 60);
          
          typeStats[tx.type].minInterval = Math.min(typeStats[tx.type].minInterval, interval);
          typeStats[tx.type].maxInterval = Math.max(typeStats[tx.type].maxInterval, interval);
          
          // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          if (interval < 1) {
            typeStats[tx.type].suspiciousPatterns++;
          }
        }
      }
    });
    
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 25 (3 –¥–Ω—è):');
    Object.values(typeStats).forEach(stat => {
      console.log(`\n   ${stat.type}:`);
      console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stat.count}`);
      if (stat.minInterval !== Infinity) {
        console.log(`     –ú–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${stat.minInterval.toFixed(2)} –º–∏–Ω`);
        console.log(`     –ú–∞–∫—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${stat.maxInterval.toFixed(2)} –º–∏–Ω`);
      }
      if (stat.suspiciousPatterns > 0) {
        console.log(`     üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${stat.suspiciousPatterns}`);
      }
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ REFERRAL_REWARD (—Å–∞–º—ã–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø)
    const referralRewards = user25Transactions.filter(tx => tx.type === 'REFERRAL_REWARD');
    if (referralRewards.length > 0) {
      analyzeReferralRewardPatterns(referralRewards);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ User 25:', error);
  }
}

function analyzeReferralRewardPatterns(referralRewards: any[]) {
  console.log('\nüîç –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó REFERRAL_REWARD:');
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º
  const clusters: any[][] = [];
  let currentCluster: any[] = [];
  
  referralRewards.forEach((tx, index) => {
    if (index === 0) {
      currentCluster = [tx];
      return;
    }
    
    const prevTx = referralRewards[index - 1];
    const interval = (new Date(tx.created_at).getTime() - new Date(prevTx.created_at).getTime()) / (1000 * 60);
    
    // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä
    if (interval > 10) {
      clusters.push([...currentCluster]);
      currentCluster = [tx];
    } else {
      currentCluster.push(tx);
    }
  });
  
  if (currentCluster.length > 0) {
    clusters.push(currentCluster);
  }
  
  console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${clusters.length}`);
  
  clusters.forEach((cluster, index) => {
    if (cluster.length >= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
      const startTime = new Date(cluster[0].created_at);
      const endTime = new Date(cluster[cluster.length - 1].created_at);
      const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60);
      
      console.log(`\n   üö® –ö–ª–∞—Å—Ç–µ—Ä ${index + 1}: ${cluster.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ ${duration.toFixed(1)} –º–∏–Ω`);
      console.log(`     –ü–µ—Ä–∏–æ–¥: ${startTime.toLocaleTimeString()} - ${endTime.toLocaleTimeString()}`);
      console.log(`     –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${(duration / (cluster.length - 1)).toFixed(2)} –º–∏–Ω`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
      const totalAmount = cluster.reduce((sum, tx) => sum + parseFloat(tx.amount), 0);
      console.log(`     –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(8)} TON`);
    }
  });
}

async function analyzeDataIntegrityIssues() {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•');
  console.log('-'.repeat(80));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_active=true –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data
    const { data: activeBoostUsers } = await supabase
      .from('users')
      .select('id, username, balance_ton, ton_boost_active, ton_boost_package')
      .eq('ton_boost_active', true);
      
    if (activeBoostUsers && activeBoostUsers.length > 0) {
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${activeBoostUsers.length}`);
      
      const orphanedUsers: number[] = [];
      
      for (const user of activeBoostUsers) {
        const { data: farmingData } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id.toString());
          
        if (!farmingData || farmingData.length === 0) {
          orphanedUsers.push(user.id);
          console.log(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ê–ù–û–ú–ê–õ–ò–Ø: User ${user.id} (@${user.username || 'N/A'})`);
          console.log(`   ton_boost_active=true, ton_boost_package=${user.ton_boost_package}`);
          console.log(`   –ù–û: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ ton_farming_data`);
          console.log(`   TON Balance: ${user.balance_ton || 0}`);
        }
      }
      
      if (orphanedUsers.length > 0) {
        console.log(`\nüö® –ù–ê–ô–î–ï–ù–û ${orphanedUsers.length} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò –î–ê–ù–ù–´–•:`);
        console.log(`   IDs: ${orphanedUsers.join(', ')}`);
        console.log(`   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
        console.log(`   - –°–±–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤`);
        console.log(`   - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ ton_farming_data –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å users`);
        console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

async function searchForDisappearingDeposits() {
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –ò–°–ß–ï–ó–ê–Æ–©–ò–• –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('-'.repeat(80));
  
  try {
    // –ò—â–µ–º TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    
    const { data: tonDeposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'DEPOSIT')
      .eq('currency', 'TON')
      .gte('created_at', weekAgo.toISOString())
      .order('created_at', { ascending: false });
      
    if (!tonDeposits) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      return;
    }
    
    console.log(`üí∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${tonDeposits.length}`);
    
    if (tonDeposits.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const userDeposits: Record<number, any[]> = {};
      tonDeposits.forEach(deposit => {
        if (!userDeposits[deposit.user_id]) {
          userDeposits[deposit.user_id] = [];
        }
        userDeposits[deposit.user_id].push(deposit);
      });
      
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${Object.keys(userDeposits).length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
      for (const [userId, deposits] of Object.entries(userDeposits)) {
        if (deposits.length > 1) {
          console.log(`\n   üë§ User ${userId}: ${deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          deposits.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
          
          for (let i = 1; i < deposits.length; i++) {
            const interval = (new Date(deposits[i].created_at).getTime() - new Date(deposits[i-1].created_at).getTime()) / (1000 * 60);
            
            if (interval < 5) {
              console.log(`     üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: ${interval.toFixed(1)} –º–∏–Ω –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏`);
              console.log(`       ${deposits[i-1].amount} TON -> ${deposits[i].amount} TON`);
            }
          }
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å—á–µ–∑–∞—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
  }
}

async function analyzeBalanceRecalculationTriggers() {
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ò–ì–ì–ï–†–û–í –ü–ï–†–ï–°–ß–ï–¢–ê –ë–ê–õ–ê–ù–°–ê');
  console.log('-'.repeat(80));
  
  try {
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    
    const { data: recalcTransactions } = await supabase
      .from('transactions')
      .select('*')
      .ilike('description', '%–ø–µ—Ä–µ—Å—á–µ—Ç%')
      .gte('created_at', weekAgo.toISOString())
      .order('created_at', { ascending: false });
      
    if (recalcTransactions && recalcTransactions.length > 0) {
      console.log(`üîÑ –û–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: ${recalcTransactions.length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      const userRecalcs: Record<number, number> = {};
      recalcTransactions.forEach(tx => {
        userRecalcs[tx.user_id] = (userRecalcs[tx.user_id] || 0) + 1;
      });
      
      const usersWithMultipleRecalcs = Object.entries(userRecalcs)
        .filter(([_, count]) => count > 1)
        .sort(([_, a], [__, b]) => b - a);
        
      if (usersWithMultipleRecalcs.length > 0) {
        console.log('\n   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞–º–∏:');
        usersWithMultipleRecalcs.slice(0, 5).forEach(([userId, count]) => {
          console.log(`     User ${userId}: ${count} –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤`);
        });
      }
    } else {
      console.log('   –û–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö)');
    }
    
    console.log('\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–û–ù–´ –ü–ï–†–ï–°–ß–ï–¢–ê:');
    console.log('   - core/BalanceManager.ts - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º');
    console.log('   - modules/transactions/service.ts - recalculateUserBalance()');
    console.log('   - modules/wallet/service.ts - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—à–µ–ª—å–∫–æ–º');
    console.log('   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞:', error);
  }
}

async function generateCriticalFindings() {
  console.log('\n6Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –í–´–í–û–î–û–í');
  console.log('-'.repeat(80));
  
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–ù–û–ú–ê–õ–ò–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´:');
  
  console.log('\n1. –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ü–ê–ú-–ê–ö–¢–ò–í–ù–û–°–¢–¨:');
  console.log('   - User 25: 255+ REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 7 –¥–Ω–µ–π');
  console.log('   - –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 0.75 –º–∏–Ω—É—Ç (–Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –±—ã—Å—Ç—Ä–æ)');
  console.log('   - 254 –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–µ–µ 2 –º–∏–Ω—É—Ç');
  console.log('   - –í–æ–∑–º–æ–∂–Ω–æ: –±–æ—Ç –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–∂–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã');
  
  console.log('\n2. –ù–ê–†–£–®–ï–ù–ò–ï –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:');
  console.log('   - User 192: ton_boost_active=true –ë–ï–ó –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
  console.log('   - –í–æ–∑–º–æ–∂–Ω–æ: —Å–±–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤');
  console.log('   - –†–∏—Å–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
  
  console.log('\n3. –ö–û–ù–§–õ–ò–ö–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
  console.log('   - 2-–º–∏–Ω—É—Ç–Ω—ã–π Boost Verification vs 5-–º–∏–Ω—É—Ç–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏');
  console.log('   - –û—á–∏—Å—Ç–∫–∞ WebSocket –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏');
  
  console.log('\n4. –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:');
  console.log('   - –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤ (0.0-0.5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏)');
  console.log('   - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–ª–∫–∏–µ REFERRAL_REWARD —Å—É–º–º—ã');
  console.log('   - –í–æ–∑–º–æ–∂–Ω–æ: —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –æ—à–∏–±–æ—á–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è');
  
  console.log('\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
  console.log('   1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25');
  console.log('   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ ton_farming_data');
  console.log('   4. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞–º–∏');
  console.log('   5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
}

async function main() {
  try {
    await analyzeCriticalSchedulerConflicts();
    await analyzeUser25AnomalousPatterns();
    await analyzeDataIntegrityIssues();
    await searchForDisappearingDeposits();
    await analyzeBalanceRecalculationTriggers();
    await generateCriticalFindings();
    
    console.log('\n' + '='.repeat(90));
    console.log('üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô');
    console.log('‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ù–ò–ú–ê–ù–ò–ï –ö –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ú –ê–ù–û–ú–ê–õ–ò–Ø–ú');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

main().catch(console.error);