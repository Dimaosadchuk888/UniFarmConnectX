// –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function investigateRegistrationLogs() {
  console.log('=== –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –õ–û–ì–û–í –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (191-197)
    const { data: newUsers, error } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .gte('id', 191)
      .order('id', { ascending: true });
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${newUsers.length} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID >= 191)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ logs —Ñ–∞–π–ª—ã
    const fs = require('fs');
    const logFiles = [
      'data/server-output.log',
      'logs/auth.log',
      'logs/referral.log',
      'server.log',
      'server_test.log'
    ];
    
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤:');
    
    let foundLogs = false;
    
    for (const logFile of logFiles) {
      try {
        if (fs.existsSync(logFile)) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${logFile}`);
          foundLogs = true;
          
          // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
          const logContent = fs.readFileSync(logFile, 'utf8');
          const lines = logContent.split('\n');
          const recentLines = lines.slice(-50); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
          
          // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          const registrationLines = recentLines.filter(line => 
            line.includes('AuthService') || 
            line.includes('ReferralService') ||
            line.includes('processReferral') ||
            line.includes('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') ||
            line.includes('ref_by')
          );
          
          if (registrationLines.length > 0) {
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${registrationLines.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ ${logFile}:`);
            registrationLines.forEach((line, index) => {
              console.log(`  ${index + 1}. ${line}`);
            });
          }
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${logFile}:`, error.message);
      }
    }
    
    if (!foundLogs) {
      console.log('‚ùå –õ–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:');
    
    try {
      const response = await fetch('http://localhost:3000/health');
      if (response.ok) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth endpoint
        const authResponse = await fetch('http://localhost:3000/api/v2/auth/health');
        if (authResponse.ok) {
          console.log('‚úÖ Auth endpoint –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          console.log('‚ùå Auth endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      }
    } catch (error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    
    newUsers.forEach(user => {
      console.log(`\nüë§ User ID ${user.id}:`);
      console.log(`   telegram_id: ${user.telegram_id}`);
      console.log(`   username: ${user.username}`);
      console.log(`   referred_by: ${user.referred_by}`);
      console.log(`   created_at: ${user.created_at}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç telegram_id
      const telegramId = user.telegram_id;
      if (telegramId && telegramId.toString().length >= 9) {
        console.log('   ‚úÖ Telegram ID –≤—ã–≥–ª—è–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–º');
      } else if (telegramId && telegramId.toString().startsWith('1752')) {
        console.log('   ‚ö†Ô∏è  Telegram ID –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π (timestamp-based)');
      } else {
        console.log('   ‚ùì Telegram ID –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º username
      if (user.username && user.username.startsWith('test_')) {
        console.log('   ‚ö†Ô∏è  Username –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π');
      } else if (user.username) {
        console.log('   ‚úÖ Username –≤—ã–≥–ª—è–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–º');
      } else {
        console.log('   ‚ùì Username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
    });
    
    console.log('\nüîç –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    console.log('2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('3. –ò—Å—Å–ª–µ–¥–æ–≤–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('4. –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (191-197) –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    console.log('5. –í—Å–µ –∏–º–µ—é—Ç referred_by: null - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

investigateRegistrationLogs().catch(console.error);