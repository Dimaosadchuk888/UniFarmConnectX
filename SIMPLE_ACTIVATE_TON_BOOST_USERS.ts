#!/usr/bin/env tsx

/**
 * üöÄ –ü–†–û–°–¢–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –æ—à–∏–±–∫—É - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ton_boost_active = true
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function activateBoostUsers() {
  console.log('üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('=' .repeat(40));
  
  try {
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–æ–∫—É–ø–∫–∞–º–∏
    const userIds = [25, 224, 250, 184, 220, 246, 290, 287, 258];
    
    console.log(`üë• –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.join(', ')}`);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const { data: result, error } = await supabase
      .from('users')
      .update({ ton_boost_active: true })
      .in('id', userIds)
      .select('id, username, ton_boost_active, ton_boost_package');

    if (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
      throw error;
    }

    console.log(`\n‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û: ${result?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    result?.forEach(user => {
      console.log(`   User ${user.id} (@${user.username}): Active=${user.ton_boost_active}, Package=${user.ton_boost_package}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    const activeCount = result?.filter(u => u.ton_boost_active && u.ton_boost_package).length || 0;
    console.log(`\nüìà –ì–û–¢–û–í–û –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê: ${activeCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    return { success: true, activated: result?.length || 0 };

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await activateBoostUsers();
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${result.activated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log('üéâ –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    console.log('   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
  } catch (error) {
    console.error('\n‚ùå –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê:', error);
  }
}

main();