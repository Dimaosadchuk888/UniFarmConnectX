const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function tonDepositSystemVerification() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–û–í ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã transactions
    console.log('üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã transactions...');
    
    const { data: transactionColumns, error: schemaError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'transactions')
      .order('ordinal_position');
      
    if (schemaError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã transactions:', schemaError);
    } else {
      console.log('üìä –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã transactions:');
      transactionColumns?.forEach(col => {
        console.log(`   ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ enum —Ç–∏–ø–∞ transaction_type
    console.log('\nüîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ enum —Ç–∏–ø–∞ transaction_type...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å TON_DEPOSIT –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testUserId = 999999; // –¢–µ—Å—Ç–æ–≤—ã–π ID
    
    try {
      const { error: insertError } = await supabase
        .from('transactions')
        .insert({
          user_id: testUserId,
          type: 'TON_DEPOSIT',
          amount: '0.001',
          currency: 'TON',
          status: 'completed',
          description: 'Test TON deposit validation'
        });
        
      if (insertError) {
        console.log('‚ùå TON_DEPOSIT –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è enum:', insertError.message);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        const { data: supportedTypes, error: typesError } = await supabase
          .from('transactions')
          .select('type')
          .limit(100);
          
        if (!typesError && supportedTypes) {
          const uniqueTypes = [...new Set(supportedTypes.map(t => t.type))];
          console.log(`üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: ${uniqueTypes.join(', ')}`);
        }
      } else {
        console.log('‚úÖ TON_DEPOSIT —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É');
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await supabase
          .from('transactions')
          .delete()
          .eq('user_id', testUserId)
          .eq('description', 'Test TON deposit validation');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TON_DEPOSIT:', error.message);
    }
    
    // 3. –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\nüîç 3. –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const searchPatterns = [
      { field: 'type', value: 'TON_DEPOSIT' },
      { field: 'description', pattern: '%TON%deposit%' },
      { field: 'description', pattern: '%blockchain%' },
      { field: 'currency', value: 'TON' },
      { field: 'metadata->>blockchain_hash', pattern: '%' }
    ];
    
    for (const pattern of searchPatterns) {
      let query = supabase.from('transactions').select('id, user_id, type, amount, currency, description, metadata, created_at');
      
      if (pattern.value) {
        query = query.eq(pattern.field, pattern.value);
      } else if (pattern.pattern) {
        query = query.ilike(pattern.field, pattern.pattern);
      }
      
      const { data: results, error: searchError } = await query.limit(10);
      
      if (!searchError && results && results.length > 0) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ ${pattern.field}: ${results.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        results.slice(0, 3).forEach(tx => {
          console.log(`   TX ${tx.id}: User ${tx.user_id}, ${tx.type}, ${tx.amount} ${tx.currency}`);
          if (tx.metadata) {
            console.log(`     Metadata: ${JSON.stringify(tx.metadata).substring(0, 100)}...`);
          }
        });
      }
    }
    
    // 4. –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ d1077cd0 –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–ª—è–º
    console.log('\nüîç 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ d1077cd0...');
    
    const hashVariations = [
      'd1077cd0bad69b623a06fe24dd848ba5ed5b25f98655a0ca51466005f53b8b2b',
      'd1077cd0',
      'bad69b623a06fe24dd848ba5ed5b25f98655a0ca51466005f53b8b2b'
    ];
    
    for (const hash of hashVariations) {
      // –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
      const searchFields = [
        'description',
        'metadata->>blockchain_hash', 
        'metadata->>transaction_hash',
        'metadata->>hash',
        'metadata->>txHash'
      ];
      
      for (const field of searchFields) {
        const { data: hashResults, error: hashError } = await supabase
          .from('transactions')
          .select('*')
          .ilike(field, `%${hash}%`)
          .limit(5);
          
        if (!hashError && hashResults && hashResults.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ ${field} —Å —Ö–µ—à–µ–º ${hash}:`);
          hashResults.forEach(tx => {
            console.log(`   TX ${tx.id}: User ${tx.user_id}, ${tx.type}, ${tx.amount} ${tx.currency}, ${tx.created_at}`);
            console.log(`     Description: ${tx.description}`);
            if (tx.metadata) {
              console.log(`     Metadata: ${JSON.stringify(tx.metadata)}`);
            }
          });
        }
      }
    }
    
    // 5. –ê–Ω–∞–ª–∏–∑ User 228 (–ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    console.log('\nüîç 5. –ê–Ω–∞–ª–∏–∑ User 228 (–ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞)...');
    
    const { data: user228Data, error: user228Error } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, balance_uni, created_at')
      .eq('id', 228)
      .single();
      
    if (user228Error) {
      console.log('‚ùå User 228 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', user228Error.message);
    } else {
      console.log('üë§ –î–∞–Ω–Ω—ã–µ User 228:');
      console.log(`   ID: ${user228Data.id}, Telegram: ${user228Data.telegram_id}`);
      console.log(`   Username: ${user228Data.username}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å TON: ${user228Data.balance_ton}, UNI: ${user228Data.balance_uni}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user228Data.created_at}`);
      
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 228
      const { data: user228Txs, error: txError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', 228)
        .order('created_at', { ascending: false })
        .limit(20);
        
      if (!txError && user228Txs) {
        console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 228 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):`);
        user228Txs.forEach(tx => {
          console.log(`   TX ${tx.id}: ${tx.type}, ${tx.amount} ${tx.currency}, ${tx.status}, ${tx.created_at}`);
          if (tx.description.includes('TON') || tx.description.includes('deposit')) {
            console.log(`     ‚ö†Ô∏è TON-—Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx.description}`);
          }
        });
        
        // –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        const tonRelatedTxs = user228Txs.filter(tx => 
          tx.currency === 'TON' || 
          tx.description.toLowerCase().includes('ton') ||
          tx.description.toLowerCase().includes('deposit')
        );
        
        if (tonRelatedTxs.length > 0) {
          console.log(`üíé TON-—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 228: ${tonRelatedTxs.length}`);
        } else {
          console.log('‚ùå –ù–µ—Ç TON-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É User 228');
        }
      }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    console.log('\nüîç 6. –ê–Ω–∞–ª–∏–∑ TON –¥–µ–ø–æ–∑–∏—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: recentTonTxs, error: recentTonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .gte('created_at', '2025-07-20T00:00:00')
      .order('created_at', { ascending: false })
      .limit(50);
      
    if (!recentTonError && recentTonTxs) {
      console.log(`üìä TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏: ${recentTonTxs.length}`);
      
      const typeDistribution = {};
      recentTonTxs.forEach(tx => {
        typeDistribution[tx.type] = (typeDistribution[tx.type] || 0) + 1;
      });
      
      console.log('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      Object.entries(typeDistribution).forEach(([type, count]) => {
        console.log(`   ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      // –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const blockchainTxs = recentTonTxs.filter(tx => 
        tx.metadata && 
        (tx.metadata.blockchain_hash || tx.metadata.transaction_hash || tx.metadata.hash)
      );
      
      console.log(`üíé TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${blockchainTxs.length}`);
      
      if (blockchainTxs.length === 0) {
        console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω —Ö–µ—à–∞–º–∏!');
        console.log('   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
      }
    }
    
    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\nüìã 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    // –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    const { count: totalTonTxs } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .eq('currency', 'TON');
      
    const { count: tonDepositTxs } = await supabase
      .from('transactions') 
      .select('*', { count: 'exact', head: true })
      .eq('type', 'TON_DEPOSIT');
      
    const { count: tonUsersWithBalance } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .gt('balance_ton', 0);
      
    console.log('üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:');
    console.log(`   –û–±—â–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalTonTxs || 0}`);
    console.log(`   TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonDepositTxs || 0}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º: ${tonUsersWithBalance || 0}`);
    
    if ((tonDepositTxs || 0) === 0) {
      console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
      console.log('   - –ù–µ—Ç TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ');
      console.log('   - Enum –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TON_DEPOSIT —Ç–∏–ø');
      console.log('   - –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
    } else {
      console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    }
    
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–û–í –ó–ê–í–ï–†–®–ï–ù–ê ===');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
  }
}

tonDepositSystemVerification();