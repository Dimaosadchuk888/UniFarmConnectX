import { supabase } from './core/supabase';

async function checkLatestBoostPurchases() {
  console.log('=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ü–û–ö–£–ü–û–ö TON BOOST ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ boost_purchases —Å metadata
    console.log('üì¶ 1. –î–ï–¢–ê–õ–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–ö–£–ü–ö–ò:\n');
    
    const { data: purchases, error: purchaseError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('user_id', 74)
      .order('created_at', { ascending: false })
      .limit(5);

    if (purchaseError) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ boost_purchases –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', purchaseError.message);
    } else if (purchases && purchases.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ boost_purchases: ${purchases.length}\n`);
      
      for (const purchase of purchases) {
        console.log(`ID: ${purchase.id}`);
        console.log(`  –í—Ä–µ–º—è: ${new Date(purchase.created_at).toLocaleString()}`);
        console.log(`  Boost ID: ${purchase.boost_id}`);
        console.log(`  Source: ${purchase.source}`);
        console.log(`  Status: ${purchase.status}`);
        console.log(`  TX Hash: ${purchase.tx_hash}`);
        console.log('---');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ metadata
    console.log('\nüìù 2. METADATA –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–ö–£–ü–ö–ò:\n');
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(5);

    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else if (transactions && transactions.length > 0) {
      for (const tx of transactions) {
        console.log(`Transaction ID: ${tx.id}`);
        console.log(`  –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
        console.log(`  –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        
        if (tx.metadata) {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
          console.log(`  Metadata:`, JSON.stringify(metadata, null, 2));
        } else {
          console.log(`  Metadata: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
        console.log('---');
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π ton_farming_data
    console.log('\nüîÑ 3. –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô TON_FARMING_DATA:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const { data: farmingHistory, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', 74)
      .single();

    if (!farmingError && farmingHistory) {
      console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
      console.log(`  farming_balance: ${farmingHistory.farming_balance}`);
      console.log(`  boost_active: ${farmingHistory.boost_active}`);
      console.log(`  boost_package_id: ${farmingHistory.boost_package_id}`);
      console.log(`  created_at: ${new Date(farmingHistory.created_at).toLocaleString()}`);
      console.log(`  updated_at: ${new Date(farmingHistory.updated_at).toLocaleString()}`);
      console.log(`  farming_last_update: ${new Date(farmingHistory.farming_last_update).toLocaleString()}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\n‚öôÔ∏è  4. –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´:\n');
    
    // –°–º–æ—Ç—Ä–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const lastPurchaseTime = transactions && transactions.length > 0 
      ? new Date(transactions[0].created_at)
      : null;
    
    const lastRewardTime = await getLastRewardTime();
    
    if (lastPurchaseTime && lastRewardTime) {
      const timeDiff = lastPurchaseTime.getTime() - lastRewardTime.getTime();
      
      if (timeDiff > 0) {
        console.log('‚úÖ –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –ü–û–°–õ–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${lastPurchaseTime.toLocaleString()}`);
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${lastRewardTime.toLocaleString()}`);
      } else {
        console.log('‚ö†Ô∏è  –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –î–û –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${lastPurchaseTime.toLocaleString()}`);
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${lastRewardTime.toLocaleString()}`);
        console.log('\n  ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ë–´–õ–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –ö –≠–¢–ò–ú –ü–û–ö–£–ü–ö–ê–ú!');
      }
    }

    // 5. –í—ã–≤–æ–¥—ã
    console.log('\nüìä 5. –í–´–í–û–î–´:\n');
    
    if (farmingHistory && parseFloat(farmingHistory.farming_balance) === 0) {
      console.log('‚ùå farming_balance = 0 –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–æ–∫');
      console.log('   –ü—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –°–µ—Ä–≤–µ—Ä –Ω–µ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
      console.log('   2. –ü–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è farming_balance');
      console.log('\n‚úÖ –†–ï–®–ï–ù–ò–ï: –ù—É–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    } else if (farmingHistory && parseFloat(farmingHistory.farming_balance) > 0) {
      console.log('‚úÖ farming_balance –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log(`   –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${farmingHistory.farming_balance} TON`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

async function getLastRewardTime() {
  const { data, error } = await supabase
    .from('transactions')
    .select('created_at')
    .eq('type', 'FARMING_REWARD')
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(1)
    .single();

  return data ? new Date(data.created_at) : null;
}

checkLatestBoostPurchases();