#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!,
  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!
);

console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ò –ü–û–ü–û–õ–ù–ï–ù–ò–ô');
console.log('='.repeat(60));

async function checkRealTransactions() {
  try {
    // 1. –í—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const { data: allTransactions, error: allError } = await supabase
      .from('transactions')
      .select('type')
      .gt('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());

    if (!allError && allTransactions) {
      const typeStats: { [key: string]: number } = {};
      allTransactions.forEach(tx => {
        typeStats[tx.type] = (typeStats[tx.type] || 0) + 1;
      });

      console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:');
      Object.entries(typeStats)
        .sort(([,a], [,b]) => b - a)
        .forEach(([type, count]) => {
          console.log(`   ${type}: ${count}`);
        });
    }

    // 2. –ò—â–µ–º –ª—é–±—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å TON > 0 (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
    console.log('\nüí∞ –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô:');
    
    const { data: tonPositive, error: tonError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, description, metadata, created_at, status')
      .gt('amount_ton', 0.01) // –ë–æ–ª—å—à–µ 0.01 TON
      .neq('type', 'FARMING_REWARD') // –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ—Ö–æ–¥—ã
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(10);

    if (!tonError && tonPositive && tonPositive.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonPositive.length} –∫—Ä—É–ø–Ω—ã—Ö TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:`);
      tonPositive.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Type: ${tx.type}, Amount: ${tx.amount_ton} TON, Status: ${tx.status}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        if (metadata.tx_hash) {
          console.log(`      TX Hash: ${metadata.tx_hash.substring(0, 40)}...`);
        }
      });
    } else {
      console.log('‚ùå –ö—Ä—É–ø–Ω—ã–µ TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ TON –±–∞–ª–∞–Ω—Å–∞–º–∏
    console.log('\nüëë TOP 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û TON –ë–ê–õ–ê–ù–°–£:');
    
    const { data: topUsers, error: topError } = await supabase
      .from('users')
      .select('id, username, balance_ton, ton_boost_package, updated_at')
      .gt('balance_ton', 0)
      .order('balance_ton', { ascending: false })
      .limit(10);

    if (!topError && topUsers) {
      topUsers.forEach(user => {
        console.log(`   User ${user.id} (@${user.username}): ${user.balance_ton} TON, Boost: ${user.ton_boost_package || '–ù–ï–¢'}, Update: ${new Date(user.updated_at).toLocaleString('ru-RU')}`);
      });
    }

    // 4. –ò—â–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User #25 –∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    console.log('\nüéØ –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER #25 –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 30 –î–ù–ï–ô:');
    
    const { data: user25All, error: user25AllError } = await supabase
      .from('transactions')
      .select('id, type, amount_ton, amount_uni, description, status, created_at')
      .eq('user_id', 25)
      .gt('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (!user25AllError && user25All) {
      console.log(`üìã –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25: ${user25All.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      const user25Stats: { [key: string]: number } = {};
      let totalTonIn = 0;
      let totalTonOut = 0;
      
      user25All.forEach(tx => {
        user25Stats[tx.type] = (user25Stats[tx.type] || 0) + 1;
        if (tx.amount_ton) {
          if (parseFloat(tx.amount_ton) > 0) {
            totalTonIn += parseFloat(tx.amount_ton);
          } else {
            totalTonOut += Math.abs(parseFloat(tx.amount_ton));
          }
        }
      });

      console.log('üìä –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25:');
      Object.entries(user25Stats).forEach(([type, count]) => {
        console.log(`   ${type}: ${count}`);
      });
      
      console.log(`üí∞ TON –¥–≤–∏–∂–µ–Ω–∏–µ User #25:`);
      console.log(`   –í—Ö–æ–¥—è—â–∏–µ: +${totalTonIn.toFixed(6)} TON`);
      console.log(`   –ò—Å—Ö–æ–¥—è—â–∏–µ: -${totalTonOut.toFixed(6)} TON`);
      console.log(`   –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: ${(totalTonIn - totalTonOut).toFixed(6)} TON`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      console.log('\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25:');
      user25All.slice(0, 10).forEach(tx => {
        const amount = tx.amount_ton ? `${tx.amount_ton} TON` : (tx.amount_uni ? `${tx.amount_uni} UNI` : '0');
        console.log(`   ${tx.id}: ${tx.type} | ${amount} | ${tx.status} | ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        if (tx.description) {
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        }
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkRealTransactions();
