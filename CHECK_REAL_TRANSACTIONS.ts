/**
 * üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –†–ê–ë–û–ß–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * 
 * –ê–Ω–∞–ª–∏–∑ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥—ã
 */

import { supabase } from './core/supabase';

async function checkRealTransactions() {
  console.log('\nüîç === –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –†–ê–ë–û–ß–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n');
  
  try {
    // 1. –ù–ê–ô–î–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ö–û–¢–û–†–´–ï –ü–û–õ–£–ß–ê–Æ–¢ TON –î–û–•–û–î–´
    console.log('1Ô∏è‚É£ –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON –î–û–•–û–î–ê–ú–ò:');
    console.log('====================================');
    
    const { data: tonIncomes, error: incomeError } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at, description')
      .eq('currency', 'TON')
      .gt('amount', 0)
      .or('description.ilike.%boost%,description.ilike.%farming%')
      .order('created_at', { ascending: false })
      .limit(20);

    if (tonIncomes && tonIncomes.length > 0) {
      console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û ${tonIncomes.length} TON –¥–æ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      const userIds = [...new Set(tonIncomes.map(t => t.user_id))];
      console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.length}`);
      console.log(`üìã User IDs: [${userIds.join(', ')}]`);
      
      tonIncomes.forEach((tx, index) => {
        console.log(`   ${index + 1}. User ${tx.user_id}: +${tx.amount} TON`);
        console.log(`      "${tx.description}"`);
        console.log(`      ${tx.created_at}`);
        console.log('      ---');
      });
    } else {
      console.log('‚ùå TON –¥–æ—Ö–æ–¥—ã –ù–ï –ù–ê–ô–î–ï–ù–´ - —Å–∏—Å—Ç–µ–º–∞ –≤–æ–æ–±—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }

    // 2. –ü–†–û–í–ï–†–ò–ú –ö–û–ù–ö–†–ï–¢–ù–´–• –†–ê–ë–û–ß–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –†–ê–ë–û–ß–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('==========================================');
    
    // –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–µ–º —á—Ç–æ User 25, 287 –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
    const workingUserIds = [25, 287, 186, 224];
    
    for (const userId of workingUserIds) {
      console.log(`\nüîç –ê–ù–ê–õ–ò–ó User ${userId}:`);
      console.log('‚îÄ'.repeat(30));
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ users
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, ton_boost_package, ton_boost_active, ton_farming_balance, ton_farming_rate, balance_ton')
        .eq('id', userId)
        .single();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data
      const { data: farmingData, error: farmingError } = await supabase
        .from('ton_farming_data')
        .select('user_id, boost_active, farming_balance, farming_rate')
        .eq('user_id', userId.toString())
        .single();
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data: recentTON, error: tonError } = await supabase
        .from('transactions')
        .select('type, amount, created_at, description')
        .eq('user_id', userId)
        .eq('currency', 'TON')
        .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
        .order('created_at', { ascending: false });
      
      console.log('üìã –î–ê–ù–ù–´–ï users:');
      if (userData) {
        console.log(`   ton_boost_active: ${userData.ton_boost_active}`);
        console.log(`   ton_farming_balance: ${userData.ton_farming_balance}`);
        console.log(`   balance_ton: ${userData.balance_ton}`);
      } else {
        console.log(`   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤ users`);
      }
      
      console.log('üìã –î–ê–ù–ù–´–ï ton_farming_data:');
      if (farmingData) {
        console.log(`   boost_active: ${farmingData.boost_active}`);
        console.log(`   farming_balance: ${farmingData.farming_balance}`);
        console.log(`   farming_rate: ${farmingData.farming_rate}`);
      } else {
        console.log(`   ‚ùå –ù–ï–¢ –≤ ton_farming_data`);
      }
      
      console.log('üìã –ù–ï–î–ê–í–ù–ò–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      if (recentTON && recentTON.length > 0) {
        console.log(`   ‚úÖ ${recentTON.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞:`);
        recentTON.forEach((tx, index) => {
          console.log(`     ${index + 1}. ${tx.type}: ${tx.amount} TON`);
          console.log(`        ${tx.description}`);
        });
      } else {
        console.log(`   ‚ùå –ù–ï–¢ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞`);
      }
      
      // –í–´–í–û–î –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
      const hasUsersData = userData?.ton_farming_balance && userData.ton_farming_balance !== '0';
      const hasFarmingData = farmingData?.farming_balance && farmingData.farming_balance !== 0;
      const hasRecentIncome = recentTON && recentTON.length > 0;
      
      console.log('üéØ –°–¢–ê–¢–£–°:');
      if (hasRecentIncome) {
        console.log(`   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ - –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Ö–æ–¥—ã`);
        if (hasUsersData && !hasFarmingData) {
          console.log(`   üí° –°–ò–°–¢–ï–ú–ê: users —Ç–∞–±–ª–∏—Ü–∞ (—Å—Ç–∞—Ä–∞—è)`);
        } else if (!hasUsersData && hasFarmingData) {
          console.log(`   üí° –°–ò–°–¢–ï–ú–ê: ton_farming_data —Ç–∞–±–ª–∏—Ü–∞ (–Ω–æ–≤–∞—è)`);
        } else if (hasUsersData && hasFarmingData) {
          console.log(`   üí° –°–ò–°–¢–ï–ú–ê: –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥)`);
        }
      } else {
        console.log(`   ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤`);
      }
    }

    // 3. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–ê–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê
    console.log('\n3Ô∏è‚É£ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´:');
    console.log('================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∫–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    console.log('üîç –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
    
    // –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ TON –¥–æ—Ö–æ–¥—ã –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    const { data: schedulerIncome, error: schedulerError } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at, description, type')
      .eq('currency', 'TON')
      .or('type.eq.TON_BOOST_INCOME,type.eq.FARMING_REWARD')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('created_at', { ascending: false });
    
    if (schedulerIncome && schedulerIncome.length > 0) {
      console.log(`‚úÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –†–ê–ë–û–¢–ê–ï–¢ - ${schedulerIncome.length} –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ —á–∞—Å:`);
      schedulerIncome.forEach((tx, index) => {
        console.log(`   ${index + 1}. User ${tx.user_id}: +${tx.amount} TON (${tx.type})`);
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∫–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      const schedulerUserIds = [...new Set(schedulerIncome.map(t => t.user_id))];
      console.log(`\nüîç –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:`);
      
      for (const userId of schedulerUserIds.slice(0, 3)) { // –ø–µ—Ä–≤—ã–µ 3
        const { data: plannerUser, error } = await supabase
          .from('users')
          .select('ton_farming_balance')
          .eq('id', userId)
          .single();
          
        const { data: plannerFarming, error: pError } = await supabase
          .from('ton_farming_data')
          .select('farming_balance')
          .eq('user_id', userId.toString())
          .single();
        
        const usersBalance = plannerUser?.ton_farming_balance || '0';
        const farmingBalance = plannerFarming?.farming_balance || '0';
        
        console.log(`   User ${userId}:`);
        console.log(`     users.ton_farming_balance: ${usersBalance}`);
        console.log(`     ton_farming_data.farming_balance: ${farmingBalance}`);
        
        if (usersBalance !== '0' && farmingBalance === '0') {
          console.log(`     ‚Üí –ò–°–ü–û–õ–¨–ó–£–ï–¢ users —Ç–∞–±–ª–∏—Ü—É`);
        } else if (usersBalance === '0' && farmingBalance !== '0') {
          console.log(`     ‚Üí –ò–°–ü–û–õ–¨–ó–£–ï–¢ ton_farming_data —Ç–∞–±–ª–∏—Ü—É`);
        }
      }
    } else {
      console.log('‚ùå –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ —á–∞—Å');
    }

    // 4. –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´:');
    console.log('====================');
    console.log('');
    console.log('üéØ –°–ò–°–¢–ï–ú–ê –ö–û–¢–û–†–ê–Ø –†–ê–ë–û–¢–ê–õ–ê –†–ê–ù–¨–®–ï:');
    
    if (tonIncomes && tonIncomes.length > 0) {
      console.log('   ‚úÖ TON –¥–æ—Ö–æ–¥—ã –ï–°–¢–¨ - —Å–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   üí° –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–∞–±–æ—Ç–∞—é—Ç —Ä–∞–±–æ—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    } else {
      console.log('   ‚ùå TON –¥–æ—Ö–æ–¥–æ–≤ –ù–ï–¢ - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª–æ–º–∞–Ω–∞');
    }
    
    console.log('');
    console.log('üîß –ü–õ–ê–ù –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('   1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫');
    console.log('   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å TonFarmingRepository –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É');
    console.log('   3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è User 290 –∏ –¥—Ä—É–≥–∏—Ö');

    console.log('\n‚úÖ === –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
checkRealTransactions();