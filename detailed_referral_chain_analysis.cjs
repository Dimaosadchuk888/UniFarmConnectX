// –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
const http = require('http');
const jwt = require('jsonwebtoken');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
const token = jwt.sign(
  { userId: 184, telegram_id: 184, username: 'test' },
  process.env.JWT_SECRET || 'fallback_secret',
  { expiresIn: '1h' }
);

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function analyzeReferralChain() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¶–ï–ü–û–ß–ö–ò –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô');
  console.log('=' .repeat(60));
  
  try {
    // –ê–Ω–∞–ª–∏–∑ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 186-190
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 186-190:');
    console.log('-'.repeat(50));
    
    for (let userId = 186; userId <= 190; userId++) {
      const user = await makeRequest(`/api/v2/user/${userId}`);
      if (user.data.success) {
        console.log(`‚úÖ User ${userId}: ${user.data.data.username || user.data.data.first_name} (telegram_id: ${user.data.data.telegram_id})`);
        console.log(`   referred_by: ${user.data.data.referred_by || 'null'}`);
        console.log(`   ref_code: ${user.data.data.ref_code || 'null'}`);
      } else {
        console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ REFERRALS:');
    console.log('-'.repeat(50));
    
    const referralsCheck = await makeRequest('/api/v2/referral/184/list');
    console.log('–ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ referrals –¥–ª—è User 184:');
    console.log(JSON.stringify(referralsCheck.data, null, 2));
    
    // –ê–Ω–∞–ª–∏–∑ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç distributeReferralRewards
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ DISTRIBUTEREFERRALREWARDS:');
    console.log('-'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç User 186-190
    const transactions = await makeRequest('/api/v2/transactions?limit=10');
    if (transactions.data.success) {
      const referralTxs = transactions.data.data.transactions
        .filter(t => t.type === 'REFERRAL_REWARD')
        .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${referralTxs.length} REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      referralTxs.forEach((tx, i) => {
        console.log(`  ${i+1}. ${tx.description} (${tx.created_at})`);
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ referred_by
    console.log('\n4Ô∏è‚É£ –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö –ü–û REFERRED_BY:');
    console.log('-'.repeat(50));
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by = 184
    console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by = 184 —á–µ—Ä–µ–∑ API...');
    const searchResult = await makeRequest('/api/v2/referral/184/list');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:');
    console.log(JSON.stringify(searchResult.data, null, 2));
    
    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø:');
    console.log('=' .repeat(60));
    console.log('1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 186-190 –°–£–©–ï–°–¢–í–£–Æ–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('2. –ü–æ–ª–µ referred_by —É —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = null (–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)');
    console.log('3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ REFERRAL_REWARD —Å–æ–∑–¥–∞—é—Ç—Å—è (–Ω–∞–≥—Ä–∞–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç)');
    console.log('4. –¢–∞–±–ª–∏—Ü–∞ referrals –ø—É—Å—Ç–∞ (—Å–≤—è–∑–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)');
    console.log('5. ‚ùå –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: processReferralInline() –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç referred_by');
    console.log('6. ‚ùå distributeReferralRewards() —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É');
    console.log('\nüí° –ì–ò–ü–û–¢–ï–ó–´:');
    console.log('- –û—à–∏–±–∫–∞ –≤ Supabase UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö)');
    console.log('- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è referrals –∑–∞–ø–∏—Å–∏');
    console.log('- –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (string vs number) –≤ referrer.id');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeReferralChain();