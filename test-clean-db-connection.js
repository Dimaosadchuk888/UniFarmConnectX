/**
 * –¢–µ—Å—Ç —á–∏—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º DATABASE_URL
 */

import { pool, db, checkDatabaseConnection } from './core/db.js';

async function testDatabaseConnection() {
  console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const healthCheck = await checkDatabaseConnection();
    console.log('–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', healthCheck.connected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞');
    
    if (!healthCheck.connected) {
      console.error('–û—à–∏–±–∫–∞:', healthCheck.error);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbInfo = await pool.query(`
      SELECT 
        current_database() as database_name,
        inet_server_addr() as server_address,
        version() as postgres_version,
        current_user as current_user
    `);

    const info = dbInfo.rows[0];
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', info.database_name);
    console.log('–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:', info.server_address || 'localhost');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', info.current_user);
    console.log('–í–µ—Ä—Å–∏—è PostgreSQL:', info.postgres_version.split(',')[0]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    const tablesCheck = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'users'
    `);

    if (tablesCheck.rows.length > 0) {
      console.log('\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
      const usersStructure = await pool.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'users' 
        ORDER BY ordinal_position
      `);
      
      console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
      usersStructure.rows.forEach(col => {
        console.log(`  ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? '(NOT NULL)' : ''}`);
      });
      
    } else {
      console.log('\n‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
      
      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      await pool.query(`
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          telegram_id BIGINT UNIQUE NOT NULL,
          username TEXT,
          first_name TEXT,
          last_name TEXT,
          language_code TEXT DEFAULT 'en',
          is_premium BOOLEAN DEFAULT FALSE,
          uni_balance DECIMAL(15,2) DEFAULT 0,
          ton_balance DECIMAL(15,8) DEFAULT 0,
          mining_power INTEGER DEFAULT 100,
          ref_code TEXT UNIQUE,
          parent_ref_code TEXT,
          referrals_count INTEGER DEFAULT 0,
          total_earned DECIMAL(15,2) DEFAULT 0,
          last_claim TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
    }

    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è
    console.log('\nüß™ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    
    const testResult = await pool.query('SELECT NOW() as current_time, 1 + 1 as test_calc');
    console.log('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', testResult.rows[0].current_time);
    console.log('–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:', testResult.rows[0].test_calc);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  } finally {
    await pool.end();
  }
}

testDatabaseConnection();