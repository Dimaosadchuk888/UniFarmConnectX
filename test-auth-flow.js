/**
 * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç /api/v2/auth/telegram –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ API –≤—ã–∑–æ–≤—ã
 */

import crypto from 'crypto';
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001/api/v2';
const BOT_TOKEN = '7980427501:AAHdia3LusU9dk2aRvhXgmj9Ozo08nR0Gug';

function generateValidInitData(user, botToken) {
  const authDate = Math.floor(Date.now() / 1000);
  
  const initDataParams = [
    `auth_date=${authDate}`,
    `user=${encodeURIComponent(JSON.stringify(user))}`,
    `query_id=test_query_${Date.now()}`
  ];
  
  const dataCheckString = initDataParams.sort().join('\n');
  const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
  const hash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
  
  return [...initDataParams, `hash=${hash}`].join('&');
}

async function testTelegramAuth() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram...');
  
  const testUser = {
    id: Math.floor(Math.random() * 1000000) + 100000,
    username: `testuser_${Date.now()}`,
    first_name: 'Test User',
    language_code: 'ru'
  };
  
  const initData = generateValidInitData(testUser, BOT_TOKEN);
  
  try {
    console.log('–í—ã–∑–æ–≤ /api/v2/auth/telegram...');
    const response = await fetch(`${API_BASE}/auth/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData })
    });
    
    const result = await response.json();
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success && result.token) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return { success: true, token: result.token, user: result.user };
    } else {
      console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞');
      return { success: false, error: result.error };
    }
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function testProtectedEndpoint(token, endpoint) {
  console.log(`üîí –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint: ${endpoint}`);
  
  try {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    console.log(`–°—Ç–∞—Ç—É—Å: ${response.status}`);
    if (response.status === 200) {
      console.log('‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º');
      return true;
    } else {
      console.log('‚ùå Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', result.error || 'Unknown error');
      return false;
    }
  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

async function runFullAuthTest() {
  console.log('üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò TELEGRAM');
  console.log('=' .repeat(50));
  
  // –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const authResult = await testTelegramAuth();
  
  if (!authResult.success) {
    console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    return;
  }
  
  console.log('\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
  console.log(`Token: ${authResult.token.substring(0, 20)}...`);
  
  // –¢–µ—Å—Ç 2: –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints
  console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints...');
  
  const protectedEndpoints = ['/me', '/wallet', '/referrals'];
  let workingEndpoints = 0;
  
  for (const endpoint of protectedEndpoints) {
    const works = await testProtectedEndpoint(authResult.token, endpoint);
    if (works) workingEndpoints++;
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç`);
  console.log(`üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints: ${workingEndpoints}/${protectedEndpoints.length} —Ä–∞–±–æ—Ç–∞—é—Ç`);
  
  if (workingEndpoints === protectedEndpoints.length) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞.');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
  }
}

export { runFullAuthTest };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (import.meta.url === `file://${process.argv[1]}`) {
  runFullAuthTest().catch(console.error);
}