// –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const fetch = require('node-fetch');

async function testReferralEndpoint() {
  console.log('=== –¢–ï–°–¢ –≠–ù–î–ü–û–ò–ù–¢–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  
  const testTelegramId = Date.now();
  const testUsername = `test_${testTelegramId}`;
  const refCode = 'REF_1752755835358_yjrusv';
  
  console.log('üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:');
  console.log(`   telegram_id: ${testTelegramId}`);
  console.log(`   username: ${testUsername}`);
  console.log(`   refBy: ${refCode}`);
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
    
    const requestBody = {
      direct_registration: true,
      telegram_id: testTelegramId,
      username: testUsername,
      first_name: "Test User",
      refBy: refCode
    };
    
    console.log('üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody, null, 2));
    
    const response = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });
    
    console.log(`\nüì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);
    
    const responseText = await response.text();
    console.log(`   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} –±–∞–π—Ç`);
    
    let responseData;
    try {
      responseData = JSON.parse(responseText);
      console.log('\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON:');
      console.log(`   success: ${responseData.success}`);
      
      if (responseData.success) {
        console.log(`   user_id: ${responseData.data?.user?.id}`);
        console.log(`   username: ${responseData.data?.user?.username}`);
        console.log(`   referred_by: ${responseData.data?.user?.referred_by}`);
        console.log(`   isNewUser: ${responseData.data?.isNewUser}`);
        
        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä–∏–º –≤ –ë–î
        if (responseData.data?.user?.id) {
          console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î...');
          
          const { createClient } = require('@supabase/supabase-js');
          require('dotenv').config();
          
          const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { data: user, error: userError } = await supabase
            .from('users')
            .select('id, username, referred_by, created_at')
            .eq('id', responseData.data.user.id)
            .single();
          
          if (userError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', userError.message);
          } else {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: ID=${user.id}, referred_by=${user.referred_by}`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º referrals
          const { data: referrals, error: referralError } = await supabase
            .from('referrals')
            .select('*')
            .eq('user_id', responseData.data.user.id);
          
          if (referralError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referrals –≤ –ë–î:', referralError.message);
          } else {
            console.log(`‚úÖ Referrals –≤ –ë–î: ${referrals.length} –∑–∞–ø–∏—Å–µ–π`);
          }
          
          // –û—á–∏—Å—Ç–∫–∞
          console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
          await supabase.from('referrals').delete().eq('user_id', responseData.data.user.id);
          await supabase.from('users').delete().eq('id', responseData.data.user.id);
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        }
      } else {
        console.log(`   error: ${responseData.error}`);
      }
    } catch (parseError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
      console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseText.substring(0, 500));
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

testReferralEndpoint().catch(console.error);