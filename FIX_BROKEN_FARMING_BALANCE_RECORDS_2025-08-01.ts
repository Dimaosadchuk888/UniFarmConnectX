// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ farming_balance –¥–ª—è —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
import { supabase } from './core/supabase';

async function fixBrokenFarmingBalanceRecords() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï FARMING_BALANCE –î–õ–Ø –°–õ–û–ú–ê–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô');
  console.log('=' .repeat(90));

  console.log('\nüìä –ü–û–ò–°–ö –°–õ–û–ú–ê–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô (farming_balance = 0 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤):');
  console.log('-'.repeat(80));

  // 1. –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å farming_balance = 0 —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
  const { data: brokenRecords } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, created_at, boost_active')
    .eq('farming_balance', '0')
    .gte('created_at', '2025-08-01')
    .order('created_at', { ascending: false });

  if (!brokenRecords || brokenRecords.length === 0) {
    console.log('‚úÖ –°–ª–æ–º–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return;
  }

  console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${brokenRecords.length} —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:`);
  brokenRecords.forEach((record, i) => {
    console.log(`${i + 1}. User ${record.user_id}: farming_balance = ${record.farming_balance}, boost_active = ${record.boost_active}, —Å–æ–∑–¥–∞–Ω–æ = ${record.created_at}`);
  });

  console.log('\nüîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï FARMING_BALANCE –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  console.log('-'.repeat(80));

  const fixedUsers = [];
  const skippedUsers = [];

  for (const record of brokenRecords) {
    const userId = record.user_id;
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ User ${userId}:`);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const { data: deposits } = await supabase
      .from('transactions')
      .select('amount_ton, created_at, type, description')
      .eq('user_id', userId)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD'])
      .gte('amount_ton', '0.1')
      .order('created_at', { ascending: false });

    if (deposits && deposits.length > 0) {
      const totalTon = deposits.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
      console.log(`   üí∞ –ù–∞–π–¥–µ–Ω–æ ${deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤, —Å—É–º–º–∞: ${totalTon.toFixed(3)} TON`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      const { error: updateError } = await supabase
        .from('ton_farming_data')
        .update({
          farming_balance: totalTon.toString(),
          boost_active: totalTon > 0,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId);

      if (updateError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateError.message}`);
        skippedUsers.push({ userId, error: updateError.message });
      } else {
        console.log(`   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: farming_balance –æ–±–Ω–æ–≤–ª–µ–Ω —Å 0 –Ω–∞ ${totalTon.toFixed(3)} TON`);
        fixedUsers.push({ userId, oldBalance: '0', newBalance: totalTon.toFixed(3) });
      }
    } else {
      console.log(`   üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤, farming_balance = 0 –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
      skippedUsers.push({ userId, error: '–ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤' });
    }
  }

  // 2. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(90));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø');
  console.log('='.repeat(90));

  console.log(`\n‚úÖ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: ${fixedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  if (fixedUsers.length > 0) {
    fixedUsers.forEach((user, i) => {
      console.log(`${i + 1}. User ${user.userId}: ${user.oldBalance} ‚Üí ${user.newBalance} TON`);
    });
  }

  console.log(`\n‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–û: ${skippedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  if (skippedUsers.length > 0) {
    skippedUsers.forEach((user, i) => {
      console.log(`${i + 1}. User ${user.userId}: ${user.error}`);
    });
  }

  // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –õ–û–ì–ò–ö–ò getByUserId():');
  console.log('-'.repeat(80));

  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
  const testUserId = 308; // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
  console.log(`\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è User ${testUserId}:`);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
  const { error: depositError } = await supabase
    .from('transactions')
    .insert([{
      user_id: testUserId,
      type: 'DEPOSIT',
      amount_ton: '2.5',
      amount_uni: '0',
      description: 'Test TON deposit for farming balance calculation',
      metadata: { test: true },
      created_at: new Date().toISOString()
    }]);

  if (depositError) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositError.message}`);
  } else {
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç 2.5 TON –¥–ª—è User ${testUserId}`);
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    await supabase
      .from('ton_farming_data')
      .delete()
      .eq('user_id', testUserId);

    console.log(`   üîÑ –ó–∞–ø–∏—Å—å –¥–ª—è User ${testUserId} —É–¥–∞–ª–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏`);
  }

  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ - getByUserId() —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç farming_balance –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º');
  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è TON Boost –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ getByUserId() –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏!');
}

fixBrokenFarmingBalanceRecords().catch(console.error);