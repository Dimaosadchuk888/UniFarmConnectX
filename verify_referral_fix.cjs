// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const http = require('http');
const jwt = require('jsonwebtoken');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
const token = jwt.sign(
  { userId: 184, telegram_id: 184, username: 'test' },
  process.env.JWT_SECRET || 'fallback_secret',
  { expiresIn: '1h' }
);

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function verifyReferralFix() {
  console.log('üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–ö–ò –í processReferralInline():');
    console.log('-'.repeat(50));
    
    console.log('üö® –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê –í modules/auth/service.ts —Å—Ç—Ä–æ–∫–∞ 84:');
    console.log('   referred_user_id: newUserId,  // ‚Üê –î–£–ë–õ–ò–†–£–ï–¢ user_id!');
    console.log('   user_id: newUserId,          // ‚Üê –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ!');
    console.log('');
    console.log('üí° –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨:');
    console.log('   user_id: newUserId,          // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   referred_user_id: newUserId, // ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (—Ç–æ—Ç –∂–µ —Å–∞–º—ã–π)');
    console.log('   inviter_id: referrer.id,     // ID —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª');
    console.log('');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã referrals
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –¢–ê–ë–õ–ò–¶–´ REFERRALS:');
    console.log('-'.repeat(50));
    
    const referrals = await makeRequest('/api/v2/referral/184/list');
    console.log('–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ referrals:');
    console.log(JSON.stringify(referrals.data, null, 2));
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤ distributeReferralRewards
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ù–ê–ì–†–ê–î:');
    console.log('-'.repeat(50));
    
    console.log('üîç distributeReferralRewards() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç buildReferrerChain():');
    console.log('   - –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º referred_by');
    console.log('   - –ï—Å–ª–∏ referred_by = null, —Ü–µ–ø–æ—á–∫–∞ –ø—É—Å—Ç–∞');
    console.log('   - –ù–∞–≥—Ä–∞–¥—ã –ù–ï –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ—Ç –ø—É—Å—Ç–æ–π —Ü–µ–ø–æ—á–∫–∏');
    console.log('');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó PHANTOM –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactions = await makeRequest('/api/v2/transactions?limit=5');
    if (transactions.data.success) {
      const referralTxs = transactions.data.data.transactions
        .filter(t => t.type === 'REFERRAL_REWARD')
        .slice(0, 3);
      
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      referralTxs.forEach((tx, i) => {
        console.log(`  ${i+1}. ${tx.description} (${tx.created_at})`);
      });
      
      console.log('\nüéØ –¢–ï–û–†–ò–Ø: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 186-190');
      console.log('   - –û–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ ton_farming_data');
      console.log('   - –ù–û –∏–º–µ—é—Ç referred_by = 184 (–∑–∞–ø–æ–ª–Ω–µ–Ω–æ)');
      console.log('   - distributeReferralRewards() –Ω–∞—Ö–æ–¥–∏—Ç –∏—Ö —á–µ—Ä–µ–∑ buildReferrerChain()');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5Ô∏è‚É£ –ü–†–û–¶–ï–°–° –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('-'.repeat(50));
    
    console.log('üîç –¶–µ–ø–æ—á–∫–∞ –≤—ã–∑–æ–≤–æ–≤:');
    console.log('   1. registerDirectFromTelegramUser()');
    console.log('   2. ‚Üí findOrCreateFromTelegram()');
    console.log('   3. ‚Üí createUser() (—Å referred_by: null)');
    console.log('   4. ‚Üí processReferralInline()');
    console.log('   5. ‚Üí Supabase UPDATE referred_by (–°–ë–û–ô!)');
    console.log('   6. ‚Üí Supabase INSERT referrals (–°–ë–û–ô!)');
    console.log('');
    
    console.log('üéØ –í–´–í–û–î–´:');
    console.log('=' .repeat(60));
    console.log('1. ‚ùå processReferralInline() –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('2. ‚ùå Supabase –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–±–æ—è—Ç - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
    console.log('3. ‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ referred_by');
    console.log('4. ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 186-190 —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('5. ‚úÖ distributeReferralRewards() —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö referred_by');
    console.log('');
    console.log('üîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ processReferralInline()');
    console.log('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Supabase RLS');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase –æ—à–∏–±–æ–∫');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
}

verifyReferralFix();