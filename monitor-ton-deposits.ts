/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –æ—Ç–ø—Ä–∞–≤–∫–∞ -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ -> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ -> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

import { supabase } from './core/supabase';
import { createLogger } from './core/logger';

const logger = createLogger('TON_DEPOSIT_MONITOR');

interface DepositEvent {
  timestamp: string;
  stage: 'WALLET_SEND' | 'BACKEND_RECEIVE' | 'DB_SAVE' | 'NOTIFICATION_SENT';
  boc?: string;
  userId?: number;
  amount?: number;
  txId?: number;
  details?: any;
}

class TonDepositMonitor {
  private events: DepositEvent[] = [];
  private duplicateTracker = new Map<string, number>();

  constructor() {
    this.startMonitoring();
  }

  private startMonitoring() {
    logger.info('üîç TON Deposit Monitor –∑–∞–ø—É—â–µ–Ω');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    this.subscribeToTransactions();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è BOC –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => this.checkForDuplicates(), 30000);
  }

  private subscribeToTransactions() {
    const subscription = supabase
      .channel('ton_deposits')
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'transactions',
        filter: 'type=in.(TON_DEPOSIT,DEPOSIT)'
      }, (payload) => {
        this.onNewTransaction(payload.new as any);
      })
      .subscribe();

    logger.info('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞');
  }

  private onNewTransaction(transaction: any) {
    const boc = transaction.tx_hash_unique;
    const userId = transaction.user_id;
    const amount = parseFloat(transaction.amount_ton || '0');

    logger.info('üÜï –ù–æ–≤—ã–π TON –¥–µ–ø–æ–∑–∏—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', {
      id: transaction.id,
      userId,
      amount,
      boc: boc?.substring(0, 30) + '...',
      time: transaction.created_at
    });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    this.addEvent({
      timestamp: new Date().toISOString(),
      stage: 'DB_SAVE',
      boc,
      userId,
      amount,
      txId: transaction.id,
      details: transaction
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (boc) {
      const count = this.duplicateTracker.get(boc) || 0;
      this.duplicateTracker.set(boc, count + 1);

      if (count > 0) {
        logger.error('üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!', {
          boc: boc.substring(0, 50) + '...',
          count: count + 1,
          userId,
          transactionId: transaction.id
        });

        this.reportDuplicate(boc, count + 1, transaction);
      }
    }
  }

  private addEvent(event: DepositEvent) {
    this.events.push(event);
    
    // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–±—ã—Ç–∏–π
    if (this.events.length > 100) {
      this.events = this.events.slice(-100);
    }
  }

  private async checkForDuplicates() {
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è BOC —Ö–µ—à–µ–π...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è BOC –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
      
      const { data: recentTransactions, error } = await supabase
        .from('transactions')
        .select('id, user_id, tx_hash_unique, amount_ton, created_at')
        .gte('created_at', oneHourAgo)
        .not('tx_hash_unique', 'is', null)
        .in('type', ['TON_DEPOSIT', 'DEPOSIT'])
        .order('created_at', { ascending: false });

      if (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ BOC —Ö–µ—à–∞–º
      const bocGroups = new Map<string, any[]>();
      
      recentTransactions?.forEach(tx => {
        const boc = tx.tx_hash_unique;
        if (!bocGroups.has(boc)) {
          bocGroups.set(boc, []);
        }
        bocGroups.get(boc)!.push(tx);
      });

      // –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      let duplicatesFound = 0;
      bocGroups.forEach((transactions, boc) => {
        if (transactions.length > 1) {
          duplicatesFound++;
          logger.error('üö® –î–£–ë–õ–ò–†–£–Æ–©–ò–ô–°–Ø BOC:', {
            boc: boc.substring(0, 50) + '...',
            count: transactions.length,
            transactions: transactions.map(tx => ({
              id: tx.id,
              userId: tx.user_id,
              amount: tx.amount_ton,
              time: tx.created_at
            }))
          });
        }
      });

      if (duplicatesFound === 0) {
        logger.info('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      } else {
        logger.error(`üö® –ù–∞–π–¥–µ–Ω–æ ${duplicatesFound} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è BOC —Ö–µ—à–µ–π!`);
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  private reportDuplicate(boc: string, count: number, transaction: any) {
    console.log('\nüö® === –û–¢–ß–ï–¢ –û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ò ===');
    console.log(`üì¶ BOC: ${boc.substring(0, 60)}...`);
    console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π: ${count}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${transaction.user_id}`);
    console.log(`üí∞ –°—É–º–º–∞: ${transaction.amount_ton} TON`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${transaction.created_at}`);
    console.log(`üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transaction.id}`);
    console.log('================================\n');
  }

  public getEvents(stage?: string): DepositEvent[] {
    if (stage) {
      return this.events.filter(e => e.stage === stage);
    }
    return this.events;
  }

  public getDuplicateStats() {
    const stats = new Map<string, number>();
    this.duplicateTracker.forEach((count, boc) => {
      if (count > 1) {
        stats.set(boc.substring(0, 50) + '...', count);
      }
    });
    return stats;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
const monitor = new TonDepositMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { monitor as tonDepositMonitor };

// –ó–∞–ø—É—Å–∫ –≤ standalone —Ä–µ–∂–∏–º–µ
if (require.main === module) {
  console.log('üîç TON Deposit Monitor –∑–∞–ø—É—â–µ–Ω –≤ standalone —Ä–µ–∂–∏–º–µ');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    const duplicates = monitor.getDuplicateStats();
    if (duplicates.size > 0) {
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:');
      duplicates.forEach((count, boc) => {
        console.log(`  ${boc}: ${count} –¥—É–±–ª–µ–π`);
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
  }, 60000);

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', () => {
    console.log('\nüõë TON Deposit Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
}