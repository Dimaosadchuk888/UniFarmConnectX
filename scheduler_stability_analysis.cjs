const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function schedulerStabilityAnalysis() {
  console.log('=== –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
    console.log('üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public');
    
    if (tablesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', tablesError);
      return;
    }
    
    const tableNames = tables?.map(t => t.table_name) || [];
    console.log(`üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${tableNames.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    const requiredTables = ['transactions', 'users', 'ton_farming_data'];
    const missingTables = requiredTables.filter(table => !tableNames.includes(table));
    
    if (missingTables.length > 0) {
      console.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(', ')}`);
    } else {
      console.log('‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (tableNames.includes('transactions')) {
      console.log('\nüîç 2. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      const { data: transactionTypes, error: typesError } = await supabase
        .from('transactions')
        .select('type')
        .limit(1000);
        
      if (typesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', typesError);
      } else {
        const uniqueTypes = [...new Set(transactionTypes?.map(t => t.type) || [])];
        console.log(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${uniqueTypes.join(', ')}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è TON_DEPOSIT
        if (uniqueTypes.includes('TON_DEPOSIT')) {
          console.log('‚úÖ TON_DEPOSIT —Ç–∏–ø –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ');
        } else {
          console.log('‚ùå TON_DEPOSIT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
        for (const type of uniqueTypes) {
          const { count, error: countError } = await supabase
            .from('transactions')
            .select('*', { count: 'exact', head: true })
            .eq('type', type);
            
          if (!countError) {
            console.log(`   ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          }
        }
      }
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
    console.log('\nüîç 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
    
    const { data: recentTransactions, error: recentError } = await supabase
      .from('transactions')
      .select('id, user_id, type, created_at, currency')
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: true })
      .limit(200);
      
    if (recentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError);
    } else {
      console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞: ${recentTransactions?.length || 0}`);
      
      if (recentTransactions && recentTransactions.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        const userTransactions = {};
        
        recentTransactions.forEach(tx => {
          if (!userTransactions[tx.user_id]) {
            userTransactions[tx.user_id] = [];
          }
          userTransactions[tx.user_id].push(tx);
        });
        
        console.log('‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
        
        Object.entries(userTransactions).forEach(([userId, transactions]) => {
          if (transactions.length > 1) {
            const intervals = [];
            for (let i = 1; i < transactions.length; i++) {
              const prev = new Date(transactions[i-1].created_at);
              const curr = new Date(transactions[i].created_at);
              const intervalMinutes = (curr - prev) / (1000 * 60);
              intervals.push(intervalMinutes);
            }
            
            const avgInterval = (intervals.reduce((sum, val) => sum + val, 0) / intervals.length).toFixed(2);
            const minInterval = Math.min(...intervals).toFixed(2);
            const maxInterval = Math.max(...intervals).toFixed(2);
            
            console.log(`   User ${userId}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–∏–Ω/—Å—Ä–µ–¥/–º–∞–∫—Å: ${minInterval}/${avgInterval}/${maxInterval} –º–∏–Ω`);
          }
        });
        
        // –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ —á–∞—Å—Ç—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        console.log('\nüö® –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ —á–∞—Å—Ç—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª <2 –º–∏–Ω—É—Ç):');
        
        Object.entries(userTransactions).forEach(([userId, transactions]) => {
          const fastTransactions = [];
          for (let i = 1; i < transactions.length; i++) {
            const prev = new Date(transactions[i-1].created_at);
            const curr = new Date(transactions[i].created_at);
            const intervalMinutes = (curr - prev) / (1000 * 60);
            
            if (intervalMinutes < 2) {
              fastTransactions.push({
                interval: intervalMinutes.toFixed(2),
                txId: transactions[i].id,
                type: transactions[i].type,
                timestamp: transactions[i].created_at
              });
            }
          }
          
          if (fastTransactions.length > 0) {
            console.log(`   User ${userId}: ${fastTransactions.length} –±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
            fastTransactions.slice(0, 5).forEach(tx => {
              console.log(`     TX ${tx.txId}: +${tx.interval} –º–∏–Ω, —Ç–∏–ø: ${tx.type}`);
            });
          }
        });
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüîç 4. –ê–Ω–∞–ª–∏–∑ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    // –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –±–ª–æ–∫—á–µ–π–Ω —Ö–µ—à–∞–º–∏
    const { data: blockchainTxs, error: blockchainError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, metadata, created_at')
      .not('metadata', 'is', null)
      .limit(50);
      
    if (blockchainError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', blockchainError);
    } else {
      console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å metadata: ${blockchainTxs?.length || 0}`);
      
      let tonDepositCount = 0;
      let blockchainHashCount = 0;
      
      blockchainTxs?.forEach(tx => {
        if (tx.type === 'TON_DEPOSIT' || (tx.metadata && tx.metadata.blockchain_hash)) {
          if (tx.type === 'TON_DEPOSIT') tonDepositCount++;
          if (tx.metadata && tx.metadata.blockchain_hash) blockchainHashCount++;
          
          console.log(`   TX ${tx.id}: ${tx.type}, amount: ${tx.amount}, hash: ${tx.metadata?.blockchain_hash || '–Ω–µ—Ç'}`);
        }
      });
      
      console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      console.log(`   TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonDepositCount}`);
      console.log(`   –° blockchain_hash: ${blockchainHashCount}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ d1077cd0
    console.log('\nüîç 5. –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ d1077cd0...');
    
    const searchHashes = [
      'd1077cd0bad69b623a06fe24dd848ba5ed5b25f98655a0ca51466005f53b8b2b',
      'd1077cd0',
      'bad69b623a06fe24dd848ba5ed5b25f98655a0ca51466005f53b8b2b'
    ];
    
    for (const hash of searchHashes) {
      const { data: hashTx, error: hashError } = await supabase
        .from('transactions')
        .select('*')
        .ilike('metadata->>blockchain_hash', `%${hash}%`);
        
      if (!hashError && hashTx && hashTx.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ö–µ—à–µ–º ${hash}:`);
        hashTx.forEach(tx => {
          console.log(`   TX ${tx.id}: User ${tx.user_id}, ${tx.amount} ${tx.currency}, ${tx.created_at}`);
        });
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ User 228
    const { data: user228Txs, error: user228Error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 228)
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (!user228Error && user228Txs) {
      console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 228:`);
      user228Txs.forEach(tx => {
        console.log(`   TX ${tx.id}: ${tx.type}, ${tx.amount} ${tx.currency}, ${tx.created_at}`);
      });
    }
    
    // 6. –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ production
    console.log('\nüîç 6. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤...');
    
    // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    const { data: farmingRewards, error: farmingError } = await supabase
      .from('transactions')
      .select('created_at, user_id, type, currency')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: true });
      
    if (!farmingError && farmingRewards && farmingRewards.length > 0) {
      // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É farming –Ω–∞–≥—Ä–∞–¥–∞–º–∏
      const timeGaps = [];
      for (let i = 1; i < farmingRewards.length; i++) {
        const prev = new Date(farmingRewards[i-1].created_at);
        const curr = new Date(farmingRewards[i].created_at);
        const gapMinutes = (curr - prev) / (1000 * 60);
        timeGaps.push(gapMinutes);
      }
      
      if (timeGaps.length > 0) {
        const avgGap = (timeGaps.reduce((sum, val) => sum + val, 0) / timeGaps.length).toFixed(2);
        const minGap = Math.min(...timeGaps).toFixed(2);
        const maxGap = Math.max(...timeGaps).toFixed(2);
        
        console.log(`‚è±Ô∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã FARMING_REWARD:`);
        console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minGap} –º–∏–Ω—É—Ç`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–π: ${avgGap} –º–∏–Ω—É—Ç`);
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxGap} –º–∏–Ω—É—Ç`);
        console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: ~5.00 –º–∏–Ω—É—Ç`);
        
        if (parseFloat(avgGap) < 4 || parseFloat(avgGap) > 6) {
          console.log(`üö® –ê–ù–û–ú–ê–õ–ò–Ø: –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ${avgGap} –º–∏–Ω—É—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö 5 –º–∏–Ω—É—Ç`);
        } else {
          console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –Ω–æ—Ä–º–µ`);
        }
      }
    }
    
    console.log('\n=== –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í –ó–ê–í–ï–†–®–ï–ù ===');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

schedulerStabilityAnalysis();