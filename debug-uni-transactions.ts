/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á–µ–º—É –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
 */

import { UnifiedTransactionService } from './core/TransactionService';
import { supabase } from './core/supabase';

async function debugUniTransactions() {
  console.log('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê UNI –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n');

  const userId = 184; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ª–æ–≥–æ–≤
  const transactionService = UnifiedTransactionService.getInstance();

  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // 1. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î - –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n1Ô∏è‚É£ –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° - –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const { data: allTransactions, error: allError } = await supabase
      .from('transactions')
      .select('id, type, currency, amount, amount_uni, amount_ton, description, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);

    if (allError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      allTransactions?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, Type: ${tx.type}, Currency: ${tx.currency}, Amount: ${tx.amount}, Amount_UNI: ${tx.amount_uni}, Amount_TON: ${tx.amount_ton}`);
      });
    }

    // 2. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ UNI
    console.log('\n2Ô∏è‚É£ –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° - –¢–û–õ–¨–ö–û UNI:');
    const { data: uniTransactions, error: uniError } = await supabase
      .from('transactions')
      .select('id, type, currency, amount, amount_uni, amount_ton, description, created_at')
      .eq('user_id', userId)
      .eq('currency', 'UNI')
      .order('created_at', { ascending: false })
      .limit(10);

    if (uniError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', uniError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniTransactions?.length || 0} UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      uniTransactions?.forEach((tx, index) => {
        console.log(`  ${index + 1}. ID: ${tx.id}, Type: ${tx.type}, Currency: ${tx.currency}, Amount: ${tx.amount}, Amount_UNI: ${tx.amount_uni}`);
      });
    }

    // 3. –ß–µ—Ä–µ–∑ UnifiedTransactionService - ALL
    console.log('\n3Ô∏è‚É£ –ß–ï–†–ï–ó –°–ï–†–í–ò–° - –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const allResult = await transactionService.getUserTransactions(userId, 1, 10, { currency: 'ALL' });
    console.log(`‚úÖ –ß–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (ALL): ${allResult.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    allResult.transactions.forEach((tx, index) => {
      console.log(`  ${index + 1}. ID: ${tx.id}, Type: ${tx.type}, Currency: ${tx.currency}, Amount: ${tx.amount}`);
    });

    // 4. –ß–µ—Ä–µ–∑ UnifiedTransactionService - UNI
    console.log('\n4Ô∏è‚É£ –ß–ï–†–ï–ó –°–ï–†–í–ò–° - –¢–û–õ–¨–ö–û UNI:');
    const uniResult = await transactionService.getUserTransactions(userId, 1, 10, { currency: 'UNI' });
    console.log(`‚úÖ –ß–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (UNI): ${uniResult.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    uniResult.transactions.forEach((tx, index) => {
      console.log(`  ${index + 1}. ID: ${tx.id}, Type: ${tx.type}, Currency: ${tx.currency}, Amount: ${tx.amount}`);
    });

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è currency
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–õ–Ø CURRENCY:');
    const { data: currencyAnalysis, error: currencyError } = await supabase
      .from('transactions')
      .select('currency, count()')
      .eq('user_id', userId)
      .groupBy('currency');

    if (!currencyError && currencyAnalysis) {
      console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–ª—é—Ç–∞–º:');
      currencyAnalysis.forEach(row => {
        console.log(`  ${row.currency || 'NULL'}: ${row.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –∑–∞–ø–∏—Å–µ–π
    console.log('\n6Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï 20 –ó–ê–ü–ò–°–ï–ô (–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑):');
    const { data: recentTransactions, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(20);

    if (!recentError && recentTransactions) {
      recentTransactions.forEach((tx, index) => {
        const hasUni = parseFloat(tx.amount_uni || '0') > 0;
        const hasTon = parseFloat(tx.amount_ton || '0') > 0;
        console.log(`  ${index + 1}. [${tx.id}] ${tx.type} | Currency: "${tx.currency}" | Amount: ${tx.amount} | UNI: ${tx.amount_uni} (${hasUni ? 'YES' : 'NO'}) | TON: ${tx.amount_ton} (${hasTon ? 'YES' : 'NO'})`);
      });
    }

    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('1. –°—Ä–∞–≤–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –º–µ–∂–¥—É –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Å–µ—Ä–≤–∏—Å–æ–º');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è "currency"');
    console.log('3. –ï—Å–ª–∏ service –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—å—à–µ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ TransactionService.ts:262-264');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
debugUniTransactions().then(() => {
  console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});