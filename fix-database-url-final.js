/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ DATABASE_URL –¥–ª—è —Ä–∞–±–æ—á–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ DATABASE_URL...');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const dbParams = {
  host: process.env.PGHOST,
  user: process.env.PGUSER,
  database: process.env.PGDATABASE,
  password: process.env.PGPASSWORD,
  port: process.env.PGPORT || 5432
};

console.log(`–•–æ—Å—Ç: ${dbParams.host}`);
console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbParams.user}`);
console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbParams.database}`);
console.log(`–ü–æ—Ä—Ç: ${dbParams.port}`);

// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL
const correctDatabaseUrl = `postgresql://${dbParams.user}:${dbParams.password}@${dbParams.host}:${dbParams.port}/${dbParams.database}?sslmode=require`;

console.log(`\n–¢–µ–∫—É—â–∏–π DATABASE_URL: ${process.env.DATABASE_URL}`);
console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL: ${correctDatabaseUrl}`);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
process.env.DATABASE_URL = correctDatabaseUrl;

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
import { Pool } from 'pg';

const pool = new Pool({
  connectionString: correctDatabaseUrl
});

async function testCorrectUrl() {
  try {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ DATABASE_URL...');
    
    const result = await pool.query(`
      SELECT 
        current_database() as db_name,
        count(*) as table_count
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    
    const info = result.rows[0];
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DATABASE_URL —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${info.db_name}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: ${info.table_count}`);
    
    return {
      success: true,
      database: info.db_name,
      tables: info.table_count,
      url: correctDatabaseUrl
    };
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å DATABASE_URL: ${error.message}`);
    return { success: false, error: error.message };
  } finally {
    await pool.end();
  }
}

testCorrectUrl()
  .then(result => {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø DATABASE_URL:');
    console.log(JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log('\n‚úÖ DATABASE_URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –µ–¥–∏–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } else {
      console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–≤—ã–º DATABASE_URL');
    }
    
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });