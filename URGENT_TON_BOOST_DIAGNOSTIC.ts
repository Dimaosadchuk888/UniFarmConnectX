#!/usr/bin/env tsx

/**
 * üö® –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –î–ï–ü–û–ó–ò–¢–û–í
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É–¥–∞ –ø–æ–ø–∞–ª–∏ –Ω–æ–≤—ã–µ TON Boost –ø–æ–∫—É–ø–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
 * –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function urgentDiagnostic() {
  console.log('üö® –°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('=' .repeat(60));
  
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –ù–û–í–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å...');
    console.log(`–ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞: ${oneHourAgo} - ${new Date().toISOString()}`);
    
    const { data: recentTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', oneHourAgo)
      .or('type.eq.BOOST_PURCHASE,description.ilike.%boost%,description.ilike.%TON%')
      .order('created_at', { ascending: false });

    if (txError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:', txError.message);
      return;
    }

    console.log(`\nüìä –ù–ê–ô–î–ï–ù–û ${recentTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å:`);
    
    const boostTransactions = recentTransactions?.filter(tx => 
      tx.type === 'BOOST_PURCHASE' || 
      tx.description?.toLowerCase().includes('boost') ||
      tx.description?.toLowerCase().includes('ton')
    ) || [];

    console.log(`üí∞ TON Boost —Å–≤—è–∑–∞–Ω–Ω—ã—Ö: ${boostTransactions.length}`);
    
    boostTransactions.forEach(tx => {
      console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID ${tx.id}:`);
      console.log(`   User: ${tx.user_id}`);
      console.log(`   Type: ${tx.type}`);
      console.log(`   Amount: ${tx.amount} ${tx.currency}`);
      console.log(`   Status: ${tx.status}`);
      console.log(`   Description: ${tx.description}`);
      console.log(`   Created: ${tx.created_at}`);
      if (tx.metadata) {
        console.log(`   Metadata:`, JSON.stringify(tx.metadata, null, 4));
      }
    });

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–° TON BOOST –í –¢–ê–ë–õ–ò–¶–ï USERS
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TON Boost –≤ —Ç–∞–±–ª–∏—Ü–µ users...');
    
    const affectedUserIds = [...new Set(boostTransactions.map(tx => tx.user_id))];
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${affectedUserIds.join(', ')}`);

    if (affectedUserIds.length > 0) {
      const { data: usersData, error: usersError } = await supabase
        .from('users')
        .select('id, username, ton_boost_package, ton_boost_rate, ton_boost_active, ton_boost_package_id, balance_ton')
        .in('id', affectedUserIds)
        .order('id');

      if (usersError) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:', usersError.message);
      } else {
        console.log('\nüë• –°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
        usersData?.forEach(user => {
          console.log(`\nUser ${user.id} (@${user.username}):`);
          console.log(`   TON Balance: ${user.balance_ton}`);
          console.log(`   TON Boost Package: ${user.ton_boost_package || '–ù–ï–¢'}`);
          console.log(`   TON Boost Package ID: ${user.ton_boost_package_id || '–ù–ï–¢'}`);
          console.log(`   TON Boost Rate: ${user.ton_boost_rate || '–ù–ï–¢'}`);
          console.log(`   TON Boost Active: ${user.ton_boost_active ? '–î–ê' : '–ù–ï–¢'}`);
        });
      }
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú TON_FARMING_DATA –ó–ê–ü–ò–°–ò
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ton_farming_data –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    if (affectedUserIds.length > 0) {
      const { data: farmingData, error: farmingError } = await supabase
        .from('ton_farming_data')
        .select('*')
        .in('user_id', affectedUserIds.map(id => id.toString()))
        .order('user_id');

      if (farmingError) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø TON_FARMING_DATA:', farmingError.message);
      } else {
        console.log(`\nüåæ TON_FARMING_DATA –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${farmingData?.length || 0}`);
        
        farmingData?.forEach(data => {
          console.log(`\nFarming Data User ${data.user_id}:`);
          console.log(`   Farming Balance: ${data.farming_balance}`);
          console.log(`   Farming Rate: ${data.farming_rate}`);
          console.log(`   Boost Package ID: ${data.boost_package_id}`);
          console.log(`   Created: ${data.created_at}`);
          console.log(`   Updated: ${data.updated_at}`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï–¢ –≤ ton_farming_data
        const farmingUserIds = farmingData?.map(d => d.user_id) || [];
        const missingUsers = affectedUserIds.filter(id => !farmingUserIds.includes(id.toString()));
        
        if (missingUsers.length > 0) {
          console.log(`\n‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í TON_FARMING_DATA: ${missingUsers.join(', ')}`);
          console.log('   ‚òùÔ∏è  –≠–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ù–ï –ü–û–õ–£–ß–ê–Æ–¢ –î–û–•–û–î–´!');
        }
      }
    }

    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö - –ö–¢–û –ê–ö–¢–ò–í–ï–ù
    console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥—ã...');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    const { data: activeUsers, error: activeError } = await supabase
      .from('users')
      .select(`
        id, username, 
        ton_boost_package, ton_boost_rate, ton_boost_active,
        ton_farming_data!inner(user_id, farming_balance, farming_rate)
      `)
      .eq('ton_boost_active', true)
      .not('ton_boost_package', 'is', null)
      .order('id');

    if (activeError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:', activeError.message);
    } else {
      console.log(`\nüìà –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ï: ${activeUsers?.length || 0}`);
      
      activeUsers?.forEach(user => {
        console.log(`User ${user.id}: ${user.ton_boost_package} (${user.ton_boost_rate}/—Å–µ–∫)`);
      });
    }

    // 5. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú
    console.log('\n5Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò...');
    
    const problems = [];
    const solutions = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–∫—É–ø–∫–∞–º–∏
    for (const userId of affectedUserIds) {
      const userTransactions = boostTransactions.filter(tx => tx.user_id === userId);
      const hasBoostPurchase = userTransactions.some(tx => 
        tx.type === 'BOOST_PURCHASE' && tx.status === 'completed'
      );
      
      if (hasBoostPurchase) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ users
        const userData = await supabase
          .from('users')
          .select('ton_boost_active, ton_boost_package, ton_boost_rate')
          .eq('id', userId)
          .single();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
        const farmingData = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', userId.toString())
          .single();

        if (!userData.data?.ton_boost_active) {
          problems.push(`User ${userId}: TON Boost –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users`);
          solutions.push(`User ${userId}: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ton_boost_active = true –≤ users`);
        }

        if (farmingData.error) {
          problems.push(`User ${userId}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ ton_farming_data`);
          solutions.push(`User ${userId}: –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ ton_farming_data —Å farming_balance –∏ farming_rate`);
        }
      }
    }

    if (problems.length > 0) {
      console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      problems.forEach((problem, index) => {
        console.log(`${index + 1}. ${problem}`);
      });

      console.log('\nüîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
      solutions.forEach((solution, index) => {
        console.log(`${index + 1}. ${solution}`);
      });
    } else {
      console.log('\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }

    // 6. –°–í–û–î–ö–ê
    console.log('\n6Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê...');
    
    return {
      total_transactions_hour: recentTransactions?.length || 0,
      boost_transactions: boostTransactions.length,
      affected_users: affectedUserIds,
      problems_found: problems.length,
      active_in_scheduler: activeUsers?.length || 0,
      missing_from_farming_data: affectedUserIds.filter(id => 
        !farmingData?.some(d => d.user_id === id.toString())
      )
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await urgentDiagnostic();
    
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.log(`- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å: ${result.total_transactions_hour}`);
    console.log(`- TON Boost –ø–æ–∫—É–ø–æ–∫: ${result.boost_transactions}`);
    console.log(`- –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.affected_users.length}`);
    console.log(`- –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: ${result.active_in_scheduler}`);
    console.log(`- –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${result.problems_found}`);
    
    if (result.problems_found > 0) {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    } else {
      console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();