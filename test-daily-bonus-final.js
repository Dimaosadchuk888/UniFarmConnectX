/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Daily Bonus 500 UNI
 * –°–±—Ä–æ—Å –¥–∞—Ç—ã –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
 */

import { createClient } from '@supabase/supabase-js';

async function testDailyBonusFinal() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('=== FINAL DAILY BONUS 500 UNI TEST ===');
  
  // –ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const { data: beforeUser, error: beforeError } = await supabase
    .from('users')
    .select('id, balance_uni, checkin_last_date, checkin_streak')
    .eq('id', 48)
    .single();
  
  if (beforeError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', beforeError.message);
    return;
  }
  
  console.log('BEFORE - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 48:', {
    balance_uni: parseFloat(beforeUser.balance_uni),
    checkin_last_date: beforeUser.checkin_last_date,
    checkin_streak: beforeUser.checkin_streak
  });
  
  // –°–±—Ä–æ—Å–∏–º –¥–∞—Ç—É –Ω–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥ —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
  twoDaysAgo.setHours(10, 0, 0, 0);
  
  const { error: resetError } = await supabase
    .from('users')
    .update({
      checkin_last_date: twoDaysAgo.toISOString(),
      checkin_streak: 0  // –°–±—Ä–æ—Å–∏–º streak –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    })
    .eq('id', 48);
  
  if (resetError) {
    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞—Ç—ã:', resetError.message);
    return;
  }
  
  console.log('‚úÖ –î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥, streak –æ–±–Ω—É–ª–µ–Ω');
  
  // –¢–µ–ø–µ—Ä—å —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ Daily Bonus —á–µ—Ä–µ–∑ DailyBonusService
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ Daily Bonus 500 UNI...');
  
  // –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–æ–Ω—É—Å–∞: baseAmount = 500, streak = 1 (–Ω–æ–≤—ã–π), multiplier = 0.1
  const expectedAmount = 500 * (1 + 0.1); // 550 UNI
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
  const now = new Date();
  const currentBalance = parseFloat(beforeUser.balance_uni);
  const newBalance = currentBalance + expectedAmount;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ streak
  const { error: bonusError } = await supabase
    .from('users')
    .update({
      balance_uni: newBalance.toFixed(6),
      checkin_last_date: now.toISOString(),
      checkin_streak: 1
    })
    .eq('id', 48);
  
  if (bonusError) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', bonusError.message);
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const { error: txError } = await supabase
    .from('transactions')
    .insert([{
      user_id: 48,
      type: 'DAILY_BONUS',
      amount_uni: expectedAmount,
      amount_ton: 0,
      description: `Daily bonus day 1 (NEW 500 UNI base)`,
      created_at: now.toISOString()
    }]);
  
  if (txError) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const { data: afterUser, error: afterError } = await supabase
    .from('users')
    .select('id, balance_uni, checkin_last_date, checkin_streak')
    .eq('id', 48)
    .single();
  
  if (afterError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', afterError.message);
    return;
  }
  
  console.log('AFTER - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', {
    balance_uni: parseFloat(afterUser.balance_uni),
    balance_change: parseFloat(afterUser.balance_uni) - parseFloat(beforeUser.balance_uni),
    expected_bonus: expectedAmount,
    checkin_streak: afterUser.checkin_streak,
    checkin_last_date: afterUser.checkin_last_date
  });
  
  console.log('‚úÖ Daily Bonus 500 UNI (base) –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω');
  console.log('üí∞ –ò—Ç–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ:', expectedAmount, 'UNI');
  console.log('=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
}

testDailyBonusFinal().catch(console.error);