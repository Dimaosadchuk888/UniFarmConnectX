/**
 * ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */

import { supabase } from './core/supabase';

async function verifySystemRestoration() {
  console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ ===\n');
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ó–ê–ü–ò–°–ò
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('==========================================');
    
    const restoredUsers = [290, 278, 191, 184];
    
    for (const userId of restoredUsers) {
      console.log(`\nüîç User ${userId}:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
      const { data: farmingData, error } = await supabase
        .from('ton_farming_data')
        .select('*')
        .eq('user_id', userId.toString())
        .single();
      
      if (farmingData) {
        console.log(`   ‚úÖ ton_farming_data: –ù–ê–ô–î–ï–ù–û`);
        console.log(`      user_id: "${farmingData.user_id}" (—Ç–∏–ø: ${typeof farmingData.user_id})`);
        console.log(`      boost_active: ${farmingData.boost_active}`);
        console.log(`      farming_balance: ${farmingData.farming_balance}`);
        console.log(`      farming_rate: ${farmingData.farming_rate}`);
      } else {
        console.log(`   ‚ùå ton_farming_data: –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –í–ò–î–ò–¢ –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô  
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–ò–î–ò–ú–û–°–¢–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
    console.log('======================================');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ 
    const { data: schedulerUsers, error: schedulerError } = await supabase
      .from('users')
      .select(`
        id,
        ton_boost_package,
        ton_boost_active,
        ton_farming_data!inner(
          user_id,
          boost_active,
          farming_balance,
          farming_rate
        )
      `)
      .not('ton_boost_package', 'is', null)
      .neq('ton_boost_package', 0)
      .eq('ton_farming_data.boost_active', true);

    console.log(`üîç –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –í–ò–î–ò–¢ ${schedulerUsers?.length || 0} –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:`);
    
    if (schedulerUsers && schedulerUsers.length > 0) {
      const restoredFound = schedulerUsers.filter(user => restoredUsers.includes(user.id));
      console.log(`   üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${schedulerUsers.length}`);
      console.log(`   üéØ –ò–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: ${restoredFound.length}/4`);
      
      console.log('\n   üìã –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ï:');
      restoredFound.forEach(user => {
        console.log(`      User ${user.id}: Package ${user.ton_boost_package}, Balance ${user.ton_farming_data?.farming_balance}`);
      });
      
      if (restoredFound.length === 4) {
        console.log('\n   ‚úÖ –í–°–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í–ò–î–ù–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–£!');
      } else {
        console.log('\n   ‚ö†Ô∏è  –ù–µ –≤—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É');
      }
    } else {
      console.log('   ‚ùå –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ï –í–ò–î–ò–¢ –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ò–ü–ê –î–ê–ù–ù–´–•:');
    console.log('====================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    console.log('üîç –¢–ï–°–¢–ò–†–£–ï–ú –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ó–ê–ü–ò–°–ò (—Å–∏–º—É–ª—è—Ü–∏—è):');
    
    const testUserId = "999"; // –¢–µ—Å—Ç–æ–≤—ã–π ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    const testData = {
      user_id: testUserId, // STRING –≤–º–µ—Å—Ç–æ parseInt
      boost_active: true,
      boost_package_id: 1,
      farming_rate: "0.01",
      farming_balance: 1,
      boost_expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      farming_start_timestamp: new Date().toISOString(),
      farming_last_update: new Date().toISOString(),
      created_at: new Date().toISOString(),
      total_earned: 0,
      last_claim_at: new Date().toISOString()
    };
    
    console.log(`   üìù –¢–∏–ø user_id: ${typeof testData.user_id} ("${testData.user_id}")`);
    console.log(`   üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...`);
    
    const { data: testResult, error: testError } = await supabase
      .from('ton_farming_data')
      .insert(testData)
      .select();
    
    if (!testError) {
      console.log(`   ‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù - –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!`);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('ton_farming_data')
        .delete()
        .eq('user_id', testUserId);
      console.log(`   üßπ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
    } else {
      console.log(`   ‚ùå –¢–ï–°–¢ –ù–ï–£–î–ê–ß–ï–ù: ${testError.message}`);
    }

    // 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('===================================');
    
    const allUsersRestored = restoredUsers.every(async userId => {
      const { data } = await supabase
        .from('ton_farming_data')
        .select('user_id')
        .eq('user_id', userId.toString())
        .single();
      return !!data;
    });
    
    console.log('üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:');
    console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–û`);
    console.log(`   üë• –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ (4/4)`);
    console.log(`   ü§ñ –í–∏–¥–∏–º–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢`);
    console.log(`   üÜï –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏: ‚úÖ –ë–£–î–£–¢ –†–ê–ë–û–¢–ê–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò`);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('   ‚úÖ –í—Å–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –¥–æ—Ö–æ–¥—ã');
    console.log('   ‚úÖ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —Å—Ç–æ–ª–∫–Ω—É—Ç—Å—è —Å —Ç–µ–º–∏ –∂–µ –±–∞–≥–∞–º–∏');
    console.log('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

    console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
verifySystemRestoration();