/**
 * –ü–û–ò–°–ö –ü–†–û–ü–ê–í–®–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –î–ï–ü–û–ó–ò–¢–ê
 * –ò—â–µ–º TON –¥–µ–ø–æ–∑–∏—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function findMissingDepositTransaction() {
  console.log('üîç –ü–û–ò–°–ö –ü–†–û–ü–ê–í–®–ï–ô TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò');
  console.log('='.repeat(50));
  
  const userId = 184;
  
  try {
    // 1. –ò—â–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    console.log('üïê –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    console.log(`   –ù–∞—á–∏–Ω–∞—è —Å: ${new Date(oneHourAgo).toLocaleString()}`);
    
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });
    
    if (recentError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError.message);
      return;
    }
    
    console.log(`\nüìä –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–° (${recentTx?.length || 0}):`);
    
    if (recentTx && recentTx.length > 0) {
      recentTx.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        
        console.log(`\n   ${i + 1}. ID: ${tx.id}`);
        console.log(`      –¢–∏–ø: ${tx.type}`);
        console.log(`      –í–∞–ª—é—Ç–∞: ${tx.currency}`);
        console.log(`      –°—É–º–º–∞: ${tx.amount || tx.amount_ton || tx.amount_uni || 'N/A'}`);
        console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        
        if (tx.metadata) {
          console.log(`      Metadata: ${JSON.stringify(tx.metadata)}`);
        }
      });
    } else {
      console.log('   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 2. –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è
    console.log('\nüîç –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú:');
    
    const searchKeywords = [
      '0.1',
      '0,1', 
      'deposit',
      '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
      'blockchain',
      'TON'
    ];
    
    for (const keyword of searchKeywords) {
      const { data: keywordTx } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .ilike('description', `%${keyword}%`)
        .order('created_at', { ascending: false })
        .limit(5);
      
      if (keywordTx && keywordTx.length > 0) {
        console.log(`\n   üìÑ –ù–∞–π–¥–µ–Ω–æ –ø–æ "${keyword}" (${keywordTx.length}):`);
        keywordTx.forEach((tx, i) => {
          const time = new Date(tx.created_at);
          const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
          console.log(`      ${i + 1}. ${tx.type} ${tx.amount} ${tx.currency} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥): ${tx.description}`);
        });
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ID –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\nüÜî –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• ID –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: latestTx } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at, description')
      .order('id', { ascending: false })
      .limit(20);
    
    if (latestTx) {
      console.log('   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ ID:');
      latestTx.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`      ${i + 1}. ID ${tx.id}: User ${tx.user_id} ${tx.type} ${tx.amount} ${tx.currency} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        
        // –í—ã–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184
        if (tx.user_id === userId) {
          console.log(`         üéØ –≠–¢–û USER 184: ${tx.description}`);
        }
      });
    }
    
    // 4. –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    console.log('\nüåê TON –î–ï–ü–û–ó–ò–¢–´ –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ó–ê –ß–ê–°:');
    
    const { data: otherTonTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });
    
    if (otherTonTx && otherTonTx.length > 0) {
      console.log(`   üìÑ –ù–∞–π–¥–µ–Ω–æ ${otherTonTx.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      otherTonTx.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        console.log(`      ${i + 1}. User ${tx.user_id}: ${tx.amount} TON (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥) - ${tx.description}`);
      });
    } else {
      console.log('   ‚ùå TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   ü§î –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –¥–µ–ø–æ–∑–∏—Ç –ù–ï –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î');
    }
    
    console.log('\nüéØ –í–´–í–û–î:');
    console.log('–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –¥–µ–ø–æ–∑–∏—Ç 0.1 TON –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π,');
    console.log('–Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –ë–î - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ Frontend/Backend —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.');
    console.log('–õ–∏–±–æ Frontend –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫.');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
  }
}

findMissingDepositTransaction().catch(console.error);