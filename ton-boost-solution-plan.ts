import { supabase } from './core/supabaseClient';

async function createSolutionPlan() {
  console.log('üéØ –ü–õ–ê–ù –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú –ê–ö–ö–ê–£–ù–¢–û–í 191-303');
  console.log('='.repeat(60));

  try {
    // 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    console.log('\n1Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–Ø:');
    
    const { data: users191_303, error: usersError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active, created_at')
      .gte('id', 191)
      .lte('id', 303)
      .order('id', { ascending: true });

    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_active, boost_package_id')
      .gte('user_id', 191)
      .lte('user_id', 303);

    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('user_id, type, amount_ton, created_at')
      .gte('user_id', 191)
      .lte('user_id', 303)
      .in('type', ['TON_DEPOSIT', 'BOOST_PURCHASE', 'FARMING_REWARD']);

    if (!usersError && !farmingError && !txError) {
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
      const userMap: { [key: number]: any } = {};
      
      users191_303?.forEach(user => {
        userMap[user.id] = {
          ...user,
          hasFarmingData: false,
          hasTransactions: false,
          problem: 'UNKNOWN'
        };
      });

      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ª–∏—á–∏–µ farming data
      farmingData?.forEach(farm => {
        if (userMap[farm.user_id]) {
          userMap[farm.user_id].hasFarmingData = true;
          userMap[farm.user_id].farmingBalance = farm.farming_balance;
          userMap[farm.user_id].boostActive = farm.boost_active;
        }
      });

      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const usersWithTx = new Set(transactions?.map(tx => tx.user_id) || []);
      Object.keys(userMap).forEach(userId => {
        const id = parseInt(userId);
        if (usersWithTx.has(id)) {
          userMap[id].hasTransactions = true;
        }
      });

      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
      const problems = {
        WORKING_FINE: [],      // –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        NO_TRANSACTIONS: [],   // –†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        NO_FARMING_DATA: [],   // –ù–µ—Ç farming data
        INCONSISTENT: []       // –ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      };

      Object.values(userMap).forEach((user: any) => {
        if (user.balance_ton > 0 && user.ton_boost_active && user.hasFarmingData && user.hasTransactions) {
          problems.WORKING_FINE.push(user);
        } else if (user.balance_ton > 0 && user.ton_boost_active && user.hasFarmingData && !user.hasTransactions) {
          problems.NO_TRANSACTIONS.push(user);
        } else if (user.balance_ton > 0 && user.ton_boost_active && !user.hasFarmingData) {
          problems.NO_FARMING_DATA.push(user);
        } else {
          problems.INCONSISTENT.push(user);
        }
      });

      console.log('üìä –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–û–ë–õ–ï–ú:');
      console.log(`   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ: ${problems.WORKING_FINE.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   ‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${problems.NO_TRANSACTIONS.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   ‚ùå –ù–µ—Ç farming data: ${problems.NO_FARMING_DATA.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   üîÑ –ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${problems.INCONSISTENT.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      // 2. –í–ê–†–ò–ê–ù–¢–´ –†–ï–®–ï–ù–ò–Ø
      console.log('\n2Ô∏è‚É£ –í–ê–†–ò–ê–ù–¢–´ –†–ï–®–ï–ù–ò–Ø:');
      
      console.log('\nüõ†Ô∏è –í–ê–†–ò–ê–ù–¢ 1: –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û');
      console.log('   –¶–µ–ª—å: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
      console.log('   –î–µ–π—Å—Ç–≤–∏—è:');
      console.log('   - –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
      console.log('   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–∞–≥–∏ boost_active');
      console.log('   - –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      console.log('   –ü–ª—é—Å—ã: –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫');
      console.log('   –ú–∏–Ω—É—Å—ã: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —É–≤–∏–¥—è—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤');

      console.log('\nüîß –í–ê–†–ò–ê–ù–¢ 2: –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï');
      console.log('   –¶–µ–ª—å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      console.log('   –î–µ–π—Å—Ç–≤–∏—è:');
      console.log('   - –°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
      console.log('   - –°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON_DEPOSIT');
      console.log('   - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ BOOST_PURCHASE');
      console.log('   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ');
      console.log('   –ü–ª—é—Å—ã: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      console.log('   –ú–∏–Ω—É—Å—ã: –°–ª–æ–∂–Ω–µ–µ, –±–æ–ª—å—à–µ —Ä–∏—Å–∫–∞, –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã');

      // 3. –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ü–õ–ê–ù
      console.log('\n3Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ü–õ–ê–ù (–ü–û–≠–¢–ê–ü–ù–´–ô):');
      
      console.log('\nüìã –≠–¢–ê–ü 1 - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
      if (problems.NO_FARMING_DATA.length > 0) {
        console.log(`   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å ${problems.NO_FARMING_DATA.length} –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data`);
        problems.NO_FARMING_DATA.slice(0, 5).forEach((user: any) => {
          console.log(`     - User ${user.id}: balance=${user.balance_ton} TON`);
        });
      }

      console.log('\nüìã –≠–¢–ê–ü 2 - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
      if (problems.NO_TRANSACTIONS.length > 0) {
        console.log(`   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${problems.NO_TRANSACTIONS.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        console.log('   ‚Ä¢ –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: TON_DEPOSIT, BOOST_PURCHASE');
        problems.NO_TRANSACTIONS.slice(0, 5).forEach((user: any) => {
          console.log(`     - User ${user.id}: —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç ${user.balance_ton} TON`);
        });
      }

      console.log('\nüìã –≠–¢–ê–ü 3 - –í–ê–õ–ò–î–ê–¶–ò–Ø:');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
      console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü');
      console.log('   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');

      // 4. –ì–û–¢–û–í–´–ï –°–ö–†–ò–ü–¢–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø
      console.log('\n4Ô∏è‚É£ –ì–û–¢–û–í–´–ï –°–ö–†–ò–ü–¢–´ –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:');
      
      console.log('\nüíª –°–ö–†–ò–ü–¢ A: –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
      console.log('```sql');
      console.log('-- –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π ton_farming_data');
      problems.NO_FARMING_DATA.slice(0, 3).forEach((user: any) => {
        console.log(`INSERT INTO ton_farming_data (user_id, farming_balance, boost_active, boost_package_id, farming_rate)`);
        console.log(`VALUES (${user.id}, ${user.balance_ton}, true, 1, 0.01);`);
      });
      console.log('```');

      console.log('\nüíª –°–ö–†–ò–ü–¢ B: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
      console.log('```sql');
      console.log('-- –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      problems.NO_TRANSACTIONS.slice(0, 3).forEach((user: any) => {
        const depositDate = new Date(user.created_at);
        depositDate.setMinutes(depositDate.getMinutes() + 1);
        
        console.log(`INSERT INTO transactions (user_id, type, amount_ton, amount, currency, description, status, created_at)`);
        console.log(`VALUES (${user.id}, 'TON_DEPOSIT', ${user.balance_ton}, ${user.balance_ton}, 'TON',`);
        console.log(`'TON –¥–µ–ø–æ–∑–∏—Ç: ${user.balance_ton} TON', 'completed', '${depositDate.toISOString()}');`);
      });
      console.log('```');

      // 5. –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í
      console.log('\n5Ô∏è‚É£ –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í:');
      console.log('\n‚ö†Ô∏è –†–ò–°–ö–ò –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –í–ê–†–ò–ê–ù–¢–ê:');
      console.log('   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–ø—Ä–æ—Å–∏—Ç—å "–≥–¥–µ –º–æ–∏ –¥–µ–ø–æ–∑–∏—Ç—ã?"');
      console.log('   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
      console.log('   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º: –ù–ò–ó–ö–ê–Ø');

      console.log('\n‚ö†Ô∏è –†–ò–°–ö–ò –ü–û–õ–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
      console.log('   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      console.log('   ‚Ä¢ –ù–µ—Ç–æ—á–Ω—ã–µ –¥–∞—Ç—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
      console.log('   ‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö');
      console.log('   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º: –°–†–ï–î–ù–Ø–Ø');

      console.log('\n6Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
      console.log('\nüéØ –ù–ê–ß–ê–¢–¨ –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –í–ê–†–ò–ê–ù–¢–ê:');
      console.log('   1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ton_farming_data');
      console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã');
      console.log('   3. –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É');
      console.log('   4. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∂–∞–ª–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
      console.log('\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ü–û–≠–¢–ê–ü–ù–û–ì–û –ü–û–î–•–û–î–ê:');
      console.log('   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø–æ–ª–æ–º–∫–∏ —Å–∏—Å—Ç–µ–º—ã');
      console.log('   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      console.log('   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–∞–ª—ã—Ö –≥—Ä—É–ø–ø–∞—Ö');
      console.log('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã');
    }

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê –†–ï–®–ï–ù–ò–Ø:', error);
  }
}

createSolutionPlan().catch(console.error);