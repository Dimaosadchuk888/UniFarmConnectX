#!/usr/bin/env node
/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò 25 –ò 227
 * –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkUserExists(userId) {
  const { data, error } = await supabase
    .from('users')
    .select('id, telegram_id, username, balance_ton')
    .eq('id', userId)
    .single();
    
  return { data, error };
}

async function checkAllTransactionsForUser(userId) {
  console.log(`\nüîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô - USER ${userId}`);
  
  // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: allTx, error } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false })
    .limit(20);

  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User ${userId}:`, error.message);
    return;
  }

  console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User ${userId}: ${allTx.length}`);
  
  if (allTx.length === 0) {
    console.log(`‚ö†Ô∏è  User ${userId} –ù–ï –ò–ú–ï–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –≤ –ë–î`);
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const byType = {};
  const tonTransactions = [];
  
  allTx.forEach(tx => {
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    if (!byType[tx.type]) byType[tx.type] = 0;
    byType[tx.type]++;
    
    // TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (tx.currency === 'TON' || tx.type.includes('TON') || tx.description.toLowerCase().includes('ton')) {
      tonTransactions.push(tx);
    }
  });

  console.log(`üìà –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
  Object.keys(byType).forEach(type => {
    console.log(`   ${type}: ${byType[type]} —à—Ç.`);
  });

  console.log(`üíé TON-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
  
  if (tonTransactions.length > 0) {
    console.log(`üìù –î–µ—Ç–∞–ª–∏ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    tonTransactions.forEach(tx => {
      console.log(`   ID ${tx.id}: ${tx.type} | ${tx.amount} ${tx.currency} | ${new Date(tx.created_at).toLocaleString()}`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      if (tx.metadata) {
        console.log(`      Metadata: ${JSON.stringify(tx.metadata)}`);
      }
      if (tx.tx_hash) {
        console.log(`      TX Hash: ${tx.tx_hash}`);
      }
    });
  }

  return { allTx, tonTransactions, byType };
}

async function checkBalanceHistory(userId) {
  console.log(`\nüí∞ –ò–°–¢–û–†–ò–Ø –ë–ê–õ–ê–ù–°–û–í - USER ${userId}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const { data: user } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', userId)
    .single();

  if (user) {
    console.log(`üìä –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:`);
    console.log(`   TON: ${user.balance_ton}`);
    console.log(`   UNI: ${user.balance_uni}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON-—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  const { data: tonTxs } = await supabase
    .from('transactions')
    .select('amount, type, currency, description, created_at')
    .eq('user_id', userId)
    .eq('currency', 'TON')
    .order('created_at', { ascending: true });

  if (tonTxs && tonTxs.length > 0) {
    console.log(`üíé –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –ø–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º:`);
    let calculatedBalance = 0;
    tonTxs.forEach(tx => {
      const amount = parseFloat(tx.amount) || 0;
      calculatedBalance += amount;
      console.log(`   ${new Date(tx.created_at).toLocaleString()}: ${tx.type} ${amount} (–∏—Ç–æ–≥–æ: ${calculatedBalance.toFixed(6)})`);
    });
    
    console.log(`üéØ –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å TON: ${calculatedBalance.toFixed(6)}`);
    console.log(`üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å TON: ${user ? user.balance_ton : 'N/A'}`);
    
    if (user && Math.abs(calculatedBalance - parseFloat(user.balance_ton || 0)) > 0.000001) {
      console.log(`üö® –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!`);
    }
  }
}

async function checkTonDepositMechanism() {
  console.log(`\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ï–•–ê–ù–ò–ó–ú–ê TON –î–ï–ü–û–ó–ò–¢–û–í`);
  
  // –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: recentTonDeposits } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'TON_DEPOSIT')
    .order('created_at', { ascending: false })
    .limit(10);

  console.log(`üì• –ù–µ–¥–∞–≤–Ω–∏—Ö TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${recentTonDeposits?.length || 0}`);
  
  if (recentTonDeposits && recentTonDeposits.length > 0) {
    console.log(`üìù –ü—Ä–∏–º–µ—Ä—ã TON_DEPOSIT:`);
    recentTonDeposits.slice(0, 3).forEach(tx => {
      console.log(`   ID ${tx.id}: User ${tx.user_id} | ${tx.amount} TON | ${new Date(tx.created_at).toLocaleString()}`);
    });
  }

  // –ò—â–µ–º DEPOSIT —Å currency=TON –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
  const { data: depositTon } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'DEPOSIT')
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(10);

  console.log(`üì• DEPOSIT + currency=TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${depositTon?.length || 0}`);
  
  if (depositTon && depositTon.length > 0) {
    console.log(`üìù –ü—Ä–∏–º–µ—Ä—ã DEPOSIT TON:`);
    depositTon.slice(0, 3).forEach(tx => {
      console.log(`   ID ${tx.id}: User ${tx.user_id} | ${tx.amount} TON | ${new Date(tx.created_at).toLocaleString()}`);
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å "TON"
  const { data: tonDescriptions } = await supabase
    .from('transactions')
    .select('*')
    .ilike('description', '%TON%')
    .order('created_at', { ascending: false })
    .limit(10);

  console.log(`üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å "TON" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: ${tonDescriptions?.length || 0}`);
}

async function checkUIFiltering() {
  console.log(`\nüé® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê UI –§–ò–õ–¨–¢–†–ê–¶–ò–ò`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const userId of [25, 227]) {
    console.log(`\nüë§ API —Ç–µ—Å—Ç –¥–ª—è User ${userId}:`);
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç UI)
      const { data: allForUser } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(20);

      console.log(`   üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allForUser?.length || 0}`);
      
      if (allForUser && allForUser.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞–ª—é—Ç–∞–º
        const currencies = {};
        allForUser.forEach(tx => {
          if (!currencies[tx.currency]) currencies[tx.currency] = 0;
          currencies[tx.currency]++;
        });
        
        console.log(`   üí± –ü–æ –≤–∞–ª—é—Ç–∞–º:`);
        Object.keys(currencies).forEach(curr => {
          console.log(`      ${curr}: ${currencies[curr]} —à—Ç.`);
        });
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log(`   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
        allForUser.slice(0, 3).forEach(tx => {
          console.log(`      ${tx.type} | ${tx.amount} ${tx.currency} | ${new Date(tx.created_at).toLocaleString()}`);
        });
      }
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞ –¥–ª—è User ${userId}:`, error.message);
    }
  }
}

async function runFullDiagnosis() {
  console.log('üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô - USERS 25 & 227');
  console.log('=' * 60);
  console.log('‚ö†Ô∏è  –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\nüë• –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
  
  const user25 = await checkUserExists(25);
  const user227 = await checkUserExists(227);
  
  if (user25.error) {
    console.log('‚ùå User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user25.error.message);
  } else {
    console.log('‚úÖ User 25 –Ω–∞–π–¥–µ–Ω:', {
      id: user25.data.id,
      telegram_id: user25.data.telegram_id,
      username: user25.data.username,
      balance_ton: user25.data.balance_ton
    });
  }
  
  if (user227.error) {
    console.log('‚ùå User 227 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user227.error.message);
  } else {
    console.log('‚úÖ User 227 –Ω–∞–π–¥–µ–Ω:', {
      id: user227.data.id,
      telegram_id: user227.data.telegram_id,
      username: user227.data.username,
      balance_ton: user227.data.balance_ton
    });
  }

  // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  if (user25.data) {
    await checkAllTransactionsForUser(25);
    await checkBalanceHistory(25);
  }
  
  if (user227.data) {
    await checkAllTransactionsForUser(227);
    await checkBalanceHistory(227);
  }

  // –û–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞
  await checkTonDepositMechanism();
  await checkUIFiltering();

  console.log('\n' + '=' * 60);
  console.log('üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  
  return {
    user25: user25.data,
    user227: user227.data
  };
}

runFullDiagnosis().catch(console.error);