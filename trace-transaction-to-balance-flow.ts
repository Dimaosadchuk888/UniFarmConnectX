/**
 * –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–û–¢–û–ö–ê: –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø ‚Üí –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è —Å–≤—è–∑—å
 */

import { supabase } from './core/supabase.js';

async function traceTransactionToBalanceFlow() {
  console.log('üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–û–¢–û–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø ‚Üí –ë–ê–õ–ê–ù–°');
  console.log('‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  
  try {
    // 1. –ë–µ—Ä–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–µ–¥–∞–≤–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\n=== 1. –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===');
    
    const { data: recentTransaction } = await supabase
      .from('transactions')
      .select('*')
      .eq('status', 'completed')
      .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // 30 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
    
    if (!recentTransaction) {
      console.log('‚ùå –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 30 –º–∏–Ω—É—Ç');
      return;
    }
    
    console.log('üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:');
    console.log(`   ID: ${recentTransaction.id}`);
    console.log(`   User: ${recentTransaction.user_id}`);
    console.log(`   –¢–∏–ø: ${recentTransaction.type}`);
    console.log(`   –°—É–º–º–∞: ${recentTransaction.amount_uni || recentTransaction.amount_ton} ${recentTransaction.currency}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${recentTransaction.status}`);
    console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${recentTransaction.created_at}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    console.log('\n=== 2. –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
    
    const userId = recentTransaction.user_id;
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (–º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ internal_id)
    const { data: userByUserId } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    const { data: userByTelegramId } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', userId)
      .single();
    
    console.log('üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log(`   –ü–æ internal_id=${userId}:`, userByUserId ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log(`   –ü–æ telegram_id=${userId}:`, userByTelegramId ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    const targetUser = userByTelegramId || userByUserId;
    
    if (!targetUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É ID!');
      return;
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
    console.log(`   internal_id: ${targetUser.id}`);
    console.log(`   telegram_id: ${targetUser.telegram_id}`);
    console.log(`   username: ${targetUser.username}`);
    console.log(`   UNI: ${targetUser.balance_uni}`);
    console.log(`   TON: ${targetUser.balance_ton}`);
    console.log(`   updated_at: ${targetUser.updated_at}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è vs –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n=== 3. –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó ===');
    
    const transactionTime = new Date(recentTransaction.created_at);
    const balanceUpdateTime = new Date(targetUser.updated_at);
    const timeDiff = transactionTime.getTime() - balanceUpdateTime.getTime();
    
    console.log(`‚è∞ –í—Ä–µ–º–µ–Ω–∞:`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${recentTransaction.created_at}`);
    console.log(`   –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${targetUser.updated_at}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${(timeDiff / 1000).toFixed(1)} —Å–µ–∫—É–Ω–¥`);
    
    if (timeDiff > 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ë–∞–ª–∞–Ω—Å –ù–ï –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
    } else {
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }
    
    // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
    console.log('\n=== 4. –†–ê–°–ß–ï–¢ –û–ñ–ò–î–ê–ï–ú–û–ì–û –ë–ê–õ–ê–ù–°–ê ===');
    
    // –ë–µ—Ä–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const { data: transactionsAfterUpdate } = await supabase
      .from('transactions')
      .select('type, amount_uni, amount_ton, currency, created_at')
      .eq('user_id', userId)
      .eq('status', 'completed')
      .gt('created_at', targetUser.updated_at)
      .order('created_at', { ascending: true });
    
    console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${transactionsAfterUpdate?.length || 0}`);
    
    let expectedUniBalance = parseFloat(targetUser.balance_uni);
    let expectedTonBalance = parseFloat(targetUser.balance_ton);
    
    if (transactionsAfterUpdate && transactionsAfterUpdate.length > 0) {
      console.log('\nüìä –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      
      transactionsAfterUpdate.forEach((tx, i) => {
        const amountUni = parseFloat(tx.amount_uni) || 0;
        const amountTon = parseFloat(tx.amount_ton) || 0;
        
        console.log(`  ${i+1}. ${tx.type}: ${amountUni || amountTon} ${tx.currency} (${tx.created_at})`);
        
        if (tx.type === 'WITHDRAWAL') {
          expectedUniBalance -= amountUni;
          expectedTonBalance -= amountTon;
        } else {
          expectedUniBalance += amountUni;
          expectedTonBalance += amountTon;
        }
      });
      
      console.log(`\nüí∞ –û–ñ–ò–î–ê–ï–ú–´–ô –ë–ê–õ–ê–ù–°:`);
      console.log(`   UNI: ${expectedUniBalance.toFixed(6)} (—Å–µ–π—á–∞—Å: ${targetUser.balance_uni})`);
      console.log(`   TON: ${expectedTonBalance.toFixed(6)} (—Å–µ–π—á–∞—Å: ${targetUser.balance_ton})`);
      
      const uniDiff = expectedUniBalance - parseFloat(targetUser.balance_uni);
      const tonDiff = expectedTonBalance - parseFloat(targetUser.balance_ton);
      
      console.log(`üìà –ü–û–¢–ï–†–Ø–ù–ù–´–ô –î–û–•–û–î:`);
      console.log(`   UNI: ${uniDiff > 0 ? '+' : ''}${uniDiff.toFixed(6)}`);
      console.log(`   TON: ${tonDiff > 0 ? '+' : ''}${tonDiff.toFixed(6)}`);
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º BalanceManager —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    console.log('\n=== 5. –¢–ï–°–¢ BALANCE MANAGER ===');
    
    try {
      const { BalanceManager } = await import('./core/BalanceManager.js');
      const balanceManager = BalanceManager.getInstance();
      
      const testId = targetUser.telegram_id || targetUser.id;
      console.log(`üß™ –¢–µ—Å—Ç getUserBalance(${testId}):`);
      
      const result = await balanceManager.getUserBalance(testId);
      if (result.success) {
        console.log(`   ‚úÖ BalanceManager –≤–∏–¥–∏—Ç: UNI=${result.balance?.balance_uni}, TON=${result.balance?.balance_ton}`);
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ë–î
        const bmUni = result.balance?.balance_uni || 0;
        const bmTon = result.balance?.balance_ton || 0;
        const dbUni = parseFloat(targetUser.balance_uni);
        const dbTon = parseFloat(targetUser.balance_ton);
        
        if (Math.abs(bmUni - dbUni) < 0.000001 && Math.abs(bmTon - dbTon) < 0.000001) {
          console.log('   ‚úÖ BalanceManager –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î');
        } else {
          console.log('   ‚ùå BalanceManager –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ!');
        }
      } else {
        console.log(`   ‚ùå BalanceManager –æ—à–∏–±–∫–∞: ${result.error}`);
      }
      
    } catch (bmError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ BalanceManager:', bmError.message);
    }
    
    // 6. –î–ò–ê–ì–ù–û–ó
    console.log('\n=== üéØ –¢–û–ß–ù–´–ô –î–ò–ê–ì–ù–û–ó ===');
    
    const hasUnprocessedTransactions = transactionsAfterUpdate && transactionsAfterUpdate.length > 0;
    const isBalanceOutdated = timeDiff > 0;
    
    if (hasUnprocessedTransactions) {
      console.log('üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –Ω–æ –±–∞–ª–∞–Ω—Å—ã –ù–ï –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è');
      console.log(`   üìä –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionsAfterUpdate.length}`);
      console.log(`   üí∏ –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${expectedUniBalance - parseFloat(targetUser.balance_uni)} UNI`);
      console.log('\nüîß –ü–†–ò–ß–ò–ù–ê: BalanceManager.updateUserBalance() –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    return {
      hasUnprocessedTransactions,
      unprocessedCount: transactionsAfterUpdate?.length || 0,
      lostUniIncome: hasUnprocessedTransactions ? expectedUniBalance - parseFloat(targetUser.balance_uni) : 0
    };
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏:', error);
    console.error('Stack:', error.stack);
    return null;
  }
}

traceTransactionToBalanceFlow();