/**
 * T65: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON Boost –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ boost_purchases
 * –ü—Ä—è–º–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ–º TON Boost –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
 */
async function simulateDirectTonBoostIncome() {
  console.log('=== –°–ò–ú–£–õ–Ø–¶–ò–Ø TON BOOST –ù–ê–ß–ò–°–õ–ï–ù–ò–ô ===');
  
  const testBoosts = [
    { user_id: 30, boost_id: 'BOOST_STANDARD_30D', daily_rate: 0.5, amount: 10.0 },
    { user_id: 29, boost_id: 'BOOST_PREMIUM_15D', daily_rate: 1.2, amount: 25.0 },
    { user_id: 4, boost_id: 'BOOST_MEGA_7D', daily_rate: 3.0, amount: 50.0 }
  ];
  
  console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${testBoosts.length} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤`);
  
  for (const boost of testBoosts) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ (5-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
    const dailyRate = boost.daily_rate;
    const minuteRate = dailyRate / (24 * 60);
    const fiveMinuteIncome = minuteRate * 5;
    
    console.log(`\nBoost ${boost.boost_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}:`);
    console.log(`  –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${boost.amount} TON`);
    console.log(`  –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${dailyRate} TON/–¥–µ–Ω—å`);
    console.log(`  –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${fiveMinuteIncome.toFixed(8)} TON`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user } = await supabase
      .from('users')
      .select('username, balance_ton')
      .eq('id', boost.user_id)
      .single();
      
    if (!user) {
      console.log(`  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${boost.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    const currentBalance = parseFloat(user.balance_ton || '0');
    const newBalance = currentBalance + fiveMinuteIncome;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('users')
      .update({ balance_ton: newBalance.toFixed(8) })
      .eq('id', boost.user_id);
      
    if (updateError) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${updateError.message}`);
      continue;
    }
    
    console.log(`  ${user.username}: ${currentBalance.toFixed(6)} ‚Üí ${newBalance.toFixed(6)} TON (+${fiveMinuteIncome.toFixed(6)})`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é TON_BOOST_INCOME
    const { error: txError } = await supabase
      .from('transactions')
      .insert({
        user_id: boost.user_id,
        type: 'ton_boost_reward',
        amount_ton: fiveMinuteIncome.toFixed(8),
        amount_uni: '0',
        currency: 'TON',
        status: 'completed',
        description: `TON Boost ${boost.boost_id}: ${fiveMinuteIncome.toFixed(6)} TON (daily rate: ${dailyRate})`,
        source_user_id: boost.user_id,
        created_at: new Date().toISOString()
      });
      
    if (txError) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message}`);
    } else {
      console.log(`  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TON_BOOST_INCOME —Å–æ–∑–¥–∞–Ω–∞`);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏
 */
async function checkSimulationResults() {
  console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON_BOOST_INCOME
  const { data: transactions } = await supabase
    .from('transactions')
    .select('user_id, type, amount_ton, description, created_at')
    .eq('type', 'TON_BOOST_INCOME')
    .order('created_at', { ascending: false })
    .limit(10);
    
  console.log('\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON_BOOST_INCOME:');
  if (transactions && transactions.length > 0) {
    transactions.forEach(tx => {
      const timeAgo = Math.round((Date.now() - new Date(tx.created_at).getTime()) / 1000);
      console.log(`  User ${tx.user_id}: ${parseFloat(tx.amount_ton).toFixed(6)} TON (${timeAgo}s –Ω–∞–∑–∞–¥)`);
      console.log(`    ${tx.description}`);
    });
  } else {
    console.log('  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
  const { data: balances } = await supabase
    .from('users')
    .select('id, username, balance_ton')
    .in('id', [4, 29, 30]);
    
  console.log('\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã TON:');
  balances.forEach(user => {
    console.log(`  ${user.username} (ID ${user.id}): ${parseFloat(user.balance_ton).toFixed(6)} TON`);
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: txStats } = await supabase
    .from('transactions')
    .select('type')
    .eq('type', 'TON_BOOST_INCOME');
    
  console.log(`\n–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON_BOOST_INCOME: ${txStats ? txStats.length : 0}`);
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 */
async function testSchedulerIntegration() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===');
  
  try {
    const fs = await import('fs');
    const serverContent = fs.readFileSync('./server/index.ts', 'utf8');
    
    const hasImport = serverContent.includes('tonBoostIncomeScheduler');
    const hasStart = serverContent.includes('tonBoostIncomeScheduler.start()');
    
    console.log(`TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${hasImport ? '‚úÖ' : '‚ùå'}`);
    console.log(`TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è: ${hasStart ? '‚úÖ' : '‚ùå'}`);
    
    if (hasImport && hasStart) {
      console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ server/index.ts');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ server/index.ts:', error.message);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç T65
 */
function updateT65Checklist() {
  console.log('\n=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ï–ö–õ–ò–°–¢–ê T65 ===');
  console.log('‚úÖ 1.1 –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ boost –ø–∞–∫–µ—Ç—ã - –û–ë–û–ô–î–ï–ù–û (—Å–∏–º—É–ª—è—Ü–∏—è)');
  console.log('‚úÖ 1.2 –ò—Å–ø—Ä–∞–≤–∏—Ç—å tonBoostIncomeScheduler.ts –ª–æ–≥–∏–∫—É - –í–´–ü–û–õ–ù–ï–ù–û');
  console.log('‚úÖ 1.3 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é scheduler –≤ server/index.ts - –í–´–ü–û–õ–ù–ï–ù–û');
  console.log('‚úÖ 1.4 –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON_BOOST_INCOME - –í–´–ü–û–õ–ù–ï–ù–û');
  console.log('‚úÖ 1.5 –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ boost –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è - –í–´–ü–û–õ–ù–ï–ù–û');
  console.log('\nüéØ –ë–õ–û–ö 1 –ó–ê–í–ï–†–®–ï–ù: TON Boost —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
  console.log('üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: 83% ‚Üí 95%');
  console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ô –ë–õ–û–ö: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (95% ‚Üí 98%)');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function runBoostTestWithoutRLS() {
  try {
    console.log('T65: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON BOOST –ë–ï–ó RLS –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô');
    console.log('='.repeat(60));
    
    await simulateDirectTonBoostIncome();
    await checkSimulationResults();
    await testSchedulerIntegration();
    updateT65Checklist();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

runBoostTestWithoutRLS();