#!/usr/bin/env tsx

/**
 * üö® –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST –ü–û–ö–£–ü–ö–ê–ú–ò
 * –ò—â–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –∫—É–ø–∏–ª –ø–∞–∫–µ—Ç—ã –Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function checkAllBoostUsers() {
  console.log('üö® –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('=' .repeat(55));
  
  try {
    // 1. –ù–ê–•–û–î–ò–ú –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° BOOST_PURCHASE
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å BOOST_PURCHASE...');
    
    const { data: allBoostPurchases } = await supabase
      .from('transactions')
      .select('user_id, created_at, amount')
      .eq('type', 'BOOST_PURCHASE')
      .eq('status', 'completed')
      .order('created_at', { ascending: false });

    if (!allBoostPurchases || allBoostPurchases.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const uniqueUserIds = [...new Set(allBoostPurchases.map(tx => parseInt(tx.user_id)))];
    console.log(`üí∞ –í–°–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${uniqueUserIds.length}`);
    console.log(`üí≥ –í–°–ï–ì–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE: ${allBoostPurchases.length}`);

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ê–¶–ò–ò –î–õ–Ø –í–°–ï–•
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const { data: usersStatus } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_package, ton_boost_rate, balance_ton')
      .in('id', uniqueUserIds)
      .order('id');

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –í TON_FARMING_DATA
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data...');
    
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_package_id, created_at')
      .in('user_id', uniqueUserIds.map(id => id.toString()))
      .order('user_id');

    const farmingUserIds = farmingData?.map(d => parseInt(d.user_id)) || [];

    // 4. –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    console.log('\n4Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–ñ–î–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ:');
    console.log('=' .repeat(55));

    const problems = [];
    const inactive_users = [];
    const missing_farming_data = [];
    const working_correctly = [];

    for (const userId of uniqueUserIds) {
      const user = usersStatus?.find(u => u.id === userId);
      const hasFarmingData = farmingUserIds.includes(userId);
      const purchaseCount = allBoostPurchases.filter(tx => parseInt(tx.user_id) === userId).length;
      const lastPurchase = allBoostPurchases.find(tx => parseInt(tx.user_id) === userId)?.created_at;

      console.log(`\nüë§ User ${userId} (@${user?.username || 'unknown'}):`);
      console.log(`   üí∞ –ü–æ–∫—É–ø–æ–∫: ${purchaseCount}`);
      console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${lastPurchase}`);
      console.log(`   üí≥ –ë–∞–ª–∞–Ω—Å TON: ${user?.balance_ton || 0}`);
      console.log(`   üì¶ –ü–∞–∫–µ—Ç: ${user?.ton_boost_package || '–ù–ï–¢'}`);
      console.log(`   ‚ö° –ê–∫—Ç–∏–≤–µ–Ω: ${user?.ton_boost_active ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   üåæ –í ton_farming_data: ${hasFarmingData ? '–î–ê' : '–ù–ï–¢'}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã
      if (!user?.ton_boost_active) {
        console.log(`   üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Ö–æ–¥—ã!`);
        inactive_users.push(userId);
        problems.push(`User ${userId}: ton_boost_active = false`);
      }

      if (!hasFarmingData) {
        console.log(`   üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–ï–¢ –≤ ton_farming_data - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –≤–∏–¥–∏—Ç!`);
        missing_farming_data.push(userId);
        problems.push(`User ${userId}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ton_farming_data`);
      }

      if (user?.ton_boost_active && hasFarmingData) {
        console.log(`   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û - –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Ö–æ–¥—ã`);
        working_correctly.push(userId);
      }
    }

    // 5. –°–í–û–î–ö–ê –ü–†–û–ë–õ–ï–ú
    console.log('\n5Ô∏è‚É£ –°–í–û–î–ö–ê –ü–†–û–ë–õ–ï–ú:');
    console.log('=' .repeat(30));
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${uniqueUserIds.length}`);
    console.log(`   - –†–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${working_correctly.length}`);
    console.log(`   - –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã (ton_boost_active=false): ${inactive_users.length}`);
    console.log(`   - –ù–ï–¢ –≤ ton_farming_data: ${missing_farming_data.length}`);
    console.log(`   - –í—Å–µ–≥–æ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${inactive_users.length + missing_farming_data.length - (inactive_users.filter(id => missing_farming_data.includes(id)).length)}`);

    if (inactive_users.length > 0) {
      console.log(`\n‚ùå –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (ton_boost_active=false):`);
      console.log(`   ${inactive_users.join(', ')}`);
      console.log(`   üëÜ –ù–£–ñ–ù–û: UPDATE users SET ton_boost_active = true WHERE id IN (${inactive_users.join(', ')});`);
    }

    if (missing_farming_data.length > 0) {
      console.log(`\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í TON_FARMING_DATA:`);
      console.log(`   ${missing_farming_data.join(', ')}`);
      console.log(`   üëÜ –ù–£–ñ–ù–û: –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    if (working_correctly.length > 0) {
      console.log(`\n‚úÖ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û:`);
      console.log(`   ${working_correctly.join(', ')}`);
    }

    // 6. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –î–û–•–û–î–û–í
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    
    const { data: recentIncomes } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at')
      .eq('type', 'FARMING_REWARD')
      .contains('metadata', { transaction_source: 'ton_boost_scheduler' })
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()) // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
      .order('created_at', { ascending: false });

    const usersWithRecentIncome = [...new Set(recentIncomes?.map(tx => parseInt(tx.user_id)) || [])];
    console.log(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Ö–æ–¥–∞–º–∏ –∑–∞ 2 —á–∞—Å–∞: ${usersWithRecentIncome.length}`);
    
    const notReceivingIncome = uniqueUserIds.filter(id => !usersWithRecentIncome.includes(id));
    if (notReceivingIncome.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ù–ï –ü–û–õ–£–ß–ê–Æ–¢ –î–û–•–û–î–´ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:`);
      console.log(`   ${notReceivingIncome.join(', ')}`);
    }

    return {
      total_users_with_purchases: uniqueUserIds.length,
      inactive_users: inactive_users,
      missing_farming_data: missing_farming_data,
      working_correctly: working_correctly.length,
      not_receiving_income: notReceivingIncome.length
    };

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await checkAllBoostUsers();
    
    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('=' .repeat(30));
    
    if (result.inactive_users.length > 0) {
      console.log(`\n1. –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${result.inactive_users.join(', ')}`);
      console.log(`   SQL: UPDATE users SET ton_boost_active = true WHERE id IN (${result.inactive_users.join(', ')});`);
    }
    
    if (result.missing_farming_data.length > 0) {
      console.log(`\n2. –°–û–ó–î–ê–¢–¨ –ó–ê–ü–ò–°–ò –í TON_FARMING_DATA –¥–ª—è: ${result.missing_farming_data.join(', ')}`);
    }
    
    console.log(`\n‚úÖ –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö ${result.total_users_with_purchases} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
  }
}

main();