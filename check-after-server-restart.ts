import { supabase } from './core/supabase';

async function checkAfterServerRestart() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê ===\n');
  console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost
    console.log('üïê 1. –ü–û–°–õ–ï–î–ù–ò–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø TON BOOST:\n');
    
    const { data: lastRewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);

    if (rewardError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:', rewardError.message);
    } else if (lastRewards && lastRewards.length > 0) {
      const serverRestartTime = new Date('2025-07-13T15:08:00'); // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
      
      console.log('–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:\n');
      
      let hasNewRewards = false;
      for (const reward of lastRewards) {
        const rewardTime = new Date(reward.created_at);
        const isAfterRestart = rewardTime > serverRestartTime;
        
        if (isAfterRestart) {
          hasNewRewards = true;
          console.log(`‚úÖ –ù–û–í–û–ï –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:`);
        } else {
          console.log(`‚è±Ô∏è  –°—Ç–∞—Ä–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:`);
        }
        
        console.log(`  –í—Ä–µ–º—è: ${rewardTime.toLocaleString()}`);
        console.log(`  User ${reward.user_id}: +${reward.amount} TON`);
        console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${reward.description}`);
        
        if (reward.metadata) {
          const metadata = typeof reward.metadata === 'string' ? JSON.parse(reward.metadata) : reward.metadata;
          if (metadata.deposit_amount !== undefined) {
            console.log(`  üìä –î–µ–ø–æ–∑–∏—Ç –≤ metadata: ${metadata.deposit_amount} TON`);
          }
          if (metadata.calculation_details) {
            console.log(`  üìê –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:`, metadata.calculation_details);
          }
        }
        console.log('  ---');
      }
      
      if (!hasNewRewards) {
        console.log('\n‚ö†Ô∏è  –ù–ï–¢ –ù–û–í–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!');
        console.log('   –í–æ–∑–º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è (–∂–¥–µ—Ç 5 –º–∏–Ω—É—Ç)');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ton_farming_data
    console.log('\nüìä 2. –°–û–°–¢–û–Ø–ù–ò–ï TON_FARMING_DATA:\n');
    
    const { data: tonData, error: tonError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true)
      .order('farming_balance', { ascending: false });

    if (tonError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:', tonError.message);
    } else if (tonData && tonData.length > 0) {
      console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${tonData.length}\n`);
      
      let usersWithBalance = 0;
      for (const user of tonData) {
        const balance = parseFloat(user.farming_balance || '0');
        if (balance > 0) usersWithBalance++;
        
        const status = balance > 0 ? '‚úÖ' : '‚ùå';
        console.log(`User ${user.user_id}: ${balance} TON ${status} (–ø–∞–∫–µ—Ç ${user.boost_package_id})`);
        
        if (user.user_id === '74') {
          console.log(`  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(user.updated_at).toLocaleString()}`);
        }
      }
      
      console.log(`\nüìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithBalance}/${tonData.length}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    console.log('\nüõí 3. –ù–û–í–´–ï –ü–û–ö–£–ü–ö–ò –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê:\n');
    
    const { data: newPurchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BOOST_PURCHASE')
      .gt('created_at', '2025-07-13T15:08:00')
      .order('created_at', { ascending: false });

    if (purchaseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', purchaseError.message);
    } else if (newPurchases && newPurchases.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${newPurchases.length}\n`);
      
      for (const purchase of newPurchases) {
        console.log(`User ${purchase.user_id}: ${purchase.amount} TON`);
        console.log(`  –í—Ä–µ–º—è: ${new Date(purchase.created_at).toLocaleString()}`);
        console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ farming_balance –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: userData } = await supabase
          .from('ton_farming_data')
          .select('farming_balance')
          .eq('user_id', purchase.user_id)
          .single();
          
        if (userData) {
          const balance = parseFloat(userData.farming_balance || '0');
          if (balance > 0) {
            console.log(`  ‚úÖ farming_balance –æ–±–Ω–æ–≤–ª–µ–Ω: ${balance} TON`);
          } else {
            console.log(`  ‚ùå farming_balance –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω: 0 TON`);
          }
        }
        console.log('  ---');
      }
    } else {
      console.log('–ù–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    console.log('\nüîç 4. –ê–ù–ê–õ–ò–ó –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
    const codeCheck = {
      'TonFarmingRepository.activateBoost': '–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å farming_balance',
      'BoostService.purchaseBoost': '–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å depositAmount',
      'tonBoostIncomeScheduler': '–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å farming_balance'
    };
    
    console.log('–û–∂–∏–¥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ:');
    for (const [file, expected] of Object.entries(codeCheck)) {
      console.log(`  ${file}: ${expected}`);
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìã 5. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:\n');
    
    const issues = [];
    
    if (tonData && tonData.every(u => parseFloat(u.farming_balance || '0') === 0)) {
      issues.push('‚ùå –í–°–ï farming_balance = 0 (–∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å)');
    }
    
    if (!hasNewRewards) {
      issues.push('‚ö†Ô∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
    }
    
    if (issues.length > 0) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      issues.forEach(issue => console.log(`  ${issue}`));
      
      console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('  1. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
      console.log('  2. –°–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∑–∏–ª —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞');
      console.log('  3. –ö–µ—à –Ω–µ –æ—á–∏—Å—Ç–∏–ª—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ');
      console.log('  4. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è (–∂–¥–µ—Ç 5 –º–∏–Ω—É—Ç)');
    } else {
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ!');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkAfterServerRestart();