#!/usr/bin/env node

/**
 * –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê BOC PAYLOAD –° @ton/core
 * –¢–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ tonConnectService.ts
 */

import fs from 'fs';
import path from 'path';

async function testRealBOC() {
  console.log("üîç –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ BOC PAYLOAD –° @ton/core");
  console.log("==========================================");

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º @ton/core —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–æ–¥–µ
    const { beginCell } = await import('@ton/core');
    console.log("‚úÖ @ton/core —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω");

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const comment = "UniFarmBoost:999489:1";
    console.log(`üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${comment}"`);

    // –°–æ–∑–¥–∞–µ–º BOC —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–æ–¥–µ
    console.log("\nüî® –°–æ–∑–¥–∞–Ω–∏–µ BOC...");
    const cell = beginCell()
      .storeUint(0, 32) // –û–ø–∫–æ–¥ 0 –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      .storeStringTail(comment) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      .endCell();

    console.log("‚úÖ Cell —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");

    // –ü–æ–ª—É—á–∞–µ–º BOC
    const boc = cell.toBoc();
    console.log(`‚úÖ BOC —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${boc.length} bytes`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    function uint8ArrayToBase64(uint8Array) {
      const binaryString = Array.from(uint8Array)
        .map(byte => String.fromCharCode(byte))
        .join('');
      return btoa(binaryString);
    }

    const payload = uint8ArrayToBase64(boc);
    console.log(`‚úÖ Base64 payload: ${payload}`);
    console.log(`   –î–ª–∏–Ω–∞: ${payload.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64
    const isValidBase64 = /^[A-Za-z0-9+/]*={0,2}$/.test(payload);
    console.log(`‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64: ${isValidBase64}`);

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å fallback
    const fallbackPayload = 'te6cckEBAQEADgAAGAAAAABVbmlGYXJtAACjJA==';
    console.log(`\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° FALLBACK:`);
    console.log(`   –†–µ–∞–ª—å–Ω—ã–π BOC:  ${payload}`);
    console.log(`   Fallback BOC:  ${fallbackPayload}`);
    console.log(`   –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ:    ${payload === fallbackPayload}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log(`\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:`);
    console.log(`‚úÖ @ton/core —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    console.log(`‚úÖ BOC —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫`);
    console.log(`‚úÖ Base64 —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª–∏–¥–µ–Ω`);
    
    if (payload.length > 0) {
      console.log(`‚úÖ –í–´–í–û–î: BOC payload –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ createBocWithComment`);
      console.log(`üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ —ç–º—É–ª—è—Ü–∏–∏ –≤ TonKeeper:`);
      console.log(`   - TON –∞–¥—Ä–µ—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ mainnet`);
      console.log(`   - –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è`);
      console.log(`   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–∞–∑ –ª–∏–º–∏—Ç–∞–º–∏ –∏–ª–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏`);
    } else {
      console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: BOC payload –ø—É—Å—Ç–æ–π`);
    }

  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BOC:`, error.message);
    console.log(`üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
    console.log(`   - @ton/core –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω`);
    console.log(`   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "${comment}"`);
    console.log(`   - –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É @ton/core
    try {
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      console.log(`   @ton/core –≤–µ—Ä—Å–∏—è: ${packageJson.dependencies['@ton/core'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    } catch (e) {
      console.log(`   –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å package.json`);
    }
  }
}

testRealBOC().catch(console.error);