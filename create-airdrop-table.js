/**
 * Creates airdrop_participants table in production database
 */

import { Pool, neonConfig } from '@neondatabase/serverless';
import ws from 'ws';

neonConfig.webSocketConstructor = ws;

const PRODUCTION_DATABASE_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

async function createAirdropTable() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã airdrop_participants...');
  
  const pool = new Pool({ connectionString: PRODUCTION_DATABASE_URL });

  try {
    const client = await pool.connect();
    
    // Create airdrop_participants table
    await client.query(`
      CREATE TABLE IF NOT EXISTS airdrop_participants (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT NOT NULL UNIQUE,
        user_id INTEGER REFERENCES users(id),
        registered_at TIMESTAMP DEFAULT NOW() NOT NULL,
        status TEXT DEFAULT 'active'
      )
    `);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ airdrop_participants —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // Test the table
    const testResult = await client.query('SELECT COUNT(*) FROM airdrop_participants');
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${testResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
    
    client.release();
    await pool.end();
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    await pool.end();
    return false;
  }
}

createAirdropTable();