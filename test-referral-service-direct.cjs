/**
 * –ü–†–Ø–ú–û–ô –¢–ï–°–¢ REFERRALSERVICE.GETREALREFERRALSTATS
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" –≤ production –∫–æ–¥–µ
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º dynamic import –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ES modules
const nodeFetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===');
console.log('SUPABASE_URL:', process.env.SUPABASE_URL ? 'SET' : 'NOT SET');
console.log('SUPABASE_KEY:', process.env.SUPABASE_KEY ? 'SET' : 'NOT SET');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);
console.log('Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

async function testDirectReferralService() {
  try {
    console.log('\n=== –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID=48 ===');
    
    // –¢–æ—á–Ω–æ —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å —á—Ç–æ –¥–µ–ª–∞–µ—Ç ReferralService
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('id', 48)
      .single();
      
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log('- hasUser:', !!user);
    console.log('- userError:', userError);
    console.log('- userErrorMessage:', userError?.message);
    console.log('- userErrorCode:', userError?.code);
    console.log('- userData:', user);
    
    if (userError) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=48 –ù–ï –ù–ê–ô–î–ï–ù');
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(userError, null, 2));
      return false;
    }
    
    if (!user) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –Ω–æ user = null');
      return false;
    }
    
    console.log('\n‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=48 –Ω–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(user, null, 2));
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n=== –¢–ï–°–¢ –ü–û–ò–°–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    
    const { data: transactions, error: transError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, description')
      .eq('user_id', 48)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    console.log('- hasTransactions:', !!transactions);
    console.log('- transactionsCount:', transactions?.length || 0);
    console.log('- transError:', transError);
    
    if (transactions && transactions.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactions.length);
      console.log('–ü–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      transactions.slice(0, 3).forEach((trans, index) => {
        console.log(`  ${index + 1}. ID:${trans.id}, Amount:${trans.amount} ${trans.currency}, Desc:${trans.description?.substring(0, 50)}...`);
      });
    } else {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by = 48 (–ø—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã)
    console.log('\n=== –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–†–Ø–ú–´–• –†–ï–§–ï–†–ê–õ–û–í ===');
    
    const { data: referrals, error: refError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('referred_by', 48);
      
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
    console.log('- hasReferrals:', !!referrals);
    console.log('- referralsCount:', referrals?.length || 0);
    console.log('- refError:', refError);
    
    if (referrals && referrals.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:', referrals.length);
      referrals.forEach((ref, index) => {
        console.log(`  ${index + 1}. User ID:${ref.id}, Username:${ref.username}, Referred by:${ref.referred_by}`);
      });
    } else {
      console.log('‚ùå –ü—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return true;
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:', error);
    console.error('Stack trace:', error.stack);
    return false;
  }
}

async function main() {
  console.log('üöÄ –°–¢–ê–†–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò REFERRAL SERVICE');
  console.log('–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
  
  const success = await testDirectReferralService();
  
  console.log('\n=== –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
  if (success) {
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û');
    console.log('üìã –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('üîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ ReferralService.getRealReferralStats');
  } else {
    console.log('‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨');
    console.log('üìã –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –≤ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }
  
  console.log('–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', new Date().toISOString());
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
main().catch(console.error);