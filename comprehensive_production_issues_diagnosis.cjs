#!/usr/bin/env node
/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º production –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ:
 * 1. –¶–≤–µ—Ç–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
 * 2. TON –±–∞–ª–∞–Ω—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ  
 * 3. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ production
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function diagnoseCriticalProblems() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú PRODUCTION\n');
  console.log('üìã –ó–∞–¥–∞—á–∏:');
  console.log('   1. –¶–≤–µ—Ç–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è');
  console.log('   2. TON –±–∞–ª–∞–Ω—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ'); 
  console.log('   3. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ production\n');

  // ================================
  // 1. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–í–ï–¢–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
  // ================================
  console.log('üîµ –ü–†–û–ë–õ–ï–ú–ê 1: –¶–í–ï–¢–ê TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184
    const { data: tonTransactions, error: tonTxError } = await supabase
      .from('transactions')
      .select('id, type, currency, amount, description, metadata, created_at')
      .eq('user_id', 184)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);

    if (tonTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonTxError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${tonTransactions.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è User 184:`);
      
      tonTransactions.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. Transaction ID: ${tx.id}`);
        console.log(`      Type: ${tx.type}`);
        console.log(`      Currency: ${tx.currency}`);
        console.log(`      Amount: ${tx.amount}`);
        console.log(`      Description: ${tx.description}`);
        console.log(`      Metadata: ${tx.metadata ? JSON.stringify(tx.metadata) : 'null'}`);
        console.log(`      Created: ${tx.created_at}`);

        // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –¥–ª—è —Ü–≤–µ—Ç–∞
        if (tx.metadata && tx.metadata.original_type) {
          console.log(`      üé® Original Type (–¥–ª—è —Ü–≤–µ—Ç–∞): ${tx.metadata.original_type}`);
        }
        
        if (tx.type === 'FARMING_REWARD' && tx.currency === 'TON') {
          console.log(`      üîç –û–∂–∏–¥–∞–µ–º—ã–π —Ü–≤–µ—Ç: –°–ò–ù–ò–ô (TON reward)`);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –æ—Ç–≤–µ—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é API /api/v2/transactions...');
    const fetch = require('node-fetch');
    
    const response = await fetch(`http://localhost:3000/api/v2/transactions?user_id=184&limit=5&currency=TON`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const apiData = await response.json();
      
      if (apiData.success && apiData.data && apiData.data.length > 0) {
        console.log(`‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ${apiData.data.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        
        const firstTx = apiData.data[0];
        console.log('\nüìã –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ API:');
        console.log(`   ID: ${firstTx.id}`);
        console.log(`   Type: ${firstTx.type}`);
        console.log(`   Currency: ${firstTx.currency}`);
        console.log(`   Original Type: ${firstTx.metadata?.original_type || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
        
        if (firstTx.metadata?.original_type === 'TON_BOOST_INCOME') {
          console.log('   üé® –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –°–ò–ù–ò–ô —Ü–≤–µ—Ç –≤ UI');
        } else {
          console.log('   ‚ö†Ô∏è Original type –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞');
        }
      }
    } else {
      console.log(`‚ùå API –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
  }

  // ================================
  // 2. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –ë–ê–õ–ê–ù–°–ê
  // ================================
  console.log('\n\nüí∞ –ü–†–û–ë–õ–ï–ú–ê 2: TON –ë–ê–õ–ê–ù–° –ù–ï –û–¢–û–ë–†–ê–ñ–ê–ï–¢–°–Ø\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å User 184 –≤ –ë–î
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni, uni_deposit_amount')
      .eq('id', 184)
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:', userError);
    } else {
      console.log('üìä –ë–∞–ª–∞–Ω—Å User 184 –≤ –ë–î:');
      console.log(`   TON Balance: ${user.balance_ton}`);
      console.log(`   UNI Balance: ${user.balance_uni}`);
      console.log(`   UNI Deposit: ${user.uni_deposit_amount}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é API /api/v2/wallet/balance...');
    
    const balanceResponse = await fetch(`http://localhost:3000/api/v2/wallet/balance?user_id=184`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      
      if (balanceData.success) {
        console.log('‚úÖ API –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
        console.log(`   TON Balance: ${balanceData.data.balance_ton}`);
        console.log(`   UNI Balance: ${balanceData.data.balance_uni}`);
        
        if (user && Math.abs(user.balance_ton - balanceData.data.balance_ton) > 0.001) {
          console.log('‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –º–µ–∂–¥—É –ë–î –∏ API –±–∞–ª–∞–Ω—Å–∞–º–∏!');
          console.log(`   –ë–î: ${user.balance_ton}, API: ${balanceData.data.balance_ton}`);
        } else {
          console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –≤ –ë–î –∏ API —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        }
      }
    } else {
      console.log(`‚ùå API –±–∞–ª–∞–Ω—Å–∞ –æ—à–∏–±–∫–∞: ${balanceResponse.status} ${balanceResponse.statusText}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    const { data: recentTonTx, error: recentError } = await supabase
      .from('transactions')
      .select('id, amount, description, created_at, metadata')
      .eq('user_id', 184)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(3);

    if (recentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError);
    } else {
      console.log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentTonTx.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
      
      recentTonTx.forEach((tx, i) => {
        const created = new Date(tx.created_at);
        const now = new Date();
        const diffMinutes = (now - created) / (1000 * 60);
        
        console.log(`   ${i + 1}. ID ${tx.id}: ${tx.amount} TON`);
        console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${diffMinutes.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ TON –±–∞–ª–∞–Ω—Å–∞:', error.message);
  }

  // ================================
  // 3. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
  // ================================
  console.log('\n\nüîÅ –ü–†–û–ë–õ–ï–ú–ê 3: –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ê PRODUCTION\n');

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ TON Boost –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π...');
    
    const { data: tonBoostTx, error: boostError } = await supabase
      .from('transactions')
      .select('id, amount, created_at, description, metadata')
      .eq('currency', 'TON')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);

    if (boostError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', boostError);
    } else {
      console.log(`üîç –ê–Ω–∞–ª–∏–∑ ${tonBoostTx.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      let previousTime = null;
      const intervals = [];
      
      tonBoostTx.reverse().forEach((tx, i) => {
        const currentTime = new Date(tx.created_at);
        
        if (previousTime) {
          const intervalMinutes = (currentTime - previousTime) / (1000 * 60);
          intervals.push(intervalMinutes);
          
          console.log(`   ${i}. ID ${tx.id}: ${tx.amount} TON`);
          console.log(`      –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMinutes.toFixed(2)} –º–∏–Ω—É—Ç`);
          console.log(`      –í—Ä–µ–º—è: ${currentTime.toLocaleString()}`);
          
          if (intervalMinutes < 2) {
            console.log('      üö® –ê–ù–û–ú–ê–õ–¨–ù–û –ö–û–†–û–¢–ö–ò–ô –ò–ù–¢–ï–†–í–ê–õ!');
          } else if (intervalMinutes > 7) {
            console.log('      ‚è∞ –î–ª–∏–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)');
          } else if (intervalMinutes >= 4.5 && intervalMinutes <= 5.5) {
            console.log('      ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π 5-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª');
          }
        }
        
        previousTime = currentTime;
      });
      
      if (intervals.length > 0) {
        const avgInterval = intervals.reduce((sum, val) => sum + val, 0) / intervals.length;
        const minInterval = Math.min(...intervals);
        const maxInterval = Math.max(...intervals);
        
        console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¢–ï–†–í–ê–õ–û–í:');
        console.log(`   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${avgInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
        console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
        
        if (avgInterval < 3) {
          console.log('   üö® –ü–†–û–ë–õ–ï–ú–ê: –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω–µ–µ 3 –º–∏–Ω—É—Ç!');
        } else if (avgInterval >= 4.5 && avgInterval <= 5.5) {
          console.log('   ‚úÖ –ù–û–†–ú–ê: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
        } else {
          console.log('   ‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–ò–ï: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 5 –º–∏–Ω—É—Ç–∞–º');
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const { data: activeUsers, error: activeError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_package_id')
      .gt('balance_ton', 0)
      .not('ton_boost_package_id', 'is', null);

    if (activeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', activeError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      activeUsers.forEach((user, i) => {
        console.log(`   ${i + 1}. User ${user.id}: ${user.balance_ton} TON, Package: ${user.ton_boost_package_id}`);
      });
      
      if (activeUsers.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error.message);
  }

  console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
}

diagnoseCriticalProblems();