import { supabase } from './core/supabaseClient';

async function diagnoseAccountAnomalies() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–û–ú–ê–õ–¨–ù–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í');
  console.log('='.repeat(60));

  try {
    // 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 251 —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏
    console.log('\n1Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –ò –†–ê–ë–û–¢–ê–Æ–©–ò–• –ê–ö–ö–ê–£–ù–¢–û–í:');
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç 251
    const { data: user251, error: user251Error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 251)
      .single();

    // –†–∞–±–æ—Ç–∞—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å TON Boost
    const { data: workingUsers, error: workingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_active, boost_package_id')
      .eq('boost_active', true)
      .gt('farming_balance', 0)
      .limit(5);

    if (!user251Error && !workingError && workingUsers) {
      console.log('\nüìä –ü–†–û–ë–õ–ï–ú–ù–´–ô –ê–ö–ö–ê–£–ù–¢ 251:');
      if (user251) {
        console.log(`   TON Balance: ${user251.balance_ton}`);
        console.log(`   UNI Balance: ${user251.balance_uni}`);
        console.log(`   TON Wallet: ${user251.ton_wallet_address || '–ù–ï –ü–†–ò–í–Ø–ó–ê–ù'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${user251.created_at}`);
        console.log(`   TON Boost: ${user251.ton_boost_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–ù–ï –ê–ö–¢–ò–í–ï–ù'}`);
        console.log(`   UNI Farming: ${user251.uni_farming_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–ù–ï –ê–ö–¢–ò–í–ï–ù'}`);
      }

      console.log('\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ê–ö–ö–ê–£–ù–¢–´:');
      for (const workingUser of workingUsers.slice(0, 3)) {
        const { data: userInfo, error: userInfoError } = await supabase
          .from('users')
          .select('*')
          .eq('id', workingUser.user_id)
          .single();

        if (!userInfoError && userInfo) {
          console.log(`\n   User ${workingUser.user_id}:`);
          console.log(`     TON Balance: ${userInfo.balance_ton}`);
          console.log(`     TON Wallet: ${userInfo.ton_wallet_address || '–ù–ï –ü–†–ò–í–Ø–ó–ê–ù'}`);
          console.log(`     TON Boost: ${userInfo.ton_boost_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–ù–ï –ê–ö–¢–ò–í–ï–ù'}`);
          console.log(`     Farming Balance: ${workingUser.farming_balance}`);
          console.log(`     Package: ${workingUser.boost_package_id}`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${userInfo.created_at}`);
        }
      }
    }

    // 2. –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô –í –î–ê–ù–ù–´–•:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    const { data: user251Farming, error: farming251Error } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '251');

    console.log('\nüîç TON FARMING DATA –¥–ª—è User 251:');
    if (!farming251Error && user251Farming && user251Farming.length > 0) {
      user251Farming.forEach((farm, idx) => {
        console.log(`   –ó–∞–ø–∏—Å—å ${idx + 1}:`);
        console.log(`     User ID: ${farm.user_id}`);
        console.log(`     Farming Balance: ${farm.farming_balance}`);
        console.log(`     Boost Active: ${farm.boost_active}`);
        console.log(`     Package ID: ${farm.boost_package_id || '–ù–ï–¢'}`);
        console.log(`     Farming Rate: ${farm.farming_rate || '–ù–ï–¢'}`);
        console.log(`     Last Update: ${farm.last_update || '–ù–ï–¢'}`);
        console.log(`     Created: ${farm.created_at || '–ù–ï–¢'}`);
      });
    } else {
      console.log('‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ï–ô –≤ ton_farming_data –¥–ª—è User 251!');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π –≤ TON –∫–æ—à–µ–ª—å–∫–∞—Ö
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON –ö–û–®–ï–õ–¨–ö–û–í:');
    
    const { data: walletsData, error: walletsError } = await supabase
      .from('users')
      .select('id, ton_wallet_address, balance_ton, ton_boost_active')
      .in('id', [251, ...workingUsers?.map(u => u.user_id) || []])
      .order('id', { ascending: true });

    if (!walletsError && walletsData) {
      console.log('\nüí≥ –°–†–ê–í–ù–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–û–í:');
      walletsData.forEach(user => {
        const isProblematic = user.id === 251;
        console.log(`   User ${user.id} ${isProblematic ? '‚ùå (–ü–†–û–ë–õ–ï–ú–ù–´–ô)' : '‚úÖ'}:`);
        console.log(`     Wallet: ${user.ton_wallet_address || '–ù–ï –ü–†–ò–í–Ø–ó–ê–ù'}`);
        console.log(`     Balance: ${user.balance_ton} TON`);
        console.log(`     Boost Active: ${user.ton_boost_active}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞
        if (user.ton_wallet_address) {
          const isValidFormat = user.ton_wallet_address.startsWith('0:') || 
                               user.ton_wallet_address.startsWith('EQ') ||
                               user.ton_wallet_address.startsWith('UQ');
          console.log(`     –§–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞: ${isValidFormat ? '–í–ê–õ–ò–î–ù–´–ô' : '‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô'}`);
        }
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ—Ç User 251
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –°–õ–ï–î–û–í –î–ï–ü–û–ó–ò–¢–û–í USER 251:');
    
    // –ò—â–µ–º –ª—é–±—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏ TON
    const { data: bigTonTx, error: bigTonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 251)
      .or('amount_ton.gt.0.1,amount.gt.0.1')
      .order('created_at', { ascending: false})
      .limit(10);

    if (!bigTonError && bigTonTx && bigTonTx.length > 0) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ –∫—Ä—É–ø–Ω—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${bigTonTx.length}`);
      bigTonTx.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. [${tx.created_at}] ${tx.type}`);
        console.log(`      Amount TON: ${tx.amount_ton}, Amount: ${tx.amount}`);
        console.log(`      Description: ${tx.description}`);
        console.log(`      Status: ${tx.status}`);
      });
    } else {
      console.log('‚ùå –ö—Ä—É–ø–Ω—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π
    console.log('\n5Ô∏è‚É£ –°–ò–°–¢–ï–ú–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    const { data: duplicateCheck, error: dupError } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('telegram_id', user251?.telegram_id)
      .order('id', { ascending: true });

    if (!dupError && duplicateCheck && duplicateCheck.length > 1) {
      console.log(`üö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –ê–ö–ö–ê–£–ù–¢–´: ${duplicateCheck.length} —Å Telegram ID ${user251?.telegram_id}`);
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 6. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    console.log('\n6Ô∏è‚É£ –ü–ê–¢–¢–ï–†–ù–´ –£–°–ü–ï–®–ù–´–• VS –ù–ï–£–°–ü–ï–®–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í:');
    
    const { data: allTonUsers, error: allTonError } = await supabase
      .from('users')
      .select('id, created_at, ton_wallet_address, balance_ton, ton_boost_active')
      .gt('balance_ton', 0);

    if (!allTonError && allTonUsers) {
      const successful = allTonUsers.filter(u => u.ton_boost_active && u.balance_ton > 0);
      const problematic = allTonUsers.filter(u => !u.ton_boost_active && u.balance_ton > 0);
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${successful.length}`);
      console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${problematic.length}`);
      
      if (problematic.length > 0) {
        console.log('\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´:');
        problematic.forEach(user => {
          console.log(`   User ${user.id}: ${user.balance_ton} TON, boost: ${user.ton_boost_active}`);
          console.log(`     Wallet: ${user.ton_wallet_address || '–ù–ï–¢'}`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        });
      }
    }

    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑ –∞–Ω–æ–º–∞–ª–∏–π
    console.log('\n7Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó –ê–ù–û–ú–ê–õ–ò–ô:');
    
    console.log('\nüéØ –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ê–ù–û–ú–ê–õ–¨–ù–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø:');
    console.log('   1. –ü—Ä–æ–±–ª–µ–º—ã —Å TON Connect –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤');
    console.log('   2. –†–∞–∑–ª–∏—á–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ TON –∞–¥—Ä–µ—Å–æ–≤ (0: vs EQ vs UQ)');
    console.log('   3. –û—à–∏–±–∫–∏ –≤ scheduler\'–∞—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   4. –ü—Ä–æ–±–ª–µ–º—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    console.log('   5. –î—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   6. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –Ω–∞ blockchain —É—Ä–æ–≤–Ω–µ');

    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User 251');
    console.log('   2. –°—Ä–∞–≤–Ω–∏—Ç—å JWT —Ç–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TON Connect —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤');
    console.log('   4. –ù–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   5. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —à–∞–≥–æ–≤');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

diagnoseAccountAnomalies().catch(console.error);