#!/usr/bin/env node

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ UNI Farming
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –Ω–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
 */

console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ù–¢–ï–†–í–ê–õ–¨–ù–û–ì–û –†–ï–ñ–ò–ú–ê UNI FARMING');
console.log('='.repeat(60));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const intervalMode = process.env.UNI_FARMING_INTERVAL_MODE;
console.log(`\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: UNI_FARMING_INTERVAL_MODE = "${intervalMode}"`);

if (intervalMode === 'true') {
  console.log('‚úÖ –ò–ù–¢–ï–†–í–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù');
} else if (intervalMode === 'false') {
  console.log('‚ö†Ô∏è  –ù–ê–ö–û–ü–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)');
} else {
  console.log('‚ùå –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js:');
import { execSync } from 'child_process';

try {
  const processes = execSync('ps aux | grep -E "node|npm|tsx" | grep -v grep', { encoding: 'utf8' });
  const lines = processes.split('\n').filter(line => line.trim());
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${lines.length} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js:`);
  
  let mainServer = 0;
  let duplicates = 0;
  
  lines.forEach((line, index) => {
    const parts = line.split(/\s+/);
    const pid = parts[1];
    const command = line.substring(line.indexOf(parts[10]));
    
    console.log(`  ${index + 1}. PID ${pid}: ${command}`);
    
    if (command.includes('server/index.ts') || command.includes('npm run dev')) {
      mainServer++;
    }
    
    if (command.includes('farming') || command.includes('scheduler')) {
      duplicates++;
    }
  });
  
  console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:`);
  console.log(`  - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: ${mainServer} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤)`);
  console.log(`  - –î—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: ${duplicates} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤)`);
  
  if (mainServer === 1) {
    console.log('‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤');
  } else {
    console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã!');
  }
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
console.log('\nüìÑ –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:');
try {
  const logFiles = execSync('find . -name "*.log" -o -name "*.txt" | grep -v node_modules | head -10', { encoding: 'utf8' });
  const files = logFiles.split('\n').filter(f => f.trim());
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤:`);
  files.forEach(file => console.log(`  - ${file}`));
  
  // –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
  if (files.length > 0) {
    console.log('\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ:');
    try {
      const recentLogs = execSync(`tail -n 50 ${files[0]} | grep -E "UnifiedFarmingCalculator|INTERVAL|ACCUMULATIVE|farming.*income" | tail -5`, { encoding: 'utf8' });
      if (recentLogs.trim()) {
        console.log(recentLogs);
      } else {
        console.log('  –ó–∞–ø–∏—Å–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫–∞—Ö');
      }
    } catch (e) {
      console.log('  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏:', e.message);
    }
  }
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
console.log('\n‚è∞ –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:');
const now = new Date();
const nextCron = new Date(now);
nextCron.setMinutes(Math.ceil(now.getMinutes() / 5) * 5, 0, 0);

const timeToNext = nextCron.getTime() - now.getTime();
const minutesToNext = Math.floor(timeToNext / 60000);
const secondsToNext = Math.floor((timeToNext % 60000) / 1000);

console.log(`  –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);
console.log(`  –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${nextCron.toISOString()}`);
console.log(`  –û—Å—Ç–∞–ª–æ—Å—å: ${minutesToNext}–º ${secondsToNext}—Å`);

console.log('\nüéØ –†–ï–ó–Æ–ú–ï:');
console.log('='.repeat(60));

if (intervalMode === 'true') {
  console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º');
  console.log('üìã –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: ~0.57 UNI –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
} else {
  console.log('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ');
  console.log('üìã –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:');
  console.log('   UNI_FARMING_INTERVAL_MODE=true');
}

console.log('\nüîÑ –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
console.log('   node monitor-interval-mode.js');
console.log('   watch -n 30 "node monitor-interval-mode.js"');