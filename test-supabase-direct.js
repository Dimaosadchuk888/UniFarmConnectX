#!/usr/bin/env node

/**
 * –ü—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ Supabase –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function analyzeSupabaseDatabase() {
  console.log('=== –ü–†–Ø–ú–û–ô –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE ===\n');
  console.log('URL:', process.env.SUPABASE_URL?.substring(0, 30) + '...');
  console.log('–î–∞—Ç–∞:', new Date().toLocaleString('ru-RU'));
  console.log('='.repeat(60) + '\n');

  const report = [];

  // 1. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ USERS
  console.log('üìä 1. –¢–ê–ë–õ–ò–¶–ê USERS');
  console.log('-'.repeat(40));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .limit(5);
    
    if (error) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ users: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ' + error.message);
    } else if (!users || users.length === 0) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ users: –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞, –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π');
    } else {
      report.push(`‚úî –¢–∞–±–ª–∏—Ü–∞ users: –ê–∫—Ç–∏–≤–Ω–∞, ${users.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const user = users[0];
      const fields = Object.keys(user);
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', fields.join(', '));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
      const criticalFields = ['id', 'telegram_id', 'username', 'ref_code', 'balance_uni', 'balance_ton'];
      const missingFields = criticalFields.filter(f => !fields.includes(f));
      
      if (missingFields.length > 0) {
        report.push(`‚úñ –¢–∞–±–ª–∏—Ü–∞ users: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
      } else {
        report.push('‚úî –¢–∞–±–ª–∏—Ü–∞ users: –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å ref_code
      const usersWithRefCode = users.filter(u => u.ref_code && u.ref_code.trim() !== '');
      if (usersWithRefCode.length === users.length) {
        report.push('‚úî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã: –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      } else {
        report.push(`‚ùì –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã: –¢–æ–ª—å–∫–æ —É ${usersWithRefCode.length}/${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º farming –ø–æ–ª—è
      if ('uni_farming_start_timestamp' in user) {
        report.push('‚úî Farming –ø–æ–ª—è: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users');
      } else {
        report.push('‚ùì Farming –ø–æ–ª—è: –í–æ–∑–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü–µ');
      }
    }
  } catch (error) {
    report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ users: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
  }

  // 2. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ TRANSACTIONS
  console.log('\nüí∞ 2. –¢–ê–ë–õ–ò–¶–ê TRANSACTIONS');
  console.log('-'.repeat(40));
  
  try {
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ transactions: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ' + error.message);
    } else if (!transactions || transactions.length === 0) {
      report.push('‚ùì –¢–∞–±–ª–∏—Ü–∞ transactions: –ü—É—Å—Ç–∞—è, –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
    } else {
      report.push(`‚úî –¢–∞–±–ª–∏—Ü–∞ transactions: –ê–∫—Ç–∏–≤–Ω–∞, ${transactions.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const types = [...new Set(transactions.map(t => t.type))];
      console.log('–¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', types.join(', '));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
      const deposits = transactions.filter(t => 
        t.type === 'DEPOSIT' || 
        t.type === 'TON_DEPOSIT' || 
        t.type === 'UNI_DEPOSIT'
      );
      
      if (deposits.length > 0) {
        report.push(`‚úî –î–µ–ø–æ–∑–∏—Ç—ã: –§–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –ë–î (${deposits.length} –Ω–∞–π–¥–µ–Ω–æ)`);
      } else {
        report.push('‚úñ –î–µ–ø–æ–∑–∏—Ç—ã: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const tx = transactions[0];
      if (tx.user_id && tx.amount_uni !== undefined && tx.amount_ton !== undefined) {
        report.push('‚úî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è (user_id, amount_uni, amount_ton)');
      } else {
        report.push('‚ùì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—è–º–∏');
      }
    }
  } catch (error) {
    report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ transactions: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
  }

  // 3. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ BOOST_PURCHASES
  console.log('\nüöÄ 3. –¢–ê–ë–õ–ò–¶–ê BOOST_PURCHASES');
  console.log('-'.repeat(40));
  
  try {
    const { data: boosts, error } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('status', 'active')
      .limit(10);
    
    if (error) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ boost_purchases: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ' + error.message);
    } else if (!boosts || boosts.length === 0) {
      report.push('‚ùì –¢–∞–±–ª–∏—Ü–∞ boost_purchases: –ü—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      const { data: allBoosts } = await supabase
        .from('boost_purchases')
        .select('*')
        .limit(1);
      
      if (!allBoosts || allBoosts.length === 0) {
        report.push('‚úñ TON Boost –ø–æ–∫—É–ø–∫–∏: –ù–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –ë–î');
      }
    } else {
      report.push(`‚úî –¢–∞–±–ª–∏—Ü–∞ boost_purchases: –ê–∫—Ç–∏–≤–Ω–∞, ${boosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤`);
      
      const boost = boosts[0];
      if (boost.user_id && boost.package_id && boost.amount && boost.rate) {
        report.push('‚úî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Boost: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è (user_id, package_id, amount, rate)');
      } else {
        report.push('‚ùì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Boost: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—è–º–∏');
      }
    }
  } catch (error) {
    report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ boost_purchases: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
  }

  // 4. –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
  console.log('\nüë• 4. –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê');
  console.log('-'.repeat(40));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ referred_by
    const { data: referrals, error } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .not('referred_by', 'is', null)
      .limit(10);
    
    if (error) {
      report.push('‚úñ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ' + error.message);
    } else if (!referrals || referrals.length === 0) {
      report.push('‚ùì –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏: –ù–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)');
    } else {
      report.push(`‚úî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏: –†–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ referred_by (${referrals.length} —Å–≤—è–∑–µ–π)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É referrals
    const { data: oldReferrals, error: oldError } = await supabase
      .from('referrals')
      .select('*')
      .limit(1);
    
    if (!oldError && oldReferrals) {
      report.push('‚ùì –¢–∞–±–ª–∏—Ü–∞ referrals: –°—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å referred_by)');
    }
  } catch (error) {
    report.push('‚úñ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
  }

  // 5. –ê–ù–ê–õ–ò–ó FARMING –î–ê–ù–ù–´–•
  console.log('\nüåæ 5. FARMING –î–ê–ù–ù–´–ï');
  console.log('-'.repeat(40));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º farming –ø–æ–ª—è –≤ users
    const { data: farmers, error } = await supabase
      .from('users')
      .select('id, uni_farming_start_timestamp, uni_deposit_amount, ton_farming_balance')
      .not('uni_deposit_amount', 'eq', '0')
      .limit(10);
    
    if (error) {
      report.push('‚úñ Farming –¥–∞–Ω–Ω—ã–µ: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ' + error.message);
    } else if (!farmers || farmers.length === 0) {
      report.push('‚ùì –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ—Ä—ã: –ù–µ –Ω–∞–π–¥–µ–Ω—ã (–Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤)');
    } else {
      report.push(`‚úî Farming –¥–∞–Ω–Ω—ã–µ: –•—Ä–∞–Ω—è—Ç—Å—è –≤ users (${farmers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É farming_sessions
    const { data: sessions } = await supabase
      .from('farming_sessions')
      .select('*')
      .limit(1);
    
    if (sessions && sessions.length > 0) {
      report.push('‚ùì –¢–∞–±–ª–∏—Ü–∞ farming_sessions: –°—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)');
    }
  } catch (error) {
    report.push('‚úñ Farming –¥–∞–Ω–Ω—ã–µ: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
  }

  // 6. –ê–ù–ê–õ–ò–ó –ú–ò–°–°–ò–ô
  console.log('\nüéØ 6. –°–ò–°–¢–ï–ú–ê –ú–ò–°–°–ò–ô');
  console.log('-'.repeat(40));
  
  try {
    const { data: missions, error } = await supabase
      .from('missions')
      .select('*')
      .limit(20);
    
    if (error) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ missions: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ' + error.message);
    } else if (!missions || missions.length === 0) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ missions: –ü—É—Å—Ç–∞—è, –º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } else {
      report.push(`‚úî –¢–∞–±–ª–∏—Ü–∞ missions: –ê–∫—Ç–∏–≤–Ω–∞, ${missions.length} –º–∏—Å—Å–∏–π`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const { data: progress, error: progressError } = await supabase
      .from('mission_progress')
      .select('*')
      .limit(10);
    
    if (progressError) {
      report.push('‚úñ –¢–∞–±–ª–∏—Ü–∞ mission_progress: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ' + progressError.message);
    } else if (!progress || progress.length === 0) {
      report.push('‚úñ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–π: –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –ë–î');
    } else {
      report.push(`‚úî –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–π: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è (${progress.length} –∑–∞–ø–∏—Å–µ–π)`);
    }
  } catch (error) {
    report.push('‚úñ –°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ' + error.message);
  }

  // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢\n');
  
  const working = report.filter(r => r.startsWith('‚úî'));
  const notWorking = report.filter(r => r.startsWith('‚úñ'));
  const suspicious = report.filter(r => r.startsWith('‚ùì'));
  
  console.log('‚úî –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢:');
  working.forEach(item => console.log(item));
  
  console.log('\n‚úñ –ß–¢–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢:');
  notWorking.forEach(item => console.log(item));
  
  console.log('\n‚ùì –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ú–û–ú–ï–ù–¢–´:');
  suspicious.forEach(item => console.log(item));
  
  console.log('\n' + '='.repeat(60));
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
  try {
    const { data: tables } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public');
    
    if (tables) {
      console.log('\n–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î:', tables.map(t => t.table_name).join(', '));
    }
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeSupabaseDatabase().catch(console.error);