/**
 * üîç –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ tx_hash_unique –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
 */

import { supabase } from './core/supabase';

async function checkDatabaseUniqueIndex(): Promise<void> {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê –ù–ê TX_HASH_UNIQUE');
  console.log('=' .repeat(70));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ü–†–û–í–ï–†–ö–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ë–î)');
  console.log('=' .repeat(70));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ transactions
    console.log('\nüìã 1. –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í –ù–ê –¢–ê–ë–õ–ò–¶–ï TRANSACTIONS:');
    
    const { data: indexes, error: indexError } = await supabase
      .rpc('get_table_indexes', { table_name: 'transactions' });
      
    if (indexError) {
      console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ RPC, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ constraint violations
      const testTxHash = 'test_duplicate_' + Date.now();
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π user_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const { data: existingUser } = await supabase
          .from('users')
          .select('id')
          .limit(1)
          .single();
          
        if (!existingUser) {
          console.log('   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —Ä–µ–∞–ª—å–Ω—ã–º user_id
        const { error: firstInsertError } = await supabase
          .from('transactions')
          .insert({
            user_id: existingUser.id,
            type: 'FARMING_REWARD',
            amount: '0.001',
            amount_uni: '0',
            amount_ton: '0.001',
            currency: 'TON',
            status: 'completed',
            description: 'Test duplicate check',
            tx_hash_unique: testTxHash,
            metadata: { test: true }
          });
          
        if (firstInsertError) {
          console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å: ${firstInsertError.message}`);
          return;
        }
        
        console.log('   ‚úÖ –ü–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Ç–µ–º –∂–µ user_id
        const { error: duplicateError } = await supabase
          .from('transactions')
          .insert({
            user_id: existingUser.id,
            type: 'FARMING_REWARD',
            amount: '0.002',
            amount_uni: '0',
            amount_ton: '0.002',
            currency: 'TON',
            status: 'completed',
            description: 'Test duplicate check 2',
            tx_hash_unique: testTxHash,
            metadata: { test: true }
          });
          
        if (duplicateError) {
          if (duplicateError.message.includes('duplicate') || duplicateError.message.includes('unique')) {
            console.log('   ‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ò–ù–î–ï–ö–° –†–ê–ë–û–¢–ê–ï–¢!');
            console.log(`   üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${duplicateError.message}`);
          } else {
            console.log('   ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ:');
            console.log(`   üìã ${duplicateError.message}`);
          }
        } else {
          console.log('   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –î—É–±–ª–∏–∫–∞—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω! –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ù–ï –†–ê–ë–û–¢–ê–ï–¢!');
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        await supabase
          .from('transactions')
          .delete()
          .eq('tx_hash_unique', testTxHash);
          
        console.log('   üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã');
        
      } catch (testError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—É–±–ª–µ–π: ${testError}`);
      }
      
    } else {
      console.log('   ‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω:');
      indexes?.forEach((index: any) => {
        console.log(`     - ${index.indexname}: ${index.indexdef}`);
        if (index.indexdef.includes('tx_hash_unique')) {
          console.log('       üéØ –ù–ê–ô–î–ï–ù –ò–ù–î–ï–ö–° –ù–ê TX_HASH_UNIQUE!');
        }
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—è tx_hash_unique
    console.log('\nüìã 2. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–û–õ–Ø TX_HASH_UNIQUE:');
    
    const { data: sampleTx } = await supabase
      .from('transactions')
      .select('id, tx_hash_unique')
      .not('tx_hash_unique', 'is', null)
      .limit(1)
      .single();
      
    if (sampleTx) {
      console.log(`   ‚úÖ –ü–æ–ª–µ tx_hash_unique —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ`);
      console.log(`   üìã –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è: ${sampleTx.tx_hash_unique?.substring(0, 30)}...`);
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º tx_hash_unique');
    }

    // 3. –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–µ–π –≤ –±–∞–∑–µ
    console.log('\nüìã 3. –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –î–£–ë–õ–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å tx_hash_unique
    const { data: allTxWithHash } = await supabase
      .from('transactions')
      .select('id, user_id, tx_hash_unique, amount_ton, created_at, description')
      .not('tx_hash_unique', 'is', null)
      .order('created_at', { ascending: false })
      .limit(100);
      
    console.log(`   üìä –ó–∞–ø–∏—Å–µ–π —Å tx_hash_unique: ${allTxWithHash?.length || 0}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tx_hash_unique –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
    const hashGroups: Record<string, any[]> = {};
    allTxWithHash?.forEach(tx => {
      if (!hashGroups[tx.tx_hash_unique]) {
        hashGroups[tx.tx_hash_unique] = [];
      }
      hashGroups[tx.tx_hash_unique].push(tx);
    });
    
    const duplicateHashes = Object.entries(hashGroups).filter(([hash, txs]) => txs.length > 1);
    
    console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø —Å –¥—É–±–ª—è–º–∏: ${duplicateHashes.length}`);
    
    if (duplicateHashes.length > 0) {
      console.log('\n   üìä –î–ï–¢–ê–õ–ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
      duplicateHashes.forEach(([hash, txs]) => {
        console.log(`     TX Hash: ${hash.substring(0, 30)}...`);
        console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π: ${txs.length}`);
        txs.forEach(tx => {
          console.log(`       - ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON, Date: ${new Date(tx.created_at).toLocaleString()}`);
        });
        console.log('');
      });
    } else {
      console.log('   ‚úÖ –î—É–±–ª–µ–π –ø–æ tx_hash_unique –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã User 25
    console.log('\nüìã 4. –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í USER 25 (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏):');
    
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const { data: user25Deposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .in('type', ['TON_DEPOSIT', 'DEPOSIT', 'FARMING_REWARD'])
      .like('description', '%TON deposit%')
      .gte('created_at', yesterday.toISOString())
      .order('created_at', { ascending: false });
      
    console.log(`   üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤ User 25 –∑–∞ 24 —á–∞—Å–∞: ${user25Deposits?.length || 0}`);
    
    if (user25Deposits && user25Deposits.length > 0) {
      const hashGroups25: Record<string, any[]> = {};
      user25Deposits.forEach(tx => {
        const hash = tx.metadata?.tx_hash || tx.metadata?.ton_tx_hash || tx.tx_hash_unique || 'NO_HASH';
        if (!hashGroups25[hash]) {
          hashGroups25[hash] = [];
        }
        hashGroups25[hash].push(tx);
      });
      
      const duplicates25 = Object.entries(hashGroups25).filter(([hash, txs]) => 
        txs.length > 1 && hash !== 'NO_HASH'
      );
      
      console.log(`   üîç –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ User 25: ${duplicates25.length}`);
      
      if (duplicates25.length > 0) {
        duplicates25.forEach(([hash, txs]) => {
          console.log(`     Hash: ${hash.substring(0, 20)}... (${txs.length} –¥—É–±–ª–µ–π)`);
          txs.forEach(tx => {
            console.log(`       - ${new Date(tx.created_at).toLocaleString()}: ${tx.amount_ton} TON`);
          });
        });
      }
    }

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìã 5. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log('-' .repeat(50));
    
    if (duplicateHashes.length === 0) {
      console.log('   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   ‚úÖ –í –±–∞–∑–µ –Ω–µ—Ç –¥—É–±–ª–µ–π –ø–æ tx_hash_unique');
      console.log('   üí° –ü—Ä–æ–±–ª–µ–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–µ–Ω–∞');
    } else {
      console.log('   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      console.log('   ‚ùå –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      console.log('   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞');
    }
    
    console.log('\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDatabaseUniqueIndex()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    process.exit(1);
  });