/**
 * –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û REFERRALSERVICE –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–•–ï–ú–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ amount_uni/amount_ton
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testUpdatedReferralService() {
  try {
    const userId = 48;
    
    console.log('=== –¢–ï–°–¢ 1: –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID=48 ===');
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('id', userId)
      .single();
      
    if (userError || !user) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
    
    console.log('\n=== –¢–ï–°–¢ 2: –ü–û–ò–°–ö –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ö–û–õ–û–ù–ö–ê–ú–ò ===');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ ReferralService
    const { data: referralTransactions, error: refError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_uni, amount_ton, currency, description, created_at')
      .eq('user_id', userId)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false });
      
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    console.log('- hasTransactions:', !!referralTransactions);
    console.log('- transactionsCount:', referralTransactions?.length || 0);
    console.log('- hasError:', !!refError);
    console.log('- errorMessage:', refError?.message);
    
    if (refError) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –≤ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', refError);
      return false;
    }
    
    if (!referralTransactions || referralTransactions.length === 0) {
      console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return false;
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', referralTransactions.length);
    
    console.log('\n=== –¢–ï–°–¢ 3: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 
    referralTransactions.slice(0, 3).forEach((tx, index) => {
      console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
      console.log(`  ID: ${tx.id}`);
      console.log(`  amount_uni: ${tx.amount_uni}`);
      console.log(`  amount_ton: ${tx.amount_ton}`);
      console.log(`  currency: ${tx.currency}`);
      console.log(`  description: ${tx.description?.substring(0, 60)}...`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const levelMatch = tx.description?.match(/L(\d+)/);
      if (levelMatch) {
        const level = parseInt(levelMatch[1]);
        console.log(`  ‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–≤–ª–µ—á–µ–Ω: L${level}`);
      } else {
        console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —É—Ä–æ–≤–µ–Ω—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è`);
      }
      console.log('');
    });
    
    console.log('\n=== –¢–ï–°–¢ 4: –°–ò–ú–£–õ–Ø–¶–ò–Ø –õ–û–ì–ò–ö–ò REFERRALSERVICE ===');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ getRealReferralStats
    const levelIncome = {};
    const levelCounts = {};
    
    referralTransactions.forEach(tx => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const levelMatch = tx.description?.match(/L(\d+)/);
      if (levelMatch) {
        const level = parseInt(levelMatch[1]);
        if (!levelIncome[level]) {
          levelIncome[level] = { uni: 0, ton: 0 };
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (tx.amount_uni && parseFloat(tx.amount_uni) > 0) {
          levelIncome[level].uni += parseFloat(tx.amount_uni);
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏  
        if (tx.amount_ton && parseFloat(tx.amount_ton) > 0) {
          levelIncome[level].ton += parseFloat(tx.amount_ton);
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ
        if (!levelCounts[level]) {
          levelCounts[level] = 0;
        }
        levelCounts[level]++;
      }
    });
    
    console.log('–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
    Object.keys(levelIncome).sort((a, b) => parseInt(a) - parseInt(b)).forEach(level => {
      const income = levelIncome[level];
      const count = levelCounts[level] || 0;
      console.log(`  –£—Ä–æ–≤–µ–Ω—å ${level}: ${income.uni.toFixed(6)} UNI + ${income.ton.toFixed(6)} TON (${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
    });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥
    let totalUniEarned = 0;
    let totalTonEarned = 0;
    Object.values(levelIncome).forEach(income => {
      totalUniEarned += income.uni;
      totalTonEarned += income.ton;
    });
    
    console.log(`\n‚úÖ –û–ë–©–ò–ô –î–û–•–û–î: ${totalUniEarned.toFixed(6)} UNI + ${totalTonEarned.toFixed(6)} TON`);
    
    console.log('\n=== –¢–ï–°–¢ 5: –ü–û–ò–°–ö –ü–†–Ø–ú–´–• –†–ï–§–ï–†–ê–õ–û–í ===');
    
    const { data: directReferrals, error: refDirectError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('referred_by', userId);
      
    if (refDirectError) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', refDirectError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${directReferrals?.length || 0}`);
      if (directReferrals && directReferrals.length > 0) {
        directReferrals.forEach((ref, index) => {
          console.log(`  ${index + 1}. User ID:${ref.id}, Username:${ref.username}`);
        });
      }
    }
    
    return true;
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:', error);
    return false;
  }
}

async function main() {
  console.log('üöÄ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û REFERRAL SERVICE');
  console.log('–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
  console.log('');
  
  const success = await testUpdatedReferralService();
  
  console.log('\n=== –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
  if (success) {
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û');
    console.log('üìã –í–´–í–û–î: ReferralService –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('üîß –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  } else {
    console.log('‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨');
    console.log('üìã –í–´–í–û–î: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
}

main().catch(console.error);