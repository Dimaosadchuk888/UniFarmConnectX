import { supabase } from './core/supabase';

async function investigateFarmingDeposits() {
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('=====================================\n');

  const userId = 74;
  
  try {
    // 1. –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π UNI
    console.log('1Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–û–ô –°–£–ú–ú–û–ô UNI');
    const { data: negativeTransactions, error: negError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('currency', 'UNI')
      .lt('amount', 0)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (negError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', negError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π UNI: ${negativeTransactions?.length || 0}`);
      if (negativeTransactions && negativeTransactions.length > 0) {
        negativeTransactions.forEach((tx, index) => {
          console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
          console.log(`ID: ${tx.id}`);
          console.log(`–¢–∏–ø: ${tx.type}`);
          console.log(`–°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
          console.log(`–°–æ–∑–¥–∞–Ω–∞: ${tx.created_at}`);
        });
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    const { data: allTypes, error: typesError } = await supabase
      .from('transactions')
      .select('type')
      .eq('user_id', userId);
    
    if (typesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', typesError);
    } else {
      const uniqueTypes = [...new Set(allTypes?.map(t => t.type) || [])];
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', uniqueTypes);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—Ä–µ–º—è –æ–∫–æ–ª–æ 12:08 (–≤—Ä–µ–º—è –¥–µ–ø–æ–∑–∏—Ç–∞)
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –û–ö–û–õ–û –í–†–ï–ú–ï–ù–ò –î–ï–ü–û–ó–ò–¢–ê (12:08)');
    const depositTime = '2025-07-10T12:08:04.389';
    const beforeTime = new Date(new Date(depositTime).getTime() - 60000).toISOString(); // 1 –º–∏–Ω—É—Ç–∞ –¥–æ
    const afterTime = new Date(new Date(depositTime).getTime() + 60000).toISOString(); // 1 –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ
    
    const { data: aroundDeposit, error: aroundError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', beforeTime)
      .lte('created_at', afterTime)
      .order('created_at', { ascending: false });
    
    if (aroundError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', aroundError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–∫–æ–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ${aroundDeposit?.length || 0}`);
      if (aroundDeposit && aroundDeposit.length > 0) {
        aroundDeposit.forEach((tx, index) => {
          console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
          console.log(`ID: ${tx.id}`);
          console.log(`–¢–∏–ø: ${tx.type}`);
          console.log(`–°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
          console.log(`–°–æ–∑–¥–∞–Ω–∞: ${tx.created_at}`);
        });
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    console.log('\n4Ô∏è‚É£ –†–ê–°–ß–ï–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê');
    const expectedDepositSum = 200442; // –ò–∑ UI
    const oldBalance = 821000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const currentBalance = 670558.000323; // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const actualDifference = oldBalance - currentBalance;
    
    console.log(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${oldBalance} UNI`);
    console.log(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} UNI`);
    console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${actualDifference} UNI`);
    console.log(`–û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${expectedDepositSum} UNI`);
    console.log(`–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.abs(actualDifference - expectedDepositSum)} UNI`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É farming_sessions –ø–æ–¥—Ä–æ–±–Ω–µ–µ
    console.log('\n5Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ FARMING_SESSIONS');
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const { data: testSession, error: testError } = await supabase
      .from('farming_sessions')
      .select('*')
      .limit(1);
    
    if (testError && testError.message.includes('does not exist')) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ farming_sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è');
    } else if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', testError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ farming_sessions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      if (testSession && testSession.length > 0) {
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:', Object.keys(testSession[0]));
      }
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
investigateFarmingDeposits();