/**
 * üîç –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• –¢–ê–ë–õ–ò–¶ –ù–ê –ù–ê–õ–ò–ß–ò–ï –ü–ê–ö–ï–¢–ê 290
 */

import { supabase } from './core/supabase';

async function simpleTableCheck290() {
  console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• –¢–ê–ë–õ–ò–¶ –ù–ê –ü–ê–ö–ï–¢ ID 290 ===\n');

  // –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const tablesToCheck = [
    'users',
    'transactions', 
    'boost_purchases',
    'boost_packages',
    'ton_boost_packages',
    'ton_farming_data',
    'ton_deposits',
    'ton_boost_deposits',
    'farming_packages',
    'user_boosts',
    'boosts'
  ];

  for (const tableName of tablesToCheck) {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
    console.log('=====================================');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å ID 290
      const fieldsToCheck = ['id', 'boost_id', 'package_id', 'ton_boost_package_id', 'boost_package_id'];
      
      for (const field of fieldsToCheck) {
        try {
          const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .eq(field, 290)
            .limit(5);

          if (!error && data?.length) {
            console.log(`   üéØ –ù–ê–ô–î–ï–ù–û! –í –ø–æ–ª–µ ${field}:`);
            data.forEach((record, index) => {
              console.log(`      –ó–∞–ø–∏—Å—å #${index + 1}:`);
              console.log(`      ${JSON.stringify(record, null, 6)}`);
            });
          }
        } catch (e) {
          // –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ 290
      try {
        const { data: textData, error: textError } = await supabase
          .from(tableName)
          .select('*')
          .or('description.ilike.%290%,name.ilike.%290%,title.ilike.%290%')
          .limit(3);

        if (!textError && textData?.length) {
          console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "290" –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö:`);
          textData.forEach((record, index) => {
            console.log(`      –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å—å #${index + 1}:`);
            console.log(`      ${JSON.stringify(record, null, 6)}`);
          });
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º TON Boost –ø–æ–ª—è
      if (tableName === 'users') {
        try {
          const { data: userData, error: userError } = await supabase
            .from('users')
            .select('id, telegram_id, username, ton_boost_package_id, ton_boost_active, ton_boost_rate, balance_ton')
            .not('ton_boost_package_id', 'is', null)
            .limit(10);

          if (!userError && userData?.length) {
            console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–∞–∫–µ—Ç–∞–º–∏:`);
            userData.forEach(user => {
              console.log(`      User ${user.id}: Package ID ${user.ton_boost_package_id}, Active: ${user.ton_boost_active}, Rate: ${user.ton_boost_rate}%`);
            });
          }
        } catch (e) {
          console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TON Boost –ø–æ–ª–µ–π: ${e}`);
        }
      }

      console.log(`   ‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ ${tableName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);

    } catch (tableError: any) {
      if (tableError.message?.includes('does not exist')) {
        console.log(`   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${tableName}: ${tableError.message}`);
      }
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∏—Å–∫ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –ø–æ metadata
  console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ metadata –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:');
  console.log('====================================================');
  
  try {
    const { data: metadataTransactions, error: metadataError } = await supabase
      .from('transactions')
      .select('*')
      .or('metadata::text.ilike.%290%,metadata->>boost_id.eq.290,metadata->>package_id.eq.290')
      .limit(10);

    if (!metadataError && metadataTransactions?.length) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${metadataTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 290 –≤ metadata:`);
      metadataTransactions.forEach((tx, index) => {
        console.log(`\n   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${index + 1}:`);
        console.log(`     ID: ${tx.id}, User: ${tx.user_id}, Type: ${tx.type}`);
        console.log(`     Amount: ${tx.amount} ${tx.currency}, Status: ${tx.status}`);
        console.log(`     Description: ${tx.description}`);
        if (tx.metadata) {
          console.log(`     Metadata: ${JSON.stringify(tx.metadata, null, 6)}`);
        }
      });
    } else {
      console.log('‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å metadata —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ 290 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (e) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ metadata: ${e}`);
  }

  console.log('\n‚úÖ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
simpleTableCheck290();