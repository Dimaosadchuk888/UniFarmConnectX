/**
 * –ü–†–û–°–¢–û–ï –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï TON FARMING - 25 –∏—é–ª—è 2025
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
 * –ë–ï–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–ê–ë–õ–ò–¶
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

interface UserWithTonBoost {
    id: number;
    ton_boost_package: number;
    ton_boost_rate: number;
    balance_ton: number;
}

async function simpleTonFarmingRestoration() {
    console.log('\nüö® –ü–†–û–°–¢–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï TON FARMING –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(70));
    
    try {
        // 1. –ü–û–õ–£–ß–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ê–ö–¢–ò–í–ù–´–ú–ò TON BOOST –ü–ê–ö–ï–¢–ê–ú–ò (–∏—Å–∫–ª—é—á–∞—è –Ω—É–ª–µ–≤—ã–µ)
        console.log('\nüìä –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
        const { data: activeUsers, error: usersError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_rate, balance_ton')
            .not('ton_boost_package', 'is', null)
            .gt('ton_boost_package', 0) // –¢–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
            .gt('ton_boost_rate', 0)    // –ò –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π
            .order('id', { ascending: true });

        if (usersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost`);

        // 2. –ü–û–õ–£–ß–ê–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ó–ê–ü–ò–°–ò
        const { data: existingRecords, error: existingError } = await supabase
            .from('ton_farming_data')
            .select('user_id')
            .order('user_id', { ascending: true });

        if (existingError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π:', existingError);
            return;
        }

        const existingUserIds = new Set(existingRecords?.map(r => r.user_id) || []);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingRecords?.length || 0} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π`);

        // 3. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        const missingUsers = activeUsers?.filter(user => 
            !existingUserIds.has(user.id.toString())
        ) || [];

        console.log(`üö® –ù–ê–ô–î–ï–ù–û ${missingUsers.length} –ü–†–û–ü–£–©–ï–ù–ù–´–• –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô`);

        if (missingUsers.length === 0) {
            console.log('‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return;
        }

        // 4. –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        console.log('\nüìã –°–ü–ò–°–û–ö –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
        missingUsers.forEach((user, index) => {
            console.log(`${index + 1}. User ${user.id}: Package ${user.ton_boost_package}, Rate: ${user.ton_boost_rate} TON/—Å–µ–∫`);
        });

        console.log('\nüîß –®–ê–ì 2: –ú–ê–°–°–û–í–û–ï –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ï–ô TON_FARMING_DATA');
        console.log('=' .repeat(50));

        let successCount = 0;
        let errorCount = 0;

        // 5. –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–†–û–ü–£–©–ï–ù–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        for (const user of missingUsers) {
            console.log(`\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User ${user.id}:`);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ TON Boost package
            let farmingBalance: number;
            let dailyIncome: number;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–∞–∫–µ—Ç–∞
            switch (user.ton_boost_package) {
                case 1:
                    farmingBalance = 1; // 1 TON –¥–ª—è –ø–∞–∫–µ—Ç–∞ 1
                    break;
                case 2:
                    farmingBalance = 5; // 5 TON –¥–ª—è –ø–∞–∫–µ—Ç–∞ 2
                    break;
                case 3:
                    farmingBalance = 10; // 10 TON –¥–ª—è –ø–∞–∫–µ—Ç–∞ 3
                    break;
                default:
                    farmingBalance = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 TON
            }
            
            dailyIncome = farmingBalance * 0.01; // 1% –≤ –¥–µ–Ω—å
            
            console.log(`   üì¶ Package: ${user.ton_boost_package}`);
            console.log(`   üí∞ Farming Balance: ${farmingBalance} TON`);
            console.log(`   üìà Daily Income: ${dailyIncome} TON/–¥–µ–Ω—å`);
            console.log(`   ‚ö° Rate: ${user.ton_boost_rate} TON/—Å–µ–∫`);

            try {
                const { data, error } = await supabase
                    .from('ton_farming_data')
                    .insert({
                        user_id: user.id.toString(), // –í–ê–ñ–ù–û: STRING —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        boost_package_id: user.ton_boost_package,
                        farming_balance: farmingBalance,
                        daily_income: dailyIncome,
                        total_earned: 0,
                        last_claim: new Date().toISOString(),
                        is_active: true,
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    });

                if (error) {
                    console.error(`   ‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:`, error.message);
                    errorCount++;
                } else {
                    console.log(`   ‚úÖ –£–°–ü–ï–®–ù–û —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å`);
                    successCount++;
                }
            } catch (err) {
                console.error(`   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:`, err);
                errorCount++;
            }

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 200));
        }

        // 6. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        console.log('\n' + '=' .repeat(70));
        console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
        console.log('=' .repeat(70));
        console.log(`üë• –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${missingUsers.length}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${missingUsers.length > 0 ? ((successCount / missingUsers.length) * 100).toFixed(1) : 0}%`);

        // 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ü–ò–°–ï–ô
        console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
        const { data: finalRecords, error: finalError } = await supabase
            .from('ton_farming_data')
            .select('user_id', { count: 'exact' });

        if (!finalError && finalRecords) {
            console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${finalRecords.length}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            const finalUserIds = new Set(finalRecords.map((r: any) => r.user_id));
            const stillMissing = activeUsers?.filter(user => !finalUserIds.has(user.id.toString())) || [];
            
            if (stillMissing.length === 0) {
                console.log('üéâ –í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –¢–ï–ü–ï–†–¨ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!');
                console.log('‚ö° –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –∏–º –¥–æ—Ö–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ');
            } else {
                console.log(`‚ö†Ô∏è  –í—Å–µ –µ—â–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${stillMissing.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            }
        }

        if (successCount > 0) {
            console.log('\nüöÄ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å TON –¥–æ—Ö–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            console.log('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 2-5 –º–∏–Ω—É—Ç');
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }

    console.log('\n' + '=' .repeat(70));
    console.log('üéØ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    console.log('=' .repeat(70));
}

// –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
simpleTonFarmingRestoration().then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
});