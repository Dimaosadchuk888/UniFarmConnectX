/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ü–û–ö–£–ü–û–ö TON BOOST
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
 */

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testMultipleBoostPurchases() {
  console.log('üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ü–û–ö–£–ü–û–ö TON BOOST');
  console.log('='.repeat(60));
  
  const baseUrl = 'https://9e8e72ca-ad0e-4d1b-b689-b91a4832fe73-00-7a29dnah0ryx.spock.replit.dev';
  const userId = 48;
  
  // JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const jwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6NDgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE2MTMzMDAsImV4cCI6MTc1MjIxODEwMH0.itCnOpcM4WQEksdm8M7L7tj1dGKuALNVFY0HQdIIk2I';
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  console.log('\nüìä 1. –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê:');
  
  try {
    const balanceResponse = await fetch(`${baseUrl}/api/v2/users/profile`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const balanceData = await balanceResponse.json();
    const currentBalance = balanceData.data?.user?.balance_ton || balanceData.data?.balance_ton || 0;
    
    console.log(`   ‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} TON`);
    
    if (parseFloat(currentBalance) < 50) {
      console.log('   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫');
      console.log('   üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 50 TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤');
      return;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    console.log('\nüì¶ 2. –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –ü–ê–ö–ï–¢–û–í:');
    
    const packagesResponse = await fetch(`${baseUrl}/api/v2/boost/packages`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const packagesData = await packagesResponse.json();
    const packages = packagesData.data || [];
    
    console.log(`   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${packages.length}`);
    packages.forEach((pkg, idx) => {
      console.log(`     ${idx + 1}. ${pkg.name}: ${pkg.min_amount} TON, —Å—Ç–∞–≤–∫–∞ ${(pkg.daily_rate * 100).toFixed(1)}%`);
    });
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    console.log('\nüõí 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–û–ö:');
    
    const testPurchases = [
      { packageId: 1, name: 'Starter' },
      { packageId: 2, name: 'Standard' },
      // { packageId: 3, name: 'Advanced' }, // –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
      { packageId: 4, name: 'Premium' }
    ];
    
    const purchaseResults = [];
    
    for (let i = 0; i < testPurchases.length; i++) {
      const purchase = testPurchases[i];
      console.log(`\n   üìù –ü–æ–∫—É–ø–∫–∞ ${i + 1}: ${purchase.name} (ID: ${purchase.packageId})`);
      
      try {
        const purchaseResponse = await fetch(`${baseUrl}/api/v2/boost/purchase`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${jwtToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            boostId: purchase.packageId.toString(),
            paymentMethod: 'wallet'
          })
        });
        
        const purchaseData = await purchaseResponse.json();
        
        if (purchaseData.success) {
          const balanceUpdate = purchaseData.data?.balanceUpdate;
          console.log(`     ‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞`);
          
          if (balanceUpdate) {
            console.log(`     üí∞ –ë–∞–ª–∞–Ω—Å: ${balanceUpdate.previousTonBalance} ‚Üí ${balanceUpdate.tonBalance} TON`);
            console.log(`     üí∏ –°–ø–∏—Å–∞–Ω–æ: ${balanceUpdate.deductedAmount} TON`);
            console.log(`     üéÅ UNI –±–æ–Ω—É—Å: ${balanceUpdate.uniBalance} UNI`);
          }
          
          purchaseResults.push({
            packageId: purchase.packageId,
            name: purchase.name,
            success: true,
            balanceUpdate: balanceUpdate
          });
        } else {
          console.log(`     ‚ùå –û—à–∏–±–∫–∞: ${purchaseData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          purchaseResults.push({
            packageId: purchase.packageId,
            name: purchase.name,
            success: false,
            error: purchaseData.error
          });
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        console.log(`     ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        purchaseResults.push({
          packageId: purchase.packageId,
          name: purchase.name,
          success: false,
          error: error.message
        });
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    console.log('\nüìä 4. –ü–†–û–í–ï–†–ö–ê –ò–¢–û–ì–û–í–û–ì–û –ë–ê–õ–ê–ù–°–ê:');
    
    const finalBalanceResponse = await fetch(`${baseUrl}/api/v2/users/profile`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const finalBalanceData = await finalBalanceResponse.json();
    const finalBalance = finalBalanceData.data?.user?.balance_ton || finalBalanceData.data?.balance_ton || 0;
    
    console.log(`   ‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance} TON`);
    console.log(`   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${parseFloat(currentBalance)} ‚Üí ${finalBalance} TON`);
    console.log(`   ‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${(parseFloat(currentBalance) - parseFloat(finalBalance)).toFixed(6)} TON`);
    
    // 5. –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìã 5. –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('‚îÄ'.repeat(50));
    
    const successfulPurchases = purchaseResults.filter(p => p.success);
    const failedPurchases = purchaseResults.filter(p => !p.success);
    
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${successfulPurchases.length}`);
    console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${failedPurchases.length}`);
    
    if (successfulPurchases.length > 0) {
      console.log('\n   üìà –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:');
      successfulPurchases.forEach((purchase, idx) => {
        console.log(`     ${idx + 1}. ${purchase.name} (ID: ${purchase.packageId})`);
        if (purchase.balanceUpdate) {
          console.log(`        –°–ø–∏—Å–∞–Ω–æ: ${purchase.balanceUpdate.deductedAmount} TON`);
        }
      });
    }
    
    if (failedPurchases.length > 0) {
      console.log('\n   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:');
      failedPurchases.forEach((purchase, idx) => {
        console.log(`     ${idx + 1}. ${purchase.name}: ${purchase.error}`);
      });
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–æ–∫
    console.log('\nüí∞ 6. –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const transactionsResponse = await fetch(`${baseUrl}/api/v2/transactions?page=1&limit=10`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const transactionsData = await transactionsResponse.json();
    const recentTransactions = transactionsData.data?.transactions || [];
    
    console.log(`   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${recentTransactions.length}`);
    
    recentTransactions.forEach((tx, idx) => {
      const time = new Date(tx.created_at).toLocaleString('ru-RU');
      console.log(`     ${idx + 1}. ${tx.amount} ${tx.currency} | ${tx.type} | ${time}`);
      console.log(`        ${tx.description}`);
    });
    
  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ü–û–ö–£–ü–û–ö –ó–ê–í–ï–†–®–ï–ù–û');
}

testMultipleBoostPurchases();