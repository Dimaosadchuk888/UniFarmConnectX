/**
 * –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê TRANSACTIONSERVICE
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø–æ—á–µ–º—É –±–∞–ª–∞–Ω—Å—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
 */

import { supabase } from './core/supabase.js';

async function analyzeTransactionServiceFlow() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê TRANSACTIONSERVICE');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∑–æ–≤—ã TransactionService
    console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –°–ò–°–¢–ï–ú–ï:');
    
    const { data: recentTx } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', '2025-08-05T08:00:00.000Z')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (recentTx) {
      recentTx.forEach(tx => {
        const hasMetadata = tx.metadata && Object.keys(tx.metadata).length > 0;
        const isSystemGenerated = hasMetadata && (
          tx.metadata.source || 
          tx.metadata.original_type || 
          tx.description?.includes('from blockchain')
        );
        
        console.log(`${tx.created_at} | User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency} | System: ${isSystemGenerated ? '‚úÖ' : '‚ùå'}`);
        
        if (tx.user_id === 255 || tx.user_id === 251) {
          console.log(`   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ô USER! Metadata: ${JSON.stringify(tx.metadata || {})}`);
        }
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É metadata –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    console.log('\nüîç –ê–ù–ê–õ–ò–ó METADATA –°–¢–†–£–ö–¢–£–†:');
    
    const { data: metadataAnalysis } = await supabase
      .from('transactions')
      .select('id, user_id, type, metadata, description')
      .not('metadata', 'is', null)
      .gte('created_at', '2025-08-05T08:00:00.000Z')
      .limit(5);
    
    if (metadataAnalysis) {
      metadataAnalysis.forEach(tx => {
        console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id} (User ${tx.user_id}):`);
        console.log(`  Type: ${tx.type}`);
        console.log(`  Description: ${tx.description}`);
        console.log(`  Metadata keys: ${Object.keys(tx.metadata || {}).join(', ')}`);
        
        if (tx.metadata?.source) {
          console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–µ—Ä–µ–∑: ${tx.metadata.source}`);
        } else {
          console.log(`  ‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        }
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ vs –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
    console.log('\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –£–°–ü–ï–®–ù–û–ô VS –ü–†–û–ë–õ–ï–ú–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:');
    
    // –£—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: successfulTx } = await supabase
      .from('transactions')
      .select('user_id, type, metadata, description')
      .not('user_id', 'in', '(255,251)')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', '2025-08-05T08:00:00.000Z')
      .limit(3);
    
    console.log('\n‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):');
    if (successfulTx) {
      successfulTx.forEach(tx => {
        console.log(`  User ${tx.user_id}: ${tx.type} | Metadata: ${tx.metadata ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} | Desc: ${tx.description}`);
      });
    }
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
    const { data: problematicTx } = await supabase
      .from('transactions')
      .select('user_id, type, metadata, description')
      .in('user_id', [255, 251])
      .gte('created_at', '2025-08-05T08:00:00.000Z')
      .limit(5);
    
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 255, 251):');
    if (problematicTx) {
      problematicTx.forEach(tx => {
        console.log(`  User ${tx.user_id}: ${tx.type} | Metadata: ${tx.metadata ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} | Desc: ${tx.description}`);
      });
    }
    
    // 4. –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–≥–æ —á—Ç–æ BalanceManager –≤—ã–∑—ã–≤–∞–ª—Å—è –Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è
    console.log('\nüîç –ü–û–ò–°–ö –°–õ–ï–î–û–í –†–ê–ë–û–¢–´ BALANCEMANAGER:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –±–ª–∏–∑–∫–æ–µ –≤—Ä–µ–º—è
    const { data: balanceUpdates } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BALANCE_UPDATE')
      .gte('created_at', '2025-08-05T07:00:00.000Z')
      .order('created_at', { ascending: false });
    
    if (balanceUpdates && balanceUpdates.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${balanceUpdates.length} BALANCE_UPDATE –æ–ø–µ—Ä–∞—Ü–∏–π:`);
      balanceUpdates.forEach(tx => {
        console.log(`  ${tx.created_at} | User ${tx.user_id} | ${tx.amount} ${tx.currency} | ${tx.description}`);
      });
    } else {
      console.log('‚ùå –ù–ï–¢ BALANCE_UPDATE –æ–ø–µ—Ä–∞—Ü–∏–π - BalanceManager –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∏');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–µ–π user_id
    console.log('\nüîó –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò USER_ID:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ orphaned —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    const { data: orphanedCheck } = await supabase
      .rpc('check_orphaned_transactions', {
        target_user_ids: [255, 251]
      })
      .single();
    
    if (orphanedCheck) {
      console.log('‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å user_id –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ stored procedure');
    } else {
      // Fallback manual check
      const { data: userExists255 } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', 255)
        .single();
        
      const { data: userExists251 } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', 251)
        .single();
      
      console.log(`User 255 exists: ${userExists255 ? '–¥–∞' : '–Ω–µ—Ç'}`);
      console.log(`User 251 exists: ${userExists251 ? '–¥–∞' : '–Ω–µ—Ç'}`);
      
      if (userExists255) {
        const { data: txCount255 } = await supabase
          .from('transactions')
          .select('count')
          .eq('user_id', 255)
          .single();
        console.log(`User 255 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txCount255?.count || 0}`);
      }
      
      if (userExists251) {
        const { data: txCount251 } = await supabase
          .from('transactions')
          .select('count')
          .eq('user_id', 251)
          .single();
        console.log(`User 251 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txCount251?.count || 0}`);
      }
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeTransactionServiceFlow();