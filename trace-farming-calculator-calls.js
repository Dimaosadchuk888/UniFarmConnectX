#!/usr/bin/env node

/**
 * –¢–†–ê–°–°–ò–†–û–í–ö–ê –í–´–ó–û–í–û–í –£–ù–ò–§–ê–†–ú–ò–ù–ì –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
 * –ê–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ calculateIncome() –≤–æ–æ–±—â–µ
 */

import fs from 'fs';
import path from 'path';

console.log('üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –í–´–ó–û–í–û–í UNIFIED FARMING CALCULATOR');
console.log('='.repeat(60));

// 1. –ü–û–ò–°–ö –í–°–ï–• –§–ê–ô–õ–û–í, –ö–û–¢–û–†–´–ï –ò–ú–ü–û–†–¢–ò–†–£–Æ–¢ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
console.log('\nüìã 1. –ü–û–ò–°–ö –ò–ú–ü–û–†–¢–û–í UnifiedFarmingCalculator:');

function findImports(dir, filename) {
  const results = [];
  
  function scanDirectory(currentDir) {
    try {
      const items = fs.readdirSync(currentDir);
      
      for (const item of items) {
        const fullPath = path.join(currentDir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !item.includes('node_modules') && !item.includes('.git')) {
          scanDirectory(fullPath);
        } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.js'))) {
          try {
            const content = fs.readFileSync(fullPath, 'utf8');
            if (content.includes('UnifiedFarmingCalculator')) {
              results.push({
                file: fullPath,
                imports: content.includes('import') && content.includes('UnifiedFarmingCalculator'),
                calls: content.includes('calculateIncome'),
                content: content
              });
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
          }
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    }
  }
  
  scanDirectory(dir);
  return results;
}

const imports = findImports('.', 'UnifiedFarmingCalculator');

console.log(`  –ù–∞–π–¥–µ–Ω–æ ${imports.length} —Ñ–∞–π–ª–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º UnifiedFarmingCalculator:`);

imports.forEach((imp, index) => {
  console.log(`\n  ${index + 1}. ${imp.file}`);
  console.log(`     ‚îú‚îÄ‚îÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç: ${imp.imports ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`     ‚îî‚îÄ‚îÄ –í—ã–∑—ã–≤–∞–µ—Ç calculateIncome: ${imp.calls ? '–î–ê' : '–ù–ï–¢'}`);
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏
  if (imp.calls) {
    const lines = imp.content.split('\n');
    lines.forEach((line, lineNum) => {
      if (line.includes('calculateIncome')) {
        console.log(`       ‚îÇ –°—Ç—Ä–æ–∫–∞ ${lineNum + 1}: ${line.trim()}`);
      }
    });
  }
});

// 2. –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
console.log('\nüìã 2. –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê farmingScheduler.ts:');

try {
  const schedulerPath = 'core/scheduler/farmingScheduler.ts';
  const schedulerContent = fs.readFileSync(schedulerPath, 'utf8');
  
  console.log(`  ‚îú‚îÄ‚îÄ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: –î–ê`);
  console.log(`  ‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(schedulerContent.length / 1024).toFixed(1)} KB`);
  
  // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const patterns = [
    'UnifiedFarmingCalculator',
    'calculateIncome',
    'processUniFarmingIncome',
    'cron.schedule',
    'activeFarmers'
  ];
  
  patterns.forEach(pattern => {
    const matches = (schedulerContent.match(new RegExp(pattern, 'g')) || []).length;
    console.log(`  ‚îú‚îÄ‚îÄ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π "${pattern}": ${matches}`);
  });
  
  // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  const lines = schedulerContent.split('\n');
  console.log(`\n  –°—Ç—Ä–æ–∫–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:`);
  lines.forEach((line, lineNum) => {
    if (line.includes('calculateIncome') || line.includes('UnifiedFarmingCalculator')) {
      console.log(`    –°—Ç—Ä–æ–∫–∞ ${lineNum + 1}: ${line.trim()}`);
    }
  });
  
} catch (error) {
  console.log(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${error.message}`);
}

// 3. –ê–ù–ê–õ–ò–ó –°–ê–ú–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
console.log('\nüìã 3. –ê–ù–ê–õ–ò–ó UnifiedFarmingCalculator.ts:');

try {
  const calculatorPath = 'core/farming/UnifiedFarmingCalculator.ts';
  const calculatorContent = fs.readFileSync(calculatorPath, 'utf8');
  
  console.log(`  ‚îú‚îÄ‚îÄ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: –î–ê`);
  console.log(`  ‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(calculatorContent.length / 1024).toFixed(1)} KB`);
  
  // –ò—â–µ–º –∫–ª—é—á–µ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
  const lines = calculatorContent.split('\n');
  lines.forEach((line, lineNum) => {
    if (line.includes('UNI_FARMING_INTERVAL_MODE') || line.includes('useIntervalMode') || line.includes('effectivePeriods')) {
      console.log(`    –°—Ç—Ä–æ–∫–∞ ${lineNum + 1}: ${line.trim()}`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞ calculateIncome
  const calculateIncomeMatch = calculatorContent.match(/static async calculateIncome\((.*?)\): Promise<(.*?)>/);
  if (calculateIncomeMatch) {
    console.log(`  ‚îú‚îÄ‚îÄ –ú–µ—Ç–æ–¥ calculateIncome –Ω–∞–π–¥–µ–Ω`);
    console.log(`  ‚îú‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${calculateIncomeMatch[1]}`);
    console.log(`  ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: Promise<${calculateIncomeMatch[2]}>`);
  } else {
    console.log(`  ‚ùå –ú–µ—Ç–æ–¥ calculateIncome –ù–ï –ù–ê–ô–î–ï–ù!`);
  }
  
} catch (error) {
  console.log(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${error.message}`);
}

// 4. –ü–û–ò–°–ö –õ–û–ì–û–í –° –í–´–ó–û–í–ê–ú–ò
console.log('\nüìã 4. –ü–û–ò–°–ö –õ–û–ì–û–í –° –í–´–ó–û–í–ê–ú–ò calculateIncome:');

const logFiles = [
  'server_debug.log',
  'jwt_fix_test.log',
  'console.log',
  'app.log'
];

logFiles.forEach(logFile => {
  try {
    if (fs.existsSync(logFile)) {
      const content = fs.readFileSync(logFile, 'utf8');
      const lines = content.split('\n');
      const relevantLines = lines.filter(line => 
        line.includes('calculateIncome') || 
        line.includes('UnifiedFarmingCalculator') ||
        line.includes('[UNI Farming]') ||
        line.includes('CRON-PROTECTED')
      );
      
      console.log(`\n  ${logFile}:`);
      console.log(`    ‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä: ${(content.length / 1024).toFixed(1)} KB`);
      console.log(`    ‚îú‚îÄ‚îÄ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${relevantLines.length}`);
      
      if (relevantLines.length > 0) {
        console.log(`    ‚îî‚îÄ‚îÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:`);
        relevantLines.slice(-5).forEach((line, index) => {
          console.log(`       ${index + 1}. ${line.substring(0, 100)}...`);
        });
      } else {
        console.log(`    ‚îî‚îÄ‚îÄ –ó–∞–ø–∏—Å–µ–π –æ calculateIncome –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    } else {
      console.log(`\n  ${logFile}: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  } catch (error) {
    console.log(`\n  ${logFile}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - ${error.message}`);
  }
});

// 5. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ü–†–û–¶–ï–°–°–û–í CRON
console.log('\nüìã 5. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò CRON –ó–ê–î–ê–ß:');

try {
  const { execSync } = await import('child_process');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å cron
  try {
    const cronProcesses = execSync('ps aux | grep -E "cron|schedule" | grep -v grep', { encoding: 'utf8' });
    if (cronProcesses.trim()) {
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω—ã CRON –ø—Ä–æ—Ü–µ—Å—Å—ã:`);
      cronProcesses.split('\n').forEach(line => {
        if (line.trim()) console.log(`    ${line}`);
      });
    } else {
      console.log(`  ‚ö†Ô∏è  CRON –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    }
  } catch (e) {
    console.log(`  ‚ö†Ô∏è  CRON –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞: ${e.message}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    const serverProcesses = execSync('ps aux | grep "server/index.ts" | grep -v grep', { encoding: 'utf8' });
    console.log(`\n  –ü—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–∞:`);
    if (serverProcesses.trim()) {
      serverProcesses.split('\n').forEach(line => {
        if (line.trim()) {
          const parts = line.split(/\s+/);
          const pid = parts[1];
          const cpu = parts[2];
          const mem = parts[3];
          console.log(`    PID ${pid}: CPU ${cpu}%, MEM ${mem}%`);
        }
      });
    } else {
      console.log(`    ‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –ù–ï –ù–ê–ô–î–ï–ù!`);
    }
  } catch (e) {
    console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}`);
  }
  
} catch (importError) {
  console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ child_process: ${importError.message}`);
}

// 6. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –¢–†–ê–°–°–ò–†–û–í–ö–ò:');
console.log('='.repeat(60));

const hasImports = imports.length > 0;
const hasCalls = imports.some(imp => imp.calls);

console.log(`üìä –°–¢–ê–¢–£–° –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:`);
console.log(`  ‚îú‚îÄ‚îÄ –§–∞–π–ª–æ–≤ —Å –∏–º–ø–æ—Ä—Ç–æ–º: ${imports.length}`);
console.log(`  ‚îú‚îÄ‚îÄ –§–∞–π–ª–æ–≤ —Å –≤—ã–∑–æ–≤–∞–º–∏: ${imports.filter(imp => imp.calls).length}`);
console.log(`  ‚îî‚îÄ‚îÄ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: ${hasImports && hasCalls ? '–î–ê' : '–ù–ï–¢'}`);

if (!hasImports) {
  console.log(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: UnifiedFarmingCalculator –ù–ï –ò–ú–ü–û–†–¢–ò–†–£–ï–¢–°–Ø!`);
} else if (!hasCalls) {
  console.log(`\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è!`);
} else {
  console.log(`\n‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ï–°–¢–¨: –ò—â–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞`);
}

console.log(`\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:`);
console.log(`  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ cron –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç`);
console.log(`  2. –î–æ–±–∞–≤–∏—Ç—å debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ calculateIncome`);
console.log(`  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ useIntervalMode –≤ runtime`);
console.log(`  4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è distributed lock`);