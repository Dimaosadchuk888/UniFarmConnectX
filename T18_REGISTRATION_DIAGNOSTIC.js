/**
 * T18: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */

import { drizzle } from 'drizzle-orm/neon-serverless';
import { Pool } from '@neondatabase/serverless';
import { users } from './shared/schema.js';
import { eq, sql } from 'drizzle-orm';
import crypto from 'crypto';

class TelegramRegistrationDiagnostic {
  constructor() {
    this.pool = new Pool({ connectionString: process.env.DATABASE_URL });
    this.db = drizzle(this.pool);
    this.issues = [];
    this.fixes = [];
  }

  log(section, status, message, details = null) {
    console.log(`[${section}] ${status} ${message}`);
    if (details) {
      console.log(`    ${JSON.stringify(details, null, 2)}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
   */
  async checkDatabaseStructure() {
    this.log('DATABASE', 'üîç', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
      const tableCheck = await this.db.execute(sql`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = 'users'
      `);
      
      if (tableCheck.rows.length === 0) {
        this.issues.push('–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        this.log('DATABASE', '‚ùå', '–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π
      const columnsCheck = await this.db.execute(sql`
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_schema = 'public' AND table_name = 'users'
        ORDER BY column_name
      `);
      
      const columns = columnsCheck.rows.map(row => ({
        name: row.column_name,
        type: row.data_type,
        nullable: row.is_nullable === 'YES'
      }));
      
      this.log('DATABASE', '‚úÖ', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users', { columns: columns.length });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
      const requiredFields = ['id', 'telegram_id', 'username', 'ref_code', 'parent_ref_code'];
      const missingFields = requiredFields.filter(field => 
        !columns.some(col => col.name === field)
      );
      
      if (missingFields.length > 0) {
        this.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingFields.join(', ')}`);
        this.log('DATABASE', '‚ö†Ô∏è', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è', { missing: missingFields });
      }
      
      return true;
    } catch (error) {
      this.issues.push(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      this.log('DATABASE', '‚ùå', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', { error: error.message });
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é Telegram initData
   */
  async checkTelegramValidation() {
    this.log('TELEGRAM', 'üîç', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram initData');
    
    try {
      const { validateTelegramInitData } = await import('./utils/telegram.js');
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!botToken) {
        this.issues.push('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        this.log('TELEGRAM', '‚ùå', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN');
        return false;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π initData
      const testUser = {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test'
      };
      
      const authDate = Math.floor(Date.now() / 1000);
      const initDataParams = [
        `auth_date=${authDate}`,
        `user=${encodeURIComponent(JSON.stringify(testUser))}`,
        `query_id=test_query_${Date.now()}`
      ];
      
      const dataCheckString = initDataParams.sort().join('\n');
      const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
      const hash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
      
      const testInitData = [...initDataParams, `hash=${hash}`].join('&');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      const validation = validateTelegramInitData(testInitData, botToken);
      
      if (validation.valid && validation.user) {
        this.log('TELEGRAM', '‚úÖ', '–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return true;
      } else {
        this.issues.push('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram initData');
        this.log('TELEGRAM', '‚ùå', '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', { error: validation.error });
        return false;
      }
    } catch (error) {
      this.issues.push(`–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è telegram: ${error.message}`);
      this.log('TELEGRAM', '‚ùå', '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram utils', { error: error.message });
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async checkAuthRoutes() {
    this.log('ROUTES', 'üîç', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤
      const { default: authRoutes } = await import('./modules/auth/routes.js');
      
      this.log('ROUTES', '‚úÖ', '–ú–∞—Ä—à—Ä—É—Ç—ã auth –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º AuthController
      const { AuthController } = await import('./modules/auth/controller.js');
      const authController = new AuthController();
      
      if (typeof authController.registerTelegram === 'function') {
        this.log('ROUTES', '‚úÖ', '–ú–µ—Ç–æ–¥ registerTelegram –Ω–∞–π–¥–µ–Ω');
      } else {
        this.issues.push('–ú–µ—Ç–æ–¥ registerTelegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ AuthController');
        this.log('ROUTES', '‚ùå', '–ú–µ—Ç–æ–¥ registerTelegram –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      return true;
    } catch (error) {
      this.issues.push(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${error.message}`);
      this.log('ROUTES', '‚ùå', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤', { error: error.message });
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç UserService
   */
  async checkUserService() {
    this.log('SERVICES', 'üîç', '–ü—Ä–æ–≤–µ—Ä–∫–∞ UserService');
    
    try {
      const { UserService } = await import('./modules/users/service.js');
      const userService = new UserService();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
      const requiredMethods = ['findOrCreateFromTelegram'];
      const missingMethods = requiredMethods.filter(method => 
        typeof userService[method] !== 'function'
      );
      
      if (missingMethods.length === 0) {
        this.log('SERVICES', '‚úÖ', '–í—Å–µ –º–µ—Ç–æ–¥—ã UserService –Ω–∞–π–¥–µ–Ω—ã');
        return true;
      } else {
        this.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã –≤ UserService: ${missingMethods.join(', ')}`);
        this.log('SERVICES', '‚ùå', '–ú–µ—Ç–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', { missing: missingMethods });
        return false;
      }
    } catch (error) {
      this.issues.push(`–û—à–∏–±–∫–∞ UserService: ${error.message}`);
      this.log('SERVICES', '‚ùå', '–û—à–∏–±–∫–∞ UserService', { error: error.message });
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async testUserCreation() {
    this.log('USER_CREATION', 'üîç', '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    try {
      const testTelegramId = Math.floor(Math.random() * 1000000) + 100000;
      const testUsername = `testuser_${Date.now()}`;
      const testRefCode = `REF${testTelegramId}${Date.now()}`.substring(0, 12).toUpperCase();
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [newUser] = await this.db
        .insert(users)
        .values({
          telegram_id: testTelegramId,
          username: testUsername,
          ref_code: testRefCode
        })
        .returning();
      
      if (newUser && newUser.id) {
        this.log('USER_CREATION', '‚úÖ', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', {
          id: newUser.id,
          telegram_id: newUser.telegram_id,
          ref_code: newUser.ref_code
        });
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.db
          .delete(users)
          .where(eq(users.id, newUser.id));
          
        this.log('USER_CREATION', 'üßπ', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
        return true;
      } else {
        this.issues.push('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î');
        this.log('USER_CREATION', '‚ùå', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        return false;
      }
    } catch (error) {
      this.issues.push(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      this.log('USER_CREATION', '‚ùå', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è', { error: error.message });
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  generateFixPlan() {
    this.log('FIXES', 'üîß', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    
    this.issues.forEach((issue, index) => {
      if (issue.includes('–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        this.fixes.push('–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: npm run db:push');
      }
      
      if (issue.includes('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è')) {
        this.fixes.push('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (T15 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)');
      }
      
      if (issue.includes('TELEGRAM_BOT_TOKEN')) {
        this.fixes.push('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN');
      }
      
      if (issue.includes('registerTelegram')) {
        this.fixes.push('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ registerTelegram –≤ AuthController');
      }
      
      if (issue.includes('UserService')) {
        this.fixes.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –≤ UserService');
      }
    });
    
    return this.fixes;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async runDiagnostic() {
    console.log('üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê T18: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø TELEGRAM –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('='.repeat(70));
    
    const checks = {
      database: await this.checkDatabaseStructure(),
      telegram: await this.checkTelegramValidation(),
      routes: await this.checkAuthRoutes(),
      services: await this.checkUserService(),
      userCreation: await this.testUserCreation()
    };
    
    const passedChecks = Object.values(checks).filter(Boolean).length;
    const totalChecks = Object.keys(checks).length;
    
    console.log('\n' + '='.repeat(70));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.log('='.repeat(70));
    
    Object.entries(checks).forEach(([check, passed]) => {
      const status = passed ? '‚úÖ' : '‚ùå';
      const checkName = check.charAt(0).toUpperCase() + check.slice(1);
      console.log(`${status} ${checkName}: ${passed ? '–ü—Ä–æ–π–¥–µ–Ω' : '–ü—Ä–æ–≤–∞–ª–µ–Ω'}`);
    });
    
    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedChecks}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (this.issues.length > 0) {
      console.log('\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      this.issues.forEach((issue, index) => {
        console.log(`${index + 1}. ${issue}`);
      });
    }
    
    const fixes = this.generateFixPlan();
    if (fixes.length > 0) {
      console.log('\nüîß –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
      fixes.forEach((fix, index) => {
        console.log(`${index + 1}. ${fix}`);
      });
    }
    
    if (passedChecks === totalChecks) {
      console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
    } else {
      console.log('\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.');
    }
    
    return {
      passed: passedChecks === totalChecks,
      checks,
      issues: this.issues,
      fixes: this.fixes
    };
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function main() {
  try {
    const diagnostic = new TelegramRegistrationDiagnostic();
    const result = await diagnostic.runDiagnostic();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      task: 'T18_TELEGRAM_REGISTRATION_DIAGNOSTIC',
      result,
      summary: {
        passed: result.passed,
        issues_count: result.issues.length,
        fixes_count: result.fixes.length
      }
    };
    
    await import('fs').then(fs => {
      fs.writeFileSync('T18_DIAGNOSTIC_REPORT.json', JSON.stringify(report, null, 2));
    });
    
    console.log('\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: T18_DIAGNOSTIC_REPORT.json');
    
    await diagnostic.pool.end();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { TelegramRegistrationDiagnostic };