import { supabase } from './core/supabaseClient';
import * as fs from 'fs';
import * as path from 'path';

async function investigateProcessTonDeposit() {
  console.log('üîç –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï processTonDeposit() - –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(80));

  try {
    // 1. –ê–ù–ê–õ–ò–ó API –≠–ù–î–ü–û–ò–ù–¢–û–í –î–õ–Ø TON –î–ï–ü–û–ó–ò–¢–û–í
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö API –≠–ù–î–ü–û–ò–ù–¢–û–í –î–õ–Ø TON –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const serverDir = './server';
    if (fs.existsSync(serverDir)) {
      const files = fs.readdirSync(serverDir, { recursive: true });
      const routeFiles = files.filter(f => 
        typeof f === 'string' && (f.includes('route') || f.includes('controller'))
      );
      
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${routeFiles.length}`);
      
      routeFiles.forEach(file => {
        const filePath = path.join(serverDir, file);
        if (fs.existsSync(filePath)) {
          const content = fs.readFileSync(filePath, 'utf8');
          
          if (content.includes('ton-deposit') || content.includes('processTonDeposit')) {
            console.log(`   ‚úÖ ${file}: —Å–æ–¥–µ—Ä–∂–∏—Ç ton-deposit –ª–æ–≥–∏–∫—É`);
            
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å ton-deposit
            const lines = content.split('\n');
            lines.forEach((line, idx) => {
              if (line.includes('ton-deposit') || line.includes('processTonDeposit')) {
                console.log(`     Line ${idx + 1}: ${line.trim()}`);
              }
            });
          }
        }
      });
    }

    // 2. –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø WalletService.processTonDeposit
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê modules/wallet/service.ts:');
    
    const walletServicePath = './modules/wallet/service.ts';
    if (fs.existsSync(walletServicePath)) {
      const content = fs.readFileSync(walletServicePath, 'utf8');
      
      if (content.includes('processTonDeposit')) {
        console.log('   ‚úÖ processTonDeposit –º–µ—Ç–æ–¥ –ù–ê–ô–î–ï–ù –≤ WalletService');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ
        const methodStart = content.indexOf('processTonDeposit');
        const methodEnd = content.indexOf('}', content.indexOf('{', methodStart));
        const methodCode = content.substring(methodStart, methodEnd + 1);
        
        console.log('\n   üìã –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–ê:');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const checks = [
          { name: 'UnifiedTransactionService', found: methodCode.includes('UnifiedTransactionService') },
          { name: 'createTransaction', found: methodCode.includes('createTransaction') },
          { name: 'TON_DEPOSIT', found: methodCode.includes('TON_DEPOSIT') },
          { name: 'BalanceManager', found: methodCode.includes('BalanceManager') },
          { name: 'try-catch –±–ª–æ–∫', found: methodCode.includes('try') && methodCode.includes('catch') }
        ];
        
        checks.forEach(check => {
          console.log(`     ${check.name}: ${check.found ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        });
        
        // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (methodCode.includes('return') && methodCode.includes('false')) {
          console.log(`     ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö`);
        }
        
        if (methodCode.includes('logger.error') || methodCode.includes('console.error')) {
          console.log(`     ‚úÖ –ï—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫`);
        }
        
      } else {
        console.log('   ‚ùå processTonDeposit –º–µ—Ç–æ–¥ –ù–ï –ù–ê–ô–î–ï–ù!');
      }
    } else {
      console.log('   ‚ùå modules/wallet/service.ts –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!');
    }

    // 3. –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–£–¢–ï–ô –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê TON
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–£–¢–ï–ô –û–ë–ù–û–í–õ–ï–ù–ò–Ø balance_ton:');
    
    const searchDirs = ['./modules', './core', './server'];
    const alternativePaths: string[] = [];
    
    searchDirs.forEach(dir => {
      if (fs.existsSync(dir)) {
        const files = fs.readdirSync(dir, { recursive: true });
        
        files.forEach(file => {
          if (typeof file === 'string' && file.endsWith('.ts')) {
            const filePath = path.join(dir, file);
            if (fs.existsSync(filePath)) {
              const content = fs.readFileSync(filePath, 'utf8');
              
              // –ò—â–µ–º –ø—Ä—è–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
              if (content.includes('balance_ton') && 
                  (content.includes('UPDATE') || content.includes('update') || content.includes('set'))) {
                
                const lines = content.split('\n');
                lines.forEach((line, idx) => {
                  if (line.includes('balance_ton') && 
                      (line.includes('UPDATE') || line.includes('update') || line.includes('SET'))) {
                    alternativePaths.push(`${file}:${idx + 1} - ${line.trim()}`);
                  }
                });
              }
            }
          }
        });
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton: ${alternativePaths.length}`);
    alternativePaths.slice(0, 10).forEach(path => {
      console.log(`   üîç ${path}`);
    });

    // 4. –ü–†–û–í–ï–†–ö–ê SCHEDULER –û–ü–ï–†–ê–¶–ò–ô
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SCHEDULER –û–ü–ï–†–ê–¶–ò–ô:');
    
    const schedulerFiles = ['./core/scheduler.ts', './modules/farming/scheduler.ts', './server/scheduler.ts'];
    
    schedulerFiles.forEach(filePath => {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        if (content.includes('balance_ton') || content.includes('TON')) {
          console.log(`   ‚úÖ ${filePath}: —Å–æ–¥–µ—Ä–∂–∏—Ç TON –æ–ø–µ—Ä–∞—Ü–∏–∏`);
          
          const lines = content.split('\n');
          lines.forEach((line, idx) => {
            if (line.includes('balance_ton') && line.includes('+=')) {
              console.log(`     Line ${idx + 1}: ${line.trim()}`);
            }
          });
        }
      }
    });

    // 5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –°–ï–†–í–ï–†–ê –ù–ê –í–´–ó–û–í–´ processTonDeposit
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó RECENT –õ–û–ì–û–í:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ë–î –∑–∞–ø–∏—Å–∏ —Å CRITICAL –ª–æ–≥–∞–º–∏ processTonDeposit
    const { data: criticalLogs, error: logsError } = await supabase
      .from('logs')
      .select('message, created_at')
      .like('message', '%processTonDeposit%')
      .or('message.like.%TON_DEPOSIT%,message.like.%CRITICAL%')
      .order('created_at', { ascending: false })
      .limit(10);

    if (!logsError && criticalLogs && criticalLogs.length > 0) {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ —Å processTonDeposit: ${criticalLogs.length}`);
      criticalLogs.forEach(log => {
        console.log(`   ${log.created_at}: ${log.message}`);
      });
    } else {
      console.log(`   ‚ùå –ù–ï–¢ –ª–æ–≥–æ–≤ —Å processTonDeposit –≤ –ë–î`);
    }

    // 6. –ü–†–û–í–ï–†–ö–ê API –í–´–ó–û–í–û–í TON –î–ï–ü–û–ó–ò–¢–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
    console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API ENDPOINT –î–û–°–¢–£–ü–ù–û–°–¢–ò:');
    
    const endpoints = [
      '/api/v2/wallet/ton-deposit',
      '/api/wallet/ton-deposit', 
      '/api/deposits/ton',
      '/api/ton/deposit'
    ];
    
    // –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    console.log(`üîó –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
    endpoints.forEach(endpoint => {
      console.log(`   ${endpoint}: –ù–£–ñ–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨`);
    });

    // 7. –ê–ù–ê–õ–ò–ó UnifiedTransactionService
    console.log('\n7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê UnifiedTransactionService:');
    
    const unifiedServicePath = './core/UnifiedTransactionService.ts';
    if (fs.existsSync(unifiedServicePath)) {
      const content = fs.readFileSync(unifiedServicePath, 'utf8');
      
      console.log('   ‚úÖ UnifiedTransactionService –ù–ê–ô–î–ï–ù');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É TON_DEPOSIT
      if (content.includes('TON_DEPOSIT')) {
        console.log('   ‚úÖ TON_DEPOSIT —Ç–∏–ø –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø');
      } else {
        console.log('   ‚ùå TON_DEPOSIT —Ç–∏–ø –ù–ï –ù–ê–ô–î–ï–ù –≤ –º–∞–ø–ø–∏–Ω–≥–µ!');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TRANSACTION_TYPE_MAPPING
      if (content.includes('TRANSACTION_TYPE_MAPPING')) {
        const mappingStart = content.indexOf('TRANSACTION_TYPE_MAPPING');
        const mappingEnd = content.indexOf('}', mappingStart) + 1;
        const mappingCode = content.substring(mappingStart, mappingEnd);
        
        console.log('\n   üìã TRANSACTION_TYPE_MAPPING:');
        const lines = mappingCode.split('\n');
        lines.forEach(line => {
          if (line.includes('TON_DEPOSIT') || line.includes('DEPOSIT')) {
            console.log(`     ${line.trim()}`);
          }
        });
      }
    } else {
      console.log('   ‚ùå UnifiedTransactionService –ù–ï –ù–ê–ô–î–ï–ù!');
    }

    // 8. –í–´–í–û–î–´ –ò –ì–ò–ü–û–¢–ï–ó–´
    console.log('\n8Ô∏è‚É£ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –í–´–í–û–î–´:');
    
    console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    console.log('   1. API —ç–Ω–¥–ø–æ–∏–Ω—Ç /ton-deposit –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –∏–ª–∏ –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    console.log('   2. processTonDeposit() –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø –∏–∑ API');
    console.log('   3. UnifiedTransactionService –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ TON_DEPOSIT');
    console.log('   4. –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ processTonDeposit() –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   5. Balance –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –î–†–£–ì–ò–ú —Å–ø–æ—Å–æ–±–æ–º, –º–∏–Ω—É—è processTonDeposit()');
    
    console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/v2/wallet/ton-deposit');
    console.log('   2. –ù–∞–π—Ç–∏ –ö–ê–ö —Ä–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è TON –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ processTonDeposit()');
    console.log('   4. –ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:', error);
  }
}

investigateProcessTonDeposit().catch(console.error);