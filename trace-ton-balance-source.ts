import { supabase } from './core/supabaseClient';

async function traceTonBalanceSource() {
  console.log('üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê TON –ë–ê–õ–ê–ù–°–û–í - –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó');
  console.log('='.repeat(80));

  try {
    // 1. –ê–ù–ê–õ–ò–ó: –ß—Ç–æ TONBoostIncomeScheduler —Ä–µ–∞–ª—å–Ω–æ –¥–µ–ª–∞–µ—Ç
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TONBoostIncomeScheduler:');
    console.log('   ‚ùì –í–û–ü–†–û–°: –û—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ó–ù–ê–ï–¢ –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö?');
    console.log('   üîç –ì–ò–ü–û–¢–ï–ó–ê: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç –î–û–•–û–î–´, –Ω–æ –ù–ï –¥–µ–ø–æ–∑–∏—Ç—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–ª–∞–µ—Ç getActiveBoostUsers
    const { data: tonFarmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true)
      .limit(5);

    if (!farmingError && tonFarmingData) {
      console.log(`   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${tonFarmingData.length}`);
      
      if (tonFarmingData.length > 0) {
        console.log('   üìã –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost:');
        tonFarmingData.forEach((item, idx) => {
          console.log(`     ${idx + 1}. User ${item.user_id}: Package ${item.boost_package_id}`);
          console.log(`        Start: ${item.boost_farming_start}`);
          console.log(`        Last Update: ${item.boost_farming_last_update}`);
        });
      }
    } else if (farmingError?.code === '42P01') {
      console.log('   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ton_farming_data:', farmingError?.message);
    }

    // 2. –ì–õ–ê–í–ù–´–ô –í–û–ü–†–û–°: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ TON Boost?
    console.log('\n2Ô∏è‚É£ –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ê–ö–¢–ò–í–ò–†–£–Æ–¢ TON BOOST:');
    
    // –ò—â–µ–º BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: boostPurchases, error: boostError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BOOST_PURCHASE')
      .gte('user_id', 191)
      .lte('user_id', 303)
      .order('created_at', { ascending: false })
      .limit(10);

    if (!boostError && boostPurchases && boostPurchases.length > 0) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostPurchases.length} BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      boostPurchases.forEach((tx, idx) => {
        console.log(`     ${idx + 1}. User ${tx.user_id}: ${tx.amount_ton || tx.amount} TON`);
        console.log(`        [${tx.created_at}] ${tx.description}`);
        console.log(`        Status: ${tx.status}`);
      });
    } else {
      console.log('   ‚ùå –ù–ò –û–î–ù–û–ô BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }

    // 3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –û—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π TON –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Boost?
    console.log('\n3Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–û–ü–†–û–°: –ò–°–¢–û–ß–ù–ò–ö –ò–ó–ù–ê–ß–ê–õ–¨–ù–û–ì–û TON –ë–ê–õ–ê–ù–°–ê');
    
    console.log('   üß† –õ–û–ì–ò–ß–ï–°–ö–ê–Ø –¶–ï–ü–û–ß–ö–ê:');
    console.log('   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç TON Boost ‚Üí —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è TON —Å –±–∞–ª–∞–Ω—Å–∞');
    console.log('   2. –ù–û: –û—Ç–∫—É–¥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ TON?');
    console.log('   3. –ï–°–õ–ò –ù–ï–¢ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ‚Üí TON –ø–æ—è–≤–∏–ª–∏—Å—å –î–†–£–ì–ò–ú —Å–ø–æ—Å–æ–±–æ–º');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª TON –±–∞–ª–∞–Ω—Å –î–û boost –ø–æ–∫—É–ø–∫–∏
    if (boostPurchases && boostPurchases.length > 0) {
      const firstBoost = boostPurchases[0];
      const userId = firstBoost.user_id;
      const boostDate = firstBoost.created_at;
      
      console.log(`\n   üîç –ê–ù–ê–õ–ò–ó User ${userId} - –ø–µ—Ä–≤–∞—è BOOST –ø–æ–∫—É–ø–∫–∞ ${boostDate}:`);
      
      // –ò—â–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ü–ï–†–ï–î boost –ø–æ–∫—É–ø–∫–æ–π
      const { data: priorTransactions, error: priorError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .lt('created_at', boostDate)
        .order('created_at', { ascending: false });

      if (!priorError && priorTransactions) {
        console.log(`     üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –î–û boost –ø–æ–∫—É–ø–∫–∏: ${priorTransactions.length}`);
        
        const tonTransactions = priorTransactions.filter(tx => 
          tx.currency === 'TON' || tx.amount_ton > 0
        );
        
        console.log(`     üí∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –î–û boost: ${tonTransactions.length}`);
        
        if (tonTransactions.length > 0) {
          console.log('     üìã TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ü–ï–†–ï–î boost –ø–æ–∫—É–ø–∫–æ–π:');
          tonTransactions.forEach((tx, idx) => {
            console.log(`       ${idx + 1}. [${tx.created_at}] ${tx.type}`);
            console.log(`          Amount: ${tx.amount_ton || tx.amount} TON`);
            console.log(`          Description: ${tx.description}`);
          });
        } else {
          console.log('     ‚ùå –ù–ò –û–î–ù–û–ô TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –î–û boost –ø–æ–∫—É–ø–∫–∏!');
          console.log('     üö® –ü–ê–†–ê–î–û–ö–°: –û—Ç–∫—É–¥–∞ –≤–∑—è–ª–∏—Å—å TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏ boost?');
        }
      }
    }

    // 4. –ü–û–ò–°–ö –°–ö–†–´–¢–´–• –ú–ï–•–ê–ù–ò–ó–ú–û–í –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –°–ö–†–´–¢–´–• –ú–ï–•–ê–ù–ò–ó–ú–û–í –ü–û–ü–û–õ–ù–ï–ù–ò–Ø:');
    
    // –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è users.balance_ton –Ω–∞–ø—Ä—è–º—É—é
    console.log('   üîç –ì–ò–ü–û–¢–ï–ó–´:');
    console.log('   A) –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ balance_ton –≤ –∫–æ–¥–µ –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   B) –í–Ω–µ—à–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ (webhook, API) –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã');
    console.log('   C) –†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É');
    console.log('   D) –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON
    const { data: oldestTonUsers, error: oldestError } = await supabase
      .from('users')
      .select('id, username, balance_ton, created_at, updated_at')
      .gt('balance_ton', 0)
      .gte('id', 191)
      .lte('id', 303)
      .order('created_at', { ascending: true })
      .limit(5);

    if (!oldestError && oldestTonUsers) {
      console.log('\n   üìÖ –°–ê–ú–´–ï –°–¢–ê–†–´–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –±–∞–ª–∞–Ω—Å–æ–º:');
      oldestTonUsers.forEach((user, idx) => {
        const createdDate = new Date(user.created_at);
        const updatedDate = new Date(user.updated_at);
        const daysBetween = Math.floor((updatedDate.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24));
        
        console.log(`     ${idx + 1}. User ${user.id} (${user.username})`);
        console.log(`        Balance: ${user.balance_ton} TON`);
        console.log(`        Created: ${user.created_at}`);
        console.log(`        Updated: ${user.updated_at}`);
        console.log(`        Days between: ${daysBetween}`);
        
        if (daysBetween === 0) {
          console.log('        üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ë–∞–ª–∞–Ω—Å –ø–æ—è–≤–∏–ª—Å—è –≤ –¥–µ–Ω—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
        }
      });
    }

    // 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ –õ–Æ–ë–´–ï –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏?
    console.log('\n5Ô∏è‚É£ –ü–û–ò–°–ö –õ–Æ–ë–´–• –î–ï–ü–û–ó–ò–¢–ù–´–• –û–ü–ï–†–ê–¶–ò–ô:');
    
    const depositTypes = ['DEPOSIT', 'TON_DEPOSIT', 'FARMING_DEPOSIT', 'deposit'];
    
    for (const type of depositTypes) {
      const { data: deposits, error: depError } = await supabase
        .from('transactions')
        .select('id, user_id, type, amount_ton, amount, created_at, description')
        .or(`type.eq.${type},type.ilike.%${type}%`)
        .gte('user_id', 191)
        .lte('user_id', 303)
        .limit(5);

      if (!depError && deposits && deposits.length > 0) {
        console.log(`\n   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${deposits.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ "${type}":`);
        deposits.forEach((tx, idx) => {
          console.log(`     ${idx + 1}. User ${tx.user_id}: ${tx.amount_ton || tx.amount} TON`);
          console.log(`        [${tx.created_at}] ${tx.description}`);
        });
      } else {
        console.log(`   ‚ùå –ù–ï–¢ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ "${type}"`);
      }
    }

    // 6. –í–´–í–û–î–´ –ò –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò
    console.log('\n6Ô∏è‚É£ –í–´–í–û–î–´ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    
    console.log('\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:');
    console.log('   1. TONBoostIncomeScheduler —Ç–æ–ª—å–∫–æ –ù–ê–ß–ò–°–õ–Ø–ï–¢ –¥–æ—Ö–æ–¥—ã –æ—Ç boost');
    console.log('   2. –ù–ï –ù–ê–ô–î–ï–ù–û –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON –±–∞–ª–∞–Ω—Å–æ–≤');
    console.log('   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫—É–ø–∞—é—Ç boost, –Ω–æ –Ω–µ—è—Å–Ω–æ –æ—Ç–∫—É–¥–∞ –≤–∑—è–ª–∏—Å—å TON');
    console.log('   4. –õ–∏–±–æ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–π –º–µ—Ö–∞–Ω–∏–∑–º, –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    
    console.log('\nüîç –ù–£–ñ–ù–û –ò–°–°–õ–ï–î–û–í–ê–¢–¨ –î–ê–õ–¨–®–ï:');
    console.log('   1. –ù–∞–π—Ç–∏ –≥–¥–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ï –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏');
    console.log('   3. –ù–∞–π—Ç–∏ webhook –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ API –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–∞ —Ä—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ');

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–†–ê–°–°–ò–†–û–í–ö–ò:', error);
  }
}

traceTonBalanceSource().catch(console.error);