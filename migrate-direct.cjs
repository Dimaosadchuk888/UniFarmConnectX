/**
 * –ü—Ä—è–º–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –≤ PostgreSQL –Ω–∞ Replit
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã Drizzle –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–º
 */
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit
 */
function loadEnvFromReplit() {
  const replitEnvPath = path.join(process.cwd(), '.env.replit');
  
  if (!fs.existsSync(replitEnvPath)) {
    log(`‚ùå –§–∞–π–ª .env.replit –Ω–µ –Ω–∞–π–¥–µ–Ω!`, colors.red);
    process.exit(1);
  }
  
  log(`üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.replit...`, colors.blue);
  const envConfig = dotenv.parse(fs.readFileSync(replitEnvPath));
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Replit PostgreSQL
  envConfig.DATABASE_PROVIDER = 'replit';
  envConfig.USE_LOCAL_DB_ONLY = 'true';
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  for (const key in envConfig) {
    process.env[key] = envConfig[key];
  }
  
  log(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env.replit`, colors.green);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL
 */
function checkPostgreSQLRunning() {
  log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PostgreSQL...`, colors.blue);
  
  try {
    const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
    const result = execSync(`PGHOST=${pgSocketPath} PGUSER=${process.env.PGUSER} psql -d postgres -c "SELECT 1" -t`).toString().trim();
    
    if (result === '1') {
      log(`‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω`, colors.green);
      return true;
    } else {
      log(`‚ö†Ô∏è PostgreSQL –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`, colors.yellow);
      return false;
    }
  } catch (err) {
    log(`‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`, colors.red);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç PostgreSQL —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç start-postgres.sh
 */
function startPostgreSQL() {
  log(`üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL...`, colors.blue);
  
  try {
    execSync('bash ./start-postgres.sh', { stdio: 'inherit' });
    log(`‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`, colors.green);
    return true;
  } catch (err) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL: ${err.message}`, colors.red);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü
 */
async function createBasicTables() {
  log(`\n${colors.blue}=== –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü ===${colors.reset}`);
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const pgSocketPath = process.env.PGSOCKET || path.join(process.env.HOME, '.postgresql', 'sockets');
  const pool = new Pool({
    host: pgSocketPath,
    user: process.env.PGUSER || 'runner',
    database: process.env.PGDATABASE || 'postgres',
    password: process.env.PGPASSWORD || '',
    port: parseInt(process.env.PGPORT || '5432'),
  });
  
  try {
    // –ú–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const createTableQueries = [
      // –¢–∞–±–ª–∏—Ü–∞ auth_users
      `CREATE TABLE IF NOT EXISTS auth_users (
        id SERIAL PRIMARY KEY,
        username TEXT NOT NULL UNIQUE,
        password TEXT DEFAULT 'telegram_auth'
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ users
      `CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT UNIQUE,
        guest_id TEXT UNIQUE,
        username TEXT,
        wallet TEXT,
        ton_wallet_address TEXT,
        ref_code TEXT UNIQUE,
        parent_ref_code TEXT,
        balance_uni NUMERIC(18, 6) DEFAULT 0,
        balance_ton NUMERIC(18, 6) DEFAULT 0,
        uni_deposit_amount NUMERIC(18, 6) DEFAULT 0,
        uni_farming_start_timestamp TIMESTAMP,
        uni_farming_balance NUMERIC(18, 6) DEFAULT 0,
        uni_farming_rate NUMERIC(18, 6) DEFAULT 0,
        uni_farming_last_update TIMESTAMP,
        uni_farming_deposit NUMERIC(18, 6) DEFAULT 0,
        uni_farming_activated_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        checkin_last_date TIMESTAMP,
        checkin_streak INTEGER DEFAULT 0
      )`,
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
      `CREATE INDEX IF NOT EXISTS idx_users_parent_ref_code ON users (parent_ref_code)`,
      `CREATE INDEX IF NOT EXISTS idx_users_ref_code ON users (ref_code)`,
      
      // –¢–∞–±–ª–∏—Ü–∞ farming_deposits
      `CREATE TABLE IF NOT EXISTS farming_deposits (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        amount_uni NUMERIC(18, 6),
        rate_uni NUMERIC(5, 2),
        rate_ton NUMERIC(5, 2),
        created_at TIMESTAMP DEFAULT NOW(),
        last_claim TIMESTAMP,
        is_boosted BOOLEAN DEFAULT FALSE,
        deposit_type TEXT DEFAULT 'regular',
        boost_id INTEGER,
        expires_at TIMESTAMP
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ transactions
      `CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        type TEXT,
        currency TEXT,
        amount NUMERIC(18, 6),
        status TEXT DEFAULT 'confirmed',
        source TEXT,
        category TEXT,
        tx_hash TEXT,
        description TEXT,
        source_user_id INTEGER,
        wallet_address TEXT,
        data TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      )`,
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions
      `CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions (user_id)`,
      `CREATE INDEX IF NOT EXISTS idx_transactions_source_user_id ON transactions (source_user_id)`,
      `CREATE INDEX IF NOT EXISTS idx_transactions_type_status ON transactions (type, status)`,
      
      // –¢–∞–±–ª–∏—Ü–∞ referrals
      `CREATE TABLE IF NOT EXISTS referrals (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        inviter_id INTEGER NOT NULL REFERENCES users(id),
        level INTEGER NOT NULL,
        reward_uni NUMERIC(18, 6),
        ref_path JSONB[],
        created_at TIMESTAMP DEFAULT NOW()
      )`,
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã referrals
      `CREATE INDEX IF NOT EXISTS idx_referrals_user_id ON referrals (user_id)`,
      `CREATE INDEX IF NOT EXISTS idx_referrals_inviter_id ON referrals (inviter_id)`,
      `CREATE INDEX IF NOT EXISTS idx_referrals_user_inviter ON referrals (user_id, inviter_id)`,
      `CREATE INDEX IF NOT EXISTS idx_referrals_level ON referrals (level)`,
      
      // –¢–∞–±–ª–∏—Ü–∞ missions
      `CREATE TABLE IF NOT EXISTS missions (
        id SERIAL PRIMARY KEY,
        type TEXT,
        title TEXT,
        description TEXT,
        reward_uni NUMERIC(18, 6),
        is_active BOOLEAN DEFAULT TRUE
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ user_missions
      `CREATE TABLE IF NOT EXISTS user_missions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        mission_id INTEGER REFERENCES missions(id),
        completed_at TIMESTAMP DEFAULT NOW()
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ uni_farming_deposits
      `CREATE TABLE IF NOT EXISTS uni_farming_deposits (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        amount NUMERIC(18, 6) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW() NOT NULL,
        rate_per_second NUMERIC(20, 18) NOT NULL,
        last_updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
        is_active BOOLEAN DEFAULT TRUE
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ ton_boost_deposits
      `CREATE TABLE IF NOT EXISTS ton_boost_deposits (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        ton_amount NUMERIC(18, 5) NOT NULL,
        bonus_uni NUMERIC(18, 6) NOT NULL,
        rate_ton_per_second NUMERIC(20, 18) NOT NULL,
        rate_uni_per_second NUMERIC(20, 18) NOT NULL,
        accumulated_ton NUMERIC(18, 10) DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW() NOT NULL,
        last_updated_at TIMESTAMP DEFAULT NOW() NOT NULL,
        is_active BOOLEAN DEFAULT TRUE
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ launch_logs
      `CREATE TABLE IF NOT EXISTS launch_logs (
        id SERIAL PRIMARY KEY,
        telegram_user_id BIGINT,
        ref_code TEXT,
        platform TEXT,
        timestamp TIMESTAMP DEFAULT NOW() NOT NULL,
        user_agent TEXT,
        init_data TEXT,
        ip_address TEXT,
        request_id TEXT,
        user_id INTEGER REFERENCES users(id)
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ partition_logs
      `CREATE TABLE IF NOT EXISTS partition_logs (
        id SERIAL PRIMARY KEY,
        operation TEXT NOT NULL,
        partition_name TEXT,
        message TEXT NOT NULL,
        timestamp TIMESTAMP DEFAULT NOW() NOT NULL,
        status TEXT NOT NULL,
        error_details TEXT
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ reward_distribution_logs
      `CREATE TABLE IF NOT EXISTS reward_distribution_logs (
        id SERIAL PRIMARY KEY,
        batch_id TEXT NOT NULL,
        source_user_id INTEGER NOT NULL,
        earned_amount NUMERIC(18, 6) NOT NULL,
        currency TEXT NOT NULL,
        processed_at TIMESTAMP,
        status TEXT DEFAULT 'pending',
        levels_processed INTEGER,
        inviter_count INTEGER,
        total_distributed NUMERIC(18, 6),
        error_message TEXT,
        completed_at TIMESTAMP
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ performance_metrics
      `CREATE TABLE IF NOT EXISTS performance_metrics (
        id SERIAL PRIMARY KEY,
        operation TEXT NOT NULL,
        batch_id TEXT,
        duration_ms NUMERIC(12, 2) NOT NULL,
        timestamp TIMESTAMP DEFAULT NOW() NOT NULL,
        details TEXT
      )`,
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã performance_metrics
      `CREATE INDEX IF NOT EXISTS idx_performance_metrics_timestamp ON performance_metrics (timestamp)`,
      `CREATE INDEX IF NOT EXISTS idx_performance_metrics_operation ON performance_metrics (operation)`,
      `CREATE INDEX IF NOT EXISTS idx_performance_metrics_batch_id ON performance_metrics (batch_id)`
    ];
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    for (const query of createTableQueries) {
      log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞...`, colors.blue);
      await pool.query(query);
      log(`‚úÖ SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`, colors.green);
    }
    
    log(`‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã`, colors.green);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const result = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    log(`üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, colors.cyan);
    console.table(result.rows.map(row => row.table_name));
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: ${error.message}`, colors.red);
    console.error(error);
    return false;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await pool.end();
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  log(`\n${colors.magenta}=======================================${colors.reset}`);
  log(`${colors.magenta}= –ü–†–Ø–ú–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –°–•–ï–ú–´ –í POSTGRESQL =${colors.reset}`);
  log(`${colors.magenta}=======================================${colors.reset}\n`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  loadEnvFromReplit();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL
  if (!checkPostgreSQLRunning()) {
    log(`üîÑ PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å...`, colors.yellow);
    if (!startPostgreSQL()) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞`, colors.red);
      process.exit(1);
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  if (await createBasicTables()) {
    log(`\n${colors.green}‚úÖ –ü—Ä—è–º–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}`);
  } else {
    log(`\n${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
  console.error(err);
  process.exit(1);
});