/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤
 */

const fetch = require('node-fetch');

async function testWebSocketNotifications() {
  console.log('üîî –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ WEBSOCKET –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
  console.log('='.repeat(60));
  
  const baseUrl = 'http://localhost:3000';
  const testUserId = 48;
  
  console.log('\nüìä 1. –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï');
  console.log('-'.repeat(30));
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const profileResponse = await fetch(`${baseUrl}/api/v2/users/profile`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6NDgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE2MzQzNjgsImV4cCI6MTc1MjIzOTE2OH0.HqRClaqgo3O9LuQ_uCgBbyrUfTl0Cqy0lBC1pjin3Pw`
      }
    });
    
    if (profileResponse.ok) {
      const profile = await profileResponse.json();
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profile.username} (ID: ${profile.id})`);
      console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${profile.balance_uni}`);
      console.log(`   TON –±–∞–ª–∞–Ω—Å: ${profile.balance_ton}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
  }
  
  console.log('\nüöÄ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
  console.log('-'.repeat(30));
  
  // –¢–µ—Å—Ç 1: UNI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  console.log('\nüìà –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ UNI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (+25.5 UNI)');
  try {
    const uniResponse = await fetch(`${baseUrl}/api/v2/test/balance-notification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        changeAmount: 25.5,
        currency: 'UNI'
      })
    });
    
    const uniResult = await uniResponse.json();
    if (uniResponse.ok) {
      console.log(`‚úÖ UNI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${uniResult.message}`);
      console.log(`   –î–∞–Ω–Ω—ã–µ: +${uniResult.data.changeAmount} ${uniResult.data.currency}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ UNI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${uniResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ UNI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
  }
  
  // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
  console.log('\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –¢–µ—Å—Ç 2: TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  console.log('\nüìà –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (+10.8 TON)');
  try {
    const tonResponse = await fetch(`${baseUrl}/api/v2/test/balance-notification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        changeAmount: 10.8,
        currency: 'TON'
      })
    });
    
    const tonResult = await tonResponse.json();
    if (tonResponse.ok) {
      console.log(`‚úÖ TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${tonResult.message}`);
      console.log(`   –î–∞–Ω–Ω—ã–µ: +${tonResult.data.changeAmount} ${tonResult.data.currency}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${tonResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
  }
  
  // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
  console.log('\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –¢–µ—Å—Ç 3: –°–µ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞)
  console.log('\nüîÑ –¢–µ—Å—Ç 3: –°–µ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞)');
  const farmingSimulation = [
    { amount: 2.1, currency: 'UNI', source: 'farming' },
    { amount: 0.5, currency: 'TON', source: 'boost' },
    { amount: 1.8, currency: 'UNI', source: 'referral' },
    { amount: 15.0, currency: 'UNI', source: 'daily_bonus' }
  ];
  
  for (let i = 0; i < farmingSimulation.length; i++) {
    const test = farmingSimulation[i];
    console.log(`\n   ${i + 1}/${farmingSimulation.length}: +${test.amount} ${test.currency} (${test.source})`);
    
    try {
      const response = await fetch(`${baseUrl}/api/v2/test/balance-notification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: testUserId,
          changeAmount: test.amount,
          currency: test.currency
        })
      });
      
      if (response.ok) {
        console.log(`      ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      } else {
        const error = await response.json();
        console.log(`      ‚ùå –û—à–∏–±–∫–∞: ${error.error}`);
      }
    } catch (error) {
      console.log(`      ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 1500));
  }
  
  console.log('\n‚úÖ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('-'.repeat(30));
  console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å UniFarm:');
  console.log('   ‚Ä¢ BalanceCard –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
  console.log('   ‚Ä¢ –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏');
  console.log('   ‚Ä¢ WebSocket —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "connected"');
  console.log('   ‚Ä¢ Debounce –º–µ—Ö–∞–Ω–∏–∑–º –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ª–∏—à–Ω–∏–µ API –≤—ã–∑–æ–≤—ã');
  console.log('\nüîç –õ–æ–≥–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∫–∞–∂—É—Ç:');
  console.log('   ‚Ä¢ [BALANCE_NOTIFICATION] Sending notification to user...');
  console.log('   ‚Ä¢ [WebSocket] Balance update sent...');
  console.log('   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  
  console.log('\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION');
  console.log('='.repeat(60));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testWebSocketNotifications().catch(console.error);
}

module.exports = { testWebSocketNotifications };