/**
 * –ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
 * –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü 'transactions' vs 'user_transactions'
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

const fs = require('fs');
const path = require('path');

console.log('üîç PRODUCTION SAFETY AUDIT - –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶');
console.log('='.repeat(60));

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extension = '.ts') {
  let results = [];
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      results = results.concat(findFiles(filePath, extension));
    } else if (file.endsWith(extension)) {
      results.push(filePath);
    }
  }
  
  return results;
}

// –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –∫–æ–¥–µ
function analyzeTableUsage() {
  console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• –£–ü–û–ú–ò–ù–ê–ù–ò–ô –¢–ê–ë–õ–ò–¶ –í –ö–û–î–ï');
  
  const tsFiles = findFiles('.', '.ts').concat(findFiles('.', '.js'));
  let transactionsUsage = [];
  let userTransactionsUsage = [];
  
  tsFiles.forEach(filePath => {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n');
      
      lines.forEach((line, index) => {
        if (line.includes("'transactions'") || line.includes('"transactions"')) {
          transactionsUsage.push({
            file: filePath,
            line: index + 1,
            content: line.trim()
          });
        }
        
        if (line.includes("'user_transactions'") || line.includes('"user_transactions"')) {
          userTransactionsUsage.push({
            file: filePath,
            line: index + 1,
            content: line.trim()
          });
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    }
  });
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:`);
  console.log(`   'transactions' –Ω–∞–π–¥–µ–Ω–æ –≤ ${transactionsUsage.length} –º–µ—Å—Ç–∞—Ö`);
  console.log(`   'user_transactions' –Ω–∞–π–¥–µ–Ω–æ –≤ ${userTransactionsUsage.length} –º–µ—Å—Ç–∞—Ö`);
  
  return { transactionsUsage, userTransactionsUsage };
}

// –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
function analyzeCriticalFiles() {
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í');
  
  const criticalFiles = [
    'modules/wallet/service.ts',
    'modules/wallet/controller.ts', 
    'modules/transactions/service.ts',
    'core/BalanceManager.ts',
    'shared/schema.ts'
  ];
  
  criticalFiles.forEach(filePath => {
    try {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        console.log(`\n   üìÑ ${filePath}:`);
        
        const transactionsCount = (content.match(/'transactions'|"transactions"/g) || []).length;
        const userTransactionsCount = (content.match(/'user_transactions'|"user_transactions"/g) || []).length;
        
        console.log(`       'transactions': ${transactionsCount} —Ä–∞–∑`);
        console.log(`       'user_transactions': ${userTransactionsCount} —Ä–∞–∑`);
        
        if (transactionsCount > 0 && userTransactionsCount > 0) {
          console.log(`       ‚ö†Ô∏è –°–ú–ï–®–ê–ù–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –û–ë–ï–ò–• –¢–ê–ë–õ–ò–¶!`);
        }
      } else {
        console.log(`\n   ‚ùå ${filePath}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    } catch (error) {
      console.log(`\n   ‚ùå ${filePath}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è`);
    }
  });
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function analyzeDatabaseSchema() {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  
  try {
    if (fs.existsSync('shared/schema.ts')) {
      const schema = fs.readFileSync('shared/schema.ts', 'utf8');
      
      console.log(`   üìã –ê–Ω–∞–ª–∏–∑ shared/schema.ts:`);
      
      if (schema.includes('transactions')) {
        console.log(`       ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'transactions' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ`);
      } else {
        console.log(`       ‚ùå –¢–∞–±–ª–∏—Ü–∞ 'transactions' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ`);
      }
      
      if (schema.includes('user_transactions')) {
        console.log(`       ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_transactions' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ`);
      } else {
        console.log(`       ‚ùå –¢–∞–±–ª–∏—Ü–∞ 'user_transactions' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ`);
      }
      
      // –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      const tables = schema.match(/export const \w+ = pgTable\('(\w+)'/g) || [];
      console.log(`   üìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ: ${tables.length}`);
      tables.forEach(table => {
        if (table.includes('transaction')) {
          console.log(`       üìÑ ${table}`);
        }
      });
      
    } else {
      console.log(`   ‚ùå shared/schema.ts –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã: ${error.message}`);
  }
}

// –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function assessRisks(transactionsUsage, userTransactionsUsage) {
  console.log('\n4Ô∏è‚É£ –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í –ò–ó–ú–ï–ù–ï–ù–ò–ô');
  
  console.log(`\n   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`       –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π 'transactions': ${transactionsUsage.length}`);
  console.log(`       –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π 'user_transactions': ${userTransactionsUsage.length}`);
  
  console.log(`\n   üéØ –§–ê–ô–õ–´ –° 'transactions':`);
  const filesCounts = {};
  transactionsUsage.forEach(usage => {
    filesCounts[usage.file] = (filesCounts[usage.file] || 0) + 1;
  });
  
  Object.entries(filesCounts).forEach(([file, count]) => {
    console.log(`       ${file}: ${count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
  });
  
  console.log(`\n   ‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò:`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
  const conflictFiles = [];
  Object.keys(filesCounts).forEach(file => {
    const hasUserTransactions = userTransactionsUsage.some(usage => usage.file === file);
    if (hasUserTransactions) {
      conflictFiles.push(file);
    }
  });
  
  if (conflictFiles.length > 0) {
    console.log(`       üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö: –°–º–µ—à–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª–∞—Ö:`);
    conflictFiles.forEach(file => {
      console.log(`          - ${file}`);
    });
  } else {
    console.log(`       ‚úÖ –ù–ò–ó–ö–ò–ô –†–ò–°–ö: –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
  const criticalAffected = transactionsUsage.filter(usage => 
    usage.file.includes('wallet') || 
    usage.file.includes('balance') || 
    usage.file.includes('transaction')
  );
  
  if (criticalAffected.length > 0) {
    console.log(`       ‚ö†Ô∏è –°–†–ï–î–ù–ò–ô –†–ò–°–ö: –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏:`);
    criticalAffected.forEach(usage => {
      console.log(`          ${usage.file}:${usage.line}`);
    });
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
function provideSafetyRecommendations() {
  console.log('\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–´–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú');
  
  console.log(`\n   üõ°Ô∏è –°–¢–†–ê–¢–ï–ì–ò–Ø –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –†–ò–°–ö–ê:`);
  console.log(`       1. –ò–∑–º–µ–Ω—è—Ç—å –¢–û–õ–¨–ö–û modules/wallet/service.ts`);
  console.log(`       2. –ò–∑–º–µ–Ω—è—Ç—å –¢–û–õ–¨–ö–û —Å—Ç—Ä–æ–∫–∏ 375 –∏ 417`);
  console.log(`       3. –ù–ï —Ç—Ä–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ`);
  console.log(`       4. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ`);
  
  console.log(`\n   üß™ –ü–õ–ê–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`       1. –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞`);
  console.log(`       2. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 2 —Å—Ç—Ä–æ–∫–∏`);
  console.log(`       3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º –¥–µ–ø–æ–∑–∏—Ç–æ–º 0.01 TON`);
  console.log(`       4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å–ª–æ–º–∞–ª–∏—Å—å`);
  console.log(`       5. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ - –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç User #25`);
  
  console.log(`\n   üîÑ –ü–õ–ê–ù –û–¢–ö–ê–¢–ê:`);
  console.log(`       1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö`);
  console.log(`       2. –ü—Ä–∏ –æ—à–∏–±–∫–µ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª`);
  console.log(`       3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä`);
  console.log(`       4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã`);
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞
console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú PRODUCTION SAFETY AUDIT...\n');

const { transactionsUsage, userTransactionsUsage } = analyzeTableUsage();
analyzeCriticalFiles();
analyzeDatabaseSchema();
assessRisks(transactionsUsage, userTransactionsUsage);
provideSafetyRecommendations();

console.log('\n' + '='.repeat(60));
console.log('‚úÖ –ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù');
console.log('='.repeat(60));