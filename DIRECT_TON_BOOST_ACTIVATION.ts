#!/usr/bin/env tsx
/**
 * –ü—Ä—è–º–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 251 –∏ 255
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –º–µ—Ç–æ–¥—ã —á—Ç–æ –∏ —Å–∏—Å—Ç–µ–º–∞, –Ω–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–æ–¥—É–ª–∏
 */

async function main() {
  console.log('üöÄ === –ü–†–Ø–ú–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í ===');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toISOString());
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 251, 255');
  console.log('üí∞ –î–µ–ø–æ–∑–∏—Ç: 2 TON –∫–∞–∂–¥–æ–º—É');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    const { createClient } = await import('@supabase/supabase-js');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º)
    const supabaseUrl = 'https://wunnsvicbebssrjqedor.supabase.co';
    const supabaseKey = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1bm5zdmljYmVic3NyanFlZG9yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjAzNjc5NjcsImV4cCI6MjAzNTk0Mzk2N30.mH6cD4A6UD7RwzrwClFHqBGvWyxXqE6Tz9ZGP0PYbRY';
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    const targetUsers = [251, 255];
    const depositAmount = 2;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç
    console.log('\nüì¶ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ TON Boost –ø–∞–∫–µ—Ç–∞...');
    const { data: packages, error: packagesError } = await supabase
      .from('boost_packages')
      .select('*')
      .eq('is_active', true)
      .lte('min_amount', depositAmount)
      .order('min_amount', { ascending: false })
      .limit(1);
      
    if (packagesError || !packages || packages.length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç:', packagesError);
      return;
    }
    
    const selectedPackage = packages[0];
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: ${selectedPackage.name}`, {
      id: selectedPackage.id,
      minAmount: selectedPackage.min_amount,
      dailyRate: selectedPackage.daily_rate,
      uniBonus: selectedPackage.uni_bonus
    });
    
    const results = [];
    
    for (const userId of targetUsers) {
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üîÑ –ê–ö–¢–ò–í–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}`);
      console.log(`${'='.repeat(60)}`);
      
      try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('*')
          .eq('id', userId)
          .single();
          
        if (userError || !user) {
          console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, userError);
          results.push({ userId, success: false });
          continue;
        }
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–π–¥–µ–Ω:`, {
          username: user.username,
          tonBalance: user.balance_ton,
          currentBoostActive: user.ton_boost_active
        });
        
        // 2. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const currentBalance = parseFloat(user.balance_ton || '0');
        if (currentBalance < depositAmount) {
          const newBalance = currentBalance + depositAmount + 0.1; // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
          console.log(`üí≥ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚Üí ${newBalance} TON`);
          
          const { error: balanceError } = await supabase
            .from('users')
            .update({ 
              balance_ton: newBalance,
              updated_at: new Date().toISOString()
            })
            .eq('id', userId);
            
          if (balanceError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userId}:`, balanceError);
            results.push({ userId, success: false });
            continue;
          }
          console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
        }
        
        // 3. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
        console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ TON Boost...`);
        const { data: transaction, error: transactionError } = await supabase
          .from('transactions')
          .insert({
            user_id: userId,
            type: 'BOOST_PURCHASE',
            amount: depositAmount,
            currency: 'TON',
            status: 'completed',
            description: `TON Boost Package Purchase: ${selectedPackage.name}`,
            metadata: {
              package_id: selectedPackage.id,
              package_name: selectedPackage.name,
              deposit_amount: depositAmount,
              rate_ton_per_second: selectedPackage.daily_rate / 86400, // daily rate to per second
              bonus_uni: selectedPackage.uni_bonus,
              manual_activation: true,
              activation_admin: 'manual_script'
            },
            created_at: new Date().toISOString()
          })
          .select()
          .single();
          
        if (transactionError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${userId}:`, transactionError);
          results.push({ userId, success: false });
          continue;
        }
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
        console.log(`üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
        const { error: userUpdateError } = await supabase
          .from('users')
          .update({
            ton_boost_active: true,
            ton_boost_package: selectedPackage.id,
            ton_boost_package_id: selectedPackage.id,
            ton_boost_rate: selectedPackage.daily_rate,
            balance_ton: parseFloat(user.balance_ton || '0') - depositAmount, // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É
            updated_at: new Date().toISOString()
          })
          .eq('id', userId);
          
        if (userUpdateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userUpdateError);
          results.push({ userId, success: false });
          continue;
        }
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
        
        // 5. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
        console.log(`üöú –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data...`);
        const farmingData = {
          user_id: userId.toString(),
          farming_balance: depositAmount,
          farming_rate: selectedPackage.daily_rate / 86400, // daily to per second
          boost_package_id: selectedPackage.id,
          boost_active: true,
          last_claim: new Date().toISOString(),
          farming_start_timestamp: new Date().toISOString(),
          farming_last_update: new Date().toISOString(),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        const { error: farmingError } = await supabase
          .from('ton_farming_data')
          .upsert(farmingData, { onConflict: 'user_id' });
          
        if (farmingError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ton_farming_data –¥–ª—è ${userId}:`, farmingError);
          results.push({ userId, success: false });
          continue;
        }
        console.log(`‚úÖ ton_farming_data —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // 6. –ù–∞—á–∏—Å–ª—è–µ–º UNI –±–æ–Ω—É—Å –µ—Å–ª–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω
        if (selectedPackage.uni_bonus > 0) {
          console.log(`üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI –±–æ–Ω—É—Å–∞: ${selectedPackage.uni_bonus} UNI...`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º UNI –±–∞–ª–∞–Ω—Å
          const currentUniBalance = parseFloat(user.balance_uni || '0');
          const newUniBalance = currentUniBalance + selectedPackage.uni_bonus;
          
          const { error: uniBalanceError } = await supabase
            .from('users')
            .update({ balance_uni: newUniBalance })
            .eq('id', userId);
            
          if (uniBalanceError) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UNI –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userId}:`, uniBalanceError);
          } else {
            console.log(`‚úÖ UNI –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: ${currentUniBalance} ‚Üí ${newUniBalance} UNI`);
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é UNI –±–æ–Ω—É—Å–∞
            const { error: bonusTransactionError } = await supabase
              .from('transactions')
              .insert({
                user_id: userId,
                type: 'DAILY_BONUS',
                amount: selectedPackage.uni_bonus,
                currency: 'UNI',
                status: 'completed',
                description: `TON Boost Package Bonus: ${selectedPackage.uni_bonus} UNI`,
                metadata: {
                  bonus_type: 'ton_boost_package',
                  package_id: selectedPackage.id,
                  package_name: selectedPackage.name
                },
                created_at: new Date().toISOString()
              });
              
            if (bonusTransactionError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UNI –±–æ–Ω—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${userId}`);
            }
          }
        }
        
        console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
        results.push({ userId, success: true });
        
      } catch (error) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        results.push({ userId, success: false });
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log(`\n${'='.repeat(60)}`);
    console.log('üìà === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
    console.log(`${'='.repeat(60)}`);
    
    results.forEach(({ userId, success }) => {
      console.log(`${success ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${success ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
    });
    
    const successCount = results.filter(r => r.success).length;
    console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã`);
    
    if (successCount === results.length) {
      console.log('üéâ –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 251 –∏ 255 —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã –ø–æ 2 TON');
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('‚úÖ –ë—É—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö');
      console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –∏–º –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===');
    for (const { userId, success } of results) {
      if (success) {
        const { data: finalUser } = await supabase
          .from('users')
          .select('ton_boost_active, ton_boost_package, balance_ton, balance_uni')
          .eq('id', userId)
          .single();
          
        const { data: farmingData } = await supabase
          .from('ton_farming_data')
          .select('farming_balance, boost_active')
          .eq('user_id', userId.toString())
          .single();
          
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:`, {
          boostActive: finalUser?.ton_boost_active,
          package: finalUser?.ton_boost_package,
          tonBalance: finalUser?.balance_ton,
          uniBalance: finalUser?.balance_uni,
          farmingBalance: farmingData?.farming_balance,
          farmingActive: farmingData?.boost_active
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
  }
}

main().catch(console.error);