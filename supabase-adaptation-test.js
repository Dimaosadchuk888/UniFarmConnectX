/**
 * –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é Supabase —Å—Ö–µ–º—É
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

class SupabaseAdaptationTest {
  constructor() {
    this.results = {
      users: { status: 'pending', operations: [] },
      farming: { status: 'pending', operations: [] },
      referrals: { status: 'pending', operations: [] },
      dailyBonus: { status: 'pending', operations: [] },
      transactions: { status: 'pending', operations: [] }
    };
    this.testUser = null;
  }

  log(module, operation, result) {
    console.log(`[${module.toUpperCase()}] ${operation}: ${result}`);
    this.results[module].operations.push({
      operation,
      result,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
   */
  async testUsersModule() {
    try {
      console.log('\nüë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
      const testUserData = {
        telegram_id: 555555555,
        username: 'adaptation_test_user',
        first_name: 'Adaptation',
        ref_code: `ADAPT_${Date.now()}`,
        balance_uni: '50.0',
        balance_ton: '25.0'
      };

      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert(testUserData)
        .select()
        .single();

      if (createError) {
        this.log('users', '–°–û–ó–î–ê–ù–ò–ï', `–û–®–ò–ë–ö–ê: ${createError.message}`);
        this.results.users.status = 'failed';
        return false;
      }

      this.testUser = newUser;
      this.log('users', '–°–û–ó–î–ê–ù–ò–ï', `–£–°–ü–ï–•: ID ${newUser.id}`);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
      const updateData = {
        checkin_last_date: new Date().toISOString().split('T')[0], // –í–º–µ—Å—Ç–æ last_active
        checkin_streak: 5 // –¢–µ—Å—Ç —Å—Ç—Ä–∏–∫–∞
      };

      const { error: updateError } = await supabase
        .from('users')
        .update(updateData)
        .eq('id', newUser.id);

      if (!updateError) {
        this.log('users', '–û–ë–ù–û–í–õ–ï–ù–ò–ï', '–£–°–ü–ï–•: checkin_last_date –∏ checkin_streak –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        this.log('users', '–û–ë–ù–û–í–õ–ï–ù–ò–ï', `–û–®–ò–ë–ö–ê: ${updateError.message}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
      const { data: userByRef } = await supabase
        .from('users')
        .select('id, username, ref_code')
        .eq('ref_code', newUser.ref_code)
        .single();

      if (userByRef) {
        this.log('users', '–ü–û–ò–°–ö_REF', '–£–°–ü–ï–•: –ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }

      this.results.users.status = 'success';
      return true;

    } catch (error) {
      this.log('users', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.results.users.status = 'failed';
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–µ–π –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã
   */
  async testFarmingModule() {
    try {
      console.log('\nüåæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –§–∞—Ä–º–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏');

      if (!this.testUser) {
        this.log('farming', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.results.farming.status = 'failed';
        return false;
      }

      // –ù–∞—á–∞–ª–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã
      const farmingData = {
        uni_deposit_amount: '30.0',
        uni_farming_start_timestamp: new Date().toISOString(),
        uni_farming_rate: '0.002',
        uni_farming_balance: '30.0',
        uni_farming_last_update: new Date().toISOString()
      };

      const { error: farmingError } = await supabase
        .from('users')
        .update(farmingData)
        .eq('id', this.testUser.id);

      if (!farmingError) {
        this.log('farming', '–°–¢–ê–†–¢_–§–ê–†–ú–ò–ù–ì–ê', '–£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ users');
      } else {
        this.log('farming', '–°–¢–ê–†–¢_–§–ê–†–ú–ò–ù–ì–ê', `–û–®–ò–ë–ö–ê: ${farmingError.message}`);
      }

      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ farming_sessions (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
      const sessionData = {
        user_id: this.testUser.id
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è amount, rate, farming_type
      };

      const { data: newSession, error: sessionError } = await supabase
        .from('farming_sessions')
        .insert(sessionData)
        .select()
        .single();

      if (!sessionError) {
        this.log('farming', '–°–ï–°–°–ò–Ø', `–£–°–ü–ï–•: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ID ${newSession.id}`);
      } else {
        this.log('farming', '–°–ï–°–°–ò–Ø', `–õ–û–ì–ò–ö–ê –ë–ï–ó –ü–û–õ–Ø: ${sessionError.message}`);
        this.log('farming', '–ê–î–ê–ü–¢–ê–¶–ò–Ø', '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞');
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: farmingUser } = await supabase
        .from('users')
        .select('uni_deposit_amount, uni_farming_start_timestamp, uni_farming_rate, uni_farming_balance')
        .eq('id', this.testUser.id)
        .single();

      if (farmingUser) {
        this.log('farming', '–î–ê–ù–ù–´–ï', `–£–°–ü–ï–•: –î–µ–ø–æ–∑–∏—Ç ${farmingUser.uni_deposit_amount} UNI, —Å—Ç–∞–≤–∫–∞ ${farmingUser.uni_farming_rate}`);
      }

      this.results.farming.status = 'success';
      return true;

    } catch (error) {
      this.log('farming', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.results.farming.status = 'failed';
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ users.referred_by
   */
  async testReferralsModule() {
    try {
      console.log('\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');

      if (!this.testUser) {
        this.log('referrals', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.results.referrals.status = 'failed';
        return false;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–≤—ã–º
      const referredUserData = {
        telegram_id: 666666666,
        username: 'referred_test_user',
        ref_code: `REF_${Date.now()}`,
        referred_by: this.testUser.ref_code, // –ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        balance_uni: '10.0',
        balance_ton: '5.0'
      };

      const { data: referredUser, error: refUserError } = await supabase
        .from('users')
        .insert(referredUserData)
        .select()
        .single();

      if (!refUserError) {
        this.log('referrals', '–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï', `–£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω —á–µ—Ä–µ–∑ referred_by=${this.testUser.ref_code}`);
      } else {
        this.log('referrals', '–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï', `–û–®–ò–ë–ö–ê: ${refUserError.message}`);
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: referrals } = await supabase
        .from('users')
        .select('id, username, telegram_id, referred_by, created_at')
        .eq('referred_by', this.testUser.ref_code);

      if (referrals) {
        this.log('referrals', '–°–ü–ò–°–û–ö', `–£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ ${referrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
        referrals.forEach((ref, index) => {
          this.log('referrals', `–†–ï–§–ï–†–ê–õ_${index + 1}`, `${ref.username} (${ref.telegram_id})`);
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      if (referredUser) {
        const bonusTransaction = {
          user_id: this.testUser.id,
          type: 'REFERRAL_BONUS',
          amount_uni: 10.0,
          amount_ton: 0,
          description: `–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ${referredUser.username}`,
          status: 'confirmed'
        };

        const { error: bonusError } = await supabase
          .from('transactions')
          .insert(bonusTransaction);

        if (!bonusError) {
          this.log('referrals', '–ë–û–ù–£–°', '–£–°–ü–ï–•: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 10 UNI –Ω–∞—á–∏—Å–ª–µ–Ω');
        }
      }

      this.results.referrals.status = 'success';
      return true;

    } catch (error) {
      this.log('referrals', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.results.referrals.status = 'failed';
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —Å checkin_last_date
   */
  async testDailyBonusModule() {
    try {
      console.log('\nüéÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã');

      if (!this.testUser) {
        this.log('dailyBonus', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.results.dailyBonus.status = 'failed';
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      const { data: userData } = await supabase
        .from('users')
        .select('checkin_last_date, checkin_streak, balance_uni')
        .eq('id', this.testUser.id)
        .single();

      if (userData) {
        const today = new Date().toISOString().split('T')[0];
        const canClaim = !userData.checkin_last_date || userData.checkin_last_date !== today;

        this.log('dailyBonus', '–ü–†–û–í–ï–†–ö–ê', `–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å: ${canClaim ? '–î–ê' : '–ù–ï–¢'}`);
        this.log('dailyBonus', '–°–¢–†–ò–ö', `–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${userData.checkin_streak || 0} –¥–Ω–µ–π`);

        if (canClaim) {
          // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
          const bonusAmount = 5.0;
          const newStreak = (userData.checkin_streak || 0) + 1;
          const newBalance = parseFloat(userData.balance_uni || '0') + bonusAmount;

          const { error: bonusError } = await supabase
            .from('users')
            .update({
              checkin_last_date: today,
              checkin_streak: newStreak,
              balance_uni: newBalance.toString()
            })
            .eq('id', this.testUser.id);

          if (!bonusError) {
            this.log('dailyBonus', '–ü–û–õ–£–ß–ï–ù–ò–ï', `–£–°–ü–ï–•: –ë–æ–Ω—É—Å ${bonusAmount} UNI, —Å—Ç—Ä–∏–∫ ${newStreak}`);

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–æ–Ω—É—Å–∞
            await supabase
              .from('transactions')
              .insert({
                user_id: this.testUser.id,
                type: 'DAILY_BONUS',
                amount_uni: bonusAmount,
                amount_ton: 0,
                description: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Å—Ç—Ä–∏–∫: ${newStreak})`,
                status: 'confirmed'
              });

            this.log('dailyBonus', '–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø', '–£–°–ü–ï–•: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞');
          } else {
            this.log('dailyBonus', '–ü–û–õ–£–ß–ï–ù–ò–ï', `–û–®–ò–ë–ö–ê: ${bonusError.message}`);
          }
        }
      }

      this.results.dailyBonus.status = 'success';
      return true;

    } catch (error) {
      this.log('dailyBonus', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.results.dailyBonus.status = 'failed';
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async testTransactionsModule() {
    try {
      console.log('\nüí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');

      if (!this.testUser) {
        this.log('transactions', '–û–®–ò–ë–ö–ê', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.results.transactions.status = 'failed';
        return false;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactionTypes = [
        {
          type: 'FARMING_REWARD',
          amount_uni: 2.5,
          amount_ton: 0,
          description: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–∞—Ä–º–∏–Ω–≥'
        },
        {
          type: 'DEPOSIT',
          amount_uni: 50.0,
          amount_ton: 10.0,
          description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'
        },
        {
          type: 'WITHDRAWAL',
          amount_uni: -20.0,
          amount_ton: 0,
          description: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'
        }
      ];

      for (const txData of transactionTypes) {
        const transaction = {
          user_id: this.testUser.id,
          ...txData,
          status: 'confirmed'
        };

        const { data: newTx, error: txError } = await supabase
          .from('transactions')
          .insert(transaction)
          .select()
          .single();

        if (!txError) {
          this.log('transactions', txData.type, `–£–°–ü–ï–•: ID ${newTx.id}, ${txData.amount_uni} UNI`);
        } else {
          this.log('transactions', txData.type, `–û–®–ò–ë–ö–ê: ${txError.message}`);
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { data: userTransactions } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', this.testUser.id)
        .order('created_at', { ascending: false });

      if (userTransactions) {
        this.log('transactions', '–ò–°–¢–û–†–ò–Ø', `–£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ ${userTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        
        // –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const totalUni = userTransactions.reduce((sum, tx) => sum + (tx.amount_uni || 0), 0);
        const totalTon = userTransactions.reduce((sum, tx) => sum + (tx.amount_ton || 0), 0);
        
        this.log('transactions', '–ë–ê–õ–ê–ù–°', `–ò–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalUni} UNI, ${totalTon} TON`);
      }

      this.results.transactions.status = 'success';
      return true;

    } catch (error) {
      this.log('transactions', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', error.message);
      this.results.transactions.status = 'failed';
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanup() {
    try {
      console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•...');

      if (this.testUser) {
        // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await supabase
          .from('transactions')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await supabase
          .from('users')
          .delete()
          .eq('referred_by', this.testUser.ref_code);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–∏
        await supabase
          .from('farming_sessions')
          .delete()
          .eq('user_id', this.testUser.id);

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await supabase
          .from('users')
          .delete()
          .eq('id', this.testUser.id);

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    const allWorking = Object.values(this.results).every(module => module.status === 'success');
    
    console.log('\n' + '='.repeat(80));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–î–ê–ü–¢–ê–¶–ò–ò –ú–û–î–£–õ–ï–ô –ü–û–î SUPABASE –°–•–ï–ú–£:');
    console.log('='.repeat(80));

    Object.entries(this.results).forEach(([module, result]) => {
      const status = result.status === 'success' ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${module.toUpperCase()}: ${result.status.toUpperCase()}`);
      
      result.operations.forEach(op => {
        console.log(`   - ${op.operation}: ${op.result}`);
      });
      console.log('');
    });

    console.log('='.repeat(80));
    console.log(`üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${allWorking ? '‚úÖ –í–°–ï –ú–û–î–£–õ–ò –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–´' : '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`);
    console.log('='.repeat(80));

    return allWorking;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runAdaptationTest() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–• –ú–û–î–£–õ–ï–ô');
    console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏ Supabase');
    console.log('=' * 80);

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    await this.testUsersModule();
    await this.testFarmingModule();
    await this.testReferralsModule();
    await this.testDailyBonusModule();
    await this.testTransactionsModule();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    const allSuccess = this.generateReport();

    // –û—á–∏—Å—Ç–∫–∞
    await this.cleanup();

    return allSuccess;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const adaptationTest = new SupabaseAdaptationTest();
adaptationTest.runAdaptationTest().catch(console.error);