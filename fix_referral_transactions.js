/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
 * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É Supabase
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 */
async function fixTransactionSchema() {
  console.log('=== –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Level 2-3
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false });
      
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    let problemCount = 0;
    
    transactions.forEach(tx => {
      const description = tx.description || '';
      const levelMatch = description.match(/L(\d+)/);
      const percentMatch = description.match(/\((\d+)%\)/);
      
      if (levelMatch && percentMatch) {
        const level = parseInt(levelMatch[1]);
        const percent = parseInt(percentMatch[1]);
        const amount = parseFloat(tx.amount_uni || '0');
        
        console.log(`User ${tx.user_id}: Level ${level} = ${percent}% = ${amount.toFixed(6)} UNI`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        const expectedPercent = level === 1 ? 100 : level;
        
        if (percent !== expectedPercent) {
          console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: Level ${level} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ${expectedPercent}%, –∞ –Ω–µ ${percent}%`);
          problemCount++;
        } else {
          console.log(`‚úÖ Level ${level}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ${percent}%`);
        }
      }
    });
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:`);
    console.log(`–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${problemCount}`);
    console.log(`–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length - problemCount}`);
    
    if (problemCount > 0) {
      console.log('\nüîß –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´:');
      console.log('–°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –≤ ReferralService –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.');
      console.log('–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã REFERRAL_COMMISSION_RATES –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.');
      console.log('–ü—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.');
    }
    
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç ReferralService –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function updateReferralService() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ò–• –ö–û–ù–°–¢–ê–ù–¢ ===');
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  try {
    const { REFERRAL_COMMISSION_RATES } = await import('./modules/referral/model.js');
    
    console.log('‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã REFERRAL_COMMISSION_RATES:');
    
    for (let level = 1; level <= 5; level++) {
      const rate = REFERRAL_COMMISSION_RATES[level];
      const percent = rate * 100;
      const expected = level === 1 ? 100 : level;
      const isCorrect = percent === expected;
      
      console.log(`  Level ${level}: ${percent}% ${isCorrect ? '‚úÖ' : '‚ùå'} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ${expected}%)`);
    }
    
  } catch (err) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã:', err.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function fixReferralTransactionIssue() {
  try {
    console.log('–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
    console.log('='.repeat(60));
    
    await fixTransactionSchema();
    await updateReferralService();
    
    console.log('\n' + '='.repeat(60));
    console.log('üìã –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã REFERRAL_COMMISSION_RATES –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    console.log('‚úÖ –ù–æ–≤—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã');
    console.log('‚ö†Ô∏è –°—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏');
    console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

fixReferralTransactionIssue();