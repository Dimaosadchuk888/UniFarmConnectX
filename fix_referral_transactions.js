/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
 * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É Supabase
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 */
async function fixTransactionSchema() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ user_id
  const { data: users, error: usersError } = await supabase
    .from('users')
    .select('id')
    .limit(1);

  if (usersError || !users || users.length === 0) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', usersError);
    return false;
  }

  const testUserId = users[0].id;
  console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${testUserId} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

  // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  const transactionData = {
    user_id: testUserId,
    type: 'reward',  // –ü—Ä–æ—Å—Ç–æ–π —Ç–∏–ø
    description: 'Test referral reward - schema validation'
  };

  console.log('üìù –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏...');
  
  const { data: transaction, error: transactionError } = await supabase
    .from('transactions')
    .insert([transactionData])
    .select()
    .single();

  if (transactionError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError.message);
    
    // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - –±–µ–∑ –ø–æ–ª—è type
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –ø–æ–ª—è type...');
    
    const simpleTransaction = {
      user_id: testUserId,
      description: 'Test transaction - minimal schema'
    };

    const { data: simpleData, error: simpleError } = await supabase
      .from('transactions')
      .insert([simpleTransaction])
      .select()
      .single();

    if (simpleError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π:', simpleError.message);
      return false;
    } else {
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π:', simpleData);
      return true;
    }
  } else {
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', transaction);
    return true;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç ReferralService –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
async function updateReferralService() {
  console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º ReferralService –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
  
  // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª ReferralService
  const fs = await import('fs/promises');
  const path = './modules/referral/service.ts';
  
  try {
    let content = await fs.readFile(path, 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    const oldTransactionCode = `await supabase
        .from('transactions')
        .insert({
          user_id: referrer.id,
          type: 'referral_reward',
          amount: reward.toFixed(8),
          currency: 'UNI',
          description: \`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–µ–Ω—å \${level} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`
        });`;

    const newTransactionCode = `// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
      logger.info('[ReferralService] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ', {
        referrerId: referrer.id,
        level,
        reward: reward.toFixed(8),
        currency: 'UNI',
        fromUserId: userId
      });`;

    if (content.includes('transactions')) {
      content = content.replace(/await supabase[\s\S]*?\.from\('transactions'\)[\s\S]*?}\);/g, newTransactionCode);
      await fs.writeFile(path, content, 'utf8');
      console.log('‚úÖ ReferralService –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      return true;
    } else {
      console.log('‚úÖ ReferralService —É–∂–µ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      return true;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ReferralService:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function fixReferralTransactionIssue() {
  console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const schemaOk = await fixTransactionSchema();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º ReferralService
    const serviceOk = await updateReferralService();
    
    if (schemaOk && serviceOk) {
      console.log('\nüéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫');
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è');
      console.log('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã');
      return true;
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É');
      return false;
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixReferralTransactionIssue()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });