import jwt from 'jsonwebtoken';

async function testMiddlewareDirectly() {
  console.log('üîß –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MIDDLEWARE JWT –û–ë–†–ê–ë–û–¢–ö–ò');
  
  const jwtSecret = process.env.JWT_SECRET || 'unifarm_jwt_secret_key_2025_production';
  
  // –°–æ–∑–¥–∞—ë–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 61
  const testPayload = {
    userId: 61,
    telegram_id: 123456789,
    username: 'test_new_auth_user',
    ref_code: 'REF_test'
  };
  
  const testToken = jwt.sign(testPayload, jwtSecret, { expiresIn: '7d' });
  console.log('JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', testToken.substring(0, 50) + '...');
  
  // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  try {
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ /users/profile —Å Authorization header...');
    const response = await fetch('http://localhost:3000/api/v2/users/profile', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${testToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.log('‚ùå HTTP Error:', response.status, response.statusText);
      const errorText = await response.text();
      console.log('Response body:', errorText);
      return;
    }
    
    const result = await response.json();
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç API /users/profile:');
    console.log('- Success:', result.success);
    console.log('- User ID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', result.data?.user?.id);
    console.log('- Telegram ID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', result.data?.user?.telegram_id);
    console.log('- Username:', result.data?.user?.username);
    
    if (result.data?.user?.id === 61) {
      console.log('\n‚úÖ MIDDLEWARE –ò–°–ü–†–ê–í–õ–ï–ù! –¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id –∏–∑ JWT');
    } else if (result.data?.user?.id === 48) {
      console.log('\n‚ùå Middleware –≤—Å—ë –µ—â—ë –∏—Å–ø–æ–ª—å–∑—É–µ—Ç user_id=48');
      console.log('üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. –ò–∑–º–µ–Ω–µ–Ω–∏—è middleware –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É (–Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)');
      console.log('2. JWT —Ç–æ–∫–µ–Ω –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è middleware (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏)');
      console.log('3. –î—Ä—É–≥–æ–π –∫–æ–¥ overrides middleware —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    } else {
      console.log(`\nüîç –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π user_id: ${result.data?.user?.id}`);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∏–º –ª—é–±–æ–π –¥—Ä—É–≥–æ–π endpoint
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–æ–π endpoint /wallet/balance...');
    const balanceResponse = await fetch('http://localhost:3000/api/v2/wallet/balance', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${testToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (balanceResponse.ok) {
      const balanceResult = await balanceResponse.json();
      console.log('Balance API user_id:', balanceResult.user_id);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testMiddlewareDirectly().catch(console.error);