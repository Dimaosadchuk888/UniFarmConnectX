import { supabase } from './core/supabase';
import * as fs from 'fs';

async function investigateTableUsage() {
  console.log('=== –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶ TON BOOST ===\n');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ TonFarmingRepository
    console.log('üì¶ 1. –ê–ù–ê–õ–ò–ó TonFarmingRepository:\n');
    
    const repoPath = './modules/boost/TonFarmingRepository.ts';
    const repoContent = fs.readFileSync(repoPath, 'utf-8');
    
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    const fromMatches = repoContent.match(/from\(['"](\w+)['"]\)/g);
    if (fromMatches) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º:');
      const tables = new Set<string>();
      fromMatches.forEach(match => {
        const tableName = match.match(/from\(['"](\w+)['"]\)/)?.[1];
        if (tableName) tables.add(tableName);
      });
      tables.forEach(table => console.log(`  - ${table}`));
    }

    // –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∞ checkTableExists
    const checkTableMethod = repoContent.match(/async checkTableExists[^}]+}/s)?.[0];
    if (checkTableMethod) {
      console.log('\n–ú–µ—Ç–æ–¥ checkTableExists:');
      console.log('  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ton_farming_data');
      console.log('  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –Ω–∞ —Ç–∞–±–ª–∏—Ü—É users');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('\nüìÖ 2. –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:\n');
    
    const schedulerPath = './modules/scheduler/tonBoostIncomeScheduler.ts';
    const schedulerContent = fs.readFileSync(schedulerPath, 'utf-8');
    
    // –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∞ getActiveBoostUsers
    const getActiveMethod = schedulerContent.match(/async getActiveBoostUsers[^}]+}/s)?.[0];
    if (getActiveMethod) {
      console.log('–ú–µ—Ç–æ–¥ getActiveBoostUsers:');
      if (getActiveMethod.includes('tonFarmingRepo.getActiveBoostUsers')) {
        console.log('  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç tonFarmingRepo.getActiveBoostUsers()');
      }
    }

    // –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∞ processTonBoostIncome
    const processMethod = schedulerContent.includes('processTonBoostIncome');
    console.log(`\n–ú–µ—Ç–æ–¥ processTonBoostIncome: ${processMethod ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω'}`);

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log('\nüîç 3. –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ê–•:\n');
    
    // –î–∞–Ω–Ω—ã–µ –∏–∑ users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active, ton_boost_package_id, ton_farming_balance')
      .eq('id', 74)
      .single();

    if (!userError && userData) {
      console.log('–¢–∞–±–ª–∏—Ü–∞ users (id=74):');
      console.log(`  balance_ton: ${userData.balance_ton}`);
      console.log(`  ton_boost_active: ${userData.ton_boost_active}`);
      console.log(`  ton_boost_package_id: ${userData.ton_boost_package_id}`);
      console.log(`  ton_farming_balance: ${userData.ton_farming_balance} ${userData.ton_farming_balance ? '‚úÖ' : '‚ùå'}`);
    }

    // –î–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', 74)
      .single();

    if (!farmingError && farmingData) {
      console.log('\n–¢–∞–±–ª–∏—Ü–∞ ton_farming_data (user_id=74):');
      console.log(`  farming_balance: ${farmingData.farming_balance} ${parseFloat(farmingData.farming_balance) > 0 ? '‚úÖ' : '‚ùå'}`);
      console.log(`  boost_active: ${farmingData.boost_active}`);
      console.log(`  boost_package_id: ${farmingData.boost_package_id}`);
      console.log(`  farming_rate: ${farmingData.farming_rate}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    console.log('\nüéØ 4. –ö–ê–ö–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º getActiveBoostUsers –≤ TonFarmingRepository
    const getActiveUsersMethod = repoContent.match(/async getActiveBoostUsers[^}]+}/s)?.[0];
    if (getActiveUsersMethod) {
      if (getActiveUsersMethod.includes('ton_farming_data')) {
        console.log('getActiveBoostUsers –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: ton_farming_data ‚úÖ');
      } else if (getActiveUsersMethod.includes('users')) {
        console.log('getActiveBoostUsers –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: users (fallback) ‚ö†Ô∏è');
      }
    }

    // 5. –í—ã–≤–æ–¥—ã
    console.log('\nüìä 5. –í–´–í–û–î–´:\n');
    
    console.log('–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. TonFarmingRepository –∏–º–µ–µ—Ç fallback –ª–æ–≥–∏–∫—É');
    console.log('2. –í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ users –≤–º–µ—Å—Ç–æ ton_farming_data');
    console.log('3. –í users —Ç–∞–±–ª–∏—Ü–µ ton_farming_balance = NULL');
    console.log('4. –í ton_farming_data farming_balance = 0');
    console.log('5. –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∞–±–ª–∏—Ü–∞–º–∏');
    
    console.log('\n–ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ —Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
  }
}

investigateTableUsage();