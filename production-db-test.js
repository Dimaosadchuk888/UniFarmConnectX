/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ep-lucky-boat-a463bggt
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const { Client } = require('pg');

// –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production –±–∞–∑–µ
const PRODUCTION_DB_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

async function testProductionDatabase() {
  const client = new Client({ connectionString: PRODUCTION_DB_URL });
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production –±–∞–∑–µ ep-lucky-boat-a463bggt...');
    await client.connect();
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const countResult = await client.query('SELECT COUNT(*) FROM users;');
    console.log('üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production –±–∞–∑–µ:', countResult.rows[0].count);
    
    // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testTelegramId = 777000999;
    const testUsername = 'prod_test_check';
    const testRefCode = generateRefCode(testTelegramId);
    
    console.log('üß™ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      telegram_id: testTelegramId,
      username: testUsername,
      ref_code: testRefCode
    });
    
    const insertResult = await client.query(
      `INSERT INTO users (telegram_id, username, ref_code, created_at) 
       VALUES ($1, $2, $3, NOW()) 
       RETURNING id, telegram_id, username, ref_code, created_at`,
      [testTelegramId, testUsername, testRefCode]
    );
    
    const newUser = insertResult.rows[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ production –±–∞–∑–µ:', {
      id: newUser.id,
      telegram_id: newUser.telegram_id,
      username: newUser.username,
      ref_code: newUser.ref_code,
      created_at: newUser.created_at
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ID - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 18 –¥–ª—è production –±–∞–∑—ã
    if (newUser.id < 18) {
      console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è < 18, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–µ production –±–∞–∑–∞!');
    } else {
      console.log('‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è >= 18, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å production –±–∞–∑–æ–π');
    }
    
    // 4. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await client.query('DELETE FROM users WHERE telegram_id = $1', [testTelegramId]);
    console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    
    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const finalCountResult = await client.query('SELECT COUNT(*) FROM users;');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', finalCountResult.rows[0].count);
    
    console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - —Ä–∞–±–æ—Ç–∞–µ–º —Å production –±–∞–∑–æ–π ep-lucky-boat-a463bggt');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ production –±–∞–∑–µ:', error.message);
  } finally {
    await client.end();
  }
}

function generateRefCode(telegramId) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  const seed = telegramId.toString();
  
  for (let i = 0; i < 8; i++) {
    const index = (seed.charCodeAt(i % seed.length) + i) % chars.length;
    result += chars[index];
  }
  
  return result;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProductionDatabase().catch(console.error);