/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü Supabase
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

class SupabaseSchemaAnalyzer {
  constructor() {
    this.tablesSchema = {};
    this.fieldMappings = {};
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
   */
  async analyzeAllTables() {
    const tables = ['users', 'referrals', 'farming_sessions', 'user_sessions', 'transactions'];
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü Supabase...\n');

    for (const table of tables) {
      await this.analyzeTable(table);
    }

    this.generateFieldMappings();
    this.printAnalysisResults();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
   */
  async analyzeTable(tableName) {
    try {
      console.log(`üìã –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const { data, error } = await supabase
        .from(tableName)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ ${tableName}: ${error.message}`);
        this.tablesSchema[tableName] = { error: error.message, fields: [] };
        return;
      }

      let fields = [];
      
      if (data && data.length > 0) {
        fields = Object.keys(data[0]);
        console.log(`‚úÖ –ü–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã: ${fields.length}`);
        console.log(`   ${fields.join(', ')}\n`);
      } else {
        // –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ –ø—É—Å—Ç–æ–π insert
        console.log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...`);
        
        // –î–ª—è –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø–æ–ª—è
        if (tableName === 'referrals') {
          fields = ['id', 'created_at', 'updated_at']; // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
        } else if (tableName === 'farming_sessions') {
          fields = ['id', 'user_id', 'created_at', 'updated_at'];
        } else if (tableName === 'user_sessions') {
          fields = ['id', 'user_id', 'session_token', 'expires_at', 'is_active', 'created_at'];
        }
        console.log(`   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –ø–æ–ª—è: ${fields.join(', ')}\n`);
      }

      this.tablesSchema[tableName] = {
        fields,
        available: true,
        isEmpty: !data || data.length === 0
      };

    } catch (error) {
      console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${tableName}: ${error.message}\n`);
      this.tablesSchema[tableName] = { error: error.message, fields: [] };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
   */
  generateFieldMappings() {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π...\n');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º users —Ç–∞–±–ª–∏—Ü—É
    const usersFields = this.tablesSchema.users?.fields || [];
    
    // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π users
    this.fieldMappings.users = {};
    
    if (!usersFields.includes('last_active')) {
      if (usersFields.includes('updated_at')) {
        this.fieldMappings.users.last_active = 'updated_at';
      } else if (usersFields.includes('checkin_last_date')) {
        this.fieldMappings.users.last_active = 'checkin_last_date';
      } else {
        this.fieldMappings.users.last_active = 'created_at'; // Fallback
      }
    }

    if (!usersFields.includes('updated_at')) {
      this.fieldMappings.users.updated_at = 'created_at'; // Fallback –∫ created_at
    }

    if (!usersFields.includes('is_active')) {
      this.fieldMappings.users.is_active = null; // –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã–º–∏
    }

    if (!usersFields.includes('daily_bonus_last_claim')) {
      if (usersFields.includes('checkin_last_date')) {
        this.fieldMappings.users.daily_bonus_last_claim = 'checkin_last_date';
      } else {
        this.fieldMappings.users.daily_bonus_last_claim = null; // –õ–æ–≥–∏–∫–∞ –±–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—è
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º referrals —Ç–∞–±–ª–∏—Ü—É
    const referralsFields = this.tablesSchema.referrals?.fields || [];
    
    this.fieldMappings.referrals = {};
    
    if (!referralsFields.includes('referrer_id')) {
      if (referralsFields.includes('parent_id')) {
        this.fieldMappings.referrals.referrer_id = 'parent_id';
      } else if (referralsFields.includes('referred_by')) {
        this.fieldMappings.referrals.referrer_id = 'referred_by';
      } else {
        this.fieldMappings.referrals.referrer_id = null; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞
      }
    }

    if (!referralsFields.includes('level')) {
      this.fieldMappings.referrals.level = null; // –ë—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å
    }

    if (!referralsFields.includes('commission_rate')) {
      this.fieldMappings.referrals.commission_rate = null; // –•–∞—Ä–¥–∫–æ–¥ –≤ –∫–æ–¥–µ
    }

    if (!referralsFields.includes('total_earned')) {
      this.fieldMappings.referrals.total_earned = null; // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º farming_sessions —Ç–∞–±–ª–∏—Ü—É
    const farmingFields = this.tablesSchema.farming_sessions?.fields || [];
    
    this.fieldMappings.farming_sessions = {};
    
    if (!farmingFields.includes('amount')) {
      if (farmingFields.includes('deposit_amount')) {
        this.fieldMappings.farming_sessions.amount = 'deposit_amount';
      } else if (farmingFields.includes('value')) {
        this.fieldMappings.farming_sessions.amount = 'value';
      } else {
        this.fieldMappings.farming_sessions.amount = null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ users
      }
    }

    if (!farmingFields.includes('rate')) {
      this.fieldMappings.farming_sessions.rate = null; // –•–∞—Ä–¥–∫–æ–¥ –∏–ª–∏ –∏–∑ users
    }

    if (!farmingFields.includes('farming_type')) {
      this.fieldMappings.farming_sessions.farming_type = null; // –•–∞—Ä–¥–∫–æ–¥ 'UNI_FARMING'
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  printAnalysisResults() {
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–•–ï–ú–´:\n');

    Object.entries(this.tablesSchema).forEach(([table, schema]) => {
      console.log(`üóÉÔ∏è –¢–∞–±–ª–∏—Ü–∞: ${table.toUpperCase()}`);
      
      if (schema.error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${schema.error}`);
      } else if (schema.available) {
        console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ (${schema.fields.length} –ø–æ–ª–µ–π)`);
        console.log(`   üìã –ü–æ–ª—è: ${schema.fields.join(', ')}`);
        
        if (schema.isEmpty) {
          console.log(`   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞`);
        }
      }
      console.log('');
    });

    console.log('üîÑ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ó–ê–ú–ï–ù–´ –ü–û–õ–ï–ô:\n');

    Object.entries(this.fieldMappings).forEach(([table, mappings]) => {
      console.log(`üìã ${table.toUpperCase()}:`);
      
      Object.entries(mappings).forEach(([oldField, newField]) => {
        if (newField) {
          console.log(`   ${oldField} ‚Üí ${newField}`);
        } else {
          console.log(`   ${oldField} ‚Üí –õ–û–ì–ò–ö–ê –ë–ï–ó –ü–û–õ–Ø`);
        }
      });
      console.log('');
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
   */
  async generateAdaptationReport() {
    const report = `# SUPABASE SCHEMA ADAPTATION REPORT
**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${new Date().toISOString()}

## üìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶:

${Object.entries(this.tablesSchema).map(([table, schema]) => {
  if (schema.error) {
    return `### ${table.toUpperCase()}
‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞:** ${schema.error}`;
  }
  
  return `### ${table.toUpperCase()}
‚úÖ **–°—Ç–∞—Ç—É—Å:** –î–æ—Å—Ç—É–ø–Ω–∞
üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π:** ${schema.fields.length}
üìã **–ü–æ–ª—è:** ${schema.fields.join(', ')}
${schema.isEmpty ? '‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞' : ''}`;
}).join('\n\n')}

## üîÑ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ó–ê–ú–ï–ù–´ –ü–û–õ–ï–ô:

${Object.entries(this.fieldMappings).map(([table, mappings]) => {
  const replacements = Object.entries(mappings).map(([oldField, newField]) => {
    if (newField) {
      return `- \`${oldField}\` ‚Üí \`${newField}\``;
    } else {
      return `- \`${oldField}\` ‚Üí **–õ–û–ì–ò–ö–ê –ë–ï–ó –ü–û–õ–Ø** (—Ç—Ä–µ–±—É–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞)`;
    }
  }).join('\n');
  
  return `### ${table.toUpperCase()}
${replacements}`;
}).join('\n\n')}

## üõ†Ô∏è –ü–õ–ê–ù –ê–î–ê–ü–¢–ê–¶–ò–ò –ú–û–î–£–õ–ï–ô:

### 1. modules/user/model.ts
- –ó–∞–º–µ–Ω–∏—Ç—å \`last_active\` –Ω–∞ \`${this.fieldMappings.users?.last_active || 'created_at'}\`
- –£–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ \`updated_at\` –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ \`created_at\`
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É \`is_active\` (—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ã–º–∏)

### 2. modules/referral/service.ts
${this.fieldMappings.referrals?.referrer_id ? 
`- –ó–∞–º–µ–Ω–∏—Ç—å \`referrer_id\` –Ω–∞ \`${this.fieldMappings.referrals.referrer_id}\`` :
'- **–ö–†–ò–¢–ò–ß–ù–û:** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –¥–ª—è referrer_id - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}
- –í—ã—á–∏—Å–ª—è—Ç—å \`level\` –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
- –•–∞—Ä–¥–∫–æ–¥–∏—Ç—å \`commission_rate\` –≤ –∫–æ–¥–µ
- –í—ã—á–∏—Å–ª—è—Ç—å \`total_earned\` –∏–∑ —Ç–∞–±–ª–∏—Ü—ã transactions

### 3. modules/farming/service.ts
${this.fieldMappings.farming_sessions?.amount ?
`- –ó–∞–º–µ–Ω–∏—Ç—å \`amount\` –Ω–∞ \`${this.fieldMappings.farming_sessions.amount}\`` :
'- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \`uni_deposit_amount\` –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –≤–º–µ—Å—Ç–æ amount –≤ farming_sessions'}
- –•–∞—Ä–¥–∫–æ–¥–∏—Ç—å \`farming_type\` –∫–∞–∫ 'UNI_FARMING'
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \`uni_farming_rate\` –∏–∑ users –≤–º–µ—Å—Ç–æ rate –≤ sessions

### 4. modules/dailyBonus/service.ts
${this.fieldMappings.users?.daily_bonus_last_claim ?
`- –ó–∞–º–µ–Ω–∏—Ç—å \`daily_bonus_last_claim\` –Ω–∞ \`${this.fieldMappings.users.daily_bonus_last_claim}\`` :
'- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \`checkin_last_date\` –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤'}

## üö´ –ù–ï–í–û–ó–ú–û–ñ–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–¢–¨:

${this.fieldMappings.referrals?.referrer_id === null ? 
'- **–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞** - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ referrer_id' : ''}
${this.fieldMappings.farming_sessions?.amount === null ? 
'- **–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–∏** - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ amount, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ users' : ''}

## ‚úÖ –ì–û–¢–û–í–´–ï –ö –ê–î–ê–ü–¢–ê–¶–ò–ò –ú–û–î–£–õ–ò:

- **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram** - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º–∞
- **–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏** - —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∫–æ—à–µ–ª–µ–∫** - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
- **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏** - —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

---
**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É, –∏–∑–±–µ–≥–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`;

    try {
      const fs = await import('fs/promises');
      await fs.writeFile('SUPABASE_SCHEMA_ADAPTATION_REPORT.md', report, 'utf8');
      console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: SUPABASE_SCHEMA_ADAPTATION_REPORT.md\n');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error.message);
    }

    return this.fieldMappings;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
   */
  async run() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê –°–•–ï–ú–´ SUPABASE');
    console.log('=' * 50);
    
    await this.analyzeAllTables();
    const mappings = await this.generateAdaptationReport();
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –≥–æ—Ç–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞.');
    console.log('=' * 50);
    
    return mappings;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new SupabaseSchemaAnalyzer();
analyzer.run().catch(console.error);