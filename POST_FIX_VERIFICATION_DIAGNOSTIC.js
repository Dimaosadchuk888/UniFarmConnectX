/**
 * üîç –ü–û–°–¢-–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON BOOST
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ
 * –¢–û–õ–¨–ö–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå SUPABASE credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ environment');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function verifyDuplicationFix() {
  console.log('\nüîç –ü–û–°–¢-–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON BOOST');
  console.log('üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
  console.log('üéØ –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('=' + '='.repeat(70));

  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –ö–û–î–ê - –ü–û–î–°–ß–ï–¢ –í–´–ó–û–í–û–í
    console.log('\nüìã 1. –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê:');
    console.log('-'.repeat(50));
    

    const serviceCode = fs.readFileSync('./modules/boost/service.ts', 'utf8');
    
    // –ü–æ–¥—Å—á–µ—Ç –≤—ã–∑–æ–≤–æ–≤ awardUniBonus
    const awardUniBonusMatches = serviceCode.match(/await this\.awardUniBonus\(/g) || [];
    const awardUniBonusDefMatches = serviceCode.match(/private async awardUniBonus\(/g) || [];
    
    console.log(`üìä –í–´–ó–û–í–´ awardUniBonus:`);
    console.log(`  ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥–∞: ${awardUniBonusDefMatches.length}`);
    console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: ${awardUniBonusMatches.length}`);
    console.log(`  ‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ –≤—ã–∑–æ–≤–æ–≤: 2 (internal wallet + external TON)`);
    
    if (awardUniBonusMatches.length === 2) {
      console.log(`  ‚úÖ –ö–û–†–†–ï–ö–¢–ù–û: –ù–∞–π–¥–µ–Ω–æ ${awardUniBonusMatches.length} –≤—ã–∑–æ–≤–∞ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ)`);
    } else {
      console.log(`  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ ${awardUniBonusMatches.length} –≤—ã–∑–æ–≤–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)`);
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –≤—ã–∑–æ–≤–æ–≤ tonFarmingRepo.activateBoost
    const activateBoostMatches = serviceCode.match(/await tonFarmingRepo\.activateBoost\(/g) || [];
    
    console.log(`\nüìä –í–´–ó–û–í–´ tonFarmingRepo.activateBoost:`);
    console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: ${activateBoostMatches.length}`);
    console.log(`  ‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ –≤—ã–∑–æ–≤–æ–≤: 2 (internal wallet + private method)`);
    
    if (activateBoostMatches.length === 2) {
      console.log(`  ‚úÖ –ö–û–†–†–ï–ö–¢–ù–û: –ù–∞–π–¥–µ–Ω–æ ${activateBoostMatches.length} –≤—ã–∑–æ–≤–∞ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ)`);
    } else {
      console.log(`  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ ${activateBoostMatches.length} –≤—ã–∑–æ–≤–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
    const fixComments = serviceCode.match(/–ò–°–ü–†–ê–í–õ–ï–ù–û.*—É–¥–∞–ª–µ–Ω.*–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π/gi) || [];
    console.log(`\nüìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•: ${fixComments.length} –Ω–∞–π–¥–µ–Ω–æ`);
    fixComments.forEach((comment, i) => {
      console.log(`  ${i+1}. ${comment.slice(0, 80)}...`);
    });

    // 2. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\nüìä 2. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• TON BOOST –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(50));
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ DAILY_BONUS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: recentDailyBonus, error: bonusError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'DAILY_BONUS')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('created_at', { ascending: false })
      .limit(10);

    if (bonusError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DAILY_BONUS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', bonusError.message);
    } else {
      console.log(`üîç DAILY_BONUS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentDailyBonus.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const userGroups = {};
      recentDailyBonus.forEach(tx => {
        const key = `${tx.user_id}_${tx.amount}_${tx.currency}`;
        if (!userGroups[key]) {
          userGroups[key] = [];
        }
        userGroups[key].push(tx);
      });
      
      console.log('\nüîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í DAILY_BONUS:');
      let duplicatesFound = 0;
      Object.keys(userGroups).forEach(key => {
        const group = userGroups[key];
        if (group.length > 1) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
          const times = group.map(tx => new Date(tx.created_at));
          const maxTimeDiff = Math.max(...times) - Math.min(...times);
          const timeDiffSeconds = maxTimeDiff / 1000;
          
          if (timeDiffSeconds < 300) { // –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            duplicatesFound++;
            console.log(`  ‚ùå –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –î–£–ë–õ–ò–ö–ê–¢ - User ${group[0].user_id}: ${group.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ ${timeDiffSeconds}s`);
            group.forEach((tx, i) => {
              console.log(`    [${i+1}] ID:${tx.id} | ${tx.created_at.slice(11, 19)} | ${tx.amount} ${tx.currency}`);
            });
          } else {
            console.log(`  ‚úÖ –ù–û–†–ú–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–†–í–ê–õ - User ${group[0].user_id}: ${group.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ ${Math.round(timeDiffSeconds/60)} –º–∏–Ω—É—Ç`);
          }
        }
      });
      
      if (duplicatesFound === 0) {
        console.log('  ‚úÖ –î–£–ë–õ–ò–ö–ê–¢–û–í –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
      } else {
        console.log(`  ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û ${duplicatesFound} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
      }
    }

    // 3. –ü–†–û–í–ï–†–ö–ê TON FARMING DATA –ù–ê –ê–ù–û–ú–ê–õ–¨–ù–´–ï –î–ï–ü–û–ó–ò–¢–´
    console.log('\nüìä 3. –ê–ù–ê–õ–ò–ó TON_FARMING_DATA –ù–ê –ê–ù–û–ú–ê–õ–¨–ù–´–ï –î–ï–ü–û–ó–ò–¢–´:');
    console.log('-'.repeat(50));
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_package_id, updated_at')
      .not('boost_package_id', 'is', null)
      .gte('updated_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('updated_at', { ascending: false });

    if (farmingError) {
      console.log('‚ö†Ô∏è ton_farming_data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', farmingError.message);
    } else {
      console.log(`üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö TON Farming –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${farmingData.length}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const { data: packages, error: packagesError } = await supabase
        .from('boost_packages')
        .select('id, name, min_amount');
        
      const packageMap = {};
      if (!packagesError && packages) {
        packages.forEach(pkg => {
          packageMap[pkg.id] = pkg;
        });
      }
      
      let anomalousDeposits = 0;
      farmingData.forEach(record => {
        const balance = parseFloat(record.farming_balance) || 0;
        const packageId = record.boost_package_id;
        const expectedAmount = parseFloat(packageMap[packageId]?.min_amount || 0);
        
        console.log(`  User ${record.user_id}: ${balance} TON (–ø–∞–∫–µ—Ç ${packageId}, –æ–∂–∏–¥–∞–µ–º–æ: ${expectedAmount} TON)`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å—à–µ —á–µ–º –≤ 1.5 —Ä–∞–∑–∞)
        if (balance > expectedAmount * 1.5) {
          anomalousDeposits++;
          console.log(`    ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –¥–µ–ø–æ–∑–∏—Ç ${balance} TON –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π ${expectedAmount} TON –≤ ${(balance/expectedAmount).toFixed(1)} —Ä–∞–∑`);
        }
      });
      
      if (anomalousDeposits === 0) {
        console.log('  ‚úÖ –ê–ù–û–ú–ê–õ–¨–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û');
      } else {
        console.log(`  ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û ${anomalousDeposits} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
      }
    }

    // 4. –ü–†–û–í–ï–†–ö–ê BOOST_PURCHASES
    console.log('\nüìä 4. –ê–ù–ê–õ–ò–ó BOOST_PURCHASES –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    console.log('-'.repeat(50));
    
    const { data: recentPurchases, error: purchaseError } = await supabase
      .from('boost_purchases')
      .select('*')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (purchaseError) {
      console.log('‚ö†Ô∏è boost_purchases –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', purchaseError.message);
    } else {
      console.log(`üîç –ü–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentPurchases.length}`);
      
      recentPurchases.forEach((purchase, i) => {
        console.log(`[${i+1}] User ${purchase.user_id} | Package ${purchase.boost_package_id} | ${purchase.payment_method.toUpperCase()} | ${purchase.status}`);
        console.log(`     Amount: ${purchase.amount} ${purchase.currency} | ${purchase.created_at.slice(11, 19)}`);
      });
      
      if (recentPurchases.length === 0) {
        console.log('  ‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –±—ã–ª–æ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
      }
    }

    // 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\nüìã 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('-'.repeat(50));
    
    const codeFixed = (awardUniBonusMatches.length === 2 && activateBoostMatches.length === 2);
    const noRecentDuplicates = (duplicatesFound === 0);
    const noAnomalousDeposits = (anomalousDeposits === 0);
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
    console.log(`  ‚Ä¢ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${codeFixed ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`  ‚Ä¢ –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ DAILY_BONUS: ${noRecentDuplicates ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`  ‚Ä¢ –ù–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${noAnomalousDeposits ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    if (codeFixed && noRecentDuplicates && noAnomalousDeposits) {
      console.log('\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–û');
      console.log('üí° –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ TON Boost –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ');
      console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    } else {
      console.log('\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê');
      if (!codeFixed) console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ');
      if (!noRecentDuplicates) console.log('   ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      if (!noAnomalousDeposits) console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –≤ farming data');
    }

    console.log('\n' + '='.repeat(70));
    console.log('‚úÖ –ü–û–°–¢-–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('üìÑ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
verifyDuplicationFix();