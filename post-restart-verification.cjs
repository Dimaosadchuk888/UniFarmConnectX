const { createClient } = require('@supabase/supabase-js');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyPostRestart() {
  console.log('üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–°–õ–ï –ü–û–í–¢–û–†–ù–û–ì–û –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê');
  console.log('=' + '='.repeat(50));
  console.log(`‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleTimeString()}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('created_at, amount, user_id, type, currency')
      .order('created_at', { ascending: false })
      .limit(15);

    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
      return;
    }

    console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 15 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    transactions.forEach((t, i) => {
      const time = new Date(t.created_at);
      const amount = parseFloat(t.amount);
      console.log(`${i+1}. ${time.toLocaleTimeString()} | User ${t.user_id} | ${amount.toFixed(6)} ${t.currency || 'UNI'} | ${t.type}`);
    });

    // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    const intervals = [];
    for (let i = 1; i < Math.min(transactions.length, 10); i++) {
      const prev = new Date(transactions[i-1].created_at);
      const curr = new Date(transactions[i].created_at);
      const diffMs = prev.getTime() - curr.getTime();
      const diffMin = diffMs / (1000 * 60);
      intervals.push(diffMin);
    }

    console.log('\n‚è±Ô∏è –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–í–ê–õ–û–í:');
    intervals.forEach((interval, i) => {
      const status = interval > 4 ? '‚úÖ' : (interval > 2 ? '‚ö†Ô∏è' : '‚ùå');
      console.log(`${status} –ò–Ω—Ç–µ—Ä–≤–∞–ª ${i+1}: ${interval.toFixed(2)} –º–∏–Ω—É—Ç`);
    });

    const avgInterval = intervals.length > 0 ? intervals.reduce((a, b) => a + b, 0) / intervals.length : 0;
    const maxInterval = intervals.length > 0 ? Math.max(...intervals) : 0;
    const minInterval = intervals.length > 0 ? Math.min(...intervals) : 0;

    console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¢–ï–†–í–ê–õ–û–í:`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π: ${avgInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxInterval.toFixed(2)} –º–∏–Ω—É—Ç`);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    if (avgInterval > 4.5) {
      console.log('\nüéâ –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
      console.log('   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏');
      console.log('   –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é User 228');
    } else if (maxInterval > 4) {
      console.log('\nüîÑ –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø –í –ü–†–û–¶–ï–°–°–ï');
      console.log('   –ü–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã >4 –º–∏–Ω—É—Ç');
      console.log('   –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –º–∏–Ω—É—Ç—ã');
    } else {
      console.log('\n‚è≥ –ü–ï–†–ï–•–û–î–ù–´–ô –ü–ï–†–ò–û–î');
      console.log('   –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ');
      console.log('   –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—è–≤—è—Ç—Å—è –≤—Å–∫–æ—Ä–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤ User 184 –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–æ—Å—Ç–∞
    const { data: user184 } = await supabase
      .from('users')
      .select('balance_uni, balance_ton')
      .eq('id', 184)
      .single();

    if (user184) {
      console.log(`\nüë§ USER 184 –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:`);
      console.log(`   UNI: ${parseFloat(user184.balance_uni).toFixed(6)}`);
      console.log(`   TON: ${parseFloat(user184.balance_ton).toFixed(6)}`);
      
      const webLogBalance = 177517.667405; // –ò–∑ webview –ª–æ–≥–æ–≤
      const dbBalance = parseFloat(user184.balance_uni);
      const balanceGrowth = dbBalance - webLogBalance;
      
      if (Math.abs(balanceGrowth) < 1) {
        console.log('   ‚úÖ –ë–∞–ª–∞–Ω—Å —Å—Ç–∞–±–∏–ª–µ–Ω - –Ω–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞');
      } else {
        console.log(`   ‚ö†Ô∏è –†–æ—Å—Ç –±–∞–ª–∞–Ω—Å–∞: +${balanceGrowth.toFixed(6)} UNI`);
      }
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
  }
}

verifyPostRestart();