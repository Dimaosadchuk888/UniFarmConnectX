/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UniFarm –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
 */

import { db } from './core/db.js';
import { config } from './core/config/index.js';
import { users, missions, transactions } from './shared/schema.js';
import { eq } from 'drizzle-orm';

console.log('üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£\n');

async function checkDatabaseConnection() {
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const result = await db.select().from(users).limit(1);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('‚úÖ –°—Ö–µ–º–∞: –¢–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    return true;
  } catch (error) {
    console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
    return false;
  }
}

async function checkEnvironmentVariables() {
  console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const required = [
    'DATABASE_URL',
    'TELEGRAM_BOT_TOKEN'
  ];
  
  const missing = [];
  const present = [];
  
  required.forEach(key => {
    if (process.env[key]) {
      present.push(key);
    } else {
      missing.push(key);
    }
  });
  
  present.forEach(key => {
    console.log(`‚úÖ ${key}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  });
  
  missing.forEach(key => {
    console.log(`‚ùå ${key}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  });
  
  return missing.length === 0;
}

async function checkDataIntegrity() {
  console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π
    const activeMissions = await db
      .select()
      .from(missions)
      .where(eq(missions.is_active, true));
    
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏: ${activeMissions.length} –Ω–∞–π–¥–µ–Ω–æ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await db.select().from(users).limit(10);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount.length} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

async function checkAPIEndpoints() {
  console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
  
  const endpoints = [
    'http://localhost:3000/health',
    'http://localhost:3000/api/v2/users',
    'http://localhost:3000/api/v2/missions',
    'http://localhost:3000/api/v2/farming'
  ];
  
  let successCount = 0;
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(endpoint);
      if (response.status < 500) {
        console.log(`‚úÖ ${endpoint}: –û—Ç–≤–µ—á–∞–µ—Ç (${response.status})`);
        successCount++;
      } else {
        console.log(`‚ö†Ô∏è  ${endpoint}: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`);
      }
    } catch (error) {
      console.log(`‚ùå ${endpoint}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }
  
  return successCount === endpoints.length;
}

async function checkBusinessLogic() {
  console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...');
  
  try {
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await db
      .insert(users)
      .values({
        telegram_id: 999999999,
        username: 'production_test',
        ref_code: 'PROD_TEST',
        balance_uni: '0.000000',
        balance_ton: '0.000000'
      })
      .returning();
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –†–∞–±–æ—Ç–∞–µ—Ç');
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const testTransaction = await db
      .insert(transactions)
      .values({
        user_id: testUser[0].id,
        transaction_type: 'production_test',
        amount: '1.000000',
        currency: 'UNI',
        status: 'confirmed'
      })
      .returning();
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –†–∞–±–æ—Ç–∞–µ—Ç');
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await db.delete(transactions).where(eq(transactions.id, testTransaction[0].id));
    await db.delete(users).where(eq(users.id, testUser[0].id));
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –í—ã–ø–æ–ª–Ω–µ–Ω–∞');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏:', error.message);
    return false;
  }
}

async function checkSecurity() {
  console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
  
  let securityScore = 0;
  const maxScore = 4;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTPS)
  if (config.app.nodeEnv === 'production') {
    console.log('‚úÖ –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    securityScore++;
  } else {
    console.log('‚ö†Ô∏è  –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∏–∑–º–µ–Ω–∏—Ç–µ NODE_ENV=production)');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (config.security.corsOrigins && config.security.corsOrigins.length > 0) {
    console.log('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    securityScore++;
  } else {
    console.log('‚ö†Ô∏è  CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
  if (config.security.sessionSecret && config.security.sessionSecret !== 'unifarm-secret-key') {
    console.log('‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–µ—Å—Å–∏–∏ –∏–∑–º–µ–Ω–µ–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ');
    securityScore++;
  } else {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω–∞
  if (config.telegram.botToken && config.telegram.botToken.length > 10) {
    console.log('‚úÖ Telegram Bot Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    securityScore++;
  } else {
    console.log('‚ùå Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
  
  return securityScore >= maxScore * 0.75; // 75% —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
}

async function runProductionCheck() {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üöÄ UNIFARM - –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const checks = [
    { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', test: checkDatabaseConnection },
    { name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', test: checkEnvironmentVariables },
    { name: '–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', test: checkDataIntegrity },
    { name: 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã', test: checkAPIEndpoints },
    { name: '–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞', test: checkBusinessLogic },
    { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', test: checkSecurity }
  ];
  
  const results = [];
  
  for (const check of checks) {
    const result = await check.test();
    results.push({ name: check.name, passed: result });
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  const passedChecks = results.filter(r => r.passed).length;
  const totalChecks = results.length;
  
  results.forEach(result => {
    const status = result.passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    console.log(`${status} - ${result.name}`);
  });
  
  console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedChecks}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  const readinessPercentage = Math.round((passedChecks / totalChecks) * 100);
  console.log(`üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: ${readinessPercentage}%`);
  
  if (readinessPercentage >= 85) {
    console.log('\nüéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!');
    console.log('‚úÖ –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∂–∏–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  } else if (readinessPercentage >= 70) {
    console.log('\n‚ö†Ô∏è  –ü–†–û–ï–ö–¢ –ü–û–ß–¢–ò –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
    console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
  } else {
    console.log('\n‚ùå –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
    console.log('üõ†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞');
  }
  
  process.exit(0);
}

runProductionCheck().catch(console.error);