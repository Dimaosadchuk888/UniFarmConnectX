/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pg –≤–º–µ—Å—Ç–æ @neondatabase/serverless
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
import fs from 'fs';
import { Pool } from 'pg';
import 'dotenv/config';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

// –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.neon
function loadEnvFromFile() {
  try {
    const envFile = fs.readFileSync('.env.neon', 'utf8');
    const envVars = {};
    
    envFile.split('\n').forEach(line => {
      if (line.trim() && !line.startsWith('#')) {
        const parts = line.split('=');
        if (parts.length >= 2) {
          const key = parts[0].trim();
          const value = parts.slice(1).join('=').trim();
          
          if (key && value) {
            envVars[key] = value;
            process.env[key] = value;
          }
        }
      }
    });
    
    return envVars;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env.neon: ${error.message}`, colors.red);
    return {};
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
async function checkNeonConnection() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB...', colors.blue);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envVars = loadEnvFromFile();
  
  if (!process.env.DATABASE_URL && !envVars.DATABASE_URL) {
    log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ—ë –≤ .env.neon', colors.red);
    return false;
  }
  
  const connectionString = process.env.DATABASE_URL;
  const maskedUrl = connectionString.replace(/:[^:]*@/, ':***@');
  
  log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${maskedUrl}`, colors.yellow);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL "neon"
  if (!connectionString.includes('neon')) {
    log('‚ö†Ô∏è URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "neon" - –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ Neon DB?', colors.yellow);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "sslmode=require"
  if (!connectionString.includes('sslmode=require')) {
    log('‚ö†Ô∏è URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "sslmode=require" - –¥–ª—è Neon DB —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!', colors.yellow);
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    const pool = new Pool({ 
      connectionString,
      ssl: {
        rejectUnauthorized: false // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      },
      max: 2,
      idleTimeoutMillis: 10000,
      connectionTimeoutMillis: 5000
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...', colors.cyan);
    const result = await pool.query('SELECT version(), current_timestamp, pg_database_size(current_database())/1024/1024 as db_size_mb');
    
    log('\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', colors.green);
    log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:', colors.magenta);
    log(`PostgreSQL –≤–µ—Ä—Å–∏—è: ${result.rows[0].version}`, colors.reset);
    log(`–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_timestamp}`, colors.reset);
    log(`–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${Math.round(result.rows[0].db_size_mb)} MB`, colors.reset);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...', colors.cyan);
    const tablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const tableStats = [];
    for (const row of tablesResult.rows) {
      try {
        const countResult = await pool.query(`SELECT count(*) FROM "${row.table_name}"`);
        tableStats.push({
          table_name: row.table_name,
          count: parseInt(countResult.rows[0].count)
        });
      } catch (error) {
        tableStats.push({
          table_name: row.table_name,
          count: '–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞'
        });
      }
    }
    
    log('\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:', colors.magenta);
    tableStats.forEach(table => {
      log(`${table.table_name}: ${table.count} –∑–∞–ø–∏—Å–µ–π`, colors.reset);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions...', colors.cyan);
    
    try {
      const partitioningCheck = await pool.query(`
        SELECT pg_get_partkeydef(c.oid) as partition_key
        FROM pg_class c
        JOIN pg_inherits i ON i.inhparent = c.oid
        WHERE c.relname = 'transactions'
        LIMIT 1
      `);
      
      if (partitioningCheck.rowCount > 0 && partitioningCheck.rows[0].partition_key) {
        log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!', colors.green);
        log(`–ö–ª—é—á –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${partitioningCheck.rows[0].partition_key}`, colors.reset);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏
        const partitionsCheck = await pool.query(`
          SELECT inhrelid::regclass AS partition_name
          FROM pg_inherits
          WHERE inhparent = 'transactions'::regclass
          ORDER BY inhrelid::regclass::text
        `);
        
        if (partitionsCheck.rowCount > 0) {
          log(`\n–ù–∞–π–¥–µ–Ω–æ ${partitionsCheck.rowCount} –ø–∞—Ä—Ç–∏—Ü–∏–π:`, colors.magenta);
          partitionsCheck.rows.forEach(row => {
            log(`- ${row.partition_name}`, colors.reset);
          });
        } else {
          log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –ø–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`, colors.yellow);
        }
      } else {
        log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ transactions –ù–ï –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!', colors.yellow);
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.red);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª
    await pool.end();
    
    return true;
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Neon DB: ${error.message}`, colors.red);
    if (error.stack) {
      log(`–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: ${error.stack}`, colors.red);
    }
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkNeonConnection()
  .then(success => {
    if (success) {
      log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Neon DB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.green);
    } else {
      log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon DB', colors.yellow);
    }
  })
  .catch(error => {
    log(`\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red);
    if (error.stack) {
      log(error.stack, colors.red);
    }
    process.exit(1);
  });