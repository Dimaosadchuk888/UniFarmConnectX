import { supabase } from './core/supabase';

async function checkFixStatus() {
  console.log('=== –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ===\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
  console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ ton_farming_data:\n');
  
  const { data: tonFarmingData, error: tfdError } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, boost_package_id, updated_at')
    .eq('user_id', 74)
    .single();

  if (!tfdError && tonFarmingData) {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log(`User 74: farming_balance=${tonFarmingData.farming_balance}, package_id=${tonFarmingData.boost_package_id}`);
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${tonFarmingData.updated_at}\n`);
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ton_farming_data:', tfdError);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON
  console.log('üí∞ 2. –ü–û–°–õ–ï–î–ù–ò–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:\n');
  
  const { data: recentTx, error: txError } = await supabase
    .from('transactions')
    .select('id, user_id, amount, created_at')
    .eq('currency', 'TON')
    .eq('type', 'FARMING_REWARD')
    .order('created_at', { ascending: false })
    .limit(5);

  if (!txError && recentTx) {
    if (recentTx.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      recentTx.forEach(tx => {
        console.log(`  ID: ${tx.id}, User: ${tx.user_id}, –°—É–º–º–∞: +${tx.amount} TON, –í—Ä–µ–º—è: ${tx.created_at}`);
      });
    } else {
      console.log('‚è≥ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\nüë• 3. –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n');
  
  const { data: activeUsers, error: activeError } = await supabase
    .from('ton_farming_data')
    .select('user_id')
    .eq('boost_active', true);

  if (!activeError && activeUsers) {
    console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ª–∏ farming_balance
    const { data: withBalance } = await supabase
      .from('ton_farming_data')
      .select('user_id')
      .eq('boost_active', true)
      .gt('farming_balance', '0');
      
    console.log(`–° –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º farming_balance: ${withBalance?.length || 0}`);
    
    if (withBalance && withBalance.length > 0) {
      console.log('‚úÖ farming_balance –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è farming_balance –≤—Å–µ –µ—â–µ 0 –¥–ª—è –≤—Å–µ—Ö');
    }
  }

  console.log('\nüìà –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  console.log('–ï—Å–ª–∏ farming_balance –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
  console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.');
}

checkFixStatus();