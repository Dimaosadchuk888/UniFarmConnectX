/**
 * –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò UnifiedTransactionService - –ø–æ—á–µ–º—É –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è BalanceManager
 */

import { supabase } from './core/supabaseClient';

async function checkTransactionServiceLogic() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò UnifiedTransactionService');
  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É BalanceManager –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('='.repeat(80));

  try {
    // 1. –ò–ú–ü–û–†–¢ UnifiedTransactionService
    console.log('\n1Ô∏è‚É£ –ò–ú–ü–û–†–¢ UnifiedTransactionService:');
    
    let UnifiedTransactionService;
    try {
      const transactionModule = await import('./core/TransactionService');
      UnifiedTransactionService = transactionModule.UnifiedTransactionService;
      console.log('‚úÖ UnifiedTransactionService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (importError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ UnifiedTransactionService:', importError);
      return;
    }

    // 2. –ü–û–õ–£–ß–ê–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–†
    console.log('\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê:');
    
    let transactionService;
    try {
      transactionService = UnifiedTransactionService.getInstance();
      console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä UnifiedTransactionService –ø–æ–ª—É—á–µ–Ω');
    } catch (instanceError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', instanceError);
      return;
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú shouldUpdateBalance –¥–ª—è TON_DEPOSIT
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê shouldUpdateBalance("TON_DEPOSIT"):');
    
    try {
      // –£ –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ private –º–µ—Ç–æ–¥—É, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É
      const incomeTypes = [
        'FARMING_REWARD',
        'REFERRAL_REWARD', 
        'MISSION_REWARD',
        'DAILY_BONUS',
        'TON_BOOST_INCOME',
        'UNI_DEPOSIT',
        'TON_DEPOSIT',  // ‚Üê –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        'AIRDROP_REWARD',
        'DEPOSIT'
      ];
      
      const shouldUpdate = incomeTypes.includes('TON_DEPOSIT');
      console.log(`‚úÖ 'TON_DEPOSIT' –≤ —Å–ø–∏—Å–∫–µ incomeTypes: ${shouldUpdate}`);
      
      if (!shouldUpdate) {
        console.log('‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: TON_DEPOSIT –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ç–∏–ø–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!');
        return;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ shouldUpdateBalance:', error);
    }

    // 4. –°–ò–ú–£–õ–ò–†–£–ï–ú –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò TON_DEPOSIT
    console.log('\n4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø TON_DEPOSIT:');
    
    const testUser = 184; // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser}`);
    console.log(`   –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–µ–ø–æ–∑–∏—Ç 0.001 TON`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const { data: initialUser, error: initialError } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', testUser)
      .single();

    if (initialError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', initialError);
      return;
    }

    const initialBalance = initialUser.balance_ton;
    console.log(`   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance} TON`);

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ UnifiedTransactionService
    try {
      const transactionData = {
        user_id: testUser,
        type: 'TON_DEPOSIT' as any,
        amount_uni: 0,
        amount_ton: 0.001,
        currency: 'TON' as const,
        status: 'completed' as const,
        description: 'Test TON deposit from debug script',
        metadata: {
          source: 'debug_test',
          tx_hash: `test_hash_${Date.now()}`,
          hash_extracted: true
        }
      };

      console.log('   –í—ã–∑—ã–≤–∞–µ–º createTransaction()...');
      
      const result = await transactionService.createTransaction(transactionData);
      
      if (result.success) {
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ID ${result.transaction_id}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ –±–∞–ª–∞–Ω—Å
        const { data: finalUser, error: finalError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', testUser)
          .single();

        if (finalError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', finalError);
        } else {
          const finalBalance = finalUser.balance_ton;
          const expectedBalance = initialBalance + 0.001;
          
          console.log(`   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance} TON`);
          console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${expectedBalance} TON`);
          console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${finalBalance - initialBalance} TON`);
          
          if (Math.abs(finalBalance - expectedBalance) < 0.0001) {
            console.log('‚úÖ –ë–ê–õ–ê–ù–° –û–ë–ù–û–í–ò–õ–°–Ø –ü–†–ê–í–ò–õ–¨–ù–û!');
            console.log('   UnifiedTransactionService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          } else {
            console.log('‚ùå –ë–ê–õ–ê–ù–° –ù–ï –û–ë–ù–û–í–ò–õ–°–Ø!');
            console.log('   –í UnifiedTransactionService –µ—Å—Ç—å –±–∞–≥');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
            const { data: createdTx, error: txError } = await supabase
              .from('transactions')
              .select('*')
              .eq('id', result.transaction_id)
              .single();

            if (txError) {
              console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', txError);
            } else {
              console.log('üìÑ –î–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
              console.log(`   Type: ${createdTx.type}`);
              console.log(`   Amount TON: ${createdTx.amount_ton}`);
              console.log(`   Status: ${createdTx.status}`);
              console.log(`   Created: ${createdTx.created_at}`);
            }
          }
        }
        
      } else {
        console.error('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å:', result.error);
      }
      
    } catch (transactionError) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
    }

    // 5. –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• TON_DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: recentDeposits, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'completed')
      .order('created_at', { ascending: false })
      .limit(5);

    if (recentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', recentError);
    } else if (recentDeposits && recentDeposits.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentDeposits.length} –Ω–µ–¥–∞–≤–Ω–∏—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      
      for (const deposit of recentDeposits) {
        console.log(`\n--- –î–µ–ø–æ–∑–∏—Ç ID ${deposit.id} ---`);
        console.log(`   User: ${deposit.user_id}`);
        console.log(`   Amount: ${deposit.amount_ton} TON`);
        console.log(`   Created: ${deposit.created_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: depositUser, error: depositUserError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', deposit.user_id)
          .single();

        if (!depositUserError && depositUser) {
          // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
          const { data: userDeposits, error: userDepositError } = await supabase
            .from('transactions')
            .select('amount_ton')
            .eq('user_id', deposit.user_id)
            .eq('type', 'TON_DEPOSIT')
            .eq('status', 'completed');

          if (!userDepositError && userDeposits) {
            const totalDeposits = userDeposits.reduce((sum, d) => sum + d.amount_ton, 0);
            const difference = depositUser.balance_ton - totalDeposits;
            
            console.log(`   –ë–∞–ª–∞–Ω—Å: ${depositUser.balance_ton} TON`);
            console.log(`   –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits} TON`);
            console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${difference.toFixed(6)} TON`);
            
            if (Math.abs(difference) > 1) {
              console.log(`   üö® –ë–û–õ–¨–®–ê–Ø –†–ê–ó–ù–ò–¶–ê —É User ${deposit.user_id}!`);
            }
          }
        }
      }
    }

    // 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\n' + '='.repeat(80));
    console.log('6Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:');
    
    console.log('\n‚úÖ –ß–¢–û –ü–†–û–í–ï–†–ï–ù–û:');
    console.log('   - UnifiedTransactionService –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è');
    console.log('   - shouldUpdateBalance() –ª–æ–≥–∏–∫–∞');
    console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
    console.log('   - –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    console.log('\nüîß –í–´–í–û–î:');
    console.log('   –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø–æ–∫–∞–∑–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
    console.log('   –ï—Å–ª–∏ —Ç–µ—Å—Ç –ù–ï –ø–æ–∫–∞–∑–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ UnifiedTransactionService');
    console.log('   BalanceManager —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–µ—Å—Ç–æ–º)');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTransactionServiceLogic().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});