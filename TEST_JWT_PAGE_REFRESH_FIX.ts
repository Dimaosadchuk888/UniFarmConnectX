#!/usr/bin/env tsx
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π JWT page refresh –ø—Ä–æ–±–ª–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

// –°–∏–º—É–ª—è—Ü–∏—è browser localStorage –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockLocalStorage = (() => {
  let storage: Record<string, string> = {};
  return {
    getItem: (key: string) => storage[key] || null,
    setItem: (key: string, value: string) => { storage[key] = value; },
    removeItem: (key: string) => { delete storage[key]; },
    clear: () => { storage = {}; },
    length: Object.keys(storage).length,
    key: (index: number) => Object.keys(storage)[index] || null
  };
})();

// –°–∏–º—É–ª—è—Ü–∏—è correctApiRequest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockCorrectApiRequest = async (url: string, method = 'GET', body?: any) => {
  console.log(`[MOCK API] ${method} ${url}`, body ? `with body: ${JSON.stringify(body)}` : '');
  
  // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è profile endpoint —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
  if (url === '/api/v2/users/profile') {
    const token = mockLocalStorage.getItem('unifarm_jwt_token');
    if (token && token.includes('valid_token')) {
      return {
        success: true,
        data: {
          user: {
            id: 123,
            username: 'test_user',
            telegram_id: 987654321,
            ref_code: 'TEST_REF'
          }
        }
      };
    } else {
      throw new Error('Unauthorized - invalid token');
    }
  }
  
  // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (url === '/api/v2/auth/telegram') {
    return {
      success: true,
      data: {
        token: 'new_valid_token_12345',
        user: {
          id: 123,
          username: 'test_user',
          telegram_id: 987654321,
          ref_code: 'TEST_REF'
        }
      }
    };
  }
  
  return { success: false, error: 'Not mocked' };
};

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
async function testExistingTokenPriority() {
  console.log('\nüß™ –¢–ï–°–¢ 1: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ page refresh');
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞: —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω
  mockLocalStorage.setItem('unifarm_jwt_token', 'valid_token_12345');
  mockLocalStorage.setItem('unifarm_last_session', JSON.stringify({
    timestamp: new Date().toISOString(),
    user_id: 123,
    username: 'test_user'
  }));
  
  console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ localStorage');
  
  // –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ refreshUserData()
  const existingToken = mockLocalStorage.getItem('unifarm_jwt_token');
  
  if (existingToken) {
    console.log('[UserContext] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JWT —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å...');
    try {
      const testResponse = await mockCorrectApiRequest('/api/v2/users/profile');
      if (testResponse.success && testResponse.data) {
        console.log('[UserContext] ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é');
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ: –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return true;
      }
    } catch (error) {
      console.log('[UserContext] ‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  }
  
  console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω');
  return false;
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
function testRequiredTokenValidation() {
  console.log('\nüß™ –¢–ï–°–¢ 2: –ó–∞—â–∏—Ç–∞ –æ—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  mockLocalStorage.clear();
  
  // –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ correctApiRequest
  const token = mockLocalStorage.getItem('unifarm_jwt_token');
  const testUrl = '/api/v2/users/profile';
  const requiresAuth = testUrl.includes('/api/v2/') && !testUrl.includes('/auth/telegram') && !testUrl.includes('/auth/guest');
  
  if (!token && requiresAuth) {
    console.log('[correctApiRequest] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ: –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
    return true;
  }
  
  console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
  return false;
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±–µ–≥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function testAvoidDuplicateAuth() {
  console.log('\nüß™ –¢–ï–°–¢ 3: –ò–∑–±–µ–≥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ page refresh');
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è –∏ —Ç–æ–∫–µ–Ω (–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π)
  mockLocalStorage.setItem('unifarm_jwt_token', 'invalid_token_12345');
  mockLocalStorage.setItem('unifarm_last_session', JSON.stringify({
    timestamp: new Date().toISOString(),
    user_id: 123,
    username: 'test_user'
  }));
  
  // –°–∏–º—É–ª—è—Ü–∏—è Telegram initData (–∫–∞–∫ –ø—Ä–∏ page refresh)
  const initData = 'mock_telegram_init_data';
  let authorizationAttemptedRef = { current: false };
  
  // –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ refreshUserData()
  if (initData && !authorizationAttemptedRef.current) {
    const lastSession = mockLocalStorage.getItem('unifarm_last_session');
    const existingToken = mockLocalStorage.getItem('unifarm_jwt_token');
    
    if (lastSession && existingToken) {
      console.log('[UserContext] –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      authorizationAttemptedRef.current = true;
      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–µ—Å—Å–∏–∏');
      return true;
    }
  }
  
  console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: –°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
  return false;
}

// –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π page refresh
async function testFullPageRefreshScenario() {
  console.log('\nüß™ –¢–ï–°–¢ 4: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π page refresh');
  
  // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞)
  console.log('–®–∞–≥ 1: –ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  const authResponse = await mockCorrectApiRequest('/api/v2/auth/telegram', 'POST', { initData: 'mock_data' });
  
  if (authResponse.success) {
    mockLocalStorage.setItem('unifarm_jwt_token', authResponse.data.token);
    mockLocalStorage.setItem('unifarm_last_session', JSON.stringify({
      timestamp: new Date().toISOString(),
      user_id: authResponse.data.user.id,
      username: authResponse.data.user.username
    }));
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
  
  // –®–∞–≥ 2: –°–∏–º—É–ª—è—Ü–∏—è page refresh
  console.log('\n–®–∞–≥ 2: Page refresh (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)');
  
  const existingToken = mockLocalStorage.getItem('unifarm_jwt_token');
  if (existingToken) {
    try {
      const profileResponse = await mockCorrectApiRequest('/api/v2/users/profile');
      if (profileResponse.success) {
        console.log('‚úÖ –ü–æ—Å–ª–µ page refresh: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
        console.log('‚úÖ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ: Page refresh —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        return true;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ refresh:', error);
    }
  }
  
  console.log('‚ùå –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ: Page refresh –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  return false;
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π JWT page refresh –ø—Ä–æ–±–ª–µ–º—ã');
  console.log('üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toISOString());
  
  const results = {
    existingTokenPriority: await testExistingTokenPriority(),
    requiredTokenValidation: testRequiredTokenValidation(),
    avoidDuplicateAuth: await testAvoidDuplicateAuth(),
    fullPageRefreshScenario: await testFullPageRefreshScenario()
  };
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('='.repeat(50));
  
  Object.entries(results).forEach(([testName, passed], index) => {
    const emoji = passed ? '‚úÖ' : '‚ùå';
    const status = passed ? '–ü–†–û–®–ï–õ' : '–ù–ï –ü–†–û–®–ï–õ';
    console.log(`${index + 1}. ${testName}: ${emoji} ${status}`);
  });
  
  const totalPassed = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log('\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log(`–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}/${totalTests}`);
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((totalPassed / totalTests) * 100)}%`);
  
  if (totalPassed === totalTests) {
    console.log('üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø JWT PAGE REFRESH –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(console.error);

export { runAllTests, testExistingTokenPriority, testRequiredTokenValidation, testAvoidDuplicateAuth, testFullPageRefreshScenario };