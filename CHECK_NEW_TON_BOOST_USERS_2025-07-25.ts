/**
 * –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô TON BOOST - 25 –∏—é–ª—è 2025
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π ton_farming_data –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkNewTonBoostUsers() {
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô TON BOOST');
    console.log('=' .repeat(60));
    
    try {
        const today = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        
        // –®–ê–ì 1: –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è —Å TON Boost
        console.log('\nüìä –®–ê–ì 1: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–û–ó–î–ê–ù–ù–´–ï –°–ï–ì–û–î–ù–Ø –° TON BOOST');
        console.log('-' .repeat(50));
        
        const { data: todayUsers, error: usersError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_rate, balance_ton, created_at')
            .gte('created_at', today)
            .gt('ton_boost_package', 0)
            .order('created_at', { ascending: false });
            
        if (usersError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
            return;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${todayUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è —Å TON Boost`);
        
        if (!todayUsers || todayUsers.length === 0) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost —Å–µ–≥–æ–¥–Ω—è');
            return;
        }
        
        // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\nüìã –®–ê–ì 2: –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
        console.log('-' .repeat(50));
        
        let successCount = 0;
        let failedCount = 0;
        
        for (const user of todayUsers) {
            console.log(`\nüë§ USER ${user.id}:`);
            console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
            console.log(`   üì¶ TON Boost Package: ${user.ton_boost_package}`);
            console.log(`   ‚ö° TON Boost Rate: ${user.ton_boost_rate}`);
            console.log(`   üí∞ Balance TON: ${user.balance_ton}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ ton_farming_data
            const { data: farmingRecord, error: farmingError } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', user.id.toString())
                .single();
                
            if (farmingError) {
                console.log(`   ‚ùå FARMING –ó–ê–ü–ò–°–¨ –û–¢–°–£–¢–°–¢–í–£–ï–¢!`);
                console.log(`      –û—à–∏–±–∫–∞: ${farmingError.message}`);
                failedCount++;
                
                // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
                const { data: purchases } = await supabase
                    .from('transactions')
                    .select('type, amount, description, created_at, status')
                    .eq('user_id', user.id)
                    .eq('type', 'BOOST_PURCHASE')
                    .order('created_at', { ascending: false })
                    .limit(3);
                    
                if (purchases && purchases.length > 0) {
                    console.log(`   üìã –ù–∞–π–¥–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ BOOST_PURCHASE:`);
                    for (const purchase of purchases) {
                        console.log(`      - ${purchase.amount} TON (${purchase.status}) - ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
                    }
                } else {
                    console.log(`   ‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∏ BOOST_PURCHASE –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                }
            } else {
                console.log(`   ‚úÖ FARMING –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:`);
                console.log(`      Balance: ${farmingRecord.farming_balance} TON`);
                console.log(`      Rate: ${farmingRecord.farming_rate}`);
                console.log(`      Package ID: ${farmingRecord.boost_package_id}`);
                console.log(`      –ê–∫—Ç–∏–≤–µ–Ω: ${farmingRecord.boost_active}`);
                console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${new Date(farmingRecord.created_at).toLocaleString('ru-RU')}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ farming –∑–∞–ø–∏—Å–∏
                const userTime = new Date(user.created_at).getTime();
                const farmingTime = new Date(farmingRecord.created_at).getTime();
                const timeDiffMinutes = Math.abs(userTime - farmingTime) / 1000 / 60;
                
                console.log(`      ‚è±Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiffMinutes.toFixed(2)} –º–∏–Ω—É—Ç`);
                
                if (timeDiffMinutes > 30) {
                    console.log(`      ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –†–ê–ó–ù–ò–¶–ê - –≤–æ–∑–º–æ–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                } else {
                    console.log(`      ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
                }
                
                successCount++;
            }
        }
        
        // –®–ê–ì 3: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('\nüìà –®–ê–ì 3: –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
        console.log('-' .repeat(50));
        
        const totalUsers = todayUsers.length;
        const successRate = totalUsers > 0 ? ((successCount / totalUsers) * 100).toFixed(1) : '0';
        
        console.log(`üë• –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${totalUsers}`);
        console.log(`‚úÖ –° –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ farming –∑–∞–ø–∏—Å—è–º–∏: ${successCount}`);
        console.log(`‚ùå –ë–ï–ó farming –∑–∞–ø–∏—Å–µ–π: ${failedCount}`);
        console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate}%`);
        
        if (failedCount > 0) {
            console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
            console.log(`üí• ${failedCount} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï –ü–û–õ–£–ß–ê–Æ–¢ –¥–æ—Ö–æ–¥—ã TON Boost!`);
            console.log('üîß –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫');
            console.log('üìû –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        } else {
            console.log('\nüéâ –í–°–ï –ù–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!');
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
        
        // –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ —á–∞—Å
        console.log('\nüìä –®–ê–ì 4: –ü–û–ö–£–ü–ö–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°');
        console.log('-' .repeat(50));
        
        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
        
        const { data: recentPurchases } = await supabase
            .from('transactions')
            .select('user_id, amount, created_at, status, metadata')
            .eq('type', 'BOOST_PURCHASE')
            .gte('created_at', oneHourAgo)
            .order('created_at', { ascending: false });
            
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentPurchases?.length || 0} –ø–æ–∫—É–ø–æ–∫ BOOST_PURCHASE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å`);
        
        if (recentPurchases && recentPurchases.length > 0) {
            for (const purchase of recentPurchases) {
                console.log(`\nüõí –ü–û–ö–£–ü–ö–ê User ${purchase.user_id}:`);
                console.log(`   üí∞ –°—É–º–º–∞: ${purchase.amount} TON`);
                console.log(`   üìÖ –í—Ä–µ–º—è: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
                console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${purchase.status}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏
                const { data: activationRecord } = await supabase
                    .from('ton_farming_data')
                    .select('farming_balance, created_at')
                    .eq('user_id', purchase.user_id.toString())
                    .single();
                    
                if (activationRecord) {
                    const purchaseTime = new Date(purchase.created_at).getTime();
                    const activationTime = new Date(activationRecord.created_at).getTime();
                    const activationDelay = Math.abs(purchaseTime - activationTime) / 1000 / 60;
                    
                    console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: Balance ${activationRecord.farming_balance} TON`);
                    console.log(`   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${activationDelay.toFixed(2)} –º–∏–Ω—É—Ç`);
                } else {
                    console.log(`   ‚ùå –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê - –ü–†–û–ë–õ–ï–ú–ê!`);
                }
            }
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkNewTonBoostUsers().then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});