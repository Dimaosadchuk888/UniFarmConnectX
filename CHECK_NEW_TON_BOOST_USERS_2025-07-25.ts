/**
 * –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - 25 –∏—é–ª—è 2025
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –ü–æ–ª—É—á–∞–µ–º Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;

const supabase = createClient(supabaseUrl, supabaseAnonKey);

interface BoostPurchase {
    user_id: number;
    package_id: number;
    amount: number;
    status: string;
    created_at: string;
    updated_at: string;
}

interface TonFarmingData {
    user_id: string;
    boost_package_id: number;
    farming_balance: number;
    rate_ton_per_second: number;
    created_at: string;
}

interface UserData {
    id: number;
    ton_boost_package: number | null;
    ton_boost_package_id: number | null;
    ton_boost_rate: number | null;
    balance_ton: number;
    updated_at: string;
}

async function checkNewTonBoostUsers() {
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(60));
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ TON Boost (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞)
        console.log('\nüì¶ –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–ö–£–ü–ö–ò TON BOOST (–∑–∞ 2 —á–∞—Å–∞):');
        const { data: recentPurchases, error: purchasesError } = await supabase
            .from('boost_purchases')
            .select('*')
            .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
            .order('created_at', { ascending: false })
            .limit(15);

        if (purchasesError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', purchasesError);
            return;
        }

        if (!recentPurchases || recentPurchases.length === 0) {
            console.log('‚ÑπÔ∏è  –ù–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentPurchases.length} –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫:`);
            recentPurchases.forEach((purchase: any, index) => {
                console.log(`  ${index + 1}. User ${purchase.user_id}: Package ${purchase.boost_package_id || purchase.package_id}, ${purchase.amount} TON, Status: ${purchase.status}`);
                console.log(`     –°–æ–∑–¥–∞–Ω–æ: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
                console.log(`     –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å:`, purchase);
            });
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüå± –ü–†–û–í–ï–†–ö–ê TON_FARMING_DATA:');
        if (recentPurchases && recentPurchases.length > 0) {
            const userIds = recentPurchases.map((p: BoostPurchase) => p.user_id.toString());
            
            const { data: farmingData, error: farmingError } = await supabase
                .from('ton_farming_data')
                .select('user_id, boost_package_id, farming_balance, rate_ton_per_second, created_at')
                .in('user_id', userIds);

            if (farmingError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è farming –¥–∞–Ω–Ω—ã—Ö:', farmingError);
            } else {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingData?.length || 0} –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data:`);
                farmingData?.forEach((data: TonFarmingData, index) => {
                    console.log(`  ${index + 1}. User ${data.user_id}: Balance ${data.farming_balance} TON, Rate: ${data.rate_ton_per_second}/—Å–µ–∫`);
                    console.log(`     Package ID: ${data.boost_package_id}, Created: ${new Date(data.created_at).toLocaleString('ru-RU')}`);
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∫—É–ø–æ–∫ –∏ farming –∑–∞–ø–∏—Å–µ–π
                console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:');
                const purchaseUserIds = recentPurchases.map((p: BoostPurchase) => p.user_id.toString());
                const farmingUserIds = farmingData?.map((f: TonFarmingData) => f.user_id) || [];
                
                const missingFarmingData = purchaseUserIds.filter(userId => !farmingUserIds.includes(userId));
                if (missingFarmingData.length > 0) {
                    console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${missingFarmingData.join(', ')} –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, –Ω–æ –ù–ï–¢ farming –¥–∞–Ω–Ω—ã—Ö!`);
                } else {
                    console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –∏–º–µ—é—Ç farming –¥–∞–Ω–Ω—ã–µ');
                }
            }
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        console.log('\nüë• –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ USERS:');
        const { data: activeUsers, error: usersError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_package_id, ton_boost_rate, balance_ton, updated_at')
            .not('ton_boost_package', 'is', null)
            .gte('updated_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
            .order('updated_at', { ascending: false })
            .limit(10);

        if (usersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
        } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeUsers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
            activeUsers?.forEach((user: UserData, index) => {
                console.log(`  ${index + 1}. User ${user.id}: Package ${user.ton_boost_package}, Rate: ${user.ton_boost_rate}, Balance: ${user.balance_ton} TON`);
                console.log(`     Package ID: ${user.ton_boost_package_id}, Updated: ${new Date(user.updated_at).toLocaleString('ru-RU')}`);
            });
        }

        // 4. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        const { data: totalActiveUsers, error: statsError } = await supabase
            .from('users')
            .select('id', { count: 'exact' })
            .not('ton_boost_package', 'is', null);

        if (!statsError && totalActiveUsers) {
            console.log(`‚úÖ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalActiveUsers.length}`);
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
        console.log('\nüí∞ –ü–û–°–õ–ï–î–ù–ò–ï TON FARMING –î–û–•–û–î–´:');
        const { data: recentIncomes, error: incomesError } = await supabase
            .from('transactions')
            .select('user_id, amount, description, created_at')
            .eq('type', 'FARMING_REWARD')
            .eq('currency', 'TON')
            .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // –∑–∞ 30 –º–∏–Ω—É—Ç
            .order('created_at', { ascending: false })
            .limit(10);

        if (incomesError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤:', incomesError);
        } else {
            console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON –¥–æ—Ö–æ–¥—ã (–∑–∞ 30 –º–∏–Ω): ${recentIncomes?.length || 0}`);
            recentIncomes?.forEach((income, index) => {
                console.log(`  ${index + 1}. User ${income.user_id}: +${income.amount} TON`);
                console.log(`     ${income.description}, ${new Date(income.created_at).toLocaleString('ru-RU')}`);
            });
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }

    console.log('\n' + '=' .repeat(60));
    console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkNewTonBoostUsers().then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
});