/**
 * –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - 25 –∏—é–ª—è 2025
 * –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π ton_farming_data –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function analyzeExistingRecords() {
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• TON_FARMING_DATA –ó–ê–ü–ò–°–ï–ô');
    console.log('=' .repeat(60));
    
    try {
        // 1. –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ó–ê–ü–ò–°–ò
        console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π ton_farming_data...');
        const { data: existingRecords, error: recordsError } = await supabase
            .from('ton_farming_data')
            .select('*')
            .order('user_id', { ascending: true });

        if (recordsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', recordsError);
            return;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingRecords?.length || 0} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π`);

        // 2. –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–†–£–ö–¢–£–†–£ –ö–ê–ñ–î–û–ô –ó–ê–ü–ò–°–ò
        console.log('\nüìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ó–ê–ü–ò–°–ï–ô:');
        console.log('-'.repeat(80));
        
        existingRecords?.forEach((record, index) => {
            console.log(`\n${index + 1}. User ID: ${record.user_id}`);
            Object.keys(record).forEach(key => {
                if (key !== 'user_id') {
                    console.log(`   ${key}: ${record[key]}`);
                }
            });
            console.log('-'.repeat(40));
        });

        // 3. –ü–û–õ–£–ß–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST –ë–ï–ó –ó–ê–ü–ò–°–ï–ô
        console.log('\nüîç –ü–û–ò–°–ö –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô...');
        const { data: usersWithBoost, error: usersError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_rate, balance_ton')
            .not('ton_boost_package', 'is', null)
            .gt('ton_boost_package', 0)
            .order('id', { ascending: true });

        if (usersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
            return;
        }

        const existingUserIds = new Set(existingRecords?.map(r => r.user_id) || []);
        const missingUsers = usersWithBoost?.filter(user => 
            !existingUserIds.has(user.id.toString())
        ) || [];

        console.log(`\nüö® –ù–ê–ô–î–ï–ù–û ${missingUsers.length} –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:`);
        
        // 4. –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–û–ü–£–©–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –î–ï–¢–ê–õ–Ø–ú–ò
        missingUsers.forEach((user, index) => {
            console.log(`\n${index + 1}. üö® User ID ${user.id}:`);
            console.log(`   üì¶ TON Boost Package: ${user.ton_boost_package}`);
            console.log(`   ‚ö° TON Boost Rate: ${user.ton_boost_rate}`);
            console.log(`   üí∞ Balance TON: ${user.balance_ton}`);
            console.log(`   ‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ò –í ton_farming_data`);
        });

        // 5. –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ó–ê–ü–ò–°–Ø–•
        if (existingRecords && existingRecords.length > 0) {
            console.log('\nüìà –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ó–ê–ü–ò–°–Ø–•:');
            console.log('-'.repeat(50));
            
            const sampleRecord = existingRecords[0];
            console.log('üîß –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–´–• –ó–ê–ü–ò–°–ï–ô:');
            Object.keys(sampleRecord).forEach(key => {
                if (key !== 'user_id' && key !== 'created_at' && key !== 'updated_at') {
                    console.log(`   ${key}: ${typeof sampleRecord[key]} (–ø—Ä–∏–º–µ—Ä: ${sampleRecord[key]})`);
                }
            });
        }

        return { existingRecords, missingUsers };

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeExistingRecords().then((result) => {
    if (result && result.missingUsers.length > 0) {
        console.log('\nüéØ –ì–û–¢–û–í –ö –°–û–ó–î–ê–ù–ò–Æ –ó–ê–ü–ò–°–ï–ô');
        console.log(`üìù –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å ${result.missingUsers.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö`);
    }
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});