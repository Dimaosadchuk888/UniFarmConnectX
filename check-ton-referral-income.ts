import { supabase } from './core/supabaseClient';

async function checkTonReferralIncome() {
  console.log('=== –ú–û–ù–ò–¢–û–†–ò–ù–ì TON –ü–ê–†–¢–ù–ï–†–°–ö–ò–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô ===\n');
  
  const USER_ID = 184;
  
  // 1. –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ
  console.log('1. –ü–û–°–õ–ï–î–ù–ò–ï TON –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø:');
  const { data: tonReferrals } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', USER_ID)
    .eq('type', 'REFERRAL_REWARD')
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (tonReferrals && tonReferrals.length > 0) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tonReferrals.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö TON referral —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n`);
    tonReferrals.forEach(tx => {
      const time = new Date(tx.created_at);
      const minutesAgo = Math.floor((Date.now() - time.getTime()) / (1000 * 60));
      console.log(`‚îú‚îÄ‚îÄ ${tx.amount} TON - ${tx.description}`);
      console.log(`‚îÇ   –í—Ä–µ–º—è: ${time.toLocaleString()} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)\n`);
    });
  } else {
    console.log('‚ùå TON –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n');
  }
  
  // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º 311-313
  console.log('\n2. –°–¢–ê–¢–£–° –ù–û–í–´–• –†–ï–§–ï–†–ê–õ–û–í (311-313):');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö farming –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const { data: newRefFarming } = await supabase
    .from('transactions')
    .select('user_id, amount, created_at')
    .in('user_id', [311, 312, 313])
    .eq('type', 'FARMING_REWARD')
    .eq('currency', 'TON')
    .order('created_at', { ascending: false });
    
  if (newRefFarming) {
    const byUser: Record<number, any[]> = {};
    newRefFarming.forEach(tx => {
      if (!byUser[tx.user_id]) byUser[tx.user_id] = [];
      byUser[tx.user_id].push(tx);
    });
    
    Object.entries(byUser).forEach(([userId, txs]) => {
      console.log(`\nUser ${userId}:`);
      console.log(`‚îú‚îÄ‚îÄ –í—Å–µ–≥–æ farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txs.length}`);
      console.log(`‚îú‚îÄ‚îÄ –ü–æ—Å–ª–µ–¥–Ω—è—è: ${new Date(txs[0].created_at).toLocaleTimeString()}`);
      console.log(`‚îî‚îÄ‚îÄ –°—É–º–º–∞: ${txs[0].amount} TON`);
    });
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –æ—Ç 311-313
  console.log('\n\n3. –û–ñ–ò–î–ê–ï–ú–´–ï –ü–ê–†–¢–ù–ï–†–°–ö–ò–ï –û–¢ –ù–û–í–´–• –†–ï–§–ï–†–ê–õ–û–í:');
  
  const expectedReferrals = [311, 312, 313];
  for (const refId of expectedReferrals) {
    const { data: refReward } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', USER_ID)
      .eq('type', 'REFERRAL_REWARD')
      .eq('currency', 'TON')
      .like('description', `%User ${refId}%`)
      .limit(1);
      
    if (refReward && refReward.length > 0) {
      console.log(`‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –æ—Ç User ${refId} –ü–û–õ–£–ß–ï–ù–´: ${refReward[0].amount} TON`);
    } else {
      console.log(`‚è≥ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –æ—Ç User ${refId} –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏`);
    }
  }
  
  // 4. –û–±—â–∏–π –±–∞–ª–∞–Ω—Å TON
  const { data: user } = await supabase
    .from('users')
    .select('balance_ton')
    .eq('id', USER_ID)
    .single();
    
  console.log(`\n\n4. –í–ê–® –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° TON: ${user?.balance_ton || 0} TON`);
  
  console.log('\n\nüí° –í–ê–ñ–ù–û:');
  console.log('- TON farming –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
  console.log('- –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ farming');
  console.log('- –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100% –æ—Ç farming –≤–∞—à–∏—Ö –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (L1)');
  console.log('- –ö–∞–∂–¥—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª —Å –ø–∞–∫–µ—Ç–æ–º 1 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ~0.000347 TON –∑–∞ —Ü–∏–∫–ª');
}

checkTonReferralIncome();