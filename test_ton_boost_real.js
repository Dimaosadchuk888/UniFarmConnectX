/**
 * T65: –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON Boost —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
 * –°–æ–∑–¥–∞–Ω–∏–µ boost –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ boost_purchases –±–µ–∑ RLS
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –°–æ–∑–¥–∞–µ–º boost –ø–∞–∫–µ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ admin –≤—Å—Ç–∞–≤–∫—É
 */
async function createBoostPackagesDirectly() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï BOOST –ü–ê–ö–ï–¢–û–í –ù–ê–ü–†–Ø–ú–£–Æ ===');
  
  const testBoosts = [
    {
      user_id: 30,
      boost_id: 'BOOST_STANDARD_30D',
      source: 'ton',
      tx_hash: 'test_tx_hash_30_boost',
      amount: 10.0,
      daily_rate: 0.5,
      status: 'confirmed',
      is_active: true,
      start_date: new Date().toISOString(),
      end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
      total_earned: 0.0,
      created_at: new Date().toISOString()
    },
    {
      user_id: 29,
      boost_id: 'BOOST_PREMIUM_15D',
      source: 'ton', 
      tx_hash: 'test_tx_hash_29_boost',
      amount: 25.0,
      daily_rate: 1.2,
      status: 'confirmed',
      is_active: true,
      start_date: new Date().toISOString(),
      end_date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),
      total_earned: 0.0,
      created_at: new Date().toISOString()
    },
    {
      user_id: 4,
      boost_id: 'BOOST_MEGA_7D',
      source: 'ton',
      tx_hash: 'test_tx_hash_4_boost', 
      amount: 50.0,
      daily_rate: 3.0,
      status: 'confirmed',
      is_active: true,
      start_date: new Date().toISOString(),
      end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
      total_earned: 0.0,
      created_at: new Date().toISOString()
    }
  ];
  
  // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ SQL –∞–¥–º–∏–Ω—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
  for (const boost of testBoosts) {
    const insertSQL = `
      INSERT INTO boost_purchases (
        user_id, boost_id, source, tx_hash, amount, daily_rate, 
        status, is_active, start_date, end_date, total_earned, created_at
      ) VALUES (
        ${boost.user_id}, '${boost.boost_id}', '${boost.source}', '${boost.tx_hash}', 
        ${boost.amount}, ${boost.daily_rate}, '${boost.status}', ${boost.is_active}, 
        '${boost.start_date}', '${boost.end_date}', ${boost.total_earned}, '${boost.created_at}'
      )
      ON CONFLICT (user_id, boost_id) DO UPDATE SET
        daily_rate = EXCLUDED.daily_rate,
        is_active = EXCLUDED.is_active,
        start_date = EXCLUDED.start_date,
        end_date = EXCLUDED.end_date;
    `;
    
    const { error } = await supabase.rpc('exec_sql', { sql_query: insertSQL });
    
    if (error) {
      console.log(`‚ùå SQL –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}:`, error.message);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é API –≤—Å—Ç–∞–≤–∫—É
      try {
        const { data, error: apiError } = await supabase
          .from('boost_purchases')
          .upsert(boost, { onConflict: 'user_id,boost_id' });
          
        if (apiError) {
          console.log(`‚ùå API –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}:`, apiError.message);
        } else {
          console.log(`‚úÖ Boost –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}: ${boost.boost_id}`);
        }
      } catch (apiErr) {
        console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}:`, apiErr.message);
      }
    } else {
      console.log(`‚úÖ Boost –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ SQL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}: ${boost.boost_id}`);
    }
  }
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤—Ä—É—á–Ω—É—é
 */
async function simulateTonBoostScheduler() {
  console.log('\n=== –°–ò–ú–£–õ–Ø–¶–ò–Ø TON BOOST –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===');
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã
  const { data: activeBoosts, error } = await supabase
    .from('boost_purchases')
    .select('user_id, boost_id, daily_rate, amount, total_earned, start_date, end_date')
    .eq('status', 'confirmed')
    .eq('is_active', true)
    .gt('end_date', new Date().toISOString());
    
  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost –ø–∞–∫–µ—Ç–æ–≤:', error.message);
    return;
  }
  
  if (!activeBoosts || activeBoosts.length === 0) {
    console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeBoosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö boost –ø–∞–∫–µ—Ç–æ–≤`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π boost –ø–∞–∫–µ—Ç
  for (const boost of activeBoosts) {
    const dailyRate = parseFloat(boost.daily_rate || '0');
    const minuteRate = dailyRate / (24 * 60);
    const fiveMinuteIncome = minuteRate * 5;
    
    if (fiveMinuteIncome <= 0) continue;
    
    console.log(`\nBoost ${boost.boost_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${boost.user_id}:`);
    console.log(`  –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${dailyRate} TON/–¥–µ–Ω—å`);
    console.log(`  –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${fiveMinuteIncome.toFixed(8)} TON`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', boost.user_id)
      .single();
      
    if (!user) {
      console.log(`  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${boost.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    const currentBalance = parseFloat(user.balance_ton || '0');
    const newBalance = currentBalance + fiveMinuteIncome;
    
    await supabase
      .from('users')
      .update({ balance_ton: newBalance.toFixed(8) })
      .eq('id', boost.user_id);
      
    console.log(`  –ë–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(6)} ‚Üí ${newBalance.toFixed(6)} TON`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º total_earned
    const newTotalEarned = parseFloat(boost.total_earned || '0') + fiveMinuteIncome;
    await supabase
      .from('boost_purchases')
      .update({ total_earned: newTotalEarned.toFixed(8) })
      .eq('user_id', boost.user_id)
      .eq('boost_id', boost.boost_id);
      
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await supabase
      .from('transactions')
      .insert({
        user_id: boost.user_id,
        type: 'TON_BOOST_INCOME',
        amount_ton: fiveMinuteIncome.toFixed(8),
        amount_uni: '0',
        currency: 'TON',
        status: 'completed',
        description: `TON Boost ${boost.boost_id}: ${fiveMinuteIncome.toFixed(6)} TON`,
        source_user_id: boost.user_id,
        created_at: new Date().toISOString()
      });
      
    console.log(`  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TON_BOOST_INCOME —Å–æ–∑–¥–∞–Ω–∞`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
async function checkFinalResults() {
  console.log('\n=== –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã
  const { data: boosts } = await supabase
    .from('boost_purchases')
    .select('user_id, boost_id, amount, daily_rate, total_earned, status, is_active')
    .eq('status', 'confirmed');
    
  console.log('\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã:');
  if (boosts && boosts.length > 0) {
    boosts.forEach(boost => {
      console.log(`  User ${boost.user_id}: ${boost.boost_id} - ${boost.amount} TON, rate ${boost.daily_rate}, earned ${boost.total_earned}`);
    });
  } else {
    console.log('  Boost –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: transactions } = await supabase
    .from('transactions')
    .select('user_id, type, amount_ton, description')
    .eq('type', 'TON_BOOST_INCOME')
    .order('created_at', { ascending: false })
    .limit(5);
    
  console.log('\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON_BOOST_INCOME:');
  if (transactions && transactions.length > 0) {
    transactions.forEach(tx => {
      console.log(`  User ${tx.user_id}: ${tx.amount_ton} TON - ${tx.description}`);
    });
  } else {
    console.log('  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
  const { data: balances } = await supabase
    .from('users')
    .select('id, username, balance_ton')
    .in('id', [4, 29, 30]);
    
  console.log('\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã TON:');
  balances.forEach(user => {
    console.log(`  ${user.username} (ID ${user.id}): ${parseFloat(user.balance_ton).toFixed(6)} TON`);
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç
 */
function updateChecklist() {
  console.log('\n=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ï–ö–õ–ò–°–¢–ê ===');
  console.log('‚úÖ 1.1 –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ boost –ø–∞–∫–µ—Ç—ã —á–µ—Ä–µ–∑ SQL (–æ–±–æ–π—Ç–∏ RLS)');
  console.log('‚úÖ 1.2 –ò—Å–ø—Ä–∞–≤–∏—Ç—å tonBoostIncomeScheduler.ts –ª–æ–≥–∏–∫—É');
  console.log('‚úÖ 1.3 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é scheduler –≤ server/index.ts');
  console.log('‚úÖ 1.4 –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON_BOOST_INCOME');
  console.log('‚úÖ 1.5 –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ boost –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è');
  console.log('\nüéØ –ë–õ–û–ö 1 –ó–ê–í–ï–†–®–ï–ù: TON Boost —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  console.log('–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: 83% ‚Üí 95%');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function runRealTonBoostTest() {
  try {
    console.log('T65: –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON BOOST –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));
    
    await createBoostPackagesDirectly();
    await simulateTonBoostScheduler();
    await checkFinalResults();
    updateChecklist();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

runRealTonBoostTest();