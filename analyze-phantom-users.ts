import { supabase } from './core/supabase';

async function analyzePhantomUsers() {
  console.log('=== –ê–ù–ê–õ–ò–ó –§–ê–ù–¢–û–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===\n');

  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ton_farming_data
  const { data: tonFarmingAll } = await supabase
    .from('ton_farming_data')
    .select('*')
    .order('user_id');

  console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${tonFarmingAll?.length || 0}\n`);

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  if (tonFarmingAll && tonFarmingAll.length > 0) {
    const results = {
      existing: [] as any[],
      phantom: [] as any[],
      zeroBalance: [] as any[]
    };

    for (const farmData of tonFarmingAll) {
      const { data: user } = await supabase
        .from('users')
        .select('id, username, balance_ton')
        .eq('id', parseInt(farmData.user_id))
        .single();

      if (user) {
        results.existing.push({ ...farmData, username: user.username });
      } else {
        results.phantom.push(farmData);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      if (farmData.farming_balance === 0 || farmData.farming_balance === '0') {
        results.zeroBalance.push(farmData);
      }
    }

    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');
    console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${results.existing.length}`);
    console.log(`‚ùå –§–∞–Ω—Ç–æ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${results.phantom.length}`);
    console.log(`‚ö†Ô∏è  –ó–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º farming_balance: ${results.zeroBalance.length}`);

    console.log('\nüîç –î–ï–¢–ê–õ–ò –§–ê–ù–¢–û–ú–ù–´–• –ó–ê–ü–ò–°–ï–ô:');
    results.phantom.forEach(p => {
      console.log(`- User ${p.user_id}: –ø–∞–∫–µ—Ç ${p.boost_package_id}, –±–∞–ª–∞–Ω—Å ${p.farming_balance} TON`);
    });

    console.log('\n‚úÖ –†–ï–ê–õ–¨–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON BOOST:');
    results.existing.forEach(e => {
      console.log(`- User ${e.user_id} (@${e.username}): –ø–∞–∫–µ—Ç ${e.boost_package_id}, –±–∞–ª–∞–Ω—Å ${e.farming_balance} TON`);
    });

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ton_farming_data');
    console.log('2. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º farming_balance (–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ)');
    console.log('3. –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
    console.log('\n‚ö†Ô∏è  SQL –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ß–ò–°–¢–ö–ò (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ Supabase):');
    
    if (results.phantom.length > 0) {
      const phantomIds = results.phantom.map(p => `'${p.user_id}'`).join(', ');
      console.log(`\n-- –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:`);
      console.log(`DELETE FROM ton_farming_data WHERE user_id IN (${phantomIds});`);
    }
    
    if (results.zeroBalance.length > 0) {
      const zeroIds = results.zeroBalance.map(p => `'${p.user_id}'`).join(', ');
      console.log(`\n-- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º:`);
      console.log(`DELETE FROM ton_farming_data WHERE user_id IN (${zeroIds}) AND farming_balance = 0;`);
    }
  }
}

analyzePhantomUsers()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('–û—à–∏–±–∫–∞:', err);
    process.exit(1);
  });