#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è User 228 —á–µ—Ä–µ–∑ Supabase API
 */

require('dotenv').config();

async function compensateUser228() {
  console.log('üîç –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø USER 228 - –ò—Å–ø–æ–ª—å–∑—É–µ–º core/supabase.ts –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∏–∑ core –º–æ–¥—É–ª—è
    const { supabase } = await import('./core/supabase.js');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º User 228
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ User 228...');
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni, username')
      .eq('id', 228)
      .single();
      
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', userError.message);
      return;
    }
    
    if (!user) {
      console.log('‚ùå User 228 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üìä User 228: ${user.username}`);
    console.log(`   TON Balance: ${user.balance_ton}`);
    console.log(`   UNI Balance: ${user.balance_uni}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
    const currentBalance = parseFloat(user.balance_ton || '0');
    if (currentBalance >= 1.0) {
      console.log('\n‚ö†Ô∏è –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø');
      console.log(`   –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å ${currentBalance} TON`);
      return;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    const { data: existingCompensation } = await supabase
      .from('transactions')
      .select('id')
      .eq('user_id', 228)
      .like('description', '%d1077cd0%');
      
    if (existingCompensation && existingCompensation.length > 0) {
      console.log('\n‚úÖ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢');
      console.log(`   –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${existingCompensation[0].id}`);
      return;
    }
    
    // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    const { data: transaction, error: txError } = await supabase
      .from('transactions')
      .insert({
        user_id: 228,
        amount_ton: 1.0,
        amount_uni: 0,
        type: 'DEPOSIT',
        currency: 'TON',
        status: 'completed',
        description: 'Compensation for lost transaction d1077cd0bad69b623a06fe24dd848ba5ed5b25f98655a0ca51466005f53b8b2b',
        metadata: {
          compensation: true,
          original_hash: 'd1077cd0bad69b623a06fe24dd848ba5ed5b25f98655a0ca51466005f53b8b2b',
          compensation_date: new Date().toISOString(),
          manual_review: true
        }
      })
      .select()
      .single();
      
    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
      return;
    }
    
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
    
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log('3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
    const newBalance = currentBalance + 1.0;
    
    const { error: updateError } = await supabase
      .from('users')
      .update({ balance_ton: newBalance })
      .eq('id', 228);
      
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError.message);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await supabase.from('transactions').delete().eq('id', transaction.id);
      console.log('‚Ü©Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
      return;
    }
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${newBalance} TON`);
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const { data: finalCheck } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', 228)
      .single();
      
    console.log('\nüéâ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalCheck?.balance_ton} TON`);
    console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transaction.id}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

compensateUser228();