/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ—Ä–∞–±–æ—á–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function comprehensiveReferralDiagnosis() {
  console.log('=== –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===\n');
  
  try {
    // 1. –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ì–û –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ö–û–î–ê
    console.log('üîç 1. –ê–ù–ê–õ–ò–ó –ù–û–í–û–ì–û –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ö–û–î–ê');
    const newRefCode = 'REF_1752857057647_tqnd8f';
    
    const { data: newUser, error: newUserError } = await supabase
      .from('users')
      .select('*')
      .eq('ref_code', newRefCode)
      .single();
    
    if (newUserError) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –ù–ï –ù–ê–ô–î–ï–ù');
      console.log('   –û—à–∏–±–∫–∞:', newUserError.message);
      console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${newUser.id}`);
      console.log(`   Telegram ID: ${newUser.telegram_id}`);
      console.log(`   Username: ${newUser.username}`);
      console.log(`   Referred by: ${newUser.referred_by || '–ù–ï–¢'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(newUser.created_at).toLocaleString('ru-RU')}`);
    }
    
    // 2. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ï–†–ê
    console.log('\nüîó 2. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ï–†–ê');
    const referrerCode = 'REF_1750079004411_nddfp2';
    
    const { data: referrer, error: referrerError } = await supabase
      .from('users')
      .select('*')
      .eq('ref_code', referrerCode)
      .single();
    
    if (referrerError) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Ñ–µ—Ä–µ—Ä –ù–ï –ù–ê–ô–î–ï–ù');
      console.log('   –û—à–∏–±–∫–∞:', referrerError.message);
    } else {
      console.log('‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${referrer.id} (DimaOsadchuk)`);
      console.log(`   Telegram ID: ${referrer.telegram_id}`);
      console.log(`   Username: ${referrer.username}`);
    }
    
    // 3. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô
    console.log('\nüîç 3. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô –í –ë–î');
    
    const { data: referrals, error: referralsError } = await supabase
      .from('referrals')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (referralsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', referralsError.message);
    } else {
      console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${referrals.length}`);
      
      if (referrals.length > 0) {
        console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏:');
        referrals.forEach((ref, index) => {
          const time = new Date(ref.created_at).toLocaleString('ru-RU');
          console.log(`${index + 1}. User ${ref.user_id} -> Referrer ${ref.referrer_id}, –í—Ä–µ–º—è: ${time}`);
        });
      }
    }
    
    // 4. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô
    console.log('\nüë• 4. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô');
    
    const { data: recentUsers, error: recentUsersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, ref_code, referred_by, created_at')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (recentUsersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', recentUsersError.message);
    } else {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
      recentUsers.forEach((user, index) => {
        const hasReferral = user.referred_by ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç';
        const time = new Date(user.created_at).toLocaleString('ru-RU');
        console.log(`${index + 1}. ID: ${user.id}, TG: ${user.telegram_id}, –†–µ—Ñ–µ—Ä–∞–ª: ${hasReferral}, –í—Ä–µ–º—è: ${time}`);
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const usersWithReferrals = recentUsers.filter(u => u.referred_by).length;
      const successRate = (usersWithReferrals / recentUsers.length) * 100;
      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${usersWithReferrals} –∏–∑ ${recentUsers.length} –∏–º–µ—é—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ (${successRate.toFixed(1)}%)`);
    }
    
    // 5. –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    console.log('\nüîç 5. –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    
    // –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
    
    const { data: recentRegistrations, error: recentRegError } = await supabase
      .from('users')
      .select('*')
      .gte('created_at', thirtyMinutesAgo)
      .order('created_at', { ascending: false });
    
    if (recentRegError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', recentRegError.message);
    } else {
      console.log(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç: ${recentRegistrations.length}`);
      
      if (recentRegistrations.length > 0) {
        console.log('–ù–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
        recentRegistrations.forEach((user, index) => {
          const time = new Date(user.created_at).toLocaleString('ru-RU');
          const hasReferral = user.referred_by ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç';
          console.log(`${index + 1}. ID: ${user.id}, TG: ${user.telegram_id}, –†–µ—Ñ–µ—Ä–∞–ª: ${hasReferral}, –í—Ä–µ–º—è: ${time}`);
        });
      }
    }
    
    // 6. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•
    console.log('\nüîç 6. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by, –Ω–æ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ referrals
    const { data: usersWithRefBy, error: refByError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .not('referred_by', 'is', null)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (refByError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by:', refByError.message);
    } else {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º referred_by: ${usersWithRefBy.length}`);
      
      if (usersWithRefBy.length > 0) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by:');
        for (const user of usersWithRefBy) {
          const time = new Date(user.created_at).toLocaleString('ru-RU');
          console.log(`   ID: ${user.id}, referred_by: ${user.referred_by}, –í—Ä–µ–º—è: ${time}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ referrals
          const { data: refRecord, error: refRecordError } = await supabase
            .from('referrals')
            .select('*')
            .eq('user_id', user.id)
            .single();
          
          if (refRecordError) {
            console.log(`   ‚ùå –ù–ï–¢ –∑–∞–ø–∏—Å–∏ –≤ referrals –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
          } else {
            console.log(`   ‚úÖ –ï—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ referrals: referrer_id=${refRecord.referrer_id}`);
          }
        }
      }
    }
    
    // 7. –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–• –ü–†–û–ë–õ–ï–ú
    console.log('\nüèóÔ∏è 7. –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–• –ü–†–û–ë–õ–ï–ú');
    console.log('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('1. JWT –æ—à–∏–±–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç processReferral()');
    console.log('2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ production');
    console.log('3. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î');
    console.log('4. –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π');
    
    // 8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï
    console.log('\nüí° 8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï');
    console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
    console.log('1. –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    console.log('2. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ processReferral() –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('3. –°–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º referred_by');
    console.log('4. –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ReferralService');
    console.log('5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ referrals');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

comprehensiveReferralDiagnosis();