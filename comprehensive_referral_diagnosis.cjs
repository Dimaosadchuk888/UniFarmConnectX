#!/usr/bin/env node
/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
console.log('===============================================\n');

function analyzeAuthServiceCode() {
  console.log('1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–î–ê AUTH SERVICE:');
  console.log('----------------------------');
  
  try {
    const authServicePath = path.join(process.cwd(), 'modules/auth/service.ts');
    const content = fs.readFileSync(authServicePath, 'utf8');
    
    // –ò—â–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registerMethods = [];
    const methodPattern = /(register\w*|create\w*|findOrCreate\w*)\s*\(/g;
    let match;
    while ((match = methodPattern.exec(content)) !== null) {
      registerMethods.push(match[1]);
    }
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerMethods);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã processReferral
    const processReferralCalls = content.match(/processReferral\w*\(/g) || [];
    console.log('üìã –í—ã–∑–æ–≤—ã processReferral:', processReferralCalls.length, processReferralCalls);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ref_by
    const refByUsage = [];
    const lines = content.split('\n');
    lines.forEach((line, index) => {
      if (line.includes('ref_by') || line.includes('refCode')) {
        refByUsage.push({ line: index + 1, content: line.trim() });
      }
    });
    
    console.log('üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ref_by/refCode –Ω–∞–π–¥–µ–Ω–æ –≤', refByUsage.length, '–º–µ—Å—Ç–∞—Ö:');
    refByUsage.slice(0, 5).forEach(item => {
      console.log(`   –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤
    console.log('\nüîó –ê–ù–ê–õ–ò–ó –¶–ï–ü–û–ß–ö–ò –í–´–ó–û–í–û–í:');
    const hasRegisterDirectFromTelegram = content.includes('registerDirectFromTelegramUser');
    const hasFindOrCreateFromTelegram = content.includes('findOrCreateFromTelegram');
    const hasCreateUser = content.includes('createUser(');
    
    console.log(`   registerDirectFromTelegramUser: ${hasRegisterDirectFromTelegram ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    console.log(`   findOrCreateFromTelegram: ${hasFindOrCreateFromTelegram ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    console.log(`   createUser: ${hasCreateUser ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ auth service:', error.message);
  }
}

function analyzeReferralServiceCode() {
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–î–ê REFERRAL SERVICE:');
  console.log('-------------------------------');
  
  try {
    const referralServicePath = path.join(process.cwd(), 'modules/referral/service.ts');
    
    if (!fs.existsSync(referralServicePath)) {
      console.log('‚ùå –§–∞–π–ª modules/referral/service.ts –ù–ï –ù–ê–ô–î–ï–ù');
      return;
    }
    
    const content = fs.readFileSync(referralServicePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤
    const methods = ['processReferral', 'buildReferrerChain', 'distributeReferralRewards'];
    methods.forEach(method => {
      const found = content.includes(method);
      console.log(`   ${method}: ${found ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    });
    
    // –ò—â–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    const tablesUsed = [];
    if (content.includes('users')) tablesUsed.push('users');
    if (content.includes('referrals')) tablesUsed.push('referrals');
    if (content.includes('referral_earnings')) tablesUsed.push('referral_earnings');
    
    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tablesUsed);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ referral service:', error.message);
  }
}

function analyzeRouterAndControllers() {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–û–£–¢–ï–†–û–í –ò –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í:');
  console.log('----------------------------------');
  
  try {
    // –ò—â–µ–º auth routes
    const authRoutesPath = path.join(process.cwd(), 'modules/auth/routes.ts');
    const authControllerPath = path.join(process.cwd(), 'modules/auth/controller.ts');
    
    [
      { name: 'Auth Routes', path: authRoutesPath },
      { name: 'Auth Controller', path: authControllerPath }
    ].forEach(({ name, path: filePath }) => {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ò—â–µ–º endpoints —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        const endpoints = content.match(/\.(post|get|put|patch)\s*\(['"`][^'"`]*['"`]/g) || [];
        console.log(`üìã ${name} endpoints:`, endpoints.slice(0, 3));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const hasRefByHandling = content.includes('ref_by') || content.includes('refCode');
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∫–∞ ref_by: ${hasRefByHandling ? '‚úÖ –ù–ê–ô–î–ï–ù–ê' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
        
      } else {
        console.log(`‚ùå ${name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤:', error.message);
  }
}

function analyzeSupabaseConfiguration() {
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò SUPABASE:');
  console.log('--------------------------------');
  
  try {
    // –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase
    const supabaseConfigPaths = [
      'core/supabase.ts',
      'config/supabase.ts',
      'lib/supabase.ts'
    ];
    
    let configFound = false;
    supabaseConfigPaths.forEach(configPath => {
      const fullPath = path.join(process.cwd(), configPath);
      if (fs.existsSync(fullPath)) {
        console.log(`‚úÖ Supabase config –Ω–∞–π–¥–µ–Ω: ${configPath}`);
        configFound = true;
        
        const content = fs.readFileSync(fullPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const hasCreateClient = content.includes('createClient');
        const hasAuth = content.includes('auth');
        const hasRLS = content.includes('RLS') || content.includes('row_level_security');
        
        console.log(`   createClient: ${hasCreateClient ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Auth setup: ${hasAuth ? '‚úÖ' : '‚ùå'}`);
        console.log(`   RLS references: ${hasRLS ? '‚úÖ' : '‚ùå'}`);
      }
    });
    
    if (!configFound) {
      console.log('‚ùå Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Supabase:', error.message);
  }
}

function analyzeDatabaseSchema() {
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
  console.log('----------------------------');
  
  try {
    // –ò—â–µ–º —Ç–∏–ø—ã/—Å—Ö–µ–º—ã –ë–î
    const schemaPaths = [
      'types/database.ts',
      'shared/schema.ts',
      'types/supabase.ts'
    ];
    
    let schemaFound = false;
    schemaPaths.forEach(schemaPath => {
      const fullPath = path.join(process.cwd(), schemaPath);
      if (fs.existsSync(fullPath)) {
        console.log(`‚úÖ –°—Ö–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞: ${schemaPath}`);
        schemaFound = true;
        
        const content = fs.readFileSync(fullPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        const tables = ['users', 'referrals', 'referral_earnings'];
        tables.forEach(table => {
          const found = content.includes(table);
          console.log(`   –¢–∞–±–ª–∏—Ü–∞ ${table}: ${found ? '‚úÖ' : '‚ùå'}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤
        const fields = ['referred_by', 'ref_code', 'inviter_id', 'user_id'];
        fields.forEach(field => {
          const found = content.includes(field);
          console.log(`   –ü–æ–ª–µ ${field}: ${found ? '‚úÖ' : '‚ùå'}`);
        });
      }
    });
    
    if (!schemaFound) {
      console.log('‚ùå –°—Ö–µ–º–∞ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç–∞—Ö');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã:', error.message);
  }
}

function analyzeMiddleware() {
  console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó MIDDLEWARE:');
  console.log('--------------------');
  
  try {
    // –ò—â–µ–º middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const middlewarePaths = [
      'server/middleware/telegramAuth.ts',
      'server/middleware/auth.ts',
      'utils/telegram.ts'
    ];
    
    middlewarePaths.forEach(middlewarePath => {
      const fullPath = path.join(process.cwd(), middlewarePath);
      if (fs.existsSync(fullPath)) {
        console.log(`‚úÖ Middleware –Ω–∞–π–¥–µ–Ω: ${middlewarePath}`);
        
        const content = fs.readFileSync(fullPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Telegram –¥–∞–Ω–Ω—ã—Ö
        const hasInitData = content.includes('initData');
        const hasHmac = content.includes('hmac') || content.includes('HMAC');
        const hasRefBy = content.includes('ref_by');
        
        console.log(`   InitData –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${hasInitData ? '‚úÖ' : '‚ùå'}`);
        console.log(`   HMAC –≤–∞–ª–∏–¥–∞—Ü–∏—è: ${hasHmac ? '‚úÖ' : '‚ùå'}`);
        console.log(`   ref_by –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: ${hasRefBy ? '‚úÖ' : '‚ùå'}`);
      }
    });
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ middleware:', error.message);
  }
}

function generateDiagnosticSummary() {
  console.log('\n7Ô∏è‚É£ –ì–ò–ü–û–¢–ï–ó–´ –û –ü–†–û–ë–õ–ï–ú–ê–•:');
  console.log('------------------------');
  
  console.log('üîç –í–û–ó–ú–û–ñ–ù–´–ï –ö–û–†–ù–ï–í–´–ï –ü–†–ò–ß–ò–ù–´:');
  console.log('1. üö´ Middleware –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç ref_by –∏–∑ Telegram initData');
  console.log('2. üîÑ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ (auth ‚Üí referral)');
  console.log('3. üóÑÔ∏è Supabase RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç INSERT –≤ —Ç–∞–±–ª–∏—Ü—É referrals');
  console.log('4. üé≠ JWT payload –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è referral');
  console.log('5. ‚ö° Race condition –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º user –∏ referral –∑–∞–ø–∏—Å–µ–π');
  console.log('6. üîê –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ referrals –¥–ª—è auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('7. üìä –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î - –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π');
  console.log('8. üîó processReferral –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ INSERT');
  
  console.log('\nüß™ –ü–õ–ê–ù –£–ì–õ–£–ë–õ–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Supabase Dashboard –Ω–∞ RLS policies');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ referrals –∑–∞–ø–∏—Å–µ–π –≤—Ä—É—á–Ω—É—é');
  console.log('4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Network tab –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  console.log('5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT payload —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
  console.log('6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º RLS');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('üöÄ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...\n');

analyzeAuthServiceCode();
analyzeReferralServiceCode();
analyzeRouterAndControllers();
analyzeSupabaseConfiguration();
analyzeDatabaseSchema();
analyzeMiddleware();
generateDiagnosticSummary();

console.log('\nüìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—É—é –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã');