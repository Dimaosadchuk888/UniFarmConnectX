// Comprehensive –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const http = require('http');
const jwt = require('jsonwebtoken');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
const token = jwt.sign(
  { userId: 184, telegram_id: 184, username: 'test' },
  process.env.JWT_SECRET || 'fallback_secret',
  { expiresIn: '1h' }
);

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => responseData += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function comprehensiveReferralDiagnosis() {
  console.log('üîç COMPREHENSIVE –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(70));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 186-190
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 186-190:');
    console.log('-'.repeat(50));
    
    console.log('üéØ –ì–ò–ü–û–¢–ï–ó–ê: –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç referred_by = 184');
    console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É distributeReferralRewards() —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUserIds = [186, 187, 188, 189, 190];
    let testUsersFound = 0;
    
    for (const userId of testUserIds) {
      try {
        const user = await makeRequest(`/api/v2/user/${userId}`);
        if (user.data.success) {
          testUsersFound++;
          console.log(`‚úÖ User ${userId}: ${user.data.data.username || 'No username'}`);
          console.log(`   referred_by: ${user.data.data.referred_by || 'null'}`);
          console.log(`   telegram_id: ${user.data.data.telegram_id || 'null'}`);
        } else {
          console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
        }
      } catch (error) {
        console.log(`‚ùå User ${userId}: –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê`);
      }
    }
    
    console.log(`\nüìä –ù–ê–ô–î–ï–ù–û: ${testUsersFound} –∏–∑ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 2. –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(50));
    
    const transactions = await makeRequest('/api/v2/transactions?limit=50');
    if (transactions.data.success) {
      const referralTxs = transactions.data.data.transactions
        .filter(t => t.type === 'REFERRAL_REWARD');
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${referralTxs.length} REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      const sourceAnalysis = {};
      referralTxs.forEach(tx => {
        const match = tx.description.match(/from User (\d+):/);
        if (match) {
          const sourceId = match[1];
          if (!sourceAnalysis[sourceId]) {
            sourceAnalysis[sourceId] = { count: 0, totalUNI: 0, totalTON: 0 };
          }
          sourceAnalysis[sourceId].count++;
          if (tx.currency === 'UNI') {
            sourceAnalysis[sourceId].totalUNI += parseFloat(tx.amount);
          } else if (tx.currency === 'TON') {
            sourceAnalysis[sourceId].totalTON += parseFloat(tx.amount);
          }
        }
      });
      
      console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:');
      Object.entries(sourceAnalysis).forEach(([userId, stats]) => {
        console.log(`  User ${userId}: ${stats.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        console.log(`    UNI: ${stats.totalUNI.toFixed(8)}`);
        console.log(`    TON: ${stats.totalTON.toFixed(8)}`);
      });
      
      // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      console.log('\n‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:');
      const last5Txs = referralTxs.slice(0, 5);
      last5Txs.forEach((tx, i) => {
        const date = new Date(tx.created_at);
        console.log(`  ${i+1}. ${date.toLocaleTimeString()}: ${tx.description}`);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º buildReferrerChain –ª–æ–≥–∏–∫—É
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó BUILDREFERRERCHAIN():');
    console.log('-'.repeat(50));
    
    console.log('üîç buildReferrerChain() –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º referred_by:');
    console.log('   1. –ü–æ–ª—É—á–∞–µ—Ç User ID –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (186-190)');
    console.log('   2. –ò—â–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users: SELECT * WHERE id = sourceUserId');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ referred_by');
    console.log('   4. –ï—Å–ª–∏ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ü–µ–ø–æ—á–∫—É');
    console.log('   5. –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–æ 20 —É—Ä–æ–≤–Ω–µ–π');
    console.log('');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('-'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const realUserIds = [1, 2, 3, 74, 184];
    
    for (const userId of realUserIds) {
      try {
        const user = await makeRequest(`/api/v2/user/${userId}`);
        if (user.data.success) {
          console.log(`‚úÖ User ${userId}: ${user.data.data.username || 'No username'}`);
          console.log(`   referred_by: ${user.data.data.referred_by || 'null'}`);
          console.log(`   ref_code: ${user.data.data.ref_code || 'null'}`);
        } else {
          console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
        }
      } catch (error) {
        console.log(`‚ùå User ${userId}: –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê`);
      }
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó:');
    console.log('-'.repeat(50));
    
    console.log('üéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
    console.log('   1. –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 186-190 –∏–º–µ—é—Ç referred_by = 184');
    console.log('   2. –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç referred_by = null');
    console.log('   3. buildReferrerChain() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º referred_by');
    console.log('   4. processReferralInline() –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç referred_by –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏');
    console.log('');
    
    console.log('üîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ processReferralInline() (—Å—Ç—Ä–æ–∫–∞ 84)');
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Supabase RLS');
    console.log('   ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

comprehensiveReferralDiagnosis();