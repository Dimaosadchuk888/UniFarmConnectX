#!/usr/bin/env node

/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

const { createClient } = require('@supabase/supabase-js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase (–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY || 'your-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç COMPREHENSIVE –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
console.log('======================================================================\n');

async function comprehensiveReferralDiagnosis() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 186-190
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 186-190:');
    console.log('--------------------------------------------------');
    console.log('üéØ –ì–ò–ü–û–¢–ï–ó–ê: –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç referred_by = 184');
    console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É distributeReferralRewards() —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
    
    const testUsers = [186, 187, 188, 189, 190];
    let foundUsers = 0;
    
    for (const userId of testUsers) {
      try {
        const response = await fetch(`/api/v2/wallet/balance?user_id=${userId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('unifarm_jwt_token') || 'test'}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ User ${userId}: –ù–ê–ô–î–ï–ù - ${JSON.stringify(data.data)}`);
          foundUsers++;
        } else {
          console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
        }
      } catch (error) {
        console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }
    
    console.log(`\nüìä –ù–ê–ô–î–ï–ù–û: ${foundUsers} –∏–∑ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('--------------------------------------------------');
    
    try {
      const { data: transactions, error } = await supabase
        .from('transactions')
        .select('*')
        .eq('type', 'REFERRAL_REWARD')
        .order('created_at', { ascending: false })
        .limit(50);

      if (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
        return;
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transactions.length} REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n`);
      
      if (transactions.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏–∑ metadata
        const sourceStats = {};
        const timeAnalysis = [];
        
        for (const tx of transactions) {
          const sourceUserId = tx.metadata?.source_user_id;
          if (sourceUserId) {
            if (!sourceStats[sourceUserId]) {
              sourceStats[sourceUserId] = {
                count: 0,
                totalUni: 0,
                totalTon: 0
              };
            }
            sourceStats[sourceUserId].count++;
            sourceStats[sourceUserId].totalUni += tx.amount_uni || 0;
            sourceStats[sourceUserId].totalTon += tx.amount_ton || 0;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          if (timeAnalysis.length < 5) {
            timeAnalysis.push({
              time: new Date(tx.created_at).toLocaleTimeString(),
              description: tx.description || 'N/A',
              amount_uni: tx.amount_uni || 0,
              metadata: tx.metadata
            });
          }
        }
        
        console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:');
        for (const [sourceId, stats] of Object.entries(sourceStats)) {
          console.log(`  User ${sourceId}: ${stats.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          if (stats.totalUni > 0) console.log(`    UNI: ${stats.totalUni}`);
          if (stats.totalTon > 0) console.log(`    TON: ${stats.totalTon}`);
        }
        
        console.log('\n‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:');
        timeAnalysis.forEach((tx, index) => {
          console.log(`  ${index + 1}. ${tx.time}: ${tx.description}`);
        });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    }

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º buildReferrerChain()
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó BUILDREFERRERCHAIN():');
    console.log('--------------------------------------------------');
    console.log('üîç buildReferrerChain() –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º referred_by:');
    console.log('   1. –ü–æ–ª—É—á–∞–µ—Ç User ID –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (186-190)');
    console.log('   2. –ò—â–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users: SELECT * WHERE id = sourceUserId');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ referred_by');
    console.log('   4. –ï—Å–ª–∏ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ü–µ–ø–æ—á–∫—É');
    console.log('   5. –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–æ 20 —É—Ä–æ–≤–Ω–µ–π\n');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('--------------------------------------------------');
    
    const realUsers = [1, 2, 3, 74, 184];
    for (const userId of realUsers) {
      try {
        const response = await fetch(`/api/v2/wallet/balance?user_id=${userId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('unifarm_jwt_token') || 'test'}`
          }
        });
        
        if (response.ok) {
          console.log(`‚úÖ User ${userId}: –ù–ê–ô–î–ï–ù`);
        } else {
          console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
        }
      } catch (error) {
        console.log(`‚ùå User ${userId}: –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó:');
    console.log('--------------------------------------------------');
    console.log('üéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
    console.log('   1. –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 186-190 –∏–º–µ—é—Ç referred_by = 184');
    console.log('   2. –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç referred_by = null');
    console.log('   3. buildReferrerChain() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º referred_by');
    console.log('   4. processReferralInline() –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç referred_by –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏');
    console.log('\nüîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ processReferralInline() (—Å—Ç—Ä–æ–∫–∞ 84)');
    console.log('   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Supabase RLS');
    console.log('   ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
if (typeof window !== 'undefined') {
  // Browser environment
  comprehensiveReferralDiagnosis();
} else {
  // Node.js environment
  console.log('‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ comprehensiveReferralDiagnosis –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞');
}