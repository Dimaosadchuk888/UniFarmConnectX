import { supabase } from './core/supabaseClient';

async function checkWorkingTonDeposits() {
  console.log('üîç –ü–û–ò–°–ö –†–ê–ë–û–¢–ê–Æ–©–ò–• TON –î–ï–ü–û–ó–ò–¢–û–í –í –°–ò–°–¢–ï–ú–ï');
  console.log('='.repeat(60));

  try {
    // 1. –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –°–ò–°–¢–ï–ú–ï:');
    const { data: tonTransactions, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .or('currency.eq.TON,type.ilike.%TON%,description.ilike.%TON%')
      .order('created_at', { ascending: false })
      .limit(50);

    if (!tonError && tonTransactions) {
      console.log(`üíé –ù–∞–π–¥–µ–Ω–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
      
      if (tonTransactions.length > 0) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        const byType: { [key: string]: any[] } = {};
        tonTransactions.forEach(tx => {
          const type = tx.type || 'UNKNOWN';
          if (!byType[type]) byType[type] = [];
          byType[type].push(tx);
        });

        console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:');
        Object.keys(byType).forEach(type => {
          const txs = byType[type];
          console.log(`   ${type}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
          txs.slice(0, 2).forEach((tx, idx) => {
            console.log(`      ${idx + 1}. User ${tx.user_id}: ${tx.amount_ton || tx.amount || '0'} TON`);
            console.log(`         [${tx.created_at}] ${(tx.description || '').substring(0, 60)}...`);
          });
        });

        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ø–æ–∑–∏—Ç—ã
        const deposits = tonTransactions.filter(tx => 
          tx.description?.toLowerCase().includes('deposit') ||
          tx.description?.toLowerCase().includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ') ||
          tx.type?.includes('DEPOSIT')
        );

        if (deposits.length > 0) {
          console.log('\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï TON –î–ï–ü–û–ó–ò–¢–´:');
          deposits.forEach((tx, idx) => {
            console.log(`   ${idx + 1}. User ${tx.user_id}: ${tx.amount_ton || tx.amount || '0'} TON`);
            console.log(`      [${tx.created_at}] ${tx.type}`);
            console.log(`      ${tx.description}`);
            console.log(`      Status: ${tx.status || 'unknown'}`);
            console.log('      ---');
          });
        } else {
          console.log('\n‚ùå –ù–ò –û–î–ù–û–ì–û TON –î–ï–ü–û–ó–ò–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–û');
        }
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º TON –±–∞–ª–∞–Ω—Å–æ–º
    console.log('\n2Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ú TON –ë–ê–õ–ê–ù–°–û–ú:');
    const { data: usersWithTon, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, created_at')
      .gt('balance_ton', 0)
      .order('balance_ton', { ascending: false })
      .limit(10);

    if (!usersError && usersWithTon) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithTon.length}`);
      usersWithTon.forEach((user, idx) => {
        console.log(`   ${idx + 1}. User ${user.id} (@${user.username}): ${user.balance_ton} TON`);
        console.log(`      Telegram ID: ${user.telegram_id}, Created: ${user.created_at}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (usersWithTon.length > 0) {
        const userId = usersWithTon[0].id;
        console.log(`\nüîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${usersWithTon[0].username}):`);
        
        const { data: userTx, error: userTxError } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })
          .limit(10);

        if (!userTxError && userTx) {
          userTx.forEach((tx, idx) => {
            console.log(`      ${idx + 1}. [${tx.created_at}] ${tx.type}`);
            console.log(`         Amount: ${tx.amount_ton || tx.amount_uni || tx.amount || '0'}`);
            console.log(`         Currency: ${tx.currency || 'unknown'}`);
            console.log(`         Description: ${(tx.description || '').substring(0, 50)}...`);
          });
        }
      }
    }

    // 3. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ TON
    console.log('\n3Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø TON –ë–ê–õ–ê–ù–°–û–í:');
    const { data: recentTonTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .not('amount_ton', 'is', null)
      .gt('amount_ton', 0)
      .order('created_at', { ascending: false })
      .limit(20);

    if (!recentError && recentTonTx) {
      console.log(`‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON –æ–ø–µ—Ä–∞—Ü–∏–∏: ${recentTonTx.length}`);
      recentTonTx.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. User ${tx.user_id}: +${tx.amount_ton} TON`);
        console.log(`      [${tx.created_at}] ${tx.type}`);
        console.log(`      ${(tx.description || '').substring(0, 50)}...`);
      });
    }

    // 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 253 –µ—â–µ —Ä–∞–∑
    console.log('\n4Ô∏è‚É£ –ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 253:');
    const { data: user253Again, error: user253Error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 253)
      .single();

    if (!user253Error && user253Again) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 253 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:`);
      console.log(`   Username: ${user253Again.username}`);
      console.log(`   Telegram ID: ${user253Again.telegram_id}`);
      console.log(`   TON Balance: ${user253Again.balance_ton}`);
      console.log(`   UNI Balance: ${user253Again.balance_uni}`);
      console.log(`   Created: ${user253Again.created_at}`);
      console.log(`   Updated: ${user253Again.updated_at || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    }

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error);
  }
}

checkWorkingTonDeposits().catch(console.error);