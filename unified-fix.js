/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è UniFarm
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * 1. –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Neon
 * 2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è Telegram Mini App
 * 3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Å—Å–∏–π –∏ cookies
 * 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
 * 
 * –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ server/index.ts:
 * import './unified-fix';
 */

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
console.log('[UniFarm Fix] üõ†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Unix —Å–æ–∫–µ—Ç—ã –¥–ª—è PostgreSQL
process.env.PGHOST = process.env.PGHOST || 'ep-misty-brook-a4dkea48.us-east-1.aws.neon.tech';
process.env.PGSSLMODE = 'prefer';
process.env.PGSOCKET = '';
process.env.PGCONNECT_TIMEOUT = '10';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';

console.log('[UniFarm Fix] ‚úÖ –§–∏–∫—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏–º–µ–Ω–µ–Ω');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è Express middleware
module.exports = {
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Express
   * @param {Object} app - –≠–∫–∑–µ–º–ø–ª—è—Ä Express
   * @param {Object} storage - –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Object} - –≠–∫–∑–µ–º–ø–ª—è—Ä Express —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
   */
  applyFixes: function(app, storage) {
    if (!app) {
      throw new Error('[UniFarm Fix] –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express');
    }
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
      const crypto = require('crypto');
      const session = require('express-session');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (!process.env.TELEGRAM_BOT_TOKEN) {
        console.warn('[UniFarm Fix] ‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        console.warn('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö Telegram –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }
      
      // ---------- CORS MIDDLEWARE ----------
      const corsMiddleware = (req, res, next) => {
        // –ü–æ–ª—É—á–∞–µ–º origin –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const origin = req.headers.origin;
        
        // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const allowedOrigins = [
          'https://web.telegram.org',
          'https://t.me',
          'https://telegram.org',
          'https://telegram.me'
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ origin
        if (origin) {
          // –ï—Å–ª–∏ origin –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          if (allowedOrigins.includes(origin) || process.env.NODE_ENV === 'development') {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π origin –≤–º–µ—Å—Ç–æ * –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ credentials
            res.header('Access-Control-Allow-Origin', origin);
            // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
            res.header('Access-Control-Allow-Credentials', 'true');
          } else {
            // –í production —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π origin —á–µ—Ä–µ–∑ wildcard
            // –Ω–æ –±–µ–∑ credentials (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            res.header('Access-Control-Allow-Origin', '*');
          }
        } else {
          // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ origin
          res.header('Access-Control-Allow-Origin', '*');
        }
        
        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
        res.header('Access-Control-Allow-Methods', 'GET, PUT, POST, DELETE, OPTIONS');
        res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Telegram-Init-Data, X-Telegram-Init-Data, Telegram-Data, X-Telegram-Data, X-Telegram-Auth, X-Telegram-User-Id, X-Telegram-Start-Param, X-Telegram-Platform, X-Telegram-Data-Source, X-Development-Mode, X-Development-User-Id');
        
        // –î–æ–±–∞–≤–ª—è–µ–º Content-Security-Policy –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram
        res.header('Content-Security-Policy', "default-src * 'self' data: blob: 'unsafe-inline' 'unsafe-eval'");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        res.header('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
        res.header('Pragma', 'no-cache');
        res.header('Expires', '0');
        res.header('Surrogate-Control', 'no-store');
        
        // –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ OPTIONS –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
        if (req.method === 'OPTIONS') {
          return res.sendStatus(204);
        }
        
        next();
      };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º CORS middleware
      app.use(corsMiddleware);
      console.log('[UniFarm Fix] ‚úÖ CORS middleware —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      
      // ---------- SESSIONS MIDDLEWARE ----------
      const sessionOptions = {
        secret: process.env.SESSION_SECRET || 'uni-farm-telegram-mini-app-secret',
        resave: false,
        saveUninitialized: false,
        cookie: {
          secure: process.env.NODE_ENV === 'production',
          httpOnly: true,
          sameSite: 'none', // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Mini App
          maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
        }
      };
      
      // –í production —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–æ–∫—Å–∏
      if (process.env.NODE_ENV === 'production') {
        app.set('trust proxy', 1);
        sessionOptions.cookie.secure = true;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º store, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (process.env.DATABASE_URL) {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å connect-pg-simple –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
          const pgSession = require('connect-pg-simple');
          const pgSessionStore = pgSession(session);
          
          const { Pool } = require('pg');
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL,
            ssl: {
              rejectUnauthorized: false // –î–ª—è Neon DB
            }
          });
          
          // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
          pool.query(`
            CREATE TABLE IF NOT EXISTS sessions (
              sid VARCHAR NOT NULL PRIMARY KEY,
              sess JSON NOT NULL,
              expire TIMESTAMP(6) NOT NULL
            )
          `).catch(error => {
            console.error('[UniFarm Fix] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã sessions:', error.message);
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –æ–ø—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
          sessionOptions.store = new pgSessionStore({
            pool,
            tableName: 'sessions'
          });
          
          console.log('[UniFarm Fix] ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ PostgreSQL');
        } catch (error) {
          console.warn('[UniFarm Fix] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π:', error.message);
          console.warn('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStore (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)');
        }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware —Å–µ—Å—Å–∏–π
      app.use(session(sessionOptions));
      console.log('[UniFarm Fix] ‚úÖ Sessions middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
      app.use((req, res, next) => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!req.session.user) {
          req.session.user = null;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        req.isAuthenticated = function() {
          return !!req.session.user;
        };
        
        req.login = function(user) {
          req.session.user = user;
        };
        
        req.logout = function() {
          req.session.user = null;
        };
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        next();
      });
      
      // ---------- TELEGRAM INTEGRATION ----------
      // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
      const telegramAuthMiddleware = (req, res, next) => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
          const initData = req.body.initData || 
                          req.headers['telegram-init-data'] || 
                          req.headers['x-telegram-init-data'];
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          if (!initData) {
            return next();
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
          // (–ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
          try {
            const urlParams = new URLSearchParams(initData);
            const userStr = urlParams.get('user');
            
            if (userStr) {
              const user = JSON.parse(userStr);
              req.telegramUser = user;
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º initData –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –ø–æ–∑–∂–µ
              req.telegramInitData = initData;
              
              // –ü–æ–ª—É—á–∞–µ–º startParam (–¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
              const startParam = urlParams.get('start_param');
              if (startParam) {
                req.telegramStartParam = startParam;
              }
            }
          } catch (error) {
            console.error('[UniFarm Fix] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', error.message);
          }
          
          next();
        } catch (error) {
          console.error('[UniFarm Fix] ‚ùå –û—à–∏–±–∫–∞ –≤ telegramAuthMiddleware:', error.message);
          next();
        }
      };
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
      app.use('/api', telegramAuthMiddleware);
      console.log('[UniFarm Fix] ‚úÖ Telegram Auth middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      
      // ---------- –ú–ê–†–®–†–£–¢–´ –î–õ–Ø TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ----------
      // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ Telegram
      app.post('/api/telegram/auth', async (req, res) => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (!req.telegramUser) {
            return res.status(400).json({
              success: false,
              error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram'
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
          let signatureValid = true;
          if (process.env.TELEGRAM_BOT_TOKEN && req.telegramInitData) {
            signatureValid = validateTelegramInitData(req.telegramInitData, process.env.TELEGRAM_BOT_TOKEN);
            
            if (!signatureValid && process.env.NODE_ENV !== 'development') {
              return res.status(403).json({
                success: false,
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö Telegram'
              });
            }
          }
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          if (storage && typeof storage.getUserByTelegramId === 'function') {
            try {
              // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
              let user = await storage.getUserByTelegramId(req.telegramUser.id.toString());
              
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
              if (!user) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π ID
                const guestId = crypto.randomUUID();
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await storage.createUser({
                  username: req.telegramUser.username || `user_${req.telegramUser.id}`,
                  telegram_id: req.telegramUser.id.toString(),
                  first_name: req.telegramUser.first_name,
                  last_name: req.telegramUser.last_name || '',
                  guest_id: guestId,
                  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                  parent_ref_code: req.telegramStartParam || null
                });
                
                console.log(`[UniFarm Fix] ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${user.id}`);
              } else {
                console.log(`[UniFarm Fix] ‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${user.id}`);
              }
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
              if (req.session) {
                req.session.userId = user.id;
                req.session.user = {
                  id: user.id,
                  username: user.username,
                  telegram_id: user.telegram_id
                };
              }
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              return res.json({
                success: true,
                data: {
                  user_id: user.id,
                  username: user.username,
                  telegram_id: user.telegram_id,
                  first_name: user.first_name,
                  last_name: user.last_name,
                  balance_uni: user.balance_uni,
                  balance_ton: user.balance_ton,
                  ref_code: user.ref_code,
                  created_at: user.created_at
                }
              });
            } catch (storageError) {
              console.error('[UniFarm Fix] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º:', storageError.message);
              return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
              });
            }
          } else {
            // –ï—Å–ª–∏ storage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
            return res.json({
              success: true,
              data: {
                telegram_id: req.telegramUser.id,
                username: req.telegramUser.username,
                first_name: req.telegramUser.first_name,
                last_name: req.telegramUser.last_name,
                is_temporary: true
              }
            });
          }
        } catch (error) {
          console.error('[UniFarm Fix] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error.message);
          return res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
          });
        }
      });
      
      console.log('[UniFarm Fix] ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      
      // ---------- –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ ----------
      // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
      app.get('/api/diag/health', (req, res) => {
        res.json({
          success: true,
          message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
          timestamp: new Date().toISOString(),
          environment: process.env.NODE_ENV || 'development'
        });
      });
      
      // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      app.get('/api/diag/db', async (req, res) => {
        try {
          const { Pool } = require('pg');
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL,
            ssl: {
              rejectUnauthorized: false
            },
            max: 1
          });
          
          const client = await pool.connect();
          const result = await client.query('SELECT NOW() as time');
          client.release();
          
          await pool.end();
          
          res.json({
            success: true,
            message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç',
            db_time: result.rows[0].time,
            db_type: 'PostgreSQL (Neon)'
          });
        } catch (error) {
          res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î',
            error: error.message
          });
        }
      });
      
      console.log('[UniFarm Fix] ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      
      console.log(`
=======================================================
‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø UniFarm –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!

–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã:
- –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ CORS –¥–ª—è Telegram Mini App
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Mini App

–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- GET /api/diag/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
- GET /api/diag/db - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

–ú–∞—Ä—à—Ä—É—Ç—ã Telegram:
- POST /api/telegram/auth - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
=======================================================
`);
      
      return app;
    } catch (error) {
      console.error('[UniFarm Fix] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error.message);
      console.error(error.stack);
      return app; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö initData –æ—Ç Telegram
 * @param {string} initData - –°—Ç—Ä–æ–∫–∞ initData –æ—Ç Telegram
 * @param {string} botToken - –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
 * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function validateTelegramInitData(initData, botToken) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
    if (!botToken || !initData) {
      return false;
    }
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
    const urlParams = new URLSearchParams(initData);
    const hash = urlParams.get('hash');
    
    if (!hash) {
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const dataCheckArr = [];
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±–µ–∑ hash)
    urlParams.forEach((val, key) => {
      if (key !== 'hash') {
        dataCheckArr.push(`${key}=${val}`);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    dataCheckArr.sort();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
    const dataCheckString = dataCheckArr.join('\n');
    
    // –°–æ–∑–¥–∞–µ–º HMAC-SHA-256 –ø–æ–¥–ø–∏—Å—å
    const crypto = require('crypto');
    const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
    const calculatedHash = crypto.createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    return calculatedHash === hash;
  } catch (error) {
    console.error('[UniFarm Fix] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∏ Telegram:', error.message);
    return false;
  }
}