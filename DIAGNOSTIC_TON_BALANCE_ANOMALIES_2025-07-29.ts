#!/usr/bin/env tsx

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–û–ú–ê–õ–ò–ô –° TON –ë–ê–õ–ê–ù–°–û–ú
 * –î–∞—Ç–∞: 29 –∏—é–ª—è 2025
 * 
 * –¶–µ–ª—å: –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è TON —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥ –∏ –ë–î
 */

import { supabase } from './core/supabase';

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–û–ú–ê–õ–ò–ô TON –ë–ê–õ–ê–ù–°–û–í - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó');
console.log('='.repeat(80));

interface Transaction {
  id: number;
  user_id: number;
  type: string;
  amount: string;
  currency: string;
  created_at: string;
  metadata?: any;
  tx_hash_unique?: string;
}

interface User {
  id: number;
  username?: string;
  balance_ton?: number;
  balance_uni?: number;
  ton_boost_active?: boolean;
  created_at: string;
}

async function analyzeUser25() {
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 25 (–ì–õ–ê–í–ù–´–ô –ü–û–î–û–ó–†–ï–í–ê–ï–ú–´–ô)');
  console.log('-'.repeat(70));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('id', 25)
      .single();
      
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 25 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 25:');
    console.log(`   Username: ${user.username || 'N/A'}`);
    console.log(`   TON Balance: ${user.balance_ton || 0}`);
    console.log(`   UNI Balance: ${user.balance_uni || 0}`);
    console.log(`   TON Boost: ${user.ton_boost_active ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
    console.log(`   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.created_at}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    
    const { data: transactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', sevenDaysAgo.toISOString())
      .order('created_at', { ascending: false });
      
    if (!transactions) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      return;
    }
    
    console.log(`\nüí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 7 –¥–Ω–µ–π: ${transactions.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const tonTransactions = transactions.filter(tx => tx.currency === 'TON');
    console.log(`   TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
    
    if (tonTransactions.length > 0) {
      await analyzeTonTransactionPatterns(tonTransactions);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –¥–∞–Ω–Ω—ã–µ
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '25');
      
    if (farmingData && farmingData.length > 0) {
      console.log('\nüåæ –î–ê–ù–ù–´–ï –§–ê–†–ú–ò–ù–ì–ê:');
      farmingData.forEach((farm: any) => {
        console.log(`   –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farm.farming_balance}`);
        console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${farm.boost_active ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${farm.created_at}`);
      });
    } else {
      console.log('\n‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è User 25');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ User 25:', error);
  }
}

async function analyzeTonTransactionPatterns(transactions: Transaction[]) {
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const typeGroups: Record<string, Transaction[]> = {};
  transactions.forEach(tx => {
    if (!typeGroups[tx.type]) typeGroups[tx.type] = [];
    typeGroups[tx.type].push(tx);
  });
  
  console.log('\n   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:');
  Object.entries(typeGroups).forEach(([type, txs]) => {
    const total = txs.reduce((sum, tx) => sum + parseFloat(tx.amount), 0);
    console.log(`   ${type}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: ${total.toFixed(6)} TON`);
  });
  
  // –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const suspiciousPatterns = findSuspiciousPatterns(transactions);
  if (suspiciousPatterns.length > 0) {
    console.log('\nüö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:');
    suspiciousPatterns.forEach((pattern, index) => {
      console.log(`   ${index + 1}. ${pattern}`);
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  analyzeTransactionTiming(transactions);
}

function findSuspiciousPatterns(transactions: Transaction[]): string[] {
  const patterns: string[] = [];
  
  // –ü–æ–∏—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ (–¥–µ–ø–æ–∑–∏—Ç -> —Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
  for (let i = 0; i < transactions.length - 1; i++) {
    const current = transactions[i];
    const next = transactions[i + 1];
    
    const currentTime = new Date(current.created_at).getTime();
    const nextTime = new Date(next.created_at).getTime();
    const timeDiff = Math.abs(currentTime - nextTime) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    if (timeDiff <= 5) {
      const currentAmount = parseFloat(current.amount);
      const nextAmount = parseFloat(next.amount);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–Ω—ã–µ —Å—É–º–º—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
      if (Math.abs(currentAmount + nextAmount) < 0.001) {
        patterns.push(`–ë—ã—Å—Ç—Ä—ã–π –≤–æ–∑–≤—Ä–∞—Ç: ${current.type} (${current.amount}) -> ${next.type} (${next.amount}) –∑–∞ ${timeDiff.toFixed(1)} –º–∏–Ω`);
      }
    }
  }
  
  // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const hashes = new Map<string, Transaction[]>();
  transactions.forEach(tx => {
    if (tx.tx_hash_unique) {
      if (!hashes.has(tx.tx_hash_unique)) {
        hashes.set(tx.tx_hash_unique, []);
      }
      hashes.get(tx.tx_hash_unique)!.push(tx);
    }
  });
  
  hashes.forEach((txs, hash) => {
    if (txs.length > 1) {
      patterns.push(`–î—É–±–ª–∏–∫–∞—Ç tx_hash: ${hash} (${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
    }
  });
  
  return patterns;
}

function analyzeTransactionTiming(transactions: Transaction[]) {
  console.log('\n‚è±Ô∏è –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ò–ù–¢–ï–†–í–ê–õ–û–í:');
  
  const intervals: number[] = [];
  for (let i = 0; i < transactions.length - 1; i++) {
    const current = new Date(transactions[i].created_at).getTime();
    const next = new Date(transactions[i + 1].created_at).getTime();
    const interval = Math.abs(current - next) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
    intervals.push(interval);
  }
  
  if (intervals.length > 0) {
    const avgInterval = intervals.reduce((sum, val) => sum + val, 0) / intervals.length;
    const minInterval = Math.min(...intervals);
    const maxInterval = Math.max(...intervals);
    
    console.log(`   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${avgInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
    
    // –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const quickOps = intervals.filter(i => i < 2);
    if (quickOps.length > 0) {
      console.log(`   üö® –û–ø–µ—Ä–∞—Ü–∏–π –±—ã—Å—Ç—Ä–µ–µ 2 –º–∏–Ω—É—Ç: ${quickOps.length}`);
    }
  }
}

async function checkScheduledProcesses() {
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –ü–†–û–¶–ï–°–°–û–í');
  console.log('-'.repeat(70));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 1-3 –º–∏–Ω—É—Ç—ã
  console.log('üîç –ü–æ–∏—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å:');
  
  const processesToCheck = [
    'farming scheduler',
    'boost verification',
    'balance recalculation', 
    'transaction cleanup',
    'duplicate removal'
  ];
  
  processesToCheck.forEach(process => {
    console.log(`   - ${process}: –¢–†–ï–ë–£–ï–¢ –ê–ù–ê–õ–ò–ó –ö–û–î–ê`);
  });
  
  console.log('\n‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log('   - modules/scheduler/ - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏');
  console.log('   - server/index.ts - cron –∑–∞–¥–∞—á–∏');
  console.log('   - core/balanceManager.ts - –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤');
  console.log('   - modules/wallet/service.ts - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
}

async function findRecentAnomalies() {
  console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –ù–ï–î–ê–í–ù–ò–• –ê–ù–û–ú–ê–õ–ò–ô –£ –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('-'.repeat(70));
  
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    
    const { data: recentTransactions } = await supabase
      .from('transactions')
      .select('user_id, type, amount, currency, created_at')
      .eq('currency', 'TON')
      .gte('created_at', threeDaysAgo.toISOString())
      .order('created_at', { ascending: false })
      .limit(100);
      
    if (!recentTransactions) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userGroups: Record<number, Transaction[]> = {};
    recentTransactions.forEach((tx: any) => {
      if (!userGroups[tx.user_id]) userGroups[tx.user_id] = [];
      userGroups[tx.user_id].push(tx);
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${Object.keys(userGroups).length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∑–∞ 3 –¥–Ω—è`);
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    const suspiciousUsers: number[] = [];
    Object.entries(userGroups).forEach(([userId, transactions]) => {
      if (transactions.length > 10) { // –ú–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        suspiciousUsers.push(parseInt(userId));
      }
    });
    
    if (suspiciousUsers.length > 0) {
      console.log(`üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: ${suspiciousUsers.slice(0, 5).join(', ')}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π:', error);
  }
}

async function checkDatabaseIntegrity() {
  console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•');
  console.log('-'.repeat(70));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    const { data: usersWithTonBoost } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active')
      .eq('ton_boost_active', true);
      
    if (usersWithTonBoost) {
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${usersWithTonBoost.length}`);
      
      for (const user of usersWithTonBoost.slice(0, 3)) {
        const { data: farmingData } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id.toString());
          
        if (!farmingData || farmingData.length === 0) {
          console.log(`üö® –ê–ù–û–ú–ê–õ–ò–Ø: User ${user.id} –∏–º–µ–µ—Ç ton_boost_active=true –Ω–æ –ù–ï–¢ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data`);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
  }
}

async function main() {
  try {
    await analyzeUser25();
    await checkScheduledProcesses();
    await findRecentAnomalies();
    await checkDatabaseIntegrity();
    
    console.log('\n' + '='.repeat(80));
    console.log('üìã –í–´–í–û–î–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ User ID 25 –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∏ cron –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

main().catch(console.error);