/**
 * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –ü–ê–ö–ï–¢–ê ID 290
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞, —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface TonBoostPackage {
  id: number;
  name: string;
  description: string;
  price_ton: string;
  daily_rate: string;
  duration_days: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

interface BoostPurchase {
  id: number;
  user_id: number;
  boost_id: number;
  amount_ton: string;
  tx_hash: string | null;
  status: string;
  created_at: string;
  updated_at: string;
  metadata: any;
}

async function diagnoseTonBoostPackage290() {
  console.log('\nüîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –ü–ê–ö–ï–¢–ê ID 290 ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –ø–∞–∫–µ—Ç–µ
    console.log('1Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON Boost –ø–∞–∫–µ—Ç–µ ID 290:');
    console.log('==========================================');
    
    const { data: packageData, error: packageError } = await supabase
      .from('ton_boost_packages')
      .select('*')
      .eq('id', 290)
      .single();

    if (packageError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞:', packageError.message);
      console.log('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', packageError);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      const { data: tables, error: tablesError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_name', 'ton_boost_packages');
        
      if (tablesError || !tables?.length) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ ton_boost_packages –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      } else {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_boost_packages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const { data: allPackages } = await supabase
          .from('ton_boost_packages')
          .select('id, name, price_ton, daily_rate, is_active')
          .order('id', { ascending: true });
          
        console.log('\nüì¶ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã:');
        allPackages?.forEach(pkg => {
          console.log(`   ID ${pkg.id}: ${pkg.name} | ${pkg.price_ton} TON | Rate: ${pkg.daily_rate}% | Active: ${pkg.is_active}`);
        });
      }
    } else if (packageData) {
      console.log('‚úÖ TON Boost –ø–∞–∫–µ—Ç ID 290 –Ω–∞–π–¥–µ–Ω!');
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageData.name}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${packageData.description}`);
      console.log(`   –¶–µ–Ω–∞: ${packageData.price_ton} TON`);
      console.log(`   –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${packageData.daily_rate}%`);
      console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${packageData.duration_days} –¥–Ω–µ–π`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${packageData.is_active}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(packageData.created_at).toLocaleString('ru-RU')}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(packageData.updated_at).toLocaleString('ru-RU')}`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    console.log('\n2Ô∏è‚É£ –ü–æ–∫—É–ø–∫–∏ TON Boost –ø–∞–∫–µ—Ç–∞ ID 290:');
    console.log('====================================');
    
    const { data: purchases, error: purchasesError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('boost_id', 290)
      .order('created_at', { ascending: false })
      .limit(10);

    if (purchasesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫:', purchasesError.message);
    } else if (!purchases?.length) {
      console.log('‚ÑπÔ∏è –ü–æ–∫—É–ø–æ–∫ –ø–∞–∫–µ—Ç–∞ ID 290 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –ø–æ–∫—É–ø–æ–∫ –ø–∞–∫–µ—Ç–∞ ID 290:`);
      purchases.forEach((purchase, index) => {
        console.log(`\n   –ü–æ–∫—É–ø–∫–∞ #${index + 1}:`);
        console.log(`     ID: ${purchase.id}`);
        console.log(`     User ID: ${purchase.user_id}`);
        console.log(`     –°—É–º–º–∞: ${purchase.amount_ton} TON`);
        console.log(`     TX Hash: ${purchase.tx_hash || '–ù–ï–¢'}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${purchase.status}`);
        console.log(`     –î–∞—Ç–∞: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
        if (purchase.metadata) {
          console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(purchase.metadata, null, 6)}`);
        }
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞–∫–µ—Ç–æ–º 290
    console.log('\n3Ô∏è‚É£ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞–∫–µ—Ç–æ–º ID 290:');
    console.log('==========================================');
    
    const { data: transactions, error: transactionsError } = await supabase
      .from('transactions')
      .select('*')
      .or(`description.ilike.%290%,metadata->>boost_id.eq.290,metadata->>package_id.eq.290`)
      .order('created_at', { ascending: false })
      .limit(15);

    if (transactionsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsError.message);
    } else if (!transactions?.length) {
      console.log('‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞–∫–µ—Ç–æ–º ID 290 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      transactions.forEach((tx, index) => {
        console.log(`\n   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${index + 1}:`);
        console.log(`     ID: ${tx.id}`);
        console.log(`     User ID: ${tx.user_id}`);
        console.log(`     –¢–∏–ø: ${tx.type}`);
        console.log(`     –°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`     –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        if (tx.metadata) {
          console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata, null, 6)}`);
        }
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON —Ñ–∞—Ä–º–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –ø–∞–∫–µ—Ç–æ–º
    console.log('\n4Ô∏è‚É£ TON —Ñ–∞—Ä–º–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ —Å –ø–∞–∫–µ—Ç–æ–º ID 290:');
    console.log('======================================');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('users')
      .select('id, telegram_id, username, ton_boost_active, ton_boost_package_id, ton_boost_rate, ton_farming_balance, ton_farming_start_timestamp')
      .eq('ton_boost_package_id', 290)
      .limit(20);

    if (farmingError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞:', farmingError.message);
    } else if (!farmingData?.length) {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º ID 290 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–∫–µ—Ç–æ–º ID 290:`);
      farmingData.forEach((user, index) => {
        console.log(`\n   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${index + 1}:`);
        console.log(`     User ID: ${user.id}`);
        console.log(`     Telegram ID: ${user.telegram_id}`);
        console.log(`     Username: ${user.username || '–ù–ï–¢'}`);
        console.log(`     TON Boost –∞–∫—Ç–∏–≤–µ–Ω: ${user.ton_boost_active}`);
        console.log(`     TON Boost —Å—Ç–∞–≤–∫–∞: ${user.ton_boost_rate}%`);
        console.log(`     TON —Ñ–∞—Ä–º–∏–Ω–≥ –±–∞–ª–∞–Ω—Å: ${user.ton_farming_balance} TON`);
        console.log(`     –°—Ç–∞—Ä—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${user.ton_farming_start_timestamp ? new Date(user.ton_farming_start_timestamp).toLocaleString('ru-RU') : '–ù–ï–¢'}`);
      });
    }

    // 5. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–∞
    console.log('\n5Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–∞ ID 290:');
    console.log('==================================');
    
    if (packageData) {
      console.log(`üìä –¢–∏–ø –ø–∞–∫–µ—Ç–∞: ${packageData.name}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${packageData.price_ton} TON`);
      console.log(`üìà –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${packageData.daily_rate}%`);
      console.log(`‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${packageData.duration_days} –¥–Ω–µ–π`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
      const totalReturn = (parseFloat(packageData.daily_rate) * packageData.duration_days).toFixed(2);
      console.log(`üíé –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥: ${totalReturn}%`);
      
      // –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (packageData.is_active) {
        console.log('‚úÖ –ü–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
      } else {
        console.log('‚ö†Ô∏è –ü–∞–∫–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      }
    }

    console.log('\n‚úÖ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseTonBoostPackage290();