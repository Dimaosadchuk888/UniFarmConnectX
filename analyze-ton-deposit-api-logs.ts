#!/usr/bin/env tsx
/**
 * üîç –ê–ù–ê–õ–ò–ó API –õ–û–ì–û–í: –ü–æ–∏—Å–∫ —Å–ª–µ–¥–æ–≤ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255/256
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API endpoints –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
 */

import { supabase } from './core/supabase';

async function analyzeTonDepositApiLogs() {
  console.log('üîç –ê–ù–ê–õ–ò–ó API –õ–û–ì–û–í: –ü–æ–∏—Å–∫ —Å–ª–µ–¥–æ–≤ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255/256');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –≤—ã–∑–æ–≤—ã –∫ API ton-deposit –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –í–´–ó–û–í–û–í API /ton-deposit:');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ api_logs –∏–ª–∏ –ø–æ–¥–æ–±–Ω–∞—è, –ø—Ä–æ–≤–µ—Ä–∏–º –µ—ë
    // –ò–Ω–∞—á–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    
    const fourHoursAgo = new Date();
    fourHoursAgo.setHours(fourHoursAgo.getHours() - 4);
    
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö TON_DEPOSIT –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const { data: recentDeposits, error: depositsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', fourHoursAgo.toISOString())
      .order('created_at', { ascending: false });

    if (depositsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞: ${recentDeposits?.length || 0}`);
      
      recentDeposits?.forEach((dep, i) => {
        console.log(`\nüí∞ –î–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   ID: ${dep.id}, user_id: ${dep.user_id}`);
        console.log(`   amount: ${dep.amount} ${dep.currency}`);
        console.log(`   status: ${dep.status}`);
        console.log(`   created_at: ${dep.created_at}`);
        console.log(`   tx_hash: ${dep.tx_hash || '–ù–ï–¢ –•–ï–®–ê'}`);
        console.log(`   description: ${dep.description?.substring(0, 200)}...`);
        
        if (dep.metadata) {
          console.log(`   metadata:`, dep.metadata);
        }
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É–¥–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã - –∏—â–µ–º –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º failed/error
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ù–ï–£–î–ê–í–®–ò–•–°–Ø TON –î–ï–ü–û–ó–ò–¢–û–í:');
    const { data: failedDeposits, error: failedError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .in('status', ['failed', 'error', 'rejected'])
      .gte('created_at', fourHoursAgo.toISOString())
      .order('created_at', { ascending: false });

    if (!failedError && failedDeposits) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—É–¥–∞–≤—à–∏—Ö—Å—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${failedDeposits.length}`);
      failedDeposits.forEach((dep, i) => {
        console.log(`\n‚ùå –ù–µ—É–¥–∞–≤—à–∏–π—Å—è –¥–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   user_id: ${dep.user_id}, amount: ${dep.amount}`);
        console.log(`   status: ${dep.status}`);
        console.log(`   description: ${dep.description}`);
        console.log(`   metadata:`, dep.metadata);
      });
    }

    // 3. –ò—â–µ–º pending –¥–µ–ø–æ–∑–∏—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∑–∞–≤–∏—Å–Ω—É—Ç—å
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –ó–ê–í–ò–°–®–ò–• PENDING –î–ï–ü–û–ó–ò–¢–û–í:');
    const { data: pendingDeposits, error: pendingError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'pending')
      .gte('created_at', fourHoursAgo.toISOString())
      .order('created_at', { ascending: false });

    if (!pendingError && pendingDeposits) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ pending –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${pendingDeposits.length}`);
      pendingDeposits.forEach((dep, i) => {
        console.log(`\n‚è≥ Pending –¥–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   user_id: ${dep.user_id}, amount: ${dep.amount}`);
        console.log(`   created_at: ${dep.created_at}`);
        console.log(`   tx_hash: ${dep.tx_hash || '–ù–ï–¢ –•–ï–®–ê'}`);
        console.log(`   description: ${dep.description}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –¥–æ–ª–≥–æ –æ–Ω –≤–∏—Å–∏—Ç
        const createdTime = new Date(dep.created_at);
        const now = new Date();
        const minutesAgo = Math.floor((now.getTime() - createdTime.getTime()) / (1000 * 60));
        console.log(`   ‚è∞ –í–∏—Å–∏—Ç —É–∂–µ: ${minutesAgo} –º–∏–Ω—É—Ç`);
      });
    }

    // 4. –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 255 –∏–ª–∏ 256
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 255/256 –ó–ê 4 –ß–ê–°–ê:');
    const { data: userTransactions, error: userTxError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', [255, 256])
      .gte('created_at', fourHoursAgo.toISOString())
      .order('created_at', { ascending: false });

    if (!userTxError && userTransactions) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255/256: ${userTransactions.length}`);
      userTransactions.forEach((tx, i) => {
        console.log(`\nüéØ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i + 1}:`);
        console.log(`   user_id: ${tx.user_id}, type: ${tx.type}`);
        console.log(`   amount: ${tx.amount} ${tx.currency}`);
        console.log(`   status: ${tx.status}`);
        console.log(`   created_at: ${tx.created_at}`);
        console.log(`   description: ${tx.description}`);
      });
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å telegram_id –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    console.log('\n5Ô∏è‚É£ –ü–û–ò–°–ö –ü–û TELEGRAM_ID –í –û–ü–ò–°–ê–ù–ò–ò:');
    const searchTerms = ['2064066630', '255']; // telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    for (const term of searchTerms) {
      const { data: telegramTx, error: telegramError } = await supabase
        .from('transactions')
        .select('*')
        .ilike('description', `%${term}%`)
        .gte('created_at', fourHoursAgo.toISOString())
        .limit(5);

      if (!telegramError && telegramTx && telegramTx.length > 0) {
        console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "${term}": ${telegramTx.length}`);
        telegramTx.forEach((tx, i) => {
          console.log(`   ${i + 1}. user_id: ${tx.user_id}, type: ${tx.type}, amount: ${tx.amount}`);
          console.log(`      description: ${tx.description.substring(0, 150)}...`);
        });
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –í–´–í–û–î–´ –ê–ù–ê–õ–ò–ó–ê API –õ–û–ì–û–í:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞');
    console.log('2. –ò—Å–∫–∞–ª–∏ –Ω–µ—É–¥–∞–≤—à–∏–µ—Å—è –∏ –∑–∞–≤–∏—Å—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
    console.log('3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 255/256');
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–æ–∏—Å–∫ –ø–æ telegram_id –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö');
    console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TON blockchain API –Ω–∞–ø—Ä—è–º—É—é');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –õ–û–ì–û–í:', error);
  }
}

analyzeTonDepositApiLogs().catch(console.error);