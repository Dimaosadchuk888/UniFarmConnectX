import { supabase } from './core/supabaseClient.js';

// –≠–º—É–ª—è—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const mockAuthData = {
  user: { id: 25 },
  hash: 'test-hash',
  auth_date: Math.floor(Date.now() / 1000)
};

async function diagnoseUser25Direct() {
  console.log('üîç –ü–†–Ø–ú–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER #25 –ß–ï–†–ï–ó SUPABASE');
  console.log('==============================================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å User #25
    console.log('\n1. –ë–ê–õ–ê–ù–° USER #25:');
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_uni, balance_ton, updated_at')
      .eq('id', 25)
      .single();
    
    if (userError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${userError.message}`);
      return;
    }
    
    console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton || 0}`);
    console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni || 0}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updated_at}`);
    
    // 2. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 48 —á–∞—Å–æ–≤  
    console.log('\n2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê 48 –ß–ê–°–û–í:');
    const twoDaysAgo = new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString();
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', twoDaysAgo)
      .order('created_at', { ascending: false });
    
    if (recentError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${recentError.message}`);
    } else if (!recentTx || recentTx.length === 0) {
      console.log('   ‚ö†Ô∏è –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –∑–∞ 48 —á–∞—Å–æ–≤!');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      recentTx.forEach((tx, i) => {
        console.log(`   ${i+1}. ID: ${tx.id} | ${tx.type}`);
        console.log(`      TON: ${tx.amount_ton || 0} | UNI: ${tx.amount_uni || 0}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status} | ${tx.created_at}`);
        console.log(`      Hash: ${tx.tx_hash_unique || 'NULL'}`);
        console.log('      ---');
      });
    }
    
    // 3. TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    console.log('\n3. –ü–û–ò–°–ö TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const { data: tonTx, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .or('type.eq.TON_DEPOSIT,type.eq.FARMING_REWARD')
      .gt('amount_ton', 0)
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (tonError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${tonError.message}`);
    } else if (!tonTx || tonTx.length === 0) {
      console.log('   ‚ö†Ô∏è –ù–ï–¢ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (FARMING_REWARD + TON_DEPOSIT)!');
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonTx.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      tonTx.forEach((tx, i) => {
        console.log(`   ${i+1}. ${tx.amount_ton} TON | ${tx.type} | ${tx.created_at}`);
        console.log(`      ID: ${tx.id} | –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–ù–µ—Ç'}`);
      });
    }
    
    // 4. –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    console.log('\n4. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const { data: allTx, error: allError } = await supabase
      .from('transactions')
      .select('type, amount_ton, amount_uni')
      .eq('user_id', 25);
    
    if (!allError && allTx) {
      const stats = {};
      let totalTon = 0;
      let totalUni = 0;
      
      allTx.forEach(tx => {
        if (!stats[tx.type]) stats[tx.type] = 0;
        stats[tx.type]++;
        
        if (tx.amount_ton) totalTon += parseFloat(tx.amount_ton);
        if (tx.amount_uni) totalUni += parseFloat(tx.amount_uni);
      });
      
      console.log(`   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTx.length}`);
      console.log(`   –í—Å–µ–≥–æ TON –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö: ${totalTon}`);
      console.log(`   –í—Å–µ–≥–æ UNI –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö: ${totalUni}`);
      console.log('   –ü–æ —Ç–∏–ø–∞–º:');
      Object.entries(stats).forEach(([type, count]) => {
        console.log(`     ${type}: ${count}`);
      });
    }
    
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.log(`üí• –ö–†–ò–¢–ò–ß–ù–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`);
    console.log(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫
diagnoseUser25Direct();