#!/usr/bin/env tsx
/**
 * üîç –ì–õ–£–ë–û–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ 1.65 TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 255
 * –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ blockchain –Ω–æ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É
 */

import { supabase } from './core/supabase';

async function deepInvestigateUser255() {
  console.log('üîç –ì–õ–£–ë–û–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ 1.65 TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 255');
  console.log('='.repeat(80));

  try {
    // 1. –ò—â–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255 —Å —Ç–æ–Ω–æ–º
    console.log('\n1Ô∏è‚É£ –ü–û–õ–ù–´–ô –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 255:');
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º ID
    const searches = [
      { field: 'id', value: 255 },
      { field: 'telegram_id', value: 2064066630 },
      { field: 'username', value: 'Glazeb0' }
    ];

    for (const search of searches) {
      const { data: users, error } = await supabase
        .from('users')
        .select('*')
        .eq(search.field, search.value);

      if (!error && users && users.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ ${search.field}:`, users[0]);
      }
    }

    // 2. –ò—â–µ–º –õ–Æ–ë–´–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –û–ü–ò–°–ê–ù–ò–Æ:');
    
    const searchTerms = ['255', '2064066630', 'Glazeb0', 'rjvfy'];
    
    for (const term of searchTerms) {
      const { data: transactions, error } = await supabase
        .from('transactions')
        .select('*')
        .ilike('description', `%${term}%`)
        .order('created_at', { ascending: false })
        .limit(10);

      if (!error && transactions && transactions.length > 0) {
        console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "${term}": ${transactions.length}`);
        transactions.forEach((tx, i) => {
          console.log(`  ${i + 1}. ID ${tx.id}: ${tx.amount} ${tx.currency}, user_id: ${tx.user_id}`);
          console.log(`     type: ${tx.type}, status: ${tx.status}`);
          console.log(`     description: ${tx.description}`);
          console.log(`     created_at: ${tx.created_at}`);
        });
      }
    }

    // 3. –ü–æ–∏—Å–∫ –ø–æ tx_hash - –∏—â–µ–º —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å—É–º–º–∞–º–∏ 0.65 –∏ 1.0
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –ü–û TX_HASH –ü–û–°–õ–ï–î–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const { data: recentWithHash, error: hashError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .not('tx_hash', 'is', null)
      .gte('created_at', '2025-08-04T08:00:00.000Z')
      .order('created_at', { ascending: false });

    if (!hashError && recentWithHash) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —Ö–µ—à–∞–º–∏: ${recentWithHash.length}`);
      recentWithHash.forEach((tx, i) => {
        console.log(`\nüîó –î–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   user_id: ${tx.user_id}, amount: ${tx.amount} ${tx.currency}`);
        console.log(`   tx_hash: ${tx.tx_hash}`);
        console.log(`   created_at: ${tx.created_at}`);
        console.log(`   description: ${tx.description}`);
      });
    }

    // 4. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –ª—é–±—ã–µ TON_DEPOSIT –±–µ–∑ user_id –∏–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –ü–û–¢–ï–†–Ø–ù–ù–´–•/–û–®–ò–ë–û–ß–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í:');
    
    const { data: orphanDeposits, error: orphanError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', '2025-08-04T08:00:00.000Z')
      .order('created_at', { ascending: false });

    if (!orphanError && orphanDeposits) {
      console.log(`‚úÖ –í—Å–µ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${orphanDeposits.length}`);
      
      // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã —Å —Å—É–º–º–∞–º–∏ 0.65 –∏–ª–∏ 1.0
      const targetAmounts = orphanDeposits.filter(tx => 
        ['0.65', '1.0', '1', '0.650000', '1.000000', '0.65000000', '1.00000000'].includes(tx.amount)
      );
      
      console.log(`üéØ –î–µ–ø–æ–∑–∏—Ç—ã —Å —Å—É–º–º–∞–º–∏ 0.65/1.0: ${targetAmounts.length}`);
      targetAmounts.forEach((tx, i) => {
        console.log(`\nüí∞ –¶–µ–ª–µ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   ID: ${tx.id}, user_id: ${tx.user_id}`);
        console.log(`   amount: ${tx.amount} ${tx.currency}`);
        console.log(`   status: ${tx.status}`);
        console.log(`   tx_hash: ${tx.tx_hash || '–ù–ï–¢ –•–ï–®–ê'}`);
        console.log(`   created_at: ${tx.created_at}`);
        console.log(`   description: ${tx.description}`);
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ - –ø–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ blockchain –¥–∞–Ω–Ω—ã—Ö
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó BLOCKCHAIN –î–ê–ù–ù–´–• –í –î–ï–ü–û–ó–ò–¢–ê–•:');
    
    const { data: blockchainDeposits, error: bcError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .ilike('description', '%blockchain%')
      .gte('created_at', '2025-08-04T08:00:00.000Z')
      .order('created_at', { ascending: false});

    if (!bcError && blockchainDeposits) {
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç–æ–≤ —Å blockchain –¥–∞–Ω–Ω—ã–º–∏: ${blockchainDeposits.length}`);
      blockchainDeposits.forEach((tx, i) => {
        console.log(`\nüîó Blockchain –¥–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   user_id: ${tx.user_id}, amount: ${tx.amount}`);
        console.log(`   description: ${tx.description.substring(0, 200)}...`);
        console.log(`   created_at: ${tx.created_at}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ description
        if (tx.description.includes('te6cck')) {
          const boc = tx.description.match(/te6cck[A-Za-z0-9+/=]+/)?.[0];
          if (boc) {
            console.log(`   üîë BOC –¥–∞–Ω–Ω—ã–µ: ${boc.substring(0, 50)}...`);
          }
        }
      });
    }

    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ dep–æ–∑–∏—Ç—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log('\n6Ô∏è‚É£ –ü–û–ò–°–ö –î–ï–ü–û–ó–ò–¢–û–í –ë–ï–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    
    const { data: noUserDeposits, error: noUserError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .is('user_id', null)
      .gte('created_at', '2025-08-04T08:00:00.000Z');

    if (!noUserError) {
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç–æ–≤ –±–µ–∑ user_id: ${noUserDeposits?.length || 0}`);
      noUserDeposits?.forEach((tx, i) => {
        console.log(`\nüëª Orphan –¥–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   amount: ${tx.amount} ${tx.currency}`);
        console.log(`   tx_hash: ${tx.tx_hash || '–ù–ï–¢ –•–ï–®–ê'}`);
        console.log(`   description: ${tx.description}`);
        console.log(`   created_at: ${tx.created_at}`);
      });
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ì–õ–£–ë–û–ö–û–ì–û –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 255');
    console.log('2. –ò—Å–∫–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, —Ö–µ—à–∞–º, —Å—É–º–º–∞–º');
    console.log('3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ blockchain –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö');
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ orphan –¥–µ–ø–æ–∑–∏—Ç—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å webhook –ª–æ–≥–∏ –∏ TON API');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:', error);
  }
}

deepInvestigateUser255().catch(console.error);