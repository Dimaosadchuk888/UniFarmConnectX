
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –í UNIFARM\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
function getFileHash(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return crypto.createHash('md5').update(content).digest('hex');
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function scanDirectory(dir, extensions = ['.ts', '.tsx', '.js', '.jsx'], maxDepth = 10, currentDepth = 0) {
  const files = [];
  
  if (currentDepth >= maxDepth) return files;
  
  try {
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        files.push(...scanDirectory(fullPath, extensions, maxDepth, currentDepth + 1));
      } else if (stat.isFile()) {
        const ext = path.extname(item);
        if (extensions.includes(ext)) {
          files.push({
            path: fullPath,
            name: item,
            dir: dir,
            ext: ext,
            size: stat.size,
            hash: getFileHash(fullPath)
          });
        }
      }
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${dir}: ${error.message}`);
  }
  
  return files;
}

// 1. –ü–û–ò–°–ö –§–ê–ô–õ–û–í –° –°–£–§–§–ò–ö–°–ê–ú–ò-–î–£–ë–õ–ò–ö–ê–¢–ê–ú–ò
console.log('üìÅ –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏-–¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏\n');

const duplicateSuffixes = [
  '.bak', '.backup', '.old', '.new', '.copy', '.tmp', '.temp',
  '_1', '_2', '_copy', '-copy', '-old', '-new', '-backup',
  '.ts.new', '.tsx.old', '.js.bak'
];

const allFiles = scanDirectory('.', ['.ts', '.tsx', '.js', '.jsx', '.sql', '.md']);

console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${allFiles.length}\n`);

// –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
const suspiciousFiles = allFiles.filter(file => {
  return duplicateSuffixes.some(suffix => 
    file.name.includes(suffix) || file.path.includes(suffix)
  );
});

if (suspiciousFiles.length > 0) {
  console.log('üö® –ù–ê–ô–î–ï–ù–´ –§–ê–ô–õ–´ –° –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ú–ò –°–£–§–§–ò–ö–°–ê–ú–ò:');
  suspiciousFiles.forEach(file => {
    console.log(`  ${file.path} (${file.size} bytes)`);
  });
} else {
  console.log('‚úÖ –§–∞–π–ª–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
}

// 2. –ü–û–ò–°–ö –§–ê–ô–õ–û–í –° –û–î–ò–ù–ê–ö–û–í–´–ú –°–û–î–ï–†–ñ–ò–ú–´–ú
console.log('\nüìÑ –ü–û–ò–°–ö –§–ê–ô–õ–û–í –° –û–î–ò–ù–ê–ö–û–í–´–ú –°–û–î–ï–†–ñ–ò–ú–´–ú:\n');

const hashGroups = {};
allFiles.forEach(file => {
  if (file.hash && file.size > 100) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã
    if (!hashGroups[file.hash]) {
      hashGroups[file.hash] = [];
    }
    hashGroups[file.hash].push(file);
  }
});

const duplicatesByHash = Object.values(hashGroups).filter(group => group.length > 1);

if (duplicatesByHash.length > 0) {
  console.log('üö® –ù–ê–ô–î–ï–ù–´ –§–ê–ô–õ–´ –° –ò–î–ï–ù–¢–ò–ß–ù–´–ú –°–û–î–ï–†–ñ–ò–ú–´–ú:');
  duplicatesByHash.forEach((group, index) => {
    console.log(`\n  –ì—Ä—É–ø–ø–∞ ${index + 1} (${group[0].size} bytes, —Ö–µ—à: ${group[0].hash.substring(0, 8)}...):`);
    group.forEach(file => {
      console.log(`    ${file.path}`);
    });
  });
} else {
  console.log('‚úÖ –§–∞–π–ª–æ–≤ —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
}

// 3. –ü–û–ò–°–ö –ü–û–•–û–ñ–ò–• –ù–ê–ó–í–ê–ù–ò–ô –§–ê–ô–õ–û–í
console.log('\nüî§ –ü–û–ò–°–ö –§–ê–ô–õ–û–í –° –ü–û–•–û–ñ–ò–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò:\n');

const fileNames = allFiles.map(f => ({
  name: f.name.replace(/\.(ts|tsx|js|jsx)$/, ''),
  fullPath: f.path
}));

const similarNames = [];
for (let i = 0; i < fileNames.length; i++) {
  for (let j = i + 1; j < fileNames.length; j++) {
    const name1 = fileNames[i].name.toLowerCase();
    const name2 = fileNames[j].name.toLowerCase();
    
    // –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    if (
      name1.includes(name2) || name2.includes(name1) ||
      name1.replace(/controller|service|instance|fixed|new|consolidated/, '') === 
      name2.replace(/controller|service|instance|fixed|new|consolidated/, '')
    ) {
      similarNames.push([fileNames[i], fileNames[j]]);
    }
  }
}

if (similarNames.length > 0) {
  console.log('üö® –ù–ê–ô–î–ï–ù–´ –§–ê–ô–õ–´ –° –ü–û–•–û–ñ–ò–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò:');
  similarNames.forEach(([file1, file2], index) => {
    console.log(`\n  ${index + 1}. –ü–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã:`);
    console.log(`    ${file1.fullPath}`);
    console.log(`    ${file2.fullPath}`);
  });
} else {
  console.log('‚úÖ –§–∞–π–ª–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
}

// 4. –ê–ù–ê–õ–ò–ó –°–ü–ï–¶–ò–§–ò–ß–ù–´–• –î–£–ë–õ–ò–ö–ê–¢–û–í UNIFARM
console.log('\nüéØ –ê–ù–ê–õ–ò–ó –°–ü–ï–¶–ò–§–ò–ß–ù–´–• –î–£–ë–õ–ò–ö–ê–¢–û–í UNIFARM:\n');

const controllerFiles = allFiles.filter(f => f.path.includes('controller') && f.ext === '.ts');
const serviceFiles = allFiles.filter(f => f.path.includes('service') && f.ext === '.ts');
const routeFiles = allFiles.filter(f => f.path.includes('route') && f.ext === '.ts');

console.log(`–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–æ: ${controllerFiles.length}`);
controllerFiles.forEach(f => console.log(`  ${f.path}`));

console.log(`\n–°–µ—Ä–≤–∏—Å—ã –Ω–∞–π–¥–µ–Ω–æ: ${serviceFiles.length}`);
serviceFiles.forEach(f => console.log(`  ${f.path}`));

console.log(`\n–§–∞–π–ª—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${routeFiles.length}`);
routeFiles.forEach(f => console.log(`  ${f.path}`));

console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –≠–¢–ê–ü–£ 1:');
console.log(`- –§–∞–π–ª–æ–≤ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏: ${suspiciousFiles.length}`);
console.log(`- –ì—Ä—É–ø–ø —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: ${duplicatesByHash.length}`);
console.log(`- –ü–∞—Ä —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: ${similarNames.length}`);
console.log(`- –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: ${controllerFiles.length}`);
console.log(`- –°–µ—Ä–≤–∏—Å–æ–≤: ${serviceFiles.length}`);
console.log(`- –§–∞–π–ª–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${routeFiles.length}`);

console.log('\n‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É API-–º–∞—Ä—à—Ä—É—Ç–æ–≤...');
