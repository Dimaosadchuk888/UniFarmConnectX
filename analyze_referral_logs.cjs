#!/usr/bin/env node
/**
 * –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ü–æ–∏—Å–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–∞—Ö
 */

const { exec } = require('child_process');
const fs = require('fs');

console.log('üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
console.log('==================================\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
function searchInFiles(pattern, description) {
    return new Promise((resolve) => {
        exec(`grep -r "${pattern}" . --include="*.log" --include="*.ts" --include="*.js" 2>/dev/null | head -10`, 
        (error, stdout, stderr) => {
            console.log(`üîç ${description}:`);
            if (stdout && stdout.trim()) {
                stdout.split('\n').forEach(line => {
                    if (line.trim()) {
                        console.log(`   ‚úÖ ${line.substring(0, 100)}...`);
                    }
                });
            } else {
                console.log(`   ‚ö™ –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
            console.log();
            resolve(stdout);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
function analyzeProjectStructure() {
    console.log('üìÅ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê:');
    
    const keyFiles = [
        'utils/telegram.ts',
        'modules/auth/service.ts', 
        'modules/referral/service.ts',
        'server/index.ts'
    ];
    
    keyFiles.forEach(file => {
        try {
            const stats = fs.statSync(file);
            console.log(`   ‚úÖ ${file} - —Ä–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: ${stats.mtime.toISOString()}`);
        } catch (error) {
            console.log(`   ‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    });
    console.log();
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function main() {
    analyzeProjectStructure();
    
    // –ü–æ–∏—Å–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    await searchInFiles('start_param', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ start_param –≤ –∫–æ–¥–µ');
    await searchInFiles('validation.start_param', '–û–±—Ä–∞—â–µ–Ω–∏—è –∫ validation.start_param');
    await searchInFiles('–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–í–Ø–ó–¨', '–õ–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π');
    await searchInFiles('processReferral', '–í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ processReferral');
    await searchInFiles('referred_by', '–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª–µ–º referred_by');
    
    // –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üìã –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê:');
    
    exec('ps aux | grep tsx | grep -v grep', (error, stdout) => {
        if (stdout) {
            console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (tsx –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω)');
            console.log(`   üìä –ü—Ä–æ—Ü–µ—Å—Å—ã: ${stdout.trim()}`);
        } else {
            console.log('   ‚ö™ tsx –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        console.log();
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    exec('curl -s http://localhost:3000/api/health', (error, stdout) => {
        console.log('üåê –ü–†–û–í–ï–†–ö–ê API:');
        if (error) {
            console.log('   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        } else {
            try {
                const health = JSON.parse(stdout);
                console.log('   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
                console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${health.status}`);
                console.log(`   üìä –í—Ä–µ–º—è: ${health.timestamp}`);
            } catch (e) {
                console.log('   ‚ö†Ô∏è  API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π:', stdout.substring(0, 100));
            }
        }
        console.log();
    });
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ
    console.log('‚è∞ –ê–ù–ê–õ–ò–ó –ù–ï–î–ê–í–ù–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô:');
    exec('find . -name "*.ts" -mtime -1 | head -10', (error, stdout) => {
        if (stdout && stdout.trim()) {
            console.log('   üìÅ –§–∞–π–ª—ã –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:');
            stdout.split('\n').forEach(file => {
                if (file.trim()) {
                    console.log(`      - ${file.trim()}`);
                }
            });
        } else {
            console.log('   ‚ö™ –ù–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        console.log();
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò:');
    console.log('   1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:');
    console.log('      tail -f logs/server.log (–µ—Å–ª–∏ –µ—Å—Ç—å)');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
    console.log('   3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('   4. –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ API —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ initData');
    
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
}

main().catch(console.error);