#!/usr/bin/env tsx
/**
 * üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
 */

import { supabase } from './core/supabase';

async function testDeduplicationFix() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò');
  console.log('='.repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –î–ï–ü–û–ó–ò–¢–û–í (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):');
    
    const { data: recentDeposits } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .eq('currency', 'TON')
      .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false })
      .limit(10);

    console.log(`üìä –ù–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç: ${recentDeposits?.length || 0}`);
    
    if (recentDeposits && recentDeposits.length > 0) {
      console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã:');
      recentDeposits.forEach((tx, i) => {
        console.log(`   ${i + 1}. User ${tx.user_id}: ${tx.amount} ${tx.currency} (${tx.type})`);
        console.log(`      created: ${tx.created_at}`);
        console.log(`      status: ${tx.status}`);
        console.log(`      tx_hash: ${tx.tx_hash_unique?.slice(0, 20) || '–ù–ï–¢'}...`);
        console.log('');
      });
    }

    // 2. –°–∏–º—É–ª—è—Ü–∏—è —É–º–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    console.log('\n2Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –£–ú–ù–û–ô –õ–û–ì–ò–ö–ò –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    const testCases = [
      {
        name: '–ù–ï–î–ê–í–ù–ò–ô –î–£–ë–õ–ò–ö–ê–¢ (–¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è)',
        timeDiffMinutes: 5,
        sameAmount: true,
        sameUser: true,
        existingStatus: 'completed',
        sameType: true
      },
      {
        name: '–°–¢–ê–†–´–ô –î–£–ë–õ–ò–ö–ê–¢ (–¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è)',
        timeDiffMinutes: 15,
        sameAmount: true,
        sameUser: true,
        existingStatus: 'completed',
        sameType: true
      },
      {
        name: '–†–ê–ó–ù–ê–Ø –°–£–ú–ú–ê (–¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è)',
        timeDiffMinutes: 5,
        sameAmount: false,
        sameUser: true,
        existingStatus: 'completed',
        sameType: true
      },
      {
        name: '–ü–†–ï–î–´–î–£–©–ê–Ø –ù–ï–£–î–ê–ß–ù–ê–Ø (–¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è)',
        timeDiffMinutes: 5,
        sameAmount: true,
        sameUser: true,
        existingStatus: 'failed',
        sameType: true
      },
      {
        name: '–†–ê–ó–ù–´–ô –¢–ò–ü (–¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è)',
        timeDiffMinutes: 5,
        sameAmount: true,
        sameUser: true,
        existingStatus: 'completed',
        sameType: false
      }
    ];

    testCases.forEach((testCase, i) => {
      const isRecentDuplicate = testCase.timeDiffMinutes < 10;
      const isSameAmount = testCase.sameAmount;
      const isSameUser = testCase.sameUser;
      const existingNotFailed = testCase.existingStatus !== 'failed' && testCase.existingStatus !== 'error';
      const isSameType = testCase.sameType;

      const shouldBlock = isRecentDuplicate && isSameAmount && isSameUser && existingNotFailed && isSameType;

      console.log(`\n   ${i + 1}. ${testCase.name}:`);
      console.log(`      –í—Ä–µ–º—è: ${testCase.timeDiffMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      console.log(`      –°—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π: ${testCase.existingStatus}`);
      console.log(`      –†–µ—à–µ–Ω–∏–µ: ${shouldBlock ? 'üî¥ –ë–õ–û–ö–ò–†–û–í–ê–¢–¨' : '‚úÖ –†–ê–ó–†–ï–®–ò–¢–¨'}`);
      
      if (!shouldBlock) {
        const reason = !isRecentDuplicate ? 'OLD_TRANSACTION' : 
                      !isSameAmount ? 'DIFFERENT_AMOUNT' :
                      !isSameType ? 'DIFFERENT_TYPE' :
                      !existingNotFailed ? 'PREVIOUS_FAILED' : 'UNKNOWN';
        console.log(`      –ü—Ä–∏—á–∏–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${reason}`);
      }
    });

    // 3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    const problematicUsers = [255, 256, 257, 258, 259, 260, 261, 262, 263, 264];
    
    for (const userId of problematicUsers.slice(0, 3)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 3
      const { data: userDeposits } = await supabase
        .from('transactions')
        .select('id, created_at, amount_ton, status, type, tx_hash_unique')
        .eq('user_id', userId)
        .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
        .eq('currency', 'TON')
        .order('created_at', { ascending: false })
        .limit(5);

      console.log(`\nüë§ User ${userId}: ${userDeposits?.length || 0} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
      
      if (userDeposits && userDeposits.length > 0) {
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã:');
        userDeposits.forEach((tx, i) => {
          console.log(`   ${i + 1}. ${tx.amount_ton} TON (${tx.type}) - ${tx.status}`);
          console.log(`      ${tx.created_at.slice(0, 16)}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        const lastDeposit = userDeposits[0];
        const minutesSinceLastDeposit = Math.round((Date.now() - new Date(lastDeposit.created_at).getTime()) / (1000 * 60));
        
        console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${minutesSinceLastDeposit} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        console.log(`   ‚úÖ –ù–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: ${minutesSinceLastDeposit > 10 ? '–†–ê–ó–†–ï–®–ï–ù–´' : '–≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'}`);
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('');
    console.log('‚úÖ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–ê');
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (>10 –º–∏–Ω—É—Ç) –±–æ–ª—å—à–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è');
    console.log('‚úÖ –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–º –ø–æ–ø—ã—Ç–∫–∞–º');
    console.log('‚úÖ –†–∞–∑–Ω—ã–µ —Å—É–º–º—ã/—Ç–∏–ø—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è (–≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç)');
    console.log('');
    console.log('üìä –û–ñ–ò–î–ê–ï–ú–û–ï –£–õ–£–ß–®–ï–ù–ò–ï:');
    console.log('- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ä–∞—Å—Ç–∏ —Å 22.2% –¥–æ >95%');
    console.log('- TON Boost –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('- –ò—Å—á–µ–∑–Ω—É—Ç –∂–∞–ª–æ–±—ã –Ω–∞ "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ" –¥–µ–ø–æ–∑–∏—Ç—ã');
    console.log('='.repeat(80));

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
  }
}

testDeduplicationFix().catch(console.error);