/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–£–¢–ê–ù–ò–¶–´ –ê–ö–ö–ê–£–ù–¢–û–í USER #25 –∏ #227
 * –í—ã—è—Å–Ω—è–µ–º –ø–æ—á–µ–º—É –¥–µ–ø–æ–∑–∏—Ç —Å User #25 –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞ User #227
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseAccountConfusion() {
  console.log('üß© –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–£–¢–ê–ù–ò–¶–´ –ê–ö–ö–ê–£–ù–¢–û–í USER #25 –∏ #227');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ê–•
    console.log('\nüë§ –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ê–•:');
    console.log('='.repeat(40));
    
    const { data: users } = await supabase
      .from('users')
      .select('*')
      .in('id', [25, 227])
      .order('id');
    
    if (users) {
      users.forEach(user => {
        console.log(`\nüìã USER ${user.id}:`);
        console.log(`   Telegram ID: ${user.telegram_id}`);
        console.log(`   Username: ${user.username}`);
        console.log(`   Ref Code: ${user.ref_code}`);
        console.log(`   Referred By: ${user.referred_by}`);
        console.log(`   TON Balance: ${user.balance_ton}`);
        console.log(`   UNI Balance: ${user.balance_uni}`);
        console.log(`   Created: ${user.created_at}`);
        console.log(`   Last Active: ${user.last_active}`);
        console.log(`   Wallet Address: ${user.wallet_address || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   Device ID: ${user.device_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   Session Token: ${user.session_token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (user.telegram_id === 425855744) {
          console.log(`   üéØ –≠–¢–û –í–ê–®–ò–• TELEGRAM ID!`);
        }
        if (user.username === 'DimaOsadchuk') {
          console.log(`   üéØ –≠–¢–û –í–ê–® USERNAME!`);
        }
      });
    }
    
    // 2. –ê–ù–ê–õ–ò–ó –°–û–í–ü–ê–î–ï–ù–ò–ô
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–û–í–ü–ê–î–ï–ù–ò–ô –ú–ï–ñ–î–£ –ê–ö–ö–ê–£–ù–¢–ê–ú–ò:');
    console.log('='.repeat(40));
    
    if (users && users.length >= 2) {
      const user25 = users.find(u => u.id === 25);
      const user227 = users.find(u => u.id === 227);
      
      console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–õ–ï–ô:');
      const fieldsToCompare = [
        'telegram_id', 'username', 'wallet_address', 'device_id', 
        'ref_code', 'referred_by', 'session_token'
      ];
      
      fieldsToCompare.forEach(field => {
        const val25 = user25?.[field];
        const val227 = user227?.[field];
        const match = val25 === val227;
        const status = match ? '‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' : '‚ùå –†–ê–ó–õ–ò–ß–ê–ï–¢–°–Ø';
        
        console.log(`   ${field}:`);
        console.log(`      User 25: ${val25 || 'null'}`);
        console.log(`      User 227: ${val227 || 'null'}`);
        console.log(`      ${status}`);
        
        if (match && val25) {
          console.log(`      üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï!`);
        }
      });
    }
    
    // 3. –ò–°–¢–û–†–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í
    console.log('\n‚è∞ –ò–°–¢–û–†–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í:');
    console.log('='.repeat(40));
    
    if (users) {
      users.forEach(user => {
        const createdTime = new Date(user.created_at);
        const daysDiff = Math.floor((Date.now() - createdTime.getTime()) / (1000 * 60 * 60 * 24));
        
        console.log(`\nUser ${user.id}:`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${createdTime.toLocaleString()}`);
        console.log(`   –î–∞–≤–Ω–æ—Å—Ç—å: ${daysDiff} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
        console.log(`   Telegram ID: ${user.telegram_id}`);
      });
    }
    
    // 4. –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\nüíé –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 2 –ß–ê–°–ê:');
    console.log('='.repeat(40));
    
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
    
    for (const userId of [25, 227]) {
      const { data: tonTx } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .eq('currency', 'TON')
        .gte('created_at', twoHoursAgo)
        .order('created_at', { ascending: false });
      
      console.log(`\nüë§ USER ${userId} TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (${tonTx?.length || 0}):`);
      
      if (tonTx && tonTx.length > 0) {
        tonTx.forEach((tx, i) => {
          const time = new Date(tx.created_at);
          const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
          
          console.log(`   ${i + 1}. ID: ${tx.id}`);
          console.log(`      –¢–∏–ø: ${tx.type}`);
          console.log(`      –°—É–º–º–∞: ${tx.amount} TON`);
          console.log(`      –í—Ä–µ–º—è: ${time.toLocaleString()} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description.substring(0, 100)}...`);
          console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BOC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          if (tx.description.includes('te6')) {
            console.log(`      üîç BOC –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`);
            console.log(`      üìä –ê–Ω–∞–ª–∏–∑ amount: ${tx.amount} (–æ–∂–∏–¥–∞–ª–æ—Å—å 0.22)`);
            
            if (parseFloat(tx.amount) === 0) {
              console.log(`      üö® –ö–†–ò–¢–ò–ß–ù–û: amount = 0, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0.22!`);
            }
          }
          
          if (tx.metadata) {
            console.log(`      Metadata: ${JSON.stringify(tx.metadata)}`);
          }
        });
      } else {
        console.log(`   ‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
    }
    
    // 5. –ü–û–ò–°–ö –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô
    console.log('\nüîó –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô:');
    console.log('='.repeat(40));
    
    const { data: referrals } = await supabase
      .from('referrals')
      .select('*')
      .or(`user_id.in.(25,227),referred_user_id.in.(25,227)`);
    
    console.log(`\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è User 25/227: ${referrals?.length || 0}`);
    
    if (referrals && referrals.length > 0) {
      referrals.forEach((ref, i) => {
        console.log(`   ${i + 1}. User ${ref.user_id} -> User ${ref.referred_user_id}`);
        console.log(`      Level: ${ref.level}`);
        console.log(`      Created: ${ref.created_at}`);
      });
    }
    
    // 6. –ü–†–û–í–ï–†–ö–ê WALLET ADDRESSES
    console.log('\nüíº –ê–ù–ê–õ–ò–ó –ö–û–®–ï–õ–¨–ö–û–í:');
    console.log('='.repeat(40));
    
    if (users) {
      const walletsUsed = new Set();
      
      users.forEach(user => {
        console.log(`\nUser ${user.id}:`);
        console.log(`   Wallet Address: ${user.wallet_address || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        
        if (user.wallet_address) {
          if (walletsUsed.has(user.wallet_address)) {
            console.log(`   üö® –î–£–ë–õ–ò–†–£–Æ–©–ò–ô –ö–û–®–ï–õ–ï–ö! –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
          } else {
            walletsUsed.add(user.wallet_address);
          }
        }
      });
    }
    
    // 7. –ü–û–ò–°–ö –í–û–ó–ú–û–ñ–ù–´–• –ü–†–ò–ß–ò–ù –ü–£–¢–ê–ù–ò–¶–´
    console.log('\nüß¨ –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–£–¢–ê–ù–ò–¶–´:');
    console.log('='.repeat(40));
    
    if (users && users.length >= 2) {
      const user25 = users.find(u => u.id === 25);
      const user227 = users.find(u => u.id === 227);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      if (user25?.telegram_id === user227?.telegram_id) {
        console.log('üö® –ü–†–ò–ß–ò–ù–ê 1: –û–¥–∏–Ω–∞–∫–æ–≤—ã–π Telegram ID - —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ –¥—É–±–ª–∏–∫–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
      
      if (user25?.username === user227?.username) {
        console.log('üö® –ü–†–ò–ß–ò–ù–ê 2: –û–¥–∏–Ω–∞–∫–æ–≤—ã–π username - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—É—Ç–∞–Ω–∏—Ü–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
      
      if (user25?.wallet_address === user227?.wallet_address && user25?.wallet_address) {
        console.log('üö® –ü–†–ò–ß–ò–ù–ê 3: –û–¥–∏–Ω–∞–∫–æ–≤—ã–π wallet_address - TON Connect –ø—É—Ç–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã');
      }
      
      if (user25?.ref_code === user227?.ref_code) {
        console.log('üö® –ü–†–ò–ß–ò–ù–ê 4: –û–¥–∏–Ω–∞–∫–æ–≤—ã–π ref_code - –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
      const date25 = new Date(user25?.created_at || 0);
      const date227 = new Date(user227?.created_at || 0);
      const timeDiff = Math.abs(date25.getTime() - date227.getTime()) / 1000 / 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö
      
      if (timeDiff < 60) {
        console.log(`üö® –ü–†–ò–ß–ò–ù–ê 5: –ê–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–∞–∑–Ω–∏—Ü–µ–π ${Math.floor(timeDiff)} –º–∏–Ω—É—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ`);
      }
    }
    
    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('='.repeat(20));
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ–ª–µ–π –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
    console.log('2. –í—ã—è—Å–Ω–∏—Ç—å –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ TON Connect');
    console.log('3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—á–µ–º—É amount = 0 –≤–º–µ—Å—Ç–æ 0.22 TON');
    console.log('4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

diagnoseAccountConfusion().catch(console.error);