/**
 * üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */

import { supabase } from './core/supabase';

async function finalIndexVerification(): Promise<void> {
  console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ò–ù–î–ï–ö–°–ê');
  console.log('=' .repeat(70));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–°—Ç–∞—Ç—É—Å: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
  console.log('=' .repeat(70));

  try {
    // –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ò–ù–î–ï–ö–°–ê –í –ë–î
    console.log('\nüóÑÔ∏è –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ò–ù–î–ï–ö–°–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('-' .repeat(50));
    
    const { data: indexes, error: indexError } = await supabase.rpc('get_table_indexes', { 
      table_name: 'transactions' 
    });
    
    if (!indexError && indexes) {
      console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions: ${indexes.length}`);
      
      const txHashIndexes = indexes.filter((idx: any) => 
        idx.indexname && idx.indexname.includes('tx_hash')
      );
      
      console.log(`   üîç –ò–Ω–¥–µ–∫—Å–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å tx_hash: ${txHashIndexes.length}`);
      
      if (txHashIndexes.length > 0) {
        console.log('\n   üìã –ù–ê–ô–î–ï–ù–ù–´–ï –ò–ù–î–ï–ö–°–´:');
        txHashIndexes.forEach((idx: any) => {
          console.log(`     - ${idx.indexname}: ${idx.indexdef?.substring(0, 80)}...`);
        });
      }
    } else {
      console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö —á–µ—Ä–µ–∑ RPC');
      console.log(`   üìù –û—à–∏–±–∫–∞: ${indexError?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}`);
    }

    // –≠–¢–ê–ü 2: –¢–ï–°–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –° –ù–û–í–´–ú HASH
    console.log('\nüß™ –≠–¢–ê–ü 2: –¢–ï–°–¢ –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø');
    console.log('-' .repeat(50));
    
    const testTxHash = 'final_verification_' + Date.now();
    console.log(`   üîë –¢–µ—Å—Ç–æ–≤—ã–π hash: ${testTxHash}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: testUser } = await supabase
      .from('users')
      .select('id')
      .limit(1)
      .single();
      
    if (!testUser) {
      console.log('   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log(`   üë§ –¢–µ—Å—Ç–æ–≤—ã–π User ID: ${testUser.id}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('\n   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏...');
    const { data: firstRecord, error: firstError } = await supabase
      .from('transactions')
      .insert({
        user_id: testUser.id,
        type: 'FARMING_REWARD',
        amount: '0.001',
        amount_uni: '0',
        amount_ton: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'Final verification test - record 1',
        tx_hash_unique: testTxHash,
        metadata: { test: true, final_verification: true, attempt: 1 }
      })
      .select('id, created_at')
      .single();
      
    if (firstError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: ${firstError.message}`);
      return;
    }
    
    console.log(`   ‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ID ${firstRecord.id}`);
    console.log(`   üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(firstRecord.created_at).toLocaleString()}`);
    
    // –ü–∞—É–∑–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n   ‚è±Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç
    console.log('\n   üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–û–ß–ù–û–ì–û –¥—É–±–ª–∏–∫–∞—Ç–∞...');
    const { data: duplicateRecord, error: duplicateError } = await supabase
      .from('transactions')
      .insert({
        user_id: testUser.id,
        type: 'FARMING_REWARD',
        amount: '0.002',
        amount_uni: '0',
        amount_ton: '0.002',
        currency: 'TON',
        status: 'completed',
        description: 'Final verification test - DUPLICATE (should fail)',
        tx_hash_unique: testTxHash, // –¢–û–ñ–ï –°–ê–ú–û–ï –ó–ù–ê–ß–ï–ù–ò–ï!
        metadata: { test: true, final_verification: true, attempt: 2, is_duplicate: true }
      })
      .select('id, created_at')
      .single();
      
    // –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    console.log('\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
    
    if (duplicateError) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      const errorMessage = duplicateError.message.toLowerCase();
      const isDuplicateError = errorMessage.includes('duplicate') || 
                              errorMessage.includes('unique') ||
                              errorMessage.includes('constraint') ||
                              errorMessage.includes('already exists') ||
                              errorMessage.includes('violates');
                              
      if (isDuplicateError) {
        console.log('   üéâ –û–¢–õ–ò–ß–ù–û! –ò–ù–î–ï–ö–° –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
        console.log(`   üõ°Ô∏è –û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: ${duplicateError.message}`);
        console.log('   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –ê–ö–¢–ò–í–ù–ê');
        console.log('   ‚úÖ –ù–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
      } else {
        console.log(`   ‚ùì –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ): ${duplicateError.message}`);
        console.log('   üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º');
      }
    } else if (duplicateRecord) {
      console.log('   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –î–£–ë–õ–ò–ö–ê–¢ –ë–´–õ –°–û–ó–î–ê–ù!');
      console.log(`   üìù ID –¥—É–±–ª–∏–∫–∞—Ç–∞: ${duplicateRecord.id}`);
      console.log(`   üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(duplicateRecord.created_at).toLocaleString()}`);
      console.log('   üö® –ò–ù–î–ï–ö–° –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–õ–ò –ù–ï –°–û–ó–î–ê–õ–°–Ø');
    }

    // –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ó–ê–ü–ò–°–ï–ô
    console.log('\nüìà –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ó–ê–ü–ò–°–ï–ô –° TX_HASH');
    console.log('-' .repeat(50));
    
    const { data: recentRecords } = await supabase
      .from('transactions')
      .select('id, user_id, tx_hash_unique, amount_ton, created_at, description')
      .not('tx_hash_unique', 'is', null)
      .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false });
      
    console.log(`   üìä –ó–∞–ø–∏—Å–µ–π —Å tx_hash –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç: ${recentRecords?.length || 0}`);
    
    if (recentRecords && recentRecords.length > 1) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ hash –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
      const hashGroups: Record<string, any[]> = {};
      recentRecords.forEach(record => {
        if (!hashGroups[record.tx_hash_unique]) {
          hashGroups[record.tx_hash_unique] = [];
        }
        hashGroups[record.tx_hash_unique].push(record);
      });
      
      const duplicateGroups = Object.entries(hashGroups).filter(([hash, records]) => records.length > 1);
      
      if (duplicateGroups.length === 0) {
        console.log('   ‚úÖ –°—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥—É–±–ª–µ–π –ù–ï–¢');
        console.log('   üéØ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ');
      } else {
        console.log(`   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π —Å—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:`);
        duplicateGroups.forEach(([hash, records]) => {
          if (!hash.includes('test') && !hash.includes('verification')) {
            console.log(`     Hash: ${hash.substring(0, 30)}... (${records.length} –∑–∞–ø–∏—Å–µ–π)`);
            console.log(`     –í—Ä–µ–º–µ–Ω–∞: ${records.map(r => new Date(r.created_at).toLocaleTimeString()).join(', ')}`);
          }
        });
      }
    }

    // –≠–¢–ê–ü 4: –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
    console.log('\nüßπ –≠–¢–ê–ü 4: –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
    console.log('-' .repeat(50));
    
    const { error: cleanupError } = await supabase
      .from('transactions')
      .delete()
      .eq('tx_hash_unique', testTxHash);
      
    if (cleanupError) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${cleanupError.message}`);
    } else {
      console.log('   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã');
    }

    // –≠–¢–ê–ü 5: –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
    console.log('\nüéØ –≠–¢–ê–ü 5: –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï');
    console.log('-' .repeat(50));
    
    const indexWorking = duplicateError && (
      duplicateError.message.toLowerCase().includes('duplicate') ||
      duplicateError.message.toLowerCase().includes('unique') ||
      duplicateError.message.toLowerCase().includes('constraint')
    );
    
    if (indexWorking) {
      console.log('   üéâ –£–°–ü–ï–•! –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ò–ù–î–ï–ö–° –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ User 25 –±–æ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è');
      console.log('   ‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –±—É–¥—É—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏');
      
      console.log('\n   üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
      console.log('   - –ó–∞—â–∏—Ç–∞: Database-level constraint (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)');
      console.log('   - –ü–æ–∫—Ä—ã—Ç–∏–µ: –í—Å–µ –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å tx_hash_unique');
      console.log('   - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ');
      console.log('   - –û–±—Ä–∞—Ç–∏–º–æ—Å—Ç—å: –ü–æ–ª–Ω–∞—è (—á–µ—Ä–µ–∑ DROP INDEX)');
      
      console.log('\n   üõ°Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      console.log('   1. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
      console.log('   2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—É–±–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω');
      console.log('   3. –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏');
      
    } else {
      console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω–¥–µ–∫—Å –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   üîß –¢–†–ï–ë–£–ï–¢–°–Ø: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
      console.log('   üí° –í–ê–†–ò–ê–ù–¢–´:');
      console.log('   1. –£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∑–∞—â–∏—Ç—ã –≤ –∫–æ–¥–µ');
      console.log('   2. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞');
      console.log('   3. –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π + –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞');
    }
    
    console.log('\nüíæ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    console.log('\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
    console.log('   - –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–∏');
    console.log('   - –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
    console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
finalIndexVerification()
  .then(() => {
    console.log('\nüèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    process.exit(1);
  });