import { supabase } from './core/supabase.js';

async function auditUser74TonBoost() {
  console.log('üîç –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–£–î–ò–¢ TON BOOST - USER ID 74\n');
  console.log('='*60 + '\n');
  
  const userId = 74;
  
  // 1. –ü–†–û–í–ï–†–ö–ê TON BOOST –î–ï–ü–û–ó–ò–¢–û–í
  console.log('1Ô∏è‚É£ TON BOOST –î–ï–ü–û–ó–ò–¢–´:\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single();
    
  console.log(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å TON: ${user?.balance_ton || 0}`);
  console.log(`Telegram ID: ${user?.telegram_id}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId);
    
  if (tonFarmingData && tonFarmingData.length > 0) {
    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ TON Boost –∑–∞–ø–∏—Å–µ–π: ${tonFarmingData.length}`);
    tonFarmingData.forEach((data, index) => {
      console.log(`\n–ó–∞–ø–∏—Å—å #${index + 1}:`);
      console.log(`- ID: ${data.id}`);
      console.log(`- Boost –∞–∫—Ç–∏–≤–µ–Ω: ${data.boost_active ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`- –ü–∞–∫–µ—Ç ID: ${data.boost_package_id}`);
      console.log(`- –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${data.farming_balance}`);
      console.log(`- –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data.total_earned}`);
      console.log(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(data.farming_last_update).toLocaleString()}`);
    });
  } else {
    console.log('‚ùå TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ Boost –ø–∞–∫–µ—Ç–æ–≤
  const { data: boostPurchases } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'BOOST_PURCHASE')
    .order('created_at', { ascending: false });
    
  console.log(`\nüì¶ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ Boost –ø–∞–∫–µ—Ç–æ–≤: ${boostPurchases?.length || 0}`);
  if (boostPurchases && boostPurchases.length > 0) {
    let totalBoostSpent = 0;
    boostPurchases.forEach(tx => {
      console.log(`- ${new Date(tx.created_at).toLocaleDateString()}: -${tx.amount_ton} TON`);
      totalBoostSpent += parseFloat(tx.amount_ton || '0');
    });
    console.log(`üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ Boost: ${totalBoostSpent} TON`);
  }
  
  // 2. –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô
  console.log('\n' + '='*60);
  console.log('\n2Ô∏è‚É£ –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ü–û TON BOOST:\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
  const { data: farmingRewards } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'FARMING_REWARD')
    .not('metadata->>original_type', 'is', null)
    .order('created_at', { ascending: false });
    
  console.log(`üìà –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON Boost: ${farmingRewards?.length || 0}`);
  
  if (farmingRewards && farmingRewards.length > 0) {
    let totalEarned = 0;
    let lastReward = null;
    let firstReward = null;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    farmingRewards.forEach((tx, index) => {
      if (index === 0) lastReward = tx;
      if (index === farmingRewards.length - 1) firstReward = tx;
      totalEarned += parseFloat(tx.amount_ton || '0');
    });
    
    console.log(`\nüíµ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${totalEarned.toFixed(6)} TON`);
    console.log(`üìÖ –ü–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${firstReward ? new Date(firstReward.created_at).toLocaleString() : '–ù/–î'}`);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${lastReward ? new Date(lastReward.created_at).toLocaleString() : '–ù/–î'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    if (farmingRewards.length > 1) {
      console.log('\nüïê –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):');
      for (let i = 0; i < Math.min(9, farmingRewards.length - 1); i++) {
        const current = new Date(farmingRewards[i].created_at);
        const next = new Date(farmingRewards[i + 1].created_at);
        const diffMinutes = (current.getTime() - next.getTime()) / (1000 * 60);
        console.log(`  –ò–Ω—Ç–µ—Ä–≤–∞–ª ${i+1}: ${diffMinutes.toFixed(1)} –º–∏–Ω—É—Ç`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    console.log('\nüí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:');
    farmingRewards.slice(0, 5).forEach(tx => {
      console.log(`  ${new Date(tx.created_at).toLocaleString()}: +${tx.amount_ton} TON`);
    });
  }
  
  // 3. –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø
  console.log('\n' + '='*60);
  console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò:\n');
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥
  if (user?.balance_ton) {
    const deposit = parseFloat(user.balance_ton);
    const dailyRate = 0.01; // 1% –≤ –¥–µ–Ω—å
    const fiveMinuteRate = dailyRate / 288;
    const expectedFiveMinuteIncome = deposit * fiveMinuteRate;
    
    console.log(`üìä –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞:`);
    console.log(`- –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${deposit.toFixed(6)} TON`);
    console.log(`- –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${dailyRate * 100}%`);
    console.log(`- –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${expectedFiveMinuteIncome.toFixed(6)} TON`);
    console.log(`- –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: ${(deposit * dailyRate).toFixed(6)} TON`);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º
    if (farmingRewards && farmingRewards.length > 0) {
      const lastAmount = parseFloat(farmingRewards[0].amount_ton || '0');
      const difference = Math.abs(lastAmount - expectedFiveMinuteIncome);
      const percentDiff = (difference / expectedFiveMinuteIncome) * 100;
      
      console.log(`\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º:`);
      console.log(`- –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ: ${lastAmount.toFixed(6)} TON`);
      console.log(`- –û–∂–∏–¥–∞–µ–º–æ–µ: ${expectedFiveMinuteIncome.toFixed(6)} TON`);
      console.log(`- –†–∞–∑–Ω–∏—Ü–∞: ${difference.toFixed(6)} TON (${percentDiff.toFixed(2)}%)`);
      
      if (percentDiff < 1) {
        console.log('‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º');
      } else {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö');
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã:');
  if (farmingRewards && farmingRewards.length > 0) {
    const timestamps = farmingRewards.map(tx => tx.created_at);
    const uniqueTimestamps = new Set(timestamps);
    
    if (timestamps.length === uniqueTimestamps.size) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
    } else {
      console.log(`‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: ${timestamps.length - uniqueTimestamps.size} –∑–∞–ø–∏—Å–µ–π`);
    }
  }
  
  console.log('\n' + '='*60);
  console.log('\n‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù');
}

auditUser74TonBoost();