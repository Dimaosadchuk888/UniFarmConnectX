/**
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π UniFarm
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeTransactionsModule() {
  console.log('üü® –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô UNIFARM');
  console.log('='.repeat(60));
  
  try {
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã transactions
    console.log('\nüìÑ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ transactions:');
    console.log('-'.repeat(40));
    
    const { data: sampleTransaction, error: sampleError } = await supabase
      .from('transactions')
      .select('*')
      .limit(1)
      .single();
    
    if (sampleError && sampleError.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', sampleError);
      return;
    }
    
    if (sampleTransaction) {
      console.log('‚úÖ –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions:');
      Object.keys(sampleTransaction).forEach(field => {
        console.log(`   ‚Ä¢ ${field}: ${typeof sampleTransaction[field]} (–∑–Ω–∞—á–µ–Ω–∏–µ: ${sampleTransaction[field]})`);
      });
    } else {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ transactions –ø—É—Å—Ç–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º');
    }
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(40));
    
    const { count: totalCount, error: countError } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', countError);
    } else {
      console.log(`‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalCount}`);
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(40));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤
    const { data: allTransactions, error: allError } = await supabase
      .from('transactions')
      .select('id, type, amount_uni, amount_ton, currency, status, description, created_at, user_id, metadata, source, tx_hash, source_user_id, action')
      .order('created_at', { ascending: false });
    
    if (allError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError);
      return;
    }
    
    if (!allTransactions || allTransactions.length === 0) {
      console.log('‚ö†Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const typeStats = {};
    allTransactions.forEach(tx => {
      if (!typeStats[tx.type]) {
        typeStats[tx.type] = {
          count: 0,
          totalAmount: 0,
          currencies: new Set(),
          statuses: new Set(),
          examples: []
        };
      }
      
      typeStats[tx.type].count++;
      typeStats[tx.type].currencies.add(tx.currency);
      typeStats[tx.type].statuses.add(tx.status);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
      if (typeStats[tx.type].examples.length < 3) {
        const primaryAmount = tx.amount_uni > 0 ? tx.amount_uni : tx.amount_ton;
        const primaryCurrency = tx.amount_uni > 0 ? 'UNI' : 'TON';
        
        typeStats[tx.type].examples.push({
          id: tx.id,
          amount: primaryAmount,
          currency: primaryCurrency,
          description: tx.description,
          created_at: tx.created_at,
          user_id: tx.user_id
        });
      }
    });
    
    // 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    const expectedTypes = [
      'DAILY_BONUS',
      'MISSION_REWARD', 
      'WITHDRAWAL',
      'DEPOSIT',
      'REFERRAL_REWARD',
      'FARMING_REWARD',
      'TON_BOOST_INCOME',
      'PURCHASE_PACKAGE'
    ];
    
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú:');
    console.log('-'.repeat(40));
    
    for (const expectedType of expectedTypes) {
      const stats = typeStats[expectedType];
      
      console.log(`\nüìå ${expectedType}:`);
      
      if (stats) {
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${stats.count}`);
        console.log(`   üí∞ –í–∞–ª—é—Ç—ã: ${Array.from(stats.currencies).join(', ')}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å—ã: ${Array.from(stats.statuses).join(', ')}`);
        
        if (stats.examples.length > 0) {
          console.log(`   üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:`);
          stats.examples.forEach((example, index) => {
            console.log(`      ${index + 1}. user_id=${example.user_id}, amount=${example.amount} ${example.currency}`);
            console.log(`         description: "${example.description}"`);
            console.log(`         created_at: ${example.created_at}`);
          });
        }
      } else {
        console.log(`   ‚ùå –ó–∞–ø–∏—Å–∏ –ù–ï –ù–ê–ô–î–ï–ù–´`);
      }
    }
    
    // 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã (–Ω–µ –∏–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞)
    console.log('\nüÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(40));
    
    const additionalTypes = Object.keys(typeStats).filter(type => !expectedTypes.includes(type));
    
    if (additionalTypes.length > 0) {
      additionalTypes.forEach(type => {
        const stats = typeStats[type];
        console.log(`üìå ${type}: ${stats.count} –∑–∞–ø–∏—Å–µ–π`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ —Ç–∏–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º');
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('\nüö® –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –ó–ê–ü–ò–°–ï–ô:');
    console.log('-'.repeat(40));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å amount = 0
    const zeroAmountTx = allTransactions.filter(tx => 
      (tx.amount_uni === 0 || tx.amount_uni === '0') && 
      (tx.amount_ton === 0 || tx.amount_ton === '0')
    );
    
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏: ${zeroAmountTx.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    const noDescriptionTx = allTransactions.filter(tx => !tx.description || tx.description.trim() === '');
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è: ${noDescriptionTx.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const validStatuses = ['completed', 'pending', 'failed', 'cancelled'];
    const invalidStatusTx = allTransactions.filter(tx => !validStatuses.includes(tx.status));
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏: ${invalidStatusTx.length}`);
    
    // 7. –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüë• –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú:');
    console.log('-'.repeat(40));
    
    const userStats = {};
    allTransactions.forEach(tx => {
      if (!userStats[tx.user_id]) {
        userStats[tx.user_id] = {
          totalTransactions: 0,
          types: new Set()
        };
      }
      userStats[tx.user_id].totalTransactions++;
      userStats[tx.user_id].types.add(tx.type);
    });
    
    const topUsers = Object.entries(userStats)
      .sort((a, b) => b[1].totalTransactions - a[1].totalTransactions)
      .slice(0, 5);
    
    console.log('üèÜ –¢–û–ü-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    topUsers.forEach(([userId, stats], index) => {
      console.log(`   ${index + 1}. User ID ${userId}: ${stats.totalTransactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ç–∏–ø—ã: ${Array.from(stats.types).join(', ')})`);
    });
    
    // 8. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\n‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
    console.log('='.repeat(60));
    
    const foundTypes = Object.keys(typeStats);
    const missingTypes = expectedTypes.filter(type => !foundTypes.includes(type));
    
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${foundTypes.length}`);
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`);
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(userStats).length}`);
    
    if (missingTypes.length > 0) {
      console.log(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã: ${missingTypes.join(', ')}`);
    } else {
      console.log('‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    // –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    const readinessScore = ((foundTypes.length / expectedTypes.length) * 100).toFixed(1);
    console.log(`\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ú–û–î–£–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${readinessScore}%`);
    
    if (readinessScore >= 90) {
      console.log('üü¢ –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º');
    } else if (readinessScore >= 70) {
      console.log('üü° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
    } else {
      console.log('üî¥ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeTransactionsModule().catch(console.error);