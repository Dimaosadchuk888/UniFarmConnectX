#!/usr/bin/env tsx

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TON Connect ‚Üí Backend API flow
 * –ü–æ–∏—Å–∫ —Ä–∞–∑—Ä—ã–≤–∞ –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

console.log('üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò TON –î–ï–ü–û–ó–ò–¢–û–í');
console.log('üìÖ 28.07.2025 - User ID 25: 3 TON –∏—Å—á–µ–∑–ª–∏ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
console.log('='.repeat(80));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã flow
import fs from 'fs';

function analyzeIntegrationFlow() {
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON CONNECT SERVICE');
  console.log('-'.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º tonConnectService.ts
  const tonConnectPath = 'client/src/services/tonConnectService.ts';
  if (fs.existsSync(tonConnectPath)) {
    const content = fs.readFileSync(tonConnectPath, 'utf8');
    
    // –ò—â–µ–º –≤—ã–∑–æ–≤ backend API –ø–æ—Å–ª–µ sendTransaction
    console.log('üîç –ü–æ–∏—Å–∫ backend API –≤—ã–∑–æ–≤–æ–≤ –ø–æ—Å–ª–µ sendTransaction...');
    
    if (content.includes('sendTonTransaction')) {
      const lines = content.split('\n');
      const sendTxLine = lines.findIndex(line => line.includes('export async function sendTonTransaction'));
      
      if (sendTxLine !== -1) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 100 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        const functionLines = lines.slice(sendTxLine, sendTxLine + 100);
        
        let hasApiCall = false;
        let apiCallLine = '';
        
        functionLines.forEach((line, index) => {
          if (line.includes('fetch') && line.includes('/api/v2/wallet/ton-deposit')) {
            hasApiCall = true;
            apiCallLine = line.trim();
          }
        });
        
        if (hasApiCall) {
          console.log('‚úÖ Backend API –≤—ã–∑–æ–≤ –Ω–∞–π–¥–µ–Ω:');
          console.log(`   ${apiCallLine}`);
        } else {
          console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend API –≤—ã–∑–æ–≤ –ù–ï –ù–ê–ô–î–ï–ù!');
          console.log('   sendTonTransaction –ù–ï —É–≤–µ–¥–æ–º–ª—è–µ—Ç backend –æ –¥–µ–ø–æ–∑–∏—Ç–µ');
        }
      }
    }
  }
  
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON DEPOSIT CARD');
  console.log('-'.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TonDepositCard.tsx
  const depositCardPath = 'client/src/components/wallet/TonDepositCard.tsx';
  if (fs.existsSync(depositCardPath)) {
    const content = fs.readFileSync(depositCardPath, 'utf8');
    
    console.log('üîç –ü–æ–∏—Å–∫ backend —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ TonDepositCard...');
    
    const hasBackendCall = content.includes('/api/v2/wallet/ton-deposit');
    const hasSuccessHandler = content.includes('result.status === \'success\'');
    
    if (hasBackendCall && hasSuccessHandler) {
      console.log('‚úÖ Backend —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ TonDepositCard');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ TonDepositCard');
      console.log(`   Backend call: ${hasBackendCall ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   Success handler: ${hasSuccessHandler ? '–î–ê' : '–ù–ï–¢'}`);
    }
  }
  
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó WALLET SERVICE');
  console.log('-'.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º WalletService
  const walletServicePath = 'modules/wallet/service.ts';
  if (fs.existsSync(walletServicePath)) {
    const content = fs.readFileSync(walletServicePath, 'utf8');
    
    console.log('üîç –ü–æ–∏—Å–∫ processTonDeposit –º–µ—Ç–æ–¥–∞...');
    
    if (content.includes('processTonDeposit')) {
      console.log('‚úÖ processTonDeposit –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥
      const lines = content.split('\n');
      const methodStart = lines.findIndex(line => line.includes('processTonDeposit'));
      
      if (methodStart !== -1) {
        const methodLines = lines.slice(methodStart, methodStart + 50);
        
        let hasTransactionCreation = false;
        let hasBalanceUpdate = false;
        
        methodLines.forEach(line => {
          if (line.includes('createTransaction') || line.includes('TON_DEPOSIT')) {
            hasTransactionCreation = true;
          }
          if (line.includes('updateBalance') || line.includes('addBalance')) {
            hasBalanceUpdate = true;
          }
        });
        
        console.log(`   Transaction creation: ${hasTransactionCreation ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`   Balance update: ${hasBalanceUpdate ? '–î–ê' : '–ù–ï–¢'}`);
      }
    } else {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: processTonDeposit –º–µ—Ç–æ–¥ –ù–ï –ù–ê–ô–î–ï–ù!');
    }
  }
  
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TRANSACTION SERVICE');
  console.log('-'.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TransactionService –º–∞–ø–ø–∏–Ω–≥
  const transactionServicePath = 'core/TransactionService.ts';
  if (fs.existsSync(transactionServicePath)) {
    const content = fs.readFileSync(transactionServicePath, 'utf8');
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ TON_DEPOSIT –º–∞–ø–ø–∏–Ω–≥–∞...');
    
    if (content.includes('TON_DEPOSIT')) {
      // –ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥
      const mappingMatch = content.match(/'TON_DEPOSIT':\s*'([^']+)'/);
      if (mappingMatch) {
        console.log(`‚úÖ TON_DEPOSIT –º–∞–ø–ø–∏–Ω–≥: TON_DEPOSIT ‚Üí ${mappingMatch[1]}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º shouldUpdateBalance
      if (content.includes('shouldUpdateBalance')) {
        const lines = content.split('\n');
        const shouldUpdateLine = lines.find(line => 
          line.includes('TON_DEPOSIT') && line.includes('shouldUpdateBalance')
        );
        
        if (shouldUpdateLine) {
          console.log('‚úÖ TON_DEPOSIT –≤–∫–ª—é—á–µ–Ω –≤ shouldUpdateBalance');
        } else {
          console.log('‚ö†Ô∏è TON_DEPOSIT –º–æ–∂–µ—Ç –ù–ï –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        }
      }
    } else {
      console.log('‚ùå TON_DEPOSIT –º–∞–ø–ø–∏–Ω–≥ –ù–ï –ù–ê–ô–î–ï–ù!');
    }
  }
  
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø TON');
  console.log('-'.repeat(50));
  
  const tonVars = [
    'TELEGRAM_WEBAPP_URL',
    'APP_DOMAIN', 
    'TON_API_URL',
    'TON_MANIFEST_URL'
  ];
  
  tonVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`‚úÖ ${varName}: ${value.substring(0, 30)}...`);
    } else {
      console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
    }
  });
}

function diagnoseMissingDeposit() {
  console.log('\n='.repeat(80));
  console.log('üö® –î–ò–ê–ì–ù–û–ó: –ü–†–ò–ß–ò–ù–´ –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø 3 TON');
  console.log('='.repeat(80));
  
  console.log('\nüìã –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
  console.log('1. ‚ùå TON Connect –≤—ã–ø–æ–ª–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ blockchain');
  console.log('2. ‚úÖ Frontend –ø–æ–∫–∞–∑–∞–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
  console.log('3. ‚ùå –ù–ï–¢ –≤—ã–∑–æ–≤–∞ backend API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞');
  console.log('4. ‚ùå –î–µ–ø–æ–∑–∏—Ç –ù–ï –∑–∞–ø–∏—Å–∞–Ω –≤ database.transactions');
  console.log('5. ‚ùå –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏—Å—á–µ–∑–ª–∏');
  
  console.log('\nüîß –¢–†–ï–ë–£–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('1. –î–æ–±–∞–≤–∏—Ç—å backend API –≤—ã–∑–æ–≤ –≤ sendTonTransaction()');
  console.log('2. –û–±–µ—Å–ø–µ—á–∏—Ç—å –≤—ã–∑–æ–≤ /api/v2/wallet/ton-deposit –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π blockchain —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å processTonDeposit –º–µ—Ç–æ–¥ –≤ WalletService');
  console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ TON_DEPOSIT –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–∏—Ç—Å—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å');
  console.log('5. –î–æ–±–∞–≤–∏—Ç—å fallback –¥–ª—è –ø–æ–∏—Å–∫–∞ "–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö" –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  
  console.log('\nüí∞ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –¢–†–ï–ë–£–ï–¢–°–Ø:');
  console.log('1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 3 TON –¥–ª—è User ID 25');
  console.log('2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å integration flow –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π');
  console.log('3. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ blockchain ‚Üí database —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeIntegrationFlow();
diagnoseMissingDeposit();

console.log('\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');