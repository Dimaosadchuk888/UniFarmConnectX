/**
 * T63 - –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
 * UNI farming –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10, TON Boost –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –°–æ–∑–¥–∞–µ—Ç UNI farming –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è Users ID 26-35 (–ø–µ—Ä–≤—ã–µ 10)
 */
async function createUniFarmingDeposits() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï UNI FARMING –î–ï–ü–û–ó–ò–¢–û–í (USERS 26-35) ===');
  
  const farmingUsers = [26, 27, 28, 29, 30, 31, 32, 33, 34, 35];
  const results = [];
  
  for (const userId of farmingUsers) {
    console.log(`–°–æ–∑–¥–∞—é UNI –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è User ID ${userId}`);
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UNI farming –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const { error } = await supabase
        .from('users')
        .update({
          uni_farming_rate: 0.001, // 0.001 UNI –≤ —á–∞—Å
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_last_update: new Date().toISOString(),
          uni_deposit_amount: 50.0 // –î–µ–ø–æ–∑–∏—Ç 50 UNI
        })
        .eq('id', userId);
        
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ UNI –¥–µ–ø–æ–∑–∏—Ç–∞ User ${userId}:`, error.message);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
      await supabase
        .from('transactions')
        .insert({
          user_id: userId,
          type: 'UNI_DEPOSIT',
          status: 'completed',
          description: `UNI farming deposit - 50 UNI, rate 0.001 per hour`
        });
      
      console.log(`‚úÖ UNI –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è User ID ${userId}`);
      
      results.push({
        userId: userId,
        type: 'UNI_FARMING',
        amount: '50.0',
        rate: '0.001',
        status: 'active'
      });
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ User ${userId}:`, error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${results.length} UNI farming –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
  return results;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è Users ID 36-45 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
 */
async function createTonBoostDeposits() {
  console.log('\n=== –°–û–ó–î–ê–ù–ò–ï TON BOOST –î–ï–ü–û–ó–ò–¢–û–í (USERS 36-45) ===');
  
  const boostUsers = [36, 37, 38, 39, 40, 41, 42, 43, 44, 45];
  const results = [];
  
  for (const userId of boostUsers) {
    console.log(`–°–æ–∑–¥–∞—é TON Boost –¥–ª—è User ID ${userId}`);
    
    try {
      // –°–æ–∑–¥–∞–µ–º TON Boost purchase
      const { data: boostPurchase, error } = await supabase
        .from('boost_purchases')
        .insert({
          user_id: userId,
          boost_id: `boost_standard_30d`,
          amount: '50.0',
          daily_rate: '0.5',
          source: 'ton',
          status: 'confirmed',
          start_date: new Date().toISOString(),
          end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          is_active: true,
          total_earned: '0.0'
        })
        .select('id')
        .single();
        
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ TON Boost User ${userId}:`, error.message);
        continue;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å TON (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É)
      await supabase
        .from('users')
        .update({
          balance_ton: 50.000000 // 100 - 50 = 50 TON –æ—Å—Ç–∞–µ—Ç—Å—è
        })
        .eq('id', userId);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
      await supabase
        .from('transactions')
        .insert({
          user_id: userId,
          type: 'TON_BOOST_PURCHASE',
          status: 'completed',
          description: `TON Boost purchase - 50 TON for 30 days, rate 0.5 daily`
        });
      
      console.log(`‚úÖ TON Boost —Å–æ–∑–¥–∞–Ω –¥–ª—è User ID ${userId}: Boost ID=${boostPurchase.id}`);
      
      results.push({
        userId: userId,
        type: 'TON_BOOST',
        amount: '50.0',
        dailyRate: '0.5',
        boostId: boostPurchase.id,
        status: 'active'
      });
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ User ${userId}:`, error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${results.length} TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
  return results;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */
async function verifyReferralStructure() {
  console.log('\n=== –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ü–µ–ø–æ—á–∫–∏
  const { data: chainUsers, error } = await supabase
    .from('users')
    .select('id, telegram_id, username, balance_uni, balance_ton, referred_by, uni_farming_rate, uni_deposit_amount')
    .gte('telegram_id', 20000000001)
    .lte('telegram_id', 20000000020)
    .order('telegram_id');
    
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
    return;
  }
  
  console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –¶–ï–ü–û–ß–ö–ò:');
  console.log('Level | User ID | Telegram ID    | Balance UNI/TON | Referred By | Deposit Type');
  console.log('------|---------|----------------|-----------------|-------------|-------------');
  
  chainUsers.forEach((user, index) => {
    const level = index + 1;
    const depositType = user.uni_farming_rate > 0 ? 'UNI_FARMING' : 'TON_BOOST';
    const referredBy = user.referred_by || 'TOP_LEVEL';
    
    console.log(`${level.toString().padStart(5)} | ${user.id.toString().padStart(7)} | ${user.telegram_id} | ${user.balance_uni}/${user.balance_ton} | ${referredBy.toString().padStart(11)} | ${depositType}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã
  const { data: boostPurchases } = await supabase
    .from('boost_purchases')
    .select('user_id, boost_id, amount, daily_rate, status')
    .eq('status', 'confirmed');
    
  console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ü–û–ó–ò–¢–û–í:`);
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ: ${chainUsers.length}`);
  console.log(`UNI farming –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${chainUsers.filter(u => u.uni_farming_rate > 0).length}`);
  console.log(`TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${boostPurchases?.length || 0}`);
  
  return chainUsers;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */
async function createDepositsForChain() {
  try {
    console.log('T63 - –°–û–ó–î–ê–ù–ò–ï –î–ï–ü–û–ó–ò–¢–û–í –î–õ–Ø 20-–£–†–û–í–ù–ï–í–û–ô –¶–ï–ü–û–ß–ö–ò');
    console.log('='.repeat(60));
    
    // 1. –°–æ–∑–¥–∞–µ–º UNI farming –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10
    const farmingDeposits = await createUniFarmingDeposits();
    
    // 2. –°–æ–∑–¥–∞–µ–º TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10
    const boostDeposits = await createTonBoostDeposits();
    
    // 3. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const chainUsers = await verifyReferralStructure();
    
    console.log('\n‚úÖ T63 STEP 1 COMPLETED: 20-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –≥–æ—Ç–æ–≤–∞');
    console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ T64 - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–µ—Ç–∏');
    
    return {
      chainUsers,
      farmingDeposits,
      boostDeposits
    };
    
  } catch (error) {
    console.error('‚ùå T63 CRITICAL ERROR:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
createDepositsForChain();