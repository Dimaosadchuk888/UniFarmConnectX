// –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testReferralWithLogging() {
  console.log('=== –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===');
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testTelegramId = Math.floor(Date.now() / 1000);
  const testUsername = `test_${testTelegramId}`;
  const refCode = 'REF_1752755835358_yjrusv'; // –ö–æ–¥ User 184
  
  console.log('üöÄ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(`   telegram_id: ${testTelegramId}`);
  console.log(`   username: ${testUsername}`);
  console.log(`   ref_code: ${refCode}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ User 184
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ User 184 (–≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)...');
    
    const { data: referrerUser, error: referrerError } = await supabase
      .from('users')
      .select('id, telegram_id, username, ref_code')
      .eq('id', 184)
      .single();
    
    if (referrerError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ User 184:', referrerError.message);
      return;
    }
    
    console.log('‚úÖ User 184 –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${referrerUser.id}`);
    console.log(`   telegram_id: ${referrerUser.telegram_id}`);
    console.log(`   username: ${referrerUser.username}`);
    console.log(`   ref_code: ${referrerUser.ref_code}`);
    
    if (referrerUser.ref_code !== refCode) {
      console.log(`‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: ${refCode}, –ø–æ–ª—É—á–∏–ª–∏: ${referrerUser.ref_code}`);
      return;
    }
    
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const healthResponse = await fetch('http://localhost:3000/health');
    if (!healthResponse.ok) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    console.log('\n3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    
    const authData = {
      direct_registration: true,
      telegram_id: testTelegramId,
      username: testUsername,
      first_name: "Test User",
      refBy: refCode
    };
    
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(authData, null, 2));
    
    const authResponse = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(authData)
    });
    
    console.log(`üì• –û—Ç–≤–µ—Ç: ${authResponse.status} ${authResponse.statusText}`);
    
    const authResult = await authResponse.json();
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(authResult, null, 2));
    
    if (!authResult.success) {
      console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      return;
    }
    
    const newUserId = authResult.data.user.id;
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUserId}`);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\n4. –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î...');
    
    const { data: newUser, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .eq('id', newUserId)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:');
    console.log(`   ID: ${newUser.id}`);
    console.log(`   telegram_id: ${newUser.telegram_id}`);
    console.log(`   username: ${newUser.username}`);
    console.log(`   referred_by: ${newUser.referred_by}`);
    console.log(`   created_at: ${newUser.created_at}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º referrals
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ referrals...');
    
    const { data: referralRecords, error: referralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUserId);
    
    if (referralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referrals:', referralError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralRecords.length} –∑–∞–ø–∏—Å–µ–π –≤ referrals`);
      
      if (referralRecords.length > 0) {
        referralRecords.forEach(record => {
          console.log(`   –ó–∞–ø–∏—Å—å: user_id=${record.user_id}, inviter_id=${record.inviter_id}, level=${record.level}`);
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ referrals –¥–ª—è User 184
    console.log('\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ User 184...');
    
    const { data: allReferrals, error: allReferralsError } = await supabase
      .from('referrals')
      .select('*')
      .eq('inviter_id', 184);
    
    if (allReferralsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', allReferralsError.message);
    } else {
      console.log(`‚úÖ User 184 –∏–º–µ–µ—Ç ${allReferrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
      
      if (allReferrals.length > 0) {
        allReferrals.forEach(record => {
          console.log(`   –†–µ—Ñ–µ—Ä–∞–ª: user_id=${record.user_id}, level=${record.level}, created_at=${record.created_at}`);
        });
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ referrals –µ—Å–ª–∏ –µ—Å—Ç—å
    if (referralRecords && referralRecords.length > 0) {
      await supabase.from('referrals').delete().eq('user_id', newUserId);
      console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –≤ referrals —É–¥–∞–ª–µ–Ω—ã');
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase.from('users').delete().eq('id', newUserId);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    
    console.log('\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    
    if (newUser.referred_by === 184) {
      console.log('üéâ –£–°–ü–ï–•: referred_by —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: referred_by –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. processReferral() –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
      console.log('   2. –û—à–∏–±–∫–∞ –≤ processReferral()');
      console.log('   3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
    }
    
    if (referralRecords && referralRecords.length > 0) {
      console.log('üéâ –£–°–ü–ï–•: –ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞!');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: –ó–∞–ø–∏—Å—å –≤ referrals –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.log('Stack trace:', error.stack);
  }
}

testReferralWithLogging().catch(console.error);