#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
 */

import https from 'https';
import http from 'http';
import fs from 'fs';

const NEW_DOMAIN = 'https://uni-farm-connect-unifarm01010101.replit.app';
const OLD_DOMAINS = [
  'uni-farm-connect-x-elizabethstone1',
  'uni-farm-connect-x-w81846064', 
  'uni-farm-connect-x-ab245275',
  'uni-farm-connect-aab49267',
  'ab245275',
  'elizabethstone1',
  'aab49267',
  'w81846064'
];

console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ');
console.log('================================================');
console.log(`–¶–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω: ${NEW_DOMAIN}`);
console.log('');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
console.log('------------------------');
const requiredVars = {
  'TELEGRAM_WEBAPP_URL': process.env.TELEGRAM_WEBAPP_URL,
  'APP_DOMAIN': process.env.APP_DOMAIN,
  'CORS_ORIGINS': process.env.CORS_ORIGINS,
  'TELEGRAM_WEBHOOK_URL': process.env.TELEGRAM_WEBHOOK_URL,
  'JWT_SECRET': process.env.JWT_SECRET ? '‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù–ê' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê',
  'TELEGRAM_BOT_TOKEN': process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù–ê' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'
};

let envErrors = 0;
for (const [key, value] of Object.entries(requiredVars)) {
  if (key === 'JWT_SECRET' || key === 'TELEGRAM_BOT_TOKEN') {
    console.log(`${key}: ${value}`);
    if (value.includes('‚ùå')) envErrors++;
  } else if (value) {
    const hasOldDomain = OLD_DOMAINS.some(old => value.includes(old));
    const hasNewDomain = value.includes('unifarm01010101');
    
    if (hasOldDomain && !hasNewDomain) {
      console.log(`${key}: ‚ùå –°–û–î–ï–†–ñ–ò–¢ –°–¢–ê–†–´–ô –î–û–ú–ï–ù - ${value}`);
      envErrors++;
    } else if (hasNewDomain) {
      console.log(`${key}: ‚úÖ ${value}`);
    } else {
      console.log(`${key}: ‚ö†Ô∏è ${value || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}`);
      if (!value) envErrors++;
    }
  } else {
    console.log(`${key}: ‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
    envErrors++;
  }
}

console.log('');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏
console.log('üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ù–ê –°–¢–ê–†–´–ï –°–°–´–õ–ö–ò:');
console.log('-----------------------------------');

const criticalFiles = [
  'client/public/tonconnect-manifest.json',
  'client/public/.well-known/tonconnect-manifest.json',
  'client/src/App.tsx',
  'config/app.ts',
  'core/config/security.ts',
  'core/middleware/cors.ts'
];

let fileErrors = 0;
for (const file of criticalFiles) {
  try {
    const content = fs.readFileSync(file, 'utf8');
    const hasOldDomain = OLD_DOMAINS.some(old => content.includes(old));
    const hasNewDomain = content.includes('unifarm01010101');
    
    if (hasOldDomain) {
      console.log(`${file}: ‚ùå –°–û–î–ï–†–ñ–ò–¢ –°–¢–ê–†–´–ï –°–°–´–õ–ö–ò`);
      fileErrors++;
    } else if (hasNewDomain) {
      console.log(`${file}: ‚úÖ –û–ë–ù–û–í–õ–ï–ù`);
    } else {
      console.log(`${file}: ‚ö†Ô∏è –ù–ï –°–û–î–ï–†–ñ–ò–¢ –î–û–ú–ï–ù–û–í`);
    }
  } catch (error) {
    console.log(`${file}: ‚ùå –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø`);
    fileErrors++;
  }
}

console.log('');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints
console.log('üåê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò ENDPOINTS:');
console.log('----------------------------------');

function checkUrl(url, description) {
  return new Promise((resolve) => {
    const client = url.startsWith('https') ? https : http;
    const request = client.get(url, (res) => {
      const status = res.statusCode === 200 ? '‚úÖ' : '‚ùå';
      console.log(`${description}: ${status} HTTP ${res.statusCode}`);
      resolve(res.statusCode === 200);
    });
    
    request.on('error', (err) => {
      console.log(`${description}: ‚ùå –û–®–ò–ë–ö–ê - ${err.message}`);
      resolve(false);
    });
    
    request.setTimeout(5000, () => {
      console.log(`${description}: ‚ùå –¢–ê–ô–ú–ê–£–¢`);
      request.destroy();
      resolve(false);
    });
  });
}

async function runChecks() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
  const endpointChecks = await Promise.all([
    checkUrl(`${NEW_DOMAIN}/tonconnect-manifest.json`, 'TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç'),
    checkUrl(`${NEW_DOMAIN}/.well-known/tonconnect-manifest.json`, 'Well-known –º–∞–Ω–∏—Ñ–µ—Å—Ç'),
    checkUrl(`${NEW_DOMAIN}/api/v2/health`, 'Health check API'),
    checkUrl(`${NEW_DOMAIN}/webhook`, 'Webhook endpoint')
  ]);
  
  const endpointErrors = endpointChecks.filter(check => !check).length;
  
  console.log('');
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
  console.log('-------------------');
  
  const totalErrors = envErrors + fileErrors + endpointErrors;
  
  console.log(`–û—à–∏–±–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envErrors}`);
  console.log(`–û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö: ${fileErrors}`);
  console.log(`–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints: ${endpointErrors}`);
  console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º: ${totalErrors}`);
  console.log('');
  
  if (totalErrors === 0) {
    console.log('üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ!');
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω');
    console.log('‚úÖ –í—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã');
  } else if (totalErrors <= 2) {
    console.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê, –ï–°–¢–¨ –ú–ò–ù–û–†–ù–´–ï –ü–†–û–ë–õ–ï–ú–´');
    console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º');
  } else {
    console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ');
    console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
  }
  
  console.log('');
  console.log('üöÄ –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –¥–µ–ø–ª–æ—é!');
}

runChecks().catch(console.error);