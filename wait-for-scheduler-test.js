/**
 * –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
 */

import { createClient } from '@supabase/supabase-js';

async function waitForSchedulerTest() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('‚è∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê TON BOOST –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò');
  console.log('='.repeat(65));
  
  const userId = 48;
  let checkCount = 0;
  const maxChecks = 12; // 12 –ø—Ä–æ–≤–µ—Ä–æ–∫ = 60 –º–∏–Ω—É—Ç (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  
  // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log('\nüìä –ë–ê–ó–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
  
  const { data: initialUser, error: userError } = await supabase
    .from('users')
    .select('balance_ton, ton_boost_package, ton_boost_rate')
    .eq('id', userId)
    .single();
  
  if (userError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
    return;
  }
  
  console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${initialUser.balance_ton} TON`);
  console.log(`   ‚Ä¢ –ü–∞–∫–µ—Ç: ${initialUser.ton_boost_package}`);
  console.log(`   ‚Ä¢ –°—Ç–∞–≤–∫–∞: ${(initialUser.ton_boost_rate * 100).toFixed(1)}%`);
  
  // –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  const deposit = Math.max(0, parseFloat(initialUser.balance_ton) - 10);
  const expectedIncome = (deposit * initialUser.ton_boost_rate) / 288;
  console.log(`   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω: ${expectedIncome.toFixed(8)} TON`);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é TON Boost –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const { data: lastTransaction, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .not('amount_ton', 'is', null)
    .neq('amount_ton', '0')
    .ilike('description', '%boost%')
    .order('created_at', { ascending: false })
    .limit(1);
  
  let lastTransactionId = 0;
  if (!txError && lastTransaction?.length > 0) {
    lastTransactionId = lastTransaction[0].id;
    const lastTime = new Date(lastTransaction[0].created_at);
    const minutesAgo = (new Date() - lastTime) / (1000 * 60);
    
    console.log(`   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ID ${lastTransactionId}`);
    console.log(`   ‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π: ${minutesAgo.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    console.log(`   ‚Ä¢ –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π: ${lastTransaction[0].amount_ton} TON`);
  } else {
    console.log('   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
  
  console.log('\n‚è∞ –ù–ê–ß–ò–ù–ê–Æ –ú–û–ù–ò–¢–û–†–ò–ù–ì (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç):');
  console.log('   üí° –û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON Boost...');
  
  const startTime = new Date();
  
  while (checkCount < maxChecks) {
    checkCount++;
    const currentTime = new Date();
    const elapsed = Math.round((currentTime - startTime) / (1000 * 60));
    
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${checkCount}/${maxChecks} (–ø—Ä–æ—à–ª–æ ${elapsed} –º–∏–Ω):`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: newTransactions, error: newTxError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .not('amount_ton', 'is', null)
      .neq('amount_ton', '0')
      .ilike('description', '%boost%')
      .gt('id', lastTransactionId)
      .order('created_at', { ascending: false });
    
    if (newTxError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${newTxError.message}`);
    } else if (newTransactions?.length > 0) {
      console.log(`   üéâ –ù–ê–ô–î–ï–ù–û ${newTransactions.length} –ù–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô!`);
      
      newTransactions.forEach((tx, idx) => {
        const time = new Date(tx.created_at).toLocaleString('ru-RU');
        console.log(`     ${idx + 1}. ID: ${tx.id} | ${tx.amount_ton} TON | ${time}`);
        console.log(`        ${tx.description}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const { data: currentUser, error: balanceError } = await supabase
        .from('users')
        .select('balance_ton')
        .eq('id', userId)
        .single();
      
      if (!balanceError) {
        const balanceChange = parseFloat(currentUser.balance_ton) - parseFloat(initialUser.balance_ton);
        console.log(`   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${initialUser.balance_ton} ‚Üí ${currentUser.balance_ton} TON`);
        console.log(`   üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${balanceChange.toFixed(8)} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å—á–µ—Ç–∞–º
        const transactionsIncome = newTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_ton), 0);
        const deviation = Math.abs(balanceChange - transactionsIncome);
        
        if (deviation < 0.00000001) {
          console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
        } else {
          console.log(`   ‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –±–∞–ª–∞–Ω—Å +${balanceChange.toFixed(8)}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ +${transactionsIncome.toFixed(8)}`);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
      lastTransactionId = Math.max(...newTransactions.map(tx => tx.id));
      
      console.log(`\n   üéØ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!`);
      console.log(`   ‚è∞ –í—Ä–µ–º—è –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏: ~5 –º–∏–Ω—É—Ç`);
      console.log(`   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      break;
      
    } else {
      console.log(`   ‚è≥ –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç, –æ–∂–∏–¥–∞—é...`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const nextCheck = 5 - ((new Date() - startTime) / (1000 * 60)) % 5;
      console.log(`   ‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ~${nextCheck.toFixed(1)} –º–∏–Ω`);
    }
    
    // –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (300000 –º—Å)
    if (checkCount < maxChecks) {
      console.log(`   üí§ –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...`);
      await new Promise(resolve => setTimeout(resolve, 300000)); // 5 –º–∏–Ω—É—Ç
    }
  }
  
  if (checkCount >= maxChecks) {
    console.log('\n‚ùå –¢–ê–ô–ú-–ê–£–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
    console.log('   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 60 –º–∏–Ω—É—Ç');
    console.log('   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('     - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('     - –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    console.log('     - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
  }
  
  console.log('\n' + '='.repeat(65));
  console.log('‚è∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù');
}

waitForSchedulerTest().catch(console.error);