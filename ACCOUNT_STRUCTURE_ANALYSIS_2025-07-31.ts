#!/usr/bin/env tsx
/**
 * üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ê–ö–ö–ê–£–ù–¢–û–í –ë–ï–ó –î–û–°–¢–£–ü–ê –ö –ë–î
 * –≠—Ç–∞–ª–æ–Ω: User ID 25, –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏ —Å—Ö–µ–º—ã
 * –î–∞—Ç–∞: 31.07.2025
 */

import * as fs from 'fs';
import * as path from 'path';

console.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ê–ö–ö–ê–£–ù–¢–û–í –ü–û –§–ê–ô–õ–ê–ú –ü–†–û–ï–ö–¢–ê');
console.log('üìä –≠—Ç–∞–ª–æ–Ω: User ID 25 (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)');
console.log('='.repeat(80));

interface TableStructure {
  name: string;
  requiredFields: string[];
  optionalFields: string[];
  relationships: string[];
  indexes: string[];
}

interface UserAccountStructure {
  mainProfile: string[];
  relatedTables: TableStructure[];
  criticalFields: string[];
  businessLogicFields: string[];
}

function analyzeSchemaFiles(): UserAccountStructure {
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–•–ï–ú –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
  
  const schemaPath = './shared/schema.ts';
  let schemaContent = '';
  
  try {
    schemaContent = fs.readFileSync(schemaPath, 'utf8');
    console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞');
  } catch (error) {
    console.log('‚ùå –§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Ö–µ–º—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const tables: TableStructure[] = [
    {
      name: 'users',
      requiredFields: [
        'id', 'telegram_id', 'username', 'first_name', 'last_name',
        'balance_uni', 'balance_ton', 'referral_code', 'created_at'
      ],
      optionalFields: [
        'uni_farming_active', 'ton_boost_active', 'ton_boost_package', 
        'ton_boost_rate', 'referred_by', 'is_admin', 'updated_at'
      ],
      relationships: ['transactions', 'ton_farming_data', 'daily_bonus_claims'],
      indexes: ['telegram_id', 'referral_code', 'referred_by']
    },
    {
      name: 'transactions',
      requiredFields: [
        'id', 'user_id', 'type', 'amount', 'currency', 'status', 'created_at'
      ],
      optionalFields: [
        'description', 'hash', 'metadata', 'updated_at'
      ],
      relationships: ['users'],
      indexes: ['user_id', 'type', 'status', 'created_at']
    },
    {
      name: 'ton_farming_data',
      requiredFields: [
        'id', 'user_id', 'farming_balance', 'farming_rate', 'boost_active'
      ],
      optionalFields: [
        'last_update', 'created_at', 'updated_at'
      ],
      relationships: ['users'],
      indexes: ['user_id', 'boost_active']
    },
    {
      name: 'daily_bonus_claims',
      requiredFields: [
        'id', 'user_id', 'claim_date', 'streak_count', 'bonus_amount'
      ],
      optionalFields: [
        'created_at'
      ],
      relationships: ['users'],
      indexes: ['user_id', 'claim_date']
    }
  ];

  console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê –û–°–ù–û–í–ù–´–• –¢–ê–ë–õ–ò–¶:');
  tables.forEach(table => {
    console.log(`\nüóÉÔ∏è ${table.name.toUpperCase()}:`);
    console.log(`   ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${table.requiredFields.join(', ')}`);
    console.log(`   üîß –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è: ${table.optionalFields.join(', ')}`);
    console.log(`   üîó –°–≤—è–∑–∏: ${table.relationships.join(', ')}`);
  });

  return {
    mainProfile: tables.find(t => t.name === 'users')?.requiredFields || [],
    relatedTables: tables,
    criticalFields: [
      'balance_uni', 'balance_ton', 'uni_farming_active', 'ton_boost_active',
      'referral_code', 'telegram_id'
    ],
    businessLogicFields: [
      'ton_boost_package', 'ton_boost_rate', 'referred_by'
    ]
  };
}

function analyzeUser25Documentation(): any {
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –≠–¢–ê–õ–û–ù–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (ID 25) –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:');
  
  // –ß–∏—Ç–∞–µ–º replit.md –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ User 25
  const replitMdPath = './replit.md';
  let user25Info = {
    hasTonBoost: false,
    hasTransactions: false,
    balanceIssues: false,
    farmingActive: false
  };
  
  try {
    const replitContent = fs.readFileSync(replitMdPath, 'utf8');
    
    // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è User 25
    const user25Mentions = replitContent.match(/User.*25.*|user.*25.*|ID.*25.*/gi) || [];
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π User 25: ${user25Mentions.length}`);
    
    user25Mentions.forEach(mention => {
      console.log(`   üìÑ ${mention}`);
      
      if (mention.toLowerCase().includes('ton') || mention.toLowerCase().includes('–¥–µ–ø–æ–∑–∏—Ç')) {
        user25Info.hasTonBoost = true;
      }
      if (mention.toLowerCase().includes('—Ç—Ä–∞–Ω–∑–∞–∫—Ü') || mention.toLowerCase().includes('transaction')) {
        user25Info.hasTransactions = true;
      }
      if (mention.toLowerCase().includes('–±–∞–ª–∞–Ω—Å') || mention.toLowerCase().includes('balance')) {
        user25Info.balanceIssues = true;
      }
    });

    // –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å User 25
    if (replitContent.includes('User ID 25: 3 TON deposit disappeared')) {
      console.log('‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –£ User 25 –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º 3 TON –¥–µ–ø–æ–∑–∏—Ç–∞');
      user25Info.balanceIssues = true;
    }

  } catch (error) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å replit.md');
  }

  console.log('\nüìä –ü–†–û–§–ò–õ–¨ USER 25 (–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò):');
  console.log(`   üöÄ TON Boost: ${user25Info.hasTonBoost ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ò–ó–í–ï–°–¢–ù–û'}`);
  console.log(`   üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${user25Info.hasTransactions ? '–ï–°–¢–¨' : '–ù–ï–ò–ó–í–ï–°–¢–ù–û'}`);
  console.log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º: ${user25Info.balanceIssues ? '–ë–´–õ–ò' : '–ù–ï–¢'}`);

  return user25Info;
}

function analyzeSystemFiles(): any {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–´–• –§–ê–ô–õ–û–í –ò –õ–û–ì–ò–ö–ò:');
  
  const systemAnalysis = {
    authenticationLogic: false,
    balanceManagement: false,
    tonBoostLogic: false,
    referralSystem: false,
    farmingSystem: false
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
  const keyFiles = [
    './modules/auth/service.ts',
    './core/BalanceManager.ts',
    './modules/boost/service.ts',
    './modules/referral/service.ts',
    './modules/farming/service.ts'
  ];

  keyFiles.forEach(filePath => {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const fileName = path.basename(filePath);
      
      console.log(`üìÅ ${fileName}: –ù–ê–ô–î–ï–ù`);
      
      if (fileName.includes('auth')) {
        systemAnalysis.authenticationLogic = content.includes('telegram_id') && content.includes('user');
      }
      if (fileName.includes('Balance')) {
        systemAnalysis.balanceManagement = content.includes('updateUserBalance') && content.includes('subtractBalance');
      }
      if (fileName.includes('boost')) {
        systemAnalysis.tonBoostLogic = content.includes('ton_boost') && content.includes('farming');
      }
      
    } catch (error) {
      console.log(`üìÅ ${path.basename(filePath)}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  });

  console.log('\nüîß –°–ò–°–¢–ï–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê:');
  console.log(`   üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${systemAnalysis.authenticationLogic ? '–†–ï–ê–õ–ò–ó–û–í–ê–ù–ê' : '–ü–†–û–ë–õ–ï–ú–´'}`);
  console.log(`   üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º: ${systemAnalysis.balanceManagement ? '–†–ï–ê–õ–ò–ó–û–í–ê–ù–û' : '–ü–†–û–ë–õ–ï–ú–´'}`);
  console.log(`   üöÄ TON Boost –ª–æ–≥–∏–∫–∞: ${systemAnalysis.tonBoostLogic ? '–†–ï–ê–õ–ò–ó–û–í–ê–ù–ê' : '–ü–†–û–ë–õ–ï–ú–´'}`);

  return systemAnalysis;
}

function identifyCommonProblems(): string[] {
  console.log('\n4Ô∏è‚É£ –í–´–Ø–í–õ–ï–ù–ò–ï –û–ë–©–ò–• –ü–†–û–ë–õ–ï–ú:');
  
  const commonProblems = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const replitMdPath = './replit.md';
  try {
    const content = fs.readFileSync(replitMdPath, 'utf8');
    
    if (content.includes('JWT token disappearance')) {
      commonProblems.push('JWT —Ç–æ–∫–µ–Ω—ã –∏—Å—á–µ–∑–∞—é—Ç (—Ä–µ—à–µ–Ω–æ —á–µ—Ä–µ–∑ JWT Token Monitor)');
    }
    if (content.includes('cache clearing')) {
      commonProblems.push('–ü—Ä–æ–±–ª–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è Telegram WebApp');
    }
    if (content.includes('rollback') || content.includes('ANTI_ROLLBACK_PROTECTION')) {
      commonProblems.push('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ rollback –ø—Ä–æ—Ü–µ—Å—Å—ã (—á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã)');
    }
    if (content.includes('deposit disappeared') || content.includes('missing deposits')) {
      commonProblems.push('–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    if (content.includes('balance discrepancy')) {
      commonProblems.push('–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

  } catch (error) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
  }

  console.log('üö® –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
  commonProblems.forEach((problem, index) => {
    console.log(`   ${index + 1}. ${problem}`);
  });

  return commonProblems;
}

function generateUnificationPlan(): void {
  console.log('\n5Ô∏è‚É£ –ü–õ–ê–ù –£–ù–ò–§–ò–ö–ê–¶–ò–ò –ê–ö–ö–ê–£–ù–¢–û–í:');
  console.log('='.repeat(80));

  const unificationPlan = `
üéØ –ü–õ–ê–ù –£–ù–ò–§–ò–ö–ê–¶–ò–ò –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í –ö –≠–¢–ê–õ–û–ù–£

üìã –≠–¢–ê–ü–´ –£–ù–ò–§–ò–ö–ê–¶–ò–ò:

1Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô):
   - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ ton_farming_data –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º TON Boost
   - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–ª–µ–≤—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
   - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ referral_code
   - –í—ã—è–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö

2Ô∏è‚É£ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø:
   - –°–æ–∑–¥–∞—Ç—å backup –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
   - –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
   - –ù–ï –¢–†–û–ì–ê–¢–¨ User ID 25 –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã

3Ô∏è‚É£ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   - –°–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–ø–∏—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
   - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ

üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
   - users.balance_uni (–Ω–µ NULL, >= 0.01)
   - users.balance_ton (–Ω–µ NULL, >= 0.01)
   - users.referral_code (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –Ω–µ NULL)
   - users.telegram_id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –Ω–µ NULL)
   - ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_active=true
   - transactions –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º 1 –∑–∞–ø–∏—Å—å)

‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
   - –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è backup
   - –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
   - –ù–µ –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (ID 25)
   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
   –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç –∏–º–µ—Ç—å –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö,
   —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É User ID 25
`;

  console.log(unificationPlan);
}

function generateSQLQueries(): void {
  console.log('\n6Ô∏è‚É£ SQL –ó–ê–ü–†–û–°–´ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log('='.repeat(80));

  const queries = [
    {
      title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      sql: `
SELECT u.id, u.username, u.telegram_id, u.created_at,
       u.balance_uni, u.balance_ton, u.uni_farming_active, u.ton_boost_active
FROM users u 
LEFT JOIN transactions t ON u.id = t.user_id 
WHERE t.user_id IS NULL 
ORDER BY u.created_at DESC;`
    },
    {
      title: 'TON Boost –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ—Ç farming data',
      sql: `
SELECT u.id, u.username, u.ton_boost_active, u.ton_boost_package, u.ton_boost_rate
FROM users u 
LEFT JOIN ton_farming_data tfd ON u.id = tfd.user_id 
WHERE u.ton_boost_active = true AND tfd.user_id IS NULL 
ORDER BY u.id;`
    },
    {
      title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏',
      sql: `
SELECT id, username, balance_uni, balance_ton, created_at,
       CASE 
         WHEN balance_uni IS NULL THEN 'UNI –±–∞–ª–∞–Ω—Å NULL'
         WHEN balance_uni::numeric = 0 THEN 'UNI –±–∞–ª–∞–Ω—Å = 0'
         WHEN balance_ton IS NULL THEN 'TON –±–∞–ª–∞–Ω—Å NULL'
         WHEN balance_ton::numeric = 0 THEN 'TON –±–∞–ª–∞–Ω—Å = 0'
         ELSE 'OK'
       END as balance_issue
FROM users 
WHERE balance_uni IS NULL OR balance_uni::numeric = 0 
   OR balance_ton IS NULL OR balance_ton::numeric = 0
ORDER BY created_at DESC;`
    },
    {
      title: '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ TON Boost —Å—Ç–∞—Ç—É—Å–∞—Ö',
      sql: `
SELECT u.id, u.username, 
       u.ton_boost_active as user_boost_active,
       COALESCE(tfd.boost_active, false) as farming_boost_active,
       u.ton_boost_package, tfd.farming_balance
FROM users u 
LEFT JOIN ton_farming_data tfd ON u.id = tfd.user_id 
WHERE u.ton_boost_active != COALESCE(tfd.boost_active, false)
ORDER BY u.id;`
    },
    {
      title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ referral_code',
      sql: `
SELECT id, username, telegram_id, referral_code, created_at
FROM users 
WHERE referral_code IS NULL OR referral_code = '' OR LENGTH(referral_code) < 6
ORDER BY created_at DESC;`
    }
  ];

  queries.forEach(query => {
    console.log(`\n-- ${query.title}`);
    console.log(query.sql);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ –ê–ö–ö–ê–£–ù–¢–û–í...\n');
    
    // 1. –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º
    const accountStructure = analyzeSchemaFiles();
    
    // 2. –ê–Ω–∞–ª–∏–∑ User 25
    const user25Profile = analyzeUser25Documentation();
    
    // 3. –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const systemAnalysis = analyzeSystemFiles();
    
    // 4. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    const problems = identifyCommonProblems();
    
    // 5. –ü–ª–∞–Ω —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    generateUnificationPlan();
    
    // 6. SQL –∑–∞–ø—Ä–æ—Å—ã
    generateSQLQueries();
    
    console.log('\n' + '='.repeat(80));
    console.log('üèÅ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    console.log('üìä –í—ã—è–≤–ª–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –∏ –ø–ª–∞–Ω —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤');
    console.log('‚ö†Ô∏è –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ó–∞–ø—É—Å–∫ SQL –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

main();