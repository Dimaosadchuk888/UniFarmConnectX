/**
 * –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é (.js/.mjs/.cjs)
 */

import fs from 'fs';
import path from 'path';

// –ì—Ä—É–ø–ø—ã —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
const scriptGroups = [
  {
    name: 'api-routes-checker',
    files: ['api-routes-checker.js', 'api-routes-checker.mjs'],
    keep: 'api-routes-checker.js'
  },
  {
    name: 'browser-access',
    files: ['browser-access.js', 'browser-access.cjs'],
    keep: 'browser-access.js'
  },
  {
    name: 'check-deploy-exports',
    files: ['check-deploy-exports.js', 'check-deploy-exports.cjs'],
    keep: 'check-deploy-exports.js'
  },
  {
    name: 'check-partition-status',
    files: ['check-partition-status.js', 'check-partition-status.cjs'],
    keep: 'check-partition-status.js'
  },
  {
    name: 'check-production-url',
    files: ['check-production-url.js', 'check-production-url.mjs'],
    keep: 'check-production-url.js'
  },
  {
    name: 'check-replit-db',
    files: ['check-replit-db.js', 'check-replit-db.mjs'],
    keep: 'check-replit-db.js'
  },
  {
    name: 'check-table-status',
    files: ['check-table-status.js', 'check-table-status.cjs'],
    keep: 'check-table-status.js'
  }
];

function analyzeFileContent(file1, file2) {
  try {
    const content1 = fs.readFileSync(file1, 'utf8');
    const content2 = fs.readFileSync(file2, 'utf8');
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const similarity = content1 === content2 ? 100 : 
                      content1.length > 0 ? Math.round((1 - Math.abs(content1.length - content2.length) / Math.max(content1.length, content2.length)) * 100) : 0;
    
    return { similarity, size1: content1.length, size2: content2.length };
  } catch (error) {
    return { similarity: 0, size1: 0, size2: 0, error: error.message };
  }
}

function consolidateScripts() {
  console.log('üîÑ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–∫—Ä–∏–ø—Ç–æ–≤...\n');
  
  let consolidatedCount = 0;
  
  scriptGroups.forEach(group => {
    console.log(`üìÅ –ì—Ä—É–ø–ø–∞: ${group.name}`);
    
    const existingFiles = group.files.filter(file => fs.existsSync(file));
    
    if (existingFiles.length <= 1) {
      console.log(`  ‚úì –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${existingFiles.length})\n`);
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    const mainFile = existingFiles.find(f => f === group.keep) || existingFiles[0];
    const duplicates = existingFiles.filter(f => f !== mainFile);
    
    console.log(`  üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: ${mainFile}`);
    console.log(`  üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã: ${duplicates.join(', ')}`);
    
    duplicates.forEach(duplicate => {
      const analysis = analyzeFileContent(mainFile, duplicate);
      console.log(`    ${duplicate}: —Å—Ö–æ–∂–µ—Å—Ç—å ${analysis.similarity}% (${analysis.size1} vs ${analysis.size2} –±–∞–π—Ç)`);
      
      if (analysis.similarity > 80) {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        const backupName = duplicate.replace(/[\/\\]/g, '_');
        fs.copyFileSync(duplicate, `cleanup-backup/${backupName}`);
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        fs.unlinkSync(duplicate);
        console.log(`    ‚ùå –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${duplicate} (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞)`);
        consolidatedCount++;
      } else {
        console.log(`    ‚ö†Ô∏è  –§–∞–π–ª—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è, —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      }
    });
    
    console.log('');
  });
  
  console.log(`‚úÖ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${consolidatedCount}\n`);
}

function analyzeRemainingDuplicates() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...\n');
  
  const problematicFiles = [
    'setup-webhook.js',
    'update-menu-button.js'
  ];
  
  problematicFiles.forEach(file => {
    if (fs.existsSync(file)) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        const lines = content.split('\n').length;
        
        console.log(`üìÑ ${file}:`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${content.length} –±–∞–π—Ç, —Å—Ç—Ä–æ–∫: ${lines}`);
        console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç—å\n`);
      } catch (error) {
        console.log(`üìÑ ${file}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞\n`);
      }
    }
  });
}

function generateFinalReport() {
  console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ—á–∏—Å—Ç–∫–∏...\n');
  
  const finalReport = {
    timestamp: new Date().toISOString(),
    phase1: '–£–¥–∞–ª–µ–Ω—ã –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (7 —Ñ–∞–π–ª–æ–≤)',
    phase2: '–£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª bug-fixes-proposal.js',
    phase3: '–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏',
    remainingIssues: [
      '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è (DATABASE_STRUCTURE.md, RIOTMAP.md)',
      '–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏',
      'API –º–∞—Ä—à—Ä—É—Ç—ã –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏'
    ],
    recommendations: [
      '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ docs/',
      '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É scripts/ –¥–ª—è –≤—Å–µ—Ö —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤',
      '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤'
    ],
    backupLocation: 'cleanup-backup/',
    restoreScript: 'restore-deleted-files.sh'
  };
  
  fs.writeFileSync('final-cleanup-report.json', JSON.stringify(finalReport, null, 2));
  
  console.log('üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û–ß–ò–°–¢–ö–ò –î–£–ë–õ–ò–ö–ê–¢–û–í:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('‚úÖ –§–∞–∑–∞ 1: –£–¥–∞–ª–µ–Ω—ã –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã');
  console.log('‚úÖ –§–∞–∑–∞ 2: –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π');
  console.log('‚úÖ –§–∞–∑–∞ 3: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏');
  console.log('');
  console.log('üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–∞');
  console.log('üõü –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏–º—ã —á–µ—Ä–µ–∑ restore-deleted-files.sh');
  console.log('üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: final-cleanup-report.json');
  console.log('');
  console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
  console.log('   –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
consolidateScripts();
analyzeRemainingDuplicates();
generateFinalReport();