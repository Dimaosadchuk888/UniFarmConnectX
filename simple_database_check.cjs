const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function simpleDatabaseCheck() {
  console.log('=== –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    console.log('üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data: connectionTest, error: connectionError } = await supabase
      .from('users')
      .select('count')
      .limit(1);
      
    if (connectionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', connectionError);
      return;
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // 2. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const { data: typeSample, error: typeError } = await supabase
      .from('transactions')
      .select('type')
      .limit(20);
      
    if (typeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤:', typeError);
    } else {
      const uniqueTypes = [...new Set(typeSample?.map(t => t.type) || [])];
      console.log(`üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${uniqueTypes.join(', ')}`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    console.log('\nüîç 3. –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    const { data: recentTxs, error: recentError } = await supabase
      .from('transactions')
      .select('user_id, type, created_at')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: true })
      .limit(100);
      
    if (recentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError);
    } else {
      console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentTxs?.length || 0}`);
      
      if (recentTxs && recentTxs.length > 1) {
        // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        const intervals = [];
        for (let i = 1; i < Math.min(recentTxs.length, 20); i++) {
          const prev = new Date(recentTxs[i-1].created_at);
          const curr = new Date(recentTxs[i].created_at);
          const intervalMinutes = (curr - prev) / (1000 * 60);
          intervals.push(intervalMinutes);
        }
        
        if (intervals.length > 0) {
          const avgInterval = (intervals.reduce((sum, val) => sum + val, 0) / intervals.length).toFixed(2);
          const minInterval = Math.min(...intervals).toFixed(2);
          const maxInterval = Math.max(...intervals).toFixed(2);
          
          console.log(`‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:`);
          console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minInterval} –º–∏–Ω—É—Ç`);
          console.log(`   –°—Ä–µ–¥–Ω–∏–π: ${avgInterval} –º–∏–Ω—É—Ç`);
          console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxInterval} –º–∏–Ω—É—Ç`);
          
          if (parseFloat(minInterval) < 2.0) {
            console.log(`üö® –ê–ù–û–ú–ê–õ–ò–Ø: –ù–∞–π–¥–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç!`);
          }
          
          if (parseFloat(avgInterval) < 4.0 || parseFloat(avgInterval) > 6.0) {
            console.log(`‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–ò–ï: –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ${avgInterval} –º–∏–Ω—É—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~5)`);
          }
        }
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
    console.log('\nüîç 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ TON_DEPOSIT
    const { data: tonDeposits, error: tonError } = await supabase
      .from('transactions')
      .select('id, user_id, amount, created_at')
      .eq('type', 'TON_DEPOSIT')
      .limit(5);
      
    if (tonError) {
      console.log('‚ùå TON_DEPOSIT —Ç–∏–ø –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', tonError.message);
    } else if (!tonDeposits || tonDeposits.length === 0) {
      console.log('‚ö†Ô∏è TON_DEPOSIT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonDeposits.length} TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }
    
    // –ü–æ–∏—Å–∫ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    const { data: tonTxs, error: tonTxError } = await supabase
      .from('transactions')
      .select('type, count(*)')
      .eq('currency', 'TON')
      .limit(10);
      
    if (!tonTxError && tonTxs) {
      console.log('üìä TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:');
      tonTxs.forEach(tx => {
        console.log(`   ${tx.type}: ${tx.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ User 228
    console.log('\nüîç 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ User 228...');
    
    const { data: user228, error: user228Error } = await supabase
      .from('users')
      .select('id, username, balance_ton, balance_uni')
      .eq('id', 228)
      .single();
      
    if (user228Error) {
      console.log('‚ùå User 228 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user228Error.message);
    } else {
      console.log(`üë§ User 228: ${user228.username}, TON: ${user228.balance_ton}, UNI: ${user228.balance_uni}`);
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 228
      const { data: user228Txs, error: user228TxError } = await supabase
        .from('transactions')
        .select('type, amount, currency, created_at')
        .eq('user_id', 228)
        .order('created_at', { ascending: false })
        .limit(5);
        
      if (!user228TxError && user228Txs) {
        console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 228:');
        user228Txs.forEach(tx => {
          console.log(`   ${tx.type}: ${tx.amount} ${tx.currency}, ${tx.created_at}`);
        });
      }
    }
    
    console.log('\n=== –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

simpleDatabaseCheck();