#!/usr/bin/env node

/**
 * –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testCriticalLogging() {
  console.log('üß™ –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const { data: user, error } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni')
      .eq('id', 184)
      .single();
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log(`üë§ User 184: TON=${user.balance_ton}, UNI=${user.balance_uni}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–µ—Ä–≤–µ—Ä–∞
    const response = await fetch('http://localhost:3000/health');
    if (!response.ok) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const testAmount = 0.001;
    const originalBalance = parseFloat(user.balance_ton || '0');
    const newBalance = originalBalance + testAmount;
    
    console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:`);
    console.log(`   ${originalBalance} ‚Üí ${newBalance} (+${testAmount})`);
    
    const { error: updateError } = await supabase
      .from('users')
      .update({ balance_ton: newBalance })
      .eq('id', 184);
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError.message);
    } else {
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      setTimeout(async () => {
        await supabase
          .from('users')
          .update({ balance_ton: originalBalance })
          .eq('id', 184);
        console.log('üîÑ –ë–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }, 2000);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    
    const { data: testTx, error: txError } = await supabase
      .from('transactions')
      .insert({
        user_id: 184,
        type: 'FARMING_REWARD',
        amount: '0.001',
        amount_uni: '0',
        amount_ton: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'Test critical logging transaction'
      })
      .select('id')
      .single();
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testTx.id);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      setTimeout(async () => {
        await supabase.from('transactions').delete().eq('id', testTx.id);
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
      }, 3000);
    }
    
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ:');
    console.log('   ‚Ä¢ [CRITICAL] [DIRECT_BALANCE_UPDATE]');
    console.log('   ‚Ä¢ [CRITICAL] [TON_DEPOSIT_*]');
    console.log('\nüí° –ö–æ–º–∞–Ω–¥–∞: grep -E "\\[CRITICAL\\]" server.log');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testCriticalLogging();