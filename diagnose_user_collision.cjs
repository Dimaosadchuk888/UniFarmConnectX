#!/usr/bin/env node

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã collision –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π User 25 –∏ User 227
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_KEY;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function diagnoseUserCollision() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê COLLISION –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô User 25 –∏ User 227\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º User 25 –∏ User 227
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, balance_uni, balance_ton')
      .in('id', [25, 227])
      .order('id');
      
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
      return;
    }
    
    users.forEach(user => {
      console.log(`User ${user.id}:`, {
        telegram_id: user.telegram_id,
        username: user.username,
        first_name: user.first_name,
        balance_ton: user.balance_ton
      });
    });
    
    // 2. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username "DimaOsadchuk"
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° USERNAME "DimaOsadchuk":');
    const { data: duplicateUsers, error: duplicateError } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, balance_ton, created_at')
      .eq('username', 'DimaOsadchuk')
      .order('id');
      
    if (duplicateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π:', duplicateError.message);
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${duplicateUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username "DimaOsadchuk":`);
    duplicateUsers.forEach(user => {
      console.log(`- User ${user.id}: telegram_id=${user.telegram_id}, balance_ton=${user.balance_ton}, created_at=${user.created_at}`);
    });
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º getUserByTelegramId –¥–ª—è –æ–±–æ–∏—Ö
    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï getUserByTelegramId:');
    
    // User 25: telegram_id = 425855744
    const { data: user25Test, error: error25 } = await supabase
      .from('users')
      .select('id, telegram_id, username')
      .eq('telegram_id', 425855744)
      .single();
      
    console.log('User 25 –ø–æ–∏—Å–∫ –ø–æ telegram_id=425855744:', user25Test || '–ù–ï –ù–ê–ô–î–ï–ù', error25?.message);
    
    // User 227: telegram_id = 25
    const { data: user227Test, error: error227 } = await supabase
      .from('users')
      .select('id, telegram_id, username')
      .eq('telegram_id', 25)
      .single();
      
    console.log('User 227 –ø–æ–∏—Å–∫ –ø–æ telegram_id=25:', user227Test || '–ù–ï –ù–ê–ô–î–ï–ù', error227?.message);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í:');
    const { data: tonTransactions, error: tonError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, description, created_at')
      .in('user_id', [25, 227])
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
      
    if (tonError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError.message);
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${tonTransactions.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    tonTransactions.forEach(tx => {
      console.log(`- TX ${tx.id}: User ${tx.user_id}, ${tx.amount_ton} TON, ${tx.description.substring(0, 50)}...`);
    });
    
    // 5. –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ username
    console.log('\n5Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´ - –ü–û–ò–°–ö –ü–û USERNAME:');
    const { data: usernameSearch, error: usernameError } = await supabase
      .from('users')
      .select('id, telegram_id, username')
      .eq('username', 'DimaOsadchuk')
      .single(); // ‚Üê –í–û–¢ –ü–†–û–ë–õ–ï–ú–ê! single() –≤–µ—Ä–Ω–µ—Ç –ü–ï–†–í–û–ì–û –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
      
    console.log('–ü–æ–∏—Å–∫ –ø–æ username "DimaOsadchuk" –≤–µ—Ä–Ω—É–ª:', usernameSearch || '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log('–≠—Ç–æ User', usernameSearch?.id, '—Å telegram_id', usernameSearch?.telegram_id);
    
    if (usernameSearch?.id !== 25) {
      console.log('üö® –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –ü–æ–∏—Å–∫ –ø–æ username –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

diagnoseUserCollision().then(() => {
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});