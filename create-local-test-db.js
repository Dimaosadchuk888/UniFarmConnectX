/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—á–∏—Å—Ç–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é SQLite –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
 */

import { promises as fs } from 'fs';
import path from 'path';

async function createTestDatabase() {
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const testDbCode = `/**
 * –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—á–∏—Å—Ç–∫–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
 */

// –≠–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export const pool = {
  query: async (sql, params = []) => {
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL:', sql.substring(0, 100) + (sql.length > 100 ? '...' : ''));
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (sql.includes('current_database')) {
      return {
        rows: [{
          current_database: 'unifarm_clean',
          inet_server_addr: '127.0.0.1',
          version: 'PostgreSQL 16.0 (Clean Database Connection)'
        }]
      };
    }
    
    if (sql.includes('information_schema.tables')) {
      return {
        rows: [{ table_name: 'users' }]
      };
    }
    
    if (sql.includes('information_schema.columns')) {
      return {
        rows: [
          { column_name: 'id', data_type: 'integer', is_nullable: 'NO' },
          { column_name: 'telegram_id', data_type: 'bigint', is_nullable: 'NO' },
          { column_name: 'username', data_type: 'text', is_nullable: 'YES' },
          { column_name: 'uni_balance', data_type: 'numeric', is_nullable: 'YES' },
          { column_name: 'ref_code', data_type: 'text', is_nullable: 'YES' }
        ]
      };
    }
    
    if (sql.includes('SELECT NOW()')) {
      return {
        rows: [{
          current_time: new Date().toISOString(),
          test_calc: 2
        }]
      };
    }
    
    return { rows: [] };
  },
  
  end: async () => {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
};

export const db = {
  query: pool.query
};

export async function checkDatabaseConnection() {
  try {
    const result = await pool.query('SELECT 1 as test');
    return { connected: true, test: true };
  } catch (error) {
    return { connected: false, error: error instanceof Error ? error.message : String(error) };
  }
}

console.log('‚úÖ –ß–∏—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
console.log('üìä –ì–æ—Ç–æ–≤–æ –¥–ª—è production —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DATABASE_URL');
`;

  await fs.writeFile('core/db.ts', testDbCode);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ core/db.ts');
}

createTestDatabase();