/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö API
 */

import fs from 'fs';
import path from 'path';

const ROUTES_FILE = 'server/routes-new.ts';

/**
 * –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */
const API_FIXES = [
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ REDMAP
  {
    name: 'GET /api/v2/boosts',
    method: 'GET',
    path: '/api/v2/boosts',
    controller: 'BoostController',
    action: 'getAllBoosts',
    description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É—Å—Ç-–ø–∞–∫–µ—Ç–æ–≤'
  },
  {
    name: 'POST /api/v2/uni-farming/purchase',
    method: 'POST', 
    path: '/api/v2/uni-farming/purchase',
    controller: 'UniFarmingController',
    action: 'purchaseFarming',
    description: '–ü–æ–∫—É–ø–∫–∞ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞'
  },
  {
    name: 'POST /api/v2/uni-farming/withdraw',
    method: 'POST',
    path: '/api/v2/uni-farming/withdraw', 
    controller: 'UniFarmingController',
    action: 'withdrawFarming',
    description: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞'
  },
  {
    name: 'POST /api/v2/referrals/apply',
    method: 'POST',
    path: '/api/v2/referrals/apply',
    controller: 'ReferralController', 
    action: 'applyReferralCode',
    description: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞'
  }
];

/**
 * –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
function readRoutesFile() {
  try {
    return fs.readFileSync(ROUTES_FILE, 'utf8');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${ROUTES_FILE}:`, error.message);
    return null;
  }
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
function writeRoutesFile(content) {
  try {
    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    const backupFile = `${ROUTES_FILE}.backup-${Date.now()}`;
    fs.copyFileSync(ROUTES_FILE, backupFile);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupFile}`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(ROUTES_FILE, content, 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${ROUTES_FILE} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${ROUTES_FILE}:`, error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–∞–π–ª–µ
 */
function routeExists(content, route) {
  const routePattern = new RegExp(`app\\.${route.method.toLowerCase()}\\s*\\(\\s*['"]${route.path.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}['"]`, 'i');
  return routePattern.test(content);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
 */
function generateRouteCode(route) {
  const safeHandler = route.method === 'GET' ? 'safeHandler' : 'safeHandler';
  return `
  // ${route.description}
  if (${route.controller} && typeof ${route.controller}.${route.action} === 'function') {
    app.${route.method.toLowerCase()}('${route.path}', ${safeHandler}(${route.controller}.${route.action}));
    logger.info('[API Fix] ‚úì –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç: ${route.method} ${route.path}');
  } else {
    logger.warn('[API Fix] ‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ${route.controller}.${route.action} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${route.path}');
  }`;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ñ–∞–π–ª
 */
function addMissingRoutes(content) {
  let updatedContent = content;
  let addedRoutes = 0;
  
  // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
  const insertionPoint = updatedContent.lastIndexOf('}');
  
  if (insertionPoint === -1) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
    return { content: updatedContent, addedCount: 0 };
  }
  
  let routesToAdd = '';
  
  API_FIXES.forEach(route => {
    if (!routeExists(updatedContent, route)) {
      routesToAdd += generateRouteCode(route);
      addedRoutes++;
      console.log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é: ${route.method} ${route.path}`);
    } else {
      console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${route.method} ${route.path}`);
    }
  });
  
  if (routesToAdd) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
    const fixHeader = `
  // ========================================
  // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø API (${new Date().toISOString()})
  // –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ REDMAP
  // ========================================`;
    
    updatedContent = updatedContent.slice(0, insertionPoint) + 
                    fixHeader + routesToAdd + '\n  ' +
                    updatedContent.slice(insertionPoint);
  }
  
  return { content: updatedContent, addedCount: addedRoutes };
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ
 */
function fixSyntaxErrors(content) {
  let fixedContent = content;
  let fixCount = 0;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ MissionController
  if (fixedContent.includes('MissionController') && !fixedContent.includes('import.*MissionController')) {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ MissionController...');
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ MissionController –Ω–∞ MissionControllerFixed
    fixedContent = fixedContent.replace(/(?<!Fixed\s*)MissionController(?!Fixed)/g, 'MissionControllerFixed');
    fixCount++;
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
  const typeIssues = [
    {
      pattern: /app\.(get|post|put|delete)\s*\(\s*['"]([^'"]+)['"]\s*,\s*([^,)]+)\s*\)/g,
      replacement: (match, method, path, handler) => {
        if (handler.includes('safeHandler') || handler.includes('createSafeHandler')) {
          return match; // –£–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        }
        return `app.${method}('${path}', createSafeHandler(${handler}))`;
      }
    }
  ];
  
  typeIssues.forEach(issue => {
    const matches = fixedContent.match(issue.pattern);
    if (matches) {
      fixedContent = fixedContent.replace(issue.pattern, issue.replacement);
      fixCount++;
      console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏: ${matches.length} —Å–ª—É—á–∞–µ–≤`);
    }
  });
  
  return { content: fixedContent, fixCount };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
 */
function checkAndFixImports(content) {
  const requiredImports = [
    'createSafeHandler',
    'logger',
    'MissionControllerFixed',
    'ReferralController', 
    'BoostController',
    'UniFarmingController'
  ];
  
  const missingImports = [];
  
  requiredImports.forEach(importName => {
    if (!content.includes(importName)) {
      missingImports.push(importName);
    }
  });
  
  if (missingImports.length > 0) {
    console.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã: ${missingImports.join(', ')}`);
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞');
  }
  
  return missingImports;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API
 */
async function fixAPIEndpoints() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø API –≠–ù–î–ü–û–ò–ù–¢–û–í');
  console.log('=' * 60);
  
  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–æ–≤
  const originalContent = readRoutesFile();
  if (!originalContent) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–æ–≤');
    return false;
  }
  
  console.log(`üìÑ –§–∞–π–ª ${ROUTES_FILE} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
  
  let currentContent = originalContent;
  let totalChanges = 0;
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  console.log('\nüîß –≠—Ç–∞–ø 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...');
  const syntaxFix = fixSyntaxErrors(currentContent);
  currentContent = syntaxFix.content;
  totalChanges += syntaxFix.fixCount;
  console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${syntaxFix.fixCount}`);
  
  // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
  console.log('\nüìù –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
  const routesFix = addMissingRoutes(currentContent);
  currentContent = routesFix.content;
  totalChanges += routesFix.addedCount;
  console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${routesFix.addedCount}`);
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
  console.log('\nüì¶ –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...');
  const missingImports = checkAndFixImports(currentContent);
  
  // 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  if (totalChanges > 0) {
    console.log('\nüíæ –≠—Ç–∞–ø 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    const writeSuccess = writeRoutesFile(currentContent);
    
    if (writeSuccess) {
      console.log('\n' + '=' * 60);
      console.log('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´');
      console.log('=' * 60);
      console.log(`üìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalChanges}`);
      console.log(`üìÅ –§–∞–π–ª: ${ROUTES_FILE}`);
      console.log(`üïí –í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
      
      if (missingImports.length > 0) {
        console.log(`\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
        console.log(`   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã: ${missingImports.join(', ')}`);
        console.log(`   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã`);
      }
      
      return true;
    }
  } else {
    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è - –≤—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ');
    return true;
  }
  
  return false;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ API
 */
function generateAPIReport() {
  console.log('\nüìã –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò API –≠–ù–î–ü–û–ò–ù–¢–û–í');
  console.log('-' * 50);
  
  const content = readRoutesFile();
  if (!content) return;
  
  API_FIXES.forEach(route => {
    const exists = routeExists(content, route);
    const status = exists ? '‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    console.log(`${status} ${route.method} ${route.path}`);
  });
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  fixAPIEndpoints()
    .then(() => {
      generateAPIReport();
    })
    .catch(console.error);
}

export { fixAPIEndpoints, generateAPIReport };