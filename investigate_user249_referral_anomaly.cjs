const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function investigateUser249() {
  console.log('=== –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò USER 249 ===\n');
  
  try {
    // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ User 249
    console.log('üîç 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è User 249...');
    const { data: user249, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 249)
      .single();
      
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö User 249:', userError);
    } else {
      console.log(`üë§ User 249 Profile:`);
      console.log(`   ID: ${user249.id}, Telegram ID: ${user249.telegram_id}`);
      console.log(`   Username: ${user249.username}`);
      console.log(`   UNI Balance: ${user249.balance_uni}, TON Balance: ${user249.balance_ton}`);
      console.log(`   Created: ${user249.created_at}`);
      console.log(`   Referred by: ${user249.referred_by}\n`);
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –æ—Ç User 249
    console.log('üîç 2. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –æ—Ç User 249...');
    const { data: referralRewards, error: rewardsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .contains('metadata', { source_user_id: 249 })
      .order('created_at', { ascending: false });
      
    if (rewardsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:', rewardsError);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç User 249: ${referralRewards?.length || 0}`);
      
      let totalRewards = 0;
      const rewardsByLevel = {};
      const rewardsByTime = {};
      
      if (referralRewards?.length > 0) {
        referralRewards.forEach(tx => {
          totalRewards += parseFloat(tx.amount);
          const level = tx.metadata?.level || 'unknown';
          const timeKey = tx.created_at.substring(0, 16); // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∏–Ω—É—Ç–∞–º
          
          if (!rewardsByLevel[level]) rewardsByLevel[level] = { count: 0, total: 0 };
          if (!rewardsByTime[timeKey]) rewardsByTime[timeKey] = { count: 0, total: 0 };
          
          rewardsByLevel[level].count++;
          rewardsByLevel[level].total += parseFloat(tx.amount);
          rewardsByTime[timeKey].count++;
          rewardsByTime[timeKey].total += parseFloat(tx.amount);
        });
        
        console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${totalRewards.toFixed(2)} UNI`);
        console.log(`üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:`);
        Object.keys(rewardsByLevel).forEach(level => {
          const data = rewardsByLevel[level];
          console.log(`   Level ${level}: ${data.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${data.total.toFixed(2)} UNI`);
        });
        
        console.log(`‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ç–æ–ø-10):`);
        const topTimes = Object.entries(rewardsByTime)
          .sort((a, b) => b[1].total - a[1].total)
          .slice(0, 10);
        topTimes.forEach(([time, data]) => {
          console.log(`   ${time}: ${data.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${data.total.toFixed(2)} UNI`);
        });
      }
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ farming –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ User 249
    console.log('\nüîç 3. –ê–Ω–∞–ª–∏–∑ farming –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ User 249...');
    const { data: farmingTx, error: farmingError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 249)
      .in('type', ['FARMING_REWARD', 'FARMING_DEPOSIT'])
      .order('created_at', { ascending: false });
      
    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', farmingError);
    } else {
      console.log(`üåæ Farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 249: ${farmingTx?.length || 0}`);
      
      let farmingIncome = 0;
      let farmingDeposits = 0;
      
      if (farmingTx?.length > 0) {
        farmingTx.forEach(tx => {
          if (tx.type === 'FARMING_REWARD') {
            farmingIncome += parseFloat(tx.amount);
          } else if (tx.type === 'FARMING_DEPOSIT') {
            farmingDeposits += parseFloat(tx.amount);
          }
        });
        
        console.log(`üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥ farming: ${farmingIncome.toFixed(2)} UNI`);
        console.log(`üìâ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã: ${farmingDeposits.toFixed(2)} UNI`);
        console.log(`‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥/–¥–µ–ø–æ–∑–∏—Ç: ${(farmingIncome / farmingDeposits || 0).toFixed(4)}`);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        console.log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
        farmingTx.slice(0, 5).forEach(tx => {
          console.log(`   ${tx.created_at}: ${tx.type} ${tx.amount} ${tx.currency}`);
        });
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ User 249
    console.log('\nüîç 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ User 249...');
    const { data: referrals, error: referralsError } = await supabase
      .from('referrals')
      .select('*')
      .eq('referring_user_id', 249);
      
    if (referralsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', referralsError);
    } else {
      console.log(`üë• –ü—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ User 249: ${referrals?.length || 0}`);
      if (referrals?.length > 0) {
        console.log(`üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:`);
        referrals.forEach(ref => {
          console.log(`   User ${ref.referred_user_id} referred at ${ref.created_at}`);
        });
      }
    }
    
    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüîç 5. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ User 249...');
    const { data: allTx, error: allTxError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 249)
      .order('created_at', { ascending: false });
      
    if (allTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTxError);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 249: ${allTx?.length || 0}`);
      
      if (allTx?.length > 0) {
        const firstTx = allTx[allTx.length - 1];
        const lastTx = allTx[0];
        console.log(`üìÖ –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${firstTx.created_at}`);
        console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${lastTx.created_at}`);
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        const txByDay = {};
        allTx.forEach(tx => {
          const day = tx.created_at.substring(0, 10);
          if (!txByDay[day]) txByDay[day] = 0;
          txByDay[day]++;
        });
        
        console.log(`üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:`);
        Object.entries(txByDay)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 5)
          .forEach(([day, count]) => {
            console.log(`   ${day}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          });
      }
    }
    
    console.log('\n=== –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï USER 249 –ó–ê–í–ï–†–®–ï–ù–û ===');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è User 249:', error);
  }
}

investigateUser249();