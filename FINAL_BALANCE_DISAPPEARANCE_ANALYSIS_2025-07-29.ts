#!/usr/bin/env tsx

/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø –°–†–ï–î–°–¢–í
 * 29 –∏—é–ª—è 2025 - –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–û–¶–ï–°–°–´, –í–´–ó–´–í–ê–Æ–©–ò–ï ROLLBACK
 * 
 * –ù–ê–ô–î–ï–ù–ù–´–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–ù–û–ú–ê–õ–ò–ò:
 * 1. User 25: 911 REFERRAL_REWARD –∑–∞ 3 –¥–Ω—è (763 –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö)
 * 2. User 25: 46 TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å 0.0 –º–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ 
 * 3. User 192: ton_boost_active=true –±–µ–∑ ton_farming_data
 * 4. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
 */

import { supabase } from './core/supabase';

console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–û–í –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø –°–†–ï–î–°–¢–í');
console.log('='.repeat(80));

async function analyzeSpecificBalanceRollbacks() {
  console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–†–û–¶–ï–°–°–û–í ROLLBACK');
  console.log('-'.repeat(70));
  
  try {
    // –ò—â–µ–º User 25 - —Å–ª—É—á–∞–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    const { data: user25Data } = await supabase
      .from('users')
      .select('*')
      .eq('id', 25)
      .single();
      
    if (user25Data) {
      console.log('üë§ User 25 –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
      console.log(`   TON Balance: ${user25Data.balance_ton}`);
      console.log(`   UNI Balance: ${user25Data.balance_uni}`);
      console.log(`   TON Boost: ${user25Data.ton_boost_active ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
      const { data: farmingData } = await supabase
        .from('ton_farming_data')
        .select('*')
        .eq('user_id', '25');
        
      if (farmingData && farmingData.length > 0) {
        console.log(`   Farming Balance: ${farmingData[0].farming_balance} TON`);
        console.log(`   Farming Active: ${farmingData[0].boost_active ? '–î–ê' : '–ù–ï–¢'}`);
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –±–∞–ª–∞–Ω—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
        const farmingBalance = parseFloat(farmingData[0].farming_balance);
        const userTonBalance = parseFloat(user25Data.balance_ton);
        
        console.log('\nüîç –ë–ê–õ–ê–ù–°–û–í–ê–Ø –ê–ù–û–ú–ê–õ–ò–Ø:');
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç ${userTonBalance} TON –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`);
        console.log(`   –ù–æ —Ñ–∞—Ä–º–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${farmingBalance} TON`);
        
        if (farmingBalance !== userTonBalance) {
          console.log(`   üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${Math.abs(farmingBalance - userTonBalance).toFixed(6)} TON`);
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ rollback –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const { data: recentTx } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', 25)
        .order('created_at', { ascending: false })
        .limit(20);
        
      if (recentTx && recentTx.length > 0) {
        console.log('\nüí∏ –ü–û–°–õ–ï–î–ù–ò–ï 20 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–æ–∏—Å–∫ rollback):');
        
        for (let i = 0; i < recentTx.length - 1; i++) {
          const current = recentTx[i];
          const next = recentTx[i + 1];
          
          const currentTime = new Date(current.created_at);
          const nextTime = new Date(next.created_at);
          const timeDiff = Math.abs(currentTime.getTime() - nextTime.getTime()) / (1000 * 60);
          
          const currentAmount = parseFloat(current.amount);
          const nextAmount = parseFloat(next.amount);
          
          // –ò—â–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (rollback –ø–∞—Ç—Ç–µ—Ä–Ω)
          if (timeDiff < 2 && Math.abs(currentAmount + nextAmount) < 0.001) {
            console.log(`   üö® ROLLBACK –ü–ê–¢–¢–ï–†–ù –ù–ê–ô–î–ï–ù:`);
            console.log(`     ${currentTime.toLocaleTimeString()}: ${current.type} ${current.amount} TON`);
            console.log(`     ${nextTime.toLocaleTimeString()}: ${next.type} ${next.amount} TON`);
            console.log(`     –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${timeDiff.toFixed(1)} –º–∏–Ω`);
            console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(current.metadata || {})}`);
          }
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ rollback:', error);
  }
}

async function checkSchedulerConflictTimings() {
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ö–û–ù–§–õ–ò–ö–¢–û–í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í');
  console.log('-'.repeat(70));
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
  console.log('‚è∞ –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ù–§–õ–ò–ö–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
  
  const currentTime = new Date();
  const schedulers = [
    { name: 'TON Boost Income', interval: 5, lastRun: 0 },
    { name: 'UNI Farming', interval: 5, lastRun: 0 },
    { name: 'Boost Verification', interval: 2, lastRun: 0 },
    { name: 'WebSocket Cleanup', interval: 1, lastRun: 0 }
  ];
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
  console.log('\n   üìä –°–ò–ú–£–õ–Ø–¶–ò–Ø –ö–û–ù–§–õ–ò–ö–¢–û–í (10 –º–∏–Ω—É—Ç):');
  
  for (let minute = 0; minute < 10; minute++) {
    const activeSchedulers: string[] = [];
    
    schedulers.forEach(scheduler => {
      if (minute % scheduler.interval === 0) {
        activeSchedulers.push(scheduler.name);
      }
    });
    
    if (activeSchedulers.length > 1) {
      console.log(`   ‚ö†Ô∏è –ú–∏–Ω—É—Ç–∞ ${minute}: –ö–û–ù–§–õ–ò–ö–¢ - ${activeSchedulers.join(', ')}`);
    } else if (activeSchedulers.length === 1) {
      console.log(`   ‚úÖ –ú–∏–Ω—É—Ç–∞ ${minute}: ${activeSchedulers[0]}`);
    }
  }
}

async function analyzeBalanceManagerOperations() {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–ü–ï–†–ê–¶–ò–ô BALANCE MANAGER');
  console.log('-'.repeat(70));
  
  try {
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º BalanceManager –æ–ø–µ—Ä–∞—Ü–∏–π
    const twoHoursAgo = new Date();
    twoHoursAgo.setHours(twoHoursAgo.getHours() - 2);
    
    const { data: balanceOps } = await supabase
      .from('transactions')
      .select('*')
      .gte('created_at', twoHoursAgo.toISOString())
      .order('created_at', { ascending: false })
      .limit(50);
      
    if (balanceOps && balanceOps.length > 0) {
      console.log(`üíº –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞: ${balanceOps.length}`);
      
      // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const suspiciousOps = balanceOps.filter(tx => {
        const metadata = tx.metadata || {};
        return (
          metadata.source === 'BalanceManager' ||
          metadata.source === 'subtractBalance' ||
          metadata.source === 'updateBalance' ||
          metadata.operation === 'subtract' ||
          metadata.operation === 'rollback'
        );
      });
      
      if (suspiciousOps.length > 0) {
        console.log(`\n   üö® –û–ø–µ—Ä–∞—Ü–∏–π BalanceManager: ${suspiciousOps.length}`);
        
        suspiciousOps.slice(0, 5).forEach((op, index) => {
          console.log(`\n   ${index + 1}. User ${op.user_id}: ${op.type} ${op.amount} ${op.currency}`);
          console.log(`      –í—Ä–µ–º—è: ${new Date(op.created_at).toLocaleTimeString()}`);
          console.log(`      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(op.metadata || {})}`);
        });
      } else {
        console.log('   ‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π BalanceManager –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
      const userCounts: Record<number, number> = {};
      balanceOps.forEach(tx => {
        userCounts[tx.user_id] = (userCounts[tx.user_id] || 0) + 1;
      });
      
      const hyperActiveUsers = Object.entries(userCounts)
        .filter(([_, count]) => count > 5)
        .sort(([_, a], [__, b]) => b - a);
        
      if (hyperActiveUsers.length > 0) {
        console.log('\n   üë• –ì–ò–ü–ï–†–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (>5 –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ 2 —á–∞—Å–∞):');
        hyperActiveUsers.slice(0, 3).forEach(([userId, count]) => {
          console.log(`     User ${userId}: ${count} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ BalanceManager:', error);
  }
}

async function searchForZeroTimestampOperations() {
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô –° –ù–£–õ–ï–í–´–ú–ò –ò–ù–¢–ï–†–í–ê–õ–ê–ú–ò');
  console.log('-'.repeat(70));
  
  try {
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 25, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤ –æ–¥–Ω—É –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—É
    const { data: user25Transactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .order('created_at', { ascending: true });
      
    if (!user25Transactions) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25');
      return;
    }
    
    console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25: ${user25Transactions.length}`);
    
    // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    const duplicateTimestamps: any[] = [];
    const timestampMap = new Map<string, any[]>();
    
    user25Transactions.forEach(tx => {
      const timestamp = tx.created_at;
      if (!timestampMap.has(timestamp)) {
        timestampMap.set(timestamp, []);
      }
      timestampMap.get(timestamp)!.push(tx);
    });
    
    timestampMap.forEach((txs, timestamp) => {
      if (txs.length > 1) {
        duplicateTimestamps.push({ timestamp, transactions: txs });
      }
    });
    
    if (duplicateTimestamps.length > 0) {
      console.log(`\nüö® –ù–ê–ô–î–ï–ù–û ${duplicateTimestamps.length} –í–†–ï–ú–ï–ù–ù–´–• –ú–ï–¢–û–ö –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –û–ü–ï–†–ê–¶–ò–Ø–ú–ò:`);
      
      duplicateTimestamps.slice(0, 5).forEach((group, index) => {
        console.log(`\n   ${index + 1}. –í—Ä–µ–º—è: ${new Date(group.timestamp).toLocaleString()}`);
        console.log(`      –û–ø–µ—Ä–∞—Ü–∏–π: ${group.transactions.length}`);
        
        group.transactions.forEach((tx: any, txIndex: number) => {
          console.log(`        ${txIndex + 1}: ${tx.type} ${tx.amount} ${tx.currency}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π rollback
        const amounts = group.transactions.map((tx: any) => parseFloat(tx.amount));
        const sum = amounts.reduce((a, b) => a + b, 0);
        
        if (Math.abs(sum) < 0.001) {
          console.log(`      üö® –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê ROLLBACK: —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π = ${sum.toFixed(8)}`);
        }
      });
    } else {
      console.log('   ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω—É–ª–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:', error);
  }
}

async function generateRootCauseHypotheses() {
  console.log('\n5Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ì–ò–ü–û–¢–ï–ó –ö–û–†–ù–ï–í–´–• –ü–†–ò–ß–ò–ù');
  console.log('-'.repeat(70));
  
  console.log('üîç –û–°–ù–û–í–ù–´–ï –ì–ò–ü–û–¢–ï–ó–´ –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø –°–†–ï–î–°–¢–í:');
  
  console.log('\n1. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô ROLLBACK –ü–†–ò –û–®–ò–ë–ö–ê–•:');
  console.log('   - BalanceManager –º–æ–∂–µ—Ç –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫');
  console.log('   - TransactionEnforcer –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  console.log('   - Duplicate detection –º–æ–∂–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ª–µ–≥–∏—Ç–∏–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏');
  
  console.log('\n2. –ö–û–ù–§–õ–ò–ö–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
  console.log('   - Boost Verification (2 –º–∏–Ω) + TON/UNI –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ (5 –º–∏–Ω) = –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç');
  console.log('   - WebSocket cleanup (1 –º–∏–Ω) –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ');
  console.log('   - –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å race conditions');
  
  console.log('\n3. –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•:');
  console.log('   - User 192: ton_boost_active=true –±–µ–∑ ton_farming_data (–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏)');
  console.log('   - –í–æ–∑–º–æ–∂–Ω—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å balance_ton vs —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏');
  console.log('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è" –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å "–ª–∏—à–Ω–∏–µ" —Å—Ä–µ–¥—Å—Ç–≤–∞');
  
  console.log('\n4. –†–ï–§–ï–†–ê–õ–¨–ù–´–ô –°–ü–ê–ú –í–õ–ò–Ø–ï–¢ –ù–ê –ë–ê–õ–ê–ù–°:');
  console.log('   - User 25: 911 REFERRAL_REWARD –∑–∞ 3 –¥–Ω—è (–Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ)');
  console.log('   - –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ" —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã');
  console.log('   - –ö–∞—Å–∫–∞–¥–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: rollback —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å');
  
  console.log('\n5. –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:');
  console.log('   - User 25: 46 TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å 0.0 –º–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏');
  console.log('   - –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å "–¥—É–±–ª–∏–∫–∞—Ç—ã", –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ª–µ–≥–∏—Ç–∏–º–Ω—ã');
  console.log('   - tx_hash_unique logic –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  
  console.log('\nüéØ –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
  console.log('   –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø –§–ê–ö–¢–û–†–û–í 1 + 2 + 5:');
  console.log('   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç');
  console.log('   2. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (2-5 –º–∏–Ω) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"');
  console.log('   3. BalanceManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é');
  console.log('   4. –°—Ä–µ–¥—Å—Ç–≤–∞ –∏—Å—á–µ–∑–∞—é—Ç –±–µ–∑ —Å–ª–µ–¥–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
  console.log('   5. –°–ª–µ–¥—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (—Å–∏—Å—Ç–µ–º–∞ "–æ—Å—Ç—ã–ª–∞")');
}

async function main() {
  try {
    await analyzeSpecificBalanceRollbacks();
    await checkSchedulerConflictTimings();
    await analyzeBalanceManagerOperations();
    await searchForZeroTimestampOperations();
    await generateRootCauseHypotheses();
    
    console.log('\n' + '='.repeat(80));
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´:');
    console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤');
    console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ BalanceManager –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('üìä User 25 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–ø—Ç–æ–º—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ rollback –ø—Ä–æ—Ü–µ—Å—Å–∞');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

main().catch(console.error);