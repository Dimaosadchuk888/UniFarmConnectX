/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER ID 25 - PRODUCTION ONLY
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–∞ hash: 00a1ba3c2614f4d65cc346805feea96042cb111351b3977c68f3379ddb90e1b4
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function finalDiagnosis() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER ID 25 PRODUCTION');
  console.log('===============================================');
  console.log('Target Hash: 00a1ba3c2614f4d65cc346805feea96042cb111351b3977c68f3379ddb90e1b4');
  console.log('Expected: 0.1 TON deposit');
  
  try {
    // 1. –ü–û–õ–£–ß–ï–ù–ò–ï USER ID 25
    const { data: user25, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 25)
      .single();
    
    if (userError || !user25) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: User ID 25 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Production');
      console.log('Error:', userError?.message);
      return;
    }
    
    console.log('\n‚úÖ USER ID 25 –ù–ê–ô–î–ï–ù:');
    console.log(`   - ID: ${user25.id}`);
    console.log(`   - Telegram ID: ${user25.telegram_id}`);
    console.log(`   - Username: ${user25.username}`);
    console.log(`   - Current TON Balance: ${user25.balance_ton}`);
    console.log(`   - Ref Code: ${user25.ref_code}`);
    console.log(`   - Created: ${user25.created_at}`);
    
    // 2. –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û –•–ï–®–£
    const targetHash = '00a1ba3c2614f4d65cc346805feea96042cb111351b3977c68f3379ddb90e1b4';
    const { data: hashTransactions, error: hashError } = await supabase
      .from('transactions')
      .select('*')
      .ilike('description', `%${targetHash}%`);
    
    console.log('\nüîç –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û –•–ï–®–£:');
    if (hashError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', hashError.message);
    } else {
      console.log(`   - –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ö–µ—à–µ–º: ${hashTransactions?.length || 0}`);
      if (hashTransactions && hashTransactions.length > 0) {
        hashTransactions.forEach(tx => {
          console.log(`   - ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount} ${tx.currency}`);
          console.log(`     Type: ${tx.type}, Status: ${tx.status}`);
          console.log(`     Created: ${tx.created_at}`);
          console.log(`     Description: ${tx.description}`);
        });
      }
    }
    
    // 3. –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER ID 25
    const { data: allTransactions, error: allError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .order('created_at', { ascending: false });
    
    console.log('\nüìä –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER ID 25:');
    if (allError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError.message);
    } else {
      console.log(`   - –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions?.length || 0}`);
      
      // TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const tonTxs = allTransactions?.filter(tx => tx.currency === 'TON') || [];
      console.log(`   - TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTxs.length}`);
      
      tonTxs.slice(0, 10).forEach((tx, idx) => {
        console.log(`     ${idx + 1}. ${tx.created_at}: ${tx.type} ${tx.amount} TON (${tx.status})`);
      });
      
      // –î–µ–ø–æ–∑–∏—Ç—ã 0.1 TON
      const deposit01 = tonTxs.filter(tx => tx.amount === '0.1' && tx.type === 'DEPOSIT');
      console.log(`   - –î–µ–ø–æ–∑–∏—Ç—ã 0.1 TON: ${deposit01.length}`);
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      console.log('\n   üìÖ –ü–û–°–õ–ï–î–ù–ò–ï 5 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
      allTransactions?.slice(0, 5).forEach((tx, idx) => {
        console.log(`     ${idx + 1}. ${tx.created_at}: ${tx.type} ${tx.amount} ${tx.currency}`);
      });
    }
    
    // 4. –ü–†–û–í–ï–†–ö–ê API –õ–û–ì–û–í
    console.log('\nüîß –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–´–• –ü–†–û–ë–õ–ï–ú:');
    
    const hasTargetHash = (hashTransactions?.length || 0) > 0;
    const hasCorrectUser = hashTransactions?.some(tx => tx.user_id === 25) || false;
    const balanceUpdated = parseFloat(user25.balance_ton) > 0;
    
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ö–µ—à–µ–º –Ω–∞–π–¥–µ–Ω–∞: ${hasTargetHash ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç User 25: ${hasCorrectUser ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${balanceUpdated ? '–î–ê' : '–ù–ï–¢'}`);
    
    // 5. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
    console.log('===================');
    console.log(`environment: production`);
    console.log(`user_id: ${user25.id}`);
    console.log(`telegram_id: ${user25.telegram_id}`);
    console.log(`username: ${user25.username}`);
    console.log(`current_ton_balance: ${user25.balance_ton}`);
    console.log(`tx_hash_found: ${hasTargetHash}`);
    console.log(`api_called: ${hasTargetHash ? 'true' : 'false'}`);
    console.log(`controller_triggered: ${hasTargetHash ? 'true' : 'false'}`);
    console.log(`service_triggered: ${hasTargetHash ? 'true' : 'false'}`);
    console.log(`transaction_record_created: ${hasTargetHash}`);
    console.log(`balance_updated: ${balanceUpdated}`);
    console.log(`error_detected: ${!hasTargetHash ? 'FRONTEND –ù–ï –í–´–ó–í–ê–õ BACKEND API' : '–ù–ï–¢'}`);
    console.log(`suspected_cause: ${!hasTargetHash ? 'tonConnectService.ts –ù–ï –í–´–ó–í–ê–õ correctApiRequest' : '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'}`);
    console.log(`ui_received_update: ${balanceUpdated}`);
    console.log(`missing_fields: ${!hasTargetHash ? 'transaction record, balance update' : '–ù–ï–¢'}`);
    
    if (!hasTargetHash) {
      console.log(`next_steps_suggestion: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend console logs –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–µ–ø–æ–∑–∏—Ç–∞, —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ tonConnectService.sendTonTransaction() –≤—ã–∑—ã–≤–∞–µ—Ç POST /api/v2/wallet/ton-deposit`);
    } else {
      console.log(`next_steps_suggestion: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

finalDiagnosis();