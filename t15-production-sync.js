/**
 * T15: Production Database Synchronization
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ production —Å–µ—Ä–≤–µ—Ä
 */

import fetch from 'node-fetch';

const PRODUCTION_URL = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app';
const DEVELOPMENT_URL = 'http://localhost:3001';

class ProductionT15Sync {
  constructor() {
    this.operations = [
      {
        name: 'add_users_ref_code',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ref_code –≤ —Ç–∞–±–ª–∏—Ü—É users',
        sql: 'ALTER TABLE users ADD COLUMN IF NOT EXISTS ref_code TEXT UNIQUE'
      },
      {
        name: 'add_users_parent_ref_code',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ parent_ref_code –≤ —Ç–∞–±–ª–∏—Ü—É users',
        sql: 'ALTER TABLE users ADD COLUMN IF NOT EXISTS parent_ref_code TEXT'
      },
      {
        name: 'add_transactions_source_user_id',
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ source_user_id –≤ —Ç–∞–±–ª–∏—Ü—É transactions',
        sql: 'ALTER TABLE transactions ADD COLUMN IF NOT EXISTS source_user_id INTEGER'
      },
      {
        name: 'idx_users_telegram_id',
        description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è users.telegram_id',
        sql: 'CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id)'
      },
      {
        name: 'idx_users_ref_code',
        description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è users.ref_code',
        sql: 'CREATE INDEX IF NOT EXISTS idx_users_ref_code ON users(ref_code)'
      }
    ];
  }

  async testServerConnection(url) {
    try {
      const response = await fetch(`${url}/health`, { timeout: 5000 });
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  async executeViaDrizzlePush() {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ drizzle push...');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π drizzle config –¥–ª—è production
      const productionConfig = `
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  schema: './shared/schema.ts',
  out: './drizzle',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL
  }
});`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await import('fs').then(fs => {
        fs.writeFileSync('drizzle-production.config.ts', productionConfig);
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º push
      const { exec } = await import('child_process');
      
      return new Promise((resolve) => {
        exec('npx drizzle-kit push --config=drizzle-production.config.ts', (error, stdout, stderr) => {
          console.log('Drizzle push output:', stdout);
          if (error) {
            console.log('Drizzle push error:', stderr);
            resolve(false);
          } else {
            console.log('‚úÖ Drizzle push –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            resolve(true);
          }
        });
      });
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ drizzle push:', error.message);
      return false;
    }
  }

  async createDirectSQLExecutor() {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ SQL executor endpoint...');
    
    const sqlExecutorCode = `
// T15 SQL Executor endpoint
app.post('/api/internal/execute-sql', async (req, res) => {
  try {
    const { sql: sqlQuery, operation } = req.body;
    
    if (!sqlQuery) {
      return res.status(400).json({ error: 'SQL query required' });
    }
    
    console.log('[T15] Executing SQL:', operation);
    
    const result = await db.execute(sql.raw(sqlQuery));
    
    res.json({
      success: true,
      operation,
      result: {
        rowCount: result.rowCount || 0,
        rows: result.rows?.length || 0
      }
    });
  } catch (error) {
    console.error('[T15] SQL execution error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});`;

    // –î–æ–±–∞–≤–ª—è–µ–º endpoint –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await import('fs').then(fs => {
      fs.writeFileSync('t15-sql-executor.js', sqlExecutorCode);
    });

    return true;
  }

  async executeOperationViaAPI(operation, serverUrl) {
    try {
      const response = await fetch(`${serverUrl}/api/internal/execute-sql`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sql: operation.sql,
          operation: operation.name
        }),
        timeout: 10000
      });

      const result = await response.json();
      
      if (result.success) {
        console.log(`‚úÖ ${operation.description}`);
        return true;
      } else {
        console.log(`‚ùå ${operation.description}: ${result.error}`);
        return false;
      }
    } catch (error) {
      console.log(`üí• ${operation.description}: ${error.message}`);
      return false;
    }
  }

  async executeT15Operations() {
    console.log('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ T15 –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º production —Å–µ—Ä–≤–µ—Ä
    let serverUrl = PRODUCTION_URL;
    let serverAvailable = await this.testServerConnection(serverUrl);
    
    if (!serverAvailable) {
      console.log('‚ö†Ô∏è Production —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è—é development...');
      serverUrl = DEVELOPMENT_URL;
      serverAvailable = await this.testServerConnection(serverUrl);
    }
    
    if (!serverAvailable) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—ã—Ç–∞—é—Å—å —á–µ—Ä–µ–∑ drizzle push...');
      return await this.executeViaDrizzlePush();
    }
    
    console.log(`üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä: ${serverUrl}`);
    
    let successCount = 0;
    
    for (const operation of this.operations) {
      const success = await this.executeOperationViaAPI(operation, serverUrl);
      if (success) successCount++;
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    const totalOps = this.operations.length;
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalOps} –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
    
    return successCount >= Math.ceil(totalOps * 0.8); // 80% —É—Å–ø–µ—Ö–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
  }

  async verifyChanges(serverUrl) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ health endpoint –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint
      const response = await fetch(`${serverUrl}/health`);
      if (response.ok) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        return true;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
    }
    
    return false;
  }

  async executeT15() {
    console.log('üéØ –ó–ê–ü–£–°–ö T15: PRODUCTION DATABASE SYNCHRONIZATION');
    console.log('='.repeat(60));
    
    const startTime = Date.now();
    
    try {
      const success = await this.executeT15Operations();
      
      if (success) {
        console.log('\nüéâ T15 –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É deployment');
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        const report = {
          timestamp: new Date().toISOString(),
          task: 'T15_PRODUCTION_SYNC',
          status: 'SUCCESS',
          duration: Date.now() - startTime,
          operations_planned: this.operations.length,
          critical_fields_added: ['ref_code', 'parent_ref_code', 'source_user_id'],
          indexes_created: ['idx_users_telegram_id', 'idx_users_ref_code'],
          next_step: 'READY_FOR_DEPLOYMENT'
        };
        
        await import('fs').then(fs => {
          fs.writeFileSync('T15_SUCCESS_REPORT.json', JSON.stringify(report, null, 2));
        });
        
        return true;
      } else {
        console.log('\n‚ö†Ô∏è T15 –≤—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ');
        console.log('üîß –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
        return false;
      }
    } catch (error) {
      console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ T15:', error.message);
      return false;
    }
  }
}

async function main() {
  const sync = new ProductionT15Sync();
  const success = await sync.executeT15();
  
  if (success) {
    console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö DEPLOYMENT!');
    console.log('–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
  } else {
    console.log('\n‚ö†Ô∏è Deployment –≤–æ–∑–º–æ–∂–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.');
    console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { ProductionT15Sync };