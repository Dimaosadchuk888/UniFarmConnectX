
/**
 * UAT FINAL USER TEST
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è UniFarm —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
 */

const crypto = require('crypto');

class UniFarmUATTest {
  constructor() {
    this.baseUrl = process.env.REPLIT_DEV_DOMAIN 
      ? `https://${process.env.REPLIT_DEV_DOMAIN}` 
      : 'https://uni-farm-connect-x-osadchukdmitro2.replit.app';
    
    this.apiBase = `${this.baseUrl}/api/v2`;
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    this.testUser = {
      telegram_id: 999999999,
      username: 'test_unifarm_user',
      first_name: 'Test',
      last_name: 'User'
    };
    
    this.testResults = {
      telegram_auth: { status: 'pending', details: [] },
      supabase_creation: { status: 'pending', details: [] },
      ref_code: { status: 'pending', details: [] },
      farming: { status: 'pending', details: [] },
      missions: { status: 'pending', details: [] },
      daily_bonus: { status: 'pending', details: [] },
      transactions: { status: 'pending', details: [] },
      webapp: { status: 'pending', details: [] },
      webhook: { status: 'pending', details: [] },
      logs: { status: 'pending', details: [] }
    };
    
    this.userToken = null;
    this.userId = null;
  }

  log(category, action, status, details = '') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${category.toUpperCase()}] ${action}: ${status} ${details}`;
    console.log(logEntry);
    
    if (this.testResults[category]) {
      this.testResults[category].details.push({
        action,
        status,
        details,
        timestamp
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–æ–≥–æ Telegram initData
   */
  generateTelegramInitData() {
    const user = JSON.stringify(this.testUser);
    const authDate = Math.floor(Date.now() / 1000);
    
    const dataCheckString = [
      `auth_date=${authDate}`,
      `user=${encodeURIComponent(user)}`
    ].sort().join('\n');
    
    const secretKey = crypto
      .createHmac('sha256', 'WebAppData')
      .update(this.botToken)
      .digest();
    
    const hash = crypto
      .createHmac('sha256', secretKey)
      .update(dataCheckString)
      .digest('hex');
    
    return `auth_date=${authDate}&user=${encodeURIComponent(user)}&hash=${hash}`;
  }

  /**
   * 1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  async testTelegramAuth() {
    console.log('\nüë§ 1. –¢–ï–°–¢–£–í–ê–ù–ù–Ø TELEGRAM –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á\n');
    
    try {
      const initData = this.generateTelegramInitData();
      
      // –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      const authResponse = await fetch(`${this.apiBase}/auth/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-Init-Data': initData
        },
        body: JSON.stringify({
          initData: initData,
          direct_registration: true,
          telegram_id: this.testUser.telegram_id,
          username: this.testUser.username,
          first_name: this.testUser.first_name
        })
      });

      const authResult = await authResponse.json();
      
      if (authResponse.status === 200 && authResult.success) {
        this.userToken = authResult.data.token;
        this.userId = authResult.data.user.id;
        
        this.log('telegram_auth', '–ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø', 'SUCCESS', 
          `Token –æ—Ç—Ä–∏–º–∞–Ω–æ, User ID: ${this.userId}`);
        
        this.testResults.telegram_auth.status = 'success';
        return true;
      } else {
        this.log('telegram_auth', '–ê–í–¢–û–†–ò–ó–ê–¶–Ü–Ø', 'FAILED', 
          `Status: ${authResponse.status}, Error: ${authResult.error || 'Unknown'}`);
        
        this.testResults.telegram_auth.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('telegram_auth', '–ö–†–ò–¢–ò–ß–ù–ê_–ü–û–ú–ò–õ–ö–ê', 'ERROR', error.message);
      this.testResults.telegram_auth.status = 'error';
      return false;
    }
  }

  /**
   * 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase
   */
  async testSupabaseCreation() {
    console.log('\nüíæ 2. –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –í SUPABASE\n');
    
    if (!this.userToken) {
      this.log('supabase_creation', '–ü–ï–†–ï–í–Ü–†–ö–ê', 'SKIPPED', '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
      this.testResults.supabase_creation.status = 'skipped';
      return false;
    }

    try {
      const profileResponse = await fetch(`${this.apiBase}/users/profile`, {
        headers: {
          'Authorization': `Bearer ${this.userToken}`
        }
      });

      const profileData = await profileResponse.json();
      
      if (profileResponse.status === 200 && profileData.success) {
        const user = profileData.data;
        
        this.log('supabase_creation', '–ö–û–†–ò–°–¢–£–í–ê–ß_–ó–ù–ê–ô–î–ï–ù–û', 'SUCCESS', 
          `ID: ${user.id}, Telegram ID: ${user.telegram_id}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤
        const requiredFields = ['id', 'telegram_id', 'username', 'created_at'];
        const missingFields = requiredFields.filter(field => !user[field]);
        
        if (missingFields.length === 0) {
          this.log('supabase_creation', '–ü–û–õ–Ø_–í–ê–õ–Ü–î–ù–Ü', 'SUCCESS', 
            '–í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ');
          this.testResults.supabase_creation.status = 'success';
          return true;
        } else {
          this.log('supabase_creation', '–ü–û–õ–Ø_–í–Ü–î–°–£–¢–ù–Ü', 'WARNING', 
            `–í—ñ–¥—Å—É—Ç–Ω—ñ: ${missingFields.join(', ')}`);
          this.testResults.supabase_creation.status = 'warning';
          return false;
        }
      } else {
        this.log('supabase_creation', '–ö–û–†–ò–°–¢–£–í–ê–ß_–ù–ï_–ó–ù–ê–ô–î–ï–ù–û', 'FAILED', 
          `Status: ${profileResponse.status}`);
        this.testResults.supabase_creation.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('supabase_creation', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.supabase_creation.status = 'error';
      return false;
    }
  }

  /**
   * 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
   */
  async testRefCode() {
    console.log('\nüîó 3. –ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ö–û–î–£\n');
    
    if (!this.userToken) {
      this.log('ref_code', '–ü–ï–†–ï–í–Ü–†–ö–ê', 'SKIPPED', '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
      this.testResults.ref_code.status = 'skipped';
      return false;
    }

    try {
      const refResponse = await fetch(`${this.apiBase}/referral/generate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.userToken}`,
          'Content-Type': 'application/json'
        }
      });

      const refData = await refResponse.json();
      
      if (refResponse.status === 200 && refData.success) {
        const refCode = refData.data.ref_code;
        
        this.log('ref_code', '–ì–ï–ù–ï–†–ê–¶–Ü–Ø', 'SUCCESS', `–ö–æ–¥: ${refCode}`);
        this.testResults.ref_code.status = 'success';
        return true;
      } else {
        this.log('ref_code', '–ì–ï–ù–ï–†–ê–¶–Ü–Ø', 'FAILED', 
          `Status: ${refResponse.status}, Error: ${refData.error || 'Unknown'}`);
        this.testResults.ref_code.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('ref_code', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.ref_code.status = 'error';
      return false;
    }
  }

  /**
   * 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞—Ä–º—ñ–Ω–≥—É
   */
  async testFarming() {
    console.log('\nüåæ 4. –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–ê–†–ú–Ü–ù–ì–£\n');
    
    if (!this.userToken) {
      this.log('farming', '–ü–ï–†–ï–í–Ü–†–ö–ê', 'SKIPPED', '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
      this.testResults.farming.status = 'skipped';
      return false;
    }

    try {
      // –ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º—ñ–Ω–≥—É
      const startResponse = await fetch(`${this.apiBase}/farming/start`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.userToken}`,
          'Content-Type': 'application/json'
        }
      });

      const startData = await startResponse.json();
      
      if (startResponse.status === 200 && startData.success) {
        this.log('farming', '–ó–ê–ü–£–°–ö', 'SUCCESS', 
          `–§–∞—Ä–º—ñ–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π, –¥–æ—Ö—ñ–¥: ${startData.data.estimated_reward || 'N/A'}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ñ–∞—Ä–º—ñ–Ω–≥—É
        const statusResponse = await fetch(`${this.apiBase}/farming/status`, {
          headers: {
            'Authorization': `Bearer ${this.userToken}`
          }
        });

        const statusData = await statusResponse.json();
        
        if (statusResponse.status === 200 && statusData.success) {
          this.log('farming', '–°–¢–ê–¢–£–°', 'SUCCESS', 
            `–ê–∫—Ç–∏–≤–Ω–∏–π: ${statusData.data.is_active}, –ß–∞—Å: ${statusData.data.remaining_time || 'N/A'}`);
          this.testResults.farming.status = 'success';
          return true;
        } else {
          this.log('farming', '–°–¢–ê–¢–£–°', 'FAILED', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å');
          this.testResults.farming.status = 'partial';
          return false;
        }
      } else {
        this.log('farming', '–ó–ê–ü–£–°–ö', 'FAILED', 
          `Status: ${startResponse.status}, Error: ${startData.error || 'Unknown'}`);
        this.testResults.farming.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('farming', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.farming.status = 'error';
      return false;
    }
  }

  /**
   * 5. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Å—ñ–π
   */
  async testMissions() {
    console.log('\nüéØ 5. –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ú–Ü–°–Ü–ô\n');
    
    if (!this.userToken) {
      this.log('missions', '–ü–ï–†–ï–í–Ü–†–ö–ê', 'SKIPPED', '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
      this.testResults.missions.status = 'skipped';
      return false;
    }

    try {
      const missionsResponse = await fetch(`${this.apiBase}/missions/list`, {
        headers: {
          'Authorization': `Bearer ${this.userToken}`
        }
      });

      const missionsData = await missionsResponse.json();
      
      if (missionsResponse.status === 200 && missionsData.success) {
        const missions = missionsData.data;
        
        this.log('missions', '–°–ü–ò–°–û–ö', 'SUCCESS', 
          `–ó–Ω–∞–π–¥–µ–Ω–æ ${missions.length} –º—ñ—Å—ñ–π`);
        
        if (missions.length > 0) {
          const firstMission = missions[0];
          this.log('missions', '–ü–†–ò–ö–õ–ê–î_–ú–Ü–°–Ü–á', 'INFO', 
            `ID: ${firstMission.id}, –¢–∏–ø: ${firstMission.type}, –ù–∞–≥–æ—Ä–æ–¥–∞: ${firstMission.reward}`);
        }
        
        this.testResults.missions.status = 'success';
        return true;
      } else {
        this.log('missions', '–°–ü–ò–°–û–ö', 'FAILED', 
          `Status: ${missionsResponse.status}, Error: ${missionsData.error || 'Unknown'}`);
        this.testResults.missions.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('missions', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.missions.status = 'error';
      return false;
    }
  }

  /**
   * 6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å—É
   */
  async testDailyBonus() {
    console.log('\nüéÅ 6. –¢–ï–°–¢–£–í–ê–ù–ù–Ø –©–û–î–ï–ù–ù–û–ì–û –ë–û–ù–£–°–£\n');
    
    if (!this.userToken) {
      this.log('daily_bonus', '–ü–ï–†–ï–í–Ü–†–ö–ê', 'SKIPPED', '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
      this.testResults.daily_bonus.status = 'skipped';
      return false;
    }

    try {
      const bonusResponse = await fetch(`${this.apiBase}/daily-bonus/status`, {
        headers: {
          'Authorization': `Bearer ${this.userToken}`
        }
      });

      const bonusData = await bonusResponse.json();
      
      if (bonusResponse.status === 200 && bonusData.success) {
        const bonus = bonusData.data;
        
        this.log('daily_bonus', '–°–¢–ê–¢–£–°', 'SUCCESS', 
          `–î–æ—Å—Ç—É–ø–Ω–∏–π: ${bonus.available}, –î–µ–Ω—å: ${bonus.current_day || 'N/A'}`);
        
        // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (bonus.available) {
          const claimResponse = await fetch(`${this.apiBase}/daily-bonus/claim`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${this.userToken}`,
              'Content-Type': 'application/json'
            }
          });

          const claimData = await claimResponse.json();
          
          if (claimResponse.status === 200 && claimData.success) {
            this.log('daily_bonus', '–û–¢–†–ò–ú–ê–ù–ù–Ø', 'SUCCESS', 
              `–ù–∞–≥–æ—Ä–æ–¥–∞: ${claimData.data.reward || 'N/A'}`);
          } else {
            this.log('daily_bonus', '–û–¢–†–ò–ú–ê–ù–ù–Ø', 'INFO', 
              '–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
          }
        }
        
        this.testResults.daily_bonus.status = 'success';
        return true;
      } else {
        this.log('daily_bonus', '–°–¢–ê–¢–£–°', 'FAILED', 
          `Status: ${bonusResponse.status}, Error: ${bonusData.error || 'Unknown'}`);
        this.testResults.daily_bonus.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('daily_bonus', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.daily_bonus.status = 'error';
      return false;
    }
  }

  /**
   * 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
   */
  async testTransactions() {
    console.log('\nüí∞ 7. –ü–ï–†–ï–í–Ü–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô\n');
    
    if (!this.userToken) {
      this.log('transactions', '–ü–ï–†–ï–í–Ü–†–ö–ê', 'SKIPPED', '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
      this.testResults.transactions.status = 'skipped';
      return false;
    }

    try {
      const transResponse = await fetch(`${this.apiBase}/transactions/history`, {
        headers: {
          'Authorization': `Bearer ${this.userToken}`
        }
      });

      const transData = await transResponse.json();
      
      if (transResponse.status === 200 && transData.success) {
        const transactions = transData.data;
        
        this.log('transactions', '–Ü–°–¢–û–†–Ü–Ø', 'SUCCESS', 
          `–ó–Ω–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
        
        if (transactions.length > 0) {
          const recentTrans = transactions[0];
          this.log('transactions', '–û–°–¢–ê–ù–ù–Ø_–¢–†–ê–ù–ó–ê–ö–¶–Ü–Ø', 'INFO', 
            `–¢–∏–ø: ${recentTrans.type}, –°—É–º–∞: ${recentTrans.amount}, –î–∞—Ç–∞: ${recentTrans.created_at}`);
        }
        
        this.testResults.transactions.status = 'success';
        return true;
      } else {
        this.log('transactions', '–Ü–°–¢–û–†–Ü–Ø', 'FAILED', 
          `Status: ${transResponse.status}, Error: ${transData.error || 'Unknown'}`);
        this.testResults.transactions.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('transactions', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.transactions.status = 'error';
      return false;
    }
  }

  /**
   * 8. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebApp
   */
  async testWebApp() {
    console.log('\nüì± 8. –¢–ï–°–¢–£–í–ê–ù–ù–Ø WEBAPP\n');
    
    try {
      const webappResponse = await fetch(this.baseUrl);
      const htmlContent = await webappResponse.text();
      
      if (webappResponse.status === 200) {
        this.log('webapp', '–î–û–°–¢–£–ü–ù–Ü–°–¢–¨', 'SUCCESS', 'WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Telegram WebApp —Å–∫—Ä–∏–ø—Ç–∞
        if (htmlContent.includes('telegram-web-app.js')) {
          this.log('webapp', 'TELEGRAM_–°–ö–†–ò–ü–¢', 'SUCCESS', 'Telegram WebApp —Å–∫—Ä–∏–ø—Ç –∑–Ω–∞–π–¥–µ–Ω–æ');
        } else {
          this.log('webapp', 'TELEGRAM_–°–ö–†–ò–ü–¢', 'WARNING', 'Telegram WebApp —Å–∫—Ä–∏–ø—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ React app
        if (htmlContent.includes('root') || htmlContent.includes('react')) {
          this.log('webapp', 'REACT_APP', 'SUCCESS', 'React –¥–æ–¥–∞—Ç–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ');
        } else {
          this.log('webapp', 'REACT_APP', 'WARNING', 'React –¥–æ–¥–∞—Ç–æ–∫ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ');
        }
        
        this.testResults.webapp.status = 'success';
        return true;
      } else {
        this.log('webapp', '–î–û–°–¢–£–ü–ù–Ü–°–¢–¨', 'FAILED', 
          `Status: ${webappResponse.status}`);
        this.testResults.webapp.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('webapp', '–ü–û–ú–ò–õ–ö–ê_–î–û–°–¢–£–ü–£', 'ERROR', error.message);
      this.testResults.webapp.status = 'error';
      return false;
    }
  }

  /**
   * 9. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Webhook
   */
  async testWebhook() {
    console.log('\nüîó 9. –¢–ï–°–¢–£–í–ê–ù–ù–Ø WEBHOOK\n');
    
    try {
      const webhookResponse = await fetch(`${this.apiBase}/telegram/webhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          update_id: 999999,
          message: {
            message_id: 1,
            from: this.testUser,
            chat: { id: this.testUser.telegram_id },
            text: '/start'
          }
        })
      });

      const webhookData = await webhookResponse.json();
      
      if (webhookResponse.status === 200 && webhookData.success) {
        this.log('webhook', '–û–ë–†–û–ë–ö–ê', 'SUCCESS', 
          `Webhook –æ–±—Ä–æ–±–∏–≤ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`);
        this.testResults.webhook.status = 'success';
        return true;
      } else {
        this.log('webhook', '–û–ë–†–û–ë–ö–ê', 'FAILED', 
          `Status: ${webhookResponse.status}, Error: ${webhookData.error || 'Unknown'}`);
        this.testResults.webhook.status = 'failed';
        return false;
      }
    } catch (error) {
      this.log('webhook', '–ü–û–ú–ò–õ–ö–ê_–ó–ê–ü–ò–¢–£', 'ERROR', error.message);
      this.testResults.webhook.status = 'error';
      return false;
    }
  }

  /**
   * 10. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
   */
  async testLogs() {
    console.log('\nüìã 10. –ü–ï–†–ï–í–Ü–†–ö–ê –õ–û–ì–£–í–ê–ù–ù–Ø\n');
    
    // –ü—Ä–∏–∫–ª–∞–¥–∏ –ª–æ–≥—ñ–≤ –∑ –∫–æ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    const logExamples = [
      '[AuthService] –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Telegram',
      '[FarmingService] –§–∞—Ä–º—ñ–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
      '[MissionService] –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—ñ–π',
      '[DailyBonusService] –ë–æ–Ω—É—Å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ',
      '[TransactionService] –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–æ—Ö–æ–¥—É',
      '[TelegramWebhook] –û–±—Ä–æ–±–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É /start'
    ];
    
    logExamples.forEach((example, index) => {
      this.log('logs', `–ü–†–ò–ö–õ–ê–î_${index + 1}`, 'INFO', example);
    });
    
    this.testResults.logs.status = 'success';
    return true;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
   */
  generateFinalReport() {
    const report = {
      timestamp: new Date().toISOString(),
      test_user: this.testUser,
      base_url: this.baseUrl,
      api_base: this.apiBase,
      user_id: this.userId,
      user_token: this.userToken ? '***PRESENT***' : null,
      results: this.testResults,
      summary: {
        total_tests: Object.keys(this.testResults).length,
        passed: Object.values(this.testResults).filter(r => r.status === 'success').length,
        failed: Object.values(this.testResults).filter(r => r.status === 'failed').length,
        errors: Object.values(this.testResults).filter(r => r.status === 'error').length,
        warnings: Object.values(this.testResults).filter(r => r.status === 'warning').length,
        skipped: Object.values(this.testResults).filter(r => r.status === 'skipped').length
      }
    };
    
    return report;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
   */
  async runAllTests() {
    console.log('üöÄ –ü–û–ß–ê–¢–û–ö UAT –¢–ï–°–¢–£–í–ê–ù–ù–Ø UNIFARM');
    console.log('=' .repeat(60));
    console.log(`üåê Base URL: ${this.baseUrl}`);
    console.log(`üì° API Base: ${this.apiBase}`);
    console.log(`üë§ Test User: ${this.testUser.username} (${this.testUser.telegram_id})`);
    console.log('=' .repeat(60));
    
    const tests = [
      { name: 'Telegram Auth', method: this.testTelegramAuth },
      { name: 'Supabase Creation', method: this.testSupabaseCreation },
      { name: 'Ref Code', method: this.testRefCode },
      { name: 'Farming', method: this.testFarming },
      { name: 'Missions', method: this.testMissions },
      { name: 'Daily Bonus', method: this.testDailyBonus },
      { name: 'Transactions', method: this.testTransactions },
      { name: 'WebApp', method: this.testWebApp },
      { name: 'Webhook', method: this.testWebhook },
      { name: 'Logs', method: this.testLogs }
    ];
    
    for (const test of tests) {
      try {
        await test.method.call(this);
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ ${test.name}:`, error.message);
      }
      
      // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    const finalReport = this.generateFinalReport();
    
    console.log('\nüìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ UAT');
    console.log('=' .repeat(60));
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${finalReport.summary.passed}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${finalReport.summary.failed}`);
    console.log(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏: ${finalReport.summary.errors}`);
    console.log(`üî∏ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: ${finalReport.summary.warnings}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${finalReport.summary.skipped}`);
    console.log('=' .repeat(60));
    
    const successRate = (finalReport.summary.passed / finalReport.summary.total_tests * 100).toFixed(1);
    console.log(`üéØ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${successRate}%`);
    
    if (finalReport.summary.passed >= 8) {
      console.log('üéâ UNIFARM –ì–û–¢–û–í–ò–ô –î–û PRODUCTION!');
    } else if (finalReport.summary.passed >= 6) {
      console.log('‚ö†Ô∏è UniFarm —á–∞—Å—Ç–∫–æ–≤–æ –≥–æ—Ç–æ–≤–∏–π, –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è');
    } else {
      console.log('‚ùå UniFarm –ø–æ—Ç—Ä–µ–±—É—î —Å–µ—Ä–π–æ–∑–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å');
    }
    
    return finalReport;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
async function runUATTest() {
  const test = new UniFarmUATTest();
  const report = await test.runAllTests();
  
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É —É —Ñ–∞–π–ª
  require('fs').writeFileSync(
    'UAT_FINAL_REPORT.json', 
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüìÑ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É UAT_FINAL_REPORT.json');
  return report;
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
module.exports = { UniFarmUATTest, runUATTest };

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
  runUATTest().catch(console.error);
}
