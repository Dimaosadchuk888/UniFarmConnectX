/**
 * T63 - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
 * –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 */
function generateRefCode(level) {
  return `REF_CHAIN_${level}_${Date.now()}${Math.floor(Math.random() * 1000)}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ü–µ–ø–æ—á–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */
async function createReferralChain() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –¶–ï–ü–û–ß–ö–ò ===');
  
  const users = [];
  let previousUserId = null;
  
  for (let level = 1; level <= 20; level++) {
    const telegram_id = 20000000000 + level; // 20000000001 ‚Üí 20000000020
    const username = `chain_user_${level}`;
    const ref_code = generateRefCode(level);
    
    console.log(`–°–æ–∑–¥–∞—é User ${level}/20: telegram_id=${telegram_id}, username=${username}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser, error } = await supabase
      .from('users')
      .insert({
        telegram_id: telegram_id,
        username: username,
        first_name: `Chain User ${level}`,
        ref_code: ref_code,
        referred_by: previousUserId, // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
        balance_uni: 100.000000,
        balance_ton: 100.000000,
        created_at: new Date().toISOString()
      })
      .select('id')
      .single();
      
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è User ${level}:`, error.message);
      continue;
    }
    
    console.log(`‚úÖ User ${level} —Å–æ–∑–¥–∞–Ω: ID=${newUser.id}, referred_by=${previousUserId || 'none'}`);
    
    users.push({
      level: level,
      id: newUser.id,
      telegram_id: telegram_id,
      username: username,
      ref_code: ref_code,
      referred_by: previousUserId
    });
    
    previousUserId = newUser.id; // –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–≥–æ
    
    // –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ`);
  return users;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç UNI farming –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function createUniFarmingDeposits(users) {
  console.log('\n=== –°–û–ó–î–ê–ù–ò–ï UNI FARMING –î–ï–ü–û–ó–ò–¢–û–í (USERS 1-10) ===');
  
  const farmingUsers = users.slice(0, 10); // –ü–µ—Ä–≤—ã–µ 10
  const results = [];
  
  for (const user of farmingUsers) {
    console.log(`–°–æ–∑–¥–∞—é UNI –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è User ${user.level} (ID: ${user.id})`);
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UNI farming –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ
      const { error } = await supabase
        .from('users')
        .update({
          uni_farming_rate: '0.001', // 0.001 UNI –≤ —á–∞—Å
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_last_update: new Date().toISOString()
        })
        .eq('id', user.id);
        
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ UNI –¥–µ–ø–æ–∑–∏—Ç–∞ User ${user.level}:`, error.message);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
      await supabase
        .from('transactions')
        .insert({
          user_id: user.id,
          type: 'UNI_DEPOSIT',
          status: 'completed',
          description: `UNI farming deposit - rate 0.001 per hour`
        });
      
      console.log(`‚úÖ UNI –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è User ${user.level}`);
      
      results.push({
        userId: user.id,
        level: user.level,
        type: 'UNI_FARMING',
        rate: '0.001',
        status: 'active'
      });
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ User ${user.level}:`, error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${results.length} UNI farming –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
  return results;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function createTonBoostDeposits(users) {
  console.log('\n=== –°–û–ó–î–ê–ù–ò–ï TON BOOST –î–ï–ü–û–ó–ò–¢–û–í (USERS 11-20) ===');
  
  const boostUsers = users.slice(10, 20); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
  const results = [];
  
  for (const user of boostUsers) {
    console.log(`–°–æ–∑–¥–∞—é TON Boost –¥–ª—è User ${user.level} (ID: ${user.id})`);
    
    try {
      // –°–æ–∑–¥–∞–µ–º TON Boost purchase
      const { data: boostPurchase, error } = await supabase
        .from('boost_purchases')
        .insert({
          user_id: user.id,
          boost_id: `boost_standard_30d`,
          amount: '50.0',
          daily_rate: '0.5',
          source: 'ton',
          status: 'confirmed',
          start_date: new Date().toISOString(),
          end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // +30 –¥–Ω–µ–π
          is_active: true,
          total_earned: '0.0'
        })
        .select('id')
        .single();
        
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ TON Boost User ${user.level}:`, error.message);
        continue;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å TON (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É)
      await supabase
        .from('users')
        .update({
          balance_ton: '50.000000' // 100 - 50 = 50 TON –æ—Å—Ç–∞–µ—Ç—Å—è
        })
        .eq('id', user.id);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
      await supabase
        .from('transactions')
        .insert({
          user_id: user.id,
          type: 'TON_BOOST_PURCHASE',
          status: 'completed',
          description: `TON Boost purchase - 50 TON for 30 days, rate 0.5 daily`
        });
      
      console.log(`‚úÖ TON Boost —Å–æ–∑–¥–∞–Ω –¥–ª—è User ${user.level}: Boost ID=${boostPurchase.id}`);
      
      results.push({
        userId: user.id,
        level: user.level,
        type: 'TON_BOOST',
        amount: '50.0',
        dailyRate: '0.5',
        boostId: boostPurchase.id,
        status: 'active'
      });
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ User ${user.level}:`, error.message);
    }
    
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${results.length} TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
  return results;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
 */
function generateReport(users, farmingDeposits, boostDeposits) {
  console.log('\n=== T63 –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
  console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏:');
  console.log('');
  
  users.forEach(user => {
    const depositInfo = farmingDeposits.find(d => d.userId === user.id) || 
                       boostDeposits.find(d => d.userId === user.id);
    
    const depositType = depositInfo ? depositInfo.type : 'NO_DEPOSIT';
    const referrerInfo = user.referred_by ? `‚Üí Referrer ID: ${user.referred_by}` : '‚Üí TOP LEVEL';
    
    console.log(`Level ${user.level.toString().padStart(2)}: User ID ${user.id} (${user.telegram_id}) ${depositType} ${referrerInfo}`);
  });
  
  console.log('');
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
  console.log(`UNI Farming –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${farmingDeposits.length}`);
  console.log(`TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${boostDeposits.length}`);
  console.log(`–û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏: ${users.length} —É—Ä–æ–≤–Ω–µ–π`);
  console.log('');
  console.log('üîó –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê:');
  console.log(`User ${users[0]?.id} ‚Üí User ${users[1]?.id} ‚Üí User ${users[2]?.id} ‚Üí ... ‚Üí User ${users[19]?.id}`);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
async function createFullReferralStructure() {
  try {
    console.log('T63 - –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´');
    console.log('='.repeat(70));
    
    // 1. –°–æ–∑–¥–∞–µ–º 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ
    const users = await createReferralChain();
    
    if (users.length < 20) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º UNI farming –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10
    const farmingDeposits = await createUniFarmingDeposits(users);
    
    // 3. –°–æ–∑–¥–∞–µ–º TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10
    const boostDeposits = await createTonBoostDeposits(users);
    
    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generateReport(users, farmingDeposits, boostDeposits);
    
    console.log('\n‚úÖ T63 COMPLETED: 20-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');
    console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ T64 - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–µ—Ç–∏');
    
  } catch (error) {
    console.error('‚ùå T63 CRITICAL ERROR:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
createFullReferralStructure();