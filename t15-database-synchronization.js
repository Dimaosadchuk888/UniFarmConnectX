/**
 * T15: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∞–Ω–∞–ª–∏–∑–µ T14
 */

import { Pool } from '@neondatabase/serverless';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class DatabaseSynchronizer {
  constructor() {
    this.pool = new Pool({ connectionString: process.env.DATABASE_URL });
    this.operations = [];
    this.results = [];
    this.t14Report = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—á–µ—Ç T14 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  loadT14Report() {
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ T14...');
    
    try {
      const reportPath = path.join(__dirname, 'T14_CORRECTED_ANALYSIS_REPORT.json');
      if (fs.existsSync(reportPath)) {
        this.t14Report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
        console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç T14: ${this.t14Report.recommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
        return true;
      } else {
        console.log('  ‚ö†Ô∏è  –û—Ç—á–µ—Ç T14 –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ T14:', error.message);
      return false;
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  planSynchronizationOperations() {
    console.log('\nüîß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    if (this.t14Report) {
      this.planFromT14Report();
    } else {
      this.planFromSchemaAnalysis();
    }
    
    console.log(`üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${this.operations.length}`);
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ T14
   */
  planFromT14Report() {
    const criticalRecs = this.t14Report.recommendations.filter(r => r.priority === 'critical');
    const mediumRecs = this.t14Report.recommendations.filter(r => r.priority === 'medium');
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (const rec of criticalRecs) {
      if (rec.action === 'ADD_COLUMN') {
        this.operations.push({
          type: 'ADD_COLUMN',
          priority: 'critical',
          table: rec.table,
          field: rec.field,
          sql: this.generateAddColumnSQL(rec.table, rec.field),
          description: rec.description
        });
      }
    }
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for (const rec of mediumRecs) {
      if (rec.action === 'CREATE_INDEX') {
        this.operations.push({
          type: 'CREATE_INDEX',
          priority: 'medium',
          table: rec.table,
          field: rec.field,
          sql: rec.sql,
          description: rec.description
        });
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
   */
  generateAddColumnSQL(tableName, fieldName) {
    const fieldTypes = {
      'ref_code': 'TEXT UNIQUE',
      'parent_ref_code': 'TEXT',
      'source_user_id': 'INTEGER',
      'user_id': 'INTEGER',
      'telegram_id': 'BIGINT UNIQUE'
    };
    
    const fieldType = fieldTypes[fieldName] || 'TEXT';
    return `ALTER TABLE ${tableName} ADD COLUMN ${fieldName} ${fieldType};`;
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã
   */
  planFromSchemaAnalysis() {
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    const criticalFields = [
      { table: 'users', field: 'ref_code', type: 'TEXT UNIQUE' },
      { table: 'users', field: 'parent_ref_code', type: 'TEXT' },
      { table: 'transactions', field: 'source_user_id', type: 'INTEGER' },
      { table: 'airdrop_participants', field: 'user_id', type: 'INTEGER' }
    ];

    for (const field of criticalFields) {
      this.operations.push({
        type: 'ADD_COLUMN',
        priority: 'critical',
        table: field.table,
        field: field.field,
        sql: `ALTER TABLE ${field.table} ADD COLUMN ${field.field} ${field.type};`,
        description: `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—è ${field.field} –≤ —Ç–∞–±–ª–∏—Ü—É ${field.table}`
      });
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    const criticalIndexes = [
      { table: 'users', field: 'telegram_id' },
      { table: 'users', field: 'ref_code' },
      { table: 'transactions', field: 'user_id' },
      { table: 'referrals', field: 'user_id' },
      { table: 'missions', field: 'type' }
    ];

    for (const index of criticalIndexes) {
      this.operations.push({
        type: 'CREATE_INDEX',
        priority: 'medium',
        table: index.table,
        field: index.field,
        sql: `CREATE INDEX IF NOT EXISTS idx_${index.table}_${index.field} ON ${index.table}(${index.field});`,
        description: `–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è ${index.table}.${index.field}`
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async checkCurrentStructure() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
      const tablesQuery = `
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name;
      `;
      
      const tablesResult = await this.pool.query(tablesQuery);
      const existingTables = tablesResult.rows.map(row => row.table_name);
      
      console.log(`üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã (${existingTables.length}): ${existingTables.join(', ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
      for (const operation of this.operations) {
        if (operation.type === 'ADD_COLUMN') {
          const columnExists = await this.checkColumnExists(operation.table, operation.field);
          operation.skipReason = columnExists ? '–ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : null;
        }
        
        if (operation.type === 'CREATE_INDEX') {
          const indexExists = await this.checkIndexExists(operation.table, operation.field);
          operation.skipReason = indexExists ? '–ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : null;
        }
      }
      
      const operationsToExecute = this.operations.filter(op => !op.skipReason);
      console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: ${operationsToExecute.length} –∏–∑ ${this.operations.length}`);
      
      return existingTables;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
   */
  async checkColumnExists(tableName, columnName) {
    try {
      const query = `
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
          AND table_name = $1 
          AND column_name = $2;
      `;
      
      const result = await this.pool.query(query, [tableName, columnName]);
      return result.rows.length > 0;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
   */
  async checkIndexExists(tableName, columnName) {
    try {
      const query = `
        SELECT indexname 
        FROM pg_indexes 
        WHERE tablename = $1 
          AND schemaname = 'public'
          AND indexdef ILIKE $2;
      `;
      
      const pattern = `%${columnName}%`;
      const result = await this.pool.query(query, [tableName, pattern]);
      return result.rows.length > 0;
    } catch (error) {
      return false;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async executeSynchronization() {
    console.log('\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const operationsToExecute = this.operations.filter(op => !op.skipReason);
    
    if (operationsToExecute.length === 0) {
      console.log('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    operationsToExecute.sort((a, b) => {
      const priorityOrder = { critical: 0, medium: 1, low: 2 };
      return priorityOrder[a.priority] - priorityOrder[b.priority];
    });
    
    for (const operation of operationsToExecute) {
      await this.executeOperation(operation);
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${this.results.filter(r => r.success).length} —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
   */
  async executeOperation(operation) {
    const priority = operation.priority === 'critical' ? 'üö®' : operation.priority === 'medium' ? '‚ö†Ô∏è' : 'üìù';
    
    try {
      console.log(`${priority} –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${operation.description}`);
      console.log(`   SQL: ${operation.sql}`);
      
      const startTime = Date.now();
      await this.pool.query(operation.sql);
      const duration = Date.now() - startTime;
      
      this.results.push({
        operation: operation,
        success: true,
        duration: duration,
        error: null
      });
      
      console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${duration}ms`);
    } catch (error) {
      this.results.push({
        operation: operation,
        success: false,
        duration: null,
        error: error.message
      });
      
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      
      // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      if (operation.priority === 'critical') {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏');
        throw error;
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async validateSynchronization() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    const validationResults = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const addColumnOps = this.results.filter(r => r.success && r.operation.type === 'ADD_COLUMN');
    
    for (const result of addColumnOps) {
      const operation = result.operation;
      const exists = await this.checkColumnExists(operation.table, operation.field);
      
      validationResults.push({
        type: 'column',
        table: operation.table,
        field: operation.field,
        exists: exists,
        message: exists ? `–ö–æ–ª–æ–Ω–∫–∞ ${operation.table}.${operation.field} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞` : `–ö–æ–ª–æ–Ω–∫–∞ ${operation.table}.${operation.field} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    const createIndexOps = this.results.filter(r => r.success && r.operation.type === 'CREATE_INDEX');
    
    for (const result of createIndexOps) {
      const operation = result.operation;
      const exists = await this.checkIndexExists(operation.table, operation.field);
      
      validationResults.push({
        type: 'index',
        table: operation.table,
        field: operation.field,
        exists: exists,
        message: exists ? `–ò–Ω–¥–µ–∫—Å –¥–ª—è ${operation.table}.${operation.field} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω` : `–ò–Ω–¥–µ–∫—Å –¥–ª—è ${operation.table}.${operation.field} –Ω–µ –Ω–∞–π–¥–µ–Ω`
      });
    }
    
    const successful = validationResults.filter(v => v.exists).length;
    const total = validationResults.length;
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${successful}/${total} –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã`);
    
    validationResults.forEach(validation => {
      const status = validation.exists ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${validation.message}`);
    });
    
    return validationResults;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç T15
   */
  generateReport(validationResults) {
    console.log('\n' + '='.repeat(80));
    console.log('üìä –û–¢–ß–ï–¢ T15: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('='.repeat(80));

    const stats = {
      totalOperations: this.operations.length,
      executedOperations: this.results.filter(r => r.success).length,
      failedOperations: this.results.filter(r => !r.success).length,
      skippedOperations: this.operations.filter(op => op.skipReason).length,
      validatedChanges: validationResults.filter(v => v.exists).length,
      totalValidations: validationResults.length
    };

    console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:`);
    console.log(`  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${stats.totalOperations}`);
    console.log(`  –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${stats.executedOperations}`);
    console.log(`  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${stats.failedOperations}`);
    console.log(`  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${stats.skippedOperations}`);
    console.log(`  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${stats.validatedChanges}/${stats.totalValidations}`);

    console.log(`\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:`);
    
    const successfulOps = this.results.filter(r => r.success);
    if (successfulOps.length > 0) {
      console.log(`\n‚úÖ –£–°–ü–ï–®–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò (${successfulOps.length}):`);
      successfulOps.forEach((result, index) => {
        const op = result.operation;
        console.log(`  ${index + 1}. ${op.type}: ${op.table}.${op.field} (${result.duration}ms)`);
      });
    }
    
    const failedOps = this.results.filter(r => !r.success);
    if (failedOps.length > 0) {
      console.log(`\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò (${failedOps.length}):`);
      failedOps.forEach((result, index) => {
        const op = result.operation;
        console.log(`  ${index + 1}. ${op.type}: ${op.table}.${op.field} - ${result.error}`);
      });
    }
    
    const skippedOps = this.operations.filter(op => op.skipReason);
    if (skippedOps.length > 0) {
      console.log(`\n‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò (${skippedOps.length}):`);
      skippedOps.forEach((op, index) => {
        console.log(`  ${index + 1}. ${op.type}: ${op.table}.${op.field} - ${op.skipReason}`);
      });
    }

    console.log(`\nüìã –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:`);
    if (validationResults.length > 0) {
      validationResults.forEach(validation => {
        const status = validation.exists ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} ${validation.type}: ${validation.table}.${validation.field}`);
      });
    }

    const isSuccess = stats.failedOperations === 0 && stats.validatedChanges === stats.totalValidations;
    
    console.log(`\n${'='.repeat(80)}`);
    console.log(`–°–¢–ê–¢–£–° T15: ${isSuccess ? '‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û' : '‚ö†Ô∏è –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò'}`);
    console.log(`${'='.repeat(80)}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    this.saveReport(stats, validationResults);

    return { stats, isSuccess };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç T15
   */
  saveReport(stats, validationResults) {
    const report = {
      timestamp: new Date().toISOString(),
      task: 'T15_DATABASE_SYNCHRONIZATION',
      statistics: stats,
      operations_planned: this.operations,
      operations_executed: this.results,
      validation_results: validationResults,
      summary: {
        success_rate: ((stats.executedOperations / (stats.totalOperations - stats.skippedOperations)) * 100).toFixed(1),
        completion_status: stats.failedOperations === 0 ? 'COMPLETED' : 'PARTIAL',
        database_integrity: stats.validatedChanges === stats.totalValidations ? 'VERIFIED' : 'ISSUES_FOUND'
      }
    };

    fs.writeFileSync('T15_DATABASE_SYNCHRONIZATION_REPORT.json', JSON.stringify(report, null, 2));
    console.log(`\n‚úÖ –û—Ç—á–µ—Ç T15 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: T15_DATABASE_SYNCHRONIZATION_REPORT.json`);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è T15
   */
  async runSynchronization() {
    try {
      console.log('üöÄ –ó–ê–ü–£–°–ö T15: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
      
      this.loadT14Report();
      this.planSynchronizationOperations();
      
      const existingTables = await this.checkCurrentStructure();
      await this.executeSynchronization();
      
      const validationResults = await this.validateSynchronization();
      const { stats, isSuccess } = this.generateReport(validationResults);
      
      console.log('\n‚úÖ T15 –ó–ê–í–ï–†–®–ï–ù');
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stats.executedOperations} –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, ${stats.validatedChanges} –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`);
      
      return { isSuccess, stats, validationResults };
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ T15:', error.message);
      throw error;
    } finally {
      await this.pool.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function main() {
  const synchronizer = new DatabaseSynchronizer();
  await synchronizer.runSynchronization();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { DatabaseSynchronizer };