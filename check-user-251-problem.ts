import { supabase } from './core/supabaseClient';

async function checkUser251Problem() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 251');
  console.log('='.repeat(50));

  try {
    // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ 251
    console.log('\n1Ô∏è‚É£ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï 251:');
    const { data: user251, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 251)
      .single();

    if (userError) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 251 –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError.message);
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 251 –Ω–∞–π–¥–µ–Ω:');
    console.log(`   - ID: ${user251.id}`);
    console.log(`   - Telegram ID: ${user251.telegram_id}`);
    console.log(`   - Username: ${user251.username}`);
    console.log(`   - First Name: ${user251.first_name}`);
    console.log(`   - UNI Balance: ${user251.balance_uni}`);
    console.log(`   - TON Balance: ${user251.balance_ton}`);
    console.log(`   - TON Wallet: ${user251.ton_wallet_address || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}`);
    console.log(`   - –°–æ–∑–¥–∞–Ω: ${user251.created_at}`);
    console.log(`   - UNI Farming: ${user251.uni_farming_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    console.log(`   - TON Boost: ${user251.ton_boost_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);

    // 2. –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 251
    console.log('\n2Ô∏è‚É£ –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 251:');
    const { data: allTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 251)
      .order('created_at', { ascending: false });

    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else {
      console.log(`üìã –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions?.length || 0}`);
      
      if (allTransactions && allTransactions.length > 0) {
        console.log('\nüìä –î–ï–¢–ê–õ–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
        allTransactions.forEach((tx, idx) => {
          console.log(`   ${idx + 1}. ID: ${tx.id} | [${tx.created_at}]`);
          console.log(`      –¢–∏–ø: ${tx.type}`);
          console.log(`      Amount TON: ${tx.amount_ton || '0'}`);
          console.log(`      Amount UNI: ${tx.amount_uni || '0'}`);
          console.log(`      Currency: ${tx.currency || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
          console.log(`      Amount: ${tx.amount || '0'}`);
          console.log(`      Description: ${tx.description || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
          console.log(`      Status: ${tx.status || 'unknown'}`);
          console.log(`      TX Hash: ${tx.tx_hash || '–Ω–µ—Ç'}`);
          console.log(`      Source: ${tx.source || '–Ω–µ—Ç'}`);
          console.log('      ---');
        });

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        const byType: { [key: string]: any[] } = {};
        allTransactions.forEach(tx => {
          const type = tx.type || 'UNKNOWN';
          if (!byType[type]) byType[type] = [];
          byType[type].push(tx);
        });

        console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:');
        Object.keys(byType).forEach(type => {
          const txs = byType[type];
          const totalAmount = txs.reduce((sum, tx) => sum + parseFloat(tx.amount || tx.amount_ton || tx.amount_uni || '0'), 0);
          console.log(`   ${type}: ${txs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ–±—â–∞—è —Å—É–º–º–∞: ${totalAmount}`);
        });
      } else {
        console.log('‚ùå –ù–ò –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–û');
      }
    }

    // 3. –ò—â–µ–º –ø–æ–ø—ã—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –ª–æ–≥–∞—Ö –æ—à–∏–±–æ–∫
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–ù–´–• TON –û–ü–ï–†–ê–¶–ò–ô:');
    const { data: problemTx, error: problemError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 251)
      .or('status.eq.failed,status.eq.error,status.eq.pending');

    if (!problemError && problemTx && problemTx.length > 0) {
      console.log(`üö® –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${problemTx.length}`);
      problemTx.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. [${tx.created_at}] ${tx.type} - Status: ${tx.status}`);
        console.log(`      Amount: ${tx.amount || tx.amount_ton || '0'}`);
        console.log(`      Description: ${tx.description}`);
      });
    } else {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n4Ô∏è‚É£ –°–í–Ø–ó–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:');
    
    // user_balances
    const { data: balances, error: balanceError } = await supabase
      .from('user_balances')
      .select('*')
      .eq('user_id', 251);

    if (!balanceError && balances) {
      console.log(`üí∞ –ó–∞–ø–∏—Å–∏ –≤ user_balances: ${balances.length}`);
      balances.forEach(balance => {
        console.log(`   UNI: ${balance.balance_uni}, TON: ${balance.balance_ton}`);
        console.log(`   Updated: ${balance.updated_at}`);
      });
    }

    // ton_farming_data
    const { data: farming, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '251');

    if (!farmingError && farming) {
      console.log(`üåæ –ó–∞–ø–∏—Å–∏ –≤ ton_farming_data: ${farming.length}`);
      farming.forEach(f => {
        console.log(`   Farming Balance: ${f.farming_balance}, Rate: ${f.farming_rate}`);
        console.log(`   Boost Active: ${f.boost_active}, Package: ${f.boost_package_id || '–Ω–µ—Ç'}`);
        console.log(`   Last Update: ${f.last_update}`);
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ
    console.log('\n5Ô∏è‚É£ –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ 251:');
    const { data: referrals, error: refError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 251)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);

    if (!refError && referrals && referrals.length > 0) {
      console.log(`üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: ${referrals.length}`);
      referrals.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. [${tx.created_at}] ${tx.amount} ${tx.currency}`);
        console.log(`      ${tx.description}`);
      });
    } else {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑
    console.log('\n6Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó:');
    if (allTransactions && allTransactions.length > 0) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 251 –ø–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
      console.log('   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ TON –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å TON Connect –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π TON –∫–æ—à–µ–ª—å–∫–∞');
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 251 –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
      console.log('   - –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å telegram_id –ø—Ä–∏–≤—è–∑–∫–æ–π');
    }

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

checkUser251Problem().catch(console.error);