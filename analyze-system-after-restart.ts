import { supabase } from './core/supabase';

async function analyzeSystemAfterRestart() {
  console.log('=== –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê ===\n');
  console.log(`–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    console.log('üìä 1. –ü–û–°–õ–ï–î–ù–ò–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø TON BOOST:\n');
    
    const { data: rewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);

    if (!rewardError && rewards) {
      const now = new Date();
      const lastReward = rewards[0];
      const timeSinceLastReward = lastReward 
        ? (now.getTime() - new Date(lastReward.created_at).getTime()) / 60000
        : 999;

      console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${timeSinceLastReward.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      
      if (timeSinceLastReward > 10) {
        console.log('‚ö†Ô∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç (–¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
      } else {
        console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
      if (rewards.length > 1) {
        const user74Rewards = rewards.filter(r => r.user_id === 74);
        if (user74Rewards.length > 0) {
          console.log(`\n–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:`);
          user74Rewards.slice(0, 3).forEach(r => {
            console.log(`  ${new Date(r.created_at).toLocaleString()}: +${r.amount} TON`);
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
          const amount = parseFloat(user74Rewards[0].amount);
          if (amount > 0.01) {
            console.log(`\n‚ùå –°–£–ú–ú–ê –ó–ê–í–´–®–ï–ù–ê: ${amount} TON –∑–∞ 5 –º–∏–Ω—É—Ç`);
            console.log(`   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞—Å—á–µ—Ç –æ—Ç –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞!`);
          }
        }
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
    console.log('\nüìã 2. –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 74:\n');
    
    const { data: user74Data, error: user74Error } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', 74)
      .single();

    if (!user74Error && user74Data) {
      console.log(`farming_balance: ${user74Data.farming_balance} TON ${user74Data.farming_balance > 0 ? '‚úÖ' : '‚ùå'}`);
      console.log(`boost_active: ${user74Data.boost_active}`);
      console.log(`boost_package_id: ${user74Data.boost_package_id}`);
      console.log(`farming_rate: ${user74Data.farming_rate}%`);
      console.log(`updated_at: ${new Date(user74Data.updated_at).toLocaleString()}`);
      
      if (parseFloat(user74Data.farming_balance) === 0) {
        console.log('\n‚ö†Ô∏è  farming_balance = 0, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:');
        console.log('   - –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –ò–õ–ò');
        console.log('   - –ù–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –±—ã–ª–æ');
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç 3. –î–ê–ù–ù–´–ï –ò–ó –¢–ê–ë–õ–ò–¶–´ USERS:\n');
    
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active, ton_boost_package_id, ton_farming_balance')
      .eq('id', 74)
      .single();

    if (!userError && userData) {
      console.log(`balance_ton: ${userData.balance_ton} TON`);
      console.log(`ton_boost_active: ${userData.ton_boost_active}`);
      console.log(`ton_boost_package_id: ${userData.ton_boost_package_id}`);
      console.log(`ton_farming_balance: ${userData.ton_farming_balance || 'NULL'}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüíæ 4. –ü–†–û–í–ï–†–ö–ê METADATA –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•:\n');
    
    const { data: lastPurchase, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (!purchaseError && lastPurchase) {
      console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${new Date(lastPurchase.created_at).toLocaleString()}`);
      console.log(`–°—É–º–º–∞: ${lastPurchase.amount} TON`);
      
      if (lastPurchase.metadata) {
        console.log('‚úÖ Metadata –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        const metadata = typeof lastPurchase.metadata === 'string' 
          ? JSON.parse(lastPurchase.metadata) 
          : lastPurchase.metadata;
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:', JSON.stringify(metadata, null, 2));
      } else {
        console.log('‚ùå Metadata –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
    console.log('\nüìÑ 5. –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –ö–û–î–ê:\n');
    
    // –ß–∏—Ç–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö:');
    console.log('  - modules/boost/TonFarmingRepository.ts (activateBoost)');
    console.log('  - modules/boost/service.ts (purchaseBoost)');
    console.log('  - modules/scheduler/tonBoostIncomeScheduler.ts');

    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑
    console.log('\nüèÅ 6. –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:\n');
    
    const problems = [];
    
    if (user74Data && parseFloat(user74Data.farming_balance) === 0) {
      problems.push('farming_balance = 0 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74');
    }
    
    if (timeSinceLastReward > 10) {
      problems.push('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    if (rewards && rewards.length > 0) {
      const lastAmount = parseFloat(rewards[0].amount);
      if (lastAmount > 0.01) {
        problems.push('–°—É–º–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞–≤—ã—à–µ–Ω—ã');
      }
    }
    
    if (!lastPurchase || !lastPurchase.metadata) {
      problems.push('Metadata –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
    }
    
    if (problems.length === 0) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!');
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
      problems.forEach((p, i) => console.log(`   ${i + 1}. ${p}`));
      
      console.log('\nüìå –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:');
      console.log('   –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –ù–ï –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ.');
      console.log('   –°–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∑–∏–ª —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–æ–≤.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeSystemAfterRestart();