const { createClient } = require('@supabase/supabase-js');

// Supabase connection
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function diagnoseLiveSchedulers() {
  console.log('üîç –ñ–ò–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í');
  console.log('='.repeat(60));
  console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toISOString()}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
      return;
    }

    console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 10 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    transactions.forEach((t, i) => {
      const time = new Date(t.created_at);
      const amount = parseFloat(t.amount);
      console.log(`${i+1}. ${time.toLocaleTimeString()} | ${t.type} | ${amount.toFixed(6)} ${t.currency} | User ${t.user_id}`);
    });

    // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    const intervals = [];
    for (let i = 1; i < transactions.length; i++) {
      const prev = new Date(transactions[i-1].created_at);
      const curr = new Date(transactions[i].created_at);
      const diffMs = prev.getTime() - curr.getTime();
      const diffMin = diffMs / (1000 * 60);
      intervals.push(diffMin);
    }

    console.log('\n‚è±Ô∏è –ò–ù–¢–ï–†–í–ê–õ–´ –ú–ï–ñ–î–£ –ü–û–°–õ–ï–î–ù–ò–ú–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò:');
    intervals.forEach((interval, i) => {
      const status = interval > 4 ? '‚úÖ' : '‚ùå';
      console.log(`${status} –ò–Ω—Ç–µ—Ä–≤–∞–ª ${i+1}: ${interval.toFixed(2)} –º–∏–Ω—É—Ç`);
    });

    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
    console.log(`\nüìà –°–†–ï–î–ù–ò–ô –ò–ù–¢–ï–†–í–ê–õ: ${avgInterval.toFixed(2)} –º–∏–Ω—É—Ç`);
    
    if (avgInterval < 2) {
      console.log('üö® –ê–ù–û–ú–ê–õ–ò–Ø: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!');
      console.log('üí° –ü–†–ò–ß–ò–ù–ê: –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã');
    } else {
      console.log('‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å User 184 –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const { data: user184, error: userError } = await supabase
      .from('users')
      .select('balance_uni, balance_ton')
      .eq('id', 184)
      .single();

    if (!userError && user184) {
      console.log(`\nüë§ USER 184 –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:`);
      console.log(`   UNI: ${parseFloat(user184.balance_uni).toFixed(6)}`);
      console.log(`   TON: ${parseFloat(user184.balance_ton).toFixed(6)}`);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

diagnoseLiveSchedulers();