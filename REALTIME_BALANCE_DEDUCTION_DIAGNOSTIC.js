#!/usr/bin/env node

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò: –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function realtimeBalanceDeductionDiagnostic() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò: –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–æ–≤ (User 184)
  const currentUserId = 184;
  console.log(`üë§ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ User ID: ${currentUserId}`);
  
  // 1. –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  console.log('\n1Ô∏è‚É£ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
  console.log('-'.repeat(60));
  
  const { data: currentUser, error: userError } = await supabase
    .from('users')
    .select('id, username, balance_ton, balance_uni, created_at')
    .eq('id', currentUserId)
    .single();

  if (userError) {
    console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError.message);
    return;
  }

  console.log(`üë§ User: @${currentUser.username} (ID: ${currentUser.id})`);
  console.log(`üí∞ –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${currentUser.balance_ton}`);
  console.log(`ü™ô –¢–µ–∫—É—â–∏–π UNI –±–∞–ª–∞–Ω—Å: ${currentUser.balance_uni}`);
  
  // 2. –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
  console.log('\n2Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (10 –º–∏–Ω—É—Ç)');
  console.log('-'.repeat(60));
  
  const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
  
  const { data: recentTransactions, error: txError } = await supabase
    .from('transactions')
    .select('id, type, amount_ton, amount_uni, currency, description, status, created_at, metadata')
    .eq('user_id', currentUserId)
    .gte('created_at', tenMinutesAgo)
    .order('created_at', { ascending: false })
    .limit(20);

  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    return;
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 10 –º–∏–Ω—É—Ç: ${recentTransactions.length}`);
  
  if (recentTransactions.length > 0) {
    console.log('\nüìã –î–ï–¢–ê–õ–ò –ü–û–°–õ–ï–î–ù–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('–í—Ä–µ–º—è    | ID     | –¢–∏–ø           | TON      | UNI      | –°—Ç–∞—Ç—É—Å | –û–ø–∏—Å–∞–Ω–∏–µ');
    console.log('-'.repeat(85));
    
    recentTransactions.forEach(tx => {
      const time = tx.created_at.split('T')[1].substring(0, 8);
      const tonAmount = tx.amount_ton || '0';
      const uniAmount = tx.amount_uni || '0';
      
      console.log(`${time} | ${String(tx.id).padEnd(6)} | ${String(tx.type).padEnd(13)} | ${String(tonAmount).padEnd(8)} | ${String(uniAmount).padEnd(8)} | ${String(tx.status).padEnd(6)} | ${(tx.description || '').substring(0, 30)}...`);
    });
  }

  // 3. –ü–û–ò–°–ö –ü–ê–† "–ü–û–ü–û–õ–ù–ï–ù–ò–ï + –°–ü–ò–°–ê–ù–ò–ï"
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–ê–† "–ü–û–ü–û–õ–ù–ï–ù–ò–ï + –°–ü–ò–°–ê–ù–ò–ï"');
  console.log('-'.repeat(60));
  
  // –ò—â–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const creditTransactions = recentTransactions.filter(tx => 
    parseFloat(tx.amount_ton || 0) > 0 || parseFloat(tx.amount_uni || 0) > 0
  );
  
  // –ò—â–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è
  const debitTransactions = recentTransactions.filter(tx => {
    const desc = (tx.description || '').toLowerCase();
    const type = (tx.type || '').toLowerCase();
    
    return desc.includes('—Å–ø–∏—Å–∞–Ω–∏–µ') ||
           desc.includes('subtract') ||
           desc.includes('deduct') ||
           desc.includes('withdraw') ||
           desc.includes('fee') ||
           type.includes('withdrawal') ||
           type.includes('deduction') ||
           type.includes('rollback');
  });
  
  console.log(`‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${creditTransactions.length}`);
  console.log(`‚ûñ –°–ø–∏—Å–∞–Ω–∏–π: ${debitTransactions.length}`);
  
  if (debitTransactions.length > 0) {
    console.log('\nüö® –ù–ê–ô–î–ï–ù–´ –û–ü–ï–†–ê–¶–ò–ò –°–ü–ò–°–ê–ù–ò–Ø:');
    debitTransactions.forEach(tx => {
      console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[1].substring(0, 8)} | ${tx.type}`);
      console.log(`  TON: ${tx.amount_ton} | UNI: ${tx.amount_uni}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`  Metadata: ${JSON.stringify(tx.metadata || {})}`);
      console.log('  ---');
    });
  }

  // 4. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
  console.log('\n4Ô∏è‚É£ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê (30 —Å–µ–∫)');
  console.log('-'.repeat(60));
  console.log('‚è±Ô∏è  –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞...');
  
  let previousBalance = { ton: currentUser.balance_ton, uni: currentUser.balance_uni };
  let changeCount = 0;
  
  const monitoringInterval = setInterval(async () => {
    try {
      const { data: updatedUser } = await supabase
        .from('users')
        .select('balance_ton, balance_uni')
        .eq('id', currentUserId)
        .single();
      
      if (updatedUser) {
        const tonChanged = parseFloat(updatedUser.balance_ton) !== parseFloat(previousBalance.ton);
        const uniChanged = parseFloat(updatedUser.balance_uni) !== parseFloat(previousBalance.uni);
        
        if (tonChanged || uniChanged) {
          changeCount++;
          const now = new Date().toLocaleString('ru-RU');
          const tonDiff = parseFloat(updatedUser.balance_ton) - parseFloat(previousBalance.ton);
          const uniDiff = parseFloat(updatedUser.balance_uni) - parseFloat(previousBalance.uni);
          
          console.log(`\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê #${changeCount} - ${now}`);
          console.log(`   TON: ${previousBalance.ton} ‚Üí ${updatedUser.balance_ton} (${tonDiff > 0 ? '+' : ''}${tonDiff.toFixed(6)})`);
          console.log(`   UNI: ${previousBalance.uni} ‚Üí ${updatedUser.balance_uni} (${uniDiff > 0 ? '+' : ''}${uniDiff.toFixed(6)})`);
          
          // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          const { data: newTransactions } = await supabase
            .from('transactions')
            .select('id, type, amount_ton, amount_uni, description, created_at')
            .eq('user_id', currentUserId)
            .gte('created_at', new Date(Date.now() - 60000).toISOString())
            .order('created_at', { ascending: false })
            .limit(5);
          
          if (newTransactions && newTransactions.length > 0) {
            console.log('   üìã –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
            newTransactions.forEach(tx => {
              const time = tx.created_at.split('T')[1].substring(0, 8);
              console.log(`      ${time} | ${tx.type} | TON:${tx.amount_ton} UNI:${tx.amount_uni} | ${(tx.description || '').substring(0, 40)}`);
            });
          }
          
          previousBalance = { ton: updatedUser.balance_ton, uni: updatedUser.balance_uni };
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    clearInterval(monitoringInterval);
    console.log('\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log(`üìä –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞: ${changeCount}`);
    
    if (changeCount > 0) {
      console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ BalanceManager.subtractBalance()');
      console.log('2. –ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–ø–∏—Å–∞–Ω–∏—è');
      console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      console.log('4. –ò–∑—É—á–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å');
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('='.repeat(80));
  }, 30000);
}

realtimeBalanceDeductionDiagnostic().catch(console.error);