/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ API —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞ UserController
 */

import { createClient } from '@supabase/supabase-js';

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testApiSyncFix() {
  console.log('üîÑ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò API');
  console.log('='.repeat(50));
  
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  const baseUrl = 'https://9e8e72ca-ad0e-4d1b-b689-b91a4832fe73-00-7a29dnah0ryx.spock.replit.dev';
  const userId = 48;
  const jwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6NDgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE2MTMzMDAsImV4cCI6MTc1MjIxODEwMH0.itCnOpcM4WQEksdm8M7L7tj1dGKuALNVFY0HQdIIk2I';
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Supabase
    console.log('\nüìä 1. –î–ê–ù–ù–´–ï –ò–ó SUPABASE (—ç—Ç–∞–ª–æ–Ω):');
    
    const { data: supabaseUser, error: supabaseError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, ref_code')
      .eq('id', userId)
      .single();
    
    if (supabaseError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ Supabase:', supabaseError.message);
      return;
    }
    
    console.log(`   ID: ${supabaseUser.id}`);
    console.log(`   Username: ${supabaseUser.username}`);
    console.log(`   UNI Balance: ${supabaseUser.balance_uni}`);
    console.log(`   TON Balance: ${supabaseUser.balance_ton}`);
    console.log(`   Ref Code: ${supabaseUser.ref_code}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    console.log('\nüåê 2. –î–ê–ù–ù–´–ï –ò–ó API (–ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞):');
    
    const apiResponse = await fetch(`${baseUrl}/api/v2/users/profile`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!apiResponse.ok) {
      console.log(`‚ùå API –æ—à–∏–±–∫–∞: ${apiResponse.status} ${apiResponse.statusText}`);
      return;
    }
    
    const apiData = await apiResponse.json();
    const apiUser = apiData.data?.user;
    
    if (!apiUser) {
      console.log('‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(apiData, null, 2));
      return;
    }
    
    console.log(`   ID: ${apiUser.id}`);
    console.log(`   Username: ${apiUser.username}`);
    console.log(`   UNI Balance: ${apiUser.balance_uni || apiUser.uni_balance}`);
    console.log(`   TON Balance: ${apiUser.balance_ton || apiUser.ton_balance}`);
    console.log(`   Ref Code: ${apiUser.ref_code}`);
    
    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç 3. –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•:');
    
    const checks = [
      {
        field: 'ID',
        supabase: supabaseUser.id,
        api: apiUser.id,
        match: supabaseUser.id === apiUser.id
      },
      {
        field: 'Username',
        supabase: supabaseUser.username,
        api: apiUser.username,
        match: supabaseUser.username === apiUser.username
      },
      {
        field: 'UNI Balance',
        supabase: supabaseUser.balance_uni,
        api: apiUser.balance_uni || apiUser.uni_balance,
        match: supabaseUser.balance_uni === (apiUser.balance_uni || apiUser.uni_balance)
      },
      {
        field: 'TON Balance',
        supabase: supabaseUser.balance_ton,
        api: apiUser.balance_ton || apiUser.ton_balance,
        match: supabaseUser.balance_ton === (apiUser.balance_ton || apiUser.ton_balance)
      },
      {
        field: 'Ref Code',
        supabase: supabaseUser.ref_code,
        api: apiUser.ref_code,
        match: supabaseUser.ref_code === apiUser.ref_code
      }
    ];
    
    let syncedFields = 0;
    
    checks.forEach(check => {
      const status = check.match ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${check.field}: Supabase=${check.supabase}, API=${check.api}`);
      if (check.match) syncedFields++;
    });
    
    // 4. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüìã 4. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
    
    const syncPercentage = (syncedFields / checks.length) * 100;
    console.log(`   üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: ${syncedFields}/${checks.length} (${syncPercentage.toFixed(1)}%)`);
    
    if (syncPercentage === 100) {
      console.log('   üü¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ê - API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } else if (syncPercentage >= 80) {
      console.log('   üü° –ß–ê–°–¢–ò–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } else {
      console.log('   üî¥ –ü–†–û–ë–õ–ï–ú–´ –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞');
    }
    
    // 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON –±–∞–ª–∞–Ω—Å–∞ (–≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
    console.log('\nüí∞ 5. –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TON –ë–ê–õ–ê–ù–°–ê:');
    
    const supabaseTon = parseFloat(supabaseUser.balance_ton);
    const apiTon = parseFloat(apiUser.balance_ton || apiUser.ton_balance || '0');
    
    console.log(`   Supabase TON: ${supabaseTon}`);
    console.log(`   API TON: ${apiTon}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(supabaseTon - apiTon).toFixed(6)} TON`);
    
    if (Math.abs(supabaseTon - apiTon) < 0.000001) {
      console.log('   ‚úÖ TON –ë–ê–õ–ê–ù–° –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù');
    } else {
      console.log('   ‚ùå TON –ë–ê–õ–ê–ù–° –ù–ï –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù');
      console.log(`   üìà –û–∂–∏–¥–∞–ª–æ—Å—å: ${supabaseTon} TON, –ø–æ–ª—É—á–µ–Ω–æ: ${apiTon} TON`);
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üîÑ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù');
}

testApiSyncFix();