#!/usr/bin/env node
/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê - –ò–°–¢–û–ß–ù–ò–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

let isMonitoring = false;
let lastTransactionId = 0;
let transactionBuffer = [];

async function getLatestTransactions(limit = 10) {
  const { data, error } = await supabase
    .from('transactions')
    .select('id, user_id, type, amount, currency, created_at, description')
    .order('created_at', { ascending: false })
    .limit(limit);
  
  return error ? [] : data;
}

async function analyzeTransactionPatterns() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  
  const transactions = await getLatestTransactions(50);
  
  if (transactions.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
  const timeGroups = {};
  const duplicateGroups = {};

  transactions.forEach(tx => {
    const minute = tx.created_at.substring(0, 16); // YYYY-MM-DDTHH:MM
    if (!timeGroups[minute]) timeGroups[minute] = [];
    timeGroups[minute].push(tx);

    // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏
    const key = `${tx.user_id}-${tx.type}-${tx.amount}-${tx.currency}`;
    if (!duplicateGroups[key]) duplicateGroups[key] = [];
    duplicateGroups[key].push(tx);
  });

  console.log('\nüìä –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:');
  Object.keys(timeGroups).sort().reverse().slice(0, 10).forEach(minute => {
    const group = timeGroups[minute];
    if (group.length > 5) { // –ú–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É
      console.log(`üö® ${minute}: ${group.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
      const byType = {};
      group.forEach(tx => {
        if (!byType[tx.type]) byType[tx.type] = 0;
        byType[tx.type]++;
      });
      
      Object.keys(byType).forEach(type => {
        console.log(`   ${type}: ${byType[type]} —à—Ç.`);
      });
    }
  });

  console.log('\nüîç –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
  let foundDuplicates = false;
  Object.keys(duplicateGroups).forEach(key => {
    const group = duplicateGroups[key];
    if (group.length > 1) {
      foundDuplicates = true;
      const [userId, type, amount, currency] = key.split('-');
      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${group.length} –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      console.log(`   User ${userId}, ${type}, ${amount} ${currency}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –¥—É–±–ª—è–º–∏
      if (group.length >= 2) {
        const times = group.map(tx => new Date(tx.created_at)).sort();
        for (let i = 1; i < times.length; i++) {
          const diff = (times[i] - times[i-1]) / 1000; // —Å–µ–∫—É–Ω–¥—ã
          console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${diff} —Å–µ–∫—É–Ω–¥`);
          
          if (diff >= 1 && diff <= 3) {
            console.log(`   üéØ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ò–Ω—Ç–µ—Ä–≤–∞–ª ${diff}—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π –ø—Ä–æ–±–ª–µ–º–µ!`);
          }
        }
      }
    }
  });

  if (!foundDuplicates) {
    console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50');
  }
}

async function startRealTimeMonitoring() {
  console.log('üì° –ó–ê–ü–£–°–ö REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
  console.log('üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥...');
  console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–Ω—É—é —Ç–æ—á–∫—É
  const latest = await getLatestTransactions(1);
  if (latest.length > 0) {
    lastTransactionId = latest[0].id;
    console.log(`üìç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å ID: ${lastTransactionId}`);
  }

  isMonitoring = true;
  monitorLoop();
}

async function monitorLoop() {
  if (!isMonitoring) return;

  try {
    // –ò—â–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: newTransactions } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at, description')
      .gt('id', lastTransactionId)
      .order('created_at', { ascending: true });

    if (newTransactions && newTransactions.length > 0) {
      console.log(`\nüÜï –ù–û–í–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò: ${newTransactions.length} —à—Ç.`);
      
      newTransactions.forEach(tx => {
        const time = new Date(tx.created_at).toLocaleTimeString();
        console.log(`   ID ${tx.id}: User ${tx.user_id}, ${tx.type}, ${tx.amount} ${tx.currency} (${time})`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        transactionBuffer.push({
          ...tx,
          timestamp: Date.now()
        });

        lastTransactionId = Math.max(lastTransactionId, tx.id);
      });

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±—ã—Å—Ç—Ä—ã—Ö –¥—É–±–ª–µ–π
      analyzeRecentBuffer();
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
      const fiveMinutesAgo = Date.now() - 5 * 60 * 1000;
      transactionBuffer = transactionBuffer.filter(tx => tx.timestamp > fiveMinutesAgo);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
  }

  // –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(monitorLoop, 10000);
}

function analyzeRecentBuffer() {
  if (transactionBuffer.length < 2) return;

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Ç–∏–ø–∞–º
  const groups = {};
  transactionBuffer.forEach(tx => {
    const key = `${tx.user_id}-${tx.type}-${tx.currency}`;
    if (!groups[key]) groups[key] = [];
    groups[key].push(tx);
  });

  // –ò—â–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥—É–±–ª–∏
  Object.keys(groups).forEach(key => {
    const group = groups[key];
    if (group.length >= 2) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      group.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
      
      for (let i = 1; i < group.length; i++) {
        const prev = group[i-1];
        const curr = group[i];
        const diffMs = new Date(curr.created_at) - new Date(prev.created_at);
        const diffSec = diffMs / 1000;
        
        if (diffSec <= 5 && prev.amount === curr.amount) {
          console.log(`üö® –î–£–ë–õ–ò–ö–ê–¢ –û–ë–ù–ê–†–£–ñ–ï–ù!`);
          console.log(`   User ${curr.user_id}: ${curr.type} ${curr.amount} ${curr.currency}`);
          console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${diffSec.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
          console.log(`   ID: ${prev.id} ‚Üí ${curr.id}`);
          
          if (diffSec >= 1 && diffSec <= 2) {
            console.log(`   üéØ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï —Å –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π!`);
          }
        }
      }
    }
  });
}

async function runFullDiagnostics() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê');
  console.log('üìã –ü–ª–∞–Ω:');
  console.log('   1. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  console.log('   2. Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  console.log('   3. –î–µ—Ç–µ–∫—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  console.log('   4. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n');

  // 1. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  await analyzeTransactionPatterns();

  console.log('\n' + '='.repeat(60));
  
  // 2. –ó–∞–ø—É—Å–∫ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  await startRealTimeMonitoring();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  isMonitoring = false;
  console.log('\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:');
  console.log(`   - –û—Ç—Å–ª–µ–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±—É—Ñ–µ—Ä–µ: ${transactionBuffer.length}`);
  console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastTransactionId}`);
  console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
});

runFullDiagnostics();