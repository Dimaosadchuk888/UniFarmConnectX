/**
 * –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –¥–ª—è User 74
 * –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
 */

import { supabase } from './core/supabase';

async function checkTonBoostDeep() {
  console.log('üîç –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TON BOOST');
  console.log('=' .repeat(60));
  
  const userId = 74;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE
  console.log('\nüìä 1. –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–ö–£–ü–ö–ò BOOST:');
  console.log('-'.repeat(60));
  
  const { data: boostTransactions, error: transError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'BOOST_PURCHASE')
    .order('created_at', { ascending: false });

  if (!transError && boostTransactions) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE: ${boostTransactions.length}`);
    boostTransactions.forEach((t, i) => {
      console.log(`  ${i + 1}. ${t.description} - ${t.amount_ton || t.amount_uni} ${t.currency} (${new Date(t.created_at).toLocaleString()})`);
    });
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å metadata –æ TON Boost
  console.log('\nüìä 2. –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° METADATA TON BOOST:');
  console.log('-'.repeat(60));
  
  const { data: metadataTransactions, error: metaError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .not('metadata', 'is', null)
    .order('created_at', { ascending: false })
    .limit(100);

  if (!metaError && metadataTransactions) {
    const tonBoostRelated = metadataTransactions.filter(t => 
      t.metadata?.boost_package_id || 
      t.metadata?.original_type?.includes('BOOST') ||
      t.description?.toLowerCase().includes('boost')
    );
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å TON Boost: ${tonBoostRelated.length}`);
    tonBoostRelated.slice(0, 10).forEach((t, i) => {
      console.log(`  ${i + 1}. ${t.type}: ${t.description}`);
      console.log(`     Metadata: ${JSON.stringify(t.metadata)}`);
      console.log(`     –°—É–º–º–∞: ${t.amount_ton || t.amount_uni} ${t.currency}`);
      console.log(`     –î–∞—Ç–∞: ${new Date(t.created_at).toLocaleString()}`);
    });
  }

  // 3. –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π farming_balance
  console.log('\nüìä 3. –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò FARMING_BALANCE:');
  console.log('-'.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
  const { data: allTransactions, error: allError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', sevenDaysAgo)
    .order('created_at', { ascending: true });

  if (!allError && allTransactions) {
    // –ò—â–µ–º –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –º–æ–≥–ª–∏ –±—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã
    const possibleDeposits = allTransactions.filter(t => 
      t.amount_ton && parseFloat(t.amount_ton) < 0 || // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
      t.description?.includes('–ø–∞–∫–µ—Ç') || 
      t.description?.includes('Boost') ||
      t.description?.includes('–¥–µ–ø–æ–∑–∏—Ç')
    );
    
    console.log(`–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã (–ø–æ –æ–ø–∏—Å–∞–Ω–∏—é): ${possibleDeposits.length}`);
    possibleDeposits.forEach((t, i) => {
      console.log(`  ${i + 1}. ${t.type}: ${t.description} - ${t.amount_ton || t.amount_uni} ${t.currency}`);
    });
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ users —Ç–∞–±–ª–∏—Ü–µ
  console.log('\nüìä 4. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ï USERS:');
  console.log('-'.repeat(60));
  
  const { data: userData, error: userError } = await supabase
    .from('users')
    .select('id, balance_ton, ton_boost_package, ton_farming_deposit, ton_farming_balance, ton_farming_rate')
    .eq('id', userId)
    .single();

  if (!userError && userData) {
    console.log(`User ID: ${userData.id}`);
    console.log(`Balance TON: ${userData.balance_ton}`);
    console.log(`TON Boost Package: ${userData.ton_boost_package}`);
    console.log(`TON Farming Deposit: ${userData.ton_farming_deposit}`);
    console.log(`TON Farming Balance: ${userData.ton_farming_balance}`);
    console.log(`TON Farming Rate: ${userData.ton_farming_rate}`);
  }

  // 5. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
  console.log('\nüìä 5. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
  console.log('-'.repeat(60));
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId)
    .single();

  if (tonFarmingData) {
    console.log('\nüî∏ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TON Boost:');
    console.log(`  ‚Ä¢ Farming Balance: ${tonFarmingData.farming_balance} TON`);
    console.log(`  ‚Ä¢ –ù–∞—á–∞–ª–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${new Date(tonFarmingData.farming_start_timestamp).toLocaleString()}`);
    console.log(`  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(tonFarmingData.farming_last_update).toLocaleString()}`);
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    const startTime = new Date(tonFarmingData.farming_start_timestamp).getTime();
    const now = Date.now();
    const hoursActive = (now - startTime) / (1000 * 60 * 60);
    
    console.log(`  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${hoursActive.toFixed(1)} —á–∞—Å–æ–≤`);
    console.log(`  ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${(tonFarmingData.farming_balance * tonFarmingData.farming_rate * hoursActive / 24).toFixed(3)} TON`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTonBoostDeep().catch(console.error);