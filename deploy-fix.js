/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–µ–ø–ª–æ–µ–º –Ω–∞ Replit
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8080 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è Replit)
 * –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ –ø–æ—Ä—Ç 3000 (–≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
 */

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = 'production';

const http = require('http');
const httpProxy = require('http-proxy');
const fs = require('fs');
const path = require('path');

// –ü–æ—Ä—Ç—ã
const PUBLIC_PORT = process.env.PORT || 8080; // –ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç Replit
const APP_PORT = PUBLIC_PORT; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–ø–ª–æ—è –Ω–∞ Replit`);
console.log(`üìå –ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Ä—Ç: ${PUBLIC_PORT}`);
console.log(`üìå –ü–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${APP_PORT}`);

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
const proxy = httpProxy.createProxyServer({
  target: {
    host: 'localhost',
    port: APP_PORT
  },
  ws: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ WebSocket
  changeOrigin: true,
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
proxy.on('error', function(err, req, res) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', err);
  
  // –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
  res.writeHead(502, {'Content-Type': 'text/html'});
  res.end(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>UniFarm - –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          background-color: #0f172a;
          color: white;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100vh;
          margin: 0;
          text-align: center;
          padding: 20px;
        }
        .error-container {
          background-color: rgba(255, 255, 255, 0.1);
          padding: 30px;
          border-radius: 10px;
          max-width: 600px;
        }
        h1 {
          color: #f87171;
          margin-bottom: 20px;
        }
        .reload-button {
          background-color: #4f46e5;
          color: white;
          border: none;
          padding: 10px 20px;
          margin-top: 20px;
          border-radius: 5px;
          cursor: pointer;
          font-size: 16px;
        }
        .message {
          margin: 20px 0;
          line-height: 1.5;
        }
      </style>
      <meta http-equiv="refresh" content="15">
    </head>
    <body>
      <div class="error-container">
        <h1>–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>
        <div class="message">
          <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ UniFarm –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.</p>
          <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
          <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥.</p>
        </div>
        <button class="reload-button" onclick="window.location.reload()">–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å</button>
      </div>
    </body>
    </html>
  `);
});

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–∫—Å–∏
const server = http.createServer((req, res) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const isAppRunning = isPortOpen(APP_PORT);
  
  if (isAppRunning) {
    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    proxy.web(req, res);
  } else {
    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –æ—Ç–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è
    const loadingPath = path.join(__dirname, 'static-loading.html');
    
    if (fs.existsSync(loadingPath)) {
      // –û—Ç–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end(fs.readFileSync(loadingPath));
    } else {
      // –û—Ç–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>UniFarm - Loading...</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              background-color: #0f172a;
              color: white;
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              height: 100vh;
              margin: 0;
              text-align: center;
            }
            .loader {
              border: 5px solid #f3f3f3;
              border-top: 5px solid #4f46e5;
              border-radius: 50%;
              width: 50px;
              height: 50px;
              animation: spin 2s linear infinite;
              margin-bottom: 20px;
            }
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
          </style>
          <meta http-equiv="refresh" content="5">
        </head>
        <body>
          <div class="loader"></div>
          <h1>UniFarm</h1>
          <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
        </body>
        </html>
      `);
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
    launchMainApp();
  }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WebSocket
server.on('upgrade', function (req, socket, head) {
  proxy.ws(req, socket, head);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
function isPortOpen(port) {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    const net = require('net');
    let isOpen = false;
    
    const testSocket = net.connect(port, 'localhost', () => {
      isOpen = true;
      testSocket.end();
    });
    
    testSocket.on('error', () => {
      isOpen = false;
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    return true;
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞:', e);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function launchMainApp() {
  // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—â–µ –æ–¥–∏–Ω
  if (global.mainAppLaunched) return;
  
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('üîÑ –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    // —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ª—É—á—à—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    require('./production-server.js');
    
    global.mainAppLaunched = true;
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ');
  } catch (err) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
    
    // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å...');
    
    try {
      // –ò—Å–ø–æ–ª–Ω—è–µ–º production-server.js –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
      const { spawn } = require('child_process');
      const appProcess = spawn('node', ['production-server.js'], {
        stdio: 'inherit',
        env: { ...process.env, PORT: PUBLIC_PORT.toString() },
        detached: false
      });
      
      global.mainAppLaunched = true;
      
      appProcess.on('error', (spawnErr) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:', spawnErr);
        global.mainAppLaunched = false;
      });
      
      console.log('‚úÖ –î–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω');
    } catch (spawnErr) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', spawnErr);
      global.mainAppLaunched = false;
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
server.listen(PUBLIC_PORT, '0.0.0.0', () => {
  console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${PUBLIC_PORT}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  launchMainApp();
});