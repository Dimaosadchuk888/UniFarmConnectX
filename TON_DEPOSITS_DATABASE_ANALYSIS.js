#!/usr/bin/env node

/**
 * –ê–ù–ê–õ–ò–ó –§–ò–ö–°–ê–¶–ò–ò TON –î–ï–ü–û–ó–ò–¢–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–¥–∞ –∏ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç TON –¥–µ–ø–æ–∑–∏—Ç—ã
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeTonDepositsStorage() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –§–ò–ö–°–ê–¶–ò–ò TON –î–ï–ü–û–ó–ò–¢–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
  console.log('='.repeat(80));
  
  // 1. –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° BLOCKCHAIN –•–ï–®–ê–ú–ò
  console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° BLOCKCHAIN –•–ï–®–ê–ú–ò');
  console.log('-'.repeat(60));
  
  const { data: txWithHashes, error: hashError } = await supabase
    .from('transactions')
    .select('*')
    .like('description', '%blockchain%')
    .order('created_at', { ascending: false })
    .limit(20);

  if (hashError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ blockchain —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', hashError.message);
  } else {
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "blockchain": ${txWithHashes.length}`);
    
    if (txWithHashes.length > 0) {
      console.log('\nüìã –ü–†–ò–ú–ï–†–´ BLOCKCHAIN –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
      txWithHashes.slice(0, 5).forEach(tx => {
        console.log(`‚Ä¢ ID: ${tx.id} | User: ${tx.user_id} | ${tx.created_at.split('T')[0]}`);
        console.log(`  Type: ${tx.type} | Currency: ${tx.currency}`);
        console.log(`  Amount TON: ${tx.amount_ton} | Amount UNI: ${tx.amount_uni}`);
        console.log(`  Description: ${tx.description}`);
        console.log(`  Status: ${tx.status} | Source: ${tx.source || 'N/A'}`);
        console.log(`  Metadata: ${tx.metadata ? JSON.stringify(tx.metadata) : 'N/A'}`);
        console.log('  ---');
      });
    }
  }

  // 2. –ü–û–ò–°–ö –ü–û –ö–û–ù–ö–†–ï–¢–ù–´–ú –ü–ê–¢–¢–ï–†–ù–ê–ú TON –î–ï–ü–û–ó–ò–¢–û–í
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–û –ü–ê–¢–¢–ï–†–ù–ê–ú TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('-'.repeat(60));
  
  const searchPatterns = [
    'TON deposit',
    'ton deposit', 
    'deposit from blockchain',
    'TON_DEPOSIT',
    'ton_deposit'
  ];

  for (const pattern of searchPatterns) {
    const { data: patternTx, error: patternError } = await supabase
      .from('transactions')
      .select('*')
      .like('description', `%${pattern}%`)
      .order('created_at', { ascending: false })
      .limit(10);

    if (!patternError && patternTx.length > 0) {
      console.log(`üéØ –ü–∞—Ç—Ç–µ—Ä–Ω "${pattern}": ${patternTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      patternTx.slice(0, 3).forEach(tx => {
        console.log(`   ‚Ä¢ ID:${tx.id} User:${tx.user_id} Type:${tx.type} Amount:${tx.amount_ton} TON`);
      });
    } else {
      console.log(`‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω "${pattern}": –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
  }

  // 3. –ê–ù–ê–õ–ò–ó METADATA –ü–û–õ–ï–ô
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó METADATA –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•');
  console.log('-'.repeat(60));
  
  const { data: metadataTx, error: metaError } = await supabase
    .from('transactions')
    .select('*')
    .not('metadata', 'is', null)
    .order('created_at', { ascending: false })
    .limit(50);

  if (metaError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è metadata:', metaError.message);
  } else {
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å metadata: ${metadataTx.length}`);
    
    // –ò—â–µ–º TON-—Å–≤—è–∑–∞–Ω–Ω—ã–µ metadata
    const tonMetadata = metadataTx.filter(tx => {
      const meta = tx.metadata;
      return meta && (
        meta.tx_hash ||
        meta.wallet_address ||
        meta.source === 'ton_deposit' ||
        meta.original_type === 'TON_DEPOSIT'
      );
    });
    
    console.log(`ü™ô TON metadata —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonMetadata.length}`);
    
    if (tonMetadata.length > 0) {
      console.log('\nüìã –ü–†–ò–ú–ï–†–´ TON METADATA:');
      tonMetadata.slice(0, 5).forEach(tx => {
        console.log(`‚Ä¢ ID: ${tx.id} | User: ${tx.user_id} | ${tx.created_at.split('T')[0]}`);
        console.log(`  Type: ${tx.type} | Amount: ${tx.amount_ton} TON`);
        console.log(`  Metadata: ${JSON.stringify(tx.metadata, null, 2)}`);
        console.log('  ---');
      });
    }
  }

  // 4. –ü–†–û–í–ï–†–ö–ê tx_hash_unique –ü–û–õ–Ø
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–õ–Ø tx_hash_unique');
  console.log('-'.repeat(60));
  
  const { data: txHashUnique, error: txHashError } = await supabase
    .from('transactions')
    .select('id, user_id, type, tx_hash_unique, created_at, description')
    .not('tx_hash_unique', 'is', null)
    .order('created_at', { ascending: false })
    .limit(20);

  if (txHashError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è tx_hash_unique:', txHashError.message);
  } else {
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å tx_hash_unique: ${txHashUnique.length}`);
    
    if (txHashUnique.length > 0) {
      console.log('\nüìã –ü–†–ò–ú–ï–†–´ tx_hash_unique:');
      txHashUnique.slice(0, 5).forEach(tx => {
        console.log(`‚Ä¢ ID: ${tx.id} | User: ${tx.user_id} | Type: ${tx.type}`);
        console.log(`  tx_hash_unique: ${tx.tx_hash_unique}`);
        console.log(`  Description: ${tx.description}`);
        console.log(`  –î–∞—Ç–∞: ${tx.created_at.split('T')[0]}`);
        console.log('  ---');
      });
    }
  }

  // 5. –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê
  console.log('\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –§–ò–ö–°–ê–¶–ò–ò TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('='.repeat(60));
  
  const blockchainTxCount = txWithHashes?.length || 0;
  const metadataTxCount = tonMetadata?.length || 0;
  const hashUniqueCount = txHashUnique?.length || 0;
  
  console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–ò–°–ò TON –î–ï–ü–û–ó–ò–¢–û–í:`);
  console.log(`   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "blockchain": ${blockchainTxCount}`);
  console.log(`   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å TON metadata: ${metadataTxCount}`);
  console.log(`   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å tx_hash_unique: ${hashUniqueCount}`);
  
  if (blockchainTxCount === 0 && metadataTxCount === 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–´–ô –í–´–í–û–î:');
    console.log('   –°–ò–°–¢–ï–ú–ê –ù–ï –ó–ê–ü–ò–°–´–í–ê–ï–¢ TON –î–ï–ü–û–ó–ò–¢–´ –° BLOCKCHAIN –î–ê–ù–ù–´–ú–ò!');
    console.log('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ö–µ—à–∞–º–∏ –∏ wallet –∞–¥—Ä–µ—Å–∞–º–∏.');
  } else {
    console.log('\n‚úÖ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–ò–°–´–í–ê–ï–¢ TON –î–ï–ü–û–ó–ò–¢–´:');
    console.log('   –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å blockchain –¥–∞–Ω–Ω—ã–º–∏ –∏ metadata.');
  }
  
  console.log('\n' + '='.repeat(80));
}

analyzeTonDepositsStorage().catch(console.error);