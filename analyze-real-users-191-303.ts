import { supabase } from './core/supabaseClient';

async function analyzeRealUsers191To303() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 191-303');
  console.log('='.repeat(60));

  try {
    // 1. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 191-303
    console.log('\n1Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 191-303:');
    
    const { data: realUsers, error: usersError } = await supabase
      .from('users')
      .select('*')
      .gte('id', 191)
      .lte('id', 303)
      .order('id', { ascending: true });

    if (!usersError && realUsers) {
      console.log(`üìä –í—Å–µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303: ${realUsers.length}`);
      
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
      const categories = {
        tonBalanceNoBoost: [], // –ï—Å—Ç—å TON –±–∞–ª–∞–Ω—Å, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Boost
        tonBoostNoBalance: [], // –ê–∫—Ç–∏–≤–Ω—ã–π Boost, –Ω–æ –Ω–µ—Ç TON –±–∞–ª–∞–Ω—Å–∞
        bothActive: [], // –ò –±–∞–ª–∞–Ω—Å, –∏ Boost –∞–∫—Ç–∏–≤–Ω—ã
        neitherActive: [] // –ù–∏ –±–∞–ª–∞–Ω—Å–∞, –Ω–∏ Boost
      };
      
      realUsers.forEach(user => {
        const hasTonBalance = user.balance_ton > 0;
        const hasTonBoost = user.ton_boost_active;
        
        if (hasTonBalance && !hasTonBoost) {
          categories.tonBalanceNoBoost.push(user);
        } else if (!hasTonBalance && hasTonBoost) {
          categories.tonBoostNoBalance.push(user);
        } else if (hasTonBalance && hasTonBoost) {
          categories.bothActive.push(user);
        } else {
          categories.neitherActive.push(user);
        }
      });
      
      console.log('\nüìà –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú:');
      console.log(`   ‚ùå TON –±–∞–ª–∞–Ω—Å –ë–ï–ó Boost: ${categories.tonBalanceNoBoost.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   ‚ö†Ô∏è TON Boost –ë–ï–ó –±–∞–ª–∞–Ω—Å–∞: ${categories.tonBoostNoBalance.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   ‚úÖ –ò –±–∞–ª–∞–Ω—Å –ò Boost: ${categories.bothActive.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   ‚ö™ –ù–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–∏ Boost: ${categories.neitherActive.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (categories.tonBalanceNoBoost.length > 0) {
        console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò (TON –±–∞–ª–∞–Ω—Å –ë–ï–ó Boost):');
        categories.tonBalanceNoBoost.forEach((user, idx) => {
          console.log(`   ${idx + 1}. User ${user.id}:`);
          console.log(`      TON Balance: ${user.balance_ton}`);
          console.log(`      –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
          console.log(`      Username: ${user.username || '–ù–ï–¢'}`);
          console.log(`      First Name: ${user.first_name || '–ù–ï–¢'}`);
          console.log('      ---');
        });
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON_FARMING_DATA –¥–ª—è 191-303:');
    
    const { data: farmingData191_303, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .gte('user_id', 191)
      .lte('user_id', 303)
      .order('user_id', { ascending: true });

    if (!farmingError) {
      if (farmingData191_303 && farmingData191_303.length > 0) {
        console.log(`üåæ –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data –¥–ª—è 191-303: ${farmingData191_303.length}`);
        
        farmingData191_303.forEach((farm, idx) => {
          console.log(`   ${idx + 1}. User ${farm.user_id}:`);
          console.log(`      Farming Balance: ${farm.farming_balance}`);
          console.log(`      Boost Active: ${farm.boost_active}`);
          console.log(`      Package: ${farm.boost_package_id || '–ù–ï–¢'}`);
          console.log(`      Rate: ${farm.farming_rate || '–ù–ï–¢'}`);
          console.log(`      Created: ${farm.created_at}`);
          console.log('      ---');
        });
      } else {
        console.log('‚ùå –ù–ò –û–î–ù–û–ô –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303!');
      }
    }

    // 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 191-303:');
    
    const { data: transactions191_303, error: txError } = await supabase
      .from('transactions')
      .select('user_id, type, amount_ton, amount_uni, amount, currency, created_at, description')
      .gte('user_id', 191)
      .lte('user_id', 303)
      .order('created_at', { ascending: false })
      .limit(50);

    if (!txError && transactions191_303 && transactions191_303.length > 0) {
      console.log(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303: ${transactions191_303.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      const txByType: { [key: string]: any[] } = {};
      const txByUser: { [key: number]: any[] } = {};
      
      transactions191_303.forEach(tx => {
        const type = tx.type || 'UNKNOWN';
        if (!txByType[type]) txByType[type] = [];
        txByType[type].push(tx);
        
        if (!txByUser[tx.user_id]) txByUser[tx.user_id] = [];
        txByUser[tx.user_id].push(tx);
      });
      
      console.log('\nüìä –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û –¢–ò–ü–ê–ú:');
      Object.keys(txByType).forEach(type => {
        console.log(`   ${type}: ${txByType[type].length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      console.log('\nüë• –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏):');
      const activeUserIds = Object.keys(txByUser).map(Number).sort((a, b) => a - b);
      activeUserIds.slice(0, 10).forEach(userId => {
        const userTx = txByUser[userId];
        const tonTx = userTx.filter(tx => tx.amount_ton > 0 || tx.currency === 'TON');
        console.log(`   User ${userId}: ${userTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${tonTx.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (realUsers) {
        const usersWithoutTx = realUsers.filter(user => !txByUser[user.id]);
        if (usersWithoutTx.length > 0) {
          console.log(`\n‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${usersWithoutTx.length}`);
          usersWithoutTx.slice(0, 10).forEach(user => {
            console.log(`   User ${user.id}: TON=${user.balance_ton}, Boost=${user.ton_boost_active}`);
          });
        }
      }
    } else {
      console.log('‚ùå –ù–ò –û–î–ù–û–ô —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303!');
    }

    // 4. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ - –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\n4Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:');
    
    if (realUsers) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è
      const usersByDate: { [key: string]: any[] } = {};
      realUsers.forEach(user => {
        const date = user.created_at.split('T')[0];
        if (!usersByDate[date]) usersByDate[date] = [];
        usersByDate[date].push(user);
      });
      
      console.log('\nüìÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û –î–ê–¢–ê–ú –°–û–ó–î–ê–ù–ò–Ø:');
      Object.keys(usersByDate).sort().forEach(date => {
        const dayUsers = usersByDate[date];
        const problemUsers = dayUsers.filter(u => u.balance_ton > 0 && !u.ton_boost_active);
        console.log(`   ${date}: ${dayUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${problemUsers.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö`);
      });
    }

    // 5. –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    console.log('\n5Ô∏è‚É£ –ü–û–ò–°–ö –ü–ê–¢–¢–ï–†–ù–û–í –í –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–ö–ö–ê–£–ù–¢–ê–•:');
    
    if (realUsers) {
      const problemUsers = realUsers.filter(u => u.balance_ton > 0 && !u.ton_boost_active);
      
      if (problemUsers.length > 0) {
        console.log(`\nüîç –ê–ù–ê–õ–ò–ó ${problemUsers.length} –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–ö–ö–ê–£–ù–¢–û–í:`);
        
        // –ê–Ω–∞–ª–∏–∑ ID –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const problemIds = problemUsers.map(u => u.id).sort((a, b) => a - b);
        console.log(`   ID –¥–∏–∞–ø–∞–∑–æ–Ω: ${problemIds[0]} - ${problemIds[problemIds.length - 1]}`);
        
        // –ê–Ω–∞–ª–∏–∑ TON –±–∞–ª–∞–Ω—Å–æ–≤
        const balances = problemUsers.map(u => u.balance_ton);
        const avgBalance = balances.reduce((sum, bal) => sum + bal, 0) / balances.length;
        const maxBalance = Math.max(...balances);
        const minBalance = Math.min(...balances);
        
        console.log(`   TON –±–∞–ª–∞–Ω—Å—ã: –º–∏–Ω=${minBalance.toFixed(6)}, –º–∞–∫—Å=${maxBalance.toFixed(6)}, —Å—Ä–µ–¥–Ω–µ–µ=${avgBalance.toFixed(6)}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–∏–µ –±–∞–ª–∞–Ω—Å—ã (–≤–æ–∑–º–æ–∂–Ω–æ –º–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        const roundedBalances: { [key: string]: number } = {};
        balances.forEach(bal => {
          const rounded = Math.round(bal);
          roundedBalances[rounded] = (roundedBalances[rounded] || 0) + 1;
        });
        
        console.log('   –°—Ö–æ–∂–∏–µ –±–∞–ª–∞–Ω—Å—ã:');
        Object.keys(roundedBalances).forEach(balance => {
          if (roundedBalances[balance] > 1) {
            console.log(`     ~${balance} TON: ${roundedBalances[balance]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
          }
        });
      }
    }

    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 191-303
    console.log('\n6Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó –î–õ–Ø –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 191-303:');
    
    console.log('\nüéØ –ì–õ–ê–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    console.log('   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –±–∞–ª–∞–Ω—Å–æ–º, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º TON Boost');
    console.log('   2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data');
    console.log('   3. –ù–µ–ø–æ–ª–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('   4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É —á–∞—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('   1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É API –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   4. –°–æ–∑–¥–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:', error);
  }
}

analyzeRealUsers191To303().catch(console.error);