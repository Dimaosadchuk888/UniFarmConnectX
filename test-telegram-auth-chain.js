/**
 * T16: –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É initData –æ—Ç frontend –¥–æ backend –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
 */

import crypto from 'crypto';
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000/api/v2';
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7980427501:AAHdia3LusU9dk2aRvhXgmj9Ozo08nR0Gug';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π Telegram initData –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function generateValidInitData(user, botToken) {
  const authDate = Math.floor(Date.now() / 1000);
  
  const initDataParams = [
    `auth_date=${authDate}`,
    `user=${JSON.stringify(user)}`
  ];
  
  const sortedParams = initDataParams.sort().join('\n');
  
  const secretKey = crypto
    .createHmac('sha256', 'WebAppData')
    .update(botToken)
    .digest();
  
  const hash = crypto
    .createHmac('sha256', secretKey)
    .update(sortedParams)
    .digest('hex');
  
  return [...initDataParams, `hash=${hash}`].join('&');
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /api/v2/auth/telegram
 */
async function testTelegramAuth() {
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/v2/auth/telegram...');
  
  const testUser = {
    id: Math.floor(Math.random() * 1000000) + 100000,
    username: `testuser_${Date.now()}`,
    first_name: 'Test User',
    language_code: 'ru'
  };
  
  const initData = generateValidInitData(testUser, BOT_TOKEN);
  console.log('Generated initData for user:', testUser.id);
  console.log('InitData length:', initData.length);
  
  try {
    console.log('\nüì§ Sending auth request...');
    const response = await fetch(`${API_BASE}/auth/telegram`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'X-Telegram-Init-Data': initData
      },
      body: JSON.stringify({ 
        initData,
        ref_by: 'test_ref_code'
      })
    });
    
    const result = await response.json();
    
    console.log(`üì• Auth Response Status: ${response.status}`);
    console.log('Auth Response:', JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success && result.token) {
      console.log('‚úÖ Auth —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω');
      return { success: true, token: result.token, user: result.user };
    } else {
      console.log('‚ùå Auth –Ω–µ—É—Å–ø–µ—à–Ω–∞');
      return { success: false, error: result };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ auth –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /api/v2/register/telegram
 */
async function testTelegramRegister() {
  console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/v2/register/telegram...');
  
  const testUser = {
    id: Math.floor(Math.random() * 1000000) + 200000,
    username: `newuser_${Date.now()}`,
    first_name: 'New User',
    language_code: 'ru'
  };
  
  const initData = generateValidInitData(testUser, BOT_TOKEN);
  console.log('Generated initData for new user:', testUser.id);
  
  try {
    console.log('\nüì§ Sending register request...');
    const response = await fetch(`${API_BASE}/register/telegram`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'X-Telegram-Init-Data': initData
      },
      body: JSON.stringify({ 
        initData,
        ref_by: 'test_ref_code'
      })
    });
    
    const result = await response.json();
    
    console.log(`üì• Register Response Status: ${response.status}`);
    console.log('Register Response:', JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success && result.token) {
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω');
      return { success: true, token: result.token, user: result.user };
    } else {
      console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞');
      return { success: false, error: result };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ register –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint —Å JWT —Ç–æ–∫–µ–Ω–æ–º
 */
async function testProtectedEndpoint(token) {
  console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint...');
  
  try {
    console.log('\nüì§ Sending protected request with JWT...');
    const response = await fetch(`${API_BASE}/me`, {
      method: 'GET',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    console.log(`üì• Protected Response Status: ${response.status}`);
    console.log('Protected Response:', JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success) {
      console.log('‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç —Å JWT');
      return { success: true, data: result };
    } else {
      console.log('‚ùå –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      return { success: false, error: result };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ protected –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
 */
async function testTokenValidation(token) {
  console.log('\nüé´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    const response = await fetch(`${API_BASE}/auth/check`, {
      method: 'GET',
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    
    console.log(`üì• Token Check Status: ${response.status}`);
    console.log('Token Check Response:', JSON.stringify(result, null, 2));
    
    if (response.status === 200 && result.success) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      return { success: true, data: result };
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      return { success: false, error: result };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ token check –∑–∞–ø—Ä–æ—Å–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runFullAuthTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ü–µ–ø–æ—á–∫–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('API Base:', API_BASE);
  console.log('Bot Token available:', !!BOT_TOKEN);
  console.log('=' .repeat(60));
  
  const results = {
    auth: null,
    register: null,
    protected: null,
    tokenCheck: null
  };
  
  // 1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  results.auth = await testTelegramAuth();
  
  // 2. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  results.register = await testTelegramRegister();
  
  // 3. –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (results.register.success && results.register.token) {
    results.protected = await testProtectedEndpoint(results.register.token);
    results.tokenCheck = await testTokenValidation(results.register.token);
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));
  
  console.log('Auth endpoint:', results.auth.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('Register endpoint:', results.register.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('Protected endpoint:', results.protected?.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('Token validation:', results.tokenCheck?.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  
  const allWorking = results.auth.success && results.register.success && 
                    results.protected?.success && results.tokenCheck?.success;
  
  console.log('\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°:', allWorking ? '‚úÖ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´');
  
  if (!allWorking) {
    console.log('\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (!results.auth.success) {
      console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint /api/v2/auth/telegram');
    }
    if (!results.register.success) {
      console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint /api/v2/register/telegram');
    }
    if (!results.protected?.success) {
      console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT middleware –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints');
    }
    if (!results.tokenCheck?.success) {
      console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint /api/v2/auth/check');
    }
  }
  
  return allWorking;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  runFullAuthTest()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

export { runFullAuthTest, testTelegramAuth, testTelegramRegister };