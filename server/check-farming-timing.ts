import { supabase } from '../core/supabase.js';

async function checkFarmingTiming() {
  console.log('=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–†–ú–ò–ù–ì –ù–ê–ß–ò–°–õ–ï–ù–ò–ô ===\n');
  
  const referralIds = [186, 187, 188, 189, 190]; // ID –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    console.log('üìä –î–ê–ù–ù–´–ï –§–ê–†–ú–ò–ù–ì–ê –†–ï–§–ï–†–ê–õ–û–í:');
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .in('id', referralIds);
      
    if (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      return;
    }
    
    users?.forEach(user => {
      console.log(`\nüë§ ${user.username} (ID: ${user.id})`);
      console.log(`   - UNI farming –∞–∫—Ç–∏–≤–µ–Ω: ${user.uni_farming_active ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   - UNI –¥–µ–ø–æ–∑–∏—Ç: ${user.uni_deposit_amount || 0} UNI`);
      console.log(`   - UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
      console.log(`   - –°—Ç–∞–≤–∫–∞: ${user.uni_farming_rate || 0}% –≤ –¥–µ–Ω—å`);
      console.log(`   - –ù–∞—á–∞–ª–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${user.uni_farming_start_timestamp ? new Date(user.uni_farming_start_timestamp).toLocaleString('ru-RU') : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
      console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.uni_farming_last_update ? new Date(user.uni_farming_last_update).toLocaleString('ru-RU') : '–ù–ï –û–ë–ù–û–í–õ–Ø–õ–û–°–¨'}`);
      
      if (user.uni_farming_last_update) {
        const minutesAgo = Math.floor((Date.now() - new Date(user.uni_farming_last_update).getTime()) / 1000 / 60);
        console.log(`   - –ú–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${minutesAgo}`);
      }
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n\nüìà –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –†–ï–§–ï–†–ê–õ–û–í:');
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', referralIds)
      .order('created_at', { ascending: false });
      
    if (txError) {
      console.error('–û—à–∏–±–∫–∞:', txError);
      return;
    }
    
    console.log(`\n–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length || 0}`);
    
    const txByType = {};
    transactions?.forEach(tx => {
      if (!txByType[tx.type]) txByType[tx.type] = 0;
      txByType[tx.type]++;
    });
    
    console.log('\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:');
    Object.entries(txByType).forEach(([type, count]) => {
      console.log(`- ${type}: ${count}`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    console.log('\n\nüîÑ –ü–û–°–õ–ï–î–ù–ò–ï FARMING_REWARD –í –°–ò–°–¢–ï–ú–ï:');
    const { data: recentFarming, error: farmError } = await supabase
      .from('transactions')
      .select('user_id, amount, currency, created_at')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (recentFarming && recentFarming.length > 0) {
      console.log(`\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentFarming.length} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:`);
      recentFarming.forEach(tx => {
        const isReferral = referralIds.includes(tx.user_id);
        const marker = isReferral ? '‚≠ê' : '';
        console.log(`${marker} User ${tx.user_id}: +${tx.amount} ${tx.currency} (${new Date(tx.created_at).toLocaleString('ru-RU')})`);
      });
    } else {
      console.log('‚ùå –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º uni_farming_data —Ç–∞–±–ª–∏—Ü—É
    console.log('\n\nüìã –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ uni_farming_data:');
    const { data: farmingData, error: farmingDataError } = await supabase
      .from('uni_farming_data')
      .select('*')
      .in('user_id', referralIds);
      
    if (farmingDataError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ uni_farming_data –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã!');
    } else if (farmingData && farmingData.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${farmingData.length}`);
      farmingData.forEach(fd => {
        console.log(`- User ${fd.user_id}: –¥–µ–ø–æ–∑–∏—Ç ${fd.farming_balance}, —Å—Ç–∞–≤–∫–∞ ${fd.farming_rate}`);
      });
    } else {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ uni_farming_data –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    const hasActiveDeposits = users?.some(u => u.uni_farming_active && u.uni_deposit_amount > 0);
    const hasOldUpdates = users?.every(u => {
      if (!u.uni_farming_last_update) return true;
      const minutesAgo = (Date.now() - new Date(u.uni_farming_last_update).getTime()) / 1000 / 60;
      return minutesAgo > 10;
    });
    
    if (hasActiveDeposits && hasOldUpdates) {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:');
      console.log('   - –£ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
      console.log('   - –ù–æ —Ñ–∞—Ä–º–∏–Ω–≥ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç');
      console.log('   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      console.log('   2. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      console.log('   3. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkFarmingTiming();