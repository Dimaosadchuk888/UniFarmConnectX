import { supabase } from '../core/supabase.js';
import { BalanceManager } from '../core/BalanceManager.js';
import { UnifiedTransactionService } from '../core/TransactionService.js';

async function createTestReferrals() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –†–ï–§–ï–†–ê–õ–û–í –î–õ–Ø USER 184 ===\n');
  
  const referrerCode = 'REF_1752755835358_yjrusv'; // –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  const referrerId = 184; // –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  try {
    // –°–æ–∑–¥–∞–µ–º 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = [];
    const timestamp = Date.now();
    
    for (let i = 1; i <= 5; i++) {
      const username = `test_ref_${timestamp}_${i}`;
      const telegramId = 8000000 + timestamp + i;
      
      console.log(`\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i}/5:`);
      console.log(`- Username: ${username}`);
      console.log(`- Telegram ID: ${telegramId}`);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: newUser, error } = await supabase
        .from('users')
        .insert({
          telegram_id: telegramId,
          username: username,
          first_name: `Test Ref ${i}`,
          ref_code: `REF_${timestamp}_${i}`,
          referred_by: referrerId,
          balance_uni: 10000, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
          balance_ton: 100,   // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è TON Boost
          created_at: new Date().toISOString()
        })
        .select()
        .single();
        
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error);
        continue;
      }
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${newUser.id}`);
      testUsers.push(newUser);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º UNI –¥–µ–ø–æ–∑–∏—Ç
      const uniDepositAmount = 1000 + (i * 500); // 1500, 2000, 2500, 3000, 3500 UNI
      console.log(`\nüí∞ –û—Ç–∫—Ä—ã—Ç–∏–µ UNI –¥–µ–ø–æ–∑–∏—Ç–∞: ${uniDepositAmount} UNI`);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
      const balanceManager = new BalanceManager();
      await balanceManager.addBalance(newUser.id, -uniDepositAmount, 0, 'farming_deposit');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤ –ë–î
      const { error: depositError } = await supabase
        .from('users')
        .update({
          uni_farming_active: true,
          uni_deposit_amount: uniDepositAmount,
          uni_farming_balance: 0,
          uni_farming_rate: 0.01,
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_last_update: new Date().toISOString()
        })
        .eq('id', newUser.id);
        
      if (depositError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è UNI –¥–µ–ø–æ–∑–∏—Ç–∞:`, depositError);
      } else {
        console.log(`‚úÖ UNI –¥–µ–ø–æ–∑–∏—Ç –æ—Ç–∫—Ä—ã—Ç`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
        await UnifiedTransactionService.getInstance().createTransaction({
          user_id: newUser.id,
          type: 'FARMING_DEPOSIT',
          amount_uni: uniDepositAmount,
          amount_ton: 0,
          currency: 'UNI',
          status: 'completed',
          description: `UNI farming deposit: ${uniDepositAmount} UNI`
        });
      }
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º TON Boost (–ø–∞–∫–µ—Ç 1 - 10 TON)
      console.log(`\nüöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost (–ø–∞–∫–µ—Ç 1):`);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
      await balanceManager.addBalance(newUser.id, 0, -10, 'boost_purchase');
      
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
      const { error: tonError } = await supabase
        .from('ton_farming_data')
        .upsert({
          user_id: newUser.id.toString(), // –í ton_farming_data user_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ string
          boost_package_id: 1,
          farming_balance: 10,
          farming_rate: 0.005,
          farming_start_timestamp: new Date().toISOString(),
          farming_last_update: new Date().toISOString(),
          created_at: new Date().toISOString()
        }, {
          onConflict: 'user_id'
        });
        
      if (tonError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost:`, tonError);
      } else {
        console.log(`‚úÖ TON Boost –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
        await UnifiedTransactionService.getInstance().createTransaction({
          user_id: newUser.id,
          type: 'BOOST_PURCHASE',
          amount_uni: 0,
          amount_ton: 10,
          currency: 'TON',
          status: 'completed',
          description: 'TON Boost –ø–∞–∫–µ—Ç 1 (10 TON)'
        });
      }
    }
    
    console.log('\n‚úÖ –ò–¢–û–ì–ò:');
    console.log(`- –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${testUsers.length}`);
    console.log(`- –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ`);
    console.log(`- –£ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã –¥–µ–ø–æ–∑–∏—Ç—ã UNI –∏ TON`);
    console.log(`\nüìä –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ:`);
    console.log(`1. –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–∏—Ç –¥–æ—Ö–æ–¥ –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    console.log(`2. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ 5% –æ—Ç –∏—Ö –¥–æ—Ö–æ–¥–æ–≤`);
    console.log(`3. –í –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—è–≤—è—Ç—Å—è –∑–∞–ø–∏—Å–∏ REFERRAL_REWARD`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    testUsers.forEach((user, index) => {
      const uniDeposit = 1000 + ((index + 1) * 500);
      console.log(`${index + 1}. ${user.username} (ID: ${user.id})`);
      console.log(`   - UNI –¥–µ–ø–æ–∑–∏—Ç: ${uniDeposit} UNI`);
      console.log(`   - TON –¥–µ–ø–æ–∑–∏—Ç: 10 TON`);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

createTestReferrals();