import { supabase } from '../core/supabase.js';
import crypto from 'crypto';

interface TestUser {
  telegram_id: number;
  username: string;
  first_name: string;
  ref_code: string;
  referred_by: number;
  balance_uni: number;
  balance_ton: number;
  uni_deposit_amount: number;
  ton_boost_package?: number;
  created_at?: string;
}

async function createTestReferrals() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –†–ï–§–ï–†–ê–õ–û–í –î–õ–Ø USER 74 ===\n');
  
  try {
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º
    const levelUsers: Map<number, number[]> = new Map();
    levelUsers.set(0, [74]); // –£—Ä–æ–≤–µ–Ω—å 0 - —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 74
    
    let totalCreated = 0;
    const usersPerLevel = 5;
    const maxLevels = 20;
    
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
    let nextUserId = 10000 + Math.floor(Math.random() * 1000);
    let nextTelegramId = 9000000 + Math.floor(Math.random() * 100000);
    
    for (let level = 1; level <= maxLevels; level++) {
      console.log(`\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Ä–æ–≤–Ω—è ${level}...`);
      
      const parentUsers = levelUsers.get(level - 1) || [];
      const currentLevelUsers: number[] = [];
      
      for (let i = 0; i < usersPerLevel; i++) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        const parentId = parentUsers[i % parentUsers.length];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = nextUserId++;
        const telegramId = nextTelegramId++;
        const username = `test_user_L${level}_${i + 1}`;
        const refCode = `REF_L${level}_${i + 1}_${crypto.randomBytes(3).toString('hex')}`;
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∏ –¥–µ–ø–æ–∑–∏—Ç—ã
        const uniBalance = Math.floor(Math.random() * 100000) + 1000;
        const tonBalance = Math.floor(Math.random() * 100) + 10;
        const uniDeposit = Math.floor(uniBalance * 0.7); // 70% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –¥–µ–ø–æ–∑–∏—Ç–µ
        const tonBoostPackage = Math.random() > 0.5 ? Math.floor(Math.random() * 4) + 1 : null;
        
        const newUser: TestUser = {
          telegram_id: telegramId,
          username: username,
          first_name: `Test L${level}`,
          ref_code: refCode,
          referred_by: parentId,
          balance_uni: uniBalance,
          balance_ton: tonBalance,
          uni_deposit_amount: uniDeposit,
          ...(tonBoostPackage && { ton_boost_package: tonBoostPackage })
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const { data, error } = await supabase
          .from('users')
          .insert(newUser)
          .select()
          .single();
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${username}:`, error.message);
          continue;
        }
        
        if (data) {
          currentLevelUsers.push(data.id);
          totalCreated++;
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${username} (ID: ${data.id}, Parent: ${parentId})`);
          console.log(`   üí∞ UNI: ${uniBalance}, TON: ${tonBalance}, –î–µ–ø–æ–∑–∏—Ç: ${uniDeposit}`);
          if (tonBoostPackage) {
            console.log(`   üöÄ TON Boost –ø–∞–∫–µ—Ç: ${tonBoostPackage}`);
          }
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º UNI farming –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (uniDeposit > 0) {
            await supabase
              .from('users')
              .update({
                uni_farming_active: true,
                uni_farming_start_timestamp: new Date().toISOString(),
                uni_farming_balance: uniDeposit,
                uni_farming_rate: 0.01
              })
              .eq('id', data.id);
          }
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º TON farming –µ—Å–ª–∏ –µ—Å—Ç—å boost –ø–∞–∫–µ—Ç
          if (tonBoostPackage) {
            const boostRates = { 1: 0.001, 2: 0.002, 3: 0.003, 4: 0.004 };
            await supabase
              .from('users')
              .update({
                ton_boost_active: true,
                ton_farming_balance: tonBalance * 0.5, // 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ farming
                ton_farming_rate: boostRates[tonBoostPackage] || 0.001,
                ton_farming_start_timestamp: new Date().toISOString()
              })
              .eq('id', data.id);
          }
        }
      }
      
      levelUsers.set(level, currentLevelUsers);
      console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level}: —Å–æ–∑–¥–∞–Ω–æ ${currentLevelUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
    console.log(`\n‚úÖ –ò–¢–û–ì–û –°–û–ó–î–ê–ù–û: ${totalCreated} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ referrals –¥–ª—è —Å–≤—è–∑–µ–π
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals...');
    
    let referralRecords = 0;
    for (const [level, userIds] of levelUsers) {
      if (level === 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å 0
      
      for (const userId of userIds) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const { data: user } = await supabase
          .from('users')
          .select('referred_by')
          .eq('id', userId)
          .single();
          
        if (user && user.referred_by) {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ referrals
          const { error } = await supabase
            .from('referrals')
            .insert({
              user_id: userId,
              inviter_id: user.referred_by,
              level: 1, // –ü—Ä—è–º–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª
              reward_uni: 0,
              reward_ton: 0
            });
            
          if (!error) {
            referralRecords++;
          }
        }
      }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${referralRecords} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú:');
    for (const [level, userIds] of levelUsers) {
      if (level === 0) continue;
      console.log(`–£—Ä–æ–≤–µ–Ω—å ${level}: ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

createTestReferrals();