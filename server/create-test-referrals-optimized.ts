import { supabase } from '../core/supabase.js';
import crypto from 'crypto';

async function createTestReferralsOptimized() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –†–ï–§–ï–†–ê–õ–û–í (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===\n');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
    const { data: existingReferrals, error: checkError } = await supabase
      .from('users')
      .select('id, username, balance_uni, balance_ton')
      .eq('referred_by', 74);
      
    if (existingReferrals && existingReferrals.length > 0) {
      console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74 —É–∂–µ –µ—Å—Ç—å ${existingReferrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:`);
      existingReferrals.forEach((ref, i) => {
        console.log(`${i+1}. ${ref.username} (ID: ${ref.id})`);
      });
      console.log('\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö...\n');
    }
    
    const usersPerLevel = 3; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    const maxLevels = 5; // –°–æ–∑–¥–∞–¥–∏–º —Ç–æ–ª—å–∫–æ 5 —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: { [level: number]: Array<{id: number, username: string}> } = {
      0: [{id: 74, username: 'test_user_1752129840905'}]
    };
    
    let totalCreated = 0;
    const startTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞ —É—Ä–æ–≤–Ω–µ–º
    for (let level = 1; level <= maxLevels; level++) {
      console.log(`\nüìä –£—Ä–æ–≤–µ–Ω—å ${level}:`);
      createdUsers[level] = [];
      
      const parentUsers = createdUsers[level - 1];
      
      for (let i = 0; i < usersPerLevel; i++) {
        // –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏
        const parent = parentUsers[i % parentUsers.length];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const telegramId = 8000000 + totalCreated + 1000;
        const username = `ref_L${level}_user${i + 1}`;
        const refCode = `REF_${level}_${i}_${crypto.randomBytes(3).toString('hex').toUpperCase()}`;
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        const uniBalance = 10000 + Math.floor(Math.random() * 90000);
        const tonBalance = 10 + Math.floor(Math.random() * 90);
        const uniDeposit = Math.floor(uniBalance * 0.8);
        
        const newUser = {
          telegram_id: telegramId,
          username: username,
          first_name: `Level ${level} User`,
          ref_code: refCode,
          referred_by: parent.id,
          referrer_id: parent.id, // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–æ –ø–æ–ª–µ
          balance_uni: uniBalance,
          balance_ton: tonBalance,
          uni_deposit_amount: uniDeposit,
          uni_farming_active: true,
          uni_farming_start_timestamp: new Date().toISOString(),
          uni_farming_balance: uniDeposit,
          uni_farming_rate: 0.01,
          ton_boost_package: level <= 3 ? level : null, // –ü–µ—Ä–≤—ã–µ 3 —É—Ä–æ–≤–Ω—è –ø–æ–ª—É—á–∞—é—Ç boost –ø–∞–∫–µ—Ç—ã
          created_at: new Date().toISOString()
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data, error } = await supabase
          .from('users')
          .insert(newUser)
          .select('id, username')
          .single();
          
        if (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${username}: ${error.message}`);
          continue;
        }
        
        if (data) {
          createdUsers[level].push(data);
          totalCreated++;
          console.log(`‚úÖ ${username} (ID: ${data.id}) <- —Ä–µ—Ñ–µ—Ä–∞–ª ${parent.username}`);
          console.log(`   üí∞ ${uniBalance} UNI (–¥–µ–ø–æ–∑–∏—Ç: ${uniDeposit}), ${tonBalance} TON`);
        }
      }
    }
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\n‚úÖ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ ${totalCreated} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ ${duration.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê –†–ï–§–ï–†–ê–õ–û–í:');
    for (let level = 1; level <= maxLevels; level++) {
      const users = createdUsers[level];
      console.log(`\n–£—Ä–æ–≤–µ–Ω—å ${level}: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      users.forEach(u => console.log(`  - ${u.username} (ID: ${u.id})`));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const { count: totalReferrals } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .eq('referred_by', 74);
      
    console.log(`\nüìà –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74: ${totalReferrals}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

createTestReferralsOptimized();