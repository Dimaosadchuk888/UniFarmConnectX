/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º UNI —Ñ–∞—Ä–º–∏–Ω–≥–æ–º
 * 
 * –≠—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
 * UNI-—Ñ–∞—Ä–º–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç NewUniFarmingService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.
 */

import { Request, Response, NextFunction } from 'express';
import { z } from 'zod';
import { newUniFarmingService, validationService } from '../services';
import { ValidationError, NotFoundError } from '../middleware/errorHandler';
import { formatZodErrors } from '../utils/validationUtils';

// –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å user_id
const userIdSchema = z.object({
  user_id: z.coerce.number()
});

// –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
const createDepositSchema = z.object({
  user_id: z.coerce.number(),
  amount: z.string().refine(val => !isNaN(parseFloat(val)) && parseFloat(val) > 0, {
    message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
  })
});

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */
export class NewUniFarmingController {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö UNI —Ñ–∞—Ä–º–∏–Ω–≥-–¥–µ–ø–æ–∑–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @route GET /api/new-uni-farming/info
   */
  static async getUserFarmingInfo(req: Request, res: Response): Promise<void> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
      const validationResult = userIdSchema.safeParse(req.query);
      
      if (!validationResult.success) {
        throw new ValidationError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', formatZodErrors(validationResult.error));
      }
      
      const { user_id } = validationResult.data;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
      const farmingInfo = await newUniFarmingService.getUserFarmingInfo(user_id);
      
      res.json({
        success: true,
        data: {
          is_active: farmingInfo.isActive,
          total_deposit_amount: farmingInfo.totalDepositAmount,
          deposit_count: farmingInfo.depositCount,
          total_rate_per_second: farmingInfo.totalRatePerSecond,
          daily_income_uni: farmingInfo.dailyIncomeUni,
          deposits: farmingInfo.deposits
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ getUserFarmingInfo:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ Not Found –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å
      if (error instanceof ValidationError) {
        res.status(400).json({
          success: false,
          message: error.message,
          errors: error.errors || null
        });
        return;
      } else if (error instanceof NotFoundError) {
        res.status(404).json({
          success: false,
          message: error.message
        });
        return;
      } else if (error instanceof Error) {
        console.error(error.stack);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π UNI —Ñ–∞—Ä–º–∏–Ω–≥-–¥–µ–ø–æ–∑–∏—Ç
   * @route POST /api/new-uni-farming/deposit
   */
  static async createDeposit(req: Request, res: Response): Promise<void> {
    console.log('[NewUniFarmingController] üîé createDeposit - –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞:', {
      path: req.path,
      body: JSON.stringify(req.body)
    });
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Zod –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const validationResult = createDepositSchema.safeParse(req.body);
      
      if (!validationResult.success) {
        console.error('[NewUniFarmingController] ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', formatZodErrors(validationResult.error));
        throw new ValidationError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', formatZodErrors(validationResult.error));
      }
      
      const { user_id, amount } = validationResult.data;
      console.log('[NewUniFarmingController] ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ:', { user_id, amount });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ValidationService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      const farmingOperationValidation = validationService.validateFarmingOperation(
        user_id,
        amount,
        'deposit',
        req.headers['x-idempotency-key'] as string
      );
      
      if (!farmingOperationValidation.success) {
        throw new ValidationError(
          farmingOperationValidation.error || '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞',
          { 
            'amount': String(amount), 
            'user_id': String(user_id) 
          }
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      const idempotencyKey = req.headers['x-idempotency-key'] as string;
      if (idempotencyKey && validationService.isOperationDuplicate(idempotencyKey)) {
        console.log(`[NewUniFarmingController] –î—É–±–ª–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –∫–ª—é—á–æ–º: ${idempotencyKey}`);
        
        // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        res.json({
          success: true,
          data: {
            message: '–î–µ–ø–æ–∑–∏—Ç —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏',
            deposit_id: null,
            duplicate: true
          }
        });
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
      const depositResult = await newUniFarmingService.createUniFarmingDeposit(
        user_id, 
        validationService.validateAndParseNumber(amount, {
          min: 100,  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ 100 UNI
          max: 10000000,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ 10,000,000 UNI
          currency: 'UNI',
          precision: 6
        })
      );
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      if (idempotencyKey) {
        validationService.registerCompletedOperation(idempotencyKey, depositResult);
      }
      
      if (depositResult.success) {
        res.json({
          success: true,
          data: depositResult
        });
      } else {
        res.status(400).json({
          success: false,
          message: depositResult.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ createDeposit:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ Not Found –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å
      if (error instanceof ValidationError) {
        res.status(400).json({
          success: false,
          message: error.message,
          errors: error.errors || null
        });
        return;
      } else if (error instanceof NotFoundError) {
        res.status(404).json({
          success: false,
          message: error.message
        });
        return;
      } else if (error instanceof Error) {
        console.error(error.stack);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @route GET /api/new-uni-farming/deposits
   */
  static async getUserDeposits(req: Request, res: Response): Promise<void> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
      const validationResult = userIdSchema.safeParse(req.query);
      
      if (!validationResult.success) {
        throw new ValidationError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', formatZodErrors(validationResult.error));
      }
      
      const { user_id } = validationResult.data;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
      const deposits = await newUniFarmingService.getUserFarmingDeposits(user_id);
      
      res.json({
        success: true,
        data: deposits
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ getUserDeposits:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ Not Found –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å
      if (error instanceof ValidationError) {
        res.status(400).json({
          success: false,
          message: error.message,
          errors: error.errors || null
        });
        return;
      } else if (error instanceof NotFoundError) {
        res.status(404).json({
          success: false,
          message: error.message
        });
        return;
      } else if (error instanceof Error) {
        console.error(error.stack);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤'
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @route GET /api/new-uni-farming/update-balance
   */
  static async updateUserFarmingBalance(req: Request, res: Response): Promise<void> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
      const validationResult = userIdSchema.safeParse(req.query);
      
      if (!validationResult.success) {
        throw new ValidationError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', formatZodErrors(validationResult.error));
      }
      
      const { user_id } = validationResult.data;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      const currentHour = Math.floor(Date.now() / (60 * 60 * 1000));
      const idempotencyKey = req.headers['x-idempotency-key'] as string || 
        validationService.generateIdempotencyKey({
          userId: user_id,
          operation: 'update-farming-balance',
          timestamp: currentHour
        });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Å—É
      if (validationService.isOperationDuplicate(idempotencyKey)) {
        console.log(`[NewUniFarmingController] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –≤ —ç—Ç–æ–º —á–∞—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
        
        res.json({
          success: true,
          data: {
            message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Å—É',
            duplicate: true,
            total_deposit_amount: '0.000000',
            total_rate_per_second: '0.000000',
            earned_this_update: '0.000000',
            deposit_count: 0
          }
        });
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const updateResult = await newUniFarmingService.calculateAndUpdateUserFarming(user_id);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      validationService.registerCompletedOperation(idempotencyKey, updateResult);
      
      res.json({
        success: true,
        data: {
          total_deposit_amount: updateResult.totalDepositAmount,
          total_rate_per_second: updateResult.totalRatePerSecond,
          earned_this_update: updateResult.earnedThisUpdate,
          deposit_count: updateResult.depositCount
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ updateUserFarmingBalance:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ Not Found –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å
      if (error instanceof ValidationError) {
        res.status(400).json({
          success: false,
          message: error.message,
          errors: error.errors || null
        });
        return;
      } else if (error instanceof NotFoundError) {
        res.status(404).json({
          success: false,
          message: error.message
        });
        return;
      } else if (error instanceof Error) {
        console.error(error.stack);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞'
      });
    }
  }
}