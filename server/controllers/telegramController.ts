/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook –∑–∞–ø—Ä–æ—Å–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */

import { Request, Response } from 'express';
import { UserService } from '../services/userService';
import { ReferralService } from '../services/referralService';

// –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const APP_URL = 'https://uni-farm-connect-2-misterxuniverse.replit.app';

// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –∑–∞–ø—Ä–æ—Å–æ–≤
export class TelegramController {
  // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤—ã–∑–æ–≤–∞ Telegram API
  private static API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π webhook –æ—Ç Telegram
   */
  static async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (!req.body) {
        console.warn('[TelegramController] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–µ–ª–∞');
        res.status(400).json({ ok: false, error: 'Empty request body' });
        return;
      }

      const update = req.body;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      console.log(`[TelegramController] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:`, 
        JSON.stringify(update, null, 2).substring(0, 500) + '...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (update.message) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
        await TelegramController.handleMessage(update.message);
      } else if (update.callback_query) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
        await TelegramController.handleCallbackQuery(update.callback_query);
      } else {
        console.log('[TelegramController] –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }
      
      // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 OK, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å,
      // —á—Ç–æ–±—ã Telegram –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
      res.status(200).json({ ok: true }); // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK –¥–ª—è Telegram
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
   */
  private static async handleMessage(message: any): Promise<void> {
    try {
      const chatId = message.chat.id;
      const text = message.text || '';
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "/"
      if (text.startsWith('/')) {
        const command = text.split(' ')[0].substring(1).toLowerCase();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞)
        const args = text.indexOf(' ') > 0 ? text.substring(text.indexOf(' ') + 1) : '';
        
        switch (command) {
          case 'start':
            await TelegramController.handleStartCommand(chatId, args);
            break;
          case 'ping':
            await TelegramController.handlePingCommand(chatId);
            break;
          case 'info':
            await TelegramController.handleInfoCommand(chatId, message.from);
            break;
          case 'refcode':
            await TelegramController.handleRefCodeCommand(chatId, message.from.id);
            break;
          case 'app':
            await TelegramController.handleAppCommand(chatId);
            break;
          default:
            await TelegramController.sendMessage(chatId, 
              `–ö–æ–º–∞–Ω–¥–∞ /${command} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`);
        }
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await TelegramController.handleRegularMessage(chatId, message);
      }
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
   */
  private static async handleCallbackQuery(query: any): Promise<void> {
    try {
      const chatId = query.message.chat.id;
      const messageId = query.message.message_id;
      const data = query.data;
      const userId = query.from.id;
      
      console.log(`[TelegramController] –ü–æ–ª—É—á–µ–Ω callback_query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      switch (data) {
        case 'get_refcode':
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
          await TelegramController.handleRefCodeCommand(chatId, userId, messageId);
          break;
        case 'open_app':
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
          await TelegramController.handleAppCommand(chatId, messageId);
          break;
        default:
          console.log(`[TelegramController] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_query: ${data}`);
          await TelegramController.answerCallbackQuery(query.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏
      await TelegramController.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
   */
  private static async handleStartCommand(chatId: number, startParam: string): Promise<void> {
    try {
      console.log(`[TelegramController] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç ${chatId} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startParam}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
      let refCode = null;
      if (startParam) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ startParam
        if (startParam.startsWith('ref_')) {
          refCode = startParam;
        } else if (startParam.match(/^[a-f0-9]{12}$/)) {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª–∏–Ω–æ–π 12 —Å–∏–º–≤–æ–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
          refCode = `ref_${startParam}`;
        }
        
        if (refCode) {
          console.log(`[TelegramController] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${refCode}`);
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const welcomeMessage = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm!

–ù–∞—á–Ω–∏—Ç–µ —Ñ–∞—Ä–º–∏–Ω–≥ –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ –Ω–∞—à–µ–º Mini App.
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã!

üîΩ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üîΩ
      `;
      
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å UniFarm üöÄ',
              web_app: { url: APP_URL }
            }
          ],
          [
            {
              text: "–£–∑–Ω–∞—Ç—å –º–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥",
              callback_data: "get_refcode"
            }
          ]
        ]
      };
      
      await TelegramController.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ping
   */
  private static async handlePingCommand(chatId: number): Promise<void> {
    try {
      console.log(`[TelegramController] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ping –æ—Ç ${chatId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫–ª–∏–∫–∞
      const startTime = Date.now();
      const message = await TelegramController.sendMessage(chatId, 'üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
      
      if (message && message.message_id) {
        const responseTime = Date.now() - startTime;
        await TelegramController.editMessage(
          chatId, 
          message.message_id, 
          `üèì –ü–æ–Ω–≥! –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${responseTime} –º—Å`
        );
      }
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ping:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /info
   */
  private static async handleInfoCommand(chatId: number, user: any): Promise<void> {
    try {
      console.log(`[TelegramController] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info –æ—Ç ${chatId}`);
      
      const telegramId = user.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userData = await UserService.getUserByTelegramId(telegramId);
      
      if (userData) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const infoMessage = `
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:</b>

üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>${userData.id}</code>
üë§ –ò–º—è: ${user.first_name || ''} ${user.last_name || ''}
üîë Telegram ID: <code>${telegramId}</code>
${userData.wallet_address ? `üíº TON –ö–æ—à–µ–ª–µ–∫: <code>${userData.wallet_address}</code>` : 'üíº TON –ö–æ—à–µ–ª–µ–∫: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
üí∞ –ë–∞–ª–∞–Ω—Å UNI: <b>${userData.balance_uni || '0'}</b>
ü™ô –ë–∞–ª–∞–Ω—Å TON: <b>${userData.balance_ton || '0'}</b>
        `;
        
        await TelegramController.sendMessage(chatId, infoMessage, { parse_mode: 'HTML' });
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const notFoundMessage = `
‚ö†Ô∏è <b>–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.

üîΩ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üîΩ
        `;
        
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–∫—Ä—ã—Ç—å UniFarm üöÄ',
                web_app: { url: APP_URL }
              }
            ]
          ]
        };
        
        await TelegramController.sendMessage(chatId, notFoundMessage, { 
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      }
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /info:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /refcode
   */
  private static async handleRefCodeCommand(chatId: number, telegramId: number, messageId?: number): Promise<void> {
    try {
      console.log(`[TelegramController] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /refcode –æ—Ç ${chatId} (Telegram ID: ${telegramId})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userData = await UserService.getUserByTelegramId(telegramId);
      
      if (userData && userData.ref_code) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        const refMessage = `
üîó <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b>

<code>${userData.ref_code}</code>

üì± <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:</b>
<code>https://t.me/${BOT_TOKEN?.split(':')[0]}?start=${userData.ref_code}</code>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        `;
        
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
                web_app: { url: `${APP_URL}/friends` }
              }
            ]
          ]
        };
        
        if (messageId) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await TelegramController.editMessage(chatId, messageId, refMessage, { 
            parse_mode: 'HTML',
            reply_markup: keyboard
          });
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await TelegramController.sendMessage(chatId, refMessage, { 
            parse_mode: 'HTML',
            reply_markup: keyboard
          });
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        const notFoundMessage = `
‚ö†Ô∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.

üîΩ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üîΩ
        `;
        
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '–û—Ç–∫—Ä—ã—Ç—å UniFarm üöÄ',
                web_app: { url: APP_URL }
              }
            ]
          ]
        };
        
        if (messageId) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await TelegramController.editMessage(chatId, messageId, notFoundMessage, { 
            parse_mode: 'HTML',
            reply_markup: keyboard
          });
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await TelegramController.sendMessage(chatId, notFoundMessage, { 
            parse_mode: 'HTML',
            reply_markup: keyboard
          });
        }
      }
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /refcode:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /app
   */
  private static async handleAppCommand(chatId: number, messageId?: number): Promise<void> {
    try {
      console.log(`[TelegramController] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /app –æ—Ç ${chatId}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
      const appMessage = `
üöÄ <b>UniFarm - –≤–∞—à –ø—É—Ç—å –∫ –∫—Ä–∏–ø—Ç–æ-—Ñ–∞—Ä–º–∏–Ω–≥—É!</b>

–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.
–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏!

üîΩ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App üîΩ
      `;
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å UniFarm üöÄ',
              web_app: { url: APP_URL }
            }
          ]
        ]
      };
      
      if (messageId) {
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await TelegramController.editMessage(chatId, messageId, appMessage, { 
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await TelegramController.sendMessage(chatId, appMessage, { 
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      }
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /app:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private static async handleRegularMessage(chatId: number, message: any): Promise<void> {
    try {
      console.log(`[TelegramController] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${chatId}`);
      
      // –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ç.–¥.
      
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
      const helpMessage = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç UniFarm.

–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/app - –û—Ç–∫—Ä—ã—Ç—å UniFarm Mini App
/refcode - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
      `;
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '–û—Ç–∫—Ä—ã—Ç—å UniFarm üöÄ',
              web_app: { url: APP_URL }
            }
          ]
        ]
      };
      
      await TelegramController.sendMessage(chatId, helpMessage, { reply_markup: keyboard });
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  private static async sendMessage(chatId: number, text: string, options: any = {}): Promise<any> {
    try {
      const response = await fetch(`${TelegramController.API_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          ...options
        }),
      });
      
      const result = await response.json();
      
      if (!result.ok) {
        console.error(`[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.description}`);
        return null;
      }
      
      return result.result;
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private static async editMessage(chatId: number, messageId: number, text: string, options: any = {}): Promise<any> {
    try {
      const response = await fetch(`${TelegramController.API_URL}/editMessageText`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text: text,
          ...options
        }),
      });
      
      const result = await response.json();
      
      if (!result.ok) {
        console.error(`[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.description}`);
        return null;
      }
      
      return result.result;
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
   */
  private static async answerCallbackQuery(callbackQueryId: string, text?: string): Promise<any> {
    try {
      const response = await fetch(`${TelegramController.API_URL}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text: text
        }),
      });
      
      const result = await response.json();
      
      if (!result.ok) {
        console.error(`[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: ${result.description}`);
        return null;
      }
      
      return result.result;
    } catch (error) {
      console.error('[TelegramController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', error);
      return null;
    }
  }
}