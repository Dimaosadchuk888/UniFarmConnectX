import { Request, Response, NextFunction } from 'express';
import { missionServiceFixed } from '../services/missionServiceFixed';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏—Å—Å–∏—è–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */
export class MissionControllerFixed {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
   */
  static async getActiveMissions(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      console.log('[MissionControllerFixed] üöÄ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π');
      
      const activeMissions = await missionServiceFixed.getActiveMissions();
      
      console.log('[MissionControllerFixed] ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏—Å—Å–∏–∏:', activeMissions.length);
      
      res.status(200).json({
        success: true,
        data: activeMissions,
        message: '–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã'
      });
    } catch (error) {
      console.error('[MissionControllerFixed] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
      
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π',
        message: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserCompletedMissions(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      const userId = parseInt(req.query.user_id as string) || 1;
      console.log('[MissionControllerFixed] üöÄ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      const completedMissions = await missionServiceFixed.getUserCompletedMissions(userId);
      
      console.log('[MissionControllerFixed] ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏:', completedMissions.length);
      
      res.status(200).json({
        success: true,
        data: completedMissions,
        message: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã'
      });
    } catch (error) {
      console.error('[MissionControllerFixed] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
      
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π',
        message: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
   */
  static async completeMission(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      res.status(200).json({
        success: true,
        data: { message: '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' },
        message: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏'
      });
    }
  }
}