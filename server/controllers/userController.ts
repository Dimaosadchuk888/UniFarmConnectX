import { Request, Response } from 'express';
import { UserService } from '../services/userService';
import { UniFarmingService } from '../services/uniFarmingService';
import { NewUniFarmingService } from '../services/newUniFarmingService';
import { sendSuccess, sendError, sendServerError } from '../utils/responseUtils';
import { extractUserId } from '../utils/validationUtils';
import { getUserParamsSchema } from '../validators/schemas';
import { ZodError } from 'zod';
import BigNumber from 'bignumber.js';
import { db } from '../db';
import { uniFarmingDeposits, users } from '@shared/schema';
import { and, eq } from 'drizzle-orm';
import { validateTelegramInitData, TelegramValidationResult, logTelegramData } from '../utils/telegramUtils';
import { storage } from '../storage';
import 'express-session';

// –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π —Ä–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request
// –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –æ–±—Ö–æ–¥—è—â–µ–µ –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π express-session
type RequestWithSession = Request & {
  session?: {
    userId?: number;
    user?: {
      id: number;
      username: string;
      ref_code?: string;
      guest_id?: string;
    };
  };
};

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export class UserController {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram Auth
   */
  static async getCurrentUser(req: RequestWithSession, res: Response): Promise<void> {
    try {
      console.log("[UserController] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ /api/me. –°–µ—Å—Å–∏—è:", req.session ? "–¥–æ—Å—Ç—É–ø–Ω–∞" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      if (req.session) {
        console.log("[UserController] –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:", {
          userId: req.session.userId,
          userObj: req.session.user ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
          userObjId: req.session.user?.id,
          userObjRefCode: req.session.user?.ref_code || "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        });
      }
      
      // –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –¥–∞–Ω–Ω—ã–µ Telegram
      // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø.1.2 –¢–ó)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
      const telegramDataHeaderNames = [
        'telegram-data', 'Telegram-Data', 'TELEGRAM-DATA',
        'x-telegram-data', 'X-Telegram-Data', 'X-TELEGRAM-DATA',
        'x-telegram-init-data', 'X-Telegram-Init-Data', 'X-TELEGRAM-INIT-DATA',
        'initdata', 'Initdata', 'INITDATA',
        'x-initdata', 'X-Initdata', 'X-INITDATA',
        'telegram-init-data', 'Telegram-Init-Data', 'TELEGRAM-INIT-DATA'
      ];
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
      let telegramInitData: string | undefined;
      let usedHeaderName: string | undefined;
      
      for (const headerName of telegramDataHeaderNames) {
        const headerValue = req.headers[headerName] as string;
        if (headerValue && headerValue.trim() !== '') {
          telegramInitData = headerValue;
          usedHeaderName = headerName;
          console.log(`[–ê–£–î–ò–¢] [UserController] Found Telegram data in header: ${headerName}`);
          break;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (!telegramInitData) {
        console.warn(`[–ê–£–î–ò–¢] [UserController] ‚ö†Ô∏è No Telegram data found in headers`);
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        console.log(`[–ê–£–î–ò–¢] [UserController] üîç All request headers: ${JSON.stringify(req.headers)}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        const criticalHeaderPatterns = ['telegram', 'init', 'data', 'tg', 'user'];
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        Object.keys(req.headers).forEach(headerKey => {
          const lcKey = headerKey.toLowerCase();
          if (criticalHeaderPatterns.some(pattern => lcKey.includes(pattern))) {
            const headerValue = req.headers[headerKey];
            console.log(`[–ê–£–î–ò–¢] [UserController] üîë Critical header "${headerKey}": ` + 
              (typeof headerValue === 'string' 
                ? `Length ${headerValue.length}, Sample: ${headerValue.substring(0, 30)}...` 
                : `Value: ${headerValue}`));
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL (–º–æ–≥–ª–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ GET –∑–∞–ø—Ä–æ—Å–µ)
        if (req.query.initData) {
          telegramInitData = req.query.initData as string;
          console.log(`[UserController] [TelegramAuth] –ù–∞—à–ª–∏ initData –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–¥–ª–∏–Ω–∞: ${telegramInitData?.length || 0})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ POST-–∑–∞–ø—Ä–æ—Å
        if (!telegramInitData && req.method === 'POST' && req.body) {
          if (typeof req.body === 'object') {
            if (req.body.initData) {
              telegramInitData = req.body.initData;
              console.log(`[UserController] [TelegramAuth] –ù–∞—à–ª–∏ initData –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª–∏–Ω–∞: ${telegramInitData?.length || 0})`);
            } else if (req.body.telegram_data) {
              telegramInitData = req.body.telegram_data;
              console.log(`[UserController] [TelegramAuth] –ù–∞—à–ª–∏ telegram_data –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª–∏–Ω–∞: ${telegramInitData?.length || 0})`);
            }
          }
        }
      }
      
      let telegramId: number | null = null;
      let userId: number | null = null;
      let username: string | null = null;
      let firstName: string | null = null;
      let lastName: string | null = null;
      let startParam: string | null = null;
      let languageCode = 'ru'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
      
      console.log(`[UserController] [–ê–£–î–ò–¢] –ó–∞–ø—Ä–æ—Å –Ω–∞ /api/me, SOURCE: ${req.headers['user-agent']?.substring(0, 50) || 'unknown'}`);
      
      // –ê–£–î–ò–¢: –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('[–ê–£–î–ò–¢] [UserController] All headers:', req.headers);
      
      // –ê–£–î–ò–¢: –û—Ç–¥–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ Telegram –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const telegramHeaders = Object.keys(req.headers).filter(h => 
        h.toLowerCase().includes('telegram') || 
        h.toLowerCase().startsWith('x-') || 
        h.toLowerCase().includes('init')
      );
      console.log('[–ê–£–î–ò–¢] [UserController] Telegram-related headers:', 
        JSON.stringify(telegramHeaders));
      
      // –ê–£–î–ò–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ telegramInitData
      console.log('[–ê–£–î–ò–¢] [UserController] telegramInitData value (first 100 chars):', 
        telegramInitData ? telegramInitData.substring(0, 100) + '...' : 'null or empty');
        
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      startParam = req.query.start as string || req.headers['x-start-param'] as string;
      if (startParam) {
        console.log(`[UserController] [ReferralSystem] Detected start parameter: ${startParam}`);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ startParam (–ø—É–Ω–∫—Ç 2.2 –¢–ó)
      let refInviterId: number | null = null;
      let refCode: string | null = null;
      
      if (startParam) {
        try {
          const { ReferralService } = await import('../services/referralService');
          const startParamResult = await ReferralService.processStartParam(startParam);
          refInviterId = startParamResult.inviterId;
          refCode = startParamResult.refCode;
          
          if (refInviterId) {
            console.log(`[UserController] [ReferralSystem] Processed startParam. Found inviter ID: ${refInviterId}, refCode: ${refCode}`);
          } else {
            console.log(`[UserController] [ReferralSystem] Processed startParam. No valid inviter found for refCode: ${refCode || 'none'}`);
          }
        } catch (error) {
          console.error(`[UserController] [ReferralSystem] Error processing startParam:`, error);
        }
      }
      
      // 1. –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï TELEGRAM ID –ß–ï–†–ï–ó –í–ï–†–ò–§–ò–ö–ê–¶–ò–Æ –î–ê–ù–ù–´–•
      // ============================================================
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –ø.1.2 –¢–ó –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (telegramInitData) {
        try {
          console.log('[UserController] [TelegramAuth] Validating Telegram initData using telegramUtils...');
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          const botToken = process.env.TELEGRAM_BOT_TOKEN;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
          if (!botToken) {
            console.error('[UserController] [TelegramAuth] ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ TELEGRAM_BOT_TOKEN!');
            console.error('[UserController] [TelegramAuth] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          } else {
            console.log('[UserController] [TelegramAuth] ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', botToken.length);
          }
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          logTelegramData(telegramInitData, null, 'UserController');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
          console.log('[UserController] [TelegramAuth] –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é initData —Å –¥–ª–∏–Ω–æ–π:', 
            telegramInitData ? telegramInitData.length : 0);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ 48 —á–∞—Å–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          // –∏ –≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          const validationResult = validateTelegramInitData(
            telegramInitData,
            botToken,
            {
              maxAgeSeconds: 172800, // 48 —á–∞—Å–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã)
              isDevelopment: process.env.NODE_ENV !== 'production',
              requireUserId: process.env.NODE_ENV === 'production', // –í –ø—Ä–æ–¥–∞–∫—à–Ω –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ–º userId
              allowFallbackId: process.env.NODE_ENV !== 'production', // –í –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—Ä–µ—â–∞–µ–º ID=1
              verboseLogging: true, // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞
              skipSignatureCheck: process.env.NODE_ENV !== 'production' // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –≤ dev-—Ä–µ–∂–∏–º–µ
            }
          );
          
          // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          console.log('[UserController] [TelegramAuth] Validation result:', {
            isValid: validationResult.isValid,
            userId: validationResult.userId,
            username: validationResult.username,
            startParam: validationResult.startParam,
            errors: validationResult.validationErrors || 'none'
          });
          
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (validationResult.isValid) {
            telegramId = validationResult.userId !== undefined ? validationResult.userId : null;
            username = validationResult.username || username;
            firstName = validationResult.firstName || null;
            lastName = validationResult.lastName || null;
            startParam = validationResult.startParam || startParam;
            
            console.log(`[UserController] [TelegramAuth] Using verified Telegram ID: ${telegramId}`);
          } else {
            console.warn('[UserController] [TelegramAuth] Telegram data validation failed:', 
              validationResult.validationErrors);
              
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (process.env.NODE_ENV !== 'production') {
              console.log('[UserController] [DEV] Continuing with unverified data in development mode');
            } else {
              console.error('[UserController] [PROD] Rejecting unverified Telegram data in production');
              // –í –ø—Ä–æ–¥–∞–∫—à–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ–º Telegram ID, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
              telegramId = null;
            }
          }
        } catch (validationError) {
          console.error('[UserController] Error during Telegram data validation:', validationError);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ guest_id –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
      let guestId: string | undefined;
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (req.query.guest_id) {
        guestId = req.query.guest_id as string;
        console.log(`[UserController] Found guest_id in query params: ${guestId}`);
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (!guestId) {
        const guestIdHeaders = [
          'guest-id', 'Guest-Id', 'GUEST-ID', 
          'x-guest-id', 'X-Guest-Id', 'X-GUEST-ID'
        ];
        
        for (const headerName of guestIdHeaders) {
          const headerValue = req.headers[headerName] as string;
          if (headerValue && headerValue.trim() !== '') {
            guestId = headerValue;
            console.log(`[UserController] Found guest_id in header ${headerName}: ${guestId}`);
            break;
          }
        }
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      if (!guestId && req.method === 'POST' && req.body) {
        if (typeof req.body === 'object' && req.body.guest_id) {
          guestId = req.body.guest_id;
          console.log(`[UserController] Found guest_id in request body: ${guestId}`);
        }
      }
      
      // –í PRODUCTION –º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ telegram_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø.2.1 –¢–ó)
      // –í DEV —Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (process.env.NODE_ENV === 'development' && !telegramId && !guestId) {
        console.log('[UserController] –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–∫–ª—é—á–µ–Ω fallback –¥–ª—è Telegram ID');
        
        // –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID=1
        telegramId = 1;
        console.log(`[UserController] [DEV] Using development test ID: ${telegramId}`);
        
        // –û—Ç–º–µ—á–∞–µ–º –≤ –ª–æ–≥–∞—Ö –¥–ª—è –∞—É–¥–∏—Ç–∞, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ID
        console.log('===[Telegram User ID Check]=== –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ =1');
      }
      
      // 2. –ü–û–ò–°–ö –ò–õ–ò –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      // ====================================

      let existingUser = null;
      
      // –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Express-—Å–µ—Å—Å–∏–∏
      // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–∞–∑–≥–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É /api/session/restore –∏ /api/me
      if (req.session && req.session.userId) {
        const sessionUserId = req.session.userId;
        console.log(`[UserController] –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ù–∞–π–¥–µ–Ω userId ${sessionUserId} –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏`);
        
        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
          existingUser = await UserService.getUserById(sessionUserId);
          
          if (existingUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ ID
            userId = sessionUserId;
            console.log(`[UserController] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å–µ—Å—Å–∏–∏: ID=${userId}, ref_code=${existingUser.ref_code || '–Ω–µ—Ç'}`);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (req.session.user) {
              console.log(`[UserController] –°–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏:`, {
                sessionUserId: req.session.userId,
                userIdFromUserObj: req.session.user.id,
                sessionRefCode: req.session.user.ref_code || '–Ω–µ—Ç',
                actualRefCode: existingUser.ref_code || '–Ω–µ—Ç'
              });
            }
          } else {
            console.warn(`[UserController] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ —Å ID=${sessionUserId}`);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º userId –∏ existingUser, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            userId = null;
            existingUser = null;
          }
        } catch (error) {
          console.error(`[UserController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ —Å ID=${sessionUserId}:`, error);
          userId = null;
          existingUser = null;
        }
      }
      
      // –í–¢–û–†–û–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏, –∏—â–µ–º –ø–æ guest_id
      if (!existingUser && guestId) {
        console.log(`[UserController] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id ${guestId} (—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)`);
        try {
          existingUser = await UserService.getUserByGuestId(guestId);
          
          if (existingUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
            userId = existingUser.id;
            console.log(`[UserController] User found with ID ${userId} for guest_id ${guestId}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if (req.session) {
              req.session.userId = userId;
              req.session.user = {
                id: existingUser.id,
                username: existingUser.username || '',
                ref_code: existingUser.ref_code || undefined,
                guest_id: existingUser.guest_id || undefined
              };
              console.log(`[UserController] User data saved to session from guest_id lookup: ID=${userId}`);
            }
          } else {
            console.log(`[UserController] No user found with guest_id ${guestId}`);
          }
        } catch (error) {
          console.error(`[UserController] Error searching for user by guest_id:`, error);
        }
      }
      
      // –¢–†–ï–¢–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ guest_id –∏ –µ—Å—Ç—å telegram_id, –∏—â–µ–º –ø–æ –Ω–µ–º—É
      if (!existingUser && telegramId) {
        console.log(`[UserController] Searching for user with Telegram ID ${telegramId} (type: ${typeof telegramId})`);
        
        try {
          existingUser = await UserService.getUserByTelegramId(telegramId);
          
          if (existingUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
            userId = existingUser.id;
            console.log(`[UserController] User found with ID ${userId} for Telegram ID ${telegramId}`);
            
            // –ü–†–û–í–ï–†–ö–ê –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï ref_code: –µ—Å–ª–∏ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ref_code, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            if (!existingUser.ref_code) {
              console.log(`[UserController] Existing user ${userId} has no ref_code. Generating new unique ref_code...`);
              
              try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º generateUniqueRefCode –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ generateRefCode
                const refCode = await UserService.generateUniqueRefCode();
                console.log(`[UserController] Generated unique ref_code: ${refCode} for user ${userId}`);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                const updatedUser = await UserService.updateUserRefCode(userId, refCode);
                
                if (updatedUser) {
                  existingUser = updatedUser;
                  console.log(`[UserController] ‚úÖ Successfully updated existing user ${userId} with new ref_code: ${refCode}`);
                } else {
                  console.error(`[UserController] ‚ùå Failed to update existing user ${userId} with ref_code`);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                  existingUser = await UserService.getUserById(userId);
                }
                
                console.log(`[UserController] Refreshed user data for ID ${userId}:`, { 
                  id: existingUser?.id, 
                  hasRefCode: !!existingUser?.ref_code,
                  refCode: existingUser?.ref_code || 'still missing'
                });
              } catch (updateError) {
                console.error(`[UserController] Failed to update ref_code for user ${userId}:`, updateError);
              }
            }
          } else {
            console.log(`[UserController] No user found for Telegram ID ${telegramId}. Will create new user.`);
          }
        } catch (searchError) {
          console.error(`[UserController] Error searching for user with telegramId ${telegramId}:`, searchError);
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if (!existingUser) {
          console.log(`[UserController] [TelegramAuth] Creating new user for Telegram ID ${telegramId}...`);
          
          // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
          let firstName = '';
          let lastName = '';
          
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
          if (telegramInitData) {
            if (telegramInitData.includes('=') && telegramInitData.includes('&')) {
              // –ò–∑ query-params, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
              const authParams = new URLSearchParams(telegramInitData);
              firstName = authParams.get('first_name') || '';
              lastName = authParams.get('last_name') || '';
            } else {
              // –ò–∑ JSON, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
              try {
                const initDataObj = JSON.parse(telegramInitData);
                if (initDataObj.user) {
                  firstName = initDataObj.user.first_name || '';
                  lastName = initDataObj.user.last_name || '';
                }
              } catch (e) {
                console.error('[UserController] [TelegramAuth] Error extracting name from JSON:', e);
              }
            }
          }
          
          console.log(`[UserController] [TelegramAuth] User info: firstName="${firstName}", lastName="${lastName}", username="${username || 'none'}"`);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è username, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          if (!username) {
            username = [firstName, lastName].filter(Boolean).join('_');
            if (!username) {
              username = `telegram_${telegramId}`;
            }
          }
          
          console.log(`[UserController] [TelegramAuth] Final username for new user: "${username}"`);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
          const refCode = await UserService.generateUniqueRefCode();
          console.log(`[UserController] [TelegramAuth] Generated unique ref_code for new user: "${refCode}"`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç—É 4 –¢–ó
          if (telegramId) {
            console.log(`[ReferralService] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: ${telegramId}, ref_code: ${refCode}`);
          } else {
            console.log(`[ReferralService] –í–ù–ò–ú–ê–ù–ò–ï! –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó telegram_id, –Ω–æ —Å ref_code: ${refCode}`);
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            const newUser = await UserService.createUser({
              telegram_id: telegramId,
              username,
              created_at: new Date(),
              updated_at: new Date(),
              balance_uni: '0',
              balance_ton: '0',
              uni_deposit_amount: '0',
              uni_farming_balance: '0',
              uni_farming_rate: '0',
              ton_deposit_amount: '0',
              ton_farming_balance: '0',
              ton_farming_rate: '0',
              ref_code: refCode // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            });
            
            userId = newUser.id;
            existingUser = newUser;
            console.log(`[UserController] Successfully created new user with ID ${userId} for Telegram ID ${telegramId} with ref_code: ${refCode}`);
            
            // –ü—É–Ω–∫—Ç 2.2 –¢–ó: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å
            if (refInviterId && refInviterId !== userId) {
              try {
                console.log(`[UserController] [ReferralSystem] Creating referral relationship: user ${userId} invited by ${refInviterId}`);
                const { ReferralService } = await import('../services/referralService');
                const result = await ReferralService.createReferralRelationship(userId, refInviterId, 1);
                
                if (result && result.referral) {
                  console.log(`[UserController] [ReferralSystem] Successfully created referral ID=${result.referral.id}`);
                } else {
                  console.warn(`[UserController] [ReferralSystem] Failed to create referral relationship`);
                }
              } catch (referralError) {
                console.error(`[UserController] [ReferralSystem] Error creating referral relationship:`, referralError);
              }
            } else if (refInviterId) {
              console.warn(`[UserController] [ReferralSystem] Self-referral attempt detected: userId ${userId} = inviterId ${refInviterId}`);
            }
          } catch (createError) {
            console.error(`[UserController] Failed to create new user for Telegram ID ${telegramId}:`, createError);
          }
        }
      }
      
      // –í—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –°–µ—Å—Å–∏—è –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ user_id (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API)
      if (!userId) {
        userId = req.query.user_id ? parseInt(req.query.user_id as string) : 
                req.headers['x-user-id'] ? parseInt(req.headers['x-user-id'] as string) : null;
                
        if (userId) {
          console.log(`[UserController] Using userId ${userId} from query parameters or headers`);
        }
      }
      
      // –¢—Ä–µ—Ç–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–¥–ª—è dev): –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const IS_DEV = process.env.NODE_ENV === 'development';
      if (!userId && IS_DEV) {
        userId = 1; // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        console.warn('[UserController] Using test user (ID=1) for development only');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è userId
      if (!userId || isNaN(userId)) {
        console.error('[UserController] Could not determine user ID');
        return sendError(res, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 401);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
      let user = existingUser;
      
      // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
      if (!user) {
        user = await UserService.getUserById(userId);
      }

      if (!user) {
        console.error(`[UserController] User with ID ${userId} not found`);
        return sendError(res, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
      }
      
      // –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø ref_code –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      // ========================================
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –µ—â–µ –Ω–µ—Ç ref_code, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
      if (!user.ref_code) {
        console.log(`[UserController] User ${userId} missing ref_code. Generating new unique ref_code...`);
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º generateUniqueRefCode –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ generateRefCode
          // –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
          const refCode = await UserService.generateUniqueRefCode();
          console.log(`[UserController] Generated unique ref_code: ${refCode} for user ${userId}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º —á–µ—Ä–µ–∑ UserService.updateUserRefCode
          // –∫–æ—Ç–æ—Ä—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
          const updatedUser = await UserService.updateUserRefCode(userId, refCode);
          
          if (updatedUser) {
            user = updatedUser;
            console.log(`[UserController] ‚úÖ Successfully updated user ${userId} with new ref_code: ${refCode}`);
          } else {
            console.error(`[UserController] ‚ùå Failed to update user ${userId} with new ref_code`);
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ,
            // –Ω–æ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª undefined –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
            user = await UserService.getUserById(userId);
          }
          
          console.log(`[UserController] Updated user data:`, { 
            id: user?.id, 
            refCodePresent: !!user?.ref_code,
            refCode: user?.ref_code || 'failed to update'
          });
        } catch (updateError) {
          console.error(`[UserController] Failed to update ref_code for final user check ${userId}:`, updateError);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null
      if (!user) {
        console.error(`[UserController] User with ID ${userId} missing after all checks`);
        return sendError(res, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
      }
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
      console.log(`[UserController] Returning user data for ID ${userId}:`, {
        id: user.id,
        telegramId: user.telegram_id,
        hasRefCode: !!user.ref_code,
        refCode: user.ref_code || 'missing'
      });
      
      sendSuccess(res, {
        id: user.id,
        telegram_id: user.telegram_id,
        username: user.username,
        balance_uni: user.balance_uni,
        balance_ton: user.balance_ton,
        language: languageCode,
        ref_code: user.ref_code
      });
    } catch (error) {
      console.error('[UserController] Error in getCurrentUser:', error);
      sendServerError(res, error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
   */
  static async getUserById(req: Request, res: Response): Promise<void> {
    try {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä telegram_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ id
      const telegramId = req.query.telegram_id;
      if (telegramId) {
        console.log(`[UserController] Trying to get user by telegram_id: ${telegramId}`);
        try {
          const user = await UserService.getUserByTelegramId(parseInt(telegramId as string));
          if (!user) {
            return sendError(res, `User with telegram_id ${telegramId} not found`, 404);
          }
          return sendSuccess(res, user);
        } catch (err) {
          console.error(`[UserController] Error getting user by telegram_id ${telegramId}:`, err);
          return sendError(res, 'Error retrieving user by Telegram ID', 500);
        }
      }
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID
      const validationResult = getUserParamsSchema.safeParse(req.params);
      if (!validationResult.success) {
        return sendError(res, 'Invalid user ID', 400, validationResult.error.format());
      }

      const userId = parseInt(req.params.id);
      const user = await UserService.getUserById(userId);

      if (!user) {
        return sendError(res, 'User not found', 404);
      }

      sendSuccess(res, user);
    } catch (error) {
      console.error('Error in getUserById:', error);
      sendServerError(res, error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ guest_id
   * 
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
   * –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Telegram Mini App.
   * 
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Ö–æ–¥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
   * –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –º–µ–Ω—è—é—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç—ã –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
   * 
   * @param req –ó–∞–ø—Ä–æ—Å —Å guest_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
   * @param res –û—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—à–∏–±–∫–æ–π
   */
  static async getUserByGuestId(req: Request, res: Response): Promise<void> {
    try {
      const guestId = req.params.guestId;
      
      if (!guestId) {
        return sendError(res, 'Guest ID is required', 400);
      }
      
      console.log(`[UserController] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id: ${guestId}`);
      
      const user = await UserService.getUserByGuestId(guestId);
      
      if (!user) {
        console.log(`[UserController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å guest_id ${guestId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return sendError(res, 'User not found', 404);
      }
      
      console.log(`[UserController] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=${user.id} –¥–ª—è guest_id=${guestId}`);
      sendSuccess(res, user);
    } catch (error) {
      console.error(`[UserController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id:`, error);
      sendServerError(res, error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async createUser(req: Request, res: Response): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const userData = req.body;
      
      let wasNewUser = true;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram_id
      if (userData.telegram_id) {
        console.log(`[UserController] [AUDIT] createUser –∑–∞–ø—Ä–æ—à–µ–Ω–æ —Å telegram_id: ${userData.telegram_id}`);
        const existingUser = await UserService.getUserByTelegramId(userData.telegram_id);
        if (existingUser) {
          console.log(`[UserController] [AUDIT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id ${userData.telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ID: ${existingUser.id}, ref_code: ${existingUser.ref_code || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
          wasNewUser = false;
          return sendError(res, 'User with this Telegram ID already exists', 409);
        }
      } else {
        console.log(`[UserController] [AUDIT] createUser –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ë–ï–ó telegram_id. –î–∞–Ω–Ω—ã–µ:`, userData);
      }
      
      // –ï—Å–ª–∏ ref_code –Ω–µ –∑–∞–¥–∞–Ω —è–≤–Ω–æ, –æ–Ω –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å generateUniqueRefCode() –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –º–µ—Ç–æ–¥–∞—Ö storage
      // –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π ref_code, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (userData.ref_code) {
        console.log(`[UserController] [AUDIT] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π ref_code: "${userData.ref_code}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ ref_code
        const isUnique = await UserService.isRefCodeUnique(userData.ref_code);
        if (!isUnique) {
          console.log(`[UserController] [AUDIT] –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π ref_code "${userData.ref_code}" —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π.`);
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º undefined, —á—Ç–æ–±—ã –º–µ—Ç–æ–¥—ã storage —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          userData.ref_code = undefined;
        }
      } else {
        console.log(`[UserController] [AUDIT] ref_code –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
      }

      const newUser = await UserService.createUser(userData);
      console.log(`[UserController] [AUDIT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: telegram_id=${userData.telegram_id || 'N/A'}, wasNewUser=${wasNewUser}, ref_code="${newUser.ref_code}", userId=${newUser.id}`);
      sendSuccess(res, newUser);
    } catch (error) {
      if (error instanceof ZodError) {
        return sendError(res, 'Invalid user data', 400, error.format());
      }
      sendServerError(res, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateUser(req: Request, res: Response): Promise<void> {
    try {
      const userId = extractUserId(req, 'params');
      
      if (!userId) {
        return sendError(res, 'Invalid user ID', 400);
      }

      const userData = req.body;
      const updatedUser = await UserService.updateUser(userId, userData);

      if (!updatedUser) {
        return sendError(res, 'User not found', 404);
      }

      sendSuccess(res, updatedUser);
    } catch (error) {
      sendServerError(res, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserBalance(req: Request, res: Response): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
      const userId = parseInt(req.query.user_id as string);
      
      if (isNaN(userId)) {
        return sendError(res, 'Invalid user ID', 400);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const newDeposits = await db
        .select()
        .from(uniFarmingDeposits)
        .where(and(
          eq(uniFarmingDeposits.user_id, userId),
          eq(uniFarmingDeposits.is_active, true)
        ));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      try {
        if (newDeposits.length > 0) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
          await NewUniFarmingService.calculateAndUpdateUserFarming(userId);
        } else {
          // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          await UniFarmingService.calculateAndUpdateUserFarming(userId);
        }
      } catch (farmingError) {
        console.error('[getUserBalance] Error updating farming before balance fetch:', farmingError);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
      const user = await UserService.getUserById(userId);

      if (!user) {
        return sendError(res, 'User not found', 404);
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      
      // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—Ç–∞–π–º –±–∞–ª–∞–Ω—Å–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å + –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞—Ä–º–∏–Ω–≥
      const baseUniBalance = new BigNumber(user.balance_uni || 0);
      const farmingAccumulated = new BigNumber(user.uni_farming_balance || 0);
      
      // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –¥–æ–±–∞–≤–ª—è—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å –º–∏–∫—Ä–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      const virtualUniBalance = baseUniBalance.plus(farmingAccumulated);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
      const balanceUni = virtualUniBalance.toFixed(8); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 8 –∑–Ω–∞–∫–æ–≤
      const balanceTon = user.balance_ton ? new BigNumber(user.balance_ton).toFixed(5) : '0.00000';
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      console.log(`[getUserBalance] User ${userId} balance: ${baseUniBalance.toFixed(8)} UNI + ${farmingAccumulated.toFixed(8)} (virtual: ${balanceUni})`);

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const farmingInfo = {
        active: false,
        depositAmount: '0',
        depositCount: 0,
        ratePerSecond: '0'
      };

      if (newDeposits.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã, —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalDeposit = newDeposits.reduce((sum, deposit) => 
          sum.plus(new BigNumber(deposit.amount || 0)), new BigNumber(0));
          
        farmingInfo.active = true;
        farmingInfo.depositAmount = totalDeposit.toFixed(2);
        farmingInfo.depositCount = newDeposits.length;
        farmingInfo.ratePerSecond = user.uni_farming_rate || '0';
      }

      sendSuccess(res, {
        balance_uni: balanceUni, 
        balance_ton: balanceTon, 
        farming: farmingInfo
      });
    } catch (error) {
      console.error('[getUserBalance] Error:', error);
      sendServerError(res, error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * 
   * @param req –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å user_id –∏–ª–∏ guest_id –≤ —Ç–µ–ª–µ
   * @param res –û—Ç–≤–µ—Ç
   */
  static async generateRefCode(req: Request, res: Response): Promise<void> {
    try {
      console.log('[UserController] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', req.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –∏–ª–∏ guest_id –≤ –∑–∞–ø—Ä–æ—Å–µ
      const userId = req.body.user_id;
      const guestId = req.body.guest_id;
      
      if (!userId && !guestId) {
        console.error('[UserController] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ guest_id –≤ –∑–∞–ø—Ä–æ—Å–µ');
        return sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ guest_id', 400);
      }
      
      // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user: any = null;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å user_id, –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–µ–º—É
      if (userId) {
        user = await storage.getUserById(userId);
        if (!user) {
          console.error(`[UserController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞`);
          return sendError(res, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 404);
        }
        console.log(`[UserController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID ${userId} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞`);
      } 
      // –ò–Ω–∞—á–µ –µ—Å–ª–∏ –µ—Å—Ç—å guest_id, –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–µ–º—É
      else if (guestId) {
        user = await storage.getUserByGuestId(guestId);
        if (!user) {
          console.error(`[UserController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å guest_id ${guestId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞`);
          return sendError(res, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å guest_id ${guestId} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 404);
        }
        console.log(`[UserController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ guest_id ${guestId} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞, ID=${user.id}`);
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TypeScript, —Ö–æ—Ç—è –ª–æ–≥–∏—á–µ—Å–∫–∏ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—à–µ
      if (!user) {
        console.error('[UserController] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
        return sendServerError(res, '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      if (user.ref_code) {
        console.log(`[UserController] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${user.id} —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${user.ref_code}`);
        return sendSuccess(res, { 
          ref_code: user.ref_code,
          user_id: user.id,
          guest_id: user.guest_id
        });
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const refCode = await storage.generateUniqueRefCode();
      console.log(`[UserController] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${refCode}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      const updatedUser = await storage.updateUserRefCode(user.id, refCode);
      if (!updatedUser) {
        return sendServerError(res, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º
      return sendSuccess(res, { 
        ref_code: refCode,
        user_id: user.id,
        guest_id: user.guest_id
      });
      
    } catch (error) {
      console.error('[UserController] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
      return sendServerError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
    }
  }
}