import { Request, Response } from 'express';
import logger from '../utils/logger';
import { telegramBot } from './bot';

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      first_name: string;
      username?: string;
    };
    chat: {
      id: number;
      type: string;
      first_name: string;
      username?: string;
    };
    date: number;
    text?: string;
    entities?: {
      type: string;
      offset: number;
      length: number;
    }[];
  };
  callback_query?: {
    id: string;
    from: {
      id: number;
      first_name: string;
      username?: string;
    };
    message?: {
      message_id: number;
      chat: {
        id: number;
        type: string;
        first_name: string;
        username?: string;
      };
      text?: string;
    };
    data: string;
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
 */
export async function handleTelegramWebhook(req: Request, res: Response) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      logger.error('[TelegramWebhook] TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(500).json({ success: false, error: 'Bot token not configured' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    const update = req.body as TelegramUpdate;
    
    if (!update) {
      logger.error('[TelegramWebhook] –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      return res.status(400).json({ success: false, error: 'Empty update received' });
    }
    
    logger.debug('[TelegramWebhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(update));
    
    // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    res.status(200).json({ success: true });
    
    // –î–∞–ª—å—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    processUpdate(update).catch(error => {
      logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    });
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    return res.status(500).json({ success: false, error: 'Internal server error' });
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
 */
async function processUpdate(update: TelegramUpdate): Promise<void> {
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (update.message) {
      const { message } = update;
      const chatId = message.chat.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
      if (message.text && message.entities && message.entities.some(e => e.type === 'bot_command')) {
        await handleCommand(message.text, chatId, message.from.id);
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (message.text) {
        await handleTextMessage(message.text, chatId, message.from.id);
        return;
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (callback_query)
    if (update.callback_query) {
      const { callback_query } = update;
      const chatId = callback_query.message?.chat.id;
      
      if (chatId) {
        await handleCallbackQuery(callback_query.data, chatId, callback_query.from.id, callback_query.id);
        return;
      }
    }
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞
 */
async function handleCommand(text: string, chatId: number, userId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã (—É–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª / –∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞)
    const command = text.split(' ')[0].substring(1).toLowerCase();
    
    logger.debug(`[TelegramWebhook] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    switch (command) {
      case 'start':
        await handleStartCommand(chatId, userId);
        break;
      case 'help':
        await handleHelpCommand(chatId);
        break;
      case 'deposit':
        await handleDepositCommand(chatId);
        break;
      case 'withdraw':
        await handleWithdrawCommand(chatId);
        break;
      case 'referral':
        await handleReferralCommand(chatId);
        break;
      default:
        await telegramBot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
    }
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function handleTextMessage(text: string, chatId: number, userId: number): Promise<void> {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await telegramBot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.');
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
 */
async function handleCallbackQuery(data: string, chatId: number, userId: number, queryId: string): Promise<void> {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ answerCallbackQuery —á–µ—Ä–µ–∑ sendMessage, —Ç–∞–∫ –∫–∞–∫ callApi –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    await telegramBot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 */
async function handleStartCommand(chatId: number, userId: number): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const appUrl = process.env.MINI_APP_URL || 'https://t.me/UniFarming_Bot/UniFarm';
    
    const welcomeText = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm!

UniFarm - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ UNI —Ç–æ–∫–µ–Ω–æ–≤.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å UniFarm" –Ω–∏–∂–µ.`;
    
    await telegramBot.sendMessage(chatId, welcomeText, {
      parse_mode: 'Markdown',
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm', web_app: { url: appUrl } }]
        ]
      })
    });
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
 */
async function handleHelpCommand(chatId: number): Promise<void> {
  try {
    const helpText = `
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UniFarm
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/deposit - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
/withdraw - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

–î–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é.`;
    
    await telegramBot.sendMessage(chatId, helpText, {
      parse_mode: 'Markdown'
    });
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã help:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /deposit
 */
async function handleDepositCommand(chatId: number): Promise<void> {
  try {
    const depositText = `
*–í–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞*

–î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ UniFarm:

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é "–û—Ç–∫—Ä—ã—Ç—å UniFarm"
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–î–µ–ø–æ–∑–∏—Ç"
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏ –ø–µ—Ä–∏–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 10 UNI`;
    
    await telegramBot.sendMessage(chatId, depositText, {
      parse_mode: 'Markdown'
    });
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã deposit:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /withdraw
 */
async function handleWithdrawCommand(chatId: number): Promise<void> {
  try {
    const withdrawText = `
*–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*

–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ UniFarm:

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é "–û—Ç–∫—Ä—ã—Ç—å UniFarm"
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ë–∞–ª–∞–Ω—Å"
3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–≤–µ—Å—Ç–∏"
4. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1 UNI`;
    
    await telegramBot.sendMessage(chatId, withdrawText, {
      parse_mode: 'Markdown'
    });
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã withdraw:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /referral
 */
async function handleReferralCommand(chatId: number): Promise<void> {
  try {
    const referralText = `
*–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ UniFarm –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:

- 10% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
- 5% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
- 2.5% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é "–û—Ç–∫—Ä—ã—Ç—å UniFarm"
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–†–µ—Ñ–µ—Ä–∞–ª—ã"
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏`;
    
    await telegramBot.sendMessage(chatId, referralText, {
      parse_mode: 'Markdown'
    });
  } catch (error) {
    logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã referral:', error);
  }
}