/**
 * –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
 * –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä -> —Å–µ—Ä–≤–∏—Å -> —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏
 * –ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É. –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏
 * –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞, –≤—Å–µ —ç—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤
 * –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª routes.ts
 */

import express, { Express, Request, Response, NextFunction, RequestHandler } from "express";

// –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
import { SessionController } from './controllers/sessionController';
import { UserController } from './controllers/userController';
import { getDbEventManager } from './utils/db-events';
import { statusPageHandler } from './utils/status-page';
import { TransactionController } from './controllers/transactionController';
import { MissionControllerFixed } from './controllers/missionControllerFixed';
import { ReferralController } from './controllers/referralControllerConsolidated';
import { BoostController } from './controllers/boostControllerConsolidated';
import { TonBoostController } from './controllers/tonBoostControllerConsolidated';
import { WalletController } from './controllers/walletControllerConsolidated';
import { DailyBonusController } from './controllers/dailyBonusControllerConsolidated';
import { UniFarmingController } from './controllers/UniFarmingController';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
import telegramRouter from './telegram/routes';
import { telegramBot } from './telegram/bot';
import { isTelegramBotInitialized } from './telegram/globalState';
import logger from './utils/logger';
import { createSafeHandler, createRouteSafely } from './utils/express-helpers';

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
import adminRouter from './api/admin/index';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
import { requireAdminAuth, logAdminAction } from './middleware/adminAuth';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞
import statusRouter from './routes/status';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º webhook –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
import adminWebhookHandler from './api/admin/webhook';

import { healthMonitor } from './utils/healthMonitor';
import OptimizedBackgroundService from './services/optimizedBackgroundService';
import { performanceMonitorMiddleware, errorMonitorMiddleware } from './middleware/performance-monitor';

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Express
 * @param app –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
 */
export async function registerNewRoutes(app: Express): Promise<void> {
  logger.info('[NewRoutes] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  async function generateUniqueRefCode(): Promise<string> {
    const { queryWithRetry } = await import('./db-unified');
    
    for (let attempt = 0; attempt < 10; attempt++) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      let refCode = '';
      for (let i = 0; i < 8; i++) {
        refCode += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      const existing = await queryWithRetry(
        'SELECT id FROM users WHERE ref_code = $1 LIMIT 1',
        [refCode]
      );
      
      if (!existing || existing.length === 0) {
        return refCode;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
    return `REF${Date.now().toString(36).toUpperCase()}`;
  }

  // –ö–†–ò–¢–ò–ß–ù–û: –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ä–æ–±–æ—á–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º—ñ—Å—ñ–π
  try {
    const simpleMissionsRouter = await import('./routes/simple-missions');
    app.use('/', simpleMissionsRouter.default || simpleMissionsRouter);
    logger.info('[NewRoutes] ‚úÖ –ü—Ä–æ—Å—Ç–∏–π –º–∞—Ä—à—Ä—É—Ç –º—ñ—Å—ñ–π –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
  } catch (error) {
    logger.warn('[NewRoutes] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å simple-missions:', error.message);
  }

  // –ö–†–ò–¢–ò–ß–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–∏—Å—Å–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º MissionControllerFixed)
  app.get('/api/missions', safeHandler(async (req, res) => {
    try {
      logger.info('[NewRoutes] üöÄ –ó–∞–ø—Ä–æ—Å –º–∏—Å—Å–∏–π —á–µ—Ä–µ–∑ /api/missions');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω
      if (!MissionControllerFixed || typeof MissionControllerFixed.getActiveMissions !== 'function') {
        logger.error('[NewRoutes] ‚ùå MissionControllerFixed –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return res.status(500).json({
          success: false,
          error: 'Mission controller not available',
          debug: 'MissionControllerFixed not loaded'
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–∏—Å—Å–∏–π
      return await MissionControllerFixed.getActiveMissions(req, res);

    } catch (error) {
      logger.error('[NewRoutes] ‚ùå –û—à–∏–±–∫–∞ /api/missions:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to fetch missions',
        details: error instanceof Error ? error.message : String(error)
      });
    }
  }));

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
  try {
    telegramBot.initialize()
      .then((initialized) => {
        if (initialized) {
          logger.info('[Telegram] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
          logger.error('[Telegram] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
        }
      })
      .catch((error) => {
        logger.error('[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      });
  } catch (error) {
    logger.error('[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
  app.use('/api/telegram', telegramRouter);
  logger.info('[NewRoutes] –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

  // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º default export
  try {
    const quickDbTestModule = await import('./api/quick-db-test');
    const quickDbTest = quickDbTestModule.default || quickDbTestModule.quickDbTest;
    
    if (typeof quickDbTest === 'function') {
      app.get('/api/quick-db-test', safeHandler(quickDbTest));
      logger.info('[NewRoutes] ‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ë–î –¥–æ–±–∞–≤–ª–µ–Ω: GET /api/quick-db-test');
    } else {
      throw new Error('quickDbTest is not a function');
    }
  } catch (error) {
    logger.error('[NewRoutes] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è quick-db-test:', error);
    app.get('/api/quick-db-test', safeHandler(async (req, res) => {
      res.json({
        success: false,
        error: 'quick-db-test module not available',
        fallback: true,
        timestamp: new Date().toISOString(),
        details: error.message
      });
    }));
  }

  // –û–¢–õ–ê–î–û–ß–ù–´–ô –ú–ê–†–®–†–£–¢: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.get('/api/debug/routes-status', safeHandler(async (req, res) => {
    try {
      const routesStatus = {
        timestamp: new Date().toISOString(),
        routes: {
          missions: {
            controller: !!MissionControllerFixed,
            method: typeof MissionControllerFixed?.getActiveMissions,
            registered: true
          },
          quickDbTest: {
            available: true,
            registered: true
          },
          health: {
            registered: true
          }
        },
        imports: {
          MissionControllerFixed: !!MissionControllerFixed,
          logger: !!logger
        }
      };

      res.json({
        success: true,
        data: routesStatus,
        message: 'Routes debug information'
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }));
  logger.info('[NewRoutes] ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω: GET /api/debug/routes-status');

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  app.use('/api/admin', adminRouter);
  logger.info('[NewRoutes] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

  // –£–î–ê–õ–ï–ù–û: webhook —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ server/index.ts —Å —É–º–Ω—ã–º –±–æ—Ç–æ–º

  // Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞ (health check)
  const healthCheckHandler: RequestHandler = async (req: Request, res: Response): Promise<void> => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    let dbStatus: 'unknown' | 'connected' | 'error' | 'memory_fallback' | 'configured' | 'disconnected' = 'unknown';
    let dbDetails: Record<string, any> = {};

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ db-unified
      const { getConnectionStatus } = await import('./db-unified');
      const connectionInfo = getConnectionStatus();

      // –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
      const db = app.locals.storage;

      if (connectionInfo.isMemoryMode) {
        dbStatus = 'memory_fallback';
        dbDetails = {
          provider: 'memory',
          reason: 'Database connection failed, using memory fallback',
          tables: []
        };
      } else if (connectionInfo.isConnected && connectionInfo.connectionName) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if (db && typeof db.executeRawQuery === 'function') {
          try {
            const startTime = Date.now();
            await db.executeRawQuery('SELECT 1');
            const queryTime = Date.now() - startTime;

            dbStatus = 'connected';
            dbDetails = {
              provider: connectionInfo.connectionName,
              responseTime: `${queryTime}ms`,
              poolStatus: 'active'
            };
          } catch (queryError) {
            dbStatus = 'error';
            dbDetails = {
              provider: connectionInfo.connectionName,
              error: queryError instanceof Error ? queryError.message : String(queryError),
              poolStatus: 'failing'
            };
          }
        } else {
          dbStatus = 'configured';
          dbDetails = {
            provider: connectionInfo.connectionName,
            warning: 'DB configured but executeRawQuery not available'
          };
        }
      } else {
        dbStatus = 'disconnected';
        dbDetails = {
          error: 'No active database connection',
          memoryMode: connectionInfo.isMemoryMode
        };
      }
    } catch (error) {
      dbStatus = 'error';
      dbDetails = {
        error: error instanceof Error ? error.message : String(error)
      };
      console.error('[HealthCheck] Database connection error:', error);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω Telegram –±–æ—Ç–∞
    let telegramStatus = 'not_initialized';
    let telegramDetails = {};

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
      if (isTelegramBotInitialized()) {
        telegramStatus = 'initialized';
        telegramDetails = {
          webhookUrl: process.env.TELEGRAM_WEBHOOK_URL || 'not_set',
          miniAppUrl: process.env.MINI_APP_URL || 'not_set'
        };
      } else {
        telegramDetails = {
          reason: 'Bot not initialized or initialization failed',
          webhookConfigured: !!process.env.TELEGRAM_WEBHOOK_URL
        };
      }
    } catch (error) {
      telegramStatus = 'error';
      telegramDetails = {
        error: error instanceof Error ? error.message : String(error)
      };
      console.error('[HealthCheck] Telegram status check error:', error);
    }

    res.status(200).json({
      status: 'ok',
      server: 'up',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      db: {
        status: dbStatus,
        ...dbDetails,
        recentEvents: getDbEventManager().getHistory(5)
      },
      telegram: {
        status: telegramStatus,
        ...telegramDetails
      },
      environment: {
        nodeEnv: process.env.NODE_ENV || 'not_set',
        appUrl: process.env.APP_URL || 'not_set'
      },
      memoryUsage: {
        rss: Math.round(process.memoryUsage().rss / 1024 / 1024) + 'MB',
        heapTotal: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + 'MB',
        heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB'
      }
    });
  };

  app.get('/api/health', healthCheckHandler);

  // API endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
  app.post('/api/register/telegram', createSafeHandler(async (req: Request, res: Response): Promise<void> => {
    try {
      console.log('[TG API] üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram:', req.body);

      const { AuthController } = await import('./controllers/authController');
      await AuthController.authenticateTelegram(req, res, () => {});

    } catch (error) {
      console.error('[TG API] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          details: error instanceof Error ? error.message : String(error)
        });
      }
    }
  }));

  // Endpoint –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.post('/api/db/reconnect', requireAdminAuth, logAdminAction('DB_RECONNECT'), async (req, res) => {
    try {
      const db = app.locals.storage;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ db-unified
      const { getConnectionStatus } = await import('./db-unified');
      const connectionInfo = getConnectionStatus();

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π DB –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
      const recentDbEvents = getDbEventManager().getHistory(10);

      // –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      let reconnectResult = false;
      let errorMessage = '';

      try {
        if (db && typeof db.connectionManager?.resetConnection === 'function') {
          // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          logger.info('[DB Manager] Attempting database reconnection...');
          reconnectResult = await db.connectionManager.resetConnection();
        } else {
          errorMessage = 'Database connection manager not available';
        }
      } catch (error) {
        errorMessage = error instanceof Error ? error.message : String(error);
        logger.error(`[DB Manager] Reconnection error: ${errorMessage}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ db-unified
      const newConnectionInfo = getConnectionStatus();

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const newDbEvents = getDbEventManager().getHistory(5);

      return res.json({
        success: true,
        reconnected: reconnectResult,
        previous: connectionInfo,
        current: newConnectionInfo,
        error: errorMessage || undefined,
        events: {
          before: recentDbEvents,
          after: newDbEvents,
          latest: getDbEventManager().getLastEvent()
        },
        diagnostics: {
          timeOfRequest: new Date().toISOString(),
          memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024,
          uptime: process.uptime()
        }
      });
    } catch (error) {
      logger.error('[DB Manager] Error handling reconnection request:', error);
      return res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö DB (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  app.get('/api/db/events', requireAdminAuth, logAdminAction('DB_EVENTS_VIEW'), async (req, res) => {
    try {

      const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 20;
      const events = getDbEventManager().getHistory(limit);

      return res.json({
        success: true,
        events,
        count: events.length,
        latest: getDbEventManager().getLastEvent(),
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      logger.error('[DB Events] Error handling events request:', error);
      return res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // –¢–∏–ø—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  type RouteHandler = (req: Request, res: Response, next: NextFunction) => Promise<any> | any;

  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const safeHandler = (handler: any): RequestHandler => async (req, res, next) => {
    try {
      if (typeof handler === 'function') {
        await handler(req, res, next);
      } else {
        logger.error('[Routes] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', handler);
        if (!res.headersSent) {
          res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫'
          });
        }
      }
    } catch (error) {
      logger.error('[Routes] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞:', error);

      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
          message: error instanceof Error ? error.message : String(error)
        });
      } else {
        next(error);
      }
    }
  };

  // CRITICAL: –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–∏—Å—Å–∏–π
  app.get('/api/v2/missions/active', safeHandler(MissionControllerFixed.getActiveMissions));
  app.get('/api/v2/user-missions', safeHandler(MissionControllerFixed.getUserCompletedMissions));
  app.post('/api/v2/missions/complete', safeHandler(MissionControllerFixed.completeMission));
  logger.info('[NewRoutes] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –º–∏—Å—Å–∏–π');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞
  app.use('/status', statusRouter);

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–π
  if (typeof SessionController.restoreSession === 'function') {
    app.post('/api/v2/session/restore', safeHandler(SessionController.restoreSession));
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (typeof UserController.getUserById === 'function') {
    app.get('/api/v2/users/:id', safeHandler(UserController.getUserById));
  }

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ê–†–®–†–£–¢ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id (–Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞)
  if (typeof UserController.getUserByGuestId === 'function') {
    app.get('/api/v2/users/guest/:guest_id', (req, res, next) => {
      console.log(`[routes] GET /api/v2/users/guest/${req.params.guest_id}`);
      next();
    }, safeHandler(UserController.getUserByGuestId));
    logger.info('[NewRoutes] ‚úì –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ guest_id –¥–æ–±–∞–≤–ª–µ–Ω: GET /api/v2/users/guest/:guest_id');
  }

    // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è guest –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ UserController.getUserByGuestId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (typeof UserController.getUserByGuestId === 'function') {
    app.get('/api/v2/users/guest/:guest_id', safeHandler(UserController.getUserByGuestId));
    logger.info('[NewRoutes] ‚úì –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id: GET /api/v2/users/guest/:guest_id');
  } else {
    logger.warn('[NewRoutes] ‚ö†Ô∏è  UserController.getUserByGuestId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –º–∞—Ä—à—Ä—É—Ç GET /api/v2/users/guest/:guest_id –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω');
  }

  // –ö–†–ò–¢–ò–ß–ù–ò–ô endpoint –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  app.get('/api/v2/me', async (req: any, res: any) => {
    try {
      console.log('[API] /api/v2/me - –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');

      // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const userId = req.query.user_id || req.headers['x-telegram-user-id'];
      const guestId = req.query.guest_id || req.headers['x-guest-id'];

      console.log('[API] /api/v2/me - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { userId, guestId });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º unified database connection
      const { queryWithRetry } = await import('./db-unified');

      // –ï—Å–ª–∏ –µ—Å—Ç—å user_id, –∏—â–µ–º –ø–æ –Ω–µ–º—É
      if (userId) {
        const result = await queryWithRetry(
          'SELECT * FROM users WHERE user_id = $1',
          [userId]
        );

        if (result && result.length > 0) {
          const user = result[0];
          return res.status(200).json({
            success: true,
            data: {
              id: user.user_id,
              username: user.username || user.first_name || '–ê–Ω–æ–Ω–∏–º',
              balance: user.balance || '0',
              uni_balance: user.uni_balance || '0',
              ton_balance: user.ton_balance || '0',
              total_earned: user.total_earned || '0',
              ref_code: user.ref_code,
              guest_id: user.guest_id,
              registration_date: user.registration_date
            }
          });
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å guest_id, –∏—â–µ–º –ø–æ –Ω–µ–º—É
      if (guestId) {
        const result = await queryWithRetry(
          'SELECT * FROM users WHERE guest_id = $1',
          [guestId]
        );

        if (result && result.length > 0) {
          const user = result[0];
          return res.status(200).json({
            success: true,
            data: {
              id: user.user_id,
              username: user.username || user.first_name || '–ê–Ω–æ–Ω–∏–º',
              balance: user.balance || '0',
              uni_balance: user.uni_balance || '0',
              ton_balance: user.ton_balance || '0',
              total_earned: user.total_earned || '0',
              ref_code: user.ref_code,
              guest_id: user.guest_id,
              registration_date: user.registration_date
            }
          });
        }
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
      console.log('[API] /api/v2/me - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        code: 'USER_NOT_FOUND',
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ guest_id'
      });

    } catch (error) {
      console.error('[API] /api/v2/me - –û—à–∏–±–∫–∞:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error instanceof Error ? error.message : String(error)
      });
    }
  });
  logger.info('[NewRoutes] ‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π endpoint /api/v2/me –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');

  logger.info('[NewRoutes] ‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π endpoint /api/v2/wallet/balance –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ WalletController');

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ guest_id
  app.post('/api/register/telegram', async (req: any, res: any) => {
    try {
      console.log('[API] POST /api/register/telegram - –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      console.log('[API] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);

      const { user_id, username, first_name, guest_id, ref_code } = req.body;

      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ user_id, –Ω–∏ guest_id - –æ—à–∏–±–∫–∞
      if (!user_id && !guest_id) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º user_id –∏–ª–∏ guest_id –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
        });
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      let existingUser = null;

      if (user_id) {
        const existing = await queryWithRetry('SELECT * FROM users WHERE user_id = $1', [user_id]);
        existingUser = existing && existing.length > 0 ? existing[0] : null;
      }

      if (!existingUser && guest_id) {
        const existing = await queryWithRetry('SELECT * FROM users WHERE guest_id = $1', [guest_id]);
        existingUser = existing && existing.length > 0 ? existing[0] : null;
      }

      if (existingUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        console.log('[API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', existingUser.user_id || existingUser.guest_id);

        return res.status(200).json({
          success: true,
          data: {
            id: existingUser.user_id,
            username: existingUser.username || existingUser.first_name || '–ê–Ω–æ–Ω–∏–º',
            balance: existingUser.balance || '0',
            uni_balance: existingUser.uni_balance || '0',
            ton_balance: existingUser.ton_balance || '0',
            total_earned: existingUser.total_earned || '0',
            ref_code: existingUser.ref_code,
            guest_id: existingUser.guest_id,
            registration_date: existingUser.registration_date
          },
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ref_code –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newRefCode = await generateUniqueRefCode();

      let result;

      if (user_id) {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
        result = await queryWithRetry(`
          INSERT INTO users (user_id, username, first_name, ref_code, guest_id, registration_date, balance, uni_balance, ton_balance)
          VALUES ($1, $2, $3, $4, $5, NOW(), '1000', '0', '0')
          RETURNING *
        `, [user_id, username, first_name, newRefCode, guest_id]);
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ guest_id
        result = await queryWithRetry(`
          INSERT INTO users (guest_id, username, first_name, ref_code, registration_date, balance, uni_balance, ton_balance)
          VALUES ($1, $2, $3, $4, NOW(), '1000', '0', '0')
          RETURNING *
        `, [guest_id, username || '–ì–æ—Å—Ç—å', first_name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', newRefCode]);
      }

      if (!result || result.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      const user = result[0];

      // –ï—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
      if (ref_code && ref_code !== user.ref_code) {
        try {
          await queryWithRetry(`
            UPDATE users 
            SET parent_ref_code = $1 
            WHERE (user_id = $2 OR guest_id = $3) AND parent_ref_code IS NULL
          `, [ref_code, user_id, guest_id]);

          console.log('[API] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω:', ref_code);
        } catch (refError) {
          console.error('[API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', refError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
        }
      }

      res.status(200).json({
        success: true,
        data: {
          id: user.user_id,
          username: user.username || user.first_name || '–ê–Ω–æ–Ω–∏–º',
          balance: user.balance || '1000',
          uni_balance: user.uni_balance || '0',
          ton_balance: user.ton_balance || '0',
          total_earned: user.total_earned || '0',
          ref_code: user.ref_code,
          guest_id: user.guest_id,
          registration_date: user.registration_date
        },
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      });

    } catch (error) {
      console.error('[API] POST /api/register/telegram - –û—à–∏–±–∫–∞:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        message: error instanceof Error ? error.message : String(error)
      });
    }
  });

  // [TG REGISTRATION FIX] –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
  if (typeof UserController.createUserFromTelegram === 'function') {
    app.post('/api/register/telegram', safeHandler(UserController.createUserFromTelegram));
    logger.info('[NewRoutes] ‚úì Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: POST /api/register/telegram');
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  if (typeof TransactionController.getUserTransactions === 'function') {
    app.get('/api/v2/users/:userId/transactions', safeHandler(TransactionController.getUserTransactions));
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (MissionControllerFixed) {
    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç missions/active —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—à–µ

    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç user-missions —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—à–µ

    if (typeof MissionControllerFixed.getMissionsWithCompletion === 'function') {
      app.get('/api/v2/missions/with-completion', safeHandler(MissionControllerFixed.getMissionsWithCompletion));
    }

    if (typeof MissionControllerFixed.checkMissionCompletion === 'function') {
      app.get('/api/v2/missions/check/:userId/:missionId', safeHandler(MissionControllerFixed.checkMissionCompletion));
    }

    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç missions/complete —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—à–µ

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ê–†–®–†–£–¢: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π endpoint –¥–ª—è frontend
    if (typeof MissionControllerFixed.getUserCompletedMissions === 'function') {
      app.get('/api/v2/missions/user-completed', safeHandler(MissionControllerFixed.getUserCompletedMissions));
      logger.info('[NewRoutes] ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç: GET /api/v2/missions/user-completed');
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (ReferralController) {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (GET –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
    if (typeof ReferralController.generateReferralCode === 'function') {
      app.get('/api/v2/referral/code', safeHandler(ReferralController.generateReferralCode.bind(ReferralController)));
      // POST –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
      app.post('/api/v2/referral/generate-code', safeHandler(ReferralController.generateReferralCode.bind(ReferralController)));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if (typeof ReferralController.getReferralTree === 'function') {
      app.get('/api/v2/referral/tree', safeHandler(ReferralController.getReferralTree.bind(ReferralController)));
      app.get('/api/v2/referrals/tree', safeHandler(ReferralController.getReferralTree.bind(ReferralController)));
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó)
    if (typeof ReferralController.getReferralStats === 'function') {
      app.get('/api/v2/referral/stats', safeHandler(ReferralController.getReferralStats.bind(ReferralController)));
      app.get('/api/v2/referrals/stats', safeHandler(ReferralController.getReferralStats.bind(ReferralController)));
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if (ReferralController && 'applyReferralCode' in ReferralController && 
        typeof (ReferralController as any).applyReferralCode === 'function') {
      app.post('/api/v2/referrals/apply', safeHandler((ReferralController as any).applyReferralCode.bind(ReferralController)));
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (DailyBonusController) {
    if (typeof DailyBonusController.getDailyBonusStatus === 'function') {
      app.get('/api/v2/daily-bonus/status', safeHandler(DailyBonusController.getDailyBonusStatus));
    }

    if (typeof DailyBonusController.claimDailyBonus === 'function') {
      app.post('/api/v2/daily-bonus/claim', safeHandler(DailyBonusController.claimDailyBonus));
    }

    if (typeof DailyBonusController.getStreakInfo === 'function') {
      app.get('/api/v2/daily-bonus/streak-info', safeHandler(DailyBonusController.getStreakInfo));
    }
  }

  // ===== USER REFCODE GENERATION =====
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post('/api/v2/users/generate-refcode', async (req: Request, res: Response, next: NextFunction) => {
    try {
      const userId = req.body.user_id;

      if (!userId) {
        const { adaptedSendError } = await import('./utils/apiResponseAdapter');
        adaptedSendError(res, 'User ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400);
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ userService
      const { userService } = await import('./services');
      const refCode = await userService.generateRefCode();

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
      const updatedUser = await userService.updateUserRefCode(userId, refCode);

      if (!updatedUser) {
        const { adaptedSendError } = await import('./utils/apiResponseAdapter');
        adaptedSendError(res, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 500);
        return;
      }

      const { adaptedSendSuccess } = await import('./utils/apiResponseAdapter');
      adaptedSendSuccess(res, updatedUser, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 200);
    } catch (error) {
      next(error);
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (WalletController) {
    if (typeof WalletController.getWalletBalance === 'function') {
      app.get('/api/v2/wallet/balance', safeHandler(WalletController.getWalletBalance.bind(WalletController)));
    }

    if (typeof WalletController.connectWallet === 'function') {
      app.post('/api/v2/wallet/connect', safeHandler(WalletController.connectWallet.bind(WalletController)));
    }

    if (typeof WalletController.disconnectWallet === 'function') {
      app.post('/api/v2/wallet/disconnect', safeHandler(WalletController.disconnectWallet.bind(WalletController)));
    }

    if (typeof WalletController.getTransactions === 'function') {
      app.get('/api/v2/wallet/transactions', safeHandler(WalletController.getTransactions.bind(WalletController)));
    }

    if (typeof WalletController.withdrawUni === 'function') {
      app.post('/api/v2/wallet/withdraw', safeHandler(WalletController.withdrawUni.bind(WalletController)));
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è TON –±—É—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (TonBoostController) {
    if (typeof TonBoostController.getTonBoostPackages === 'function') {
      app.get('/api/v2/ton-farming/boosts', safeHandler(TonBoostController.getTonBoostPackages));
    }

    if (typeof TonBoostController.getUserTonBoosts === 'function') {
      app.get('/api/v2/ton-farming/active', safeHandler(TonBoostController.getUserTonBoosts));
    }

    if (typeof TonBoostController.purchaseTonBoost === 'function') {
      app.post('/api/v2/ton-farming/purchase', safeHandler(TonBoostController.purchaseTonBoost));
    }

    if (typeof TonBoostController.confirmExternalPayment === 'function') {
      app.post('/api/v2/ton-farming/confirm-payment', safeHandler(TonBoostController.confirmExternalPayment));
    }

    if (typeof TonBoostController.getUserTonFarmingInfo === 'function') {
      app.get('/api/v2/ton-farming/info', safeHandler(TonBoostController.getUserTonFarmingInfo));
    }

    if (typeof TonBoostController.calculateAndUpdateTonFarming === 'function') {
      app.post('/api/v2/ton-farming/update', safeHandler(TonBoostController.calculateAndUpdateTonFarming));
    }
  }

  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—É—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  if (BoostController) {
    if (typeof BoostController.getBoostPackages === 'function') {
      app.get('/api/v2/boosts', safeHandler(BoostController.getBoostPackages));
    }

    if (typeof BoostController.getUserActiveBoosts === 'function') {
      app.get('/api/v2/boosts/active', safeHandler(BoostController.getUserActiveBoosts));
    }

    if (typeof BoostController.purchaseBoost === 'function') {
      app.post('/api/v2/boosts/purchase', safeHandler(BoostController.purchaseBoost));
    }
  }

  // === UNI FARMING –ú–ê–†–®–†–£–¢–´ ===
  // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ (v1 –∏ v2 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  if (UniFarmingController) {
    if (typeof UniFarmingController.getStatus === 'function') {
      // v1 –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      app.get('/api/uni-farming/status', safeHandler(UniFarmingController.getStatus));
      // v2 –º–∞—Ä—à—Ä—É—Ç
      app.get('/api/v2/uni-farming/status', safeHandler(UniFarmingController.getStatus));
      logger.info('[NewRoutes] ‚úì UNI Farming status –º–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï API –ò–ó REDMAP
    if (typeof UniFarmingController.purchaseUniFarming === 'function') {
      app.post('/api/v2/uni-farming/purchase', safeHandler(UniFarmingController.purchaseUniFarming));
      logger.info('[NewRoutes] ‚úì UNI Farming purchase –º–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω: POST /api/v2/uni-farming/purchase');
    }

    if (typeof UniFarmingController.withdrawUniFarming === 'function') {
      app.post('/api/v2/uni-farming/withdraw', safeHandler(UniFarmingController.withdrawUniFarming));
      logger.info('[NewRoutes] ‚úì UNI Farming withdraw –º–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω: POST /api/v2/uni-farming/withdraw');
    }
  }

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ guest_id
  app.post('/api/v2/register/auto', safeHandler(async (req, res) => {
    try {
      const { guest_id, ref_code } = req.body;

      if (!guest_id) {
        return res.status(400).json({
          success: false,
          error: 'guest_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }

      console.log(`[AUTO REGISTER] –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å guest_id: ${guest_id}, ref_code: ${ref_code || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { userService } = await import('./services');
      const existingUser = await userService.getUserByGuestId(guest_id);
      if (existingUser) {
        console.log(`[AUTO REGISTER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID=${existingUser.id}`);
        return res.json({
          success: true,
          data: existingUser,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await userService.createUser({
        guest_id: guest_id,
        username: `guest_${Date.now()}`,
        ref_code: await userService.generateRefCode(),
        telegram_id: null,
        wallet: null,
        ton_wallet_address: null,
        parent_ref_code: ref_code || null
      });

      console.log(`[AUTO REGISTER] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${newUser.id}, guest_id=${newUser.guest_id}`);

      res.status(201).json({
        success: true,
        data: newUser,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });
    } catch (error) {
      console.error('[AUTO REGISTER] –û—à–∏–±–∫–∞:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        details: error instanceof Error ? error.message : String(error)
      });
    }
  }));

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö guest –∑–∞–ø—Ä–æ—Å–æ–≤ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
  app.post('/api/register/guest', safeHandler(async (req, res) => {
    res.status(410).json({
      success: false,
      error: 'Guest —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ Telegram Mini App.',
      redirect: '/api/register/telegram'
    });
  }));

  // –ö–†–ò–¢–ò–ß–ù–ò–ô ENDPOINT: –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram initData
  app.post('/api/auth/validate-init-data', safeHandler(async (req: any, res: any) => {
    try {
      console.log('[Auth] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é initData');
      const { initData } = req.body;

      if (!initData) {
        return res.status(400).json({
          success: false,
          error: 'initData –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'
        });
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é BOT_TOKEN
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
      return res.status(200).json({
        success: true,
        valid: true,
        message: 'initData –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞'
      });
    } catch (error) {
      console.error('[Auth] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData:', error);
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
      });
    }
  }));

  // –ö–†–ò–¢–ò–ß–ù–´–ô ENDPOINT: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ guest_id
  app.post('/api/register/guest', safeHandler(async (req: any, res: any) => {
    try {
      console.log('[Auth] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ guest_id:', req.body);
      const { guest_id, ref_code } = req.body;

      if (!guest_id) {
        return res.status(400).json({
          success: false,
          error: 'guest_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º authService
      const { authService } = await import('./services');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º authService –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await authService.registerUser({
        guest_id,
        ref_code,
        telegram_id: null,
        username: `guest_${guest_id.slice(-8)}`,
        first_name: 'Guest User'
      });

      return res.status(201).json({
        success: true,
        user: newUser,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      });
    } catch (error) {
      console.error('[Auth] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ guest:', error);
      return res.status(500).json({
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      });
    }
  }));

  // –ö–†–ò–¢–ò–ß–ù–´–ô ENDPOINT: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id
  app.get('/api/v2/users/guest/:guest_id', safeHandler(async (req: any, res: any) => {
    try {
      console.log('[Routes] –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id:', req.params.guest_id);
      const { guest_id } = req.params;
      const { user_id } = req.query;

      if (!guest_id) {
        return res.status(400).json({
          success: false,
          error: 'guest_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }

      const connectionInfo = await getConnectionInfo();
      console.log('[Routes] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ë–î:', connectionInfo);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π userServiceInstance —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ESM –∏–º–ø–æ—Ä—Ç–æ–º
      const { default: userServiceInstance } = await import('./services/userServiceInstance');
      const user = await userServiceInstance.findByGuestId(guest_id);
      console.log('[Routes] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);

      if (user) {
        res.json({
          success: true,
          data: user,
          source: 'database'
        });
      } else {
        console.log('[Routes] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404');
        res.status(404).json({
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          guest_id: guest_id
        });
      }
    } catch (error) {
      console.error('[Routes] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ guest_id:', error);
      res.status(500).json({
        success: false,
        error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }));

  // –ö–†–ò–¢–ò–ß–ù–û: –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ä–æ–±–æ—á–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –º—ñ—Å—ñ–π
  // –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ async –±–ª–æ–∫ –≤—ã—à–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è await

  logger.info('[NewRoutes] ‚úì –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
  healthMonitor.updateMetrics();
  healthMonitor.setDbStatus(true);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ –≤—Å–µ–º API –º–∞—Ä—à—Ä—É—Ç–∞–º
  app.use('/api', performanceMonitorMiddleware);
  app.use('/api', errorMonitorMiddleware);

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const { getMetrics, resetMetrics } = await import('./api/metrics');
  app.get('/api/metrics', getMetrics);
  app.post('/api/metrics/reset', resetMetrics);

  // Endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
  app.post('/api/system/force-recovery', requireAdminAuth, logAdminAction('FORCE_DB_RECOVERY'), async (req, res) => {
    try {
      logger.info('[System] Force recovery requested by admin');

      const { autoRecoverySystem } = await import('./utils/auto-recovery-system');
      const { recoverDatabaseConnection } = await import('./utils/db-auto-recovery');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      const recoveryResult = await recoverDatabaseConnection();
      const autoRecoveryStats = autoRecoverySystem.getRecoveryStats();

      res.json({
        success: true,
        recovery: recoveryResult,
        autoRecoveryStats,
        timestamp: new Date().toISOString(),
        message: recoveryResult.success ? 'Database recovery successful' : 'Database recovery failed'
      });

    } catch (error) {
      logger.error('[System] Force recovery error:', error);
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });
}