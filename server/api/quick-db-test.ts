
import { Request, Response } from 'express';

export async function quickDbTest(req: Request, res: Response) {
  try {
    console.log('[Quick DB Test] –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const { queryWithRetry } = await import('../db-unified');
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const startTime = Date.now();
    const result = await queryWithRetry('SELECT NOW() as current_time, 1 as test_value');
    const responseTime = Date.now() - startTime;
    
    console.log('[Quick DB Test] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', result);
    
    return res.status(200).json({
      success: true,
      data: {
        connectionTest: 'passed',
        responseTime: `${responseTime}ms`,
        currentTime: result[0]?.current_time,
        testValue: result[0]?.test_value
      },
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞'
    });
    
  } catch (error) {
    console.error('[Quick DB Test] –û—à–∏–±–∫–∞:', error);
    
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î',
      details: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    });
  }
}
import { Request, Response } from 'express';
import logger from '../utils/logger';

export async function quickDbTest(req: Request, res: Response): Promise<void> {
  try {
    logger.info('[QuickDbTest] üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ë–î');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const { testConnection } = await import('../db-connect-unified');
    const isConnected = await testConnection();
    
    if (isConnected) {
      res.status(200).json({
        success: true,
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString(),
        status: 'connected'
      });
    } else {
      res.status(503).json({
        success: false,
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        timestamp: new Date().toISOString(),
        status: 'disconnected'
      });
    }
  } catch (error) {
    logger.error('[QuickDbTest] ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      error: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    });
  }
}
