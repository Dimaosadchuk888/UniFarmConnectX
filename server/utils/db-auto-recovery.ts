
export interface DbAutoRecoveryConfig {
  initialBackoff: number;
  maxBackoff: number;
  backoffFactor: number;
  resetThreshold: number;
  maxConsecutiveFailures: number;
}

let recoveryConfig: DbAutoRecoveryConfig | null = null;
let currentBackoff = 0;
let consecutiveFailures = 0;
let lastSuccessTime = Date.now();
let recoveryTimer: NodeJS.Timeout | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
 */
export function initDbAutoRecovery(config: DbAutoRecoveryConfig): void {
  recoveryConfig = config;
  currentBackoff = config.initialBackoff;
  
  console.log('[DbAutoRecovery] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  console.log('[DbAutoRecovery] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
    initialBackoff: config.initialBackoff,
    maxBackoff: config.maxBackoff,
    backoffFactor: config.backoffFactor,
    resetThreshold: config.resetThreshold,
    maxConsecutiveFailures: config.maxConsecutiveFailures
  });
}

/**
 * –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î
 */
export function signalDbSuccess(): void {
  if (!recoveryConfig) return;
  
  const now = Date.now();
  const timeSinceLastSuccess = now - lastSuccessTime;
  
  // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
  if (timeSinceLastSuccess > recoveryConfig.resetThreshold) {
    consecutiveFailures = 0;
    currentBackoff = recoveryConfig.initialBackoff;
  }
  
  lastSuccessTime = now;
  
  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
  if (recoveryTimer) {
    clearTimeout(recoveryTimer);
    recoveryTimer = null;
  }
}

/**
 * –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –Ω–µ—É–¥–∞—á–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
 */
export function signalDbFailure(): void {
  if (!recoveryConfig) return;
  
  consecutiveFailures++;
  
  console.warn(`[DbAutoRecovery] ‚ùå –ù–µ—É–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î #${consecutiveFailures}`);
  
  // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥
  if (consecutiveFailures >= recoveryConfig.maxConsecutiveFailures) {
    console.error('[DbAutoRecovery] üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return;
  }
  
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  scheduleRecovery();
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
function scheduleRecovery(): void {
  if (!recoveryConfig || recoveryTimer) return;
  
  console.log(`[DbAutoRecovery] üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${currentBackoff}ms`);
  
  recoveryTimer = setTimeout(async () => {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ë–î
      const { testConnection } = await import('../db-connect-unified');
      const isConnected = await testConnection();
      
      if (isConnected) {
        console.log('[DbAutoRecovery] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        signalDbSuccess();
      } else {
        console.log('[DbAutoRecovery] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞');
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        currentBackoff = Math.min(
          currentBackoff * recoveryConfig!.backoffFactor,
          recoveryConfig!.maxBackoff
        );
        
        recoveryTimer = null;
        scheduleRecovery();
      }
    } catch (error) {
      console.error('[DbAutoRecovery] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
      currentBackoff = Math.min(
        currentBackoff * recoveryConfig!.backoffFactor,
        recoveryConfig!.maxBackoff
      );
      
      recoveryTimer = null;
      scheduleRecovery();
    }
  }, currentBackoff);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export function getRecoveryStatus() {
  return {
    isInitialized: recoveryConfig !== null,
    consecutiveFailures,
    currentBackoff,
    lastSuccessTime,
    isRecoveryActive: recoveryTimer !== null
  };
}
