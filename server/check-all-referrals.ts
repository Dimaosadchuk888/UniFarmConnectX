import { supabase } from '../core/supabase.js';

async function checkAllReferrals() {
  console.log('=== –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–û–í ===\n');
  
  try {
    // 1. –ü—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74 (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
    const { data: directReferrals, error: directError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('referred_by', 74);
      
    if (directError) throw directError;
    
    console.log(`üìä –ü–†–Ø–ú–´–ï –†–ï–§–ï–†–ê–õ–´ (1-–π —É—Ä–æ–≤–µ–Ω—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${directReferrals?.length || 0}\n`);
    
    // 2. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const { data: todayUsers, error: todayError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .gte('created_at', today.toISOString())
      .order('id', { ascending: true });
      
    if (todayError) throw todayError;
    
    console.log(`üìÖ –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–û–ó–î–ê–ù–ù–´–ï –°–ï–ì–û–î–ù–Ø:`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${todayUsers?.length || 0}\n`);
    
    // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    console.log(`üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ referred_by
    const referralStructure = new Map<number, number>();
    todayUsers?.forEach(user => {
      if (user.referred_by) {
        referralStructure.set(user.referred_by, (referralStructure.get(user.referred_by) || 0) + 1);
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π
    const topInviters = Array.from(referralStructure.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10);
      
    console.log('–¢–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π:');
    topInviters.forEach(([inviterId, count]) => {
      const inviter = todayUsers?.find(u => u.id === inviterId) || 
                      directReferrals?.find(u => u.id === inviterId);
      const inviterName = inviter?.username || (inviterId === 74 ? 'test_user_1752129840905 (User 74)' : `User ${inviterId}`);
      console.log(`- ${inviterName}: ${count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å test_ –∏–ª–∏ ref_ –≤ –∏–º–µ–Ω–∏
    const { data: testUsers, error: testError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .or('username.ilike.test_user_L%,username.ilike.ref_L%');
      
    if (!testError && testUsers) {
      console.log(`\nüß™ –¢–ï–°–¢–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:`);
      console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${testUsers.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
      const byLevel = new Map<string, number>();
      testUsers.forEach(user => {
        const match = user.username.match(/L(\d+)/);
        if (match) {
          const level = match[1];
          byLevel.set(level, (byLevel.get(level) || 0) + 1);
        }
      });
      
      console.log('\n–ü–æ —É—Ä–æ–≤–Ω—è–º:');
      Array.from(byLevel.entries())
        .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))
        .forEach(([level, count]) => {
          console.log(`- –£—Ä–æ–≤–µ–Ω—å ${level}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        });
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`- –ü—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É User 74: ${directReferrals?.length || 0}`);
    console.log(`- –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayUsers?.length || 0}`);
    console.log(`- –ò–∑ –Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö: ${testUsers?.length || 0}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkAllReferrals();