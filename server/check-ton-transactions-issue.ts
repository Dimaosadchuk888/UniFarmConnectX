/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

import { supabase } from '../core/supabase';

async function checkTonTransactionsIssue() {
  console.log('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° TON –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò ===\n');
  
  const userId = 184;
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ë–î:');
  
  const { data: tonTx, error: tonError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (tonError) {
    console.error('–û—à–∏–±–∫–∞:', tonError);
    return;
  }
  
  console.log(`\n–ù–∞–π–¥–µ–Ω–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTx?.length || 0}`);
  
  if (tonTx && tonTx.length > 0) {
    console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    tonTx.forEach((tx, i) => {
      console.log(`\n${i + 1}. ID ${tx.id}:`);
      console.log(`   - type: ${tx.type}`);
      console.log(`   - amount: ${tx.amount} TON`);
      console.log(`   - status: ${tx.status}`);
      console.log(`   - created_at: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
    });
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('\n\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–û–í:');
  
  const { data: user } = await supabase
    .from('users')
    .select('balance_uni, balance_ton')
    .eq('id', userId)
    .single();
    
  console.log(`\n–¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
  console.log(`- UNI: ${user?.balance_uni}`);
  console.log(`- TON: ${user?.balance_ton}`);
  
  // 3. –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('\n\n3Ô∏è‚É£ –†–ê–°–ß–ï–¢ –°–£–ú–ú–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
  
  // UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: allUniTx } = await supabase
    .from('transactions')
    .select('type, amount')
    .eq('user_id', userId)
    .eq('currency', 'UNI');
    
  let uniIncome = 0;
  let uniOutcome = 0;
  
  allUniTx?.forEach(tx => {
    const amount = parseFloat(tx.amount);
    if (['FARMING_REWARD', 'REFERRAL_REWARD', 'MISSION_REWARD', 'DAILY_BONUS'].includes(tx.type)) {
      uniIncome += amount;
    } else if (['FARMING_DEPOSIT', 'BOOST_PURCHASE'].includes(tx.type)) {
      uniOutcome += amount;
    }
  });
  
  console.log('\nUNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
  console.log(`- –î–æ—Ö–æ–¥: +${uniIncome.toFixed(6)} UNI`);
  console.log(`- –†–∞—Å—Ö–æ–¥: -${uniOutcome.toFixed(6)} UNI`);
  console.log(`- –ò—Ç–æ–≥–æ: ${(uniIncome - uniOutcome).toFixed(6)} UNI`);
  console.log(`- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user?.balance_uni} UNI`);
  
  // TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: allTonTx } = await supabase
    .from('transactions')
    .select('type, amount')
    .eq('user_id', userId)
    .eq('currency', 'TON');
    
  let tonIncome = 0;
  let tonOutcome = 0;
  
  allTonTx?.forEach(tx => {
    const amount = parseFloat(tx.amount);
    if (['FARMING_REWARD', 'REFERRAL_REWARD', 'MISSION_REWARD', 'DAILY_BONUS'].includes(tx.type)) {
      tonIncome += amount;
    } else if (['FARMING_DEPOSIT', 'BOOST_PURCHASE'].includes(tx.type)) {
      tonOutcome += amount;
    }
  });
  
  console.log('\nTON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
  console.log(`- –î–æ—Ö–æ–¥: +${tonIncome.toFixed(6)} TON`);
  console.log(`- –†–∞—Å—Ö–æ–¥: -${tonOutcome.toFixed(6)} TON`);
  console.log(`- –ò—Ç–æ–≥–æ: ${(tonIncome - tonOutcome).toFixed(6)} TON`);
  console.log(`- –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user?.balance_ton} TON`);
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç
  console.log('\n\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API –õ–û–ì–ò–ö–ò:');
  console.log('\n–ú–µ—Å—Ç–∞ –≤ –∫–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:');
  console.log('1. modules/transactions/controller.ts - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ currency');
  console.log('2. modules/transactions/service.ts - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ UnifiedTransactionService');
  console.log('3. core/TransactionService.ts - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ getUserTransactions');
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  console.log('\n\n5Ô∏è‚É£ –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´:');
  
  const { data: refRewards } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'REFERRAL_REWARD')
    .order('created_at', { ascending: false })
    .limit(10);
    
  console.log(`\n–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${refRewards?.length || 0}`);
  
  if (refRewards) {
    let totalUniRef = 0;
    let totalTonRef = 0;
    
    refRewards.forEach(tx => {
      if (tx.currency === 'UNI') totalUniRef += parseFloat(tx.amount);
      if (tx.currency === 'TON') totalTonRef += parseFloat(tx.amount);
    });
    
    console.log(`- UNI —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: ${totalUniRef.toFixed(6)} UNI`);
    console.log(`- TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: ${totalTonRef.toFixed(6)} TON`);
  }
  
  // 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  console.log('\n\nüìä –í–´–í–û–î–´:');
  console.log('================');
  
  if (tonTx && tonTx.length > 0) {
    console.log('‚úÖ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ï–°–¢–¨ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:');
    console.log('   1. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –≤ API');
    console.log('   2. –ü—Ä–æ–±–ª–µ–º–∞ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º TransactionHistory');
    console.log('   3. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ frontend');
  } else {
    console.log('‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ù–ï–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  const balanceDiffUni = parseFloat(user?.balance_uni || '0') - (uniIncome - uniOutcome);
  const balanceDiffTon = parseFloat(user?.balance_ton || '0') - (tonIncome - tonOutcome);
  
  if (Math.abs(balanceDiffUni) > 0.01) {
    console.log(`\n‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ UNI –±–∞–ª–∞–Ω—Å–∞: ${balanceDiffUni.toFixed(6)} UNI`);
  }
  
  if (Math.abs(balanceDiffTon) > 0.01) {
    console.log(`\n‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ TON –±–∞–ª–∞–Ω—Å–∞: ${balanceDiffTon.toFixed(6)} TON`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTonTransactionsIssue()
  .then(() => console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞:', error));