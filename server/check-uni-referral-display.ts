/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UNI —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { supabase } from '../core/supabase';

async function checkUniReferralDisplay() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø UNI –†–ï–§–ï–†–ê–õ–¨–ù–´–• ===\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
  const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
  
  const { data: allTransactions, error: allError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .gte('created_at', oneDayAgo)
    .order('created_at', { ascending: false });
    
  if (allError) {
    console.error('–û—à–∏–±–∫–∞:', allError);
    return;
  }
  
  console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 24 —á–∞—Å–∞: ${allTransactions?.length || 0}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∏ –≤–∞–ª—é—Ç–∞–º
  const stats: Record<string, Record<string, { count: number; total: number }>> = {};
  
  allTransactions?.forEach(tx => {
    const type = tx.type || 'UNKNOWN';
    const currency = tx.currency || 'UNKNOWN';
    
    if (!stats[type]) stats[type] = {};
    if (!stats[type][currency]) stats[type][currency] = { count: 0, total: 0 };
    
    stats[type][currency].count++;
    stats[type][currency].total += parseFloat(tx.amount_uni || tx.amount_ton || '0');
  });
  
  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
  Object.entries(stats).forEach(([type, currencies]) => {
    console.log(`\n${type}:`);
    Object.entries(currencies).forEach(([currency, data]) => {
      console.log(`  ${currency}: ${data.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: ${data.total.toFixed(6)}`);
    });
  });
  
  // 2. –î–µ—Ç–∞–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏–º REFERRAL_REWARD
  const referralStats = stats['REFERRAL_REWARD'];
  if (referralStats) {
    console.log('\nüéØ –î–ï–¢–ê–õ–ò –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:');
    console.log(`UNI —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: ${referralStats['UNI']?.count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: ${referralStats['TON']?.count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  console.log('\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
  allTransactions?.slice(0, 20).forEach(tx => {
    const amount = tx.currency === 'UNI' ? tx.amount_uni : tx.amount_ton;
    console.log(`[${tx.type}] ${amount} ${tx.currency} - ${tx.description?.substring(0, 50)}...`);
  });
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint /api/v2/transactions
  console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê: –ü–æ—á–µ–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ UI?');
  console.log('1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫–∏ UNI/TON/–í—Å–µ');
  console.log('2. –ü–∞–≥–∏–Ω–∞—Ü–∏—è - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö');
  console.log('3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤–µ—Ä—Ö—É');
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ
  const { data: referrals, error: refError } = await supabase
    .from('users')
    .select('*')
    .eq('referrer_id', 184)
    .order('created_at', { ascending: false });
    
  console.log(`\n\nüë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals?.length || 0}`);
  
  if (referrals && referrals.length > 0) {
    console.log('\n–†–µ—Ñ–µ—Ä–∞–ª—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏:');
    let activeCount = 0;
    referrals.forEach(ref => {
      if (ref.uni_deposit_amount > 0 || ref.ton_farming_balance > 0) {
        activeCount++;
        console.log(`- User ${ref.id}: UNI –¥–µ–ø–æ–∑–∏—Ç ${ref.uni_deposit_amount}, TON –¥–µ–ø–æ–∑–∏—Ç ${ref.ton_farming_balance}`);
      }
    });
    console.log(`\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${activeCount} –∏–∑ ${referrals.length}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUniReferralDisplay()
  .then(() => console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞:', error));