/**
 * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ UniFarm
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */

import express from 'express';
import cors from 'cors';
import path from 'path';
import { config, logger, globalErrorHandler, notFoundHandler } from '../core';
import { db } from '../core/db';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
import userRoutes from '../modules/user/routes';
import walletRoutes from '../modules/wallet/routes';
import farmingRoutes from '../modules/farming/routes';
import missionsRoutes from '../modules/missions/routes';
import boostRoutes from '../modules/boost/routes';
import referralRoutes from '../modules/referral/routes';
import telegramRoutes from '../modules/telegram/routes';
import authRoutes from '../modules/auth/routes';
import adminRoutes from '../modules/admin/routes';
import dailyBonusRoutes from '../modules/dailyBonus/routes';

async function startServer() {
  try {
    const app = express();

    // Middleware
    app.use(cors({
      origin: config.security.corsOrigins,
      credentials: true
    }));
    app.use(express.json({ limit: '10mb' }));
    app.use(express.urlencoded({ extended: true }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    app.use((req, res, next) => {
      const start = Date.now();
      res.on('finish', () => {
        const duration = Date.now() - start;
        logger.request(req.method, req.originalUrl, res.statusCode, duration);
      });
      next();
    });

    // Health check (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    app.get('/health', (req, res) => {
      res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        version: config.app.apiVersion,
        environment: config.app.nodeEnv
      });
    });

    // API routes
    const apiPrefix = `/api/${config.app.apiVersion}`;
    app.use(`${apiPrefix}/users`, userRoutes);
    app.use(`${apiPrefix}/wallet`, walletRoutes);
    app.use(`${apiPrefix}/farming`, farmingRoutes);
    app.use(`${apiPrefix}/missions`, missionsRoutes);
    app.use(`${apiPrefix}/boost`, boostRoutes);
    app.use(`${apiPrefix}/referral`, referralRoutes);
    app.use(`${apiPrefix}/telegram`, telegramRoutes);
    app.use(`${apiPrefix}/auth`, authRoutes);
    app.use(`${apiPrefix}/admin`, adminRoutes);
    app.use(`${apiPrefix}/daily-bonus`, dailyBonusRoutes);

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    app.use(express.static('dist/public'));

    // SPA routing - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ non-API –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.get('*', (req, res, next) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 404 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      if (req.path.startsWith('/api/')) {
        return next();
      }
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      res.sendFile(path.join(process.cwd(), 'dist/public/index.html'));
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    app.use(notFoundHandler);
    app.use(globalErrorHandler);

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(config.app.port, config.app.host, () => {
      logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.app.host}:${config.app.port}`);
      logger.info(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω: http://${config.app.host}:${config.app.port}${apiPrefix}/`);
      logger.info(`üåê Frontend: http://${config.app.host}:${config.app.port}/`);
    });

    return server;
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { error: error.message });
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer()
  .then(() => {
    logger.info('‚úÖ UniFarm —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  })
  .catch((error) => {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { error: error.message });
    process.exit(1);
  });