// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä UniFarm –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
console.log('üéØ [SYSTEM] –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ UniFarm —Å–µ—Ä–≤–µ—Ä–∞');

// Environment setup
if (!process.env.APP_URL) {
  process.env.APP_URL = 'https://uni-farm-connect-xo-osadchukdmitro2.replit.app';
}

if (!process.env.MINI_APP_URL) {
  process.env.MINI_APP_URL = 'https://uni-farm-connect-xo-osadchukdmitro2.replit.app';
}

// SSL setup
process.env.PGSSLMODE = 'require';
process.env.DATABASE_PROVIDER = 'neon';

import express, { Express, Request, Response, RequestHandler } from 'express';
import http from 'http';
import { WebSocketServer } from 'ws';

// –°—Ç–∞–±–∏–ª—å–Ω—ã–π Telegram middleware
import { stableTelegramMiddleware } from './telegram/stable-middleware';

// –ß–∏—Å—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API
import { registerCleanRoutes } from "./routes-clean";
import { setupVite, serveStatic, log } from "./vite";

// –°–µ—Å—Å–∏–∏
import session from 'express-session';
import memoryStore from 'memorystore';

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logger = {
  info: (msg: string, data?: any) => console.log(`[INFO] ${msg}`, data || ''),
  error: (msg: string, data?: any) => console.error(`[ERROR] ${msg}`, data || ''),
  warn: (msg: string, data?: any) => console.warn(`[WARN] ${msg}`, data || ''),
  debug: (msg: string, data?: any) => console.log(`[DEBUG] ${msg}`, data || '')
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error: Error) => {
  if (error.message.includes('partition') || error.message.includes('PARTITION')) {
    logger.debug('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return;
  }
  logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
});

process.on('unhandledRejection', (reason: any) => {
  if (reason?.message?.includes('partition')) {
    logger.debug('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reason.message);
    return;
  }
  logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', reason);
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function createApp(): Promise<Express> {
  const app = express();

  // –ë–∞–∑–æ–≤—ã–µ middleware
  app.use(express.json({ limit: '50mb' }));
  app.use(express.urlencoded({ extended: true, limit: '50mb' }));

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π —Å MemoryStore
  const MemoryStore = memoryStore(session);
  
  app.use(session({
    store: new MemoryStore({
      checkPeriod: 86400000 // 24 —á–∞—Å–∞
    }),
    secret: process.env.SESSION_SECRET || 'unifarm-secret-key-2024',
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: false,
      httpOnly: true,
      maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
    }
  }));

  // CORS –¥–ª—è Telegram Mini App
  const corsMiddleware: RequestHandler = (req, res, next) => {
    const origin = req.headers.origin || '*';
    res.header("Access-Control-Allow-Origin", origin);
    res.header("Access-Control-Allow-Credentials", "true");
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-telegram-data, x-telegram-user-id, x-telegram-init-data");
    res.header("Content-Security-Policy", "default-src * 'self' data: blob: 'unsafe-inline' 'unsafe-eval'");

    if (req.method === 'OPTIONS') {
      return res.status(200).send();
    }
    next();
  };

  app.use(corsMiddleware);

  // –°—Ç–∞–±–∏–ª—å–Ω—ã–π Telegram middleware
  app.use(stableTelegramMiddleware);

  // –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  app.get('/health', (req, res) => {
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      version: '3.0-simplified'
    });
  });

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  app.get('/api/status', (req, res) => {
    res.json({
      success: true,
      data: {
        status: 'running',
        version: '3.0-simplified',
        timestamp: new Date().toISOString()
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
  registerCleanRoutes(app);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º Vite –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  if (process.env.NODE_ENV === 'production') {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    app.use(express.static('./client/dist'));
    app.get('*', (req, res) => {
      if (!req.path.startsWith('/api')) {
        res.sendFile('index.html', { root: './client/dist' });
      }
    });
  } else {
    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Vite
    const { setupVite } = await import('./vite.js');
    await setupVite(app, server);
  }

  // Telegram –º–∞—Ä—à—Ä—É—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
  app.get('/api/telegram/status', (req, res) => {
    const hasBotToken = Boolean(process.env.TELEGRAM_BOT_TOKEN);
    res.json({
      success: true,
      data: {
        hasToken: hasBotToken,
        status: hasBotToken ? 'configured' : 'missing_token',
        timestamp: new Date().toISOString()
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  app.use((error: any, req: Request, res: Response, next: any) => {
    logger.error('–û—à–∏–±–∫–∞ Express:', error.message);
    
    if (!res.headersSent) {
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        timestamp: new Date().toISOString()
      });
    }
  });

  return app;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
async function createServer(): Promise<http.Server> {
  const app = await createApp();
  const server = http.createServer(app);

  // WebSocket —Å–µ—Ä–≤–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
  const wss = new WebSocketServer({ 
    server,
    path: '/ws'
  });

  wss.on('connection', (ws, req) => {
    logger.info('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        logger.debug('WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        // –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ –æ—Ç–≤–µ—Ç
        ws.send(JSON.stringify({
          type: 'echo',
          data: message,
          timestamp: new Date().toISOString()
        }));
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    ws.on('close', () => {
      logger.info('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    });

    ws.on('error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ WebSocket:', error);
    });
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vite –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  await setupVite(app, server);

  return server;
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    const server = await createServer();
    const PORT = process.env.PORT || 3000;

    server.listen(PORT, '0.0.0.0', () => {
      logger.info(`üöÄ UniFarm —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.info(`üì± Mini App URL: ${process.env.MINI_APP_URL}`);
      logger.info(`üîó Health check: http://localhost:${PORT}/health`);
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      logger.info('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
      server.close(() => {
        logger.info('–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
      });
    });

  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startServer().catch((error) => {
  logger.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});