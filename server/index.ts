/**
 * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ UniFarm
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */

import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import path from 'path';
import { createServer } from 'http';
// @ts-ignore
import * as WebSocket from 'ws';
import { config, logger, globalErrorHandler, notFoundHandler, EnvValidator } from '../core';
import { db } from '../core/db';
import { users, transactions, missions } from '../shared/schema';
import { eq, desc, sql } from 'drizzle-orm';
import { telegramMiddleware } from '../core/middleware/telegramMiddleware';
import { farmingScheduler } from '../core/scheduler/farmingScheduler';
import { startPoolMonitoring, logPoolStats } from '../core/dbPoolMonitor';

// API –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä—è–º–æ –≤ —Å–µ—Ä–≤–µ—Ä–µ

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
 */
function setupWebSocketServer(httpServer: any) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
  const wss = new WebSocket.WebSocketServer({ 
    server: httpServer,
    path: '/ws',
    perMessageDeflate: false
  });
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const activeConnections = new Map<string, any>();
  
  logger.info(`[WebSocket] –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—É—Ç–∏ /ws`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  wss.on('connection', (ws: any, req: any) => {
    const connectionId = `conn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const clientIP = req.socket.remoteAddress;
    const userAgent = req.headers['user-agent'];
    
    logger.info(`[WebSocket] –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`, {
      connectionId,
      clientIP,
      userAgent: userAgent?.substring(0, 100),
      totalConnections: wss.clients.size
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    activeConnections.set(connectionId, {
      ws,
      connectedAt: new Date(),
      lastPing: null,
      lastPong: null,
      userId: null
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try {
      ws.send(JSON.stringify({
        type: 'connection_established',
        connectionId,
        timestamp: new Date().toISOString()
      }));
    } catch (error) {
      logger.error('[WebSocket] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è', { connectionId, error });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    ws.on('message', (data: any) => {
      try {
        const message = JSON.parse(data.toString());
        logger.info(`[WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`, { 
          connectionId, 
          type: message.type,
          hasUserId: !!message.userId 
        });
        
        const connection = activeConnections.get(connectionId);
        if (!connection) return;
        
        switch (message.type) {
          case 'ping':
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
            connection.lastPing = new Date();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong –≤ –æ—Ç–≤–µ—Ç
            ws.send(JSON.stringify({
              type: 'pong',
              timestamp: message.timestamp || new Date().toISOString()
            }));
            break;
            
          case 'pong':
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ pong
            connection.lastPong = new Date();
            break;
            
          case 'subscribe':
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (message.userId) {
              connection.userId = message.userId;
              logger.info(`[WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`, {
                connectionId,
                userId: message.userId
              });
              
              ws.send(JSON.stringify({
                type: 'subscription_confirmed',
                userId: message.userId,
                timestamp: new Date().toISOString()
              }));
            }
            break;
            
          default:
            logger.warn(`[WebSocket] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è`, {
              connectionId,
              messageType: message.type
            });
        }
      } catch (error) {
        logger.error('[WebSocket] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
          connectionId,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ws.on('close', (code: any, reason: any) => {
      const connection = activeConnections.get(connectionId);
      const duration = connection ? Date.now() - connection.connectedAt.getTime() : 0;
      
      logger.info(`[WebSocket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ`, {
        connectionId,
        code,
        reason: reason.toString(),
        duration: `${Math.round(duration / 1000)}s`,
        totalConnections: wss.clients.size
      });
      
      activeConnections.delete(connectionId);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ws.on('error', (error: any) => {
      logger.error('[WebSocket] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', {
        connectionId,
        error: error.message
      });
      
      activeConnections.delete(connectionId);
    });
  });
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  setInterval(() => {
    const now = new Date();
    let cleanedConnections = 0;
    
    activeConnections.forEach((connection, connectionId) => {
      const timeSinceLastPing = connection.lastPing 
        ? now.getTime() - connection.lastPing.getTime() 
        : now.getTime() - connection.connectedAt.getTime();
      
      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç –±–µ–∑ ping –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
      if (timeSinceLastPing > 120000) {
        try {
          if (connection.ws.readyState === 1) {
            connection.ws.terminate();
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        }
        
        activeConnections.delete(connectionId);
        cleanedConnections++;
      }
    });
    
    if (cleanedConnections > 0) {
      logger.info(`[WebSocket] –û—á–∏—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${cleanedConnections}`);
    }
  }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  
  return wss;
}

async function startServer() {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    EnvValidator.validateAndReport();

    const app = express();

    // TELEGRAM WEBHOOK - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
    app.post('/webhook', express.json({ limit: '1mb' }), async (req: Request, res: Response) => {
      try {
        const update = req.body;
        
        logger.info('[TelegramWebhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram', {
          update_id: update.update_id,
          message: update.message ? {
            message_id: update.message.message_id,
            from: update.message.from,
            text: update.message.text
          } : null
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if (update.message && update.message.text && update.message.text.startsWith('/start')) {
          const chatId = update.message.chat.id;
          
          logger.info('[TelegramWebhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start', {
            chat_id: chatId,
            user_id: update.message.from.id
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π Mini App
          try {
            const { TelegramService } = await import('../modules/telegram/service');
            const telegramService = new TelegramService();
            
            await telegramService.sendMessage(chatId, 
              'üåæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm Connect!\n\n' +
              '–ù–∞—á–Ω–∏—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å UNI –∏ TON —Ç–æ–∫–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!', 
              {
                reply_markup: {
                  inline_keyboard: [[{
                    text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å UniFarm',
                    web_app: { url: 'https://uni-farm-connect-x-osadchukdmitro2.replit.app' }
                  }]]
                }
              }
            );
          } catch (serviceError) {
            logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', { 
              error: serviceError instanceof Error ? serviceError.message : String(serviceError) 
            });
          }
        }

        res.json({ 
          success: true,
          status: 'webhook_processed',
          update_id: update.update_id,
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        logger.error('[TelegramWebhook] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook', { 
          error: error instanceof Error ? error.message : String(error) 
        });
        
        res.status(500).json({
          success: false,
          error: 'Webhook processing error'
        });
      }
    });

    // Middleware
    app.use(cors({
      origin: config.security.cors.origin,
      credentials: true
    }));
    app.use(express.json({ limit: '10mb' }));
    app.use(express.urlencoded({ extended: true }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    app.use((req: Request, res: Response, next: NextFunction) => {
      const start = Date.now();
      res.on('finish', () => {
        const duration = Date.now() - start;
        logger.request(req.method, req.originalUrl, res.statusCode, duration);
      });
      next();
    });

    // Health check (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    app.get('/health', (req: Request, res: Response) => {
      res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        version: config.app.apiVersion,
        environment: config.app.nodeEnv
      });
    });



    // API routes
    const apiPrefix = `/api/v2`;
    
    // Import centralized routes (after critical endpoints)
    const { default: apiRoutes } = await import('./routes');
    app.use(apiPrefix, apiRoutes);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É /api –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    app.use('/api', apiRoutes);
    
    // –î–æ–±–∞–≤–ª—è–µ–º webhook –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
    app.use('/', apiRoutes);
    
    // Apply optional Telegram middleware to all routes for init data parsing
    app.use(telegramMiddleware);
    



    














    // Port configuration
    const apiPort = config.app.port;
    
    // Static files and SPA routing
    const isProduction = process.env.NODE_ENV === 'production';
    
    if (isProduction) {
      // Serve static files from dist/public
      app.use(express.static(path.join(process.cwd(), 'dist/public')));
      
      // SPA fallback - serve index.html for non-API routes
      app.get('*', (req: Request, res: Response, next: NextFunction) => {
        // Skip API routes and webhook
        if (req.path.startsWith('/api/') || req.path.startsWith('/health') || req.path === '/webhook') {
          return next();
        }
        
        // Fallback to index.html for SPA routing
        res.sendFile(path.join(process.cwd(), 'dist/public/index.html'));
      });
    } else {
      // Development mode - setup Vite dev server with WebSocket support
      const { setupVite } = await import('./vite-simple.js');
      
      // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ development —Ä–µ–∂–∏–º–µ
      const httpServer = createServer(app);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è development
      const wss = setupWebSocketServer(httpServer);
      
      // Start server first, then setup Vite
      const server = httpServer.listen(Number(apiPort), config.app.host, async () => {
        logger.info(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.app.host}:${apiPort}`);
        logger.info(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω: http://${config.app.host}:${apiPort}${apiPrefix}/`);
        logger.info(`üåê Frontend: http://${config.app.host}:${apiPort}/ (Vite dev server)`);
        logger.info(`üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ ws://${config.app.host}:${apiPort}/ws`);
        
        // Setup Vite after server starts
        await setupVite(app, server);
      });
      return;
    }

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï WEBHOOK –ú–ê–†–®–†–£–¢–´ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    app.all('/webhook', express.json(), async (req: Request, res: Response) => {
      try {
        const update = req.body;
        logger.info('[TelegramWebhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (fallback)', {
          method: req.method,
          update_id: update?.update_id
        });
        
        res.json({ 
          success: true,
          status: 'webhook_processed_fallback',
          update_id: update?.update_id || 'unknown'
        });
      } catch (error) {
        res.status(500).json({ success: false, error: 'Webhook error' });
      }
    });

    // Error handlers (must be last)
    app.use(notFoundHandler);
    app.use(globalErrorHandler);
    
    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const httpServer = createServer(app);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
    const wss = setupWebSocketServer(httpServer);
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = httpServer.listen(Number(apiPort), config.app.host, () => {
      logger.info(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${config.app.host}:${apiPort}`);
      logger.info(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω: http://${config.app.host}:${apiPort}${apiPrefix}/`);
      logger.info(`üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ ws://${config.app.host}:${apiPort}/ws`);
      if (process.env.NODE_ENV === 'production') {
        logger.info(`üåê Frontend: http://${config.app.host}:${apiPort}/`);
      } else {
        logger.info(`üåê Frontend: http://${config.app.host}:5173/ (Vite dev server)`);
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ connection pool
      logger.info('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ connection pool...');
      logPoolStats(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      
      // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      const poolMonitorInterval = startPoolMonitoring(5);
      logger.info('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ connection pool –∞–∫—Ç–∏–≤–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç)');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞—Ä–º–∏–Ω–≥-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      try {
        farmingScheduler.start();
        logger.info('‚úÖ –§–∞—Ä–º–∏–Ω–≥-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω');
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞', { error });
      }
      
      // Graceful shutdown
      process.on('SIGTERM', () => {
        logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
        if (poolMonitorInterval) {
          clearInterval(poolMonitorInterval);
          logger.info('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ connection pool –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        farmingScheduler.stop();
        logger.info('‚úÖ –§–∞—Ä–º–∏–Ω–≥-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        server.close(() => {
          logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
          process.exit(0);
        });
      });
    });

    return server;
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { error: error instanceof Error ? error.message : String(error) });
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer()
  .then(() => {
    logger.info('‚úÖ UniFarm —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  })
  .catch((error) => {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { error: error.message });
    process.exit(1);
  });