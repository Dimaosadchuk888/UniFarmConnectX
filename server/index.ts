// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// –í–∞–∂–Ω–æ: –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
import { testDatabaseConnection, db, queryWithRetry } from './db-selector';
import { databaseErrorHandler } from './middleware/databaseErrorHandler';

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SSL
process.env.PGSSLMODE = 'require';

import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { registerNewRoutes } from "./routes-new"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
import { setupVite, serveStatic, log } from "./vite";
import { startBackgroundTasks } from "./background-tasks";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Ç–∏—Ü–∏–π
import { schedulePartitionCreation } from "./cron/partition-scheduler";
import { migrateRefCodes } from "./migrations/refCodeMigration";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ production
import { setupProductionStatic } from "./productionStatic";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ API –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
import { responseFormatter } from "./middleware/responseFormatter";
import { errorHandler } from "./middleware/errorHandler";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Neon DB
import { dbType, DatabaseType, pool } from "./db-selector";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
import session from 'express-session';
import connectPgSimple from 'connect-pg-simple';
import memoryStore from 'memorystore';

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Neon DB –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// –≠—Ç–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ª—é–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.OVERRIDE_DB_PROVIDER = 'neon';
process.env.SKIP_PARTITION_CREATION = 'true';
process.env.IGNORE_PARTITION_ERRORS = 'true';

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error: Error) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (error.message && (
      error.message.includes('partitioned') || 
      error.message.includes('partition') ||
      error.message.includes('Failed to create partitions')
    )) {
    console.log('[Server] ‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return; // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  console.error('[Server] ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
  console.error(error.stack);
});

const app = express();
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
const MemoryStore = memoryStore(session);
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PostgreSQL
const PgStore = connectPgSimple(session);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π middleware
app.use(session({
  store: process.env.USE_MEMORY_SESSION === 'true' 
    ? new MemoryStore({
        checkPeriod: 86400000 // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
      }) 
    : new PgStore({
        pool,
        tableName: 'session', // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
        createTableIfMissing: true // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      }),
  secret: process.env.SESSION_SECRET || 'UniFarm_secret_key_change_in_production',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: process.env.NODE_ENV === 'production',
    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
    httpOnly: true,
    sameSite: 'lax'
  }
}));

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
app.use(databaseErrorHandler);
app.use(express.urlencoded({ extended: false }));
// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ API
app.use(responseFormatter as any);

app.use(((req: Request, res: Response, next: NextFunction) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "‚Ä¶";
      }

      log(logLine);
    }
  });

  next();
}) as any);

(async () => {
  console.log('[Server] üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
  console.log('[Server] üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  const isDbConnected = await testDatabaseConnection();

  if (!isDbConnected) {
    console.error('[Server] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    console.error('[Server] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

    // –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
    const reconnected = await new Promise<boolean>(resolve => {
      setTimeout(async () => {
        try {
          const result = await testDatabaseConnection();
          resolve(result);
        } catch (error) {
          console.error('[Server] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
          resolve(false);
        }
      }, 3000);
    });

    if (!reconnected) {
      console.error('[Server] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!');
      console.error('[Server] ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∑–∞–ø—É—Å–∫, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ API!');
    } else {
      console.log('[Server] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  } else {
    console.log('[Server] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:
   * 1. FORCE_NEON_DB=true –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Neon DB
   * 2. USE_LOCAL_DB_ONLY=true –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Replit PostgreSQL
   * 3. –í production —Ä–µ–∂–∏–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Neon DB
   * 4. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π DATABASE_PROVIDER –∏–ª–∏ 'neon' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
  const forceNeonDb = process.env.FORCE_NEON_DB === 'true';
  const disableReplitDb = process.env.DISABLE_REPLIT_DB === 'true';
  const overrideDbProvider = process.env.OVERRIDE_DB_PROVIDER === 'neon';
  const hasNeonDbUrl = process.env.DATABASE_URL?.includes('neon.tech');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Replit DB
  const useLocalDbOnly = process.env.USE_LOCAL_DB_ONLY === 'true';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (–ø—Ä–æ–¥–∞–∫—à–µ–Ω –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
  const isProduction = process.env.NODE_ENV === 'production';
  const hasReplitPgEnv = process.env.PGHOST === 'localhost' && process.env.PGUSER === 'runner';

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Neon DB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è, 
  // —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
  console.log(`[DB] üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï NEON DB (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)`);

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log(`[DB] –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbType}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
  if (!hasNeonDbUrl) {
    console.error(`
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Neon DB, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Neon DB!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ start-with-neon.sh
    `);
  }

  /**
   * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—Ç–∫–∞–∑–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
   * –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ 502 –æ—à–∏–±–∫–∞–º
   */
  process.on('uncaughtException', (error) => {
    console.error('[SERVER] ‚ö†Ô∏è –ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', {
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞–±–æ—Ç—É
  });

  process.on('unhandledRejection', (reason, promise) => {
    console.error('[SERVER] ‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞:', {
      reason: reason instanceof Error ? reason.message : String(reason),
      stack: reason instanceof Error ? reason.stack : undefined,
      timestamp: new Date().toISOString()
    });
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞–±–æ—Ç—É
  });

  /**
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–±–ª–µ–º 502
   */
  app.use(((req: Request, _res: Response, next: NextFunction) => {
    if (req.path.startsWith('/api/')) {
      console.log('[–ê–£–î–ò–¢] [' + new Date().toISOString() + '] Request to ' + req.method + ' ' + req.url);
      console.log('[–ê–£–î–ò–¢] Headers:', JSON.stringify(req.headers, null, 2));
    }
    next();
  }) as any);

  const server = await registerRoutes(app);

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏
    import('./routes-new')
      .then(module => {
        console.log('[Server] –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API v2...');
        module.registerNewRoutes(app);
        console.log('[Server] ‚úÖ –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API v2 —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      })
      .catch(error => {
        console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API:', error);
        console.log('[Server] –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API v2 –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', error.message);
      });
  } catch (error) {
    console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API:', error);
    console.log('[Server] –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API v2 –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞');
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  app.use(((err: any, req: Request, res: Response, next: NextFunction) => errorHandler(err, req, res, next)) as any);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Telegram WebApp –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  app.use(((req: Request, res: Response, next: NextFunction) => {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
    const origin = req.headers.origin || '*';

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Telegram Mini App —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cookies
    res.header("Access-Control-Allow-Origin", origin);
    res.header("Access-Control-Allow-Credentials", "true");
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-telegram-data, x-telegram-user-id");

    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram
    res.header("Content-Security-Policy", "default-src * 'self' data: blob: 'unsafe-inline' 'unsafe-eval'");

    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ OPTIONS –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
    if (req.method === 'OPTIONS') {
      return res.status(200).send();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Telegram
    const telegramParams = ['tgWebAppData', 'tgWebAppVersion', 'tgWebAppPlatform', 'tgWebAppStartParam']
      .filter(param => req.query[param])
      .reduce((acc, param) => {
        acc[param] = req.query[param];
        return acc;
      }, {} as Record<string, any>);

    if (Object.keys(telegramParams).length > 0) {
      console.log('[TelegramWebApp] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL:', telegramParams);
    }

    next();
  }) as any);

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    console.log('[Server] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (development), –∏—Å–ø–æ–ª—å–∑—É–µ–º Vite middleware');
    await setupVite(app, server);
  } else {
    console.log('[Server] –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è production
    setupProductionStatic(app);

    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º
    // serveStatic(app);
  }

  // –í Replit –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
  // –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö .replit –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç 80 –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç 3000
  const port = parseInt(process.env.PORT || "3000", 10);
  console.log(`[Server] Starting on port ${port} in ${process.env.NODE_ENV || 'development'} mode`);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ db-connect-fix.js
  // –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

  // –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º "—Ç—è–∂–µ–ª—ã–µ" –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
  // –≠—Ç–∏ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
  function initBackgroundServices() {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—è–∂–µ–ª—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    setTimeout(() => {
      // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
      startBackgroundTasks();

      // –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å cron-–∑–∞–¥–∞—á –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        import('./scripts/cron_scheduler.js')
          .then(module => {
            module.setupCronJobs();
            console.log('[Server] Cron-–∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
          })
          .catch(error => {
            console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cron-–∑–∞–¥–∞—á:', error);
          });
      } catch (error) {
        console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è cron-–∑–∞–¥–∞—á:', error);
      }

      // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π
      try {
        console.log('[Server] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π...');
        schedulePartitionCreation();
        console.log('[Server] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Ç–∏—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–π:', error);
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
      try {
        migrateRefCodes()
          .then((result) => {
            console.log(`[Server] –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated} –∏–∑ ${result.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
          })
          .catch((error: Error) => {
            console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
          });
      } catch (error) {
        console.error('[Server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
      }
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
  }

  // –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ (health check)
  app.get('/', (req: Request, res: Response) => {
    return res.status(200).json({ status: 'ok', message: 'UniFarm API server is running' });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ catch-all –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
  app.use('*', ((req: Request, res: Response) => {
    // –ò–Ω–∞—á–µ —Å—Ç–∞—Ç—É—Å 404
    return res.status(404).json({ status: 'error', message: 'Not found' });
  }) as any);

  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  app.use(((err: any, req: Request, res: Response, next: NextFunction) => errorHandler(err, req, res, next)) as any);

  // Explicit bind to 0.0.0.0 to ensure Replit deployment works correctly
  server.listen(port, "0.0.0.0", () => {
    console.log(`[Server] Server running at http://0.0.0.0:${port} in ${process.env.NODE_ENV || 'development'} mode`);
    log(`serving on port ${port}`);
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
    initBackgroundServices();
  });
})();