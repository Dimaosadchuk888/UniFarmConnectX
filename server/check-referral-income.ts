import { supabase } from '../core/supabase.js';

async function checkReferralIncome() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –î–û–•–û–î–û–í –û–¢ –†–ï–§–ï–†–ê–õ–û–í ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const { data: referrals, error: refError } = await supabase
      .from('users')
      .select('id, username, balance_uni, uni_deposit_amount')
      .eq('referred_by', 74)
      .limit(5);
      
    if (refError) throw refError;
    
    console.log('üìä –†–ï–§–ï–†–ê–õ–´ –ü–ï–†–í–û–ì–û –£–†–û–í–ù–Ø:\n');
    
    for (const ref of referrals || []) {
      console.log(`${ref.username} (ID: ${ref.id})`);
      console.log(`- –î–µ–ø–æ–∑–∏—Ç: ${ref.uni_deposit_amount?.toLocaleString('ru-RU')} UNI`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      const { data: transactions, error: txError } = await supabase
        .from('transactions')
        .select('type, amount, currency, created_at')
        .eq('user_id', ref.id)
        .eq('type', 'FARMING_REWARD')
        .order('created_at', { ascending: false })
        .limit(1);
        
      if (!txError && transactions && transactions.length > 0) {
        const lastTx = transactions[0];
        console.log(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: +${parseFloat(lastTx.amount).toLocaleString('ru-RU')} ${lastTx.currency}`);
        console.log(`- –í—Ä–µ–º—è: ${new Date(lastTx.created_at).toLocaleString('ru-RU')}`);
      } else {
        console.log('- –ù–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç');
      }
      console.log('');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è User 74
    console.log('\nüí∞ –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–ú–ò–°–°–ò–ò USER 74:\n');
    
    const { data: referralRewards, error: rewardsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (!rewardsError && referralRewards && referralRewards.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${referralRewards.length} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:\n`);
      referralRewards.forEach((tx, i) => {
        console.log(`${i+1}. +${parseFloat(tx.amount).toLocaleString('ru-RU')} ${tx.currency}`);
        console.log(`   ${tx.description || '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è'}`);
        console.log(`   ${new Date(tx.created_at).toLocaleString('ru-RU')}\n`);
      });
    } else {
      console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç');
      console.log('(–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞)');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('\n‚è±Ô∏è –ü–û–°–õ–ï–î–ù–ò–ï FARMING –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:\n');
    
    const { data: lastFarmingTx, error: farmingError } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'UNI')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (!farmingError && lastFarmingTx && lastFarmingTx.length > 0) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞:');
      lastFarmingTx.forEach((tx, i) => {
        console.log(`${i+1}. User ${tx.user_id}: +${parseFloat(tx.amount).toLocaleString('ru-RU')} UNI`);
        console.log(`   ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
      const lastTime = new Date(lastFarmingTx[0].created_at);
      const now = new Date();
      const diffMinutes = Math.floor((now.getTime() - lastTime.getTime()) / 60000);
      
      console.log(`\n‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${diffMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      if (diffMinutes > 6) {
        console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      }
    } else {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkReferralIncome();