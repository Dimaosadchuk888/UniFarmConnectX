import { supabase } from '../core/supabase.js';

async function checkTonBoostReferrals() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê TON BOOST –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô ===\n');
  
  const userId = 184;
  const referralIds = [186, 187, 188, 189, 190];
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ TON Boost —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    console.log('üìä TON BOOST –î–ê–ù–ù–´–ï –†–ï–§–ï–†–ê–õ–û–í:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ton_farming_data
    const { data: tonFarmingData, error: tonError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .in('user_id', referralIds);
      
    if (tonError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ton_farming_data:', tonError.message);
      console.log('   –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ users...\n');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('id, username, balance_ton, ton_boost_package, ton_boost_farming_start, ton_boost_farming_last_update')
        .in('id', referralIds);
        
      if (users) {
        console.log('üìã –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users:');
        users.forEach(user => {
          console.log(`\nüë§ ${user.username} (ID: ${user.id})`);
          console.log(`   - –ë–∞–ª–∞–Ω—Å TON: ${user.balance_ton}`);
          console.log(`   - TON Boost –ø–∞–∫–µ—Ç: ${user.ton_boost_package || '–ù–ï–¢'}`);
          console.log(`   - –ù–∞—á–∞–ª–æ TON Boost: ${user.ton_boost_farming_start ? new Date(user.ton_boost_farming_start).toLocaleString('ru-RU') : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
          console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.ton_boost_farming_last_update ? new Date(user.ton_boost_farming_last_update).toLocaleString('ru-RU') : '–ù–ï –û–ë–ù–û–í–õ–Ø–õ–û–°–¨'}`);
          
          if (user.ton_boost_farming_last_update) {
            const minutesAgo = Math.floor((Date.now() - new Date(user.ton_boost_farming_last_update).getTime()) / 1000 / 60);
            console.log(`   - –ú–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${minutesAgo}`);
          }
        });
      }
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data:', tonFarmingData?.length || 0);
      
      tonFarmingData?.forEach(data => {
        console.log(`\nüë§ User ID: ${data.user_id}`);
        console.log(`   - Farming –±–∞–ª–∞–Ω—Å: ${data.farming_balance} TON`);
        console.log(`   - –°—Ç–∞–≤–∫–∞: ${data.farming_rate}% –≤ –¥–µ–Ω—å`);
        console.log(`   - Boost –ø–∞–∫–µ—Ç ID: ${data.boost_package_id}`);
        console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${data.farming_last_update ? new Date(data.farming_last_update).toLocaleString('ru-RU') : '–ù–ï –û–ë–ù–û–í–õ–Ø–õ–û–°–¨'}`);
        
        if (data.farming_last_update) {
          const minutesAgo = Math.floor((Date.now() - new Date(data.farming_last_update).getTime()) / 1000 / 60);
          console.log(`   - –ú–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${minutesAgo}`);
        }
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost –¥–æ—Ö–æ–¥–æ–≤
    console.log('\n\nüìà –¢–†–ê–ù–ó–ê–ö–¶–ò–ò TON BOOST –î–û–•–û–î–û–í:');
    const { data: tonRewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', referralIds)
      .eq('currency', 'TON')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false });
      
    if (rewardError) {
      console.error('–û—à–∏–±–∫–∞:', rewardError);
    } else {
      console.log(`\n–ù–∞–π–¥–µ–Ω–æ TON –¥–æ—Ö–æ–¥–æ–≤ —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${tonRewards?.length || 0}`);
      
      if (tonRewards && tonRewards.length > 0) {
        let totalTonIncome = 0;
        tonRewards.forEach(tx => {
          const isBoostIncome = tx.metadata?.original_type === 'TON_BOOST_INCOME' || 
                               tx.metadata?.transaction_source === 'ton_boost_scheduler';
          console.log(`- User ${tx.user_id}: +${tx.amount} TON (${new Date(tx.created_at).toLocaleString('ru-RU')})${isBoostIncome ? ' [TON BOOST]' : ''}`);
          totalTonIncome += parseFloat(tx.amount);
        });
        console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ TON: ${totalTonIncome.toFixed(6)}`);
        console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è 5%: ${(totalTonIncome * 0.05).toFixed(6)} TON`);
      } else {
        console.log('‚ùå –ù–µ—Ç TON –¥–æ—Ö–æ–¥–æ–≤ —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ TON Boost
    console.log('\n\nüõí –ü–û–ö–£–ü–ö–ò TON BOOST:');
    const { data: boostPurchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', referralIds)
      .or('type.eq.BOOST_PURCHASE,and(type.eq.FARMING_REWARD,metadata->original_type.eq.BOOST_PURCHASE)')
      .order('created_at', { ascending: false });
      
    if (boostPurchases && boostPurchases.length > 0) {
      console.log(`\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫ TON Boost: ${boostPurchases.length}`);
      boostPurchases.forEach(tx => {
        console.log(`- User ${tx.user_id}: ${tx.amount} ${tx.currency} (${new Date(tx.created_at).toLocaleString('ru-RU')})`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    console.log('\n\nüíé –í–ê–®–ò TON –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–ú–ò–°–°–ò–ò:');
    const { data: yourTonReferralRewards, error: yourError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'REFERRAL_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
      
    if (yourTonReferralRewards && yourTonReferralRewards.length > 0) {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π: ${yourTonReferralRewards.length}`);
      let totalCommission = 0;
      yourTonReferralRewards.forEach(reward => {
        console.log(`- ${reward.description}: +${reward.amount} TON`);
        totalCommission += parseFloat(reward.amount);
      });
      console.log(`\nüí∞ –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ TON –∫–æ–º–∏—Å—Å–∏–π: ${totalCommission.toFixed(6)}`);
    } else {
      console.log('\n‚ùå TON —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ TON Boost
    console.log('\n\nüîÑ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê TON BOOST:');
    const { data: recentTonTransactions, error: txError } = await supabase
      .from('transactions')
      .select('created_at, metadata')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (recentTonTransactions && recentTonTransactions.length > 0) {
      console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
      recentTonTransactions.forEach(tx => {
        const minutesAgo = Math.floor((Date.now() - new Date(tx.created_at).getTime()) / 1000 / 60);
        const source = tx.metadata?.transaction_source || 'unknown';
        console.log(`- ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source})`);
      });
    } else {
      console.log('‚ùå –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    console.log('1. –£ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ TON Boost (–ø–æ 10 TON –∫–∞–∂–¥—ã–π)');
    console.log('2. –ù–æ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–∞ –æ—Ç TON Boost');
    console.log('3. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ—Ç –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π');
    console.log('\nüí° –í–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('- –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ ton_farming_data');
    console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è boost –ø–∞–∫–µ—Ç–æ–≤');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkTonBoostReferrals();