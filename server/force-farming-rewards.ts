import { supabase } from '../core/supabase.js';
import { BalanceManager } from '../core/BalanceManager.js';
import { UnifiedTransactionService } from '../core/TransactionService.js';

async function forceFarmingRewards() {
  console.log('=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –§–ê–†–ú–ò–ù–ì–ê –†–ï–§–ï–†–ê–õ–ê–ú ===\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–∏–Ω–≥–æ–º
    const { data: referrals, error } = await supabase
      .from('users')
      .select('*')
      .eq('referred_by', 74)
      .eq('uni_farming_active', true);
      
    if (error) throw error;
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${referrals?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–∏–Ω–≥–æ–º\n`);
    
    const dailyRate = 0.01; // 1% –≤ –¥–µ–Ω—å
    const periodsPerDay = 288; // 5 –º–∏–Ω—É—Ç = 288 –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ –¥–µ–Ω—å
    const ratePerPeriod = dailyRate / periodsPerDay;
    
    for (const ref of referrals || []) {
      const depositAmount = ref.uni_deposit_amount || 0;
      if (depositAmount <= 0) continue;
      
      const income = depositAmount * ratePerPeriod;
      
      console.log(`${ref.username} (ID: ${ref.id})`);
      console.log(`- –î–µ–ø–æ–∑–∏—Ç: ${depositAmount.toLocaleString('ru-RU')} UNI`);
      console.log(`- –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç: ${income.toFixed(6)} UNI`);
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
      await BalanceManager.addBalance(ref.id, income, 'UNI');
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const tx = await UnifiedTransactionService.createTransaction({
        user_id: ref.id,
        type: 'FARMING_REWARD',
        amount: income.toString(),
        currency: 'UNI',
        status: 'completed',
        description: `UNI farming income: ${income.toFixed(6)} UNI (rate: ${dailyRate})`,
        metadata: {
          source: 'force_farming_rewards',
          deposit_amount: depositAmount,
          rate: dailyRate
        }
      });
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${tx.id}\n`);
    }
    
    console.log('–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è...\n');
    
    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const { data: referralRewards, error: rewardsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (!rewardsError && referralRewards && referralRewards.length > 0) {
      console.log('üí∞ –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–ú–ò–°–°–ò–ò –ù–ê–ß–ò–°–õ–ï–ù–´:\n');
      referralRewards.forEach(tx => {
        console.log(`+${parseFloat(tx.amount).toLocaleString('ru-RU')} ${tx.currency}`);
        console.log(`${tx.description}`);
        console.log(`${new Date(tx.created_at).toLocaleString('ru-RU')}\n`);
      });
    } else {
      console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
      console.log('–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

forceFarmingRewards();