import { supabase } from '../core/supabase.js';

async function checkMultilevelReferrals() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–• –†–ï–§–ï–†–ê–õ–û–í ===\n');
  
  const userId = 184;
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    console.log('üìä –¢–†–ê–ù–ó–ê–ö–¶–ò–ò FARMING_REWARD –†–ï–§–ï–†–ê–õ–û–í:');
    const { data: referralRewards, error: refError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', [186, 187, 188, 189, 190])
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: true });
      
    if (refError) {
      console.error('–û—à–∏–±–∫–∞:', refError);
      return;
    }
    
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralRewards?.length || 0}`);
    
    if (referralRewards && referralRewards.length > 0) {
      let totalRewardsUni = 0;
      let totalRewardsTon = 0;
      
      referralRewards.forEach(tx => {
        console.log(`\n- User ${tx.user_id}: +${tx.amount} ${tx.currency}`);
        console.log(`  –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        console.log(`  ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx.id}`);
        
        if (tx.currency === 'UNI') totalRewardsUni += parseFloat(tx.amount);
        if (tx.currency === 'TON') totalRewardsTon += parseFloat(tx.amount);
      });
      
      console.log(`\nüìä –ò–¢–û–ì–û –î–û–•–û–î–û–í –†–ï–§–ï–†–ê–õ–û–í:`);
      console.log(`- UNI: ${totalRewardsUni.toFixed(6)}`);
      console.log(`- TON: ${totalRewardsTon.toFixed(6)}`);
      
      console.log(`\nüí∞ –û–ñ–ò–î–ê–ï–ú–´–ï –ö–û–ú–ò–°–°–ò–ò (5%):`);
      console.log(`- UNI: ${(totalRewardsUni * 0.05).toFixed(6)}`);
      console.log(`- TON: ${(totalRewardsTon * 0.05).toFixed(6)}`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    console.log('\n\nüíé –í–ê–®–ò –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ö–û–ú–ò–°–°–ò–ò:');
    const { data: yourReferralRewards, error: yourError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false });
      
    if (yourError) {
      console.error('–û—à–∏–±–∫–∞:', yourError);
      return;
    }
    
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π: ${yourReferralRewards?.length || 0}`);
    
    if (yourReferralRewards && yourReferralRewards.length > 0) {
      let totalCommissionUni = 0;
      let totalCommissionTon = 0;
      
      yourReferralRewards.forEach(reward => {
        console.log(`\n- ${reward.description}`);
        console.log(`  –°—É–º–º–∞: +${reward.amount} ${reward.currency}`);
        console.log(`  –î–∞—Ç–∞: ${new Date(reward.created_at).toLocaleString('ru-RU')}`);
        
        if (reward.currency === 'UNI') totalCommissionUni += parseFloat(reward.amount);
        if (reward.currency === 'TON') totalCommissionTon += parseFloat(reward.amount);
      });
      
      console.log(`\nüìä –ò–¢–û–ì–û –ü–û–õ–£–ß–ï–ù–û –ö–û–ú–ò–°–°–ò–ô:`);
      console.log(`- UNI: ${totalCommissionUni.toFixed(6)}`);
      console.log(`- TON: ${totalCommissionTon.toFixed(6)}`);
    } else {
      console.log('\n‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD
    console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê METADATA –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const recentReward = referralRewards?.[referralRewards.length - 1];
    if (recentReward) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è FARMING_REWARD:');
      console.log(`- ID: ${recentReward.id}`);
      console.log(`- Metadata:`, recentReward.metadata);
      
      if (!recentReward.metadata?.referral_data || !recentReward.metadata?.referrals_distributed) {
        console.log('\n‚ùå –í metadata –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π!');
        console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\n\nüèóÔ∏è –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:');
    const { data: referralStructure, error: structError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .in('id', [184, 185, 186, 187, 188, 189, 190]);
      
    if (referralStructure) {
      referralStructure.forEach(user => {
        console.log(`- ${user.username} (ID: ${user.id}) ‚Üí –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${user.referred_by || '–ù–ï–¢'}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkMultilevelReferrals();