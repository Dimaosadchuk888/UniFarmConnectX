import { supabase } from '../core/supabase.js';
import { BalanceManager } from '../core/BalanceManager.js';
import { UnifiedTransactionService } from '../core/TransactionService.js';
import { ReferralService } from '../modules/referral/service.js';

async function fixReferralFarming() {
  console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–†–ú–ò–ù–ì–ê –î–õ–Ø –†–ï–§–ï–†–ê–õ–û–í ===\n');
  
  const referralIds = [186, 187, 188, 189, 190];
  
  try {
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É
    console.log('üìä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–ù–¢–ù–û–ô –°–¢–ê–í–ö–ò:');
    const { data: updateResult, error: updateError } = await supabase
      .from('users')
      .update({ 
        uni_farming_rate: 0.01, // 1% –≤ –¥–µ–Ω—å
        uni_farming_last_update: new Date().toISOString()
      })
      .in('id', referralIds)
      .select();
      
    if (updateError) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', updateError);
      return;
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –¥–ª—è ${updateResult?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 1% –≤ –¥–µ–Ω—å\n`);
    
    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
    console.log('üí∞ –†–ê–°–ß–ï–¢ –ò –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –î–û–•–û–î–ê:');
    const balanceManager = new BalanceManager();
    const transactionService = UnifiedTransactionService.getInstance();
    const referralService = new ReferralService();
    
    for (const user of updateResult || []) {
      if (!user.uni_farming_active || !user.uni_deposit_amount) {
        console.log(`‚ö†Ô∏è ${user.username}: —Ñ–∞—Ä–º–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞`);
        continue;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const startTime = new Date(user.uni_farming_start_timestamp);
      const now = new Date();
      const minutesPassed = (now.getTime() - startTime.getTime()) / 1000 / 60;
      const periodsPassed = Math.floor(minutesPassed / 5); // –ü–µ—Ä–∏–æ–¥—ã –ø–æ 5 –º–∏–Ω—É—Ç
      
      console.log(`\nüë§ ${user.username} (ID: ${user.id}):`);
      console.log(`   - –î–µ–ø–æ–∑–∏—Ç: ${user.uni_deposit_amount} UNI`);
      console.log(`   - –ú–∏–Ω—É—Ç —Å –Ω–∞—á–∞–ª–∞: ${minutesPassed.toFixed(0)}`);
      console.log(`   - –ü–µ—Ä–∏–æ–¥–æ–≤ (5 –º–∏–Ω): ${periodsPassed}`);
      
      if (periodsPassed > 0) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        const dailyRate = 0.01; // 1% –≤ –¥–µ–Ω—å
        const periodRate = dailyRate / 288; // 288 –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç –≤ —Å—É—Ç–∫–∞—Ö
        const totalIncome = user.uni_deposit_amount * periodRate * periodsPassed;
        
        console.log(`   - –î–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${totalIncome.toFixed(6)} UNI`);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
        await balanceManager.addBalance(user.id, totalIncome, 0, 'farming_income');
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transaction = await transactionService.createTransaction({
          user_id: user.id,
          type: 'FARMING_REWARD',
          amount_uni: totalIncome,
          amount_ton: 0,
          currency: 'UNI',
          status: 'completed',
          description: `UNI farming income: ${totalIncome.toFixed(6)} UNI (${periodsPassed} periods)`,
          metadata: {
            deposit_amount: user.uni_deposit_amount,
            daily_rate: dailyRate,
            periods: periodsPassed
          }
        });
        
        console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
        console.log(`   üéÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π...`);
        await referralService.distributeReferralRewards(
          user.id,
          totalIncome,
          'UNI',
          'farming',
          transaction.id
        );
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    const { data: referralRewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 184)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (referralRewards && referralRewards.length > 0) {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π: ${referralRewards.length}`);
      let totalUni = 0;
      
      referralRewards.forEach(reward => {
        console.log(`- ${reward.description}: +${reward.amount} ${reward.currency}`);
        if (reward.currency === 'UNI') totalUni += parseFloat(reward.amount);
      });
      
      console.log(`\nüí∞ –ò–¢–û–ì–û –ü–û–õ–£–ß–ï–ù–û UNI: ${totalUni.toFixed(6)}`);
    } else {
      console.log('\n‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

fixReferralFarming();