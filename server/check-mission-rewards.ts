/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
 */

import { supabase } from '../core/supabase';

async function checkMissionRewards() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ù–ê–ì–†–ê–î –ó–ê –ú–ò–°–°–ò–ò (USER 184) ===\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ MISSION_REWARD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  
  const { data: missionTransactions, error: missionError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .eq('type', 'MISSION_REWARD')
    .gte('created_at', oneHourAgo)
    .order('created_at', { ascending: false });
    
  if (missionError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –º–∏—Å—Å–∏–π:', missionError);
    return;
  }
  
  console.log('üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ MISSION_REWARD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:');
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', missionTransactions?.length || 0);
  
  if (missionTransactions && missionTransactions.length > 0) {
    let totalMissionUni = 0;
    
    missionTransactions.forEach((tx, index) => {
      console.log(`\n${index + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${tx.id}`);
      console.log(`   –í—Ä–µ–º—è: ${tx.created_at}`);
      console.log(`   UNI: ${tx.amount_uni}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
      console.log(`   Metadata: ${JSON.stringify(tx.metadata)}`);
      
      totalMissionUni += parseFloat(tx.amount_uni || '0');
    });
    
    console.log(`\nüî¥ –ò–¢–û–ì–û –Ω–∞—á–∏—Å–ª–µ–Ω–æ UNI –∑–∞ –º–∏—Å—Å–∏–∏: ${totalMissionUni}`);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  const { data: allTransactions, error: allError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .gte('created_at', oneHourAgo)
    .order('created_at', { ascending: false });
    
  if (allError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allError);
    return;
  }
  
  console.log('\n\nüìã –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:');
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', allTransactions?.length || 0);
  
  if (allTransactions && allTransactions.length > 0) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const groupedByType: Record<string, { count: number; totalUni: number }> = {};
    
    allTransactions.forEach(tx => {
      const type = tx.type || 'UNKNOWN';
      if (!groupedByType[type]) {
        groupedByType[type] = { count: 0, totalUni: 0 };
      }
      groupedByType[type].count++;
      groupedByType[type].totalUni += parseFloat(tx.amount_uni || '0');
    });
    
    console.log('\n–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º:');
    Object.entries(groupedByType).forEach(([type, data]) => {
      console.log(`- ${type}: ${data.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${data.totalUni} UNI`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    allTransactions.slice(0, 10).forEach(tx => {
      console.log(`[${tx.type}] ${tx.amount_uni} UNI - ${tx.description || '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`);
    });
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ mission_progress
  const { data: missionProgress, error: progressError } = await supabase
    .from('mission_progress')
    .select('*')
    .eq('user_id', 184)
    .eq('is_completed', true)
    .order('completed_at', { ascending: false });
    
  console.log('\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ (mission_progress):');
  if (missionProgress && missionProgress.length > 0) {
    missionProgress.forEach(mp => {
      console.log(`- –ú–∏—Å—Å–∏—è ${mp.mission_id}: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ${mp.completed_at}, –Ω–∞–≥—Ä–∞–¥–∞ ${mp.reward_amount} UNI`);
    });
  } else {
    console.log('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏—è—Ö');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkMissionRewards()
  .then(() => console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞:', error));