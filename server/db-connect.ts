/**
 * –ú–æ–¥—É–ª—å –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (Neon DB –∏ Replit PostgreSQL)
 * —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */

import { Pool, PoolClient, QueryResult } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from '../shared/schema';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è db-health
import * as dbHealth from './db-health';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function setupEnvironmentVariables() {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  process.env.PGSSLMODE = 'require';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Neon DB –∏–ª–∏ Replit PostgreSQL
  const hasNeonUrl = !!process.env.DATABASE_URL && 
    process.env.DATABASE_URL.includes('neon.tech');
  
  const hasReplitPg = process.env.PGHOST === 'localhost' && 
    process.env.PGUSER === 'runner';

  // –ï—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL –¥–ª—è Neon DB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (hasNeonUrl) {
    console.log('[DB Connect] –ò—Å–ø–æ–ª—å–∑—É–µ–º Neon DB (–∏–∑ DATABASE_URL)');
  } 
  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Replit PostgreSQL
  else if (hasReplitPg) {
    console.log('[DB Connect] –ò—Å–ø–æ–ª—å–∑—É–µ–º Replit PostgreSQL (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)');
  }
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  else {
    console.warn('[DB Connect] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
  }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupEnvironmentVariables();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
const poolConfig = process.env.DATABASE_URL
  ? { 
      connectionString: process.env.DATABASE_URL,
      ssl: {
        rejectUnauthorized: false
      },
      max: 15,                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      min: 2,                     // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      idleTimeoutMillis: 60000,   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (1 –º–∏–Ω—É—Ç–∞)
      connectionTimeoutMillis: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)
      allowExitOnIdle: false,     // –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã—Ö–æ–¥ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ
      keepAlive: true,            // –í–∫–ª—é—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è keep-alive
      keepAliveInitialDelayMillis: 10000, // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è keep-alive (10 —Å–µ–∫—É–Ω–¥) 
      statement_timeout: 30000    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)
    }
  : {
      host: process.env.PGHOST || 'localhost',
      port: parseInt(process.env.PGPORT || '5432'),
      user: process.env.PGUSER || 'postgres',
      password: process.env.PGPASSWORD || '',
      database: process.env.PGDATABASE || 'postgres',
      max: 15,
      min: 2,
      idleTimeoutMillis: 60000,
      connectionTimeoutMillis: 10000,
      allowExitOnIdle: false,
      keepAlive: true,
      keepAliveInitialDelayMillis: 10000,
      statement_timeout: 30000
    };

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
let pool = new Pool(poolConfig);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
pool.on('error', (err: Error) => {
  console.error('[DB] ‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL:', err.message);
  
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
  console.log('[DB] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å —Ä–∞–∑—Ä—ã–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (err.message.includes('connection') || 
      err.message.includes('timeout') || 
      err.message.includes('terminated') ||
      err.message.includes('closed')) {
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    setTimeout(async () => {
      try {
        console.log('[DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
        const isConnected = await testConnection();
        
        if (!isConnected) {
          console.log('[DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
          await reconnect();
        } else {
          console.log('[DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        }
      } catch (reconnectError) {
        console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', 
          reconnectError instanceof Error ? reconnectError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    }, 1000); // –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
  }
  
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
});

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Drizzle ORM
export const db = drizzle(pool, { schema });

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbMonitor = new DatabaseMonitor(pool, db);

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
dbMonitor.start();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { pool, dbMonitor };

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
 * @returns Promise<boolean> true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
 */
export async function testConnection(): Promise<boolean> {
  let client = null;
  
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connectPromise = pool.connect();
    const timeoutPromise = new Promise<null>((_, reject) => {
      setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')), 5000);
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    client = await Promise.race([connectPromise, timeoutPromise]) as PoolClient;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω
    if (!client) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    const queryPromise = client.query('SELECT NOW() as current_time');
    const queryTimeoutPromise = new Promise<null>((_, reject) => {
      setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')), 5000);
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const result = await Promise.race([queryPromise, queryTimeoutPromise]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (result && result.rows && result.rows.length > 0) {
      console.log(`[DB] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time})`);
      return true;
    } else {
      console.warn('[DB] ‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      return false;
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('[DB] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', errorMessage);
    return false;
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–æ–ª—É—á–µ–Ω
    if (client) {
      try {
        client.release();
      } catch (releaseError) {
        console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', 
          releaseError instanceof Error ? releaseError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    }
  }
}

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ç–∞–π–º–∞—É—Ç–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * @param attempts –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * @returns Promise<boolean> true, –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
 */
export async function reconnect(attempts = 5): Promise<boolean> {
  console.log(`[DB] üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${attempts})...`);
  
  let lastError = null;
  
  for (let i = 0; i < attempts; i++) {
    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      try {
        const endPromise = pool.end();
        const endTimeoutPromise = new Promise<void>((resolve) => {
          setTimeout(() => {
            console.warn('[DB] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
            resolve();
          }, 5000);
        });
        
        await Promise.race([endPromise, endTimeoutPromise]);
        console.log('[DB] –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç');
      } catch (endError) {
        console.warn('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º):', 
          endError instanceof Error ? endError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const reconnectPoolConfig = {
        ...poolConfig,
        connectionTimeoutMillis: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        max: 5,                        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—å—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        min: 1,                        // –ú–∏–Ω–∏–º—É–º 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      };
      
      console.log('[DB] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
      const newPool = new Pool(reconnectPoolConfig);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      console.log('[DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
      const connectPromise = newPool.connect();
      const connectTimeoutPromise = new Promise<null>((_, reject) => {
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –ø—É–ª—É')), 10000);
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
      const client = await Promise.race([connectPromise, connectTimeoutPromise]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω
      if (!client) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const queryPromise = client.query('SELECT NOW() as current_time');
      const queryTimeoutPromise = new Promise<null>((_, reject) => {
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')), 5000);
      });
      
      const result = await Promise.race([queryPromise, queryTimeoutPromise]);
      
      if (client) {
        try {
          client.release();
        } catch (releaseError) {
          console.warn('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', 
            releaseError instanceof Error ? releaseError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (result && result.rows && result.rows.length > 0) {
        console.log(`[DB] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time})`);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞
        newPool.on('error', (err: Error) => {
          console.error('[DB] ‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π PostgreSQL:', err.message);
          
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
          if (err.message.includes('connection') || 
              err.message.includes('timeout') || 
              err.message.includes('terminated') ||
              err.message.includes('closed')) {
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            setTimeout(async () => {
              try {
                console.log('[DB] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
                const isConnected = await testConnection();
                
                if (!isConnected) {
                  console.log('[DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                  await reconnect();
                } else {
                  console.log('[DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                }
              } catch (reconnectError) {
                console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', 
                  reconnectError instanceof Error ? reconnectError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
              }
            }, 1000);
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—É–ª–∞ –∏ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
        // @ts-ignore: –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø—É–ª–∞
        pool = newPool;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ORM —Å –Ω–æ–≤—ã–º –ø—É–ª–æ–º
        // @ts-ignore: –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ db
        db = drizzle(pool, { schema });
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        dbMonitor.stop();
        // @ts-ignore: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
        dbMonitor = new DatabaseMonitor(pool, db);
        dbMonitor.start();
        
        return true;
      } else {
        throw new Error('–ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      }
    } catch (error) {
      lastError = error;
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error(`[DB] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${i+1} –∏–∑ ${attempts}: ${errorMessage}`);
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ç–∞–π–º–∞—É—Ç–∞
      if (i < attempts - 1) {
        const delay = 2000 * Math.pow(1.5, i); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å 2 —Å–µ–∫—É–Ω–¥
        const cappedDelay = Math.min(delay, 30000); // –ù–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥
        
        console.log(`[DB] ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(cappedDelay/1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, cappedDelay));
      }
    }
  }
  
  const errorMessage = lastError instanceof Error ? lastError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  console.error(`[DB] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ ${attempts} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${errorMessage}`);
  
  return false;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @param query SQL-–∑–∞–ø—Ä–æ—Å
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @param retries –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param delayMs –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å
 * @returns Promise<QueryResult<any>> –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º
async function executeQueryWithRetry(
  query: string,
  params: any[] = [],
  retries = 3,
  delayMs = 1000
): Promise<QueryResult<any>> {
  for (let attempt = 0; attempt <= retries; attempt++) {
    try {
      const client = await pool.connect();
      try {
        const result = await client.query(query, params);
        return result;
      } finally {
        client.release();
      }
    } catch (error: any) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const isConnectionError = error.message.includes('connection') || 
                                error.message.includes('socket') ||
                                error.message.includes('timeout') ||
                                error.code === 'ECONNREFUSED' ||
                                error.code === 'ETIMEDOUT' ||
                                error.code === '57P01'; // SQL state code for admin shutdown
      
      if (isConnectionError && attempt < retries) {
        console.warn(`[DB] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${retries}): ${error.message}`);
        
        // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if (attempt === 0) {
          await reconnect(1);
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
        const waitTime = delayMs * Math.pow(2, attempt);
        await new Promise(resolve => setTimeout(resolve, waitTime));
        continue;
      }
      
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏
      throw error;
    }
  }
  
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const queryWithRetry = executeQueryWithRetry;

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
 * @returns Promise<boolean> true, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
 */
export async function testDatabaseConnection(): Promise<boolean> {
  try {
    const client = await pool.connect();
    try {
      const result = await client.query('SELECT NOW() as current_time');
      console.log(`[DB Test] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ: ${result.rows[0].current_time}`);
      return true;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('[DB Test] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}