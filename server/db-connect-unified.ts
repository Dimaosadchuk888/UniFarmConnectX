/**
 * –°–ü–†–û–©–ï–ù–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û PRODUCTION NEON DB
 * –¢—ñ–ª—å–∫–∏ –ø—Ä—è–º–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ep-lucky-boat-a463bggt
 */

import { Pool, PoolClient } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from '../shared/schema.js';
import logger from './utils/logger';

// PRODUCTION DATABASE CONNECTION STRING
const PRODUCTION_DB_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
let globalDb: any = null;
let globalPool: any = null;
let globalDbType: string = 'unknown';
let connectionRetries = 0;
const MAX_RETRIES = 5;
const RETRY_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

class SimpleProductionDB {
  private static instance: SimpleProductionDB;
  private pool: Pool | null = null;
  private drizzleDb: any = null;

  private constructor() {
    console.log('üéØ [DB] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PRODUCTION –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ep-lucky-boat-a463bggt');
  }

  public static getInstance(): SimpleProductionDB {
    if (!SimpleProductionDB.instance) {
      SimpleProductionDB.instance = new SimpleProductionDB();
    }
    return SimpleProductionDB.instance;
  }

  public async getPool(): Promise<Pool> {
    if (!this.pool) {
      console.log('üöÄ [DB] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PRODUCTION –±–∞–∑–∏...');

      this.pool = new Pool({
        connectionString: PRODUCTION_DB_URL,
        ssl: { rejectUnauthorized: false },
        max: 10,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 10000,
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      try {
        const client = await this.pool.connect();
        const result = await client.query('SELECT current_database(), COUNT(*) as user_count FROM public.users');
        client.release();

        const dbName = result.rows[0].current_database;
        const userCount = result.rows[0].user_count;

        console.log(`‚úÖ [DB CONNECTED] to ep-lucky-boat-a463bggt`);
        console.log(`‚úÖ [DB] –ë–∞–∑–∞: ${dbName}, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${userCount}`);

        if (userCount === '4') {
          console.log('üéØ [DB] –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û: –ü–†–ê–í–ò–õ–¨–ù–ê production –±–∞–∑–∞ –∑ 4 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏!');
        } else {
          console.log(`‚ö†Ô∏è [DB] –£–í–ê–ì–ê: –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 4 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, –∑–Ω–∞–π–¥–µ–Ω–æ ${userCount}`);
        }
      } catch (error) {
        console.error('‚ùå [DB] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error.message);
        throw error;
      }
    }

    return this.pool;
  }

  public async getClient(): Promise<PoolClient> {
    const pool = await this.getPool();
    return pool.connect();
  }

  public async getDrizzle() {
    if (!this.drizzleDb) {
      const pool = await this.getPool();
      this.drizzleDb = drizzle(pool, { schema });
    }
    return this.drizzleDb;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç —î–¥–∏–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞
const dbManager = SimpleProductionDB.getInstance();

// –û—Å–Ω–æ–≤–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
export const getConnectionManager = () => dbManager;
export const pool = {
  connect: async () => {
    // –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É production –±–∞–∑—É
    const productionPool = new Pool({
      connectionString: PRODUCTION_DB_URL,
      ssl: { rejectUnauthorized: false }
    });
    return productionPool.connect();
  },
  query: async (text: string, params: any[] = []) => {
    // –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É production –±–∞–∑—É
    const productionPool = new Pool({
      connectionString: PRODUCTION_DB_URL,
      ssl: { rejectUnauthorized: false }
    });
    const client = await productionPool.connect();
    try {
      return await client.query(text, params);
    } finally {
      client.release();
      await productionPool.end();
    }
  }
};

export const db = new Proxy({} as any, {
  get(target, prop) {
    return async (...args: any[]) => {
      // –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É production –±–∞–∑—É
      const productionPool = new Pool({
        connectionString: PRODUCTION_DB_URL,
        ssl: { rejectUnauthorized: false }
      });
      const drizzleDb = drizzle(productionPool, { schema });
      return drizzleDb[prop](...args);
    };
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ
 */
export async function isDatabaseHealthy(): Promise<boolean> {
  try {
    if (!db) return false;

    const result = await Promise.race([
      db.execute('SELECT 1 as health_check'),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Health check timeout')), 5000))
    ]);

    return result !== null;
  } catch (error) {
    console.warn('[DB Health] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
    return false;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param {string} query SQL –∑–∞–ø—Ä–æ—Å
 * @param {any[]} params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
export async function queryWithRetry(query: string, params: any[] = []): Promise<any> {
  const maxRetries = 3;
  let lastError: any;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      if (!globalDb || !(await isDatabaseHealthy())) {
        console.log(`[DB Query] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})...`);
        globalDb = null;
        globalPool = null;
        // await initializeDatabase();  // Assuming initializeDatabase is defined elsewhere.  If not, use dbManager.getPool() or similar
        await dbManager.getPool(); // Trying this instead
      }

      console.log(`[DB Query] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, query.substring(0, 100));

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const queryPromise = globalDb.execute(query, params);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Query execution timeout')), 30000)
      );

      const result = await Promise.race([queryPromise, timeoutPromise]);

      if (attempt > 1) {
        console.log(`[DB Query] ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
      }

      return result;
    } catch (error) {
      lastError = error;
      console.error(`[DB Query] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error);

      if (attempt < maxRetries) {
        // –û—á–∏—â–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        globalDb = null;
        globalPool = null;

        // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        const delay = 1000 * Math.pow(2, attempt - 1); // 1s, 2s, 4s
        console.log(`[DB Query] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  console.error('[DB Query] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
  throw lastError;
}

export async function getDbConnection() {
  return dbManager.getPool();
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å retry –ª–æ–≥–∏–∫–æ–π
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
 */
export async function testConnection(): Promise<boolean> {
  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      console.log(`[DB Connection] üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES}: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);

      if (!globalDb) {
        console.log('[DB Connection] üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
        // await initializeDatabase(); // Assuming initializeDatabase is defined elsewhere. If not, use dbManager.getPool() or similar
        await dbManager.getPool(); // Trying this instead
      }

      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const testPromise = globalDb.execute('SELECT 1 as test');
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Database query timeout')), 10000)
      );

      const result = await Promise.race([testPromise, timeoutPromise]);
      console.log(`[DB Connection] ‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, result);

      connectionRetries = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      return true;
    } catch (error) {
      console.error(`[DB Connection] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_RETRIES}):`, error);

      if (attempt < MAX_RETRIES) {
        console.log(`[DB Connection] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${RETRY_DELAY}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));

        // –û—á–∏—â–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        globalDb = null;
        globalPool = null;
      } else {
        connectionRetries = attempt;
        console.error('[DB Connection] ‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    }
  }

  return false;
}

// –°—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
export function getConnectionStatus() {
  return {
    isConnected: true,
    connectionName: 'production-neon-ep-lucky-boat-a463bggt',
    isMemoryMode: false
  };
}

export const dbType = 'postgres';
export const dbState = {
  isReady: true
};