/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é fallback —Ä–µ–∂–∏–º—ñ–≤
 * 
 * –¶–µ–π –º–æ–¥—É–ª—å –∑–∞–±–µ–∑–ø–µ—á—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—É —Ä–æ–±–æ—Ç—É –¥–æ–¥–∞—Ç–∫—É –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
 * –æ—Å–Ω–æ–≤–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ in-memory —Å—Ö–æ–≤–∏—â–µ.
 */

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import { Pool, PoolClient } from 'pg';
import * as fs from 'fs';
import * as path from 'path';
import { DatabaseEventType, emitDbEvent } from './utils/db-events';

// Force SSL for Neon DB ONLY - –±–ª–æ–∫–∏—Ä—É–µ–º Replit DB
process.env.PGSSLMODE = 'require';
process.env.DATABASE_PROVIDER = 'neon';
process.env.FORCE_NEON_DB = 'true';
process.env.DISABLE_REPLIT_DB = 'true';
process.env.USE_LOCAL_DB_ONLY = 'false';

// –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø - –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó production –±–∞–∑–∏
// –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É production –±–∞–∑—É
process.env.DATABASE_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';
process.env.PGHOST = 'ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech';
process.env.PGUSER = 'neondb_owner';
process.env.PGPASSWORD = 'npg_SpgdNBV70WKl';
process.env.PGDATABASE = 'neondb';
process.env.PGPORT = '5432';

// –õ–æ–≥–∏
const logEnabled = process.env.DB_DEBUG === 'true';
const logFile = path.join(process.cwd(), 'logs', 'db-connect.log');

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
interface DBConfig {
  connectionString: string;
  name: string;
  priority: number;
}

// –ö–ª–∞—Å –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
class DatabaseConnectionManager {
  private static instance: DatabaseConnectionManager;
  private dbConfigs: DBConfig[] = [];
  private currentPool: Pool | null = null;
  private currentConfig: DBConfig | null = null;
  
  // –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ø—Ä–∏–º—É—Å–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó production –±–∞–∑–∏
  private readonly PRODUCTION_CONNECTION = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';
  private isMemoryMode = false;
  private memoryStorage: Map<string, any[]> = new Map();

  private constructor() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (logEnabled && !fs.existsSync(path.dirname(logFile))) {
      try {
        fs.mkdirSync(path.dirname(logFile), { recursive: true });
      } catch (err) {
        console.error('[DB] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤:', err);
      }
    }

    this.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
  }

  public static getInstance(): DatabaseConnectionManager {
    if (!DatabaseConnectionManager.instance) {
      DatabaseConnectionManager.instance = new DatabaseConnectionManager();
    }
    return DatabaseConnectionManager.instance;
  }

  private log(message: string, isError = false): void {
    if (!logEnabled) return;

    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;

    console[isError ? 'error' : 'log'](message);

    if (logEnabled) {
      try {
        fs.appendFileSync(logFile, logMessage);
      } catch (err) {
        console.error('[DB] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥-—Ñ–∞–π–ª:', err);
      }
    }
  }

  // –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  public addConfig(config: DBConfig): void {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –¥–æ–¥–∞–Ω–∞ –≤–∂–µ —Ç–∞–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    if (this.dbConfigs.some(c => c.name === config.name)) {
      this.log(`–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ —ñ–º–µ–Ω–µ–º "${config.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
      return;
    }

    this.dbConfigs.push(config);
    this.log(`–î–æ–¥–∞–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: ${config.name} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${config.priority})`);

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - –º–µ–Ω—à–µ —á–∏—Å–ª–æ)
    this.dbConfigs.sort((a, b) => a.priority - b.priority);
  }

  // –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î: –ø—Ä—è–º—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó production –±–∞–∑–∏
  public async getPool(): Promise<Pool | null> {
    console.log('üéØ [DB] –ü–†–ò–ú–£–°–û–í–ï –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û PRODUCTION –ë–ê–ó–ò: ep-lucky-boat-a463bggt');
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª —è–∫—â–æ —î
    if (this.currentPool) {
      try {
        await this.currentPool.end();
        console.log('‚úÖ [DB] –ó–∞–∫—Ä–∏—Ç–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª');
      } catch (err) {
        console.error('‚ö†Ô∏è [DB] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—É–ª—É:', err);
      }
      this.currentPool = null;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—É–ª –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó production –±–∞–∑–∏
    try {
      this.currentPool = new Pool({
        connectionString: this.PRODUCTION_CONNECTION,
        ssl: { rejectUnauthorized: false },
        max: 10,
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 10000,
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      const client = await this.currentPool.connect();
      const result = await client.query('SELECT current_database(), COUNT(*) as user_count FROM public.users');
      client.release();
      
      const dbName = result.rows[0].current_database;
      const userCount = result.rows[0].user_count;
      
      console.log(`‚úÖ [DB] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏: ${dbName}`);
      console.log(`‚úÖ [DB] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${userCount}`);
      
      if (userCount === '4') {
        console.log('üéØ [DB] –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û: –¶–µ –ü–†–ê–í–ò–õ–¨–ù–ê production –±–∞–∑–∞ –∑ 4 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏!');
      } else {
        console.log(`‚ö†Ô∏è [DB] –£–í–ê–ì–ê: –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 4 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, –∑–Ω–∞–π–¥–µ–Ω–æ ${userCount}`);
      }
      
      return this.currentPool;
    } catch (error) {
      console.error('‚ùå [DB] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ production –±–∞–∑–∏:', error.message);
      return null;
    }

    // –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ in-memory storage, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null
    if (this.isMemoryMode) {
      this.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ in-memory —Å—Ö–æ–≤–∏—â–µ –∑–∞–º—ñ—Å—Ç—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
      return null;
    }

    // –°–ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è, –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
    for (const config of this.dbConfigs) {
      try {
        this.log(`–°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${config.name}...`);

        // –†–æ–∑—à–∏—Ä–µ–Ω—ñ –æ–ø—Ü—ñ—ó –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –∫—Ä–∞—â–æ—é —Å—Ç—ñ–π–∫—ñ—Å—Ç—é
        const pool = new Pool({
          connectionString: config.connectionString,
          connectionTimeoutMillis: 7000,     // –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
          max: 10,                           // –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω—å
          idleTimeoutMillis: 30000,          // 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—Å—Ç–æ—é
          allowExitOnIdle: false,            // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏—Ö—ñ–¥ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ—ó
          ssl: {
            rejectUnauthorized: false        // –î–æ–∑–≤–æ–ª—è—î–º–æ —Å–∞–º–æ–ø—ñ–¥–ø–∏—Å–∞–Ω—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
          }
        });

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å—Ç–∞–Ω—É –ø—É–ª—É
        pool.on('error', (err) => {
          this.log(`–ü–æ–º–∏–ª–∫–∞ –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å ${config.name}: ${err.message}`, true);

          // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —Ñ–∞—Ç–∞–ª—å–Ω–∞, —Å–∫–∏–¥–∞—î–º–æ –ø—É–ª
          if (err.message.includes('connection terminated') || 
              err.message.includes('terminating') ||
              err.message.includes('Connection terminated')) {
            this.log(`–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è, —Å–∫–∏–¥–∞—î–º–æ –ø—É–ª ${config.name}`, true);
            if (this.currentPool === pool) {
              this.currentPool = null;
              this.currentConfig = null;
            }
          }
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ —Ñ–∞–∫—Ç–∏—á–Ω–∏–º –ø—Ä–æ—Å—Ç–∏–º –∑–∞–ø–∏—Ç–æ–º
        const client = await pool.connect();
        try {
          const startTime = Date.now();
          await client.query('SELECT 1 as result');
          const queryTime = Date.now() - startTime;
          
          this.log(`‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${config.name} —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          emitDbEvent(
            DatabaseEventType.CONNECTED,
            `–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${config.name}`,
            undefined,
            { 
              connectionName: config.name,
              responseTime: queryTime,
              priority: config.priority
            }
          );
        } finally {
          client.release();
        }

        this.log(`‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${config.name} –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);

        // –Ø–∫—â–æ –±—É–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ
        if (this.currentPool && this.currentPool !== pool) {
          try {
            await this.currentPool.end();
            this.log(`–ó–∞–∫—Ä–∏—Ç–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ ${this.currentConfig?.name || '–Ω–µ–≤—ñ–¥–æ–º–æ'}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—É–ª–∞
            emitDbEvent(
              DatabaseEventType.DISCONNECTED,
              `–ó–∞–∫—Ä—ã—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${this.currentConfig?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
              undefined,
              { previousConnection: this.currentConfig?.name || 'unknown' }
            );
          } catch (err) {
            const errorMessage = err instanceof Error ? err.message : String(err);
            this.log(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—É–ª—É: ${errorMessage}`, true);
          }
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –ø—É–ª —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π
        this.currentPool = pool;
        this.currentConfig = config;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (this.isMemoryMode) {
          emitDbEvent(
            DatabaseEventType.RECOVERY_SUCCESS,
            `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${config.name} –ø–æ—Å–ª–µ —Ä–µ–∂–∏–º–∞ in-memory`,
            undefined,
            { connectionName: config.name }
          );
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ in-memory —Ä–µ–∂–∏–º–∞
          this.isMemoryMode = false;
        }

        return pool;
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${config.name}: ${errorMessage}`, true);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        emitDbEvent(
          DatabaseEventType.RECONNECT_FAILED,
          `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${config.name}`,
          errorMessage,
          { 
            connectionName: config.name,
            priority: config.priority,
            remainingAttempts: this.dbConfigs.length - this.dbConfigs.indexOf(config) - 1
          }
        );

        // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        if (errorMessage.includes('endpoint is disabled')) {
          this.log(`Neon DB endpoint –≤–∏–º–∫–Ω–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É.`, true);
        } else if (errorMessage.includes('timeout')) {
          this.log(`–¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${config.name}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É.`, true);
        }
      }
    }

    // –Ø–∫—â–æ –∂–æ–¥–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è —ñ –¥–æ–∑–≤–æ–ª–µ–Ω–æ in-memory —Ä–µ–∂–∏–º
    const allowMemoryFallback = process.env.ALLOW_MEMORY_FALLBACK === 'true';
    if (allowMemoryFallback) {
      this.log('‚ö†Ô∏è –í—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º in-memory', true);
      this.isMemoryMode = true;
      this.initMemoryStorage();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º in-memory
      emitDbEvent(
        DatabaseEventType.FALLBACK_MEMORY,
        '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º in-memory',
        undefined,
        {
          triedConnections: this.dbConfigs.map(config => config.name),
          tablesInitialized: Array.from(this.memoryStorage.keys())
        }
      );
    } else {
      this.log('‚ùå –í—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–≤–¥–∞–ª—ñ, in-memory —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ', true);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–ª–Ω–æ–º –æ—Ç–∫–∞–∑–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      emitDbEvent(
        DatabaseEventType.DISCONNECTED,
        '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã, —Ä–µ–∂–∏–º in-memory –æ—Ç–∫–ª—é—á–µ–Ω',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        {
          triedConnections: this.dbConfigs.map(config => config.name),
          allowMemoryFallback: false
        }
      );
    }

    return null;
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Ç—É
  public async getClient(): Promise<PoolClient | null> {
    const pool = await this.getPool();

    if (!pool) {
      return null;
    }

    try {
      return await pool.connect();
    } catch (error) {
      this.log(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error instanceof Error ? error.message : String(error)}`, true);
      return null;
    }
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è in-memory —Å—Ö–æ–≤–∏—â–∞
  private initMemoryStorage(): void {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏
    this.memoryStorage.set('users', []);
    this.memoryStorage.set('balances', []);
    this.memoryStorage.set('farming_deposits', []);
    this.memoryStorage.set('transactions', []);
    this.memoryStorage.set('referrals', []);
    this.memoryStorage.set('daily_bonuses', []);
    this.memoryStorage.set('partition_logs', []);

    this.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ in-memory —Å—Ö–æ–≤–∏—â–µ');
  }

  // –î–æ—Å—Ç—É–ø –¥–æ in-memory —Å—Ö–æ–≤–∏—â–∞
  public getMemoryStorage(tableName: string): any[] {
    if (!this.isMemoryMode) {
      this.log('–°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ in-memory —Å—Ö–æ–≤–∏—â–∞, –∞–ª–µ —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ', true);
      return [];
    }

    if (!this.memoryStorage.has(tableName)) {
      this.log(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ "${tableName}" –≤ in-memory —Å—Ö–æ–≤–∏—â—ñ`);
      this.memoryStorage.set(tableName, []);
    }

    return this.memoryStorage.get(tableName) || [];
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ in-memory
  public isInMemoryMode(): boolean {
    return this.isMemoryMode;
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  public getCurrentConnectionInfo(): { isConnected: boolean; connectionName: string | null; isMemoryMode: boolean } {
    return {
      isConnected: !!this.currentPool,
      connectionName: this.currentConfig?.name || null,
      isMemoryMode: this.isMemoryMode
    };
  }

  // –í–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º in-memory —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –∑–Ω–æ–≤—É
  public async resetConnection(): Promise<boolean> {
    this.log('–°–∫–∏–¥–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—É–ª, —è–∫—â–æ –≤—ñ–Ω —î
    if (this.currentPool) {
      try {
        await this.currentPool.end();
      } catch (error) {
        this.log(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É: ${error instanceof Error ? error.message : String(error)}`, true);
      }
    }

    this.currentPool = null;
    this.currentConfig = null;
    this.isMemoryMode = false;

    // –ü—Ä–æ–±—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –∑–Ω–æ–≤—É
    const pool = await this.getPool();
    return !!pool || this.isMemoryMode; // –£—Å–ø—ñ—à–Ω–æ, —è–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—É–ª –∞–±–æ –ø–µ—Ä–µ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º in-memory
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
export function getConnectionManager(): DatabaseConnectionManager {
  return DatabaseConnectionManager.getInstance();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –∑ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
export function initDatabaseConnections(): void {
  const manager = getConnectionManager();

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  const useNeonDb = process.env.USE_NEON_DB === 'true';
  const useLocalDb = process.env.USE_LOCAL_DB === 'true';
  const dbProvider = process.env.DATABASE_PROVIDER?.toLowerCase() || 'auto';

  console.log(`[Database] Configuration: useNeonDb=${useNeonDb}, useLocalDb=${useLocalDb}, dbProvider=${dbProvider}`);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ dbProvider
  if (dbProvider === 'neon') {
    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: 1) Neon DB, 2) –õ–æ–∫–∞–ª—å–Ω–∏–π PostgreSQL, 3) In-memory
    console.log('[Database] Using Neon DB as primary database');

    // 1. Neon.tech –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
    if (process.env.NEON_DATABASE_URL) {
      manager.addConfig({
        connectionString: process.env.NEON_DATABASE_URL,
        name: 'Neon.tech',
        priority: 1
      });
    }

    // 2. –û—Å–Ω–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Replit PostgreSQL
    if (process.env.DATABASE_URL) {
      manager.addConfig({
        connectionString: process.env.DATABASE_URL,
        name: 'Replit PostgreSQL',
        priority: 2
      });
    }

  } else if (dbProvider === 'replit') {
    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: 1) –õ–æ–∫–∞–ª—å–Ω–∏–π PostgreSQL, 2) Neon DB, 3) In-memory
    console.log('[Database] Using Replit PostgreSQL as primary database');

    // 1. –û—Å–Ω–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Replit PostgreSQL (–Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
    if (process.env.DATABASE_URL) {
      manager.addConfig({
        connectionString: process.env.DATABASE_URL,
        name: 'Replit PostgreSQL',
        priority: 1
      });
    }

    // 2. Neon.tech –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    if (process.env.NEON_DATABASE_URL) {
      manager.addConfig({
        connectionString: process.env.NEON_DATABASE_URL,
        name: 'Neon.tech',
        priority: 2
      });
    }
  } else {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º - —Å–ø—Ä–æ–±—É—î–º–æ –æ–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    console.log('[Database] Auto mode: will try all available database connections');

    // 1. Neon.tech –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, —è–∫—â–æ USE_NEON_DB=true
    if (useNeonDb && process.env.NEON_DATABASE_URL) {
      manager.addConfig({
        connectionString: process.env.NEON_DATABASE_URL,
        name: 'Neon.tech',
        priority: 1
      });
    }

    // 2. Replit PostgreSQL, —è–∫—â–æ USE_LOCAL_DB=true
    if (useLocalDb && process.env.BACKUP_DATABASE_URL) {
      manager.addConfig({
        connectionString: process.env.BACKUP_DATABASE_URL,
        name: 'Replit PostgreSQL',
        priority: useNeonDb ? 2 : 1  // –Ø–∫—â–æ Neon –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —Ü–µ –±—É–¥–µ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 1
      });
    }

    // –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∂–æ–¥–Ω–∏—Ö –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
    if (!useNeonDb && !useLocalDb) {
      console.log('[Database] No specific preferences set, using default order');

      // 1. Neon.tech –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      if (process.env.NEON_DATABASE_URL) {
        manager.addConfig({
          connectionString: process.env.NEON_DATABASE_URL,
          name: 'Neon.tech',
          priority: 1
        });
      }

      // 2. Replit PostgreSQL
      if (process.env.BACKUP_DATABASE_URL) {
        manager.addConfig({
          connectionString: process.env.BACKUP_DATABASE_URL,
          name: 'Replit PostgreSQL',
          priority: 2
        });
      }
    }
  }

  // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, —è–∫—â–æ —î
  if (process.env.ALTERNATE_DB_URL) {
    manager.addConfig({
      connectionString: process.env.ALTERNATE_DB_URL,
      name: 'Alternate DB',
      priority: 50  // –ù–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    });
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
  if (process.env.DEV_DATABASE_URL) {
    manager.addConfig({
      connectionString: process.env.DEV_DATABASE_URL,
      name: 'Development DB',
      priority: 100  // –ù–∞–π–Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
    });
  }

  // –ü—Ä–∏–º—É—Å–æ–≤–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º in-memory, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
  if (process.env.FORCE_MEMORY_STORAGE === 'true') {
    console.log('[Database] FORCE_MEMORY_STORAGE=true, forcing in-memory mode');
    manager.getPool(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ—Ö—ñ–¥ –≤ —Ä–µ–∂–∏–º in-memory
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –º–æ–¥—É–ª—è
initDatabaseConnections();

/**
 * –û–±'—î–∫—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Drizzle ORM
 * –ï–∫—Å–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from '@shared/schema';

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Drizzle instance
let drizzleInstance: any = null;

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Drizzle
function initDrizzleSync() {
  const manager = DatabaseConnectionManager.getInstance();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  setTimeout(async () => {
    try {
      const pool = await manager.getPool();
      if (pool) {
        drizzleInstance = drizzle(pool, { schema });
        console.log('[DB] Drizzle ORM —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
    } catch (error) {
      console.error('[DB] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Drizzle:', error);
    }
  }, 0);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Drizzle instance —Å –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
async function getDrizzle() {
  if (!drizzleInstance) {
    const pool = await DatabaseConnectionManager.getInstance().getPool();
    if (pool) {
      drizzleInstance = drizzle(pool, { schema });
    } else {
      throw new Error('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
    }
  }
  return drizzleInstance;
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Drizzle ORM
export const db = new Proxy({} as any, {
  get(target, prop) {
    if (prop === 'query') {
      return async (text: string, params: any[] = []) => {
        const pool = await DatabaseConnectionManager.getInstance().getPool();
        if (!pool) {
          throw new Error('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
        }
        return pool.query(text, params);
      };
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ Drizzle ORM
    return (...args: any[]) => {
      if (!drizzleInstance) {
        throw new Error('Drizzle ORM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      }
      
      const method = drizzleInstance[prop];
      if (typeof method === 'function') {
        return method.apply(drizzleInstance, args);
      }
      return method;
    };
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Drizzle –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
initDrizzleSync();

/**
 * –ü—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * –ï–∫—Å–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
export const pool = {
  query: async (text: string, params: any[] = []) => {
    const poolInstance = await DatabaseConnectionManager.getInstance().getPool();
    if (!poolInstance) {
      console.error('[DB] –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç: –≤—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
      throw new Error('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
    }
    return poolInstance.query(text, params);
  },
  connect: async () => {
    const poolInstance = await DatabaseConnectionManager.getInstance().getPool();
    if (!poolInstance) {
      console.error('[DB] –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞: –≤—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
      throw new Error('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
    }
    return poolInstance.connect();
  },
  end: async () => {
    const poolInstance = await DatabaseConnectionManager.getInstance().getPool();
    if (poolInstance) {
      console.log('[DB] –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
      return poolInstance.end();
    }
    console.log('[DB] –°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π –ø—É–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω—å (—ñ–≥–Ω–æ—Ä—É—î–º–æ)');
    return Promise.resolve();
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
 * @param text SQL –∑–∞–ø–∏—Ç
 * @param params –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
 * @param maxRetries –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É
 */
export async function queryWithRetry(text: string, params: any[] = [], maxRetries: number = 3): Promise<any> {
  let lastError;
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      const poolInstance = await DatabaseConnectionManager.getInstance().getPool();
      if (!poolInstance) {
        throw new Error('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
      }
      return await poolInstance.query(text, params);
    } catch (error) {
      lastError = error;
      if (attempt < maxRetries - 1) {
        // –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é (–∑–±—ñ–ª—å—à—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ–∂–Ω–æ—é —Å–ø—Ä–æ–±–æ—é)
        const delay = 500 * (attempt + 1);
        await new Promise(resolve => setTimeout(resolve, delay));
        console.error(`[DB] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É, —Å–ø—Ä–æ–±–∞ #${attempt + 1}/${maxRetries}: ${error instanceof Error ? error.message : String(error)}`);
      }
    }
  }
  console.error(`[DB] –í—Å—ñ —Å–ø—Ä–æ–±–∏ –∑–∞–ø–∏—Ç—É –Ω–µ–≤–¥–∞–ª—ñ. –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: ${lastError instanceof Error ? lastError.message : String(lastError)}`);
  throw lastError;
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * @returns –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
export async function getDbConnection() {
  return await DatabaseConnectionManager.getInstance().getPool();
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * @returns true, —è–∫—â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î
 */
export async function testConnection(): Promise<boolean> {
  try {
    await queryWithRetry('SELECT 1', [], 1);
    return true;
  } catch (error) {
    console.error('[DB] –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * @returns true, —è–∫—â–æ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–æ–Ω–µ–∫—Ç–∏—Ç–∏—Å—è
 */
export async function reconnect(): Promise<boolean> {
  return await DatabaseConnectionManager.getInstance().resetConnection();
}

/**
 * –¢–∏–ø –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
 */
export const dbType = 'postgres';

/**
 * –û–±'—î–∫—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å—Ç–∞–Ω—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
export const dbMonitor = {
  status: 'unknown' as 'ok' | 'error' | 'reconnecting' | 'unknown',
  
  async checkConnection(): Promise<boolean> {
    try {
      const result = await testConnection();
      this.status = result ? 'ok' : 'error';
      return result;
    } catch {
      this.status = 'error';
      return false;
    }
  },
  
  getStatus(): 'ok' | 'error' | 'reconnecting' | 'unknown' {
    return this.status;
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
 */
export function getMonitorStats() {
  return {
    status: dbMonitor.status,
    connection: DatabaseConnectionManager.getInstance().getCurrentConnectionInfo()
  };
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * @returns –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
 */
export function getConnectionStatus() {
  return DatabaseConnectionManager.getInstance().getCurrentConnectionInfo();
}

/**
 * –°—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
export const dbState = {
  isConnected: false,
  async update() {
    this.isConnected = await testConnection();
    return this.isConnected;
  }
};

// –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
dbState.update().catch(console.error);