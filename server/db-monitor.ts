/**
 * –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö,
 * —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 */

import { Pool, PoolClient } from 'pg';

type ConnectionStatus = 'ok' | 'error' | 'reconnecting';
type CheckResult = {
  timestamp: string;
  success: boolean;
  responseTime: number;
  error?: string;
};

type ReconnectResult = {
  timestamp: string;
  success: boolean;
  attempts: number;
  totalTime: number;
  error?: string;
};

type MonitorStats = {
  totalChecks: number;
  successfulChecks: number;
  failedChecks: number;
  totalReconnects: number;
  successfulReconnects: number;
  failedReconnects: number;
  avgResponseTime: number;
  avgReconnectTime: number;
  uptime: number;
  downtime: number;
  startTime: string;
  lastDownTime?: string;
  lastUpTime?: string;
};

class DatabaseMonitor {
  private static instance: DatabaseMonitor;
  private status: ConnectionStatus = 'ok';
  private checkInterval: number = 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private timerId: NodeJS.Timeout | null = null;
  private lastCheckResult: CheckResult | null = null;
  private lastReconnectResult: ReconnectResult | null = null;
  private reconnectingInProgress: boolean = false;
  private consecutiveFailures: number = 0;
  private maxConsecutiveFailures: number = 3;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  private stats: MonitorStats = {
    totalChecks: 0,
    successfulChecks: 0,
    failedChecks: 0,
    totalReconnects: 0,
    successfulReconnects: 0,
    failedReconnects: 0,
    avgResponseTime: 0,
    avgReconnectTime: 0,
    uptime: 0,
    downtime: 0,
    startTime: new Date().toISOString(),
  };
  
  private constructor() {
    this.startMonitoring();
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
   */
  public static getInstance(): DatabaseMonitor {
    if (!DatabaseMonitor.instance) {
      DatabaseMonitor.instance = new DatabaseMonitor();
    }
    return DatabaseMonitor.instance;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private startMonitoring(): void {
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.checkConnection();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.timerId = setInterval(() => {
      this.checkConnection();
    }, this.checkInterval);
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  private async checkConnection(): Promise<void> {
    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (this.reconnectingInProgress) {
      return;
    }
    
    const startTime = Date.now();
    
    try {
      const isConnected = await testConnection();
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      this.stats.totalChecks++;
      
      if (isConnected) {
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        this.status = 'ok';
        this.consecutiveFailures = 0;
        this.stats.successfulChecks++;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if (!this.stats.lastUpTime || this.stats.lastDownTime && new Date(this.stats.lastDownTime) > new Date(this.stats.lastUpTime)) {
          this.stats.lastUpTime = new Date().toISOString();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
        this.stats.avgResponseTime = 
          (this.stats.avgResponseTime * (this.stats.successfulChecks - 1) + responseTime) / 
          this.stats.successfulChecks;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        this.stats.uptime += this.checkInterval / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.lastCheckResult = {
          timestamp: new Date().toISOString(),
          success: true,
          responseTime,
        };
        
        console.log(`[${new Date().toISOString()}] ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${responseTime}ms)`);
      } else {
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        this.handleConnectionFailure('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', responseTime);
      }
    } catch (error) {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      this.handleConnectionFailure(errorMessage, responseTime);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private handleConnectionFailure(error: string, responseTime: number): void {
    this.stats.totalChecks++;
    this.stats.failedChecks++;
    this.consecutiveFailures++;
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±–æ—è
    this.stats.lastDownTime = new Date().toISOString();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
    this.stats.downtime += this.checkInterval / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.lastCheckResult = {
      timestamp: new Date().toISOString(),
      success: false,
      responseTime,
      error,
    };
    
    console.error(`[${new Date().toISOString()}] ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${responseTime}ms): ${error}`);
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫, 
    // –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (this.consecutiveFailures >= this.maxConsecutiveFailures) {
      this.attemptReconnect();
    }
  }
  
  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  private async attemptReconnect(): Promise<void> {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (this.reconnectingInProgress) {
      return;
    }
    
    this.reconnectingInProgress = true;
    this.status = 'reconnecting';
    
    this.stats.totalReconnects++;
    const startTime = Date.now();
    
    console.log(`[${new Date().toISOString()}] üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ ${this.consecutiveFailures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫`);
    
    try {
      const isReconnected = await reconnect();
      const endTime = Date.now();
      const reconnectTime = endTime - startTime;
      
      if (isReconnected) {
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        this.stats.successfulReconnects++;
        this.status = 'ok';
        this.consecutiveFailures = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.stats.avgReconnectTime = 
          (this.stats.avgReconnectTime * (this.stats.successfulReconnects - 1) + reconnectTime) / 
          this.stats.successfulReconnects;
        
        // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.stats.lastUpTime = new Date().toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.lastReconnectResult = {
          timestamp: new Date().toISOString(),
          success: true,
          attempts: 1,
          totalTime: reconnectTime,
        };
        
        console.log(`[${new Date().toISOString()}] ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${reconnectTime}ms)`);
      } else {
        // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.handleReconnectFailure('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', reconnectTime);
      }
    } catch (error) {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const endTime = Date.now();
      const reconnectTime = endTime - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      this.handleReconnectFailure(errorMessage, reconnectTime);
    } finally {
      this.reconnectingInProgress = false;
    }
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private handleReconnectFailure(error: string, reconnectTime: number): void {
    this.stats.failedReconnects++;
    this.status = 'error';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.lastReconnectResult = {
      timestamp: new Date().toISOString(),
      success: false,
      attempts: 1,
      totalTime: reconnectTime,
      error,
    };
    
    console.error(`[${new Date().toISOString()}] ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${reconnectTime}ms): ${error}`);
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  public stopMonitoring(): void {
    if (this.timerId) {
      clearInterval(this.timerId);
      this.timerId = null;
    }
  }
  
  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  public resumeMonitoring(): void {
    if (!this.timerId) {
      this.startMonitoring();
    }
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public setCheckInterval(interval: number): void {
    if (interval < 1000) {
      throw new Error('–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1000 –º—Å');
    }
    
    this.checkInterval = interval;
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (this.timerId) {
      this.stopMonitoring();
      this.startMonitoring();
    }
    
    console.log(`[${new Date().toISOString()}] ‚öôÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${interval}ms`);
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public resetStats(): void {
    this.stats = {
      totalChecks: 0,
      successfulChecks: 0,
      failedChecks: 0,
      totalReconnects: 0,
      successfulReconnects: 0,
      failedReconnects: 0,
      avgResponseTime: 0,
      avgReconnectTime: 0,
      uptime: 0,
      downtime: 0,
      startTime: new Date().toISOString(),
    };
    
    console.log(`[${new Date().toISOString()}] üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞`);
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public getStatus(): ConnectionStatus {
    return this.status;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public getCheckInterval(): number {
    return this.checkInterval;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public getLastCheckResult(): CheckResult | null {
    return this.lastCheckResult;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  public getLastReconnectResult(): ReconnectResult | null {
    return this.lastReconnectResult;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public getStats(): MonitorStats {
    return { ...this.stats }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public async forceCheck(): Promise<boolean> {
    await this.checkConnection();
    return this.status === 'ok';
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  public async forceReconnect(): Promise<boolean> {
    await this.attemptReconnect();
    return this.status === 'ok';
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
const databaseMonitor = DatabaseMonitor.getInstance();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
export default databaseMonitor;