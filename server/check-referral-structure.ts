import { supabase } from '../core/supabase.js';

async function checkReferralStructure() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –†–ï–§–ï–†–ê–õ–û–í ===\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
    const { data: level1Referrals, error: level1Error } = await supabase
      .from('users')
      .select('id, username, balance_uni, balance_ton, uni_deposit_amount, created_at')
      .eq('referred_by', 74)
      .order('created_at', { ascending: false });
      
    if (level1Error) throw level1Error;
    
    console.log(`üìä –†–ï–§–ï–†–ê–õ–´ –ü–ï–†–í–û–ì–û –£–†–û–í–ù–Ø (User 74):`);
    console.log(`–í—Å–µ–≥–æ: ${level1Referrals?.length || 0} —á–µ–ª–æ–≤–µ–∫\n`);
    
    level1Referrals?.forEach((ref, i) => {
      console.log(`${i+1}. ${ref.username} (ID: ${ref.id})`);
      console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å: ${ref.balance_uni?.toLocaleString('ru-RU')} UNI, ${ref.balance_ton} TON`);
      console.log(`   üìà –î–µ–ø–æ–∑–∏—Ç: ${ref.uni_deposit_amount?.toLocaleString('ru-RU')} UNI`);
      console.log(`   üìÖ –î–∞—Ç–∞: ${new Date(ref.created_at).toLocaleString('ru-RU')}\n`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É—Ä–æ–≤–Ω—è–º (–Ω–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è)
    console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê –ü–û –£–†–û–í–ù–Ø–ú:\n');
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const level1Ids = level1Referrals?.map(r => r.id) || [];
    
    if (level1Ids.length > 0) {
      // –†–µ—Ñ–µ—Ä–∞–ª—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
      const { data: level2Referrals, error: level2Error } = await supabase
        .from('users')
        .select('id, username, referred_by')
        .in('referred_by', level1Ids);
        
      if (!level2Error && level2Referrals) {
        console.log(`–£—Ä–æ–≤–µ–Ω—å 2: ${level2Referrals.length} —á–µ–ª–æ–≤–µ–∫`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º
        const byParent = level2Referrals.reduce((acc, ref) => {
          if (!acc[ref.referred_by]) acc[ref.referred_by] = [];
          acc[ref.referred_by].push(ref);
          return acc;
        }, {} as Record<number, any[]>);
        
        Object.entries(byParent).forEach(([parentId, refs]) => {
          const parent = level1Referrals?.find(r => r.id === parseInt(parentId));
          console.log(`  ‚îî‚îÄ –æ—Ç ${parent?.username}: ${refs.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
        });
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥—ã –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüí∞ –î–û–•–û–î–´ –û–¢ –†–ï–§–ï–†–ê–õ–û–í:\n');
    
    const { data: referralRewards, error: rewardsError } = await supabase
      .from('transactions')
      .select('amount, currency, description, created_at')
      .eq('user_id', 74)
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (!rewardsError && referralRewards && referralRewards.length > 0) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:');
      referralRewards.forEach((tx, i) => {
        console.log(`${i+1}. +${parseFloat(tx.amount).toLocaleString('ru-RU')} ${tx.currency}`);
        console.log(`   ${tx.description}`);
        console.log(`   ${new Date(tx.created_at).toLocaleString('ru-RU')}\n`);
      });
      
      // –û–±—â–∞—è —Å—É–º–º–∞
      const totalUni = referralRewards
        .filter(tx => tx.currency === 'UNI')
        .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);
        
      const totalTon = referralRewards
        .filter(tx => tx.currency === 'TON')
        .reduce((sum, tx) => sum + parseFloat(tx.amount), 0);
        
      console.log(`\nüìä –ò–¢–û–ì–û –î–û–•–û–î–û–í:`);
      if (totalUni > 0) console.log(`UNI: ${totalUni.toLocaleString('ru-RU')}`);
      if (totalTon > 0) console.log(`TON: ${totalTon.toLocaleString('ru-RU')}`);
    } else {
      console.log('–î–æ—Ö–æ–¥–æ–≤ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
      console.log('(–û–Ω–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ–≥–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞)');
    }
    
    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    console.log('\nüîó –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê:');
    console.log(`https://t.me/YourBotName?start=TEST_1752129840905_dokxv0`);
    console.log('(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkReferralStructure();