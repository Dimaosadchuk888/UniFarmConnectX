import { supabase } from '../core/supabase.js';

async function checkUser74ReferralsSimple() {
  console.log('=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï 74 –ò –ï–ì–û –†–ï–§–ï–†–ê–õ–ê–• ===\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 74)
      .single();
      
    if (userError) throw userError;
    
    console.log('üë§ –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ Replit Preview:');
    console.log(`- ID: ${user.id}`);
    console.log(`- Telegram ID: ${user.telegram_id}`);
    console.log(`- Username: ${user.username}`);
    console.log(`- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${user.ref_code}`);
    console.log(`- –ë–∞–ª–∞–Ω—Å UNI: ${user.balance_uni?.toLocaleString('ru-RU') || 0}`);
    console.log(`- –ë–∞–ª–∞–Ω—Å TON: ${user.balance_ton || 0}`);
    console.log(`- –î–µ–ø–æ–∑–∏—Ç UNI: ${user.uni_deposit_amount?.toLocaleString('ru-RU') || 0}`);
    console.log(`- TON Boost –ø–∞–∫–µ—Ç: ${user.ton_boost_package || '–ù–µ—Ç'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ referrals
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–ª–µ inviter_id
    const { data: referralData, error: refError1 } = await supabase
      .from('referrals')
      .select('*')
      .eq('inviter_id', 74)
      .limit(5);
      
    if (!refError1 && referralData) {
      console.log(`\n–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals: ${referralData.length}`);
      if (referralData.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:', referralData);
      }
    } else {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ inviter_id:', refError1);
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤ ref_by —É–∫–∞–∑–∞–Ω ID 74
    const { data: invitedUsers, error: invitedError } = await supabase
      .from('users')
      .select('id, username, balance_uni, balance_ton, created_at')
      .eq('referred_by', 74)
      .limit(5);
      
    if (!invitedError && invitedUsers) {
      console.log(`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å referred_by = 74: ${invitedUsers.length}`);
      if (invitedUsers.length > 0) {
        invitedUsers.forEach((u, i) => {
          console.log(`${i+1}. ${u.username} (ID: ${u.id}), –ë–∞–ª–∞–Ω—Å: ${u.balance_uni} UNI`);
        });
      }
    } else {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π
      const { data: invitedUsers2, error: invitedError2 } = await supabase
        .from('users')
        .select('id, username, balance_uni, balance_ton, created_at')
        .eq('inviter_id', 74)
        .limit(5);
        
      if (!invitedError2 && invitedUsers2) {
        console.log(`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å inviter_id = 74: ${invitedUsers2.length}`);
      } else {
        console.log('\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–ª–µ–π');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è:');
    const userKeys = Object.keys(user);
    const referralRelatedKeys = userKeys.filter(key => 
      key.includes('ref') || 
      key.includes('invit') || 
      key.includes('parent')
    );
    console.log('–ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:', referralRelatedKeys);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkUser74ReferralsSimple();