/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
 * —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
 */

import { Pool } from 'pg';
import { getDbConfig } from './db-config';

// –°—Ç–∞—Ç—É—Å—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export type ConnectionStatus = 'ok' | 'error' | 'reconnecting';

// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export type CheckResult = {
  timestamp: string;
  success: boolean;
  responseTime: number;
  error?: string;
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export type ReconnectResult = {
  timestamp: string;
  success: boolean;
  attempts: number;
  totalTime: number;
  error?: string;
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
export type MonitorStats = {
  totalChecks: number;
  successfulChecks: number;
  failedChecks: number;
  totalReconnects: number;
  successfulReconnects: number;
  failedReconnects: number;
  avgResponseTime: number;
  avgReconnectTime: number;
  uptime: number;
  downtime: number;
  startTime: string;
  lastDownTime?: string;
  lastUpTime?: string;
};

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let status: ConnectionStatus = 'ok';
let lastCheckResult: CheckResult | null = null;
let lastReconnectResult: ReconnectResult | null = null;
let reconnectingInProgress = false;
let consecutiveFailures = 0;
const maxConsecutiveFailures = 3;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats: MonitorStats = {
  totalChecks: 0,
  successfulChecks: 0,
  failedChecks: 0,
  totalReconnects: 0,
  successfulReconnects: 0,
  failedReconnects: 0,
  avgResponseTime: 0,
  avgReconnectTime: 0,
  uptime: 0,
  downtime: 0,
  startTime: new Date().toISOString(),
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @param pool - –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkConnection(pool: Pool): Promise<boolean> {
  // –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  if (reconnectingInProgress) {
    return false;
  }
  
  const startTime = Date.now();
  let client = null;
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
    client = await pool.connect();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const result = await client.query('SELECT NOW() as current_time');
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    stats.totalChecks++;
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    status = 'ok';
    consecutiveFailures = 0;
    stats.successfulChecks++;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if (!stats.lastUpTime || stats.lastDownTime && new Date(stats.lastDownTime) > new Date(stats.lastUpTime)) {
      stats.lastUpTime = new Date().toISOString();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    stats.avgResponseTime = 
      (stats.avgResponseTime * (stats.successfulChecks - 1) + responseTime) / 
      stats.successfulChecks;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    stats.uptime += 30; // –¥–æ–±–∞–≤–ª—è–µ–º 30 —Å–µ–∫—É–Ω–¥ (—Ç–∏–ø–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    lastCheckResult = {
      timestamp: new Date().toISOString(),
      success: true,
      responseTime,
    };
    
    console.log(`[${new Date().toISOString()}] ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${responseTime}ms)`);
    
    return true;
  } catch (error) {
    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    handleConnectionFailure(errorMessage, responseTime);
    
    return false;
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    if (client) {
      try {
        client.release();
      } catch (releaseError) {
        console.error(`[${new Date().toISOString()}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:`, releaseError);
      }
    }
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @param error - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param responseTime - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
 */
function handleConnectionFailure(error: string, responseTime: number): void {
  stats.totalChecks++;
  stats.failedChecks++;
  consecutiveFailures++;
  
  // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±–æ—è
  stats.lastDownTime = new Date().toISOString();
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
  stats.downtime += 30; // –¥–æ–±–∞–≤–ª—è–µ–º 30 —Å–µ–∫—É–Ω–¥ (—Ç–∏–ø–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏)
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
  lastCheckResult = {
    timestamp: new Date().toISOString(),
    success: false,
    responseTime,
    error,
  };
  
  console.error(`[${new Date().toISOString()}] ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${responseTime}ms): ${error}`);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
  status = 'error';
}

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞
 * @returns Promise<boolean> - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export async function attemptReconnect(): Promise<boolean> {
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (reconnectingInProgress) {
    return false;
  }
  
  reconnectingInProgress = true;
  status = 'reconnecting';
  
  stats.totalReconnects++;
  const startTime = Date.now();
  
  console.log(`[${new Date().toISOString()}] üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ ${consecutiveFailures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const newPool = new Pool(getDbConfig());
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞
    const client = await newPool.connect();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await client.query('SELECT 1 as test');
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client.release();
    
    const endTime = Date.now();
    const reconnectTime = endTime - startTime;
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    stats.successfulReconnects++;
    status = 'ok';
    consecutiveFailures = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    stats.avgReconnectTime = 
      (stats.avgReconnectTime * (stats.successfulReconnects - 1) + reconnectTime) / 
      stats.successfulReconnects;
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    stats.lastUpTime = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    lastReconnectResult = {
      timestamp: new Date().toISOString(),
      success: true,
      attempts: 1,
      totalTime: reconnectTime,
    };
    
    console.log(`[${new Date().toISOString()}] ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${reconnectTime}ms)`);
    
    return true;
  } catch (error) {
    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const endTime = Date.now();
    const reconnectTime = endTime - startTime;
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    stats.failedReconnects++;
    status = 'error';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    lastReconnectResult = {
      timestamp: new Date().toISOString(),
      success: false,
      attempts: 1,
      totalTime: reconnectTime,
      error: errorMessage,
    };
    
    console.error(`[${new Date().toISOString()}] ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${reconnectTime}ms): ${errorMessage}`);
    
    return false;
  } finally {
    reconnectingInProgress = false;
  }
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export function resetStats(): void {
  stats = {
    totalChecks: 0,
    successfulChecks: 0,
    failedChecks: 0,
    totalReconnects: 0,
    successfulReconnects: 0,
    failedReconnects: 0,
    avgResponseTime: 0,
    avgReconnectTime: 0,
    uptime: 0,
    downtime: 0,
    startTime: new Date().toISOString(),
  };
  
  console.log(`[${new Date().toISOString()}] üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞`);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export function getStatus(): ConnectionStatus {
  return status;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export function getLastCheckResult(): CheckResult | null {
  return lastCheckResult;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function getLastReconnectResult(): ReconnectResult | null {
  return lastReconnectResult;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export function getStats(): MonitorStats {
  return { ...stats }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
 */
export function shouldReconnect(): boolean {
  return consecutiveFailures >= maxConsecutiveFailures && !reconnectingInProgress;
}