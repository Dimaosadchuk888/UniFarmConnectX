/**
 * –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
 */

import fetch from 'node-fetch';
import { db } from './db.js';
import { users } from '../shared/schema.js';
import { eq } from 'drizzle-orm';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendMessage(chatId, text, options = {}) {
  if (!BOT_TOKEN) {
    console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    });

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data.description);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ping
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
 */
async function handlePingCommand(chatId) {
  const responseTime = new Date().toISOString();
  return sendMessage(chatId, `üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}`);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /info
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
async function handleInfoCommand(chatId, { userId, username, firstName }) {
  const message = `
<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

ID: <code>${userId}</code>
–ò–º—è: ${firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
Username: ${username ? `@${username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}
Chat ID: <code>${chatId}</code>

–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString()}
  `;
  return sendMessage(chatId, message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /refcode
 * –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleRefCodeCommand(chatId, userId) {
  // –ó–¥–µ—Å—å –º—ã –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–π –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ref_code
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const [user] = await db.select()
      .from(users)
      .where(eq(users.telegram_id, userId));

    if (user && user.ref_code) {
      return sendMessage(chatId, `
<b>üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥</b>

–ö–æ–¥: <code>${user.ref_code}</code>
–°—Å—ã–ª–∫–∞: <code>https://t.me/UniFarming_Bot/app?startapp=ref_${user.ref_code}</code>

Telegram ID: <code>${userId}</code>
User ID –≤ —Å–∏—Å—Ç–µ–º–µ: <code>${user.id}</code>
      `);
    } else {
      return sendMessage(chatId, `
‚ö†Ô∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
- Telegram ID (${userId}) –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É
- –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Mini App –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
      `);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ref_code:', error);
    return sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ Mini App
 */
async function handleStartCommand(chatId, { userId, username, firstName }) {
  const MINI_APP_URL = 'https://t.me/UniFarming_Bot/UniFarm';
  
  const welcomeText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm!  
–ó–∞–ø—É—Å—Ç–∏—Ç—å Mini App: ${MINI_APP_URL}`;

  return sendMessage(chatId, welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: MINI_APP_URL } }]
      ]
    },
    parse_mode: "Markdown"
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /app
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function handleAppCommand(chatId) {
  const MINI_APP_URL = 'https://t.me/UniFarming_Bot/UniFarm';
  
  const appText = `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Mini App: ${MINI_APP_URL}`;

  return sendMessage(chatId, appText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å UniFarm", web_app: { url: MINI_APP_URL } }]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç webhook Telegram
 * @param {Object} update - –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
 */
async function handleTelegramUpdate(update) {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(update));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
  if (!update.message || !update.message.text) {
    return;
  }

  const { message } = update;
  const chatId = message.chat.id;
  const messageText = message.text;
  const userId = message.from.id;
  const username = message.from.username;
  const firstName = message.from.first_name;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (messageText === '/ping') {
    return handlePingCommand(chatId);
  } else if (messageText === '/info') {
    return handleInfoCommand(chatId, { userId, username, firstName });
  } else if (messageText === '/refcode') {
    return handleRefCodeCommand(chatId, userId);
  } else if (messageText === '/start') {
    return handleStartCommand(chatId, { userId, username, firstName });
  } else if (messageText === '/app') {
    return handleAppCommand(chatId);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ routes.ts
export {
  sendMessage,
  handleTelegramUpdate,
  handleStartCommand,
  handleAppCommand,
  handlePingCommand,
  handleInfoCommand,
  handleRefCodeCommand
};