/**
 * –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–Ω–µ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö db-health.ts –∏ db-monitor.ts,
 * –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î, —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ú–æ–¥—É–ª—å —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
 */

import { Pool, PoolClient } from 'pg';
import { getDbConfig } from './db-config';

// –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export type ConnectionStatus = 'ok' | 'error' | 'reconnecting';

export type CheckResult = {
  timestamp: string;
  success: boolean;
  responseTime: number;
  error?: string;
};

export type ReconnectResult = {
  timestamp: string;
  success: boolean;
  attempts: number;
  totalTime: number;
  error?: string;
};

export type MonitorStats = {
  totalChecks: number;
  successfulChecks: number;
  failedChecks: number;
  totalReconnects: number;
  successfulReconnects: number;
  failedReconnects: number;
  avgResponseTime: number;
  avgReconnectTime: number;
  uptime: number;
  downtime: number;
  startTime: string;
  lastDownTime?: string;
  lastUpTime?: string;
};

// –ö–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
export class DatabaseMonitor {
  private pool: Pool;
  private status: ConnectionStatus = 'ok';
  private checkInterval: number = 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private timerId: NodeJS.Timeout | null = null;
  private lastCheckResult: CheckResult | null = null;
  private lastReconnectResult: ReconnectResult | null = null;
  private reconnectingInProgress: boolean = false;
  private consecutiveFailures: number = 0;
  private maxConsecutiveFailures: number = 3;
  private onReconnectCallbacks: Array<(pool: Pool) => void> = [];
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  private stats: MonitorStats = {
    totalChecks: 0,
    successfulChecks: 0,
    failedChecks: 0,
    totalReconnects: 0,
    successfulReconnects: 0,
    failedReconnects: 0,
    avgResponseTime: 0,
    avgReconnectTime: 0,
    uptime: 0,
    downtime: 0,
    startTime: new Date().toISOString(),
  };
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
   * @param autoStart –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  constructor(pool: Pool, autoStart: boolean = true) {
    this.pool = pool;
    
    if (autoStart) {
      this.start();
    }
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public start(): void {
    if (this.timerId) {
      return;
    }
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.checkConnection();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.timerId = setInterval(() => {
      this.checkConnection();
    }, this.checkInterval);
    
    console.log(`[DB Monitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.checkInterval}ms`);
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public stop(): void {
    if (this.timerId) {
      clearInterval(this.timerId);
      this.timerId = null;
      console.log('[DB Monitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @returns Promise<boolean> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  public async checkConnection(): Promise<boolean> {
    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (this.reconnectingInProgress) {
      return false;
    }
    
    const startTime = Date.now();
    let client: PoolClient | null = null;
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
      client = await this.pool.connect();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const result = await client.query('SELECT NOW() as current_time');
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      this.stats.totalChecks++;
      
      // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
      this.status = 'ok';
      this.consecutiveFailures = 0;
      this.stats.successfulChecks++;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
      if (!this.stats.lastUpTime || this.stats.lastDownTime && new Date(this.stats.lastDownTime) > new Date(this.stats.lastUpTime)) {
        this.stats.lastUpTime = new Date().toISOString();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
      this.stats.avgResponseTime = 
        (this.stats.avgResponseTime * (this.stats.successfulChecks - 1) + responseTime) / 
        this.stats.successfulChecks;
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
      this.stats.uptime += this.checkInterval / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.lastCheckResult = {
        timestamp: new Date().toISOString(),
        success: true,
        responseTime,
      };
      
      console.log(`[DB Monitor] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${responseTime}ms)`);
      
      return true;
    } catch (error) {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      this.handleConnectionFailure(errorMessage, responseTime);
      
      return false;
    } finally {
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
      if (client) {
        try {
          client.release();
        } catch (releaseError) {
          console.error(`[DB Monitor] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:`, releaseError);
        }
      }
    }
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param error –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param responseTime –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
   */
  private handleConnectionFailure(error: string, responseTime: number): void {
    this.stats.totalChecks++;
    this.stats.failedChecks++;
    this.consecutiveFailures++;
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±–æ—è
    this.stats.lastDownTime = new Date().toISOString();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
    this.stats.downtime += this.checkInterval / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.lastCheckResult = {
      timestamp: new Date().toISOString(),
      success: false,
      responseTime,
      error,
    };
    
    console.error(`[DB Monitor] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${responseTime}ms): ${error}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
    this.status = 'error';
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫, 
    // –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (this.consecutiveFailures >= this.maxConsecutiveFailures) {
      this.attemptReconnect();
    }
  }
  
  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   * @returns Promise<boolean> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  public async attemptReconnect(): Promise<boolean> {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (this.reconnectingInProgress) {
      return false;
    }
    
    this.reconnectingInProgress = true;
    this.status = 'reconnecting';
    
    this.stats.totalReconnects++;
    const startTime = Date.now();
    
    console.log(`[DB Monitor] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ ${this.consecutiveFailures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫`);
    
    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      try {
        await this.safelyEndPool(this.pool);
        console.log('[DB Monitor] –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç');
      } catch (endError) {
        console.warn('[DB Monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º):', 
          endError instanceof Error ? endError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      const newPool = new Pool(getDbConfig());
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const client = await this.safelyConnect(newPool);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const result = await client.query('SELECT NOW() as current_time');
      
      // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
      client.release();
      
      const endTime = Date.now();
      const reconnectTime = endTime - startTime;
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
      this.stats.successfulReconnects++;
      this.status = 'ok';
      this.consecutiveFailures = 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.stats.avgReconnectTime = 
        (this.stats.avgReconnectTime * (this.stats.successfulReconnects - 1) + reconnectTime) / 
        this.stats.successfulReconnects;
      
      // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      this.stats.lastUpTime = new Date().toISOString();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.lastReconnectResult = {
        timestamp: new Date().toISOString(),
        success: true,
        attempts: 1,
        totalTime: reconnectTime,
      };
      
      console.log(`[DB Monitor] ‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${reconnectTime}ms)`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—É–ª –∏ –æ–ø–æ–≤–µ—â–∞–µ–º –∫–æ–ª–±—ç–∫–∏
      this.updatePool(newPool);
      
      return true;
    } catch (error) {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const endTime = Date.now();
      const reconnectTime = endTime - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.stats.failedReconnects++;
      this.status = 'error';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.lastReconnectResult = {
        timestamp: new Date().toISOString(),
        success: false,
        attempts: 1,
        totalTime: reconnectTime,
        error: errorMessage,
      };
      
      console.error(`[DB Monitor] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${reconnectTime}ms): ${errorMessage}`);
      
      return false;
    } finally {
      this.reconnectingInProgress = false;
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
   * @returns Promise<void>
   */
  private async safelyEndPool(pool: Pool): Promise<void> {
    const endPromise = pool.end();
    const timeoutPromise = new Promise<void>((resolve) => {
      setTimeout(() => {
        console.warn('[DB Monitor] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
        resolve();
      }, 5000);
    });
    
    await Promise.race([endPromise, timeoutPromise]);
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—É–ª—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   * @returns Promise<PoolClient>
   */
  private async safelyConnect(pool: Pool): Promise<PoolClient> {
    const connectPromise = pool.connect();
    const timeoutPromise = new Promise<never>((_, reject) => {
      setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—É–ª—É')), 10000);
    });
    
    return await Promise.race([connectPromise, timeoutPromise]);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
   * @param newPool –ù–æ–≤—ã–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   */
  private updatePool(newPool: Pool): void {
    this.pool = newPool;
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ —Å –Ω–æ–≤—ã–º –ø—É–ª–æ–º
    for (const callback of this.onReconnectCallbacks) {
      try {
        callback(newPool);
      } catch (callbackError) {
        console.error('[DB Monitor] –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–±—ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', callbackError);
      }
    }
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—É–ª
   * @param callback –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  public onReconnect(callback: (pool: Pool) => void): void {
    this.onReconnectCallbacks.push(callback);
  }
  
  /**
   * –£–¥–∞–ª—è–µ—Ç —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫
   * @param callback –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  public offReconnect(callback: (pool: Pool) => void): void {
    this.onReconnectCallbacks = this.onReconnectCallbacks.filter(cb => cb !== callback);
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  public setCheckInterval(interval: number): void {
    if (interval < 1000) {
      throw new Error('–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1000 –º—Å');
    }
    
    this.checkInterval = interval;
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (this.timerId) {
      this.stop();
      this.start();
    }
    
    console.log(`[DB Monitor] ‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${interval}ms`);
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
   * @param max –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
   */
  public setMaxConsecutiveFailures(max: number): void {
    if (max < 1) {
      throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1');
    }
    
    this.maxConsecutiveFailures = max;
    console.log(`[DB Monitor] ‚öôÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: ${max}`);
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public resetStats(): void {
    this.stats = {
      totalChecks: 0,
      successfulChecks: 0,
      failedChecks: 0,
      totalReconnects: 0,
      successfulReconnects: 0,
      failedReconnects: 0,
      avgResponseTime: 0,
      avgReconnectTime: 0,
      uptime: 0,
      downtime: 0,
      startTime: new Date().toISOString(),
    };
    
    console.log(`[DB Monitor] üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞`);
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @returns ConnectionStatus
   */
  public getStatus(): ConnectionStatus {
    return this.status;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns number
   */
  public getCheckInterval(): number {
    return this.checkInterval;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns CheckResult | null
   */
  public getLastCheckResult(): CheckResult | null {
    return this.lastCheckResult;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @returns ReconnectResult | null
   */
  public getLastReconnectResult(): ReconnectResult | null {
    return this.lastReconnectResult;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   * @returns MonitorStats
   */
  public getStats(): MonitorStats {
    return { ...this.stats }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @returns Promise<boolean>
   */
  public async forceCheck(): Promise<boolean> {
    return await this.checkConnection();
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   * @returns Promise<boolean>
   */
  public async forceReconnect(): Promise<boolean> {
    return await this.attemptReconnect();
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   * @returns Pool
   */
  public getPool(): Pool {
    return this.pool;
  }
}

// –°–æ–∑–¥–∞–¥–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º API

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * @returns Promise<boolean> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkConnection(pool: Pool): Promise<boolean> {
  try {
    const client = await pool.connect();
    try {
      await client.query('SELECT 1');
      return true;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞
 * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * @returns DatabaseMonitor
 */
export function createMonitor(pool: Pool): DatabaseMonitor {
  return new DatabaseMonitor(pool);
}