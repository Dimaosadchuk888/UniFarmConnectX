/**
 * –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–Ω–µ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö db-health.ts –∏ db-monitor.ts,
 * –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î, —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ú–æ–¥—É–ª—å —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
 */

import { Pool, PoolClient } from 'pg';
import { getDbConfig } from './db-config';

export type ConnectionStatus = 'ok' | 'error' | 'reconnecting';

export type CheckResult = {
  timestamp: string;
  success: boolean;
  responseTime: number;
  error?: string;
};

export type ReconnectResult = {
  timestamp: string;
  success: boolean;
  attempts: number;
  totalTime: number;
  error?: string;
};

export type MonitorStats = {
  totalChecks: number;
  successfulChecks: number;
  failedChecks: number;
  totalReconnects: number;
  successfulReconnects: number;
  failedReconnects: number;
  avgResponseTime: number;
  avgReconnectTime: number;
  uptime: number;
  downtime: number;
  startTime: string;
  lastDownTime?: string;
  lastUpTime?: string;
};

export class DatabaseMonitor {
  private pool: Pool;
  private status: ConnectionStatus = 'ok';
  private checkInterval: number = 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private timerId: NodeJS.Timeout | null = null;
  private lastCheckResult: CheckResult | null = null;
  private lastReconnectResult: ReconnectResult | null = null;
  private reconnectingInProgress: boolean = false;
  private consecutiveFailures: number = 0;
  private maxConsecutiveFailures: number = 3;
  private onReconnectCallbacks: Array<(pool: Pool) => void> = [];

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  private stats: MonitorStats = {
    totalChecks: 0,
    successfulChecks: 0,
    failedChecks: 0,
    totalReconnects: 0,
    successfulReconnects: 0,
    failedReconnects: 0,
    avgResponseTime: 0,
    avgReconnectTime: 0,
    uptime: 0,
    downtime: 0,
    startTime: new Date().toISOString()
  };

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
   * @param autoStart –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  constructor(pool: Pool, autoStart: boolean = false) {
    this.pool = pool;
    
    if (autoStart) {
      this.start();
    }
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public start(): void {
    if (this.timerId !== null) {
      this.stop(); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    this.checkConnection().catch(err => {
      console.error('[DB Monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', err);
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.timerId = setInterval(() => {
      this.checkConnection().catch(err => {
        console.error('[DB Monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
      });
    }, this.checkInterval);
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public stop(): void {
    if (this.timerId !== null) {
      clearInterval(this.timerId);
      this.timerId = null;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @returns Promise<boolean> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  public async checkConnection(): Promise<boolean> {
    const startTime = Date.now();
    let client: PoolClient | null = null;
    
    try {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
      this.stats.totalChecks++;
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      client = await this.safelyConnect(this.pool);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await client.query('SELECT 1');
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      const responseTime = Date.now() - startTime;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats.successfulChecks++;
      this.stats.avgResponseTime = 
        (this.stats.avgResponseTime * (this.stats.successfulChecks - 1) + responseTime) / 
        this.stats.successfulChecks;
      
      if (this.status !== 'ok') {
        this.stats.lastUpTime = new Date().toISOString();
        console.log(`[DB Monitor] ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (${responseTime}ms)`);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
      this.consecutiveFailures = 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.status = 'ok';
      this.lastCheckResult = {
        timestamp: new Date().toISOString(),
        success: true,
        responseTime
      };
      
      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      const responseTime = Date.now() - startTime;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.handleConnectionFailure(errorMessage, responseTime);
      
      return false;
    } finally {
      if (client) {
        client.release();
      }
    }
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param error –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param responseTime –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
   */
  private handleConnectionFailure(error: string, responseTime: number): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.failedChecks++;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.lastCheckResult = {
      timestamp: new Date().toISOString(),
      success: false,
      responseTime,
      error
    };
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    this.consecutiveFailures++;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ ok), —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if (this.status === 'ok') {
      this.stats.lastDownTime = new Date().toISOString();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    this.status = 'error';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (this.consecutiveFailures >= this.maxConsecutiveFailures && !this.reconnectingInProgress) {
      console.warn(`[DB Monitor] ‚ö†Ô∏è ${this.consecutiveFailures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.attemptReconnect().catch(reconnectError => {
        console.error('[DB Monitor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
      });
    } else {
      console.warn(`[DB Monitor] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${responseTime}ms): ${error}`);
    }
  }
  
  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   * @returns Promise<boolean> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  public async attemptReconnect(): Promise<boolean> {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if (this.reconnectingInProgress) {
      console.log('[DB Monitor] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–∂–∏–¥–∞–Ω–∏–µ...');
      
      // –ñ–¥–µ–º, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return new Promise<boolean>((resolve) => {
        const checkStatus = () => {
          if (!this.reconnectingInProgress) {
            resolve(this.status === 'ok');
          } else {
            setTimeout(checkStatus, 500);
          }
        };
        
        setTimeout(checkStatus, 500);
      });
    }
    
    this.reconnectingInProgress = true;
    this.status = 'reconnecting';
    
    const startTime = Date.now();
    let success = false;
    let attempts = 0;
    let lastError = '';
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats.totalReconnects++;
      
      console.log('[DB Monitor] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const maxRetries = 5;
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      for (let retry = 0; retry < maxRetries; retry++) {
        attempts++;
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          const dbConfig = getDbConfig();
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª
          const newPool = new Pool(dbConfig);
          
          // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –ø—É–ª
          const client = await this.safelyConnect(newPool);
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
          await client.query('SELECT 1');
          
          // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
          client.release();
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–ª
          await this.safelyEndPool(this.pool);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª –∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏
          this.updatePool(newPool);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          this.status = 'ok';
          success = true;
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
          this.consecutiveFailures = 0;
          
          console.log(`[DB Monitor] ‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ ${attempts} –ø–æ–ø—ã—Ç–æ–∫ (${Date.now() - startTime}ms)`);
          
          break;
        } catch (error) {
          lastError = error instanceof Error ? error.message : String(error);
          console.warn(`[DB Monitor] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${retry + 1}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${lastError}`);
          
          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º)
          if (retry < maxRetries - 1) {
            const delay = Math.min(1000 * Math.pow(2, retry), 30000);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
      if (!success) {
        console.error(`[DB Monitor] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å (${attempts} –ø–æ–ø—ã—Ç–æ–∫)`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (success) {
        this.stats.successfulReconnects++;
      } else {
        this.stats.failedReconnects++;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const reconnectTime = Date.now() - startTime;
      this.stats.avgReconnectTime = 
        (this.stats.avgReconnectTime * (this.stats.totalReconnects - 1) + reconnectTime) / 
        this.stats.totalReconnects;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.lastReconnectResult = {
        timestamp: new Date().toISOString(),
        success,
        attempts,
        totalTime: reconnectTime,
        error: success ? undefined : lastError
      };
      
      return success;
    } finally {
      this.reconnectingInProgress = false;
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
   * @returns Promise<void>
   */
  private async safelyEndPool(pool: Pool): Promise<void> {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞
    const closeTimeout = 5000; // 5 —Å–µ–∫—É–Ω–¥
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—É–ª
      const endPromise = pool.end();
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const timeoutPromise = new Promise<void>((_, reject) => {
        setTimeout(() => {
          reject(new Error('Timeout –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞'));
        }, closeTimeout);
      });
      
      // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await Promise.race([endPromise, timeoutPromise]);
    } catch (error) {
      console.warn('[DB Monitor] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞:', 
        error instanceof Error ? error.message : String(error));
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—É–ª—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   * @returns Promise<PoolClient>
   */
  private async safelyConnect(pool: Pool): Promise<PoolClient> {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const connectTimeout = 10000; // 10 —Å–µ–∫—É–Ω–¥
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø—É–ª–∞
    const connectPromise = pool.connect();
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const timeoutPromise = new Promise<PoolClient>((_, reject) => {
      setTimeout(() => {
        reject(new Error('Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'));
      }, connectTimeout);
    });
    
    // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    return Promise.race([connectPromise, timeoutPromise]);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–ª –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
   * @param newPool –ù–æ–≤—ã–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   */
  private updatePool(newPool: Pool): void {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const oldPool = this.pool;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Å—ã–ª–∫—É
    this.pool = newPool;
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
    this.onReconnectCallbacks.forEach(callback => {
      try {
        callback(newPool);
      } catch (error) {
        console.error('[DB Monitor] –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–±—ç–∫–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É–ª–∞:', 
          error instanceof Error ? error.message : String(error));
      }
    });
    
    console.log('[DB Monitor] –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω');
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—É–ª
   * @param callback –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  public onReconnect(callback: (pool: Pool) => void): void {
    this.onReconnectCallbacks.push(callback);
  }
  
  /**
   * –£–¥–∞–ª—è–µ—Ç —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫
   * @param callback –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  public offReconnect(callback: (pool: Pool) => void): void {
    this.onReconnectCallbacks = this.onReconnectCallbacks.filter(cb => cb !== callback);
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  public setCheckInterval(interval: number): void {
    if (interval < 1000) {
      console.warn('[DB Monitor] ‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –º–∏–Ω–∏–º—É–º 1000–º—Å');
      interval = 1000;
    }
    
    this.checkInterval = interval;
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (this.timerId !== null) {
      this.stop();
      this.start();
    }
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
   * @param max –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
   */
  public setMaxConsecutiveFailures(max: number): void {
    if (max < 1) {
      console.warn('[DB Monitor] ‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—à–∏–±–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1');
      max = 1;
    }
    
    this.maxConsecutiveFailures = max;
  }
  
  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public resetStats(): void {
    this.stats = {
      totalChecks: 0,
      successfulChecks: 0,
      failedChecks: 0,
      totalReconnects: 0,
      successfulReconnects: 0,
      failedReconnects: 0,
      avgResponseTime: 0,
      avgReconnectTime: 0,
      uptime: 0,
      downtime: 0,
      startTime: new Date().toISOString()
    };
    
    this.lastCheckResult = null;
    this.lastReconnectResult = null;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @returns ConnectionStatus
   */
  public getStatus(): ConnectionStatus {
    return this.status;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns number
   */
  public getCheckInterval(): number {
    return this.checkInterval;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns CheckResult | null
   */
  public getLastCheckResult(): CheckResult | null {
    return this.lastCheckResult;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @returns ReconnectResult | null
   */
  public getLastReconnectResult(): ReconnectResult | null {
    return this.lastReconnectResult;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   * @returns MonitorStats
   */
  public getStats(): MonitorStats {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const now = Date.now();
    const startTimestamp = new Date(this.stats.startTime).getTime();
    const totalTime = now - startTimestamp;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    if (this.lastCheckResult) {
      // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Å—Ç–∞—Ç—É—Å –û–ö, —Å—á–∏—Ç–∞–µ–º uptime, –∏–Ω–∞—á–µ - downtime
      if (this.status === 'ok') {
        this.stats.uptime = totalTime - this.stats.downtime;
      } else {
        // –í—ã—á–∏—Å–ª—è–µ–º —Å –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        const lastDownTimestamp = this.stats.lastDownTime 
          ? new Date(this.stats.lastDownTime).getTime()
          : now;
        
        this.stats.downtime = totalTime - this.stats.uptime;
      }
    }
    
    return this.stats;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @returns Promise<boolean>
   */
  public async forceCheck(): Promise<boolean> {
    return await this.checkConnection();
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   * @returns Promise<boolean>
   */
  public async forceReconnect(): Promise<boolean> {
    return await this.attemptReconnect();
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   * @returns Pool
   */
  public getPool(): Pool {
    return this.pool;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export async function checkConnection(pool: Pool): Promise<boolean> {
  try {
    const client = await pool.connect();
    try {
      await client.query('SELECT 1');
      return true;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞
 * @param pool –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 * @returns DatabaseMonitor
 */
export function createMonitor(pool: Pool): DatabaseMonitor {
  return new DatabaseMonitor(pool, true);
}