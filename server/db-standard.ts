/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —á–µ—Ä–µ–∑ Drizzle ORM.
 * –û–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 * –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.
 */

import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import * as schema from "@shared/schema";
import ws from "ws";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –¥–ª—è Neon Serverless
neonConfig.webSocketConstructor = ws;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL
if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const MAX_RETRIES = 5;
const INITIAL_BACKOFF = 200; // ms
const MAX_BACKOFF = 10000; // ms

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
const getBackoff = (retry: number) => {
  const baseBackoff = Math.min(MAX_BACKOFF, INITIAL_BACKOFF * Math.pow(2, retry));
  // –î–æ–±–∞–≤–ª—è–µ–º 20% –¥–∂–∏—Ç—Ç–µ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–≥—Ä–æ–∑–æ–≤—ã—Ö —Å—Ç–∞–¥" - –∫–æ–≥–¥–∞ –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—ã—Ç–∞—é—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  return baseBackoff * (0.8 + Math.random() * 0.4);
};

// –¢–∏–ø –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export type DbConnectionStatus = 'connected' | 'connecting' | 'disconnected' | 'error';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export interface DbState {
  connectionStatus: DbConnectionStatus;
  usingInMemoryStorage: boolean;
  lastConnectionAttempt: string;
  reconnectingMode: boolean;
  lastError?: Error;
  warning?: string;
}

// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export let dbState: DbState = {
  connectionStatus: 'disconnected',
  usingInMemoryStorage: false,
  lastConnectionAttempt: new Date().toISOString(),
  reconnectingMode: false
};

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 5, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  idleTimeoutMillis: 30000, // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  connectionTimeoutMillis: 10000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  allowExitOnIdle: false // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞
pool.on('error', (err) => {
  console.error('[DB] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ idle –∫–ª–∏–µ–Ω—Ç–µ', err);
  dbState.connectionStatus = 'error';
  dbState.lastError = err instanceof Error ? err : new Error(String(err));
});

pool.on('connect', () => {
  console.log('[DB] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL');
  dbState.connectionStatus = 'connected';
  dbState.usingInMemoryStorage = false;
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å drizzle –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—Ö–µ–º–æ–π
export const db = drizzle(pool, { schema });

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
export interface QueryResult<T = any> {
  command: string;
  rowCount: number;
  oid: number;
  rows: T[];
  fields: any[];
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns Promise<boolean> true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
export const testDatabaseConnection = async (): Promise<boolean> => {
  dbState.lastConnectionAttempt = new Date().toISOString();
  dbState.connectionStatus = 'connecting';
  
  try {
    await pool.query('SELECT 1');
    dbState.connectionStatus = 'connected';
    dbState.usingInMemoryStorage = false;
    return true;
  } catch (error) {
    dbState.connectionStatus = 'error';
    const errorObj = error instanceof Error 
      ? error 
      : new Error(String(error));
    
    dbState.lastError = errorObj;
    console.error('[DB] –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', errorObj.message);
    return false;
  }
};

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
setInterval(async () => {
  try {
    const isConnected = await testDatabaseConnection();
    if (isConnected && dbState.connectionStatus !== 'connected') {
      console.log('[DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      dbState.warning = undefined;
      dbState.reconnectingMode = false;
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
  }
}, 30000);

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * @param text SQL –∑–∞–ø—Ä–æ—Å
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @param retries –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * @returns Promise<QueryResult<T>> –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
export const queryWithRetry = async <T = any>(
  text: string, 
  params: any[] = [],
  retries = MAX_RETRIES
): Promise<QueryResult<T>> => {
  let lastError;
  
  for (let attempt = 0; attempt <= retries; attempt++) {
    try {
      const result = await pool.query(text, params);
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (dbState.connectionStatus !== 'connected') {
        dbState.connectionStatus = 'connected';
        dbState.usingInMemoryStorage = false;
        console.log('[DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
      }
      return {
        ...result,
        rowCount: result.rowCount || 0
      };
    } catch (error) {
      lastError = error;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º error –≤ Error, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ message
      const errorObj = error instanceof Error 
        ? error 
        : new Error(String(error));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      if (
        attempt < retries && 
        (errorObj.message.includes('endpoint is disabled') || 
         errorObj.message.includes('connection') ||
         errorObj.message.includes('timeout'))
      ) {
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        const backoff = getBackoff(attempt);
        console.log(`[DB] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${retries} —á–µ—Ä–µ–∑ ${Math.round(backoff)}ms`);
        await sleep(backoff);
        continue;
      }
      
      // –û—à–∏–±–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
      break;
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
  if (dbState.connectionStatus !== 'error') {
    dbState.connectionStatus = 'error';
    dbState.reconnectingMode = true;
    console.error('[DB] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã');
  }
  
  throw lastError;
};

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é (–∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
 * @param text SQL –∑–∞–ø—Ä–æ—Å
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns Promise<QueryResult<T>> –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
export const query = async <T = any>(text: string, params: any[] = []): Promise<QueryResult<T>> => {
  try {
    return await queryWithRetry<T>(text, params);
  } catch (error) {
    const errorObj = error instanceof Error 
      ? error 
      : new Error(String(error));
    console.error('[DB] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', errorObj.message);
    throw errorObj;
  }
};

/**
 * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Drizzle ORM
 * @param fn –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns Promise<T> –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export const transaction = async <T>(fn: (tx: typeof db) => Promise<T>): Promise<T> => {
  try {
    return await db.transaction(async (tx) => {
      return await fn(tx);
    });
  } catch (error) {
    const errorObj = error instanceof Error 
      ? error 
      : new Error(String(error));
    console.error('[DB] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', errorObj.message);
    throw errorObj;
  }
};

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
testDatabaseConnection()
  .then((isConnected) => {
    if (isConnected) {
      console.log('[DB] üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    } else {
      console.warn('[DB] üü† –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      dbState.usingInMemoryStorage = true;
      dbState.warning = '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ';
    }
  })
  .catch((error) => {
    console.error('[DB] üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    dbState.usingInMemoryStorage = true;
    dbState.lastError = error instanceof Error ? error : new Error(String(error));
  });

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @returns DbState –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
export const getDatabaseState = (): DbState => {
  return { ...dbState };
};