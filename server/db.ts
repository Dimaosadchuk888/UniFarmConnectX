/**
 * –ú–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon DB —á–µ—Ä–µ–∑ Drizzle ORM
 * –í–Ω–∏–º–∞–Ω–∏–µ: –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û Neon DB, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–µ–¥—ã
 */

import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import * as schema from '../shared/schema';
import { format, addDays } from 'date-fns';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon DB
if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL must be set in the environment variables');
}

console.log('[DB-NEON] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Neon DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Neon DB
let pool: Pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è Neon DB
  },
  max: 20, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  connectionTimeoutMillis: 8000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
});

console.log('[DB-NEON] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon DB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
pool.on('error', (err) => {
  console.error('[DB] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—É–ª–∞:', err.message);
  console.error(err.stack);
});

pool.on('connect', () => {
  console.log('[DB] –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Drizzle ORM
export const db = drizzle(pool, { schema });

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Å–ª—É—á–∞–µ–≤, –≥–¥–µ –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
export { pool };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
export async function query(text: string, params?: any[]) {
  try {
    const result = await pool.query(text, params);
    return result;
  } catch (error: any) {
    console.error(`[DB] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${text}`, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
export async function queryWithRetry(text: string, params?: any[], retries = 3, delay = 1000) {
  let lastError;
  
  for (let attempt = 0; attempt < retries; attempt++) {
    try {
      const result = await pool.query(text, params);
      return result;
    } catch (error: any) {
      lastError = error;
      console.error(`[DB] –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
      
      if (attempt < retries - 1) {
        console.log(`[DB] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  throw lastError;
}

// –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
export const dbConnectionStatus = {
  isConnected: false,
  lastConnectionAttempt: null as Date | null,
  error: null as Error | null,
  isPartitioned: false, // –§–ª–∞–≥ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async update() {
    this.lastConnectionAttempt = new Date();
    try {
      await pool.query('SELECT 1');
      this.isConnected = true;
      this.error = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        const partitionResult = await isTablePartitioned();
        this.isPartitioned = partitionResult;
      } catch (partitionError: any) {
        console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', partitionError.message);
        this.isPartitioned = false;
      }
    } catch (error: any) {
      this.isConnected = false;
      this.error = error;
    }
    return this.isConnected;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
export async function isTablePartitioned(tableName: string = 'transactions'): Promise<boolean> {
  try {
    const query = `
      SELECT pt.relname as parent_table, 
             c.relname as child_table,
             pg_get_expr(c.relpartbound, c.oid) as partition_expression
      FROM pg_inherits i
      JOIN pg_class pt ON pt.oid = i.inhparent
      JOIN pg_class c ON c.oid = i.inhrelid
      JOIN pg_namespace n ON n.oid = c.relnamespace
      WHERE pt.relname = $1 
      AND n.nspname = 'public'
      LIMIT 1;
    `;
    
    const result = await pool.query(query, [tableName]);
    return (result.rowCount || 0) > 0;
  } catch (error) {
    console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
export async function createPartitionForDate(date: Date): Promise<boolean> {
  try {
    const dateStr = format(date, 'yyyy_MM_dd');
    const partitionName = `transactions_${dateStr}`;
    
    const startDate = format(date, 'yyyy-MM-dd');
    const endDate = format(addDays(date, 1), 'yyyy-MM-dd');
    
    console.log(`[DB] –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏ ${partitionName} –¥–ª—è –¥–∞—Ç—ã ${startDate}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    const checkQuery = `
      SELECT relname 
      FROM pg_class 
      WHERE relname = $1
    `;
    const checkResult = await pool.query(checkQuery, [partitionName]);
    
    if (checkResult.rowCount && checkResult.rowCount > 0) {
      console.log(`[DB] –ü–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return true;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏—é
    const createQuery = `
      CREATE TABLE IF NOT EXISTS ${partitionName}
      PARTITION OF transactions
      FOR VALUES FROM ('${startDate}') TO ('${endDate}');
    `;
    
    await pool.query(createQuery);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–∏
    try {
      await pool.query(`CREATE INDEX IF NOT EXISTS ${partitionName}_user_id_idx ON ${partitionName} (user_id)`);
      await pool.query(`CREATE INDEX IF NOT EXISTS ${partitionName}_type_idx ON ${partitionName} (type)`);
      await pool.query(`CREATE INDEX IF NOT EXISTS ${partitionName}_created_at_idx ON ${partitionName} (created_at)`);
    } catch (indexError: any) {
      console.warn(`[DB] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è ${partitionName}:`, indexError.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
    }
    
    console.log(`[DB] –ü–∞—Ä—Ç–∏—Ü–∏—è ${partitionName} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
    return true;
  } catch (error: any) {
    console.error(`[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–∏:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
export async function createFuturePartitions(daysAhead: number = 5): Promise<{
  success: boolean;
  createdCount: number;
  partitions: string[];
  errors: string[];
}> {
  const partitions: string[] = [];
  const errors: string[] = [];
  let createdCount = 0;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞
    const isPartitioned = await isTablePartitioned();
    
    if (!isPartitioned) {
      return {
        success: false,
        createdCount: 0,
        partitions: [],
        errors: ['–¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞']
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    const today = new Date();
    
    for (let i = 0; i <= daysAhead; i++) {
      const date = addDays(today, i);
      const dateStr = format(date, 'yyyy_MM_dd');
      const partitionName = `transactions_${dateStr}`;
      
      try {
        const success = await createPartitionForDate(date);
        
        if (success) {
          partitions.push(partitionName);
          createdCount++;
        }
      } catch (error: any) {
        errors.push(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${partitionName}: ${error.message}`);
      }
    }
    
    return {
      success: true,
      createdCount,
      partitions,
      errors
    };
  } catch (error: any) {
    console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—É–¥—É—â–∏—Ö –ø–∞—Ä—Ç–∏—Ü–∏–π:', error);
    
    return {
      success: false,
      createdCount,
      partitions,
      errors: [...errors, error.message]
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
export async function initializePartitioning(): Promise<boolean> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const isPartitioned = await isTablePartitioned();
    
    if (!isPartitioned) {
      console.log('[DB] –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.');
      return false;
    }
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
    console.log('[DB] –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–π –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã...');
    const result = await createFuturePartitions(5);
    
    if (result.success) {
      console.log(`[DB] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${result.createdCount} –ø–∞—Ä—Ç–∏—Ü–∏–π: ${result.partitions.join(', ')}`);
    } else {
      console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–π:', result.errors.join('; '));
    }
    
    return result.success;
  } catch (error: any) {
    console.error('[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
export async function testDatabaseConnection() {
  try {
    const result = await pool.query('SELECT NOW() as time');
    return {
      success: true,
      timestamp: result.rows[0].time,
      message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    };
  } catch (error: any) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: ${error.message}`
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
dbConnectionStatus.update().then(async (isConnected) => {
  if (isConnected) {
    console.log('‚úÖ [DB] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try {
      await initializePartitioning();
    } catch (error: any) {
      console.error('‚ö†Ô∏è [DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      console.error('–†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  } else {
    console.error('‚ùå [DB] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
    console.error('–û—à–∏–±–∫–∞:', dbConnectionStatus.error?.message);
  }
});