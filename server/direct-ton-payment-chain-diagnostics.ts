#!/usr/bin/env node
import { supabase } from '../core/supabase';

/**
 * –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ü–û–ß–ö–ò TON –ü–õ–ê–¢–ï–ñ–ï–ô –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–µ –∑–≤–µ–Ω–æ –æ—Ç –ë–î –¥–æ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
 * 1. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î
 * 2. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ton-deposit endpoint
 * 3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π  
 * 4. –°–æ—Å—Ç–æ—è–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 5. Logs –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */

async function diagnoseFullTonPaymentChain() {
  console.log('\nüî¨ === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ü–û–ß–ö–ò TON –ü–õ–ê–¢–ï–ñ–ï–ô === üî¨\n');
  console.log('üìã –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', new Date().toLocaleString('ru-RU'));
  console.log('üéØ –¶–µ–ª—å: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã - React –∏–ª–∏ Backend\n');

  const testUserId = 184;
  let dbAccessSuccess = false;

  try {
    // ==============================
    // 1. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î
    // ==============================
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
    
    const { data: testConnection, error: connectionError } = await supabase
      .from('users')
      .select('count')
      .limit(1);
      
    if (connectionError) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
      console.log('   –î–µ—Ç–∞–ª–∏:', connectionError.message);
      console.log('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', connectionError.code);
      console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ backend');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç');
    dbAccessSuccess = true;

    // ==============================
    // 2. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶ TON –°–ò–°–¢–ï–ú–´
    // ==============================
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶ TON –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, username, balance_ton, ton_wallet_address, ton_wallet_verified')
      .gt('balance_ton', 0)
      .limit(10);
      
    if (!usersError && users) {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º > 0`);
      users.forEach(user => {
        console.log(`   - ${user.username || 'unknown'} (ID: ${user.id}): ${user.balance_ton} TON, –∫–æ—à–µ–ª–µ–∫: ${user.ton_wallet_verified ? '‚úì' : '‚úó'}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users:', usersError?.message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É transactions –¥–ª—è TON
    const { data: tonTransactions, error: txError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, status, description, created_at')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(15);
      
    if (!txError && tonTransactions) {
      console.log(`\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions: –Ω–∞–π–¥–µ–Ω–æ ${tonTransactions.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      const typeStats = tonTransactions.reduce((acc, tx) => {
        acc[tx.type] = (acc[tx.type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      console.log('   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      Object.entries(typeStats).forEach(([type, count]) => {
        console.log(`      ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      console.log('\n   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      tonTransactions.slice(0, 5).forEach((tx, i) => {
        console.log(`   ${i + 1}. ID ${tx.id} (User ${tx.user_id}): ${tx.amount} TON`);
        console.log(`      –¢–∏–ø: ${tx.type}, –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        console.log(`      –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString('ru-RU')}\n`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ transactions:', txError?.message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ton_farming_data
    const { data: tonFarming, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_active, created_at')
      .gt('farming_balance', 0)
      .limit(10);
      
    if (!farmingError && tonFarming) {
      console.log(`\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_farming_data: –Ω–∞–π–¥–µ–Ω–æ ${tonFarming.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤`);
      tonFarming.forEach(farmer => {
        console.log(`   - User ${farmer.user_id}: ${farmer.farming_balance} TON —Ñ–∞—Ä–º–∏–Ω–≥, —Å—Ç–∞–≤–∫–∞ ${farmer.farming_rate}%`);
      });
    } else {
      console.log('\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è:', farmingError?.message);
    }

    // ==============================
    // 3. –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    // ==============================
    console.log(`\n3Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${testUserId}:`);
    
    const { data: testUser, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', testUserId)
      .single();
      
    if (!userError && testUser) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã:');
      console.log(`   - ID: ${testUser.id}, Telegram ID: ${testUser.telegram_id}`);
      console.log(`   - Username: ${testUser.username}`);
      console.log(`   - UNI –±–∞–ª–∞–Ω—Å: ${testUser.balance_uni}`);
      console.log(`   - TON –±–∞–ª–∞–Ω—Å: ${testUser.balance_ton}`);
      console.log(`   - TON –∫–æ—à–µ–ª–µ–∫: ${testUser.ton_wallet_address || '–ù–ï –ü–†–ò–í–Ø–ó–ê–ù'}`);
      console.log(`   - –ö–æ—à–µ–ª–µ–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${testUser.ton_wallet_verified ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   - TON boost –ø–∞–∫–µ—Ç: ${testUser.ton_boost_package || '–ù–ï–¢'}`);
    } else {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${testUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, userError?.message);
    }

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userTransactions, error: userTxError } = await supabase
      .from('transactions')
      .select('id, type, amount, currency, status, description, created_at, metadata')
      .eq('user_id', testUserId)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (!userTxError && userTransactions) {
      console.log(`\nüìã TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}: ${userTransactions.length}`);
      userTransactions.forEach((tx, i) => {
        console.log(`   ${i + 1}. ID ${tx.id}: ${tx.amount} TON (${tx.type})`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}, –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        if (tx.metadata) {
          console.log(`      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata)}`);
        }
      });
    } else {
      console.log(`‚ö†Ô∏è  TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    }

    // ==============================
    // 4. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ì–†–ê–î TON
    // ==============================
    console.log(`\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ì–†–ê–î TON:`);
    
    const { data: referralRewards, error: referralError } = await supabase
      .from('transactions')
      .select('id, user_id, amount, description, created_at')
      .eq('type', 'REFERRAL_REWARD')
      .eq('currency', 'TON')
      .eq('user_id', testUserId)
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (!referralError && referralRewards) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralRewards.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ TON`);
      let totalReferralTon = 0;
      referralRewards.forEach((reward, i) => {
        const amount = parseFloat(reward.amount);
        totalReferralTon += amount;
        console.log(`   ${i + 1}. +${reward.amount} TON - ${reward.description}`);
        console.log(`      –î–∞—Ç–∞: ${new Date(reward.created_at).toLocaleString('ru-RU')}`);
      });
      console.log(`   üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${totalReferralTon.toFixed(6)} TON`);
    } else {
      console.log('‚ö†Ô∏è  –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã TON –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // ==============================
    // 5. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô
    // ==============================
    console.log(`\n5Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò –í –°–ò–°–¢–ï–ú–ï:`);
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    const { data: recentTonTx, error: recentError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);
      
    if (!recentError && recentTonTx) {
      console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ:');
      recentTonTx.forEach((tx, i) => {
        const timeAgo = Math.floor((Date.now() - new Date(tx.created_at).getTime()) / 1000 / 60);
        console.log(`   ${i + 1}. User ${tx.user_id}: ${tx.amount} TON (${tx.type}) - ${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`);
      });
    }

    // ==============================
    // 6. –†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    // ==============================
    console.log(`\n6Ô∏è‚É£ –†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò BACKEND:`);
    
    const backendHealthScore = {
      database_connection: true,
      users_table: !!users && users.length > 0,
      transactions_table: !!tonTransactions && tonTransactions.length > 0,
      ton_farming_data: !!tonFarming,
      user_data_exists: !!testUser,
      user_has_ton_transactions: !!userTransactions && userTransactions.length > 0,
      referral_system_working: !!referralRewards && referralRewards.length > 0
    };
    
    const healthyComponents = Object.values(backendHealthScore).filter(Boolean).length;
    const totalComponents = Object.keys(backendHealthScore).length;
    const healthPercentage = Math.round((healthyComponents / totalComponents) * 100);
    
    console.log(`üìä –ó–î–û–†–û–í–¨–ï BACKEND –°–ò–°–¢–ï–ú–´: ${healthPercentage}% (${healthyComponents}/${totalComponents} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OK)`);
    
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    Object.entries(backendHealthScore).forEach(([component, status]) => {
      const icon = status ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${component.replace(/_/g, ' ')}: ${status ? 'OK' : '–ü–†–û–ë–õ–ï–ú–ê'}`);
    });

    // ==============================
    // 7. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´
    // ==============================
    console.log(`\n7Ô∏è‚É£ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –û –ò–°–¢–û–ß–ù–ò–ö–ï –ü–†–û–ë–õ–ï–ú–´:`);
    
    if (healthPercentage >= 80) {
      console.log('üéØ BACKEND –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û (>80% –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OK)');
      console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç TON –±–∞–ª–∞–Ω—Å—ã');
      console.log('   - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç TON –Ω–∞–≥—Ä–∞–¥—ã');
      console.log('   - –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('\nüí° –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ REACT/FRONTEND —á–∞—Å—Ç–∏');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å —É—Å–∏–ª–∏—è –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ TonConnectUIProvider');
    } else if (healthPercentage >= 50) {
      console.log('‚ö†Ô∏è  BACKEND –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û (50-80% –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OK)');
      console.log('\nüí° –í–´–í–û–î: –°–º–µ—à–∞–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π');
    } else {
      console.log('‚ùå BACKEND –°–ò–°–¢–ï–ú–ê –ò–ú–ï–ï–¢ –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (<50% –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OK)');
      console.log('\nüí° –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –≤ BACKEND —á–∞—Å—Ç–∏ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞');
    }

  } catch (error) {
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:', error);
    
    if (error instanceof Error) {
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('   Stack:', error.stack);
    }
    
    if (!dbAccessSuccess) {
      console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É backend –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ë–î');
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_KEY');
    }
  }

  console.log('\nüìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤', new Date().toLocaleString('ru-RU'));
  console.log('üî¨ === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò === üî¨\n');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  diagnoseFullTonPaymentChain()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      process.exit(1);
    });
}

export { diagnoseFullTonPaymentChain };