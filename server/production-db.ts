/**
 * –Ñ–î–ò–ù–ò–ô –ú–û–î–£–õ–¨ –î–õ–Ø –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û PRODUCTION –ë–ê–ó–ò
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤—Å—ñ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞–º–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏
 */

import { Pool } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from '../shared/schema.js';

// –í–ê–®–ê –ü–†–ê–í–ò–õ–¨–ù–ê PRODUCTION –ë–ê–ó–ê
const PRODUCTION_CONNECTION = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

let productionPool: Pool | null = null;
let productionDb: any = null;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ production –±–∞–∑–∏
async function initProductionDb() {
  if (!productionPool) {
    console.log('üéØ [PRODUCTION DB] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ep-lucky-boat-a463bggt');
    
    productionPool = new Pool({
      connectionString: PRODUCTION_CONNECTION,
      ssl: { rejectUnauthorized: false },
      max: 15,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 10000,
    });

    productionDb = drizzle(productionPool, { schema });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    try {
      const client = await productionPool.connect();
      const result = await client.query('SELECT current_database(), COUNT(*) as users FROM public.users');
      client.release();
      
      console.log('‚úÖ [PRODUCTION DB] –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ:', result.rows[0].current_database);
      console.log('üë• [PRODUCTION DB] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', result.rows[0].users);
    } catch (error) {
      console.error('‚ùå [PRODUCTION DB] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error.message);
      throw error;
    }
  }
  
  return { pool: productionPool, db: productionDb };
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞—Ö
export async function getProductionDb() {
  const { db } = await initProductionDb();
  return db;
}

export async function getProductionPool() {
  const { pool } = await initProductionDb();
  return pool;
}

export async function queryProduction(text: string, params: any[] = []) {
  const pool = await getProductionPool();
  const client = await pool.connect();
  try {
    return await client.query(text, params);
  } finally {
    client.release();
  }
}

// –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏
export const db = new Proxy({} as any, {
  get(target, prop) {
    return async (...args: any[]) => {
      const productionDb = await getProductionDb();
      return (productionDb as any)[prop](...args);
    };
  }
});

export const pool = {
  query: async (text: string, params: any[] = []) => queryProduction(text, params),
  connect: async () => {
    const pool = await getProductionPool();
    return pool.connect();
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
initProductionDb().catch(console.error);