/**
 * Новые маршруты API, использующие новую архитектуру:
 * контроллер -> сервис -> хранилище
 * 
 * Этот файл содержит некоторые из маршрутов, которые были
 * переписаны на новую архитектуру. После тестирования и
 * полного перехода, все эти маршруты будут перенесены в
 * основной файл routes.ts
 */

import express, { Express, Request, Response } from "express";

// Явно импортируем контроллеры для новых маршрутов API
import { SessionController } from './controllers/sessionController';
import { UserController } from './controllers/userController';
import { TransactionController } from './controllers/transactionController';
import { MissionController } from './controllers/missionControllerConsolidated';
import { ReferralController } from './controllers/referralControllerConsolidated';
import { BoostController } from './controllers/boostControllerConsolidated';
import { TonBoostController } from './controllers/tonBoostControllerConsolidated';
import { WalletController } from './controllers/walletControllerConsolidated';
import { DailyBonusController } from './controllers/dailyBonusControllerConsolidated';

/**
 * Регистрирует новые маршруты API в указанном приложении Express
 * @param app Экземпляр приложения Express
 */
export function registerRoutes(app: Express): void {
  console.log('[NewRoutes] Регистрация новых маршрутов API');

  // Маршруты для сессий
  app.post('/api/v2/session/restore', (req, res) => SessionController.restoreSession(req, res));
  app.get('/api/v2/session/generate-guest-id', (req, res) => SessionController.generateGuestId(req, res));
  
  // Маршруты для пользователей
  app.get('/api/v2/users/:id', (req, res) => UserController.getUserById(req, res));
  app.get('/api/v2/users/username/:username', (req, res) => UserController.getUserByUsername(req, res));
  app.get('/api/v2/users/guest/:guestId', (req, res) => UserController.getUserByGuestId(req, res));
  app.get('/api/v2/users/ref-code/:refCode', (req, res) => UserController.getUserByRefCode(req, res));
  app.post('/api/v2/users', (req, res) => UserController.createUser(req, res));
  app.put('/api/v2/users/:id/ref-code', (req, res) => UserController.updateRefCode(req, res));
  
  // Маршруты для транзакций
  app.get('/api/v2/users/:userId/transactions', (req, res) => TransactionController.getUserTransactions(req, res));
  app.post('/api/v2/users/:userId/deposit', (req, res) => TransactionController.depositFunds(req, res));
  app.post('/api/v2/users/:userId/withdraw', (req, res) => TransactionController.withdrawFunds(req, res));
  app.post('/api/v2/transactions', (req, res) => TransactionController.createTransaction(req, res));

  // Маршруты для заданий с использованием консолидированного контроллера
  app.get('/api/v2/missions/active', MissionController.getActiveMissions);
  app.get('/api/v2/user-missions', MissionController.getUserCompletedMissions);
  app.get('/api/v2/missions/with-completion', MissionController.getMissionsWithCompletion);
  app.get('/api/v2/missions/check/:userId/:missionId', MissionController.checkMissionCompletion);
  app.post('/api/v2/missions/complete', MissionController.completeMission);
  
  // Маршруты для реферальной системы с использованием консолидированного контроллера
  app.get('/api/v2/referrals/tree', ReferralController.getReferralTree);
  app.get('/api/v2/referrals/stats', ReferralController.getUserReferralStats);
  app.post('/api/v2/referrals/apply', ReferralController.applyReferralCode);
  
  // Маршруты для бонусов с использованием консолидированного контроллера
  app.get('/api/v2/daily-bonus/status', DailyBonusController.getDailyBonusStatus);
  app.post('/api/v2/daily-bonus/claim', DailyBonusController.claimDailyBonus);
  app.get('/api/v2/daily-bonus/streak-info', DailyBonusController.getStreakInfo);
  
  // Маршруты для кошелька с использованием консолидированного контроллера
  app.get('/api/v2/wallet/balance', WalletController.getWalletBalance);
  app.post('/api/v2/wallet/connect', WalletController.connectWallet);
  app.post('/api/v2/wallet/disconnect', WalletController.disconnectWallet);
  app.get('/api/v2/wallet/transactions', WalletController.getTransactions);
  app.post('/api/v2/wallet/withdraw', WalletController.withdrawUni);
  
  // Маршруты для TON бустов с использованием консолидированного контроллера
  app.get('/api/v2/ton-farming/boosts', TonBoostController.getTonBoostPackages);
  app.get('/api/v2/ton-farming/active', TonBoostController.getUserTonBoosts);
  app.post('/api/v2/ton-farming/purchase', TonBoostController.purchaseTonBoost);
  app.post('/api/v2/ton-farming/confirm-payment', TonBoostController.confirmExternalPayment);
  app.get('/api/v2/ton-farming/info', TonBoostController.getUserTonFarmingInfo);
  app.post('/api/v2/ton-farming/update', TonBoostController.calculateAndUpdateTonFarming);
  
  // Маршруты для обычных бустов с использованием консолидированного контроллера
  app.get('/api/v2/boosts', BoostController.getBoostPackages);
  app.get('/api/v2/boosts/active', BoostController.getUserActiveBoosts);
  app.post('/api/v2/boosts/purchase', BoostController.purchaseBoost);
  
  console.log('[NewRoutes] ✓ Новые маршруты API зарегистрированы успешно');
}