/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ production –≤ Replit
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js,
 * –∞ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ production —Ä–µ–∂–∏–º–µ
 */

const { exec } = require('child_process');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è NODE_ENV=production
process.env.NODE_ENV = 'production';

console.log('üöÄ –ó–∞–ø—É—Å–∫ UniFarm –≤ —Ä–µ–∂–∏–º–µ PRODUCTION —á–µ—Ä–µ–∑ Replit...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ–º–∏—Å–∞
function runCommand(command) {
  return new Promise((resolve, reject) => {
    console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
    
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
        // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º—ã –ù–ï –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        resolve({ stdout, stderr });
        return;
      }
      
      if (stdout) console.log(stdout);
      if (stderr) console.error(stderr);
      
      resolve({ stdout, stderr });
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function startProductionMode() {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    await runCommand('pkill -f "node " || true');
    await runCommand('pkill -f "tsx " || true');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dist/index.js 
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    await runCommand('ls -la dist');
    
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—É—Å–∫ bash-—Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ node
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ production...');
    console.log('NODE_ENV=', process.env.NODE_ENV);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ exec, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    const nodeProcess = exec('NODE_ENV=production node dist/index.js', {
      env: { ...process.env, NODE_ENV: 'production' }
    });
    
    nodeProcess.stdout.on('data', (data) => {
      console.log(`[PRODUCTION] ${data.toString()}`);
    });
    
    nodeProcess.stderr.on('data', (data) => {
      console.error(`[PRODUCTION ERR] ${data.toString()}`);
    });
    
    nodeProcess.on('close', (code) => {
      console.log(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ production!');
    console.log('–û—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
    
  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
startProductionMode();