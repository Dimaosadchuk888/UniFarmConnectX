// –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–ê–î–ö–ò: –ü–û–ß–ï–ú–£ –ù–ï –†–ê–°–¢–ï–¢ –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface UserCountAnalysis {
  totalUsers: number;
  maxUserId: number;
  minUserId: number;
  usersAfterJuly25: number;
  usersAfterJuly30: number;
  usersToday: number;
  recentUsers: any[];
}

async function analyzeUserCount(): Promise<UserCountAnalysis> {
  try {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('='.repeat(60));

    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: stats, error: statsError } = await supabase
      .from('users')
      .select('id, created_at', { count: 'exact' });

    if (statsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsError.message}`);
    }

    if (!stats) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
    }

    const totalUsers = stats.length;
    const userIds = stats.map(u => u.id).sort((a, b) => a - b);
    const maxUserId = Math.max(...userIds);
    const minUserId = Math.min(...userIds);

    // 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    const july25 = '2025-07-25T00:00:00Z';
    const july30 = '2025-07-30T00:00:00Z';
    const today = '2025-08-01T00:00:00Z';

    const usersAfterJuly25 = stats.filter(u => u.created_at >= july25).length;
    const usersAfterJuly30 = stats.filter(u => u.created_at >= july30).length;
    const usersToday = stats.filter(u => u.created_at >= today).length;

    // 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: recentUsers, error: recentError } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, created_at, balance_uni, balance_ton')
      .order('id', { ascending: false })
      .limit(10);

    if (recentError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', recentError.message);
    }

    const analysis: UserCountAnalysis = {
      totalUsers,
      maxUserId,
      minUserId,
      usersAfterJuly25,
      usersAfterJuly30,
      usersToday,
      recentUsers: recentUsers || []
    };

    return analysis;

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

async function checkRegistrationPath(): Promise<void> {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–£–¢–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
  console.log('='.repeat(40));

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ID > 303
    const { data: highIdUsers, error } = await supabase
      .from('users')
      .select('id, telegram_id, username, created_at')
      .gt('id', 303)
      .order('id', { ascending: true })
      .limit(5);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º–∏ ID:', error.message);
      return;
    }

    if (!highIdUsers || highIdUsers.length === 0) {
      console.log('üö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° ID > 303!');
      console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢ –∏–ª–∏ –ù–ï –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø');
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ID > 303:');
      highIdUsers.forEach(user => {
        console.log(`   ID: ${user.id}, Telegram: ${user.telegram_id}, Username: ${user.username}, –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ telegram_id
    const { data: duplicateTelegram, error: dupError } = await supabase
      .from('users')
      .select('telegram_id')
      .not('telegram_id', 'is', null)
      .order('telegram_id');

    if (!dupError && duplicateTelegram) {
      const telegramIds = duplicateTelegram.map(u => u.telegram_id);
      const uniqueTelegramIds = [...new Set(telegramIds)];
      
      if (telegramIds.length !== uniqueTelegramIds.length) {
        console.log('üö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ TELEGRAM_ID!');
        console.log(`   –í—Å–µ–≥–æ telegram_id: ${telegramIds.length}`);
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö telegram_id: ${uniqueTelegramIds.length}`);
        console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${telegramIds.length - uniqueTelegramIds.length}`);
      } else {
        console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
}

async function main(): Promise<void> {
  try {
    console.log('üîç –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–û–ß–ï–ú–£ –ù–ï –†–ê–°–¢–ï–¢ –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('=' .repeat(80));
    console.log('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
    console.log('');

    const analysis = await analyzeUserCount();

    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${analysis.totalUsers}`);
    console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID: ${analysis.minUserId}`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID: ${analysis.maxUserId}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ 25 –∏—é–ª—è: ${analysis.usersAfterJuly25}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ 30 –∏—é–ª—è: ${analysis.usersAfterJuly30}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è (01 –∞–≤–≥—É—Å—Ç–∞): ${analysis.usersToday}`);
    console.log('');

    if (analysis.recentUsers.length > 0) {
      console.log('üë• –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
      analysis.recentUsers.forEach(user => {
        console.log(`   ID: ${user.id}, Telegram: ${user.telegram_id}, Username: ${user.username || 'N/A'}, –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
      });
    }

    await checkRegistrationPath();

    // –í—ã–≤–æ–¥—ã
    console.log('\nüéØ –í–´–í–û–î–´:');
    if (analysis.maxUserId === 303) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID = 303');
      console.log('   –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï —Å–æ–∑–¥–∞—é—Ç—Å—è');
      console.log('   –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    if (analysis.usersAfterJuly25 === 0) {
      console.log('üö® –ù–ï–¢ –ù–û–í–´–• –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô —Å 25 –∏—é–ª—è');
    }

    if (analysis.usersToday === 0) {
      console.log('üö® –ù–ï–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô –°–ï–ì–û–î–ù–Ø');
    }

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
main().catch(console.error);