/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UniFarm –∫ deployment
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –º–æ–¥—É–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class DeploymentReadinessCheck {
  constructor() {
    this.results = {
      secrets: { status: 'pending', checks: [] },
      database: { status: 'pending', checks: [] },
      modules: { status: 'pending', checks: [] },
      overall: { status: 'pending', readyForDeploy: false }
    };
  }

  log(category, check, status, details = null) {
    console.log(`[${category.toUpperCase()}] ${check}: ${status}`);
    if (details) console.log(`  ‚Üí ${details}`);
    
    this.results[category].checks.push({
      check,
      status,
      details,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
   */
  checkSecrets() {
    console.log('\nüîê –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–û–í...');

    const requiredSecrets = {
      'SUPABASE_URL': process.env.SUPABASE_URL,
      'SUPABASE_KEY': process.env.SUPABASE_KEY,
      'TELEGRAM_BOT_TOKEN': process.env.TELEGRAM_BOT_TOKEN,
      'NODE_ENV': process.env.NODE_ENV,
      'PORT': process.env.PORT
    };

    let allSecretsPresent = true;

    Object.entries(requiredSecrets).forEach(([key, value]) => {
      if (value) {
        this.log('secrets', key, '–ù–ê–ô–î–ï–ù', `${value.substring(0, 20)}...`);
      } else {
        this.log('secrets', key, '–û–¢–°–£–¢–°–¢–í–£–ï–¢', '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è deployment');
        allSecretsPresent = false;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Supabase URL
    if (process.env.SUPABASE_URL) {
      if (process.env.SUPABASE_URL.includes('supabase.co')) {
        this.log('secrets', 'SUPABASE_URL_FORMAT', '–ö–û–†–†–ï–ö–¢–ù–´–ô', '–í–∞–ª–∏–¥–Ω—ã–π Supabase URL');
      } else {
        this.log('secrets', 'SUPABASE_URL_FORMAT', '–ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô', 'URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç supabase.co');
        allSecretsPresent = false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const oldVars = ['DATABASE_URL', 'PGHOST', 'PGUSER', 'PGPASSWORD', 'PGPORT', 'PGDATABASE'];
    const foundOldVars = oldVars.filter(varName => process.env[varName]);

    if (foundOldVars.length === 0) {
      this.log('secrets', '–°–¢–ê–†–´–ï_–ü–ï–†–ï–ú–ï–ù–ù–´–ï', '–û–ß–ò–©–ï–ù–´', '–ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
    } else {
      this.log('secrets', '–°–¢–ê–†–´–ï_–ü–ï–†–ï–ú–ï–ù–ù–´–ï', '–ù–ê–ô–î–ï–ù–´', `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã: ${foundOldVars.join(', ')}`);
    }

    this.results.secrets.status = allSecretsPresent && foundOldVars.length === 0 ? 'success' : 'failed';
    return this.results.secrets.status === 'success';
  }

  /**
   * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
   */
  async checkDatabase() {
    console.log('\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...');

    try {
      const supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_KEY
      );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const { data: connectionTest, error: connectionError } = await supabase
        .from('users')
        .select('id')
        .limit(1);

      if (connectionError) {
        this.log('database', '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï', '–û–®–ò–ë–ö–ê', connectionError.message);
        this.results.database.status = 'failed';
        return false;
      }

      this.log('database', '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï', '–£–°–ü–ï–®–ù–û', 'Supabase API –¥–æ—Å—Ç—É–ø–µ–Ω');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
      const requiredTables = ['users', 'transactions', 'referrals', 'farming_sessions', 'user_sessions'];
      
      for (const table of requiredTables) {
        try {
          const { data, error } = await supabase.from(table).select('*').limit(1);
          if (error) {
            this.log('database', `–¢–ê–ë–õ–ò–¶–ê_${table.toUpperCase()}`, '–û–®–ò–ë–ö–ê', error.message);
          } else {
            this.log('database', `–¢–ê–ë–õ–ò–¶–ê_${table.toUpperCase()}`, '–î–û–°–¢–£–ü–ù–ê', `–ó–∞–ø–∏—Å–µ–π: ${data?.length || 0}`);
          }
        } catch (tableError) {
          this.log('database', `–¢–ê–ë–õ–ò–¶–ê_${table.toUpperCase()}`, '–ù–ï–î–û–°–¢–£–ü–ù–ê', tableError.message);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –≤ users —Ç–∞–±–ª–∏—Ü–µ
      const { data: usersSchema, error: schemaError } = await supabase
        .from('users')
        .select('telegram_id, username, ref_code, balance_uni, balance_ton')
        .limit(1);

      if (!schemaError && usersSchema) {
        this.log('database', '–°–•–ï–ú–ê_USERS', '–ö–û–†–†–ï–ö–¢–ù–ê–Ø', '–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      this.results.database.status = 'success';
      return true;

    } catch (error) {
      this.log('database', '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø_–û–®–ò–ë–ö–ê', '–û–®–ò–ë–ö–ê', error.message);
      this.results.database.status = 'failed';
      return false;
    }
  }

  /**
   * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async checkModules() {
    console.log('\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô...');

    const moduleChecks = [
      {
        name: 'CORE_SUPABASE',
        description: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase',
        check: () => {
          try {
            const { createClient } = require('@supabase/supabase-js');
            const client = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
            return client ? '–ó–ê–ì–†–£–ñ–ï–ù' : '–û–®–ò–ë–ö–ê';
          } catch (error) {
            return '–û–®–ò–ë–ö–ê';
          }
        }
      },
      {
        name: 'AUTH_SERVICE',
        description: 'Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        check: () => {
          try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            return process.env.TELEGRAM_BOT_TOKEN ? '–ì–û–¢–û–í' : '–ù–ï–¢_–¢–û–ö–ï–ù–ê';
          } catch (error) {
            return '–û–®–ò–ë–ö–ê';
          }
        }
      },
      {
        name: 'PRODUCTION_CONFIG',
        description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è production',
        check: () => {
          const isProduction = process.env.NODE_ENV === 'production';
          const hasPort = !!process.env.PORT;
          return isProduction && hasPort ? '–ù–ê–°–¢–†–û–ï–ù' : '–¢–†–ï–ë–£–ï–¢_–ù–ê–°–¢–†–û–ô–ö–ò';
        }
      }
    ];

    let allModulesReady = true;

    for (const module of moduleChecks) {
      try {
        const result = await module.check();
        this.log('modules', module.name, result, module.description);
        if (result.includes('–û–®–ò–ë–ö–ê') || result.includes('–ù–ï–¢_') || result.includes('–¢–†–ï–ë–£–ï–¢_')) {
          allModulesReady = false;
        }
      } catch (error) {
        this.log('modules', module.name, '–û–®–ò–ë–ö–ê', error.message);
        allModulesReady = false;
      }
    }

    this.results.modules.status = allModulesReady ? 'success' : 'failed';
    return allModulesReady;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
   */
  generateFinalReport() {
    const allSystemsReady = Object.values(this.results)
      .filter(result => result !== this.results.overall)
      .every(result => result.status === 'success');

    console.log('\n' + '='.repeat(80));
    console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö DEPLOYMENT');
    console.log('='.repeat(80));

    console.log('\n‚úÖ –°–ï–ö–†–ï–¢–´:');
    this.results.secrets.checks.forEach(check => {
      const icon = check.status.includes('–ù–ê–ô–î–ï–ù') || check.status.includes('–ö–û–†–†–ï–ö–¢–ù–´–ô') || check.status.includes('–û–ß–ò–©–ï–ù–´') ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${check.check}: ${check.details || check.status}`);
    });

    console.log('\n‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–•:');
    this.results.database.checks.forEach(check => {
      const icon = check.status.includes('–£–°–ü–ï–®–ù–û') || check.status.includes('–î–û–°–¢–£–ü–ù–ê') || check.status.includes('–ö–û–†–†–ï–ö–¢–ù–ê–Ø') ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${check.check}: ${check.details || check.status}`);
    });

    console.log('\n‚úÖ –ú–û–î–£–õ–ò:');
    this.results.modules.checks.forEach(check => {
      const icon = check.status.includes('–ó–ê–ì–†–£–ñ–ï–ù') || check.status.includes('–ì–û–¢–û–í') || check.status.includes('–ù–ê–°–¢–†–û–ï–ù') ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${check.check}: ${check.details || check.status}`);
    });

    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:');
    if (allSystemsReady) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö DEPLOYMENT');
      console.log('   - –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   - Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
      console.log('   - –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã');
      console.log('   - –°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
      console.log('\nüöÄ –ú–û–ñ–ù–û –ó–ê–ü–£–°–ö–ê–¢–¨ DEPLOYMENT!');
    } else {
      console.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò –ü–ï–†–ï–î DEPLOYMENT');
      console.log('   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º');
    }

    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –°–µ–∫—Ä–µ—Ç—ã: ${this.results.secrets.checks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫`);
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.results.database.checks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫`);
    console.log(`   –ú–æ–¥—É–ª–∏: ${this.results.modules.checks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫`);
    console.log(`   –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${allSystemsReady ? '100%' : '75%'}`);
    
    console.log('='.repeat(80));

    this.results.overall = {
      status: allSystemsReady ? 'ready' : 'not_ready',
      readyForDeploy: allSystemsReady,
      timestamp: new Date().toISOString()
    };

    return allSystemsReady;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async runFullCheck() {
    console.log('üîç –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò –ì–û–¢–û–í–ù–û–°–¢–ò –ö DEPLOYMENT');
    console.log('üéØ –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å UniFarm –∫ production');
    console.log('=' * 80);

    const secretsReady = this.checkSecrets();
    const databaseReady = await this.checkDatabase();
    const modulesReady = await this.checkModules();

    const overallReady = this.generateFinalReport();

    return {
      ready: overallReady,
      results: this.results
    };
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
const readinessCheck = new DeploymentReadinessCheck();
readinessCheck.runFullCheck()
  .then(result => {
    if (result.ready) {
      console.log('\nüéâ UniFarm –≥–æ—Ç–æ–≤ –∫ deployment!');
      process.exit(0);
    } else {
      console.log('\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ deployment');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    process.exit(1);
  });