#!/usr/bin/env tsx
/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 251 –∏ 255
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —à—Ç–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

interface BoostPackage {
  id: number;
  name: string;
  min_amount: number;
  daily_rate: number;
  uni_bonus: number;
  duration_days: number;
  is_active: boolean;
}

async function ensureUserHasBalance(userId: number, requiredAmount: number): Promise<boolean> {
  console.log(`\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const { data: user, error } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', userId)
    .single();
    
  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return false;
  }
  
  const currentBalance = parseFloat(user.balance_ton || '0');
  console.log(`üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${currentBalance} TON (—Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount} TON)`);
  
  if (currentBalance >= requiredAmount) {
    console.log(`‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤`);
    return true;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—É–º–º—É
  const needToAdd = requiredAmount - currentBalance + 0.01; // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
  const newBalance = currentBalance + needToAdd;
  
  console.log(`üí≥ –î–æ–±–∞–≤–ª—è–µ–º ${needToAdd} TON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} (–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} TON)`);
  
  const { error: updateError } = await supabase
    .from('users')
    .update({ 
      balance_ton: newBalance,
      updated_at: new Date().toISOString()
    })
    .eq('id', userId);
    
  if (updateError) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, updateError);
    return false;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
  const { error: transactionError } = await supabase
    .from('transactions')
    .insert({
      user_id: userId,
      type: 'MANUAL_DEPOSIT',
      amount: needToAdd,
      currency: 'TON',
      status: 'completed',
      description: `Manual balance adjustment for TON Boost activation (+${needToAdd} TON)`,
      metadata: {
        reason: 'ton_boost_activation_preparation',
        admin_action: true,
        original_balance: currentBalance,
        new_balance: newBalance
      },
      created_at: new Date().toISOString()
    });
    
  if (transactionError) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, transactionError);
    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }
  
  console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${newBalance} TON`);
  return true;
}

async function getOptimalBoostPackage(targetAmount: number = 2): Promise<BoostPackage | null> {
  console.log(`\nüì¶ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ TON Boost –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å—É–º–º—ã ${targetAmount} TON...`);
  
  const { data: packages, error } = await supabase
    .from('boost_packages')
    .select('*')
    .eq('is_active', true)
    .lte('min_amount', targetAmount)
    .order('min_amount', { ascending: false })
    .limit(1);
    
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤:', error);
    return null;
  }
  
  if (!packages || packages.length === 0) {
    console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—É–º–º—ã ${targetAmount} TON`);
    return null;
  }
  
  const selectedPackage = packages[0];
  console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: ${selectedPackage.name}`, {
    id: selectedPackage.id,
    minAmount: selectedPackage.min_amount,
    dailyRate: selectedPackage.daily_rate,
    uniBonus: selectedPackage.uni_bonus,
    duration: selectedPackage.duration_days
  });
  
  return selectedPackage;
}

async function activateBoostUsingSystemMethod(userId: number, packageId: number): Promise<boolean> {
  console.log(`\nüöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã...`);
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BoostService - —Ç–æ—Ç –∂–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const { BoostService } = await import('./modules/boost/service');
    const boostService = new BoostService();
    
    // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const result = await boostService.purchaseBoost(userId.toString(), packageId.toString(), 'internal_balance');
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
      success: result.success,
      message: result.message,
      errorType: result.error_type || 'none',
      hasBalanceUpdate: !!result.balanceUpdate
    });
    
    if (result.success) {
      console.log(`‚úÖ TON Boost —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      if (result.balanceUpdate) {
        console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:`, {
          tonBalance: result.balanceUpdate.tonBalance,
          previousBalance: result.balanceUpdate.previousTonBalance,
          deducted: result.balanceUpdate.deductedAmount
        });
      }
      
      return true;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${result.message}`);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return false;
  }
}

async function verifyActivationResult(userId: number): Promise<void> {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
  const { data: user } = await supabase
    .from('users')
    .select(`
      ton_boost_active,
      ton_boost_package,
      ton_boost_package_id,
      ton_boost_rate,
      balance_ton,
      balance_uni
    `)
    .eq('id', userId)
    .single();
    
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
  const { data: farming } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId.toString())
    .single();
    
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: transactions } = await supabase
    .from('transactions')
    .select('type, amount, currency, status, description, created_at')
    .eq('user_id', userId)
    .in('type', ['BOOST_PURCHASE', 'DAILY_BONUS'])
    .order('created_at', { ascending: false })
    .limit(5);
    
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
  console.log(`  Users table:`, {
    boost_active: user?.ton_boost_active,
    package: user?.ton_boost_package,
    package_id: user?.ton_boost_package_id,
    rate: user?.ton_boost_rate,
    balances: {
      ton: user?.balance_ton,
      uni: user?.balance_uni
    }
  });
  
  console.log(`  TON Farming Data:`, farming ? {
    farming_balance: farming.farming_balance,
    farming_rate: farming.farming_rate,
    boost_package_id: farming.boost_package_id,
    boost_active: farming.boost_active
  } : '–ù–µ—Ç –∑–∞–ø–∏—Å–∏');
  
  console.log(`  Recent transactions: ${transactions?.length || 0}`);
  transactions?.forEach((tx, index) => {
    console.log(`    ${index + 1}. ${tx.type}: ${tx.amount} ${tx.currency} (${tx.status})`);
  });
  
  // –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  const isUserTableOk = user?.ton_boost_active === true && user?.ton_boost_package;
  const isFarmingDataOk = farming?.boost_active === true && farming?.farming_balance;
  const hasTransactions = transactions && transactions.length > 0;
  
  const activationScore = [isUserTableOk, isFarmingDataOk, hasTransactions].filter(Boolean).length;
  const maxScore = 3;
  
  console.log(`${activationScore === maxScore ? '‚úÖ' : '‚ö†Ô∏è'} –û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${activationScore}/${maxScore}`);
  
  if (activationScore === maxScore) {
    console.log(`üéâ TON Boost –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}!`);
  } else {
    console.log(`‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${activationScore}/${maxScore})`);
  }
}

async function main() {
  console.log('üöÄ === –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í ===');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toISOString());
  console.log('üë• –¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 251, 255');
  console.log('üí∞ –î–µ–ø–æ–∑–∏—Ç: 2 TON –∫–∞–∂–¥–æ–º—É');
  console.log('üîß –ú–µ—Ç–æ–¥: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)');
  
  const targetUsers = [251, 255];
  const depositAmount = 2;
  const results: { userId: number; success: boolean }[] = [];
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
  const boostPackage = await getOptimalBoostPackage(depositAmount);
  if (!boostPackage) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π TON Boost –ø–∞–∫–µ—Ç');
    return;
  }
  
  console.log(`\nüì¶ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞–∫–µ—Ç: ${boostPackage.name} (ID: ${boostPackage.id})`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const userId of targetUsers) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}`);
    console.log(`${'='.repeat(80)}`);
    
    try {
      // –®–∞–≥ 1: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const balanceOk = await ensureUserHasBalance(userId, boostPackage.min_amount);
      if (!balanceOk) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        results.push({ userId, success: false });
        continue;
      }
      
      // –®–∞–≥ 2: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
      const activationOk = await activateBoostUsingSystemMethod(userId, boostPackage.id);
      if (!activationOk) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        results.push({ userId, success: false });
        continue;
      }
      
      // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await verifyActivationResult(userId);
      results.push({ userId, success: true });
      
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      results.push({ userId, success: false });
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log(`\n${'='.repeat(80)}`);
  console.log('üìà === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
  console.log(`${'='.repeat(80)}`);
  
  results.forEach(({ userId, success }) => {
    console.log(`${success ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${success ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  });
  
  const successCount = results.filter(r => r.success).length;
  const totalCount = results.length;
  
  console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã`);
  
  if (successCount === totalCount) {
    console.log('üéâ –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 251 –∏ 255 —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã');
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
    console.log('‚úÖ –ë—É—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch(console.error);