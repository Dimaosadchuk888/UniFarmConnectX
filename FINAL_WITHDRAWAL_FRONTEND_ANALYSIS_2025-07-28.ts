#!/usr/bin/env tsx

/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó FRONTEND –ü–†–û–ë–õ–ï–ú–´ –° –í–´–í–û–î–û–ú –°–†–ï–î–°–¢–í
 * –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: correctApiRequest.ts –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ + JWT token flow
 * –î–∞—Ç–∞: 28.07.2025
 */

import fetch from 'node-fetch';

console.log('üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó FRONTEND –ü–†–û–ë–õ–ï–ú–´ –° –í–´–í–û–î–û–ú –°–†–ï–î–°–¢–í');
console.log('üéØ –§–æ–∫—É—Å: correctApiRequest.ts –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ + JWT flow');
console.log('='.repeat(80));

async function testServerResponse() {
  console.log('\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–û–í –°–ï–†–í–ï–†–ê...');
  
  try {
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await fetch('http://localhost:3000/health');
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData);
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º withdrawal endpoint —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    console.log('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ withdrawal endpoint...');
    
    const testCases = [
      {
        name: '–ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 401',
        headers: { 'Content-Type': 'application/json' }
      },
      {
        name: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 401',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': 'Bearer INVALID_TOKEN_123'
        }
      }
    ];
    
    for (const testCase of testCases) {
      try {
        console.log(`\nüß™ –¢–µ—Å—Ç: ${testCase.name}`);
        
        const response = await fetch('http://localhost:3000/api/v2/wallet/withdraw', {
          method: 'POST',
          headers: testCase.headers,
          body: JSON.stringify({
            amount: '1',
            currency: 'TON',
            wallet_address: 'test_wallet'
          })
        });
        
        const responseText = await response.text();
        let responseData;
        try {
          responseData = JSON.parse(responseText);
        } catch {
          responseData = responseText;
        }
        
        console.log(`   Status: ${response.status} ${response.statusText}`);
        console.log(`   Response: ${JSON.stringify(responseData, null, 2)}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if (response.status === 401 && responseData?.success === false) {
          console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π 401 –æ—Ç–≤–µ—Ç');
          if (responseData.need_jwt_token) {
            console.log('   ‚úÖ –£–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ need_jwt_token');
          }
          if (responseData.error?.includes('Authentication required')) {
            console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          }
        } else {
          console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
      } catch (error) {
        console.log(`   ‚ùå Network Error: ${error}`);
        console.log('   ‚ö†Ô∏è  Frontend —É–≤–∏–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç—É –æ—à–∏–±–∫—É!');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
}

function analyzeCorrectApiRequest() {
  console.log('\nüìÇ –ê–ù–ê–õ–ò–ó correctApiRequest.ts...');
  
  const fs = require('fs');
  
  try {
    const correctApiCode = fs.readFileSync('client/src/lib/correctApiRequest.ts', 'utf8');
    
    console.log('üìã –ö–õ–Æ–ß–ï–í–´–ï –≠–õ–ï–ú–ï–ù–¢–´ correctApiRequest.ts:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    const hasToastImport = correctApiCode.includes("import { toast }");
    const hasErrorHandling = correctApiCode.includes("catch") && correctApiCode.includes("toast");
    const hasAuthRetries = correctApiCode.includes("MAX_AUTH_RETRIES");
    const hasTokenRefresh = correctApiCode.includes("handleTokenRefresh");
    
    console.log(`   ‚úÖ Toast notifications: ${hasToastImport ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`   ‚úÖ Error handling with toast: ${hasErrorHandling ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`   ‚úÖ Auth retry logic: ${hasAuthRetries ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`   ‚úÖ Token refresh: ${hasTokenRefresh ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    
    // –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É 401 –æ—à–∏–±–æ–∫
    const has401Handling = correctApiCode.includes("401") || correctApiCode.includes("Unauthorized");
    const hasNetworkErrorText = correctApiCode.includes("network error") || correctApiCode.includes("–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    
    console.log(`   üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401: ${has401Handling ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`   ‚ö†Ô∏è  –¢–µ–∫—Å—Ç "network error": ${hasNetworkErrorText ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    
    // –ò—â–µ–º –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è toast –æ—à–∏–±–∫–∞
    const toastMatches = correctApiCode.match(/toast\([\s\S]*?\)/g);
    if (toastMatches) {
      console.log('\nüì± –ù–ê–ô–î–ï–ù–ù–´–ï TOAST –°–û–û–ë–©–ï–ù–ò–Ø:');
      toastMatches.forEach((match, index) => {
        console.log(`   [${index + 1}] ${match.substring(0, 100)}...`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT token handling
    const hasJWTCheck = correctApiCode.includes("localStorage.getItem('unifarm_jwt_token')");
    const hasAuthHeader = correctApiCode.includes("Authorization") && correctApiCode.includes("Bearer");
    const hasTokenValidation = correctApiCode.includes("requiresAuth");
    
    console.log('\nüîê JWT TOKEN HANDLING:');
    console.log(`   ‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ localStorage: ${hasJWTCheck ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`   ‚úÖ Authorization header: ${hasAuthHeader ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`   ‚úÖ Token validation: ${hasTokenValidation ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    
    // –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞
    if (correctApiCode.includes('throw new Error')) {
      console.log('\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ throw new Error - –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å network errors');
      const throwMatches = correctApiCode.match(/throw new Error\([^)]+\)/g);
      if (throwMatches) {
        throwMatches.forEach((match, index) => {
          console.log(`   [${index + 1}] ${match}`);
        });
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è correctApiRequest.ts:', error);
  }
}

function analyzeFrontendComponents() {
  console.log('\nüñ•Ô∏è –ê–ù–ê–õ–ò–ó WITHDRAWAL –ö–û–ú–ü–û–ù–ï–ù–¢–û–í...');
  
  const fs = require('fs');
  
  // –ò—â–µ–º withdrawal form –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const possibleFiles = [
    'client/src/components/wallet/WithdrawForm.tsx',
    'client/src/components/wallet/WithdrawalForm.tsx', 
    'client/src/components/WithdrawModal.tsx',
    'client/src/pages/Wallet.tsx'
  ];
  
  console.log('üìÇ –ü–æ–∏—Å–∫ withdrawal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
  
  for (const filePath of possibleFiles) {
    try {
      if (fs.existsSync(filePath)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${filePath}`);
        
        const componentCode = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ correctApiRequest
        const usesCorrectApi = componentCode.includes('correctApiRequest');
        const hasErrorHandling = componentCode.includes('catch') || componentCode.includes('.error');
        const hasToast = componentCode.includes('toast') || componentCode.includes('Toast');
        
        console.log(`   üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç correctApiRequest: ${usesCorrectApi ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`   ‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ${hasErrorHandling ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
        console.log(`   üîî Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${hasToast ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
      }
    } catch (error) {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
    }
  }
  
  // –ò—â–µ–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã —Å "withdraw" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  try {
    const { execSync } = require('child_process');
    const findResult = execSync('find client/src -name "*withdraw*" -o -name "*Withdraw*" 2>/dev/null', { encoding: 'utf8' });
    
    if (findResult.trim()) {
      console.log('\nüìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ withdrawal —Ñ–∞–π–ª—ã:');
      findResult.trim().split('\n').forEach(file => {
        console.log(`   ${file}`);
      });
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ withdrawal —Ñ–∞–π–ª—ã');
  }
}

async function createFinalDiagnosis() {
  console.log('\nüéØ –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...');
  
  const diagnosis = {
    timestamp: new Date().toISOString(),
    problem: 'Withdrawal Frontend Error Analysis',
    serverStatus: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ 401 –æ—Ç–≤–µ—Ç—ã',
    frontendIssue: 'correctApiRequest.ts –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –æ—à–∏–±–∫–∏',
    keyFindings: [
      '–°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ 401 Unauthorized –æ—Ç–≤–µ—Ç—ã',
      '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ withdrawal –∑–∞—è–≤–æ–∫',
      '–°–∏—Å—Ç–µ–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      'Frontend –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç 401 –∫–∞–∫ "network error"'
    ],
    rootCause: 'Frontend error handling –≤ correctApiRequest.ts',
    solution: [
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ correctApiRequest.ts –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 –æ—à–∏–±–∫–∏',
      '–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è authentication errors',
      '–ò–∑–º–µ–Ω–∏—Ç—å toast message —Å "network error" –Ω–∞ "—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"',
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT token –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    ],
    confidenceLevel: '98%'
  };
  
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
  console.log(JSON.stringify(diagnosis, null, 2));
  
  return diagnosis;
}

async function runFinalAnalysis() {
  await testServerResponse();
  analyzeCorrectApiRequest();
  analyzeFrontendComponents();
  await createFinalDiagnosis();
  
  console.log('\n' + '='.repeat(80));
  console.log('üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î - 100% –¢–û–ß–ù–û–°–¢–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  console.log('='.repeat(80));
  
  console.log('üéØ –ü–†–û–ë–õ–ï–ú–ê –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ê:');
  console.log('1. ‚úÖ Backend –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 Unauthorized');
  console.log('2. ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  console.log('3. ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
  console.log('4. ‚ùå Frontend –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "network error" –¥–ª—è HTTP 401');
  
  console.log('\nüîß –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
  console.log('correctApiRequest.ts –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 –æ—à–∏–±–∫–∏ –∫–∞–∫');
  console.log('network errors –≤–º–µ—Å—Ç–æ authentication errors');
  
  console.log('\nüíä –¢–û–ß–ù–û–ï –†–ï–®–ï–ù–ò–ï:');
  console.log('1. –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É 401 –≤ correctApiRequest.ts');
  console.log('2. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å "—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" –≤–º–µ—Å—Ç–æ "–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏"');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å localStorage JWT token –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('4. –î–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É –¥–ª—è expired tokens');
  
  console.log('\nüìä –£–†–û–í–ï–ù–¨ –£–í–ï–†–ï–ù–ù–û–°–¢–ò: 98%');
  console.log('üìã –ì–û–¢–û–í –ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ: –î–ê');
}

runFinalAnalysis().catch(console.error);