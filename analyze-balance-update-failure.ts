/**
 * –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–û–ì–û –°–ë–û–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í
 * –ò—â–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª–æ–º–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

import { supabase } from './core/supabase.js';

async function analyzeBalanceUpdateFailure() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–û–ì–û –°–ë–û–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í');
  console.log('‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    console.log('\n=== 1. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    
    const { data: recentTransactions } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_uni, amount_ton, currency, status, created_at, description')
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()) // 2 —á–∞—Å–∞
      .order('created_at', { ascending: false })
      .limit(50);
    
    console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 —á–∞—Å–∞: ${recentTransactions?.length || 0}`);
    
    if (recentTransactions && recentTransactions.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      const byType = {};
      recentTransactions.forEach(tx => {
        if (!byType[tx.type]) byType[tx.type] = [];
        byType[tx.type].push(tx);
      });
      
      console.log('\nüìä –ü–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      Object.keys(byType).forEach(type => {
        console.log(`   ${type}: ${byType[type].length}`);
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      const deposits = recentTransactions.filter(tx => 
        tx.type === 'TON_DEPOSIT' || tx.type === 'FARMING_DEPOSIT'
      );
      
      console.log(`\nüí∞ –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ 2 —á–∞—Å–∞: ${deposits.length}`);
      deposits.slice(0, 10).forEach((dep, i) => {
        console.log(`  ${i+1}. User ${dep.user_id}: ${dep.type} ${dep.amount_uni || dep.amount_ton} ${dep.currency}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${dep.status}, –í—Ä–µ–º—è: ${dep.created_at}`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n=== 2. –ê–ù–ê–õ–ò–ó –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–û–í ===');
    
    const { data: usersWithRecentActivity } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, updated_at')
      .gte('updated_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
      .order('updated_at', { ascending: false })
      .limit(20);
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏ –∑–∞ 2 —á–∞—Å–∞: ${usersWithRecentActivity?.length || 0}`);
    
    if (usersWithRecentActivity && usersWithRecentActivity.length > 0) {
      usersWithRecentActivity.forEach((user, i) => {
        console.log(`  ${i+1}. User ${user.telegram_id || user.id}: UNI=${user.balance_uni}, TON=${user.balance_ton}`);
        console.log(`     –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updated_at}`);
      });
    } else {
      console.log('‚ùå –ù–ò –û–î–ò–ù –ë–ê–õ–ê–ù–° –ù–ï –û–ë–ù–û–í–õ–Ø–õ–°–Ø –ó–ê 2 –ß–ê–°–ê!');
    }
    
    // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    console.log('\n=== 3. –°–†–ê–í–ù–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ò –û–ë–ù–û–í–õ–ï–ù–ò–ô ===');
    
    if (recentTransactions && usersWithRecentActivity) {
      const transactionUsers = new Set(recentTransactions.map(tx => tx.user_id));
      const updatedUsers = new Set(usersWithRecentActivity.map(u => u.telegram_id || u.id));
      
      console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${transactionUsers.size}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏: ${updatedUsers.size}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –Ω–æ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      const usersWithoutBalanceUpdate = [...transactionUsers].filter(userId => 
        !updatedUsers.has(userId)
      );
      
      console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ë–ï–ó –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${usersWithoutBalanceUpdate.length}`);
      
      if (usersWithoutBalanceUpdate.length > 0) {
        console.log('\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
        usersWithoutBalanceUpdate.slice(0, 10).forEach(userId => {
          const userTransactions = recentTransactions.filter(tx => tx.user_id === userId);
          console.log(`   User ${userId}: ${userTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`);
          userTransactions.slice(0, 3).forEach(tx => {
            console.log(`     - ${tx.type}: ${tx.amount_uni || tx.amount_ton} ${tx.currency} (${tx.created_at})`);
          });
        });
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º BalanceManager –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n=== 4. –¢–ï–°–¢ BALANCE MANAGER ===');
    
    try {
      const { BalanceManager } = await import('./core/BalanceManager.js');
      const balanceManager = BalanceManager.getInstance();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const testUsers = [25, 184, 233]; // –†–∞–∑–Ω—ã–µ telegram_id
      
      for (const userId of testUsers) {
        console.log(`üß™ –¢–µ—Å—Ç getUserBalance(${userId}):`);
        const result = await balanceManager.getUserBalance(userId);
        if (result.success) {
          console.log(`   ‚úÖ –£—Å–ø–µ—Ö: UNI=${result.balance?.balance_uni}, TON=${result.balance?.balance_ton}`);
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      }
      
    } catch (bmError) {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ BalanceManager:', bmError.message);
      console.log('Stack:', bmError.stack);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤ –±–∞–∑–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ logs)
    console.log('\n=== 5. –ü–û–ò–°–ö –û–®–ò–ë–û–ö –í –°–ò–°–¢–ï–ú–ï ===');
    
    try {
      const { data: errorLogs } = await supabase
        .from('logs')
        .select('*')
        .eq('level', 'error')
        .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString())
        .order('created_at', { ascending: false })
        .limit(10);
      
      if (errorLogs && errorLogs.length > 0) {
        console.log(`üö® –û—à–∏–±–∫–∏ –∑–∞ 2 —á–∞—Å–∞: ${errorLogs.length}`);
        errorLogs.forEach((log, i) => {
          console.log(`  ${i+1}. ${log.message || log.error}`);
          console.log(`     –í—Ä–µ–º—è: ${log.created_at}`);
        });
      } else {
        console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } catch (logError) {
      console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // 6. –î–ò–ê–ì–ù–û–ó
    console.log('\n=== üéØ –°–ò–°–¢–ï–ú–ù–´–ô –î–ò–ê–ì–ù–û–ó ===');
    
    const hasRecentTransactions = recentTransactions && recentTransactions.length > 0;
    const hasBalanceUpdates = usersWithRecentActivity && usersWithRecentActivity.length > 0;
    
    if (hasRecentTransactions && !hasBalanceUpdates) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –Ω–æ –±–∞–ª–∞–Ω—Å—ã –ù–ï –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è!');
      console.log('   –ü—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. BalanceManager –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      console.log('   2. BalanceManager —Ä–∞–±–æ—Ç–∞–µ—Ç —Å telegram_id, –Ω–æ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   3. –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –ë–î');
      console.log('   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–æ–≤');
    } else if (!hasRecentTransactions) {
      console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–æ–æ–±—â–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è');
    } else if (hasRecentTransactions && hasBalanceUpdates) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    }
    
    return {
      recentTransactions: recentTransactions?.length || 0,
      balanceUpdates: usersWithRecentActivity?.length || 0,
      criticalIssue: hasRecentTransactions && !hasBalanceUpdates
    };
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    console.error('Stack:', error.stack);
    return null;
  }
}

analyzeBalanceUpdateFailure();