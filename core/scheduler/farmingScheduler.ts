/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –¥–ª—è Supabase API
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
 */

import cron from 'node-cron';
import { supabase } from '../supabase';
import { logger } from '../logger';

export class FarmingScheduler {
  private isRunning: boolean = false;

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
   */
  start(): void {
    if (this.isRunning) {
      logger.warn('FarmingScheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞');
    
    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–µ—Ä–∞–º
    cron.schedule('*/5 * * * *', async () => {
      await this.processUniFarmingIncome();
      await this.processTonFarmingIncome();
    });

    this.isRunning = true;
    logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processUniFarmingIncome(): Promise<void> {
    try {
      logger.info('[UNI Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤
      const { data: activeFarmers, error } = await supabase
        .from('users')
        .select('*')
        .not('uni_farming_start_timestamp', 'is', null)
        .not('uni_farming_rate', 'is', null);

      if (error) {
        logger.error('[UNI Farming] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', error.message);
        return;
      }

      logger.info(`[UNI Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤`);

      for (const farmer of activeFarmers || []) {
        try {
          const income = await this.calculateUniFarmingIncome(farmer);
          
          if (parseFloat(income) > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { error: updateError } = await supabase
              .from('users')
              .update({
                balance_uni: parseFloat(farmer.balance_uni || '0') + parseFloat(income),
                uni_farming_last_update: new Date().toISOString()
              })
              .eq('id', farmer.id);

            if (!updateError) {
              logger.info(`[FARMING_SCHEDULER] Successfully processed UNI farming for user ${farmer.id}`, {
                userId: farmer.id,
                amount: income,
                currency: 'UNI'
              });

              // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞
              try {
                const { ReferralService } = await import('../../modules/referral/service');
                const referralService = new ReferralService();
                const referralResult = await referralService.distributeReferralRewards(
                  farmer.id.toString(),
                  income,
                  'uni_farming',
                  'UNI'
                );

                if (referralResult.distributed > 0) {
                  logger.info(`[FARMING_SCHEDULER] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞`, {
                    farmerId: farmer.id,
                    income,
                    distributed: referralResult.distributed,
                    totalAmount: referralResult.totalAmount
                  });
                }
              } catch (referralError) {
                logger.error(`[FARMING_SCHEDULER] –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ UNI`, {
                  farmerId: farmer.id,
                  income,
                  error: referralError instanceof Error ? referralError.message : String(referralError)
                });
              }
            }
          }
        } catch (error) {
          logger.error(`[UNI Farming] Error processing farmer ${farmer.id}:`, error instanceof Error ? error.message : String(error));
        }
      }
    } catch (error) {
      logger.error('[UNI Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processTonFarmingIncome(): Promise<void> {
    try {
      logger.info('[TON Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤
      const { data: activeFarmers, error } = await supabase
        .from('farming_sessions')
        .select('*, users(*)')
        .eq('farming_type', 'TON_FARMING')
        .eq('is_active', true);

      if (error) {
        logger.error('[TON Farming] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', error.message);
        return;
      }

      logger.info(`[TON Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);

      for (const session of activeFarmers || []) {
        try {
          const income = await this.calculateTonFarmingIncome(session);
          
          if (parseFloat(income) > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { error: updateError } = await supabase
              .from('users')
              .update({
                balance_ton: parseFloat(session.users?.balance_ton || '0') + parseFloat(income)
              })
              .eq('id', session.user_id);

            if (!updateError) {
              logger.info(`[FARMING_SCHEDULER] Successfully processed TON farming for user ${session.user_id}`, {
                userId: session.user_id,
                amount: income,
                currency: 'TON'
              });
            }
          }
        } catch (error) {
          logger.error(`[TON Farming] Error processing session ${session.id}:`, error instanceof Error ? error.message : String(error));
        }
      }
    } catch (error) {
      logger.error('[TON Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  private async calculateUniFarmingIncome(farmer: any): Promise<string> {
    const now = new Date();
    const lastUpdate = farmer.uni_farming_last_update ? new Date(farmer.uni_farming_last_update) : new Date(farmer.uni_farming_start_timestamp);
    const hoursSinceLastUpdate = (now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60);
    
    const rate = parseFloat(farmer.uni_farming_rate || '0');
    const income = rate * hoursSinceLastUpdate;
    
    return income.toFixed(6);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  private async calculateTonFarmingIncome(session: any): Promise<string> {
    const now = new Date();
    const lastClaim = session.last_claim ? new Date(session.last_claim) : new Date(session.started_at);
    const hoursSinceLastClaim = (now.getTime() - lastClaim.getTime()) / (1000 * 60 * 60);
    
    const rate = parseFloat(session.rate || '0');
    const multiplier = parseFloat(session.boost_multiplier || '1');
    const income = rate * hoursSinceLastClaim * multiplier;
    
    return income.toFixed(6);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop(): void {
    if (this.isRunning) {
      this.isRunning = false;
      logger.info('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// Export singleton instance
export const farmingScheduler = new FarmingScheduler();