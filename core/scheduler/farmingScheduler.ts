/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –¥–ª—è Supabase API
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
 */

import cron from 'node-cron';
import { supabase } from '../supabase';
import { logger } from '../logger';
import { BalanceNotificationService } from '../balanceNotificationService';

export class FarmingScheduler {
  private isRunning: boolean = false;

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
   */
  start(): void {
    if (this.isRunning) {
      logger.warn('FarmingScheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞');
    
    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–µ—Ä–∞–º
    cron.schedule('*/5 * * * *', async () => {
      logger.info('‚è∞ [CRON] –ó–∞–ø—É—Å–∫ scheduler –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤');
      try {
        await this.processUniFarmingIncome();
        await this.processTonFarmingIncome();
        logger.info('‚úÖ [CRON] Scheduler –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        logger.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è scheduler –∑–∞–¥–∞—á–∏:', error);
      }
    });

    this.isRunning = true;
    logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ scheduler\'–∞');
    this.processUniFarmingIncome()
      .then(() => logger.info('‚úÖ –ü–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI farming –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'))
      .catch(error => logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è UNI farming:', error));
      
    this.processTonFarmingIncome()
      .then(() => logger.info('‚úÖ –ü–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON farming –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'))
      .catch(error => logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON farming:', error));
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processUniFarmingIncome(): Promise<void> {
    try {
      logger.info('[UNI Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
      const { data: activeFarmers, error } = await supabase
        .from('users')
        .select('*')
        .eq('uni_farming_active', true)  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        .not('uni_farming_start_timestamp', 'is', null)
        .not('uni_farming_rate', 'is', null);

      if (error) {
        logger.error('[UNI Farming] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', error.message);
        return;
      }

      logger.info(`[UNI Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ (—Å uni_farming_active=true)`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (activeFarmers && activeFarmers.length > 0) {
        logger.info('[UNI Farming] –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', {
          farmers: activeFarmers.map(f => ({
            id: f.id,
            telegram_id: f.telegram_id,
            uni_farming_active: f.uni_farming_active,
            deposit_amount: f.uni_deposit_amount,
            rate: f.uni_farming_rate
          }))
        });
      }

      for (const farmer of activeFarmers || []) {
        try {
          const income = await this.calculateUniFarmingIncome(farmer);
          
          if (parseFloat(income) > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ BalanceManager
            const balanceManager = await import('../../core/BalanceManager').then(m => m.default);
            const addBalanceResult = await balanceManager.addBalance(
              farmer.id,
              parseFloat(income),
              0,
              'UNI farming income'
            );

            if (addBalanceResult.success) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞
              await supabase
                .from('users')
                .update({
                  uni_farming_last_update: new Date().toISOString()
                })
                .eq('id', farmer.id);
            }

            const updateError = !addBalanceResult.success ? new Error(addBalanceResult.error || 'Balance update failed') : null;

            if (!updateError) {
              // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ farming_sessions
              await supabase
                .from('farming_sessions')
                .insert({
                  user_id: farmer.id,
                  session_type: 'UNI_FARMING',
                  amount_earned: parseFloat(income),
                  currency: 'UNI',
                  farming_rate: parseFloat(farmer.uni_farming_rate || '0'),
                  session_start: farmer.uni_farming_start_timestamp,
                  session_end: new Date().toISOString(),
                  status: 'completed',
                  created_at: new Date().toISOString()
                });

              // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é FARMING_REWARD
              await supabase
                .from('transactions')
                .insert({
                  user_id: farmer.id,
                  type: 'FARMING_REWARD',
                  amount_uni: income,
                  amount_ton: '0',
                  status: 'completed',
                  description: `UNI farming income: ${parseFloat(income).toFixed(6)} UNI (rate: ${farmer.uni_farming_rate})`,
                  source_user_id: farmer.id,
                  created_at: new Date().toISOString()
                });

              logger.info(`[FARMING_SCHEDULER] Successfully processed UNI farming for user ${farmer.id}`, {
                userId: farmer.id,
                amount: income,
                currency: 'UNI'
              });

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
              const balanceService = BalanceNotificationService.getInstance();
              balanceService.notifyBalanceUpdate({
                userId: farmer.id,
                balanceUni: parseFloat(farmer.balance_uni || '0') + parseFloat(income),
                balanceTon: parseFloat(farmer.balance_ton || '0'),
                changeAmount: parseFloat(income),
                currency: 'UNI',
                source: 'farming',
                timestamp: new Date().toISOString()
              });

              // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞
              try {
                const { ReferralService } = await import('../../modules/referral/service');
                const referralService = new ReferralService();
                const referralResult = await referralService.distributeReferralRewards(
                  farmer.id.toString(),
                  income,
                  'UNI',
                  'farming'
                );

                if (referralResult.distributed > 0) {
                  logger.info(`[FARMING_SCHEDULER] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞`, {
                    farmerId: farmer.id,
                    income,
                    distributed: referralResult.distributed,
                    totalAmount: referralResult.totalAmount
                  });
                }
              } catch (referralError) {
                logger.error(`[FARMING_SCHEDULER] –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ UNI`, {
                  farmerId: farmer.id,
                  income,
                  error: referralError instanceof Error ? referralError.message : String(referralError)
                });
              }
            }
          }
        } catch (error) {
          logger.error(`[UNI Farming] Error processing farmer ${farmer.id}:`, error instanceof Error ? error.message : String(error));
        }
      }
    } catch (error) {
      logger.error('[UNI Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processTonFarmingIncome(): Promise<void> {
    try {
      logger.info('[TON Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤
      const { data: activeFarmers, error } = await supabase
        .from('farming_sessions')
        .select('*, users(*)')
        .eq('farming_type', 'TON_FARMING')
        .eq('is_active', true);

      if (error) {
        logger.error('[TON Farming] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', error.message);
        return;
      }

      logger.info(`[TON Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);

      for (const session of activeFarmers || []) {
        try {
          const income = await this.calculateTonFarmingIncome(session);
          
          if (parseFloat(income) > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ BalanceManager
            const balanceManager = await import('../../core/BalanceManager').then(m => m.default);
            const addBalanceResult = await balanceManager.addBalance(
              session.user_id,
              0,
              parseFloat(income),
              'TON farming income'
            );

            if (addBalanceResult.success) {
              logger.info(`[FARMING_SCHEDULER] Successfully processed TON farming for user ${session.user_id}`, {
                userId: session.user_id,
                amount: income,
                currency: 'TON'
              });
            } else {
              logger.error(`[TON Farming] Error updating balance for user ${session.user_id}:`, addBalanceResult.error);
            }
          }
        } catch (error) {
          logger.error(`[TON Farming] Error processing session ${session.id}:`, error instanceof Error ? error.message : String(error));
        }
      }
    } catch (error) {
      logger.error('[TON Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  private async calculateUniFarmingIncome(farmer: any): Promise<string> {
    const now = new Date();
    const lastUpdate = farmer.uni_farming_last_update ? new Date(farmer.uni_farming_last_update) : new Date(farmer.uni_farming_start_timestamp);
    const hoursSinceLastUpdate = (now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60);
    
    // rate - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01 –¥–ª—è 1% –≤ –¥–µ–Ω—å)
    const rate = parseFloat(farmer.uni_farming_rate || '0');
    const depositAmount = parseFloat(farmer.uni_deposit_amount || '0');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥: –¥–µ–ø–æ–∑–∏—Ç * —Å—Ç–∞–≤–∫–∞ * –≤—Ä–µ–º—è_–≤_–¥–Ω—è—Ö
    const daysElapsed = hoursSinceLastUpdate / 24;
    const income = depositAmount * rate * daysElapsed;
    
    logger.info(`[calculateUniFarmingIncome] –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}:`, {
      depositAmount,
      rate,
      hoursSinceLastUpdate,
      daysElapsed,
      income,
      lastUpdate: lastUpdate.toISOString(),
      now: now.toISOString()
    });
    
    return income.toFixed(6);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  private async calculateTonFarmingIncome(session: any): Promise<string> {
    const now = new Date();
    const lastClaim = session.last_claim ? new Date(session.last_claim) : new Date(session.started_at);
    const hoursSinceLastClaim = (now.getTime() - lastClaim.getTime()) / (1000 * 60 * 60);
    
    const rate = parseFloat(session.rate || '0');
    const multiplier = parseFloat(session.boost_multiplier || '1');
    const income = rate * hoursSinceLastClaim * multiplier;
    
    return income.toFixed(6);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop(): void {
    if (this.isRunning) {
      this.isRunning = false;
      logger.info('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): { active: boolean; nextRun: Date | null } {
    if (!this.isRunning) {
      return { active: false, nextRun: null };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    const nextRun = new Date();
    nextRun.setMinutes(Math.ceil(nextRun.getMinutes() / 5) * 5);
    nextRun.setSeconds(0);
    nextRun.setMilliseconds(0);

    return {
      active: this.isRunning,
      nextRun: nextRun
    };
  }
}

// Export singleton instance
export const farmingScheduler = new FarmingScheduler();