/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –¥–ª—è Supabase API
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
 */

import cron from 'node-cron';
import { supabase } from '../supabase';
import { logger } from '../logger';
import { BalanceNotificationService } from '../balanceNotificationService';
import { batchBalanceProcessor } from '../BatchBalanceProcessor';
import { BalanceManager } from '../BalanceManager';
import { UnifiedFarmingCalculator } from '../farming/UnifiedFarmingCalculator';

export class FarmingScheduler {
  private isRunning: boolean = false;
  private balanceManager: BalanceManager;
  private batchProcessor: typeof batchBalanceProcessor;
  private isProcessing: boolean = false;  // Distributed lock flag
  private lastProcessTime: Date | null = null;

  constructor() {
    this.balanceManager = new BalanceManager();
    this.batchProcessor = batchBalanceProcessor;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
   */
  start(): void {
    if (this.isRunning) {
      logger.warn('FarmingScheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞');
    
    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–µ—Ä–∞–º
    cron.schedule('*/5 * * * *', async () => {
      logger.info('‚è∞ [CRON] –ó–∞–ø—É—Å–∫ scheduler –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤');
      try {
        await this.processUniFarmingIncome();
        await this.processTonFarmingIncome();
        logger.info('‚úÖ [CRON] Scheduler –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        logger.error('‚ùå [CRON] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è scheduler –∑–∞–¥–∞—á–∏:', error);
      }
    });

    this.isRunning = true;
    logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processUniFarmingIncome(): Promise<void> {
    // Distributed lock: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (this.isProcessing) {
      logger.warn('[UNI Farming] SKIP: Already processing. Preventing duplicate run.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤)
    if (this.lastProcessTime) {
      const minutesSinceLastProcess = (Date.now() - this.lastProcessTime.getTime()) / (1000 * 60);
      if (minutesSinceLastProcess < 4.5) { // –ú–∏–Ω–∏–º—É–º 4.5 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        logger.warn('[UNI Farming] SKIP: Too soon since last process', {
          minutesSinceLastProcess,
          lastProcessTime: this.lastProcessTime.toISOString()
        });
        return;
      }
    }
    
    this.isProcessing = true;
    this.lastProcessTime = new Date();
    
    try {
      logger.info('[UNI Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      const UniFarmingRepository = await import('../../modules/farming/UniFarmingRepository').then(m => m.UniFarmingRepository);
      const uniFarmingRepo = new UniFarmingRepository();
      
      const activeFarmers = await uniFarmingRepo.getActiveFarmers();
      
      if (!activeFarmers) {
        logger.error('[UNI Farming] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤');
        return;
      }

      logger.info(`[UNI Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ (—Å uni_farming_active=true)`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (activeFarmers && activeFarmers.length > 0) {
        logger.info('[UNI Farming] –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', {
          farmers: activeFarmers.map(f => ({
            id: f.id,
            telegram_id: f.telegram_id,
            uni_farming_active: f.uni_farming_active,
            deposit_amount: f.uni_deposit_amount,
            rate: f.uni_farming_rate
          }))
        });
      }

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Ö–æ–¥—ã –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const farmerIncomes: Array<{ userId: number; income: number; currency: 'UNI' }> = [];
      
      for (const farmer of activeFarmers || []) {
        try {
          // –í–†–ï–ú–ï–ù–ù–ê–Ø –ú–ï–†–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
          if (!farmer.deposit_amount || farmer.deposit_amount === '0') {
            logger.warn(`[UNI Farming] SKIP: User ${farmer.user_id} has no deposit`);
            continue;
          }
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedFarmingCalculator –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞
          const incomeData = await UnifiedFarmingCalculator.calculateIncome(farmer);
          
          if (incomeData && incomeData.amount > 0) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞
            if (!UnifiedFarmingCalculator.validateCalculation(incomeData)) {
              logger.error(`[UNI Farming] Calculation validation failed for user ${farmer.user_id}`);
              continue;
            }
            
            farmerIncomes.push({
              userId: incomeData.userId,
              income: incomeData.amount,
              currency: 'UNI'
            });
          }
        } catch (error) {
          logger.error(`[UNI Farming] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.user_id}:`, error);
        }
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
      if (farmerIncomes.length > 0) {
        logger.info(`[UNI Farming] –ù–∞—á–∏–Ω–∞–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${farmerIncomes.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        // TEMPORARY: Skip batch update to test transaction creation
        logger.info('[UNI Farming] TEMPORARY: Skipping batch update to test transaction creation');
        /*
        try {
          // Add timeout to batch processing
          const batchPromise = batchBalanceProcessor.processFarmingIncome(farmerIncomes);
          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Batch processing timeout')), 30000)
          );
          
          const batchResult = await Promise.race([batchPromise, timeoutPromise]) as any;
          
          logger.info('[UNI Farming] Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
            processed: batchResult.processed,
            failed: batchResult.failed,
            duration: batchResult.duration
          });
        } catch (error) {
          logger.error('[UNI Farming] –û—à–∏–±–∫–∞ batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', {
            error: error instanceof Error ? error.message : String(error)
          });
          // Continue with transaction creation even if batch update fails
        }
        */
        
        // Batch update balances for all farmers at once
        const batchResult = await this.batchProcessor.processFarmingIncome(farmerIncomes);
        
        logger.info('[UNI Farming] Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
          processed: batchResult.processed,
          failed: batchResult.failed,
          duration: batchResult.duration
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤
        if (batchResult.success && farmerIncomes.length > 0) {
          const userIds = farmerIncomes.map(f => f.userId);
          const { error: updateError } = await supabase
            .from('users')
            .update({ uni_farming_last_update: new Date().toISOString() })
            .in('id', userIds);
            
          if (updateError) {
            logger.error('[FarmingScheduler] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫', { error: updateError });
          }
        }
        
      } else {
        logger.info('[UNI Farming] No farmers with income to process');
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞—Ä–º–µ—Ä–∞
      logger.info(`[UNI Farming] Starting transaction creation for ${activeFarmers?.length || 0} farmers`);
      
      for (const farmer of activeFarmers || []) {
        try {
          const incomeData = farmerIncomes.find(f => f.userId === farmer.user_id);
          if (!incomeData) {
            logger.info(`[UNI Farming] No income data for user ${farmer.user_id}, skipping`);
            continue;
          }
          
          const income = incomeData.income.toString();
          const updateError = null; // Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

            if (!updateError) {
              logger.info(`[UNI Farming] Creating FARMING_REWARD transaction for user ${farmer.user_id}, amount: ${income}`);
              
              // TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É farming_sessions –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π
              // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º—ã –ë–î
              /*
              await supabase
                .from('farming_sessions')
                .insert({
                  user_id: farmer.user_id,
                  session_type: 'UNI_FARMING',
                  amount_earned: parseFloat(income),
                  currency: 'UNI',
                  farming_rate: parseFloat(farmer.farming_rate || '0'),
                  session_start: farmer.farming_start || farmer.created_at,
                  session_end: new Date().toISOString(),
                  status: 'completed',
                  created_at: new Date().toISOString()
                });
              */

              // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é FARMING_REWARD
              const { data: txData, error: txError } = await supabase
                .from('transactions')
                .insert({
                  user_id: farmer.user_id,
                  type: 'FARMING_REWARD',
                  amount: income, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –ø–æ–ª–µ amount
                  amount_uni: income,
                  amount_ton: '0',
                  currency: 'UNI', // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
                  status: 'completed',
                  description: `UNI farming income: ${parseFloat(income).toFixed(6)} UNI (rate: ${farmer.farming_rate})`,
                  source_user_id: farmer.user_id,
                  created_at: new Date().toISOString()
                })
                .select();
                
              if (txError) {
                logger.error(`[FARMING_SCHEDULER] Failed to create FARMING_REWARD transaction for user ${farmer.user_id}:`, {
                  error: txError.message,
                  code: txError.code,
                  details: txError.details
                });
                continue;
              }

              logger.info(`[FARMING_SCHEDULER] Successfully processed UNI farming for user ${farmer.user_id}`, {
                userId: farmer.user_id,
                amount: income,
                currency: 'UNI'
              });

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BalanceManager (—É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ addBalance)

              // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞
              try {
                const { ReferralService } = await import('../../modules/referral/service');
                const referralService = new ReferralService();
                const referralResult = await referralService.distributeReferralRewards(
                  farmer.user_id.toString(),
                  income,
                  'UNI',
                  'farming'
                );

                if (referralResult.distributed > 0) {
                  logger.info(`[FARMING_SCHEDULER] –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞`, {
                    farmerId: farmer.user_id,
                    income,
                    distributed: referralResult.distributed,
                    totalAmount: referralResult.totalAmount
                  });
                }
              } catch (referralError) {
                logger.error(`[FARMING_SCHEDULER] –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ UNI`, {
                  farmerId: farmer.user_id,
                  income,
                  error: referralError instanceof Error ? referralError.message : String(referralError)
                });
              }
            }
        } catch (error) {
          logger.error(`[UNI Farming] Error processing farmer ${farmer.user_id}:`, error instanceof Error ? error.message : String(error));
        } finally {
          // Continue processing other farmers
        }
      }
    } catch (error) {
      logger.error('[UNI Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
    } finally {
      // –°–Ω–∏–º–∞–µ–º distributed lock
      this.isProcessing = false;
      logger.info('[UNI Farming] Processing lock released');
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processTonFarmingIncome(): Promise<void> {
    try {
      logger.info('[TON Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤
      const { data: activeFarmers, error } = await supabase
        .from('farming_sessions')
        .select('*, users(*)')
        .eq('farming_type', 'TON_FARMING')
        .eq('is_active', true);

      if (error) {
        logger.error('[TON Farming] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:', error.message);
        return;
      }

      logger.info(`[TON Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Ö–æ–¥—ã –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const farmerIncomes: Array<{ userId: number; income: number; currency: 'TON' }> = [];
      
      for (const session of activeFarmers || []) {
        try {
          const income = await this.calculateTonFarmingIncome(session);
          
          if (parseFloat(income) > 0) {
            farmerIncomes.push({
              userId: session.user_id,
              income: parseFloat(income),
              currency: 'TON'
            });
          }
        } catch (error) {
          logger.error(`[TON Farming] Error processing session ${session.id}:`, error instanceof Error ? error.message : String(error));
        }
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
      if (farmerIncomes.length > 0) {
        logger.info(`[TON Farming] –ù–∞—á–∏–Ω–∞–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è ${farmerIncomes.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        const batchResult = await batchBalanceProcessor.processFarmingIncome(farmerIncomes);
        
        logger.info('[TON Farming] Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
          processed: batchResult.processed,
          failed: batchResult.failed,
          duration: batchResult.duration
        });
      }
    } catch (error) {
      logger.error('[TON Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error instanceof Error ? error.message : String(error));
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  private async calculateUniFarmingIncome(farmer: any): Promise<string> {
    const now = new Date();
    const lastUpdate = farmer.farming_last_update ? new Date(farmer.farming_last_update) : new Date(farmer.farming_start || farmer.created_at);
    const hoursSinceLastUpdate = (now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60);
    
    // rate - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01 –¥–ª—è 1% –≤ –¥–µ–Ω—å)
    const rate = parseFloat(farmer.farming_rate || '0');
    const depositAmount = parseFloat(farmer.deposit_amount || '0');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥: –¥–µ–ø–æ–∑–∏—Ç * —Å—Ç–∞–≤–∫–∞ * –≤—Ä–µ–º—è_–≤_–¥–Ω—è—Ö
    const daysElapsed = hoursSinceLastUpdate / 24;
    const income = depositAmount * rate * daysElapsed;
    
    logger.info(`[calculateUniFarmingIncome] –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.user_id}:`, {
      depositAmount,
      rate,
      hoursSinceLastUpdate,
      daysElapsed,
      income,
      lastUpdate: lastUpdate.toISOString(),
      now: now.toISOString()
    });
    
    return income.toFixed(6);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  private async calculateTonFarmingIncome(session: any): Promise<string> {
    const now = new Date();
    const lastClaim = session.last_claim ? new Date(session.last_claim) : new Date(session.started_at);
    const hoursSinceLastClaim = (now.getTime() - lastClaim.getTime()) / (1000 * 60 * 60);
    
    const rate = parseFloat(session.rate || '0');
    const multiplier = parseFloat(session.boost_multiplier || '1');
    const income = rate * hoursSinceLastClaim * multiplier;
    
    return income.toFixed(6);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop(): void {
    if (this.isRunning) {
      this.isRunning = false;
      logger.info('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): { active: boolean; nextRun: Date | null } {
    if (!this.isRunning) {
      return { active: false, nextRun: null };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    const nextRun = new Date();
    nextRun.setMinutes(Math.ceil(nextRun.getMinutes() / 5) * 5);
    nextRun.setSeconds(0);
    nextRun.setMilliseconds(0);

    return {
      active: this.isRunning,
      nextRun: nextRun
    };
  }
}

// Export singleton instance
export const farmingScheduler = new FarmingScheduler();