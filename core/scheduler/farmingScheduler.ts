/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
 */

import cron from 'node-cron';
import { db } from '../db';
import { users } from '../../shared/schema';
import { eq, and, isNotNull } from 'drizzle-orm';
import { WalletService } from '../../modules/wallet/service';
import { logger } from '../logger';

export class FarmingScheduler {
  private walletService: WalletService;
  private isRunning: boolean = false;

  constructor() {
    this.walletService = new WalletService();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
   */
  start(): void {
    if (this.isRunning) {
      logger.warn('FarmingScheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞');
    
    // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–µ—Ä–∞–º
    cron.schedule('*/5 * * * *', async () => {
      await this.processUniFarmingIncome();
      await this.processTonFarmingIncome();
    });

    this.isRunning = true;
    logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processUniFarmingIncome(): Promise<void> {
    try {
      logger.info('[UNI Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤
      const activeFarmers = await db
        .select()
        .from(users)
        .where(and(
          isNotNull(users.uni_farming_start_timestamp),
          isNotNull(users.uni_farming_rate)
        ));

      logger.info(`[UNI Farming] –ù–∞–π–¥–µ–Ω–æ ${activeFarmers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤`);

      const processedCount = { success: 0, failed: 0 };

      for (const farmer of activeFarmers) {
        try {
          const income = await this.calculateUniFarmingIncome(farmer);
          
          if (parseFloat(income) > 0) {
            const success = await this.walletService.addUniFarmIncome(
              farmer.id.toString(), 
              income
            );
            
            if (success) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
              await db
                .update(users)
                .set({ uni_farming_last_update: new Date() })
                .where(eq(users.id, farmer.id));
              
              processedCount.success++;
              logger.debug(`[UNI Farming] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${farmer.id}: –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${income} UNI`);
            } else {
              processedCount.failed++;
              logger.warn(`[UNI Farming] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}`);
            }
          }
        } catch (error) {
          processedCount.failed++;
          logger.error(`[UNI Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}:`, error);
        }
      }

      logger.info(`[UNI Farming] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${processedCount.success} —É—Å–ø–µ—à–Ω–æ, ${processedCount.failed} –æ—à–∏–±–æ–∫`);
    } catch (error) {
      logger.error('[UNI Farming] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞
   */
  private async processTonFarmingIncome(): Promise<void> {
    try {
      logger.info('[TON Farming] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ boost –¥–µ–ø–æ–∑–∏—Ç—ã
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º UNI –ø–æ–ª—è –∫–∞–∫ –±–∞–∑—É –¥–ª—è TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const activeBoostUsers = await db
        .select()
        .from(users)
        .where(and(
          isNotNull(users.uni_farming_start_timestamp),
          isNotNull(users.uni_farming_rate)
        ));

      logger.info(`[TON Farming] –ù–∞–π–¥–µ–Ω–æ ${activeBoostUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤`);

      const processedCount = { success: 0, failed: 0 };

      for (const farmer of activeBoostUsers) {
        try {
          const income = await this.calculateTonFarmingIncome(farmer);
          
          if (parseFloat(income) > 0) {
            const success = await this.walletService.addTonFarmIncome(
              farmer.id.toString(), 
              income
            );
            
            if (success) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
              await db
                .update(users)
                .set({ uni_farming_last_update: new Date() })
                .where(eq(users.id, farmer.id));
              
              processedCount.success++;
              logger.debug(`[TON Farming] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${farmer.id}: –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${income} TON`);
            } else {
              processedCount.failed++;
              logger.warn(`[TON Farming] ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}`);
            }
          }
        } catch (error) {
          processedCount.failed++;
          logger.error(`[TON Farming] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}:`, error);
        }
      }

      logger.info(`[TON Farming] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${processedCount.success} —É—Å–ø–µ—à–Ω–æ, ${processedCount.failed} –æ—à–∏–±–æ–∫`);
    } catch (error) {
      logger.error('[TON Farming] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
   */
  private async calculateUniFarmingIncome(farmer: any): Promise<string> {
    try {
      const now = new Date();
      const lastUpdate = farmer.uni_farming_last_update 
        ? new Date(farmer.uni_farming_last_update)
        : new Date(farmer.uni_farming_start_timestamp);
      
      const secondsElapsed = (now.getTime() - lastUpdate.getTime()) / 1000;
      
      // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ 0.001 UNI –≤ —á–∞—Å = 0.000000277778 UNI –≤ —Å–µ–∫—É–Ω–¥—É
      const baseRatePerSecond = 0.001 / 3600;
      const ratePerSecond = parseFloat(farmer.uni_farming_rate || "0") || baseRatePerSecond;
      
      const income = secondsElapsed * ratePerSecond;
      
      return income.toFixed(8);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ UNI –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}:`, error);
      return "0";
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ TON —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
   */
  private async calculateTonFarmingIncome(farmer: any): Promise<string> {
    try {
      const now = new Date();
      const lastUpdate = farmer.uni_farming_last_update 
        ? new Date(farmer.uni_farming_last_update)
        : new Date(farmer.uni_farming_start_timestamp);
      
      const secondsElapsed = (now.getTime() - lastUpdate.getTime()) / 1000;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É TON = 0.0001 TON –≤ —á–∞—Å
      const tonRatePerSecond = 0.0001 / 3600;
      const ratePerSecond = tonRatePerSecond;
      
      if (ratePerSecond <= 0) {
        return "0";
      }
      
      const income = secondsElapsed * ratePerSecond;
      
      return income.toFixed(8);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ TON –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farmer.id}:`, error);
      return "0";
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop(): void {
    if (!this.isRunning) {
      logger.warn('FarmingScheduler —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    // Gracefully stop cron jobs
    this.isRunning = false;
    logger.info('üî¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): { running: boolean; info: string } {
    return {
      running: this.isRunning,
      info: this.isRunning 
        ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)'
        : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ'
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async runManually(): Promise<void> {
    logger.info('üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–æ—Ö–æ–¥–∞');
    await this.processUniFarmingIncome();
    await this.processTonFarmingIncome();
    logger.info('‚úÖ –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
export const farmingScheduler = new FarmingScheduler();