/**
 * Environment Variables Validator for UniFarm
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

interface EnvConfig {
  required: string[];
  optional: string[];
  defaults: Record<string, string>;
  validation: Record<string, (value: string) => boolean>;
}

const envConfig: EnvConfig = {
  required: [
    'DATABASE_URL',
    'NODE_ENV',
    'PORT'
  ],
  optional: [
    'TELEGRAM_BOT_TOKEN',
    'SESSION_SECRET',
    'JWT_SECRET',
    'NEON_API_KEY',
    'NEON_PROJECT_ID',
    'ALLOW_BROWSER_ACCESS',
    'SKIP_TELEGRAM_CHECK',
    'DATABASE_PROVIDER',
    'USE_NEON_DB'
  ],
  defaults: {
    NODE_ENV: 'production',
    PORT: '3000',
    ALLOW_BROWSER_ACCESS: 'true',
    SKIP_TELEGRAM_CHECK: 'false',
    DATABASE_PROVIDER: 'neon',
    USE_NEON_DB: 'true'
  },
  validation: {
    PORT: (value: string) => !isNaN(parseInt(value)) && parseInt(value) > 0 && parseInt(value) < 65536,
    NODE_ENV: (value: string) => ['development', 'production', 'test'].includes(value),
    DATABASE_URL: (value: string) => value.startsWith('postgresql://') || value.startsWith('postgres://'),
    ALLOW_BROWSER_ACCESS: (value: string) => ['true', 'false'].includes(value.toLowerCase()),
    SKIP_TELEGRAM_CHECK: (value: string) => ['true', 'false'].includes(value.toLowerCase()),
    USE_NEON_DB: (value: string) => ['true', 'false'].includes(value.toLowerCase())
  }
};

class EnvValidator {
  private errors: string[] = [];
  private warnings: string[] = [];

  validate(): { success: boolean; errors: string[]; warnings: string[] } {
    this.errors = [];
    this.warnings = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    this.validateRequired();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.applyDefaults();
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
    this.validateFormats();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    this.validateCriticalConfigs();

    return {
      success: this.errors.length === 0,
      errors: this.errors,
      warnings: this.warnings
    };
  }

  private validateRequired(): void {
    for (const envVar of envConfig.required) {
      if (!process.env[envVar]) {
        this.errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envVar}`);
      }
    }
  }

  private applyDefaults(): void {
    for (const [key, defaultValue] of Object.entries(envConfig.defaults)) {
      if (!process.env[key]) {
        process.env[key] = defaultValue;
        this.warnings.push(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è ${key}: ${defaultValue}`);
      }
    }
  }

  private validateFormats(): void {
    for (const [envVar, validator] of Object.entries(envConfig.validation)) {
      const value = process.env[envVar];
      if (value && !validator(value)) {
        this.errors.push(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${envVar}: ${value}`);
      }
    }
  }

  private validateCriticalConfigs(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (process.env.DATABASE_PROVIDER === 'neon' && !process.env.DATABASE_URL?.includes('neon')) {
      this.warnings.push('DATABASE_PROVIDER —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ neon, –Ω–æ DATABASE_URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç neon –¥–æ–º–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (process.env.SKIP_TELEGRAM_CHECK === 'false' && !process.env.TELEGRAM_BOT_TOKEN) {
      this.warnings.push('SKIP_TELEGRAM_CHECK=false, –Ω–æ TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (process.env.NODE_ENV === 'production') {
      const productionRequired = ['SESSION_SECRET', 'JWT_SECRET'];
      for (const envVar of productionRequired) {
        if (!process.env[envVar]) {
          this.warnings.push(`–í production —Ä–µ–∂–∏–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${envVar}`);
        }
      }
    }
  }

  static validateAndReport(): void {
    const validator = new EnvValidator();
    const result = validator.validate();

    if (result.warnings.length > 0) {
      console.warn('üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
      result.warnings.forEach(warning => console.warn(`  - ${warning}`));
    }

    if (result.errors.length > 0) {
      console.error('üî¥ –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
      result.errors.forEach(error => console.error(`  - ${error}`));
      console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Replit Secrets');
      process.exit(1);
    }

    if (result.warnings.length === 0 && result.errors.length === 0) {
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
    }
  }
}

export { EnvValidator };