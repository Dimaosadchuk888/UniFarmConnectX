/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö UniFarm
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { supabase } from './supabaseClient';
import { logger } from './logger';
import type { TransactionsTransactionType, TransactionsTransactionStatus, ExtendedTransactionType } from '../modules/transactions/types';

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const TRANSACTION_TYPE_MAPPING: Record<ExtendedTransactionType, TransactionsTransactionType> = {
  'FARMING_REWARD': 'FARMING_REWARD',
  'FARMING_DEPOSIT': 'FARMING_DEPOSIT',   // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  'REFERRAL_REWARD': 'REFERRAL_REWARD', 
  'MISSION_REWARD': 'MISSION_REWARD',
  'DAILY_BONUS': 'DAILY_BONUS',
  'WITHDRAWAL': 'WITHDRAWAL',              // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
  'DEPOSIT': 'DEPOSIT',                    // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  'BOOST_PAYMENT': 'BOOST_PAYMENT',        // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
  'TON_DEPOSIT': 'TON_DEPOSIT',            // üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –º–∞–ø–∏—Ç—å –≤ FARMING_REWARD! –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –¥–≤–æ–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ!
  'TON_BOOST_PURCHASE': 'TON_BOOST_PURCHASE', // TON Boost –ø–æ–∫—É–ø–∫–∏ ‚Üí TON_BOOST_PURCHASE
  // –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞ –±–∞–∑–æ–≤—ã–µ
  'TON_BOOST_INCOME': 'FARMING_REWARD',   // TON Boost –¥–æ—Ö–æ–¥—ã ‚Üí FARMING_REWARD
  'UNI_DEPOSIT': 'DEPOSIT',               // UNI –¥–µ–ø–æ–∑–∏—Ç—ã ‚Üí DEPOSIT (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ FARMING_REWARD)
  'UNI_WITHDRAWAL': 'WITHDRAWAL',         // –í—ã–≤–æ–¥—ã UNI ‚Üí WITHDRAWAL
  'TON_WITHDRAWAL': 'WITHDRAWAL',         // –í—ã–≤–æ–¥—ã TON ‚Üí WITHDRAWAL
  'BOOST_PURCHASE': 'BOOST_PAYMENT',      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±—ã–ª–æ FARMING_REWARD ‚Üí —Ç–µ–ø–µ—Ä—å BOOST_PAYMENT
  'AIRDROP_REWARD': 'DAILY_BONUS',        // Airdrop –Ω–∞–≥—Ä–∞–¥—ã ‚Üí DAILY_BONUS
  // –ú–∞–ø–ø–∏–Ω–≥ lowercase –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  'withdrawal': 'WITHDRAWAL',              // Lowercase –≤—ã–≤–æ–¥ ‚Üí WITHDRAWAL
  'withdrawal_fee': 'WITHDRAWAL'           // Lowercase –∫–æ–º–∏—Å—Å–∏—è ‚Üí WITHDRAWAL (–∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –≤—ã–≤–æ–¥—ã)
};

export interface TransactionData {
  user_id: number;
  type: ExtendedTransactionType;  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  amount_uni?: number;
  amount_ton?: number;
  currency?: 'UNI' | 'TON';
  status?: TransactionsTransactionStatus;
  description?: string;
  metadata?: Record<string, any>;
  source_user_id?: number;
}

export interface TransactionResponse {
  id: number;
  type: TransactionsTransactionType;
  amount: number;
  currency: 'UNI' | 'TON';
  status: TransactionsTransactionStatus;
  description: string;
  createdAt: string;
  timestamp: number;
}

export class UnifiedTransactionService {
  private static instance: UnifiedTransactionService;

  public static getInstance(): UnifiedTransactionService {
    if (!UnifiedTransactionService.instance) {
      UnifiedTransactionService.instance = new UnifiedTransactionService();
    }
    return UnifiedTransactionService.instance;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
   */
  async createTransaction(data: TransactionData): Promise<{ success: boolean; transaction_id?: number; error?: string }> {
    try {
      const {
        user_id,
        type,
        amount_uni = 0,
        amount_ton = 0,
        currency,
        status = 'completed',
        description = '',
        metadata = {},
        source_user_id
      } = data;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!user_id || !type) {
        return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: user_id, type' };
      }

      if (amount_uni === 0 && amount_ton === 0) {
        return { success: false, error: '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' };
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      const dbTransactionType = TRANSACTION_TYPE_MAPPING[type];
      
      // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–∏–ø–µ
      const enhancedDescription = description || this.generateDescription(type, amount_uni, amount_ton);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const amount = amount_uni > 0 ? amount_uni : amount_ton;
      const transactionCurrency = amount_uni > 0 ? 'UNI' : 'TON';

      // üõ°Ô∏è –¢–û–ß–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø USER 25)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –∂–µ tx_hash_unique
      const txHashToCheck = metadata?.tx_hash || metadata?.ton_tx_hash;
      if (txHashToCheck) {
        logger.info('[UnifiedTransactionService] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è tx_hash:', txHashToCheck);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π BOC –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const baseBoc = this.extractBaseBoc(txHashToCheck);
        logger.info('[UnifiedTransactionService] –ë–∞–∑–æ–≤—ã–π BOC –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', baseBoc);
        
        // –¢–û–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –¢–û–ß–ù–û —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const { data: existingTransactions, error: checkError } = await supabase
          .from('transactions')
          .select('id, created_at, user_id, amount_ton, type, description, tx_hash_unique')
          .eq('tx_hash_unique', txHashToCheck)  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ LIKE
          .eq('user_id', user_id)  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          .order('created_at', { ascending: false });
          
        if (existingTransactions && existingTransactions.length > 0 && !checkError) {
          const existing = existingTransactions[0];
          
          // –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, —Å—É–º–º—É –∏ —Å—Ç–∞—Ç—É—Å
          const timeDifferenceMinutes = Math.round((Date.now() - new Date(existing.created_at).getTime()) / (1000 * 60));
          const isRecentDuplicate = timeDifferenceMinutes < 10; // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
          const isSameAmount = Math.abs(parseFloat(existing.amount_ton) - amount_ton) < 0.000001;
          const isSameUser = existing.user_id === user_id;
          const existingNotFailed = existing.status !== 'failed' && existing.status !== 'error';
          const isSameType = existing.type === TRANSACTION_TYPE_MAPPING[type];

          const shouldBlock = isRecentDuplicate && isSameAmount && isSameUser && existingNotFailed && isSameType;

          if (shouldBlock) {
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í
            logger.error('[CRITICAL] [DEPOSIT_BLOCKED_BY_DEDUPLICATION]', {
              user_id,
              ton_tx_hash: txHashToCheck,
              amount_ton,
              existing_transaction_id: existing.id,
              existing_created_at: existing.created_at,
              time_difference_minutes: timeDifferenceMinutes,
              blocked_reason: 'PREVENTED_DUPLICATE',
              existing_status: existing.status,
              existing_amount: existing.amount_ton,
              existing_type: existing.type,
              attempted_type: TRANSACTION_TYPE_MAPPING[type]
            });
            
            logger.warn('[UnifiedTransactionService] –£–ú–ù–û–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–û:', {
              existing_id: existing.id,
              existing_date: existing.created_at,
              existing_user: existing.user_id,
              existing_amount: existing.amount_ton,
              existing_type: existing.type,
              attempted_user: user_id,
              attempted_amount: amount_ton,
              attempted_type: type,
              tx_hash: txHashToCheck,
              time_difference_minutes: timeDifferenceMinutes,
              reason: 'SMART_DUPLICATE_PREVENTION'
            });
            
            return { 
              success: false, 
              error: `–î–µ–ø–æ–∑–∏—Ç —Å hash ${txHashToCheck.substring(0, 20)}... —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ${timeDifferenceMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`
            };
          } else {
            // –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã/—Ç–∏–ø—ã –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            logger.info('[UnifiedTransactionService] –ù–∞–π–¥–µ–Ω —Ç–æ—Ç –∂–µ hash, –Ω–æ –†–ê–ó–†–ï–®–ï–ù–û —Å–æ–∑–¥–∞–Ω–∏–µ:', {
              existing_amount: existing.amount_ton,
              new_amount: amount_ton,
              existing_type: existing.type,
              new_type: TRANSACTION_TYPE_MAPPING[type],
              existing_status: existing.status,
              time_difference_minutes: timeDifferenceMinutes,
              is_recent: isRecentDuplicate,
              same_amount: isSameAmount,
              same_type: isSameType,
              existing_not_failed: existingNotFailed,
              tx_hash: txHashToCheck,
              reason: !isRecentDuplicate ? 'OLD_TRANSACTION' : 
                      !isSameAmount ? 'DIFFERENT_AMOUNT' :
                      !isSameType ? 'DIFFERENT_TYPE' :
                      !existingNotFailed ? 'PREVIOUS_FAILED' : 'ALLOWED'
            });
          }
        }
        
        logger.info('[UnifiedTransactionService] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è:', txHashToCheck);
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data: transaction, error: txError } = await supabase
        .from('transactions')
        .insert({
          user_id,
          type: dbTransactionType,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
          amount: amount.toString(),  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ amount
          amount_uni: amount_uni.toString(),
          amount_ton: amount_ton.toString(),
          currency: currency || transactionCurrency,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          status,
          description: enhancedDescription,
          metadata: { ...metadata, original_type: metadata?.original_type || type },  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç metadata.original_type, fallback –Ω–∞ type
          source_user_id: source_user_id || user_id,
          tx_hash_unique: metadata?.tx_hash || metadata?.ton_tx_hash || null, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º —Ä–µ–º–∏–∫—Å–æ–º
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (txError) {
        logger.error('[UnifiedTransactionService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', { error: txError.message, data });
        return { success: false, error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message}` };
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–æ–≤
      if (this.shouldUpdateBalance(type)) {
        await this.updateUserBalance(user_id, amount_uni, amount_ton, dbTransactionType);
      }

      logger.info('[UnifiedTransactionService] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
        transaction_id: transaction.id,
        user_id,
        type,
        amount_uni,
        amount_ton
      });

      return { success: true, transaction_id: transaction.id };

    } catch (error) {
      logger.error('[UnifiedTransactionService] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–π BOC –∏–∑ —Ö–µ—à–∞, —É–¥–∞–ª—è—è —Å—É—Ñ—Ñ–∏–∫—Å—ã timestamp –∏ random
   * @param hash –ü–æ–ª–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å—ã)
   * @returns –ë–∞–∑–æ–≤—ã–π BOC –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
   */
  private extractBaseBoc(hash: string): string {
    // –ï—Å–ª–∏ —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç BOC-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å te6)
    if (hash.startsWith('te6')) {
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å—É—Ñ—Ñ–∏–∫—Å–∞: _timestamp_randomstring
      const suffixPattern = /_\d{13}_[a-z0-9]+$/;
      const baseBoc = hash.replace(suffixPattern, '');
      return baseBoc;
    }
    return hash;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   */
  async getUserTransactions(
    user_id: number, 
    page: number = 1, 
    limit: number = 20,
    filters?: { 
      type?: TransactionsTransactionType;
      currency?: 'UNI' | 'TON' | 'ALL';
      status?: TransactionsTransactionStatus;
    }
  ): Promise<{
    transactions: TransactionResponse[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
    hasMore: boolean;
  }> {
    try {
      logger.info('[UnifiedTransactionService] –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user_id:', {
        user_id,
        filters
      });
      
      let query = supabase
        .from('transactions')
        .select('*', { count: 'exact' })
        .eq('user_id', user_id)
        .order('created_at', { ascending: false });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters?.type) {
        query = query.eq('type', filters.type);
      }
      
      if (filters?.status) {
        query = query.eq('status', filters.status);
      }
      
      // –í–ê–ñ–ù–û: –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–ª—é—Ç–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      if (filters?.currency && filters.currency !== 'ALL') {
        query = query.eq('currency', filters.currency);
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const offset = (page - 1) * limit;
      query = query.range(offset, offset + limit - 1);

      const { data: transactions, error, count } = await query;

      if (error) {
        logger.error('[UnifiedTransactionService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        return {
          transactions: [],
          total: 0,
          page,
          limit,
          totalPages: 0,
          hasMore: false
        };
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const unifiedTransactions = transactions?.map(tx => this.formatTransactionResponse(tx)) || [];

      const total = count || 0;
      const totalPages = Math.ceil(total / limit);

      return {
        transactions: unifiedTransactions,
        total,
        page,
        limit,
        totalPages,
        hasMore: page < totalPages
      };

    } catch (error) {
      logger.error('[UnifiedTransactionService] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return {
        transactions: [],
        total: 0,
        page,
        limit,
        totalPages: 0,
        hasMore: false
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
   */
  private formatTransactionResponse(tx: any): TransactionResponse {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ amount, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const amount = tx.amount ? parseFloat(tx.amount) : 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏–∑ –ø–æ–ª—è currency –∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ amount_uni/amount_ton
    let currency = tx.currency || 'UNI';
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –ø–æ–ª—è amount
    if (!tx.amount || amount === 0) {
      const amount_uni = parseFloat(tx.amount_uni || '0');
      const amount_ton = parseFloat(tx.amount_ton || '0');
      currency = amount_uni > 0 ? 'UNI' : 'TON';
      const fallbackAmount = currency === 'UNI' ? amount_uni : amount_ton;
      
      return {
        id: tx.id,
        type: tx.type,
        amount: fallbackAmount,
        currency,
        status: tx.status,
        description: tx.description || '',
        createdAt: tx.created_at,
        timestamp: new Date(tx.created_at).getTime()
      };
    }

    return {
      id: tx.id,
      type: tx.type,
      amount,
      currency,
      status: tx.status,
      description: tx.description || '',
      createdAt: tx.created_at,
      timestamp: new Date(tx.created_at).getTime()
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private generateDescription(type: ExtendedTransactionType, amount_uni: number, amount_ton: number): string {
    const currency = amount_uni > 0 ? 'UNI' : 'TON';
    const amount = amount_uni > 0 ? amount_uni : amount_ton;
    
    switch (type) {
      case 'TON_BOOST_INCOME':
        return `TON Boost –¥–æ—Ö–æ–¥: ${amount} ${currency}`;
      case 'UNI_DEPOSIT':
        return `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ UNI: ${amount}`;
      case 'TON_DEPOSIT':
        return `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON: ${amount}`;
      case 'DEPOSIT':
        return `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${currency}: ${amount}`;
      case 'UNI_WITHDRAWAL':
        return `–í—ã–≤–æ–¥ UNI: ${amount}`;
      case 'TON_WITHDRAWAL':
        return `–í—ã–≤–æ–¥ TON: ${amount}`;
      case 'BOOST_PURCHASE':
        return `–ü–æ–∫—É–ø–∫–∞ Boost –ø–∞–∫–µ—Ç–∞: ${amount} ${currency}`;
      case 'AIRDROP_REWARD':
        return `Airdrop –Ω–∞–≥—Ä–∞–¥–∞: ${amount} ${currency}`;
      case 'BOOST_PAYMENT':
        return `–ü–ª–∞—Ç–µ–∂ –∑–∞ Boost –ø–∞–∫–µ—Ç: ${amount} ${currency}`;
      case 'WITHDRAWAL':
      case 'withdrawal':
        return `–í—ã–≤–æ–¥ ${amount} ${currency}`;
      case 'withdrawal_fee':
        return `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: ${amount} ${currency}`;
      case 'FARMING_REWARD':
        return currency === 'UNI' ? `UNI Farming –¥–æ—Ö–æ–¥: ${amount} UNI` : `TON Boost –¥–æ—Ö–æ–¥: ${amount} TON`;
      case 'REFERRAL_REWARD':
        return `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${amount} ${currency}`;
      case 'MISSION_REWARD':
        return `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é: ${amount} ${currency}`;
      case 'DAILY_BONUS':
        return `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: ${amount} ${currency}`;
      default:
        return `${type}: ${amount} ${currency}`;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private shouldUpdateBalance(type: ExtendedTransactionType): boolean {
    const incomeTypes: ExtendedTransactionType[] = [
      'FARMING_REWARD',
      'REFERRAL_REWARD', 
      'MISSION_REWARD',
      'DAILY_BONUS',
      'TON_BOOST_INCOME',
      'UNI_DEPOSIT',      // UNI –¥–µ–ø–æ–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç –±–∞–ª–∞–Ω—Å
      'TON_DEPOSIT',      // TON –¥–µ–ø–æ–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç –±–∞–ª–∞–Ω—Å  
      'AIRDROP_REWARD',
      'DEPOSIT'           // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç –±–∞–ª–∞–Ω—Å
      // BOOST_PAYMENT –∏ BOOST_PURCHASE –ù–ï –≤—Ö–æ–¥—è—Ç –≤ —Å–ø–∏—Å–æ–∫ - –ù–ï –æ–±–Ω–æ–≤–ª—è—é—Ç –±–∞–ª–∞–Ω—Å
    ];
    
    return incomeTypes.includes(type);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π BalanceManager
   * –£–°–¢–†–ê–ù–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï: –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –Ω–∞ BalanceManager
   */
  private async updateUserBalance(
    user_id: number, 
    amount_uni: number, 
    amount_ton: number, 
    type: TransactionsTransactionType
  ): Promise<void> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º BalanceManager –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      const { BalanceManager } = await import('./BalanceManager');
      const balanceManager = BalanceManager.getInstance();
      
      if (amount_uni > 0) {
        await balanceManager.addBalance(user_id, amount_uni, 0);
      }
      
      if (amount_ton > 0) {
        await balanceManager.addBalance(user_id, 0, amount_ton);
      }

      logger.info('[UnifiedTransactionService] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
        user_id,
        amount_uni,
        amount_ton,
        type
      });

    } catch (error) {
      logger.error('[UnifiedTransactionService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
        user_id,
        amount_uni,
        amount_ton,
        type,
        error
      });
      // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤
   */
  private isWithdrawalType(type: ExtendedTransactionType): boolean {
    const withdrawalTypes: ExtendedTransactionType[] = [
      'UNI_WITHDRAWAL',
      'TON_WITHDRAWAL',
      'BOOST_PURCHASE',
      'WITHDRAWAL',
      'withdrawal',
      'withdrawal_fee'
    ];
    
    return withdrawalTypes.includes(type);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const transactionService = UnifiedTransactionService.getInstance();