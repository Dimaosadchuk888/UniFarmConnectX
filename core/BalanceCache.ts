/**
 * –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç in-memory –∫–µ—à —Å TTL –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
 */

import { logger } from './logger';

interface CachedBalance {
  userId: number;
  uniBalance: number;
  tonBalance: number;
  lastUpdated: Date;
  expiresAt: Date;
}

interface CacheStats {
  hits: number;
  misses: number;
  evictions: number;
  size: number;
}

export class BalanceCache {
  private static instance: BalanceCache;
  private cache: Map<number, CachedBalance> = new Map();
  private stats: CacheStats = {
    hits: 0,
    misses: 0,
    evictions: 0,
    size: 0
  };
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∞
  private readonly TTL_SECONDS = 300; // 5 –º–∏–Ω—É—Ç
  private readonly MAX_CACHE_SIZE = 10000; // –ú–∞–∫—Å–∏–º—É–º 10k –∑–∞–ø–∏—Å–µ–π
  private readonly CLEANUP_INTERVAL = 60000; // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  private cleanupTimer: NodeJS.Timeout | null = null;

  private constructor() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    this.startCleanupTimer();
  }

  public static getInstance(): BalanceCache {
    if (!BalanceCache.instance) {
      BalanceCache.instance = new BalanceCache();
    }
    return BalanceCache.instance;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –∫–µ—à–∞
   */
  get(userId: number): { uniBalance: number; tonBalance: number } | null {
    const cached = this.cache.get(userId);
    
    if (!cached) {
      this.stats.misses++;
      console.log(`[BalanceCache] ‚ùå –ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user ${userId}`);
      logger.debug('[BalanceCache] Cache miss', { userId });
      return null;
    }

    const now = new Date();
    const isExpired = cached.expiresAt < now;
    const age = Math.round((now.getTime() - cached.lastUpdated.getTime()) / 1000);

    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –£—Å–∏–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è User 25 (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏)
    const isUser25 = userId === 25;
    const logLevel = isUser25 ? '[CRITICAL_USER_25]' : '[BalanceCache]';
    
    console.log(`${logLevel} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –¥–ª—è user ${userId}:`, {
      exists: true,
      age: `${age}—Å`,
      ttl: `${this.TTL_SECONDS}—Å`,
      isExpired,
      uniBalance: cached.uniBalance,
      tonBalance: cached.tonBalance,
      expiresAt: cached.expiresAt.toISOString(),
      lastUpdated: cached.lastUpdated.toISOString()
    });

    if (isExpired) {
      this.cache.delete(userId);
      this.stats.evictions++;
      this.stats.misses++;
      console.log(`${logLevel} üö® Backend –∫–µ—à –∏—Å—Ç–µ–∫ –¥–ª—è user ${userId}, —É–¥–∞–ª—è–µ–º`);
      
      if (isUser25) {
        logger.error('[CRITICAL_USER_25] Backend –∫–µ—à –∏—Å—Ç–µ–∫ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏—Å—á–µ–∑–∞—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤', {
          userId,
          age: `${age}—Å`,
          tonBalance: cached.tonBalance,
          lastUpdated: cached.lastUpdated.toISOString()
        });
      }
      
      logger.debug('[BalanceCache] Cache expired', { userId });
      return null;
    }

    this.stats.hits++;
    console.log(`${logLevel} ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º BACKEND –∫–µ—à –¥–ª—è user ${userId}`);
    
    if (isUser25) {
      logger.info('[CRITICAL_USER_25] Backend –∫–µ—à –≤–æ–∑–≤—Ä–∞—â–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
        userId,
        uniBalance: cached.uniBalance,
        tonBalance: cached.tonBalance,
        age: `${age}—Å`
      });
    }
    
    logger.debug('[BalanceCache] Cache hit', { 
      userId, 
      uniBalance: cached.uniBalance,
      tonBalance: cached.tonBalance 
    });
    
    return {
      uniBalance: cached.uniBalance,
      tonBalance: cached.tonBalance
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –∫–µ—à (—Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –¥–ª—è User 25)
   */
  set(userId: number, uniBalance: number, tonBalance: number): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    if (this.cache.size >= this.MAX_CACHE_SIZE) {
      this.evictOldest();
    }

    const now = new Date();
    const expiresAt = new Date(now.getTime() + this.TTL_SECONDS * 1000);

    // –£–°–ò–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø USER 25
    const isUser25 = userId === 25;
    const logLevel = isUser25 ? '[CRITICAL_USER_25]' : '[BalanceCache]';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const oldEntry = this.cache.get(userId);

    this.cache.set(userId, {
      userId,
      uniBalance,
      tonBalance,
      lastUpdated: now,
      expiresAt
    });

    this.stats.size = this.cache.size;

    console.log(`${logLevel} üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ backend –∫–µ—à user ${userId}:`, {
      oldUniBalance: oldEntry?.uniBalance || '–Ω/–¥',
      oldTonBalance: oldEntry?.tonBalance || '–Ω/–¥',
      newUniBalance: uniBalance,
      newTonBalance: tonBalance,
      changeUni: oldEntry ? (uniBalance - oldEntry.uniBalance).toFixed(6) : 'new',
      changeTon: oldEntry ? (tonBalance - oldEntry.tonBalance).toFixed(6) : 'new',
      expiresAt: expiresAt.toISOString(),
      ttl: `${this.TTL_SECONDS}s`
    });

    if (isUser25) {
      logger.error('[CRITICAL_USER_25] Backend –∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω', {
        userId,
        oldTonBalance: oldEntry?.tonBalance || 0,
        newTonBalance: tonBalance,
        tonBalanceChange: oldEntry ? (tonBalance - oldEntry.tonBalance) : tonBalance,
        timestamp: now.toISOString()
      });
    }
    
    logger.debug('[BalanceCache] Balance cached', {
      userId,
      uniBalance,
      tonBalance,
      ttl: this.TTL_SECONDS
    });
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ UNI –±–∞–ª–∞–Ω—Å
   */
  updateUni(userId: number, uniBalance: number): void {
    const cached = this.cache.get(userId);
    if (cached) {
      cached.uniBalance = uniBalance;
      cached.lastUpdated = new Date();
      cached.expiresAt = new Date(Date.now() + this.TTL_SECONDS * 1000);
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ TON –±–∞–ª–∞–Ω—Å
   */
  updateTon(userId: number, tonBalance: number): void {
    const cached = this.cache.get(userId);
    if (cached) {
      cached.tonBalance = tonBalance;
      cached.lastUpdated = new Date();
      cached.expiresAt = new Date(Date.now() + this.TTL_SECONDS * 1000);
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  invalidate(userId: number): void {
    if (this.cache.delete(userId)) {
      this.stats.evictions++;
      logger.debug('[BalanceCache] Cache invalidated', { userId });
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  invalidateBatch(userIds: number[]): void {
    let invalidated = 0;
    for (const userId of userIds) {
      if (this.cache.delete(userId)) {
        invalidated++;
      }
    }
    this.stats.evictions += invalidated;
    logger.debug('[BalanceCache] Batch invalidation', { 
      count: invalidated,
      total: userIds.length 
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
   */
  clear(): void {
    const size = this.cache.size;
    this.cache.clear();
    this.stats.evictions += size;
    this.stats.size = 0;
    logger.info('[BalanceCache] Cache cleared', { evicted: size });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
   */
  getStats(): CacheStats & { hitRate: number } {
    const total = this.stats.hits + this.stats.misses;
    const hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;
    
    return {
      ...this.stats,
      hitRate: Math.round(hitRate * 100) / 100
    };
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
   */
  private evictOldest(): void {
    const sortedEntries = Array.from(this.cache.entries())
      .sort((a, b) => a[1].lastUpdated.getTime() - b[1].lastUpdated.getTime());
    
    // –£–¥–∞–ª—è–µ–º 10% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const toEvict = Math.ceil(this.MAX_CACHE_SIZE * 0.1);
    
    for (let i = 0; i < toEvict && i < sortedEntries.length; i++) {
      this.cache.delete(sortedEntries[i][0]);
      this.stats.evictions++;
    }
    
    logger.debug('[BalanceCache] Evicted oldest entries', { count: toEvict });
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
   */
  private cleanup(): void {
    const now = new Date();
    let expired = 0;

    for (const [userId, cached] of Array.from(this.cache.entries())) {
      if (cached.expiresAt < now) {
        this.cache.delete(userId);
        expired++;
      }
    }

    if (expired > 0) {
      this.stats.evictions += expired;
      this.stats.size = this.cache.size;
      logger.debug('[BalanceCache] Cleanup completed', { expired });
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏
   */
  private startCleanupTimer(): void {
    this.cleanupTimer = setInterval(() => {
      this.cleanup();
    }, this.CLEANUP_INTERVAL);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏
   */
  public stopCleanupTimer(): void {
    if (this.cleanupTimer) {
      clearInterval(this.cleanupTimer);
      this.cleanupTimer = null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const balanceCache = BalanceCache.getInstance();