import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "../shared/schema";

neonConfig.webSocketConstructor = ws;

// –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–≤–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π DATABASE_URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ó–∞–ø—É—Å–∫ core/db.ts');
console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] NODE_ENV:', process.env.NODE_ENV);
console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] REPL_ID:', process.env.REPL_ID);
console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] REPL_SLUG:', process.env.REPL_SLUG);

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL must be set. Did you forget to provision a database?");
}

// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const PRODUCTION_DATABASE_URL = 'postgresql://neondb_owner:npg_SpgdNBV70WKl@ep-lucky-boat-a463bggt-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require';

// –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] DATABASE_URL –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.DATABASE_URL);
console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—É:', PRODUCTION_DATABASE_URL.substring(0, 60) + '...');

// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const urlMatch = PRODUCTION_DATABASE_URL.match(/ep-([^-]+)-([^-]+)-([^.]+)/);
if (urlMatch) {
  console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ:', urlMatch[0]);
} else {
  console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–∞–∑—ã');
}

export const pool = new Pool({ connectionString: PRODUCTION_DATABASE_URL });
export const db = drizzle({ client: pool, schema });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function verifyConnection() {
  try {
    console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const result = await pool.query('SELECT current_user, current_database(), inet_server_addr(), version()');
    console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:');
    console.log('  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', result.rows[0].current_user);
    console.log('  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', result.rows[0].current_database);
    console.log('  - –°–µ—Ä–≤–µ—Ä:', result.rows[0].inet_server_addr);
    console.log('  - –í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].version?.substring(0, 50) + '...');
    
    // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const countResult = await pool.query('SELECT COUNT(*) as count FROM users');
    console.log('üîç [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users:', countResult.rows[0].count);
  } catch (error) {
    console.error('‚ùå [DB –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(verifyConnection, 2000);