#!/usr/bin/env npx tsx

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TONEBOOST ROLLBACK –ü–†–û–ë–õ–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á–µ–º—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ ToneBoost TON –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—à–µ–ª–µ–∫
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseToneBoostRollback() {
  console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TONEBOOST ROLLBACK –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(60));
  console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
  console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: 1 –ø–æ–∫—É–ø–∫–∞ ‚Üí 2 –ø–∞–∫–µ—Ç–∞ ‚Üí –±–æ–Ω—É—Å ‚Üí –≤–æ–∑–≤—Ä–∞—Ç TON\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ ToneBoost –ø–∞–∫–µ—Ç—ã
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TONEBOOST –ü–ê–ö–ï–¢–û–í:');
    
    const { data: packages, error: packagesError } = await supabase
      .from('toneboost_packages')
      .select('*')
      .eq('is_active', true)
      .order('min_amount');

    if (!packagesError && packages) {
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${packages.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:`);
      packages.forEach(pkg => {
        console.log(`   ID: ${pkg.id}, Name: ${pkg.name}, Min: ${pkg.min_amount} TON, Rate: ${pkg.daily_rate}%, Duration: ${pkg.duration_days} –¥–Ω–µ–π`);
      });
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–∫–µ—Ç—ã ToneBoost');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• TON FARMING –ó–ê–ü–ò–°–ï–ô:');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_active, boost_package_id, farming_rate, farming_balance, updated_at')
      .eq('boost_active', true)
      .order('updated_at', { ascending: false })
      .limit(10);

    if (!farmingError && farmingData) {
      console.log(`üåæ –ù–∞–π–¥–µ–Ω–æ ${farmingData.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö farming –∑–∞–ø–∏—Å–µ–π:`);
      farmingData.forEach(data => {
        console.log(`   User ${data.user_id}: Package ${data.boost_package_id}, Rate: ${data.farming_rate}, Balance: ${data.farming_balance}, Update: ${new Date(data.updated_at).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ farming –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_package –≤ users
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON_BOOST_PACKAGE:');
    
    const { data: boostUsers, error: boostUsersError } = await supabase
      .from('users')
      .select('id, username, ton_boost_package, ton_boost_rate, balance_ton, updated_at')
      .not('ton_boost_package', 'is', null)
      .order('updated_at', { ascending: false })
      .limit(10);

    if (!boostUsersError && boostUsers) {
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${boostUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost:`);
      boostUsers.forEach(user => {
        console.log(`   User ${user.id} (@${user.username}): Package ${user.ton_boost_package}, Rate: ${user.ton_boost_rate}, Balance: ${user.balance_ton} TON, Update: ${new Date(user.updated_at).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON Boost –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 4. –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ ToneBoost (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –ù–ï–î–ê–í–ù–ò–• –ü–û–ö–£–ü–û–ö TONEBOOST:');
    
    const { data: purchases, error: purchasesError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, description, metadata, created_at, status')
      .lt('amount_ton', 0) // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ (—Å–ø–∏—Å–∞–Ω–∏—è)
      .or('description.ilike.%boost%,description.ilike.%–ø–∞–∫–µ—Ç%')
      .gt('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      .order('created_at', { ascending: false });

    if (!purchasesError && purchases && purchases.length > 0) {
      console.log(`üí≥ –ù–∞–π–¥–µ–Ω–æ ${purchases.length} –ø–æ–∫—É–ø–æ–∫ ToneBoost –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:`);
      purchases.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
        console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON, Description: ${tx.description}, Status: ${tx.status}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        if (metadata) {
          console.log(`      Metadata: ${JSON.stringify(metadata).substring(0, 100)}...`);
        }
      });
    } else {
      console.log('üí∞ –ü–æ–∫—É–ø–∫–∏ ToneBoost –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 5. –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–æ–∫)
    console.log('\n5Ô∏è‚É£ –ü–û–ò–°–ö –í–û–ó–í–†–ê–¢–û–í TON (–ø–æ—Å–ª–µ –ø–æ–∫—É–ø–æ–∫):');
    
    const { data: refunds, error: refundsError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, description, created_at, status')
      .gt('amount_ton', 0) // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ (–≤–æ–∑–≤—Ä–∞—Ç—ã)
      .or('description.ilike.%–≤–æ–∑–≤—Ä–∞—Ç%,description.ilike.%refund%,type.eq.REFUND')
      .gt('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (!refundsError && refunds && refunds.length > 0) {
      console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${refunds.length} –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ TON –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:`);
      refunds.forEach(tx => {
        console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: +${tx.amount_ton} TON, Description: ${tx.description}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚úÖ –Ø–≤–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã TON –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ToneBoost income —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TONEBOOST INCOME –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: incomeTransactions, error: incomeError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, description, created_at')
      .or('description.ilike.%boost –¥–æ—Ö–æ–¥%,description.ilike.%boost income%')
      .gt('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('created_at', { ascending: false })
      .limit(10);

    if (!incomeError && incomeTransactions && incomeTransactions.length > 0) {
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${incomeTransactions.length} ToneBoost income –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:`);
      incomeTransactions.forEach(tx => {
        console.log(`   User ${tx.user_id}: +${tx.amount_ton} TON, Description: ${tx.description}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚è∞ ToneBoost income —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    console.log('\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TONEBOOST –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∂–µ—Ç –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç rollback TON –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–∫–µ—Ç–æ–≤');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ToneBoost:', error);
  }
}

diagnoseToneBoostRollback();