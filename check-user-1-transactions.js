/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=1
 * –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É API –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUser1Transactions() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID=1');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=1
    console.log('\nüë§ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID=1:');
    console.log('-'.repeat(30));
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 1)
      .single();
    
    if (userError) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=1 –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userError.message}`);
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=1 –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ‚Ä¢ ID: ${user.id}`);
      console.log(`   ‚Ä¢ Username: ${user.username}`);
      console.log(`   ‚Ä¢ Telegram ID: ${user.telegram_id}`);
      console.log(`   ‚Ä¢ Balance UNI: ${user.balance_uni}`);
      console.log(`   ‚Ä¢ Balance TON: ${user.balance_ton}`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=1
    console.log('\nüíº –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID=1:');
    console.log('-'.repeat(30));
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 1)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (txError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txError.message}`);
    } else if (!transactions || transactions.length === 0) {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=1 –ù–ï –ù–ê–ô–î–ï–ù–´');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      transactions.forEach((tx, index) => {
        console.log(`   ${index + 1}. ID: ${tx.id}, Type: ${tx.type}, Amount: ${tx.amount_uni || tx.amount_ton}, Date: ${tx.created_at}`);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('-'.repeat(30));
    
    const { count: totalTx, error: countError } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞: ${countError.message}`);
    } else {
      console.log(`‚úÖ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalTx}`);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüîç –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –°–ò–°–¢–ï–ú–ï:');
    console.log('-'.repeat(30));
    
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_uni, amount_ton, description, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (recentError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${recentError.message}`);
    } else {
      console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      recentTx.forEach((tx, index) => {
        console.log(`   ${index + 1}. User ${tx.user_id}: ${tx.type} - ${tx.amount_uni || tx.amount_ton} - ${tx.created_at}`);
      });
    }
    
    // 5. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    console.log('\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò:');
    console.log('-'.repeat(30));
    
    const { data: userStats, error: statsError } = await supabase
      .from('transactions')
      .select('user_id, id')
      .order('user_id');
    
    if (statsError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${statsError.message}`);
    } else {
      const userCounts = {};
      userStats.forEach(tx => {
        userCounts[tx.user_id] = (userCounts[tx.user_id] || 0) + 1;
      });
      
      const sortedUsers = Object.entries(userCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);
      
      console.log('üèÜ –¢–û–ü-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      sortedUsers.forEach(([userId, count], index) => {
        console.log(`   ${index + 1}. User ID ${userId}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=1 –≤ —Å–ø–∏—Å–∫–µ
      if (userCounts[1]) {
        console.log(`\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=1 –∏–º–µ–µ—Ç ${userCounts[1]} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      } else {
        console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=1 –ù–ï –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å—Ç—Ä—É–∫—Ç—É—Ä—ã vs Database —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('\nüîß –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
    console.log('-'.repeat(30));
    
    if (recentTx && recentTx.length > 0) {
      const sampleTx = recentTx[0];
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î:');
      console.log('   ‚Ä¢ id:', typeof sampleTx.id);
      console.log('   ‚Ä¢ user_id:', typeof sampleTx.user_id);
      console.log('   ‚Ä¢ type:', typeof sampleTx.type);
      console.log('   ‚Ä¢ amount_uni:', typeof sampleTx.amount_uni);
      console.log('   ‚Ä¢ amount_ton:', typeof sampleTx.amount_ton);
      console.log('   ‚Ä¢ description:', typeof sampleTx.description);
      console.log('   ‚Ä¢ created_at:', typeof sampleTx.created_at);
      
      console.log('\nüìã Frontend –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É:');
      console.log('   ‚Ä¢ id: number');
      console.log('   ‚Ä¢ type: string');
      console.log('   ‚Ä¢ amount: number (–ù–ï amount_uni/amount_ton)');
      console.log('   ‚Ä¢ currency: string');
      console.log('   ‚Ä¢ status: string');
      console.log('   ‚Ä¢ description: string');
      console.log('   ‚Ä¢ createdAt: string (–ù–ï created_at)');
      console.log('   ‚Ä¢ timestamp: number');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkUser1Transactions().catch(console.error);