// –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –º–∞–ø–ø–∏–Ω–≥ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ª–æ–º–∫–∞
// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∞–ø–ø–∏–Ω–≥–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
import { supabase } from './core/supabase';

async function investigateTransactionMappingHistory(): Promise<void> {
  console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ò–°–¢–û–†–ò–Ø –ú–ê–ü–ü–ò–ù–ì–ê TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('='.repeat(90));

  console.log('\nüìã –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  console.log('üí• TON_DEPOSIT –º–∞–ø–∏—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É –≤ —Å–∏—Å—Ç–µ–º–µ');
  console.log('üí• –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è TON_DEPOSIT ‚Üí —Å–∏—Å—Ç–µ–º–∞ —É–¥–≤–∞–∏–≤–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
  console.log('üí• 1 TON ‚Üí 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ö–µ—à–∞ ‚Üí 2 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ');
  console.log('üí• –†–∞–Ω—å—à–µ —Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ª–æ–º–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π');

  // 1. –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –ú–ê–ü–ü–ò–ù–ì–ê –í –ö–û–î–ï
  console.log('\n1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –ú–ê–ü–ü–ò–ù–ì –í core/TransactionService.ts:');
  console.log('-'.repeat(80));
  
  console.log('const TRANSACTION_TYPE_MAPPING = {');
  console.log('  "TON_DEPOSIT": "TON_DEPOSIT",            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
  console.log('  "FARMING_REWARD": "FARMING_REWARD",');
  console.log('  "DEPOSIT": "DEPOSIT",                    // –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥');
  console.log('  "TON_BOOST_PURCHASE": "TON_BOOST_PURCHASE", // TON Boost –ø–æ–∫—É–ø–∫–∏');
  console.log('  // –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞ –±–∞–∑–æ–≤—ã–µ');
  console.log('  "TON_BOOST_INCOME": "FARMING_REWARD",   // TON Boost –¥–æ—Ö–æ–¥—ã ‚Üí FARMING_REWARD');
  console.log('  "UNI_DEPOSIT": "DEPOSIT",               // UNI –¥–µ–ø–æ–∑–∏—Ç—ã ‚Üí DEPOSIT');
  console.log('  "BOOST_PURCHASE": "BOOST_PAYMENT",      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
  console.log('};');

  console.log('\nüéØ –ê–ù–ê–õ–ò–ó: –ï—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥ TON_DEPOSIT ‚Üí TON_DEPOSIT');
  console.log('‚ùì –í–û–ü–†–û–°: –ë—ã–ª –ª–∏ TON_DEPOSIT –≤ enum transaction_type —Ä–∞–Ω—å—à–µ?');

  // 2. –ü–†–û–í–ï–†–ö–ê ENUM –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê ENUM transaction_type –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
  console.log('-'.repeat(80));

  const { data: enumValues, error: enumError } = await supabase.rpc('execute_sql', {
    query: `
      SELECT enumlabel as value
      FROM pg_enum e
      JOIN pg_type t ON e.enumtypid = t.oid
      WHERE t.typname = 'transaction_type'
      ORDER BY e.enumsortorder;
    `
  });

  if (enumError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è enum –∑–Ω–∞—á–µ–Ω–∏–π:', enumError.message);
  } else {
    console.log('üìä –¢–ï–ö–£–©–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø ENUM transaction_type:');
    enumValues?.forEach((val, i) => {
      console.log(`   ${i + 1}. ${val.value}`);
    });

    const hasTonDeposit = enumValues?.some(val => val.value === 'TON_DEPOSIT');
    const hasDeposit = enumValues?.some(val => val.value === 'DEPOSIT');
    
    console.log(`\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:`);
    console.log(`   TON_DEPOSIT –≤ enum: ${hasTonDeposit ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
    console.log(`   DEPOSIT –≤ enum: ${hasDeposit ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
  }

  // 3. –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –¢–ò–ü–ê–ú
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –¢–ò–ü–ê–ú:');
  console.log('-'.repeat(80));

  const { data: typeHistory } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        type,
        DATE(created_at) as date,
        COUNT(*) as count,
        SUM(CASE WHEN CAST(amount_ton AS FLOAT) > 0 THEN CAST(amount_ton AS FLOAT) ELSE 0 END) as total_ton,
        COUNT(DISTINCT user_id) as unique_users
      FROM transactions 
      WHERE created_at >= '2025-07-01'
        AND (CAST(amount_ton AS FLOAT) > 0 OR currency = 'TON')
      GROUP BY type, DATE(created_at)
      ORDER BY date, type
    `
  });

  if (typeHistory && typeHistory.length > 0) {
    console.log('üìà –ò–°–¢–û–†–ò–Ø TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –î–ù–Ø–ú:');
    
    const dates = [...new Set(typeHistory.map(t => t.date))].sort();
    
    dates.forEach(date => {
      const dayTypes = typeHistory.filter(t => t.date === date);
      console.log(`\n   ${date}:`);
      
      dayTypes.forEach(type => {
        console.log(`      ${type.type}: ${type.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${parseFloat(type.total_ton).toFixed(3)} TON, ${type.unique_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      });
    });
  }

  // 4. –ü–û–ò–°–ö –ú–û–ú–ï–ù–¢–ê –ü–û–Ø–í–õ–ï–ù–ò–Ø TON_DEPOSIT
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –ú–û–ú–ï–ù–¢–ê –ü–û–Ø–í–õ–ï–ù–ò–Ø TON_DEPOSIT –¢–ò–ü–ê:');
  console.log('-'.repeat(80));

  const { data: tonDepositFirst } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        id,
        user_id,
        amount_ton,
        created_at,
        description,
        metadata
      FROM transactions 
      WHERE type = 'TON_DEPOSIT'
      ORDER BY created_at ASC
      LIMIT 10
    `
  });

  if (tonDepositFirst && tonDepositFirst.length > 0) {
    console.log(`üéØ –ü–ï–†–í–´–ï ${tonDepositFirst.length} TON_DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
    
    tonDepositFirst.forEach((tx, i) => {
      console.log(`\n   ${i + 1}. ID ${tx.id} (${tx.created_at}):`);
      console.log(`      User: ${tx.user_id}`);
      console.log(`      Amount: ${tx.amount_ton} TON`);
      console.log(`      Description: ${tx.description}`);
      console.log(`      Metadata: ${JSON.stringify(tx.metadata, null, 2)}`);
    });
    
    const firstDate = tonDepositFirst[0].created_at.split('T')[0];
    console.log(`\nüí° –ü–ï–†–í–´–ô TON_DEPOSIT: ${firstDate}`);
    
    if (firstDate >= '2025-08-01') {
      console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: TON_DEPOSIT –ø–æ—è–≤–∏–ª—Å—è –°–ï–ì–û–î–ù–Ø –∏–ª–∏ –ø–æ–∑–∂–µ!');
    } else if (firstDate >= '2025-07-22') {
      console.log('‚ö†Ô∏è TON_DEPOSIT –ø–æ—è–≤–∏–ª—Å—è –≤ –∫–æ–Ω—Ü–µ –∏—é–ª—è');
    } else {
      console.log('‚úÖ TON_DEPOSIT —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –Ω–∞—á–∞–ª–∞ –∏—é–ª—è');
    }
  } else {
    console.log('‚ùå –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –¢–ò–ü–ê TON_DEPOSIT!');
    console.log('üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É - —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –ë–î');
  }

  // 5. –ê–ù–ê–õ–ò–ó DEPOSIT vs TON_DEPOSIT
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó DEPOSIT vs TON_DEPOSIT:');
  console.log('-'.repeat(80));

  const { data: depositComparison } = await supabase.rpc('execute_sql', {
    query: `
      WITH deposit_analysis AS (
        SELECT 
          type,
          COUNT(*) as count,
          SUM(CASE WHEN CAST(amount_ton AS FLOAT) > 0 THEN CAST(amount_ton AS FLOAT) ELSE 0 END) as total_ton,
          MIN(created_at) as first_date,
          MAX(created_at) as last_date,
          COUNT(DISTINCT user_id) as unique_users
        FROM transactions 
        WHERE type IN ('DEPOSIT', 'TON_DEPOSIT')
          AND (CAST(amount_ton AS FLOAT) > 0 OR currency = 'TON')
        GROUP BY type
      )
      SELECT * FROM deposit_analysis
      ORDER BY first_date
    `
  });

  if (depositComparison && depositComparison.length > 0) {
    console.log('üìä –°–†–ê–í–ù–ï–ù–ò–ï DEPOSIT vs TON_DEPOSIT:');
    
    depositComparison.forEach(comp => {
      console.log(`\n   ${comp.type}:`);
      console.log(`      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${comp.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`      –û–±—â–∞—è —Å—É–º–º–∞: ${parseFloat(comp.total_ton).toFixed(3)} TON`);
      console.log(`      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${comp.unique_users}`);
      console.log(`      –ü–µ—Ä–∏–æ–¥: ${comp.first_date.split('T')[0]} - ${comp.last_date.split('T')[0]}`);
    });
  }

  // 6. –ü–û–ò–°–ö –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ß–ï–†–ï–ó –û–ü–ò–°–ê–ù–ò–Ø
  console.log('\n6Ô∏è‚É£ –ü–û–ò–°–ö –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ß–ï–†–ï–ó –û–ü–ò–°–ê–ù–ò–Ø –ò –ú–ï–¢–ê–î–ê–ù–ù–´–ï:');
  console.log('-'.repeat(80));

  const { data: duplicateSearch } = await supabase.rpc('execute_sql', {
    query: `
      WITH potential_duplicates AS (
        SELECT 
          t1.id as id1,
          t2.id as id2,
          t1.user_id,
          t1.amount_ton,
          t1.created_at as created1,
          t2.created_at as created2,
          t1.type as type1,
          t2.type as type2,
          t1.description as desc1,
          t2.description as desc2
        FROM transactions t1
        JOIN transactions t2 ON (
          t1.user_id = t2.user_id 
          AND t1.id != t2.id
          AND t1.amount_ton = t2.amount_ton
          AND ABS(EXTRACT(EPOCH FROM (t1.created_at - t2.created_at))) < 300  -- 5 –º–∏–Ω—É—Ç
        )
        WHERE t1.created_at >= '2025-08-01'
          AND CAST(t1.amount_ton AS FLOAT) > 0
          AND (t1.type IN ('DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD') 
               OR t2.type IN ('DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD'))
      )
      SELECT * FROM potential_duplicates
      ORDER BY created1 DESC
    `
  });

  if (duplicateSearch && duplicateSearch.length > 0) {
    console.log(`üö® –ù–ê–ô–î–ï–ù–û ${duplicateSearch.length} –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –î–£–ë–õ–ï–ô:`);
    
    duplicateSearch.forEach((dup, i) => {
      console.log(`\n   ${i + 1}. –î–£–ë–õ–ò–ö–ê–¢ –ì–†–£–ü–ü–ê:`);
      console.log(`      User ${dup.user_id}: ${dup.amount_ton} TON`);
      console.log(`      ID ${dup.id1} (${dup.type1}) –≤ ${dup.created1}`);
      console.log(`      ID ${dup.id2} (${dup.type2}) –≤ ${dup.created2}`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏—è:`);
      console.log(`        1: ${dup.desc1}`);
      console.log(`        2: ${dup.desc2}`);
    });
  } else {
    console.log('‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—É–º–º–µ –ù–ï –ù–ê–ô–î–ï–ù–û');
  }

  // 7. –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´
  console.log('\n' + '='.repeat(90));
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(90));

  console.log('\nüí• –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
  console.log('1. –í –∫–æ–¥ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∏–ø TON_DEPOSIT');
  console.log('2. –ù–æ –≤ enum –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ–≥–æ –ù–ï–¢ (–≤–µ—Ä–æ—è—Ç–Ω–æ)');
  console.log('3. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –º–∞–ø–ø–∏–Ω–≥–µ');
  console.log('4. –°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å TON_DEPOSIT, –Ω–æ –ø–∞–¥–∞–µ—Ç –Ω–∞ enum');
  console.log('5. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–∑–¥–∞–µ—Ç—Å—è fallback DEPOSIT + TON_DEPOSIT');

  console.log('\nüîç –ß–¢–û –ù–£–ñ–ù–û –ò–°–°–õ–ï–î–û–í–ê–¢–¨ –î–ê–õ–¨–®–ï:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –ë–î —Ç–∏–ø TON_DEPOSIT');
  console.log('2. –ù–∞–π—Ç–∏ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ –≤ processTonDeposit)');
  console.log('3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–±–æ—á–∏–π –º–∞–ø–ø–∏–Ω–≥ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TON_DEPOSIT');
  console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ');

  console.log('\n‚ö†Ô∏è –ì–ò–ü–û–¢–ï–ó–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('1. processTonDeposit() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞');
  console.log('2. –ò–ª–∏ TON_DEPOSIT –º–∞–ø–ø–∏—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Üí fallback –Ω–∞ DEPOSIT');
  console.log('3. –ò–ª–∏ –µ—Å—Ç—å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');

  console.log('\nüö® –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å enum transaction_type –≤ –ë–î –Ω–∞ –Ω–∞–ª–∏—á–∏–µ TON_DEPOSIT');
  console.log('2. –ù–∞–π—Ç–∏ –≥–¥–µ –≤ –∫–æ–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤');
  console.log('3. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
  console.log('4. –î–æ–±–∞–≤–∏—Ç—å TON_DEPOSIT –≤ enum –ë–î –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥');
}

investigateTransactionMappingHistory().catch(console.error);