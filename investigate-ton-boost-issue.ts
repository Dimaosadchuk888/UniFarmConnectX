import { supabase } from './core/supabase';

async function investigateTonBoost() {
  console.log('üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏\n');

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:');
  
  const { data: tonFarmingData, error: tonError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', '74')
    .single();

  if (tonError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:', tonError);
  } else if (tonFarmingData) {
    console.log('\nüì¶ –î–∞–Ω–Ω—ã–µ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:');
    console.log(`- ID –ø–∞–∫–µ—Ç–∞: ${tonFarmingData.boost_package_id}`);
    console.log(`- –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${tonFarmingData.farming_balance} TON`);
    console.log(`- –°—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${tonFarmingData.farming_rate}% –≤ –¥–µ–Ω—å`);
    console.log(`- –ê–∫—Ç–∏–≤–µ–Ω: ${tonFarmingData.is_active ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(tonFarmingData.farming_last_update).toLocaleString()}`);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ boost –ø–∞–∫–µ—Ç–µ
  if (tonFarmingData?.boost_package_id) {
    const { data: boostPackage, error: packageError } = await supabase
      .from('boost_packages')
      .select('*')
      .eq('id', tonFarmingData.boost_package_id)
      .single();

    if (!packageError && boostPackage) {
      console.log(`\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ ${boostPackage.name}:`);
      console.log(`- –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${boostPackage.daily_rate}%`);
      console.log(`- –î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º—ã: ${boostPackage.min_amount} - ${boostPackage.max_amount} TON`);
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74
  console.log('\n2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:');
  
  const { data: transactions, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .eq('currency', 'TON')
    .like('description', '%TON Boost%')
    .order('created_at', { ascending: false })
    .limit(10);

  if (!txError && transactions) {
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    transactions.forEach(tx => {
      console.log(`\n- ID: ${tx.id}`);
      console.log(`  –°—É–º–º–∞: ${tx.amount} TON`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`  –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    if (transactions.length > 1) {
      console.log('\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:');
      for (let i = 0; i < transactions.length - 1; i++) {
        const time1 = new Date(transactions[i].created_at).getTime();
        const time2 = new Date(transactions[i + 1].created_at).getTime();
        const diffMinutes = Math.round((time1 - time2) / 60000);
        console.log(`- –ú–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ ${i + 1} –∏ ${i + 2}: ${diffMinutes} –º–∏–Ω—É—Ç`);
      }
    }
  }

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\n3Ô∏è‚É£ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:');
  
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', 74)
    .single();

  if (!userError && user) {
    console.log(`- –ë–∞–ª–∞–Ω—Å TON: ${user.balance_ton}`);
    console.log(`- –ë–∞–ª–∞–Ω—Å UNI: ${user.balance_uni}`);
  }

  // 5. –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  if (tonFarmingData && tonFarmingData.is_active) {
    console.log('\n4Ô∏è‚É£ –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞:');
    const dailyRate = tonFarmingData.farming_rate / 100;
    const incomePerDay = tonFarmingData.farming_balance * dailyRate;
    const incomePerHour = incomePerDay / 24;
    const incomePerMinute = incomePerHour / 60;
    const incomePer5Minutes = incomePerMinute * 5;

    console.log(`- –ë–∞–ª–∞–Ω—Å –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${tonFarmingData.farming_balance} TON`);
    console.log(`- –°—Ç–∞–≤–∫–∞: ${tonFarmingData.farming_rate}% –≤ –¥–µ–Ω—å`);
    console.log(`- –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${incomePerDay.toFixed(6)} TON`);
    console.log(`- –î–æ—Ö–æ–¥ –≤ —á–∞—Å: ${incomePerHour.toFixed(6)} TON`);
    console.log(`- –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${incomePer5Minutes.toFixed(6)} TON`);
  }

  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost
  console.log('\n5Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost:');
  
  const { data: activeUsers, error: activeError } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, farming_balance, farming_rate')
    .eq('is_active', true);

  if (!activeError && activeUsers) {
    console.log(`\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–∫–µ—Ç–∞–º
    const packageStats = activeUsers.reduce((acc, user) => {
      const pkgId = user.boost_package_id || 'unknown';
      if (!acc[pkgId]) {
        acc[pkgId] = { count: 0, totalBalance: 0 };
      }
      acc[pkgId].count++;
      acc[pkgId].totalBalance += parseFloat(user.farming_balance) || 0;
      return acc;
    }, {} as Record<string, {count: number, totalBalance: number}>);

    console.log('\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º:');
    Object.entries(packageStats).forEach(([pkgId, stats]) => {
      console.log(`- –ü–∞–∫–µ—Ç ${pkgId}: ${stats.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.totalBalance.toFixed(2)} TON`);
    });
  }

  // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞—é—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç:');
  
  const tenMinutesAgo = new Date();
  tenMinutesAgo.setMinutes(tenMinutesAgo.getMinutes() - 10);

  const { data: recentTonTx, error: recentError } = await supabase
    .from('transactions')
    .select('user_id, amount, description')
    .eq('currency', 'TON')
    .like('description', '%TON Boost%')
    .gte('created_at', tenMinutesAgo.toISOString())
    .order('created_at', { ascending: false });

  if (!recentError && recentTonTx) {
    const uniqueUsers = new Set(recentTonTx.map(tx => tx.user_id));
    console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${uniqueUsers.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ${activeUsers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
    
    if (activeUsers && uniqueUsers.size < activeUsers.length) {
      console.log('\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
      const missingUsers = activeUsers
        .filter(u => !uniqueUsers.has(parseInt(u.user_id)))
        .map(u => u.user_id);
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${missingUsers.join(', ')}`);
    }
  }
}

investigateTonBoost().catch(console.error);