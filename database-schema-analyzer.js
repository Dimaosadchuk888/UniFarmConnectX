/**
 * T14: Database Schema Analysis Tool
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neon –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º —Å–∏—Å—Ç–µ–º—ã
 */

import { Pool } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class DatabaseSchemaAnalyzer {
  constructor() {
    this.pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    });
    this.dbTables = new Map();
    this.codeModels = new Map();
    this.discrepancies = [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async analyzeDatabaseStructure() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
      const tablesQuery = `
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name;
      `;
      
      const tablesResult = await this.pool.query(tablesQuery);
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: ${tablesResult.rows.length}`);
      
      for (const table of tablesResult.rows) {
        const tableName = table.table_name;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const columnsQuery = `
          SELECT 
            column_name,
            data_type,
            is_nullable,
            column_default,
            character_maximum_length,
            numeric_precision,
            numeric_scale
          FROM information_schema.columns 
          WHERE table_schema = 'public' 
            AND table_name = $1
          ORDER BY ordinal_position;
        `;
        
        const columnsResult = await this.pool.query(columnsQuery, [tableName]);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        const indexesQuery = `
          SELECT 
            indexname,
            indexdef
          FROM pg_indexes 
          WHERE tablename = $1 
            AND schemaname = 'public';
        `;
        
        const indexesResult = await this.pool.query(indexesQuery, [tableName]);
        
        this.dbTables.set(tableName, {
          columns: columnsResult.rows,
          indexes: indexesResult.rows
        });
        
        console.log(`  ‚úÖ ${tableName}: ${columnsResult.rows.length} –∫–æ–ª–æ–Ω–æ–∫, ${indexesResult.rows.length} –∏–Ω–¥–µ–∫—Å–æ–≤`);
      }
      
      return this.dbTables;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∫–æ–¥–µ —Å–∏—Å—Ç–µ–º—ã
   */
  async analyzeCodeModels() {
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–¥–µ...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º schema.ts
    await this.analyzeSchemaFile();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await this.analyzeServicesFiles();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã
    await this.analyzeTypesFiles();
    
    return this.codeModels;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç shared/schema.ts
   */
  async analyzeSchemaFile() {
    const schemaPath = path.join(__dirname, 'shared/schema.ts');
    
    try {
      if (fs.existsSync(schemaPath)) {
        const schemaContent = fs.readFileSync(schemaPath, 'utf8');
        
        // –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü (Drizzle ORM)
        const tableMatches = schemaContent.match(/export const (\w+) = pgTable\(['"`](\w+)['"`]/g);
        
        if (tableMatches) {
          for (const match of tableMatches) {
            const [, tableName, dbTableName] = match.match(/export const (\w+) = pgTable\(['"`](\w+)['"`]/);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const tableDefStart = schemaContent.indexOf(match);
            const tableDefEnd = schemaContent.indexOf('});', tableDefStart);
            const tableDef = schemaContent.substring(tableDefStart, tableDefEnd);
            
            const fields = this.extractFieldsFromTableDef(tableDef);
            
            this.codeModels.set(dbTableName || tableName, {
              type: 'drizzle_table',
              fields: fields,
              source: 'shared/schema.ts'
            });
            
            console.log(`  üìù ${dbTableName || tableName}: ${fields.length} –ø–æ–ª–µ–π (Drizzle)`);
          }
        }
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å schema.ts: ${error.message}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—è –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã Drizzle
   */
  extractFieldsFromTableDef(tableDef) {
    const fields = [];
    const fieldMatches = tableDef.match(/(\w+): (\w+)\([^)]*\)/g);
    
    if (fieldMatches) {
      for (const fieldMatch of fieldMatches) {
        const [, fieldName, fieldType] = fieldMatch.match(/(\w+): (\w+)\(/);
        fields.push({
          name: fieldName,
          type: fieldType,
          source: 'drizzle_definition'
        });
      }
    }
    
    return fields;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async analyzeServicesFiles() {
    const modulesDir = path.join(__dirname, 'modules');
    
    if (!fs.existsSync(modulesDir)) {
      console.log('  ‚ö†Ô∏è  –ü–∞–ø–∫–∞ modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    const modules = fs.readdirSync(modulesDir);
    
    for (const module of modules) {
      const servicePath = path.join(modulesDir, module, 'service.ts');
      
      if (fs.existsSync(servicePath)) {
        try {
          const serviceContent = fs.readFileSync(servicePath, 'utf8');
          
          // –ò—â–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è
          const sqlMatches = serviceContent.match(/SELECT [^;]+/gi);
          const insertMatches = serviceContent.match(/INSERT INTO [^;]+/gi);
          const updateMatches = serviceContent.match(/UPDATE [^;]+/gi);
          
          const usedFields = new Set();
          const usedTables = new Set();
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
          if (sqlMatches) {
            for (const sql of sqlMatches) {
              const tableMatch = sql.match(/FROM (\w+)/i);
              if (tableMatch) {
                usedTables.add(tableMatch[1]);
              }
              
              const fieldMatches = sql.match(/\b\w+\.\w+\b/g);
              if (fieldMatches) {
                fieldMatches.forEach(field => usedFields.add(field));
              }
            }
          }
          
          if (usedTables.size > 0) {
            this.codeModels.set(`${module}_service`, {
              type: 'service',
              tables: Array.from(usedTables),
              fields: Array.from(usedFields),
              source: `modules/${module}/service.ts`
            });
            
            console.log(`  üìù ${module} service: ${usedTables.size} —Ç–∞–±–ª–∏—Ü, ${usedFields.size} –ø–æ–ª–µ–π`);
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${module}/service.ts: ${error.message}`);
        }
      }
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Ç–∏–ø–æ–≤
   */
  async analyzeTypesFiles() {
    const typesDir = path.join(__dirname, 'types');
    
    if (fs.existsSync(typesDir)) {
      const typeFiles = fs.readdirSync(typesDir).filter(f => f.endsWith('.ts'));
      
      for (const typeFile of typeFiles) {
        try {
          const typeContent = fs.readFileSync(path.join(typesDir, typeFile), 'utf8');
          
          // –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã
          const interfaceMatches = typeContent.match(/interface (\w+) \{[^}]+\}/g);
          const typeMatches = typeContent.match(/type (\w+) = \{[^}]+\}/g);
          
          if (interfaceMatches || typeMatches) {
            console.log(`  üìù ${typeFile}: –Ω–∞–π–¥–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤`);
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${typeFile}: ${error.message}`);
        }
      }
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–¥–æ–º
   */
  compareStructures() {
    console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä...');
    
    // –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –≤ –∫–æ–¥–µ
    const dbOnlyTables = new Set([...this.dbTables.keys()]);
    const codeOnlyTables = new Set();
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ
    for (const [modelName, model] of this.codeModels) {
      if (model.type === 'drizzle_table') {
        dbOnlyTables.delete(modelName);
      }
      if (model.tables) {
        model.tables.forEach(table => {
          if (!this.dbTables.has(table)) {
            codeOnlyTables.add(table);
          } else {
            dbOnlyTables.delete(table);
          }
        });
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const [tableName, tableInfo] of this.dbTables) {
      const codeModel = this.codeModels.get(tableName);
      
      if (!codeModel) {
        this.discrepancies.push({
          type: 'table_unused',
          table: tableName,
          message: '–¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ',
          severity: 'medium'
        });
        continue;
      }
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—è
      if (codeModel.type === 'drizzle_table') {
        this.compareTableFields(tableName, tableInfo, codeModel);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
      this.checkIndexes(tableName, tableInfo);
    }
    
    // –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –∫–æ–¥–µ
    for (const table of codeOnlyTables) {
      this.discrepancies.push({
        type: 'table_missing',
        table: table,
        message: '–¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ',
        severity: 'high'
      });
    }
    
    // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ
    for (const table of dbOnlyTables) {
      this.discrepancies.push({
        type: 'table_unused',
        table: table,
        message: '–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
        severity: 'low'
      });
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
   */
  compareTableFields(tableName, dbTable, codeModel) {
    const dbFields = new Map(dbTable.columns.map(col => [col.column_name, col]));
    const codeFields = new Map(codeModel.fields.map(field => [field.name, field]));
    
    // –ü–æ–ª—è –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –≤ –∫–æ–¥–µ
    for (const [fieldName, fieldInfo] of dbFields) {
      if (!codeFields.has(fieldName)) {
        this.discrepancies.push({
          type: 'field_unused',
          table: tableName,
          field: fieldName,
          message: `–ü–æ–ª–µ ${fieldName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ`,
          details: fieldInfo,
          severity: 'low'
        });
      }
    }
    
    // –ü–æ–ª—è –≤ –∫–æ–¥–µ, –Ω–æ –Ω–µ –≤ –±–∞–∑–µ
    for (const [fieldName, fieldInfo] of codeFields) {
      if (!dbFields.has(fieldName)) {
        this.discrepancies.push({
          type: 'field_missing',
          table: tableName,
          field: fieldName,
          message: `–ü–æ–ª–µ ${fieldName} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ`,
          details: fieldInfo,
          severity: 'high'
        });
      }
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    for (const [fieldName, codeField] of codeFields) {
      const dbField = dbFields.get(fieldName);
      if (dbField) {
        const typeMatch = this.compareFieldTypes(dbField.data_type, codeField.type);
        if (!typeMatch) {
          this.discrepancies.push({
            type: 'type_mismatch',
            table: tableName,
            field: fieldName,
            message: `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤: –±–∞–∑–∞(${dbField.data_type}) vs –∫–æ–¥(${codeField.type})`,
            dbType: dbField.data_type,
            codeType: codeField.type,
            severity: 'medium'
          });
        }
      }
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–∏–ø—ã –ø–æ–ª–µ–π
   */
  compareFieldTypes(dbType, codeType) {
    const typeMapping = {
      'text': ['text', 'varchar', 'string'],
      'varchar': ['text', 'varchar', 'string'],
      'integer': ['integer', 'int', 'number'],
      'bigint': ['bigint', 'bigserial', 'number'],
      'boolean': ['boolean', 'bool'],
      'timestamp': ['timestamp', 'date', 'datetime'],
      'uuid': ['uuid', 'text'],
      'decimal': ['decimal', 'numeric', 'real', 'number'],
      'jsonb': ['json', 'jsonb']
    };
    
    for (const [standard, variants] of Object.entries(typeMapping)) {
      if (variants.includes(dbType.toLowerCase()) && variants.includes(codeType.toLowerCase())) {
        return true;
      }
    }
    
    return dbType.toLowerCase() === codeType.toLowerCase();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã
   */
  checkIndexes(tableName, tableInfo) {
    const criticalFields = ['telegram_id', 'user_id', 'ref_code', 'mission_id', 'type', 'id'];
    const existingIndexes = tableInfo.indexes.map(idx => idx.indexname.toLowerCase());
    
    for (const column of tableInfo.columns) {
      const fieldName = column.column_name;
      
      if (criticalFields.includes(fieldName)) {
        const hasIndex = existingIndexes.some(idx => 
          idx.includes(fieldName.toLowerCase()) || 
          idx.includes(tableName.toLowerCase() + '_' + fieldName.toLowerCase())
        );
        
        if (!hasIndex && fieldName !== 'id') {
          this.discrepancies.push({
            type: 'missing_index',
            table: tableName,
            field: fieldName,
            message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ ${fieldName} –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å–∞`,
            severity: 'medium'
          });
        }
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç
   */
  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä –û–¢–ß–ï–¢ T14: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• UniFarm');
    console.log('='.repeat(80));

    console.log(`\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`  –¢–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${this.dbTables.size}`);
    console.log(`  –ú–æ–¥–µ–ª–µ–π –≤ –∫–æ–¥–µ: ${this.codeModels.size}`);
    console.log(`  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${this.discrepancies.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
    const groupedDiscrepancies = this.discrepancies.reduce((acc, disc) => {
      if (!acc[disc.type]) acc[disc.type] = [];
      acc[disc.type].push(disc);
      return acc;
    }, {});

    console.log(`\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú:`);

    // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    if (groupedDiscrepancies.table_unused) {
      console.log(`\n‚ùå –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –¢–ê–ë–õ–ò–¶–´ (${groupedDiscrepancies.table_unused.length}):`);
      groupedDiscrepancies.table_unused.forEach(disc => {
        console.log(`  ‚Ä¢ ${disc.table} - ${disc.message}`);
      });
    }

    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if (groupedDiscrepancies.table_missing) {
      console.log(`\nüö® –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–ê–ë–õ–ò–¶–´ (${groupedDiscrepancies.table_missing.length}):`);
      groupedDiscrepancies.table_missing.forEach(disc => {
        console.log(`  ‚Ä¢ ${disc.table} - ${disc.message}`);
      });
    }

    // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è
    if (groupedDiscrepancies.field_unused) {
      console.log(`\n‚ö†Ô∏è  –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ü–û–õ–Ø (${groupedDiscrepancies.field_unused.length}):`);
      const byTable = groupedDiscrepancies.field_unused.reduce((acc, disc) => {
        if (!acc[disc.table]) acc[disc.table] = [];
        acc[disc.table].push(disc.field);
        return acc;
      }, {});
      
      for (const [table, fields] of Object.entries(byTable)) {
        console.log(`  ‚Ä¢ ${table}: ${fields.join(', ')}`);
      }
    }

    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    if (groupedDiscrepancies.field_missing) {
      console.log(`\nüö® –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–û–õ–Ø (${groupedDiscrepancies.field_missing.length}):`);
      const byTable = groupedDiscrepancies.field_missing.reduce((acc, disc) => {
        if (!acc[disc.table]) acc[disc.table] = [];
        acc[disc.table].push(disc.field);
        return acc;
      }, {});
      
      for (const [table, fields] of Object.entries(byTable)) {
        console.log(`  ‚Ä¢ ${table}: ${fields.join(', ')}`);
      }
    }

    // –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤
    if (groupedDiscrepancies.type_mismatch) {
      console.log(`\n‚ö° –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–ò–ü–û–í (${groupedDiscrepancies.type_mismatch.length}):`);
      groupedDiscrepancies.type_mismatch.forEach(disc => {
        console.log(`  ‚Ä¢ ${disc.table}.${disc.field}: ${disc.dbType} (–±–∞–∑–∞) vs ${disc.codeType} (–∫–æ–¥)`);
      });
    }

    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    if (groupedDiscrepancies.missing_index) {
      console.log(`\nüìä –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ò–ù–î–ï–ö–°–´ (${groupedDiscrepancies.missing_index.length}):`);
      const byTable = groupedDiscrepancies.missing_index.reduce((acc, disc) => {
        if (!acc[disc.table]) acc[disc.table] = [];
        acc[disc.table].push(disc.field);
        return acc;
      }, {});
      
      for (const [table, fields] of Object.entries(byTable)) {
        console.log(`  ‚Ä¢ ${table}: ${fields.join(', ')}`);
      }
    }

    console.log(`\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶ –í –ë–ê–ó–ï:`);
    for (const [tableName, tableInfo] of this.dbTables) {
      console.log(`\n  üìÅ ${tableName.toUpperCase()}`);
      console.log(`     –ö–æ–ª–æ–Ω–∫–∏: ${tableInfo.columns.length}`);
      tableInfo.columns.forEach(col => {
        const nullable = col.is_nullable === 'YES' ? '(nullable)' : '(not null)';
        console.log(`       ‚Ä¢ ${col.column_name}: ${col.data_type} ${nullable}`);
      });
      
      if (tableInfo.indexes.length > 0) {
        console.log(`     –ò–Ω–¥–µ–∫—Å—ã: ${tableInfo.indexes.length}`);
        tableInfo.indexes.forEach(idx => {
          console.log(`       ‚Ä¢ ${idx.indexname}`);
        });
      }
    }

    return {
      totalTables: this.dbTables.size,
      totalModels: this.codeModels.size,
      totalDiscrepancies: this.discrepancies.length,
      discrepancies: this.discrepancies,
      recommendations: this.generateRecommendations()
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  generateRecommendations() {
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê:`);
    
    const recommendations = [];
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    const critical = this.discrepancies.filter(d => d.severity === 'high');
    if (critical.length > 0) {
      console.log(`\nüö® –ö–†–ò–¢–ò–ß–ù–û (—Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):`);
      critical.forEach(disc => {
        console.log(`  ‚Ä¢ ${disc.message}`);
        if (disc.type === 'table_missing') {
          recommendations.push(`CREATE TABLE ${disc.table}`);
        }
        if (disc.type === 'field_missing') {
          recommendations.push(`ALTER TABLE ${disc.table} ADD COLUMN ${disc.field}`);
        }
      });
    }
    
    // –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    const medium = this.discrepancies.filter(d => d.severity === 'medium');
    if (medium.length > 0) {
      console.log(`\n‚ö†Ô∏è  –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢:`);
      medium.forEach(disc => {
        console.log(`  ‚Ä¢ ${disc.message}`);
        if (disc.type === 'missing_index') {
          recommendations.push(`CREATE INDEX ON ${disc.table}(${disc.field})`);
        }
        if (disc.type === 'type_mismatch') {
          recommendations.push(`ALTER TABLE ${disc.table} ALTER COLUMN ${disc.field} TYPE ${disc.codeType}`);
        }
      });
    }
    
    // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const low = this.discrepancies.filter(d => d.severity === 'low');
    if (low.length > 0) {
      console.log(`\nüìù –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å):`);
      low.forEach(disc => {
        console.log(`  ‚Ä¢ ${disc.message}`);
        if (disc.type === 'field_unused') {
          recommendations.push(`-- Consider removing unused column: ${disc.table}.${disc.field}`);
        }
      });
    }
    
    console.log(`\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    console.log(`  1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${critical.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π`);
    console.log(`  2. –î–æ–±–∞–≤–∏—Ç—å ${this.discrepancies.filter(d => d.type === 'missing_index').length} –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`);
    console.log(`  3. –û—á–∏—Å—Ç–∏—Ç—å ${this.discrepancies.filter(d => d.type === 'field_unused').length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π`);
    
    return recommendations;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  async runAnalysis() {
    try {
      console.log('üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• T14');
      
      await this.analyzeDatabaseStructure();
      await this.analyzeCodeModels();
      this.compareStructures();
      
      const report = this.generateReport();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
      const reportData = {
        timestamp: new Date().toISOString(),
        summary: {
          totalTables: report.totalTables,
          totalModels: report.totalModels,
          totalDiscrepancies: report.totalDiscrepancies
        },
        database_tables: Object.fromEntries(this.dbTables),
        code_models: Object.fromEntries(this.codeModels),
        discrepancies: this.discrepancies,
        recommendations: report.recommendations
      };
      
      fs.writeFileSync('T14_DATABASE_ANALYSIS_REPORT.json', JSON.stringify(reportData, null, 2));
      
      console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ T14_DATABASE_ANALYSIS_REPORT.json');
      
      return report;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
      throw error;
    } finally {
      await this.pool.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  const analyzer = new DatabaseSchemaAnalyzer();
  await analyzer.runAnalysis();
}

// ES module entry point
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { DatabaseSchemaAnalyzer };