/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id=48
 */

import { createClient } from '@supabase/supabase-js';

async function testReferralAPI() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –°–ò–°–¢–ï–ú–´ –î–õ–Ø USER_ID=48');
  console.log('='.repeat(70));
  
  const userId = 48;
  
  // 1. –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –£–†–û–í–ù–Ø–ú
  console.log('\nüí∞ 1. –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û –£–†–û–í–ù–Ø–ú:');
  console.log('-'.repeat(50));
  
  const { data: referralTransactions, error: refError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .ilike('description', '%referral%')
    .order('created_at', { ascending: false });
  
  if (!refError && referralTransactions?.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${referralTransactions.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    const levelIncome = {};
    const levelCounts = {};
    
    referralTransactions.forEach(tx => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
      const levelMatch = tx.description.match(/L(\d+)/i) || tx.description.match(/level (\d+)/i);
      const level = levelMatch ? parseInt(levelMatch[1]) : 1;
      
      if (!levelIncome[level]) {
        levelIncome[level] = { uni: 0, ton: 0 };
        levelCounts[level] = 0;
      }
      
      levelCounts[level]++;
      
      if (tx.amount_uni) {
        levelIncome[level].uni += parseFloat(tx.amount_uni);
      }
      if (tx.amount_ton) {
        levelIncome[level].ton += parseFloat(tx.amount_ton);
      }
    });
    
    console.log('\nüìä –î–û–•–û–î–´ –ü–û –£–†–û–í–ù–Ø–ú:');
    Object.keys(levelIncome).sort((a, b) => parseInt(a) - parseInt(b)).forEach(level => {
      const income = levelIncome[level];
      const count = levelCounts[level];
      console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π | ${income.uni.toFixed(6)} UNI + ${income.ton.toFixed(6)} TON`);
    });
    
    const totalUni = Object.values(levelIncome).reduce((sum, income) => sum + income.uni, 0);
    const totalTon = Object.values(levelIncome).reduce((sum, income) => sum + income.ton, 0);
    
    console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalUni.toFixed(6)} UNI + ${totalTon.toFixed(6)} TON`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    referralTransactions.slice(0, 10).forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      const dateStr = new Date(tx.created_at).toLocaleString('ru-RU');
      console.log(`   ${idx + 1}. [${dateStr}] +${amount} ${currency} | ${tx.description}`);
    });
    
    // 2. –°–¢–†–£–ö–¢–£–†–ê –ü–ê–†–¢–ù–ï–†–û–í –ü–û –£–†–û–í–ù–Ø–ú
    console.log('\nüë• 2. –°–¢–†–£–ö–¢–£–†–ê –ü–ê–†–¢–ù–ï–†–û–í –ü–û –£–†–û–í–ù–Ø–ú:');
    console.log('-'.repeat(50));
    
    // –°—Ç—Ä–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('id, username, referred_by, balance_uni, balance_ton, uni_farming_active, ton_boost_package')
      .not('referred_by', 'is', null);
    
    if (!usersError && allUsers?.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ –æ—Ç user_id=48
      function findReferralChain(startUserId, users, level = 1, visited = new Set()) {
        if (level > 20 || visited.has(startUserId)) return [];
        
        visited.add(startUserId);
        
        const directReferrals = users.filter(u => u.referred_by === startUserId);
        let chain = [];
        
        directReferrals.forEach(referral => {
          chain.push({
            ...referral,
            level: level,
            referrer_id: startUserId
          });
          
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const subChain = findReferralChain(referral.id, users, level + 1, visited);
          chain.push(...subChain);
        });
        
        return chain;
      }
      
      const referralChain = findReferralChain(userId, allUsers);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
      const partnersByLevel = {};
      referralChain.forEach(partner => {
        if (!partnersByLevel[partner.level]) {
          partnersByLevel[partner.level] = [];
        }
        partnersByLevel[partner.level].push(partner);
      });
      
      console.log('üìä –ü–ê–†–¢–ù–ï–†–´ –ü–û –£–†–û–í–ù–Ø–ú:');
      for (let level = 1; level <= 20; level++) {
        const partners = partnersByLevel[level] || [];
        const activeUni = partners.filter(p => p.uni_farming_active === true).length;
        const activeTon = partners.filter(p => p.ton_boost_package && p.ton_boost_package > 0).length;
        
        if (partners.length > 0) {
          console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${partners.length} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ | UNI —Ñ–∞—Ä–º–∏–Ω–≥: ${activeUni} | TON Boost: ${activeTon}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
          partners.slice(0, 3).forEach((partner, idx) => {
            console.log(`     ${idx + 1}. ${partner.username} (ID: ${partner.id}) | –ë–∞–ª–∞–Ω—Å—ã: ${partner.balance_uni} UNI, ${partner.balance_ton} TON`);
          });
          
          if (partners.length > 3) {
            console.log(`     ... –∏ –µ—â–µ ${partners.length - 3} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤`);
          }
        } else {
          console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: 0 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤`);
        }
      }
      
      console.log(`\nüìà –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${referralChain.length} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ ${Object.keys(partnersByLevel).length} —É—Ä–æ–≤–Ω—è—Ö`);
      
      // 3. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï JSON –î–õ–Ø API
      console.log('\nüìã 3. JSON –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø API:');
      console.log('-'.repeat(50));
      
      const apiResponse = {
        success: true,
        data: {
          user_id: userId,
          username: "demo_user",
          total_referrals: referralChain.length,
          referral_counts: {},
          level_income: levelIncome,
          referrals: referralChain
        }
      };
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
      for (let level = 1; level <= 20; level++) {
        apiResponse.data.referral_counts[level] = partnersByLevel[level]?.length || 0;
      }
      
      console.log('‚úÖ JSON –¥–ª—è /api/v2/referrals/stats:');
      console.log(JSON.stringify(apiResponse, null, 2));
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', usersError?.message);
    }
    
  } else {
    console.log('üìù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n' + '='.repeat(70));
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ó–ê–í–ï–†–®–ï–ù–û');
}

testReferralAPI().catch(console.error);