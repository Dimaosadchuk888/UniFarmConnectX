#!/usr/bin/env node

/**
 * –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í –í –ü–†–û–î–ê–ö–®–ù –°–ò–°–¢–ï–ú–ï
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –º–µ–∂–¥—É "–≤—á–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–ª–æ" –∏ "—Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function fullProductionDiagnostic() {
  console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í –í –ü–†–û–î–ê–ö–®–ù –°–ò–°–¢–ï–ú–ï');
  console.log('='.repeat(80));
  console.log(`üìÖ –î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${new Date().toLocaleString('ru-RU')}`);
  console.log('='.repeat(80));

  // 1. –ê–ù–ê–õ–ò–ó TON –î–ï–ü–û–ó–ò–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 3 –î–ù–Ø
  console.log('\nüìä 1. –ê–ù–ê–õ–ò–ó TON –î–ï–ü–û–ó–ò–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 3 –î–ù–Ø');
  console.log('-'.repeat(60));
  
  const threeDaysAgo = new Date();
  threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
  
  // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const { data: tonTransactions, error: tonError } = await supabase
    .from('transactions')
    .select('*')
    .or(`currency.eq.TON,type.ilike.%ton%,type.ilike.%deposit%,source.ilike.%ton%,source.ilike.%deposit%`)
    .gte('created_at', threeDaysAgo.toISOString())
    .order('created_at', { ascending: false });

  if (tonError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError.message);
    return;
  }

  console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 3 –¥–Ω—è: ${tonTransactions.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
  const transactionsByDay = {};
  tonTransactions.forEach(tx => {
    const day = tx.created_at.split('T')[0];
    if (!transactionsByDay[day]) {
      transactionsByDay[day] = [];
    }
    transactionsByDay[day].push(tx);
  });

  Object.keys(transactionsByDay).sort().reverse().forEach(day => {
    const dayTransactions = transactionsByDay[day];
    console.log(`\nüìÖ ${day}: ${dayTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const typeStats = {};
    dayTransactions.forEach(tx => {
      const key = `${tx.type}-${tx.currency}`;
      typeStats[key] = (typeStats[key] || 0) + 1;
    });
    
    Object.entries(typeStats).forEach(([type, count]) => {
      console.log(`   - ${type}: ${count}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–Ω—è
    if (dayTransactions.length > 0) {
      console.log('   –ü—Ä–∏–º–µ—Ä—ã:');
      dayTransactions.slice(0, 3).forEach(tx => {
        console.log(`   ‚Ä¢ ID:${tx.id} Type:${tx.type} Currency:${tx.currency} Amount:${tx.amount_ton || tx.amount_uni} User:${tx.user_id}`);
      });
    }
  });

  // 2. –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í (–ù–ï REFERRAL)
  console.log('\nüí∞ 2. –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í (–ò–°–ö–õ–Æ–ß–ê–Ø REFERRAL)');
  console.log('-'.repeat(60));
  
  const realTonDeposits = tonTransactions.filter(tx => 
    !tx.type.includes('REFERRAL') && 
    (tx.currency === 'TON' || (tx.amount_ton && parseFloat(tx.amount_ton) > 0))
  );
  
  console.log(`üéØ –†–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–Ω–µ referral): ${realTonDeposits.length}`);
  
  if (realTonDeposits.length > 0) {
    console.log('\nüìã –î–ï–¢–ê–õ–ò –†–ï–ê–õ–¨–ù–´–• TON –î–ï–ü–û–ó–ò–¢–û–í:');
    realTonDeposits.forEach(tx => {
      console.log(`‚Ä¢ ID: ${tx.id}`);
      console.log(`  –î–∞—Ç–∞: ${tx.created_at}`);
      console.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tx.user_id}`);
      console.log(`  –¢–∏–ø: ${tx.type}`);
      console.log(`  –í–∞–ª—é—Ç–∞: ${tx.currency}`);
      console.log(`  –°—É–º–º–∞: ${tx.amount_ton} TON`);
      console.log(`  –°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`  –ò—Å—Ç–æ—á–Ω–∏–∫: ${tx.source || 'N/A'}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || 'N/A'}`);
      console.log('  ---');
    });
  } else {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –†–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ù–ï –ù–ê–ô–î–ï–ù–û –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è!');
  }

  // 3. –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON –ë–ê–õ–ê–ù–°–û–ú –ù–û –ë–ï–ó –î–ï–ü–û–ó–ò–¢–û–í
  console.log('\nüîç 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON –ë–ê–õ–ê–ù–°–û–ú –ù–û –ë–ï–ó –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('-'.repeat(60));
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º > 0
  const { data: usersWithTonBalance, error: usersError } = await supabase
    .from('users')
    .select('id, username, balance_ton')
    .gt('balance_ton', 0)
    .order('balance_ton', { ascending: false })
    .limit(20);

  if (usersError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
    return;
  }

  console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º > 0: ${usersWithTonBalance.length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö TON –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
  for (const user of usersWithTonBalance.slice(0, 10)) {
    const userTonTransactions = tonTransactions.filter(tx => 
      tx.user_id === user.id && !tx.type.includes('REFERRAL')
    );
    
    const status = userTonTransactions.length > 0 ? '‚úÖ' : '‚ùå';
    console.log(`${status} User #${user.id} (@${user.username || 'N/A'}): ${user.balance_ton} TON, –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${userTonTransactions.length}`);
    
    if (userTonTransactions.length === 0 && parseFloat(user.balance_ton) > 0.01) {
      console.log(`   üö® –ê–ù–û–ú–ê–õ–ò–Ø: –ë–∞–ª–∞–Ω—Å ${user.balance_ton} TON –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –¥–µ–ø–æ–∑–∏—Ç–æ–≤!`);
    }
  }

  // 4. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï (–ø–æ –¥–∞—Ç–∞–º —Ñ–∞–π–ª–æ–≤)
  console.log('\nüîß 4. –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –°–ò–°–¢–ï–ú–ï');
  console.log('-'.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const keyFiles = [
    'modules/wallet/service.ts',
    'core/BalanceManager.ts', 
    'core/UnifiedTransactionService.ts',
    'core/TransactionService.ts'
  ];

  for (const file of keyFiles) {
    try {
      const fs = await import('fs');
      const stats = fs.statSync(file);
      const modTime = stats.mtime.toLocaleString('ru-RU');
      console.log(`üìÑ ${file}: –∏–∑–º–µ–Ω–µ–Ω ${modTime}`);
    } catch (error) {
      console.log(`‚ùå ${file}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }

  // 5. –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ processTonDeposit –§–£–ù–ö–¶–ò–ò
  console.log('\n‚öôÔ∏è 5. –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ò processTonDeposit');
  console.log('-'.repeat(60));
  
  try {
    const fs = await import('fs');
    const walletServiceCode = fs.readFileSync('modules/wallet/service.ts', 'utf8');
    
    // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é processTonDeposit
    const processTonDepositMatch = walletServiceCode.match(/processTonDeposit[\s\S]*?(?=export|async function|\n\n)/);
    
    if (processTonDepositMatch) {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è processTonDeposit –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç –ª–∏ –æ–Ω–∞ createTransaction
      const hasCreateTransaction = processTonDepositMatch[0].includes('createTransaction');
      const hasUnifiedTransaction = processTonDepositMatch[0].includes('UnifiedTransactionService');
      
      console.log(`üìù –í—ã–∑—ã–≤–∞–µ—Ç createTransaction: ${hasCreateTransaction ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedTransactionService: ${hasUnifiedTransaction ? '‚úÖ' : '‚ùå'}`);
      
      if (!hasCreateTransaction && !hasUnifiedTransaction) {
        console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: processTonDeposit –ù–ï —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!');
      }
    } else {
      console.log('‚ùå –§—É–Ω–∫—Ü–∏—è processTonDeposit –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:', error.message);
  }

  // 6. –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
  console.log('\nüèÅ –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï');
  console.log('='.repeat(60));
  
  const hasRealDeposits = realTonDeposits.length > 0;
  const hasUsersWithBalance = usersWithTonBalance.length > 0;
  const anomalyUsers = usersWithTonBalance.filter(u => parseFloat(u.balance_ton) > 0.01).length;
  
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:`);
  console.log(`   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 3 –¥–Ω—è: ${realTonDeposits.length}`);
  console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º: ${usersWithTonBalance.length}`);
  console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${anomalyUsers}`);
  
  if (!hasRealDeposits && hasUsersWithBalance) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–´–ô –í–´–í–û–î:');
    console.log('   –°–ò–°–¢–ï–ú–ê –ù–ï –°–û–ó–î–ê–ï–¢ –ó–ê–ü–ò–°–ò TON –î–ï–ü–û–ó–ò–¢–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!');
    console.log('   –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.');
    console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ processTonDeposit.');
  } else if (hasRealDeposits) {
    console.log('\n‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢:');
    console.log('   TON –¥–µ–ø–æ–∑–∏—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
    console.log('   –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.');
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ù:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
  console.log('2. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  console.log('3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å processTonDeposit –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏');
  console.log('4. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ staging –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  console.log('='.repeat(80));
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
fullProductionDiagnostic().catch(console.error);