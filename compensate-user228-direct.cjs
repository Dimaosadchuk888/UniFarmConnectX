/**
 * –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø USER 228 - –ü—Ä—è–º–æ–µ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ –≤ –¥—Ä—É–≥–∏—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase –∫–ª–∏–µ–Ω—Ç –∏–∑ core
async function compensateUser228() {
  console.log('üí∞ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø USER 228 - –ü–û–¢–ï–†–Ø–ù–ù–´–ô TON –î–ï–ü–û–ó–ò–¢');
  console.log('=' + '='.repeat(50));
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase —á–µ—Ä–µ–∑ require
    const { supabase } = require('./dist/core/supabase.js');
    
    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User 228
    const { data: user228, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton')
      .eq('id', 228)
      .single();

    if (userError || !user228) {
      console.log('‚ùå User 228 –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return;
    }

    console.log('üë§ –ù–ê–ô–î–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:');
    console.log(`   ID: ${user228.id}`);
    console.log(`   Telegram ID: ${user228.telegram_id}`);
    console.log(`   Username: ${user228.username || 'N/A'}`);
    console.log(`   –¢–µ–∫—É—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${parseFloat(user228.balance_ton).toFixed(6)} TON`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–∞ –ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–∞
    const { data: existingCompensation } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 228)
      .eq('type', 'FARMING_REWARD')
      .ilike('description', '%–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è%d1077cd0%')
      .limit(1);

    if (existingCompensation && existingCompensation.length > 0) {
      console.log('‚ö†Ô∏è –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–ñ–ï –í–´–ü–õ–ê–ß–ï–ù–ê');
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${existingCompensation[0].id}`);
      console.log(`   –î–∞—Ç–∞: ${existingCompensation[0].created_at}`);
      console.log(`   –°—É–º–º–∞: ${existingCompensation[0].amount} TON`);
      return;
    }

    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –í–´–ü–û–õ–ù–Ø–ï–ú –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Æ');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const compensationAmount = 1.0;
    const description = '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–∞ d1077cd0 –∏–∑-–∑–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º—ã User 249';
    
    const { data: transaction, error: transactionError } = await supabase
      .from('transactions')
      .insert({
        user_id: 228,
        type: 'FARMING_REWARD',
        amount: compensationAmount.toString(),
        currency: 'TON',
        description: description,
        metadata: {
          compensation: true,
          original_transaction: 'd1077cd0',
          fraud_case: 'User_249_scheme',
          compensation_date: new Date().toISOString(),
          authorized_by: 'system_admin',
          reason: 'Lost TON deposit due to fraudulent referral scheme'
        }
      })
      .select()
      .single();

    if (transactionError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError.message);
      return;
    }

    console.log('\nüìù –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ê:');
    console.log(`   ID: ${transaction.id}`);
    console.log(`   –°—É–º–º–∞: ${transaction.amount} ${transaction.currency}`);
    console.log(`   –î–∞—Ç–∞: ${transaction.created_at}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = parseFloat(user228.balance_ton) + compensationAmount;
    const { error: balanceError } = await supabase
      .from('users')
      .update({ balance_ton: newBalance.toString() })
      .eq('id', 228);

    if (balanceError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError.message);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await supabase.from('transactions').delete().eq('id', transaction.id);
      console.log('üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–∞');
      return;
    }

    console.log('\nüí∞ –ë–ê–õ–ê–ù–° –û–ë–ù–û–í–õ–ï–ù:');
    console.log(`   –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${parseFloat(user228.balance_ton).toFixed(6)} TON`);
    console.log(`   –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: +${compensationAmount.toFixed(6)} TON`);
    console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(6)} TON`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const { data: updatedUser } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', 228)
      .single();

    if (updatedUser) {
      console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${parseFloat(updatedUser.balance_ton).toFixed(6)} TON`);
    }

    console.log('\nüéâ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –í–´–ü–õ–ê–ß–ï–ù–ê!');
    console.log('üìã –ò–¢–û–ì–ò:');
    console.log(`   ‚úÖ User 228 –ø–æ–ª—É—á–∏–ª 1.0 TON –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é`);
    console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${transaction.id}`);
    console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    console.log(`   ‚úÖ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);

  } catch (error) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('üõë –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  }
}

console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò –ß–ï–†–ï–ó 3 –°–ï–ö–£–ù–î–´...');
console.log('üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');

setTimeout(compensateUser228, 3000);