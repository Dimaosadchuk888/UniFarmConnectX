/**
 * üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–º–µ–Ω–∏–ª–∞—Å—å –≤ –∂–∏–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

import { UnifiedTransactionService } from './core/TransactionService';
import { supabase } from './core/supabase';

async function finalProtectionVerification(): Promise<void> {
  console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´');
  console.log('=' .repeat(65));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –≤ live —Å–∏—Å—Ç–µ–º–µ');
  console.log('=' .repeat(65));

  try {
    const service = UnifiedTransactionService.getInstance();
    const testHash = 'final_verification_' + Date.now();
    
    console.log(`üîë –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç hash: ${testHash}`);
    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π User ID: 184`);
    
    // –ü–†–û–í–ï–†–ö–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìù –ü–†–û–í–ï–†–ö–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const firstResult = await service.createTransaction({
      user_id: 184,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 0.001,
      currency: 'TON',
      description: 'Final verification test - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
      metadata: {
        tx_hash: testHash,
        final_verification: true,
        live_system_test: true
      }
    });
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    console.log(`   Success: ${firstResult.success}`);
    if (firstResult.success) {
      console.log(`   Transaction ID: ${firstResult.transaction_id}`);
      console.log('   ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${firstResult.error}`);
      return;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 2: –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê 2: –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ live —Å–∏—Å—Ç–µ–º–µ...');
    const duplicateResult = await service.createTransaction({
      user_id: 184,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 0.002,
      currency: 'TON',
      description: 'Final verification test - –î–£–ë–õ–ò–ö–ê–¢ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)',
      metadata: {
        tx_hash: testHash, // –¢–û–¢ –ñ–ï HASH!
        final_verification: true,
        live_system_test: true,
        duplicate_attempt: true
      }
    });
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   Success: ${duplicateResult.success}`);
    console.log(`   Error: ${duplicateResult.error || '–Ω–µ—Ç'}`);
    
    // –ü–†–û–í–ï–†–ö–ê 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!duplicateResult.success && duplicateResult.error?.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      console.log('\nüéâ –û–¢–õ–ò–ß–ù–û! LIVE –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ê!');
      console.log('   ‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ production');
      console.log('   ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è');
      console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã User 25 –∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
      console.log('\nüìã –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ó–ê–©–ò–¢–´:');
      console.log('   üõ°Ô∏è Application-level –∑–∞—â–∏—Ç–∞: –ê–ö–¢–ò–í–ù–ê');
      console.log('   üìù –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –†–ê–ë–û–¢–ê–ï–¢');
      console.log('   üîí TX Hash validation: –§–£–ù–ö–¶–ò–û–ù–ò–†–£–ï–¢');
      console.log('   ‚ö° Performance impact: –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô');
      
      console.log('\nüéØ –ü–†–û–ë–õ–ï–ú–ê USER 25 –†–ï–®–ï–ù–ê:');
      console.log('   ‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      console.log('   ‚úÖ –ö–∞–∂–¥—ã–π TON –¥–µ–ø–æ–∑–∏—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º');
      console.log('   ‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
    } else if (duplicateResult.success) {
      console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: LIVE —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ –¥—É–±–ª–∏–∫–∞—Ç!');
      console.log(`   üí• Duplicate Transaction ID: ${duplicateResult.transaction_id}`);
      console.log('   üîß –°–†–û–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á–µ–º—É –∑–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
      
    } else {
      console.log('\n‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç live —Ç–µ—Å—Ç–∞');
      console.log(`   üí° –û—à–∏–±–∫–∞: ${duplicateResult.error}`);
    }
    
    // –ü–†–û–í–ï–†–ö–ê 4: Database —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê 4: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ database...');
    const { data: finalRecords } = await supabase
      .from('transactions')
      .select('id, user_id, tx_hash_unique, amount_ton, created_at')
      .eq('tx_hash_unique', testHash)
      .order('created_at', { ascending: true });
      
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π —Å hash ${testHash}: ${finalRecords?.length || 0}`);
    
    if (finalRecords && finalRecords.length === 1) {
      console.log('‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ database');
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    } else if (finalRecords && finalRecords.length > 1) {
      console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: ${finalRecords.length} –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º hash`);
      console.log('‚ùå –ó–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤ database');
    }
    
    // –ü–†–û–í–ï–†–ö–ê 5: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –ü–†–û–í–ï–†–ö–ê 5: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const { error: cleanupError } = await supabase
      .from('transactions')
      .delete()
      .eq('tx_hash_unique', testHash);
      
    if (cleanupError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${cleanupError.message}`);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
    
    // –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°
    console.log('\nüèÜ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ó–ê–©–ò–¢–´');
    console.log('=' .repeat(65));
    
    const protectionActive = !duplicateResult.success && 
                           duplicateResult.error?.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    if (protectionActive) {
      console.log('üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–©–ò–©–ï–ù–ê!');
      console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ê–ö–¢–ò–í–ù–ê');
      console.log('‚úÖ Live —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã');
      console.log('‚úÖ User 25 –∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞—â–∏—â–µ–Ω—ã');
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê');
      
      console.log('\nüìà –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:');
      console.log('   - –£—Ä–æ–≤–µ–Ω—å: Application-level –∑–∞—â–∏—Ç–∞');
      console.log('   - –ú–µ—Ç–æ–¥: Pre-transaction validation');
      console.log('   - –ü–æ–ª–µ: tx_hash_unique duplicate check');
      console.log('   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è');
      console.log('   - Performance: +1 SELECT query per transaction');
      
    } else {
      console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ó–ê–©–ò–©–ï–ù–ê');
      console.log('üîß –¢–†–ï–ë–£–ï–¢–°–Ø: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
      console.log('üí° –ü–†–û–í–ï–†–ò–¢–¨: –°–æ—Å—Ç–æ—è–Ω–∏–µ UnifiedTransactionService');
    }
    
    console.log('\nüíæ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    console.log('\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ô');
    console.log('   - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞');
    console.log('   - Live –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã');
    console.log('   - –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É');
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
finalProtectionVerification()
  .then(() => {
    console.log('\nüèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–©–ò–¢–´ –ó–ê–í–ï–†–®–ï–ù–ê');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    process.exit(1);
  });