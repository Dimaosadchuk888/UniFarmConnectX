import { supabase } from './core/supabase.js';

async function checkDbTransactionEnum() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ enum —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î ===\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–∫–∞—Ç
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n');
    
    const typesToCheck = [
      'FARMING_REWARD',
      'REFERRAL_REWARD', 
      'MISSION_REWARD',
      'DAILY_BONUS',
      'TON_BOOST_INCOME',
      'farming_income',
      'ton_boost_reward'
    ];

    for (const type of typesToCheck) {
      const { error } = await supabase
        .from('transactions')
        .insert({
          user_id: 9999, // —Ç–µ—Å—Ç–æ–≤—ã–π ID
          type: type,
          amount: '0.001',
          amount_uni: '0',
          amount_ton: '0.001',
          currency: 'TON',
          status: 'test',
          description: 'Test transaction type'
        });

      if (error) {
        if (error.message.includes('invalid input value for enum')) {
          console.log(`‚ùå ${type} - –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
        } else {
          console.log(`‚ùì ${type} - –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        }
      } else {
        console.log(`‚úÖ ${type} - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await supabase
          .from('transactions')
          .delete()
          .eq('user_id', 9999)
          .eq('status', 'test');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    console.log('\nüìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç:');
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
    
    const { data: recentTx } = await supabase
      .from('transactions')
      .select('type, count')
      .gte('created_at', thirtyMinutesAgo)
      .order('type');

    if (recentTx) {
      const types = recentTx.reduce((acc, tx) => {
        acc[tx.type] = (acc[tx.type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      Object.entries(types).forEach(([type, count]) => {
        console.log(`- ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkDbTransactionEnum().catch(console.error);