// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï FARMING_BALANCE –î–õ–Ø TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// –ó–∞–ø–æ–ª–Ω—è–µ–º farming_balance –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface DepositAnalysis {
  user_id: number;
  current_farming_balance: string;
  total_ton_deposits: number;
  total_boost_purchases: number;
  calculated_farming_balance: number;
  needs_update: boolean;
}

async function analyzeAndFixFarmingBalances(): Promise<void> {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï FARMING_BALANCE –î–õ–Ø TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('='.repeat(80));

  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost
  const { data: activeBoostUsers, error: boostError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('boost_active', true);

  if (boostError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${boostError.message}`);
    return;
  }

  console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${activeBoostUsers?.length || 0}`);

  if (!activeBoostUsers || activeBoostUsers.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return;
  }

  const analyses: DepositAnalysis[] = [];
  let totalFixed = 0;
  let totalSkipped = 0;

  // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const user of activeBoostUsers) {
    try {
      console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}:`);
      console.log(`   –¢–µ–∫—É—â–∏–π farming_balance: ${user.farming_balance}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: deposits, error: depositsError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', parseInt(user.user_id))
        .in('type', ['TON_DEPOSIT', 'DEPOSIT', 'BOOST_PURCHASE'])
        .eq('status', 'completed')
        .order('created_at', { ascending: true });

      if (depositsError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositsError.message}`);
        continue;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      let totalTonDeposits = 0;
      let totalBoostPurchases = 0;

      if (deposits && deposits.length > 0) {
        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${deposits.length}`);
        
        for (const deposit of deposits) {
          const amount = parseFloat(deposit.amount_ton || '0');
          
          if (deposit.type === 'BOOST_PURCHASE' || 
              (deposit.metadata && 
               (typeof deposit.metadata === 'string' ? 
                JSON.parse(deposit.metadata).original_type === 'TON_BOOST_PURCHASE' :
                deposit.metadata.original_type === 'TON_BOOST_PURCHASE'))) {
            totalBoostPurchases += amount;
            console.log(`      BOOST_PURCHASE: ${amount} TON (${deposit.created_at.substring(0, 10)})`);
          } else if (deposit.type === 'TON_DEPOSIT' || deposit.type === 'DEPOSIT') {
            totalTonDeposits += amount;
            console.log(`      ${deposit.type}: ${amount} TON (${deposit.created_at.substring(0, 10)})`);
          }
        }
      } else {
        console.log(`   ‚ö†Ô∏è –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π farming_balance
      const calculatedBalance = totalTonDeposits + totalBoostPurchases;
      const currentBalance = parseFloat(user.farming_balance || '0');
      const needsUpdate = Math.abs(calculatedBalance - currentBalance) > 0.000001;

      console.log(`   üí∞ TON –¥–µ–ø–æ–∑–∏—Ç—ã: ${totalTonDeposits.toFixed(6)} TON`);
      console.log(`   üéØ Boost –ø–æ–∫—É–ø–∫–∏: ${totalBoostPurchases.toFixed(6)} TON`);
      console.log(`   üìä –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${calculatedBalance.toFixed(6)} TON`);
      console.log(`   üìà –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(6)} TON`);
      console.log(`   ${needsUpdate ? 'üîß –¢–†–ï–ë–£–ï–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø' : '‚úÖ –ö–û–†–†–ï–ö–¢–ï–ù'}`);

      const analysis: DepositAnalysis = {
        user_id: parseInt(user.user_id),
        current_farming_balance: user.farming_balance,
        total_ton_deposits: totalTonDeposits,
        total_boost_purchases: totalBoostPurchases,
        calculated_farming_balance: calculatedBalance,
        needs_update: needsUpdate
      };

      analyses.push(analysis);

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (needsUpdate && calculatedBalance > 0) {
        console.log(`   üîß –û–±–Ω–æ–≤–ª—è–µ–º farming_balance: ${currentBalance} ‚Üí ${calculatedBalance}`);
        
        const { error: updateError } = await supabase
          .from('ton_farming_data')
          .update({
            farming_balance: calculatedBalance.toString(),
            updated_at: new Date().toISOString()
          })
          .eq('user_id', user.user_id);

        if (updateError) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateError.message}`);
        } else {
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
          totalFixed++;
          
          // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await supabase
            .from('users')
            .update({
              ton_farming_balance: calculatedBalance.toString()
            })
            .eq('id', parseInt(user.user_id));
        }
      } else if (calculatedBalance === 0) {
        console.log(`   ‚ö†Ô∏è –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º`);
        totalSkipped++;
      } else {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
      }

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}: ${error}`);
    }
  }

  // 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '='.repeat(80));
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('='.repeat(80));

  console.log(`üë• –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${analyses.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${totalFixed}`);
  console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤): ${totalSkipped}`);
  console.log(`‚úÖ –£–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: ${analyses.length - totalFixed - totalSkipped}`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const withBalance = analyses.filter(a => a.calculated_farming_balance > 0);
  const withoutBalance = analyses.filter(a => a.calculated_farming_balance === 0);

  console.log(`\nüìà –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò (${withBalance.length}):`);
  withBalance.forEach(user => {
    console.log(`   User ${user.user_id}: ${user.calculated_farming_balance.toFixed(6)} TON`);
  });

  if (withoutBalance.length > 0) {
    console.log(`\n‚ö†Ô∏è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–ï–ó –î–ï–ü–û–ó–ò–¢–û–í (${withoutBalance.length}):`);
    withoutBalance.forEach(user => {
      console.log(`   User ${user.user_id}: 0 TON (–±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º)`);
    });
  }

  // 5. –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log(`\nüí∞ –ü–†–û–ì–ù–û–ó –î–û–•–û–î–ù–û–°–¢–ò TON BOOST:`);
  
  let totalDailyIncome = 0;
  let activeFarmers = 0;

  for (const user of withBalance) {
    if (user.calculated_farming_balance > 0) {
      const dailyRate = 0.01; // 1% –≤ –¥–µ–Ω—å
      const dailyIncome = user.calculated_farming_balance * dailyRate;
      const fiveMinIncome = dailyIncome / 288;
      
      if (fiveMinIncome > 0.00001) {
        totalDailyIncome += dailyIncome;
        activeFarmers++;
      }
    }
  }

  console.log(`üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤ TON Boost: ${activeFarmers}`);
  console.log(`üíµ –û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${totalDailyIncome.toFixed(6)} TON`);
  console.log(`‚è∞ –î–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç: ${(totalDailyIncome / 288).toFixed(8)} TON`);
  console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å: ${activeFarmers * 288} —à—Ç—É–∫`);

  if (totalFixed > 0) {
    console.log(`\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –Ω–∞–≥—Ä–∞–¥—ã ${totalFixed} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç`);
  }
}

async function verifyPlannerWillWork(): Promise<void> {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê');
  console.log('='.repeat(50));

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const { data: activeUsers, error } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('boost_active', true);

  if (error || !activeUsers) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    return;
  }

  let willProcess = 0;
  let willSkip = 0;

  for (const user of activeUsers) {
    const farmingBalance = parseFloat(user.farming_balance || '0');
    const dailyRate = 0.01;
    const fiveMinIncome = (farmingBalance * dailyRate) / 288;

    if (fiveMinIncome > 0.00001) {
      willProcess++;
    } else {
      willSkip++;
    }
  }

  console.log(`‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å: ${willProcess} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å: ${willSkip} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((willProcess / activeUsers.length) * 100).toFixed(1)}%`);

  if (willProcess > 0) {
    console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!`);
  } else {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã`);
  }
}

async function main(): Promise<void> {
  console.log('üîß –°–ò–°–¢–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TON BOOST FARMING_BALANCE');
  console.log('='.repeat(80));
  console.log('–î–∞—Ç–∞:', new Date().toISOString());
  console.log('–¶–µ–ª—å: –ò—Å–ø—Ä–∞–≤–∏—Ç—å farming_balance –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('');

  await analyzeAndFixFarmingBalances();
  await verifyPlannerWillWork();

  console.log('\nüèÅ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å –Ω–∞–≥—Ä–∞–¥—ã');
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
main().catch(console.error);