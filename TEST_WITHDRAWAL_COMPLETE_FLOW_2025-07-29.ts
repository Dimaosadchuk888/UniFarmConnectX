#!/usr/bin/env tsx

/**
 * –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ó–ê–Ø–í–û–ö –ù–ê –í–´–í–û–î
 * –î–∞—Ç–∞: 29 –∏—é–ª—è 2025
 * 
 * –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å withdrawal —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
 */

import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000/api/v2';

console.log('üîç –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ó–ê–Ø–í–û–ö –ù–ê –í–´–í–û–î');
console.log('='.repeat(70));

async function testWithdrawalFlow() {
  console.log('\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –æ—à–∏–±–æ–∫ –ø—Ä–∏ withdrawal...');
  
  // –¢–µ—Å—Ç 1: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
  console.log('\nüìù –¢–µ—Å—Ç 1: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
  try {
    const response = await fetch(`${API_BASE}/wallet/withdraw`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer invalid_jwt_token'
      },
      body: JSON.stringify({
        amount: '1',
        wallet_address: 'EQDummyTestAddress123',
        currency: 'TON'
      })
    });
    
    const data = await response.json() as any;
    console.log(`Status: ${response.status}`);
    console.log(`Response:`, JSON.stringify(data, null, 2));
    
    if (response.status === 401 && 
        (data.error?.includes('Invalid') || data.error?.includes('Authentication') || data.need_new_token)) {
      console.log('‚úÖ –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ JWT');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ JWT:', error);
    return false;
  }

  // –¢–µ—Å—Ç 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π JWT —Ç–æ–∫–µ–Ω
  console.log('\nüìù –¢–µ—Å—Ç 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π JWT —Ç–æ–∫–µ–Ω');
  try {
    const response = await fetch(`${API_BASE}/wallet/withdraw`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        amount: '1',
        wallet_address: 'EQDummyTestAddress123',
        currency: 'TON'
      })
    });
    
    const data = await response.json() as any;
    console.log(`Status: ${response.status}`);
    console.log(`Response:`, JSON.stringify(data, null, 2));
    
    if (response.status === 401 && data.need_jwt_token) {
      console.log('‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π JWT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ JWT');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ JWT:', error);
    return false;
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint balance (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç)
  console.log('\nüìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint balance');
  try {
    const response = await fetch(`${API_BASE}/wallet/balance`, {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer invalid_jwt_token'
      }
    });
    
    const data = await response.json() as any;
    console.log(`Status: ${response.status}`);
    console.log(`Response:`, JSON.stringify(data, null, 2));
    
    if (response.status === 401) {
      console.log('‚úÖ Balance endpoint —Ç–æ–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JWT –æ—à–∏–±–∫–∏');
    } else {
      console.log('‚ö†Ô∏è Balance endpoint –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ balance endpoint:', error);
  }

  return true;
}

async function testServerResponsiveness() {
  console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    const response = await fetch(`${API_BASE}/health`, {
      method: 'GET'
    });
    
    if (response.status === 404) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (endpoint /health –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      return true;
    } else {
      console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
      return true;
    }
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', error);
    return false;
  }
}

async function main() {
  const serverOk = await testServerResponsiveness();
  
  if (!serverOk) {
    console.log('\n‚ùå –°–ï–†–í–ï–† –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º withdrawal');
    return;
  }
  
  const withdrawalTests = await testWithdrawalFlow();
  
  console.log('\n' + '='.repeat(70));
  console.log('üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`–°–µ—Ä–≤–µ—Ä: ${serverOk ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
  console.log(`JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${withdrawalTests ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê' : '‚ùå –ü–†–û–ë–õ–ï–ú–´'}`);
  
  if (withdrawalTests) {
    console.log('\nüéâ –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î –¢–ï–ü–ï–†–¨ –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥—è—Ç "Network Error"');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('‚úÖ Frontend –º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('\nüí° –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log('‚Ä¢ –ü—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º JWT —Ç–æ–∫–µ–Ω–µ - —á–µ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º —Ç–æ–∫–µ–Ω–µ - –ø–æ–Ω—è—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∑–∞–ø—É—Ç—ã–≤–∞—é—â–∏—Ö "Network Error" —Å–æ–æ–±—â–µ–Ω–∏–π');
  } else {
    console.log('\n‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
    console.log('–°–∏—Å—Ç–µ–º–∞ withdrawal –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
  }
}

main().catch(console.error);