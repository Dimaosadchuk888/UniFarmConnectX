/**
 * –°–ö–†–ò–ü–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø TON –ë–ê–õ–ê–ù–°–û–í
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç balance_ton –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';

async function fixTonBalances() {
  console.log('=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï TON –ë–ê–õ–ê–ù–°–û–í ===');
  console.log('–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ' + new Date().toISOString());
  console.log('');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    console.log('1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏...');
    
    const { data: usersWithTonTx, error: queryError } = await supabase
      .from('transactions')
      .select('user_id')
      .eq('currency', 'TON')
      .order('user_id');
    
    if (queryError) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${queryError.message}`);
    }
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id
    const uniqueUserIds = [...new Set(usersWithTonTx?.map(t => t.user_id) || [])];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueUserIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏\n`);
    
    // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    const fixResults = [];
    
    for (const userId of uniqueUserIds) {
      console.log(`\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}:`);
      console.log('‚îÄ'.repeat(40));
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const { data: user } = await supabase
        .from('users')
        .select('id, username, balance_ton')
        .eq('id', userId)
        .single();
      
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }
      
      const currentBalance = parseFloat(user.balance_ton || '0');
      console.log(`–¢–µ–∫—É—â–∏–π balance_ton: ${currentBalance}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: transactions } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userId)
        .eq('currency', 'TON')
        .order('created_at');
      
      if (!transactions || transactions.length === 0) {
        console.log('–ù–µ—Ç TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        continue;
      }
      
      // –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      let calculatedBalance = 0;
      let deposits = 0;
      let withdrawals = 0;
      let rewards = 0;
      
      for (const tx of transactions) {
        const amount = parseFloat(tx.amount || '0');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (tx.type === 'TON_DEPOSIT' || tx.type === 'DEPOSIT') {
          deposits += amount;
          calculatedBalance += amount;
        } else if (tx.type === 'TON_WITHDRAWAL' || tx.type === 'WITHDRAWAL' || tx.type === 'withdrawal') {
          withdrawals += amount;
          calculatedBalance -= amount;
        } else if (tx.type === 'FARMING_REWARD' || tx.type === 'REFERRAL_REWARD' || 
                   tx.type === 'DAILY_BONUS' || tx.type === 'MISSION_REWARD') {
          rewards += amount;
          calculatedBalance += amount;
        } else if (tx.type === 'withdrawal_fee') {
          // –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥
          calculatedBalance -= amount;
        }
      }
      
      // –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      calculatedBalance = Math.max(0, calculatedBalance);
      
      console.log(`\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      console.log(`  ‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã: ${deposits} TON`);
      console.log(`  ‚Ä¢ –í—ã–≤–æ–¥—ã: ${withdrawals} TON`);
      console.log(`  ‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã: ${rewards} TON`);
      console.log(`  ‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${calculatedBalance} TON`);
      console.log(`  ‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î: ${currentBalance} TON`);
      
      const difference = calculatedBalance - currentBalance;
      
      if (Math.abs(difference) > 0.000001) {
        console.log(`\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${difference > 0 ? '+' : ''}${difference.toFixed(6)} TON`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const { error: updateError } = await supabase
          .from('users')
          .update({ 
            balance_ton: calculatedBalance,
            updated_at: new Date().toISOString()
          })
          .eq('id', userId);
        
        if (updateError) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateError.message}`);
          fixResults.push({
            userId,
            status: 'error',
            error: updateError.message
          });
        } else {
          console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${calculatedBalance} TON`);
          fixResults.push({
            userId,
            status: 'fixed',
            oldBalance: currentBalance,
            newBalance: calculatedBalance,
            difference
          });
        }
      } else {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`);
        fixResults.push({
          userId,
          status: 'ok',
          balance: currentBalance
        });
      }
    }
    
    // 3. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(50));
    console.log('–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('='.repeat(50));
    
    const fixed = fixResults.filter(r => r.status === 'fixed');
    const ok = fixResults.filter(r => r.status === 'ok');
    const errors = fixResults.filter(r => r.status === 'error');
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixed.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`  ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ: ${ok.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`  ‚Ä¢ –û—à–∏–±–∫–∏: ${errors.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    if (fixed.length > 0) {
      console.log(`\nüí∞ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:`);
      let totalRecovered = 0;
      for (const fix of fixed) {
        console.log(`  User ${fix.userId}: ${fix.oldBalance} ‚Üí ${fix.newBalance} TON (${fix.difference > 0 ? '+' : ''}${fix.difference.toFixed(6)})`);
        if (fix.difference > 0) {
          totalRecovered += fix.difference;
        }
      }
      console.log(`\nüíé –í—Å–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${totalRecovered.toFixed(6)} TON`);
    }
    
    if (errors.length > 0) {
      console.log(`\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:`);
      for (const err of errors) {
        console.log(`  User ${err.userId}: ${err.error}`);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º—É
    logger.info('[TON_BALANCE_FIX] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
      fixed: fixed.length,
      ok: ok.length,
      errors: errors.length,
      details: fixResults
    });
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    logger.error('[TON_BALANCE_FIX] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', { error });
  }
  
  console.log('\n=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
fixTonBalances();