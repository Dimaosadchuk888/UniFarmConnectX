/**
 * –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã: –æ–¥–Ω–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–≤–∞–∂–¥—ã
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

const BOC_FROM_USER = "te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKBInUgIq8dqMECzNwPyJ9eQjP329kuNZ3s0H41Z4miUDu4lsRhsaiGoplRRzfR9yKPZUoFjb+vQbut8XmenPdAAFNTRi7RHqnaAAAG7gAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKh3NZQAAAAAAAAAAAAAAAAAABMb2Yz";

async function investigateDuplicateTransactions() {
  console.log('\n=== –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25 ===\n');

  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 25 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', new Date(Date.now() - 24*60*60*1000).toISOString())
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${transactions?.length || 0}`);

    if (!transactions || transactions.length === 0) {
      console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // 2. –ê–Ω–∞–ª–∏–∑ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const tonDeposits = transactions.filter(t => 
      t.type === 'TON_DEPOSIT' || t.type === 'DEPOSIT'
    );

    console.log(`\nüí∞ TON –¥–µ–ø–æ–∑–∏—Ç—ã: ${tonDeposits.length}`);
    
    tonDeposits.forEach((tx, index) => {
      console.log(`\n--- TON –î–µ–ø–æ–∑–∏—Ç ${index + 1} ---`);
      console.log(`ID: ${tx.id}`);
      console.log(`–¢–∏–ø: ${tx.type}`);
      console.log(`–°—É–º–º–∞: ${tx.amount} ${tx.currency}`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${tx.status}`);
      console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log(`TX Hash: ${tx.tx_hash || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`BOC Data: ${tx.boc_data ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      if (tx.boc_data) {
        console.log(`BOC –¥–ª–∏–Ω–∞: ${tx.boc_data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`BOC –Ω–∞—á–∞–ª–æ: ${tx.boc_data.substring(0, 50)}...`);
      }
      console.log(`–°–æ–∑–¥–∞–Ω: ${tx.created_at}`);
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω: ${tx.updated_at}`);
    });

    // 3. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ BOC –¥–∞–Ω–Ω—ã–º
    console.log(`\nüîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í:`);
    
    const bocMatches = tonDeposits.filter(tx => 
      tx.boc_data && tx.boc_data.includes(BOC_FROM_USER.substring(0, 50))
    );

    console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º BOC: ${bocMatches.length}`);

    // 4. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const timeGroups = new Map();
    tonDeposits.forEach(tx => {
      const timeKey = new Date(tx.created_at).getTime();
      const hourKey = Math.floor(timeKey / (5 * 60 * 1000)); // –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 5-–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
      
      if (!timeGroups.has(hourKey)) {
        timeGroups.set(hourKey, []);
      }
      timeGroups.get(hourKey).push(tx);
    });

    console.log(`\n‚è∞ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò (5-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã):`);
    timeGroups.forEach((txs, timeKey) => {
      if (txs.length > 1) {
        console.log(`\nüö® –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –î–£–ë–õ–ò–ö–ê–¢ - –ò–Ω—Ç–µ—Ä–≤–∞–ª ${timeKey}:`);
        txs.forEach(tx => {
          console.log(`  - ID ${tx.id}: ${tx.amount} ${tx.currency} (${tx.created_at})`);
          console.log(`    Hash: ${tx.tx_hash || '–Ω–µ—Ç'}`);
          console.log(`    BOC: ${tx.boc_data ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        });
      }
    });

    // 5. –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Å—É–º–º
    console.log(`\nüíµ –ê–ù–ê–õ–ò–ó –ò–î–ï–ù–¢–ò–ß–ù–´–• –°–£–ú–ú:`);
    const amountGroups = new Map();
    tonDeposits.forEach(tx => {
      const key = `${tx.amount}_${tx.currency}`;
      if (!amountGroups.has(key)) {
        amountGroups.set(key, []);
      }
      amountGroups.get(key).push(tx);
    });

    amountGroups.forEach((txs, amountKey) => {
      if (txs.length > 1) {
        console.log(`\nüîÑ –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—É–º–º–∞ ${amountKey}:`);
        txs.forEach(tx => {
          console.log(`  - ID ${tx.id} (${tx.created_at})`);
        });
      }
    });

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('balance_ton, balance_uni')
      .eq('id', 25)
      .single();

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
    } else {
      console.log(`\nüí∞ –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25:`);
      console.log(`TON: ${user.balance_ton || 0}`);
      console.log(`UNI: ${user.balance_uni || 0}`);
    }

    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüìã –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    console.log(`1. –í—Å–µ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${tonDeposits.length}`);
    console.log(`2. –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${Array.from(timeGroups.values()).filter(txs => txs.length > 1).length}`);
    console.log(`3. –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—É–º–º–µ: ${Array.from(amountGroups.values()).filter(txs => txs.length > 1).length}`);
    
    if (tonDeposits.length > 1) {
      console.log(`\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${tonDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ 1 TON`);
      console.log(`\nüîß –í–ï–†–û–Ø–¢–ù–´–ï –ü–†–ò–ß–ò–ù–´:`);
      console.log(`- –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ BOC, –∏ –ø–æ hash –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ`);
      console.log(`- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫—á–µ–π–Ω —Å–æ–±—ã—Ç–∏–π`);
      console.log(`- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –æ–±–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º`);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
investigateDuplicateTransactions().then(() => {
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});