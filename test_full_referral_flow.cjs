// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testFullReferralFlow() {
  console.log('=== –ü–û–õ–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===');
  
  const testTelegramId = Date.now();
  const testUsername = `test_${testTelegramId}`;
  const refCode = 'REF_1752755835358_yjrusv'; // User 184
  
  console.log('üöÄ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(`   telegram_id: ${testTelegramId}`);
  console.log(`   username: ${testUsername}`);
  console.log(`   ref_code: ${refCode}`);
  
  let newUserId = null;
  
  try {
    // –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    console.log('\n1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º...');
    
    const authResponse = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        direct_registration: true,
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: "Test User",
        refBy: refCode
      })
    });
    
    const authResult = await authResponse.json();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${authResponse.status}`);
    console.log(`   –£—Å–ø–µ—Ö: ${authResult.success}`);
    
    if (!authResult.success) {
      console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', authResult.error);
      return;
    }
    
    newUserId = authResult.data.user.id;
    console.log(`   –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUserId}`);
    console.log(`   referred_by: ${authResult.data.user.referred_by}`);
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î...');
    
    const { data: newUser, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .eq('id', newUserId)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${newUser.id}`);
    console.log(`   telegram_id: ${newUser.telegram_id}`);
    console.log(`   username: ${newUser.username}`);
    console.log(`   referred_by: ${newUser.referred_by}`);
    console.log(`   created_at: ${newUser.created_at}`);
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ referrals
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ referrals...');
    
    const { data: referralRecords, error: referralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUserId);
    
    if (referralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referrals:', referralError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralRecords.length} –∑–∞–ø–∏—Å–µ–π –≤ referrals`);
      
      if (referralRecords.length > 0) {
        referralRecords.forEach(record => {
          console.log(`   –†–µ—Ñ–µ—Ä–∞–ª: user_id=${record.user_id}, inviter_id=${record.inviter_id}, level=${record.level}`);
        });
      }
    }
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ processReferral() –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ processReferral() –Ω–∞–ø—Ä—è–º—É—é...');
    
    const processReferralResponse = await fetch('http://localhost:3000/api/v2/referral/test-process', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        refCode: refCode,
        newUserId: newUserId.toString()
      })
    });
    
    if (processReferralResponse.ok) {
      const processResult = await processReferralResponse.json();
      console.log('‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç processReferral:');
      console.log(`   –£—Å–ø–µ—Ö: ${processResult.success}`);
      console.log(`   –û—à–∏–±–∫–∞: ${processResult.error || '–Ω–µ—Ç'}`);
      console.log(`   Referrer ID: ${processResult.referrerId || '–Ω–µ—Ç'}`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å processReferral –Ω–∞–ø—Ä—è–º—É—é');
    }
    
    // –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\n5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    
    const { data: finalUser, error: finalError } = await supabase
      .from('users')
      .select('referred_by')
      .eq('id', newUserId)
      .single();
    
    if (finalError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalError.message);
    } else {
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ referred_by: ${finalUser.referred_by}`);
    }
    
    const { data: finalReferrals, error: finalReferralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUserId);
    
    if (finalReferralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ referrals:', finalReferralError.message);
    } else {
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ referrals: ${finalReferrals.length}`);
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    
    const success = finalUser.referred_by === 184 && finalReferrals.length > 0;
    
    if (success) {
      console.log('üéâ –£–°–ü–ï–•! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('   –ü—Ä–æ–±–ª–µ–º—ã:');
      
      if (finalUser.referred_by !== 184) {
        console.log(`   - referred_by –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${finalUser.referred_by} –≤–º–µ—Å—Ç–æ 184)`);
      }
      
      if (finalReferrals.length === 0) {
        console.log('   - –ó–∞–ø–∏—Å–∏ –≤ referrals –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    if (newUserId) {
      console.log('\n6. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –£–¥–∞–ª—è–µ–º referrals
      await supabase.from('referrals').delete().eq('user_id', newUserId);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase.from('users').delete().eq('id', newUserId);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
  }
}

testFullReferralFlow().catch(console.error);