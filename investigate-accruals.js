/**
 * –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ù–ê–ß–ò–°–õ–ï–ù–ò–ô
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */

import { createClient } from '@supabase/supabase-js';

async function investigateAccruals() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ù–ê–ß–ò–°–õ–ï–ù–ò–ô');
  console.log('='.repeat(60));
  
  const baseUserId = 48;
  
  // 1. –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  console.log('\nüìä 1. –°–û–°–¢–û–Ø–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (ID: 48):');
  console.log('-'.repeat(50));
  
  const { data: mainUser, error: mainError } = await supabase
    .from('users')
    .select('*')
    .eq('id', baseUserId)
    .single();
  
  if (mainError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', mainError.message);
    return;
  }
  
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${mainUser.username} (ID: ${baseUserId})`);
  console.log(`üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã: ${parseFloat(mainUser.balance_uni).toFixed(2)} UNI, ${parseFloat(mainUser.balance_ton).toFixed(6)} TON`);
  console.log(`üìà UNI —Ñ–∞—Ä–º–∏–Ω–≥: ${mainUser.uni_farming_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} (–¥–µ–ø–æ–∑–∏—Ç: ${mainUser.uni_deposit_amount} UNI, —Å—Ç–∞–≤–∫–∞: ${(mainUser.uni_farming_rate * 100).toFixed(2)}%)`);
  console.log(`üöÄ TON Boost: –ü–∞–∫–µ—Ç ${mainUser.ton_boost_package} (—Å—Ç–∞–≤–∫–∞: ${(mainUser.ton_boost_rate * 100).toFixed(1)}%)`);
  console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${mainUser.ref_code}`);
  
  // 2. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
  console.log('\nüí∞ 2. –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –û–°–ù–û–í–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  console.log('-'.repeat(50));
  
  const { data: recentTransactions, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', baseUserId)
    .order('created_at', { ascending: false })
    .limit(15);
  
  if (!txError && recentTransactions?.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${recentTransactions.length}`);
    
    recentTransactions.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      const dateStr = new Date(tx.created_at).toLocaleString('ru-RU');
      console.log(`   ${idx + 1}. [${dateStr}] ID: ${tx.id} | +${amount} ${currency} | ${tx.description}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
    const farmingRewards = recentTransactions.filter(tx => tx.description.includes('farming') || tx.description.includes('Farming'));
    const referralRewards = recentTransactions.filter(tx => tx.description.includes('referral') || tx.description.includes('Referral'));
    const tonBoostRewards = recentTransactions.filter(tx => tx.description.includes('TON Boost') || tx.description.includes('Boost'));
    const dailyBonus = recentTransactions.filter(tx => tx.description.includes('Daily') || tx.description.includes('daily'));
    
    console.log(`\nüìà –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º:`);
    console.log(`   üåæ UNI Farming: ${farmingRewards.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`   üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: ${referralRewards.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`   üöÄ TON Boost: ${tonBoostRewards.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`   üéÅ Daily Bonus: ${dailyBonus.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
  } else {
    console.log('üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 3. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô
  console.log('\nüë• 3. –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø:');
  console.log('-'.repeat(50));
  
  const { data: referralTx, error: refError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', baseUserId)
    .ilike('description', '%referral%')
    .order('created_at', { ascending: false });
  
  if (!refError && referralTx?.length > 0) {
    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${referralTx.length}`);
    
    referralTx.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      const dateStr = new Date(tx.created_at).toLocaleString('ru-RU');
      console.log(`   ${idx + 1}. [${dateStr}] +${amount} ${currency} | ${tx.description}`);
    });
    
    const totalReferralUni = referralTx.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || 0), 0);
    const totalReferralTon = referralTx.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || 0), 0);
    
    console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferralUni.toFixed(4)} UNI + ${totalReferralTon.toFixed(6)} TON`);
  } else {
    console.log('üìù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 4. –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–ê–†–¢–ù–ï–†–û–í
  console.log('\nü§ù 4. –°–û–°–¢–û–Ø–ù–ò–ï –ü–ê–†–¢–ù–ï–†–û–í:');
  console.log('-'.repeat(50));
  
  const { data: partners, error: partnersError } = await supabase
    .from('users')
    .select('id, username, telegram_id, referred_by, balance_uni, balance_ton, uni_farming_active, ton_boost_package')
    .gte('telegram_id', 999999000)
    .order('id');
  
  if (!partnersError && partners?.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${partners.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const directReferrals = partners.filter(p => p.referred_by === baseUserId);
    console.log(`üë• –ü—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É user_id=${baseUserId}: ${directReferrals.length}`);
    
    if (directReferrals.length > 0) {
      directReferrals.forEach((ref, idx) => {
        console.log(`   ${idx + 1}. ID: ${ref.id} | ${ref.username} | –ë–∞–ª–∞–Ω—Å—ã: ${ref.balance_uni} UNI, ${ref.balance_ton} TON | UNI —Ñ–∞—Ä–º–∏–Ω–≥: ${ref.uni_farming_active ? '–î–∞' : '–ù–µ—Ç'} | TON Boost: ${ref.ton_boost_package || '–ù–µ—Ç'}`);
      });
    }
    
    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    const activeUniPartners = partners.filter(p => p.uni_farming_active === true).length;
    const tonBoostPartners = partners.filter(p => p.ton_boost_package && p.ton_boost_package > 0).length;
    const totalPartnerUni = partners.reduce((sum, p) => sum + parseFloat(p.balance_uni || 0), 0);
    const totalPartnerTon = partners.reduce((sum, p) => sum + parseFloat(p.balance_ton || 0), 0);
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:`);
    console.log(`   üåæ –ê–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${activeUniPartners}/${partners.length}`);
    console.log(`   üöÄ –° TON Boost –ø–∞–∫–µ—Ç–∞–º–∏: ${tonBoostPartners}/${partners.length}`);
    console.log(`   üí∞ –û–±—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${totalPartnerUni.toFixed(2)} UNI + ${totalPartnerTon.toFixed(2)} TON`);
    
  } else {
    console.log('üìù –ü–∞—Ä—Ç–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 5. –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ê–†–¢–ù–ï–†–û–í –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•
  console.log('\nüí∏ 5. –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ê–†–¢–ù–ï–†–û–í –í –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•:');
  console.log('-'.repeat(50));
  
  if (partners?.length > 0) {
    const partnerIds = partners.map(p => p.id);
    
    const { data: partnerTransactions, error: partnerTxError } = await supabase
      .from('transactions')
      .select('user_id, type, amount_uni, amount_ton, description, created_at')
      .in('user_id', partnerIds)
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (!partnerTxError && partnerTransactions?.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${partnerTransactions.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const activityByUser = {};
      partnerTransactions.forEach(tx => {
        if (!activityByUser[tx.user_id]) {
          activityByUser[tx.user_id] = {
            count: 0,
            uniTotal: 0,
            tonTotal: 0,
            transactions: []
          };
        }
        activityByUser[tx.user_id].count++;
        activityByUser[tx.user_id].uniTotal += parseFloat(tx.amount_uni || 0);
        activityByUser[tx.user_id].tonTotal += parseFloat(tx.amount_ton || 0);
        activityByUser[tx.user_id].transactions.push(tx);
      });
      
      Object.keys(activityByUser).forEach(userId => {
        const partner = partners.find(p => p.id == userId);
        const activity = activityByUser[userId];
        
        if (partner) {
          console.log(`   ${partner.username} (ID: ${userId}):`);
          console.log(`     üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${activity.count} | –°—É–º–º–∞: ${activity.uniTotal.toFixed(2)} UNI + ${activity.tonTotal.toFixed(6)} TON`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          activity.transactions.slice(0, 3).forEach((tx, idx) => {
            const amount = tx.amount_uni || tx.amount_ton || '0';
            const currency = tx.amount_uni ? 'UNI' : 'TON';
            const dateStr = new Date(tx.created_at).toLocaleString('ru-RU');
            console.log(`       ${idx + 1}. [${dateStr}] +${amount} ${currency} | ${tx.description.substring(0, 40)}...`);
          });
          console.log('');
        }
      });
      
      const activePartners = Object.keys(activityByUser).length;
      console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${activePartners}/${partners.length}`);
      
    } else {
      console.log('üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  }
  
  // 6. –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í
  console.log('\n‚öôÔ∏è 6. –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
  console.log('-'.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  const { data: uniFarmers, error: uniError } = await supabase
    .from('users')
    .select('id, username, balance_uni, uni_deposit_amount, uni_farming_rate, uni_farming_start_timestamp')
    .eq('uni_farming_active', true)
    .gt('uni_deposit_amount', 0);
  
  if (!uniError && uniFarmers?.length > 0) {
    console.log(`üåæ UNI —Ñ–∞—Ä–º–µ—Ä—ã (–¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç):`);
    console.log(`   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${uniFarmers.length}`);
    
    uniFarmers.slice(0, 5).forEach((farmer, idx) => {
      const expectedIncome = (parseFloat(farmer.uni_deposit_amount) * parseFloat(farmer.uni_farming_rate) / 288).toFixed(6);
      console.log(`   ${idx + 1}. ${farmer.username} (ID: ${farmer.id}) | –î–µ–ø–æ–∑–∏—Ç: ${farmer.uni_deposit_amount} UNI | –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ —Ü–∏–∫–ª: ${expectedIncome} UNI`);
    });
    
    if (uniFarmers.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${uniFarmers.length - 5} —Ñ–∞—Ä–º–µ—Ä–æ–≤`);
    }
  }
  
  const { data: tonBoosters, error: tonError } = await supabase
    .from('users')
    .select('id, username, balance_ton, ton_boost_package, ton_boost_rate')
    .gt('ton_boost_package', 0)
    .gt('ton_boost_rate', 0);
  
  if (!tonError && tonBoosters?.length > 0) {
    console.log(`\nüöÄ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç):`);
    console.log(`   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${tonBoosters.length}`);
    
    tonBoosters.slice(0, 5).forEach((booster, idx) => {
      const expectedIncome = (parseFloat(booster.balance_ton) * parseFloat(booster.ton_boost_rate) / 288 / 365).toFixed(8);
      console.log(`   ${idx + 1}. ${booster.username} (ID: ${booster.id}) | –ë–∞–ª–∞–Ω—Å: ${booster.balance_ton} TON | –ü–∞–∫–µ—Ç: ${booster.ton_boost_package} | –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ —Ü–∏–∫–ª: ${expectedIncome} TON`);
    });
    
    if (tonBoosters.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${tonBoosters.length - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost`);
    }
  }
  
  // 7. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
  console.log('\nüìã 7. –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:');
  console.log('-'.repeat(50));
  
  const currentTime = new Date();
  console.log(`üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${currentTime.toLocaleString('ru-RU')}`);
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const { data: latestTx, error: latestError } = await supabase
    .from('transactions')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(5);
  
  if (!latestError && latestTx?.length > 0) {
    console.log('\nüî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
    latestTx.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      const dateStr = new Date(tx.created_at).toLocaleString('ru-RU');
      const timeDiff = Math.round((currentTime - new Date(tx.created_at)) / 1000 / 60);
      console.log(`   ${idx + 1}. [${timeDiff} –º–∏–Ω –Ω–∞–∑–∞–¥] ID: ${tx.id} | User: ${tx.user_id} | +${amount} ${currency} | ${tx.description.substring(0, 50)}...`);
    });
  }
  
  console.log('\nüìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (recentTransactions?.length > 0) {
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è');
  } else {
    console.log('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏');
  }
  
  if (referralTx?.length > 0) {
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–º–∏—Å—Å–∏–π');
  }
  
  if (uniFarmers?.length > 0) {
    console.log(`‚úÖ ${uniFarmers.length} UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º`);
  }
  
  if (tonBoosters?.length > 0) {
    console.log(`‚úÖ ${tonBoosters.length} TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º`);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

investigateAccruals().catch(console.error);