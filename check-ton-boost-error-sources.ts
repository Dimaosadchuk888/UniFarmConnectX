/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ TON Boost
 * –ü–æ–∏—Å–∫ SQL –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–±–ª–µ–º —Å metadata
 */

import { supabase } from './core/supabase.js';

async function checkErrorSources() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í –û–®–ò–ë–û–ö TON BOOST ===');
  console.log('–î–∞—Ç–∞:', new Date().toISOString());
  console.log('\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
  console.log('üîç 1. –ü–û–ò–°–ö SQL –û–®–ò–ë–û–ö –í –ü–û–°–õ–ï–î–ù–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•');
  console.log('=' .repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å metadata –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  
  const { data: recentTx, error: e1 } = await supabase
    .from('transactions')
    .select('id, type, metadata, created_at, description')
    .gte('created_at', oneHourAgo)
    .not('metadata', 'is', null)
    .order('created_at', { ascending: false })
    .limit(50);

  if (e1) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', e1);
  } else if (recentTx) {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º ${recentTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:`);
    
    let errorCount = 0;
    const errorExamples = [];
    
    for (const tx of recentTx) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ metadata –≤–∞–ª–∏–¥–Ω—ã–º JSON
        if (typeof tx.metadata === 'string') {
          const parsed = JSON.parse(tx.metadata);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          if (tx.type === 'BOOST_PURCHASE' || tx.description?.includes('TON Boost')) {
            if (!parsed.boost_package_id && !parsed.original_type) {
              console.log(`‚ö†Ô∏è TX ${tx.id}: –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ metadata`);
            }
          }
        }
      } catch (e) {
        errorCount++;
        errorExamples.push({
          id: tx.id,
          type: tx.type,
          error: e.message,
          metadata: tx.metadata
        });
      }
    }
    
    if (errorCount > 0) {
      console.log(`\n‚ùå –ù–∞–π–¥–µ–Ω–æ ${errorCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON:`);
      errorExamples.forEach(ex => {
        console.log(`\nTX ${ex.id} (${ex.type}):`);
        console.log(`Metadata: ${ex.metadata}`);
        console.log(`–û—à–∏–±–∫–∞: ${ex.error}`);
      });
    } else {
      console.log('‚úÖ –í—Å–µ metadata –≤–∞–ª–∏–¥–Ω—ã');
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ ton_farming_data
  console.log('\n\nüîç 2. –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í TON_FARMING_DATA');
  console.log('=' .repeat(50));
  
  const { data: tonData, error: e2 } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, farming_rate, boost_package_id')
    .limit(10);

  if (!e2 && tonData) {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    tonData.forEach(row => {
      const balanceType = typeof row.farming_balance;
      const rateType = typeof row.farming_rate;
      const packageType = typeof row.boost_package_id;
      
      if (balanceType !== 'number' || rateType !== 'number' || packageType !== 'number') {
        console.log(`\n‚ö†Ô∏è User ${row.user_id}:`);
        console.log(`  farming_balance: ${row.farming_balance} (—Ç–∏–ø: ${balanceType})`);
        console.log(`  farming_rate: ${row.farming_rate} (—Ç–∏–ø: ${rateType})`);
        console.log(`  boost_package_id: ${row.boost_package_id} (—Ç–∏–ø: ${packageType})`);
      }
    });
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ upsert –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
  console.log('\n\nüîç 3. –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í –ò –ö–û–ù–§–õ–ò–ö–¢–û–í');
  console.log('=' .repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã user_id –≤ ton_farming_data
  const { data: duplicates, error: e3 } = await supabase
    .rpc('check_ton_farming_duplicates');

  if (e3) {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
    const { data: allUsers } = await supabase
      .from('ton_farming_data')
      .select('user_id')
      .order('user_id');
    
    if (allUsers) {
      const userCounts = {};
      allUsers.forEach(row => {
        userCounts[row.user_id] = (userCounts[row.user_id] || 0) + 1;
      });
      
      const duplicateUsers = Object.entries(userCounts)
        .filter(([_, count]) => count > 1);
      
      if (duplicateUsers.length > 0) {
        console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã user_id:');
        duplicateUsers.forEach(([userId, count]) => {
          console.log(`  User ${userId}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        });
      } else {
        console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }
  }

  // 4. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ metadata
  console.log('\n\nüîç 4. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ë–ï–ó METADATA');
  console.log('=' .repeat(50));
  
  const { data: noMetaTx, error: e4 } = await supabase
    .from('transactions')
    .select('id, type, created_at')
    .eq('type', 'BOOST_PURCHASE')
    .is('metadata', null)
    .order('created_at', { ascending: false })
    .limit(10);

  if (!e4 && noMetaTx) {
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${noMetaTx.length} BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ metadata:`);
    noMetaTx.forEach(tx => {
      console.log(`  TX ${tx.id}: ${tx.created_at}`);
    });
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π farming_balance
  console.log('\n\nüîç 5. –ü–û–°–õ–ï–î–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø FARMING_BALANCE');
  console.log('=' .repeat(50));
  
  const { data: user74Data, error: e5 } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', 74)
    .single();

  if (!e5 && user74Data) {
    console.log('User 74 —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
    console.log(`  farming_balance: ${user74Data.farming_balance}`);
    console.log(`  farming_rate: ${user74Data.farming_rate}`);
    console.log(`  boost_package_id: ${user74Data.boost_package_id}`);
    console.log(`  last_update: ${user74Data.farming_last_update}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: lastChanges } = await supabase
      .from('transactions')
      .select('created_at, type, amount, amount_ton, description')
      .eq('user_id', 74)
      .in('type', ['BOOST_PURCHASE', 'FARMING_REWARD'])
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (lastChanges) {
      console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
      lastChanges.forEach(tx => {
        const amount = parseFloat(tx.amount_ton || tx.amount || '0');
        const sign = tx.type === 'BOOST_PURCHASE' ? '-' : '+';
        console.log(`  ${tx.created_at}: ${sign}${amount} TON (${tx.type})`);
      });
    }
  }

  console.log('\n=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –û–®–ò–ë–û–ö ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
checkErrorSources()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });