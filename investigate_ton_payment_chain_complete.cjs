#!/usr/bin/env node
/**
 * –ü–û–õ–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò TON –ü–õ–ê–¢–ï–ñ–ï–ô
 * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –æ—Ç –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑
 */

const fs = require('fs');
const path = require('path');

function investigatePaymentChain() {
  console.log('üîç –ü–û–õ–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò TON –ü–õ–ê–¢–ï–ñ–ï–ô');
  console.log('='.repeat(60));
  
  const findings = {};
  
  // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ (Frontend)
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–ù–ò–¶–ò–ê–¶–ò–ò –ü–õ–ê–¢–ï–ñ–ê (FRONTEND)');
  console.log('-'.repeat(40));
  
  const frontendFiles = [
    'client/src/components/wallet/TonDepositCard.tsx',
    'client/src/services/tonConnectService.ts',
    'client/src/contexts/UserContext.tsx'
  ];
  
  frontendFiles.forEach(filePath => {
    console.log(`\nüìÑ ${filePath}`);
    
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç–µ–∂–µ–π
      const tonPaymentPatterns = {
        'sendTonTransaction': content.includes('sendTonTransaction'),
        'connectWallet': content.includes('connectWallet'),
        'tonConnectUI': content.includes('tonConnectUI'),
        'processTonDeposit': content.includes('processTonDeposit'),
        '/api/v2/wallet/ton-deposit': content.includes('/api/v2/wallet/ton-deposit'),
        'refreshBalance': content.includes('refreshBalance')
      };
      
      Object.entries(tonPaymentPatterns).forEach(([pattern, found]) => {
        if (found) {
          console.log(`   üîç ${pattern}: –ù–ê–ô–î–ï–ù–û`);
          
          // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
          if (pattern === '/api/v2/wallet/ton-deposit') {
            const apiCallMatches = content.match(/\/api\/v2\/wallet\/ton-deposit[^'"\n]*/g);
            apiCallMatches?.forEach(match => {
              console.log(`      üì° API –≤—ã–∑–æ–≤: ${match}`);
            });
          }
          
          if (pattern === 'processTonDeposit') {
            const funcMatches = content.match(/processTonDeposit\([^)]*\)/g);
            funcMatches?.forEach(match => {
              console.log(`      ‚ö° –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: ${match}`);
            });
          }
        } else {
          console.log(`   ‚ùå ${pattern}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
        }
      });
      
      // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –Ω–∞ backend
      if (content.includes('ton-deposit')) {
        const lines = content.split('\n');
        lines.forEach((line, index) => {
          if (line.includes('ton-deposit') && (line.includes('POST') || line.includes('fetch'))) {
            console.log(`   üì§ –°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
            
            // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            for (let i = 1; i <= 10 && index + i < lines.length; i++) {
              const nextLine = lines[index + i].trim();
              if (nextLine.includes('user_id') || nextLine.includes('amount') || 
                  nextLine.includes('tx_hash') || nextLine.includes('wallet_address')) {
                console.log(`      ‚îú‚îÄ ${nextLine}`);
              }
              if (nextLine.includes('}') && nextLine.length < 5) break;
            }
          }
        });
      }
      
    } else {
      console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ API endpoint'–∞ (Backend)
  console.log('\n\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó API ENDPOINT (BACKEND)');
  console.log('-'.repeat(40));
  
  const backendFiles = [
    'modules/wallet/controller.ts',
    'modules/wallet/service.ts',
    'server/routes.ts'
  ];
  
  backendFiles.forEach(filePath => {
    console.log(`\nüìÑ ${filePath}`);
    
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ü–æ–∏—Å–∫ TON deposit —Ä–æ—É—Ç–∞
      if (content.includes('ton-deposit')) {
        console.log(`   üéØ –ù–∞–π–¥–µ–Ω TON deposit endpoint`);
        
        const lines = content.split('\n');
        lines.forEach((line, index) => {
          if (line.includes('ton-deposit')) {
            console.log(`   üìç –°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
          }
        });
      }
      
      // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ processTonDeposit
      if (content.includes('processTonDeposit')) {
        console.log(`   ‚ö° –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è processTonDeposit`);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
        const funcRegex = /processTonDeposit\s*\([^)]*\)[^{]*{/;
        const match = content.match(funcRegex);
        if (match) {
          console.log(`   üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞: ${match[0].replace(/\s+/g, ' ')}`);
        }
        
        // –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
        const lines = content.split('\n');
        lines.forEach((line, index) => {
          if (line.includes('processTonDeposit')) {
            console.log(`   üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${index + 1}`);
            
            // –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            for (let i = 1; i <= 15 && index + i < lines.length; i++) {
              const nextLine = lines[index + i].trim();
              if (nextLine.includes('user_id') || nextLine.includes('telegram_id') || 
                  nextLine.includes('username') || nextLine.includes('amount') ||
                  nextLine.includes('tx_hash') || nextLine.includes('wallet_address')) {
                console.log(`      ‚îú‚îÄ ${nextLine}`);
              }
            }
          }
        });
      }
      
      // –ü–æ–∏—Å–∫ –ª–æ–≥–∏–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userIdentificationPatterns = {
        'getUserByTelegramId': content.includes('getUserByTelegramId'),
        'findByTelegramId': content.includes('findByTelegramId'),
        'findByUsername': content.includes('findByUsername'),
        'telegram_id': content.match(/telegram_id/g)?.length || 0,
        'username': content.match(/username/g)?.length || 0,
        'user_id': content.match(/user_id/g)?.length || 0
      };
      
      console.log(`   üë§ –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
      Object.entries(userIdentificationPatterns).forEach(([pattern, value]) => {
        if (typeof value === 'boolean' && value) {
          console.log(`      ‚úÖ ${pattern}: –Ω–∞–π–¥–µ–Ω–æ`);
        } else if (typeof value === 'number' && value > 0) {
          console.log(`      üìä ${pattern}: ${value} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
        }
      });
      
    } else {
      console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // –≠–¢–ê–ü 3: –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  console.log('\n\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê');
  console.log('-'.repeat(40));
  
  const balanceFiles = [
    'core/BalanceManager.ts',
    'core/UnifiedTransactionService.ts',
    'modules/wallet/service.ts'
  ];
  
  balanceFiles.forEach(filePath => {
    console.log(`\nüìÑ ${filePath}`);
    
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      const balanceUpdatePatterns = {
        'addBalance': content.includes('addBalance'),
        'updateBalance': content.includes('updateBalance'),
        'balance_ton': content.includes('balance_ton'),
        'createTransaction': content.includes('createTransaction'),
        'insertTransaction': content.includes('insertTransaction')
      };
      
      console.log(`   üí∞ –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:`);
      Object.entries(balanceUpdatePatterns).forEach(([pattern, found]) => {
        if (found) {
          console.log(`      ‚úÖ ${pattern}: –Ω–∞–π–¥–µ–Ω–æ`);
          
          // –î–ª—è addBalance –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É
          if (pattern === 'addBalance') {
            const funcRegex = /addBalance\s*\([^)]*\)/g;
            const matches = content.match(funcRegex);
            matches?.forEach(match => {
              console.log(`         üìù ${match}`);
            });
          }
        } else {
          console.log(`      ‚ùå ${pattern}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
      });
      
    } else {
      console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  console.log('\n\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó WEBSOCKET –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
  console.log('-'.repeat(40));
  
  const wsFiles = [
    'server/websocket.ts',
    'client/src/contexts/webSocketContext.tsx',
    'client/src/hooks/useWebSocketBalanceSync.ts'
  ];
  
  wsFiles.forEach(filePath => {
    console.log(`\nüìÑ ${filePath}`);
    
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      const wsPatterns = {
        'balance_updated': content.includes('balance_updated'),
        'notifyBalanceUpdate': content.includes('notifyBalanceUpdate'),
        'sendToUser': content.includes('sendToUser'),
        'emit': content.includes('emit'),
        'broadcast': content.includes('broadcast')
      };
      
      console.log(`   üì° –ê–Ω–∞–ª–∏–∑ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`);
      Object.entries(wsPatterns).forEach(([pattern, found]) => {
        console.log(`      ${found ? '‚úÖ' : '‚ùå'} ${pattern}: ${found ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
      });
      
    } else {
      console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  console.log('\n\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó MIDDLEWARE –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('-'.repeat(40));
  
  const authFiles = [
    'core/middleware/auth.ts',
    'utils/telegram.ts'
  ];
  
  authFiles.forEach(filePath => {
    console.log(`\nüìÑ ${filePath}`);
    
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ê–Ω–∞–ª–∏–∑ JWT –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (content.includes('JWT') || content.includes('jwt')) {
        console.log(`   üîê JWT –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞`);
        
        const jwtPatterns = {
          'verifyJWTToken': content.includes('verifyJWTToken'),
          'userId': content.includes('userId'),
          'telegram_id': content.includes('telegram_id'),
          'req.user': content.includes('req.user')
        };
        
        Object.entries(jwtPatterns).forEach(([pattern, found]) => {
          console.log(`      ${found ? '‚úÖ' : '‚ùå'} ${pattern}: ${found ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
        });
      }
      
    } else {
      console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // –†–ï–ó–Æ–ú–ï
  console.log('\n\nüéØ –†–ï–ó–Æ–ú–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(50));
  console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω');
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã');
  console.log('üîç –ì–æ—Ç–æ–≤—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é');
  
  return findings;
}

// –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
try {
  investigatePaymentChain();
  console.log('\n‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
}