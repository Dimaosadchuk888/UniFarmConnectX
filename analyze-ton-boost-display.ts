/**
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ TON Boost –ø–∞–∫–µ—Ç–æ–≤
 * –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

import { config as loadEnv } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

loadEnv();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeTonBoostDisplay() {
  console.log('\n=== –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í ===\n');
  console.log('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  console.log('---------------------------------------------------\n');

  try {
    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testUserIds = [184, 187, 188, 189, 190];
    
    for (const userId of testUserIds) {
      console.log(`\n=== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ${userId} ===\n`);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ton_boost_purchases
      console.log('1. –¢–ê–ë–õ–ò–¶–ê ton_boost_purchases:');
      
      const { data: purchases, error: purchasesError } = await supabase
        .from('ton_boost_purchases')
        .select('*')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('purchased_at', { ascending: false });
      
      if (purchasesError) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', purchasesError.message);
      } else if (!purchases || purchases.length === 0) {
        console.log('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ');
      } else {
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${purchases.length}`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ package_id
        const packageGroups = new Map<number, number>();
        let totalAmount = 0;
        let totalDailyIncome = 0;
        
        purchases.forEach(p => {
          packageGroups.set(p.package_id, (packageGroups.get(p.package_id) || 0) + 1);
          totalAmount += parseFloat(p.amount || '0');
          totalDailyIncome += parseFloat(p.daily_income || '0');
        });
        
        console.log('\n   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞–∫–µ—Ç–∞–º:');
        Array.from(packageGroups.entries()).forEach(([packageId, count]) => {
          const packageName = purchases.find(p => p.package_id === packageId)?.package_name;
          console.log(`   - ${packageName || `Package ${packageId}`}: ${count} —à—Ç.`);
        });
        
        console.log(`\n   –û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${totalAmount.toFixed(2)} TON`);
        console.log(`   –û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${totalDailyIncome.toFixed(6)} TON`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–∫—É–ø–æ–∫
        console.log('\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:');
        purchases.slice(0, 5).forEach(p => {
          console.log(`   - ${p.package_name}: ${p.amount} TON, –∫—É–ø–ª–µ–Ω ${new Date(p.purchased_at).toLocaleDateString()}`);
        });
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ç–∞–±–ª–∏—Ü–µ users
      console.log('\n2. –°–¢–ê–†–ê–Ø –°–ò–°–¢–ï–ú–ê (—Ç–∞–±–ª–∏—Ü–∞ users):');
      
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('ton_boost_package, ton_boost_rate, ton_farming_balance')
        .eq('id', userId)
        .single();
      
      if (userError) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      } else if (!user) {
        console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else {
        if (user.ton_boost_package) {
          console.log(`   ton_boost_package: ${user.ton_boost_package}`);
          console.log(`   ton_boost_rate: ${user.ton_boost_rate || 'NULL'}`);
          console.log(`   ton_farming_balance: ${user.ton_farming_balance || 'NULL'}`);
        } else {
          console.log('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ');
        }
      }
      
      // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
      console.log('\n3. –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú:');
      
      const newSystemCount = purchases?.length || 0;
      const oldSystemActive = user?.ton_boost_package ? 1 : 0;
      
      if (newSystemCount > 0 && oldSystemActive > 0) {
        console.log('   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –û–ë–ï–ò–• —Å–∏—Å—Ç–µ–º–∞—Ö!');
        console.log(`   - –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: ${newSystemCount} –ø–∞–∫–µ—Ç–æ–≤`);
        console.log(`   - –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞: ${oldSystemActive} –ø–∞–∫–µ—Ç`);
        console.log('   –í–û–ó–ú–û–ñ–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø');
      } else if (newSystemCount > 0) {
        console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞');
        console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: ${newSystemCount}`);
      } else if (oldSystemActive > 0) {
        console.log('   üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞');
        console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç ID: ${user?.ton_boost_package}`);
      } else {
        console.log('   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
      }
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API
      console.log('\n4. –ü–†–û–í–ï–†–ö–ê API RESPONSE:');
      
      try {
        const apiUrl = `http://localhost:3000/api/v2/boost/farming-status?user_id=${userId}`;
        const response = await fetch(apiUrl);
        const data = await response.json();
        
        if (data.success && data.data) {
          const deposits = data.data.deposits || [];
          console.log(`   API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: ${deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
          
          if (deposits.length > 0) {
            // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ purchased_at
            const uniqueDates = new Set(deposits.map((d: any) => d.purchased_at));
            console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –ø–æ–∫—É–ø–∫–∏: ${uniqueDates.size}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (uniqueDates.size < deposits.length) {
              console.log('   ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ purchased_at)');
              
              // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
              const dateCount = new Map<string, number>();
              deposits.forEach((d: any) => {
                const date = d.purchased_at || 'no-date';
                dateCount.set(date, (dateCount.get(date) || 0) + 1);
              });
              
              console.log('   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–∞–º:');
              Array.from(dateCount.entries())
                .filter(([_, count]) => count > 1)
                .forEach(([date, count]) => {
                  console.log(`   - ${date}: ${count} –∑–∞–ø–∏—Å–µ–π (–î–£–ë–õ–ò–ö–ê–¢)`);
                });
            }
          }
        } else {
          console.log('   ‚ùå –û—à–∏–±–∫–∞ API –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
      } catch (apiError) {
        console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å API:', apiError);
      }
    }
    
    // 5. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n\n=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n');
    
    const { count: totalPurchases } = await supabase
      .from('ton_boost_purchases')
      .select('*', { count: 'exact', head: true })
      .eq('status', 'active');
    
    const { count: usersWithOldBoost } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .not('ton_boost_package', 'is', null);
    
    console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${totalPurchases}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–∫–µ—Ç–∞–º–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ: ${usersWithOldBoost}`);
    
    // 6. –í–´–í–û–î–´
    console.log('\n=== –í–´–í–û–î–´ ===\n');
    
    console.log('–ü–†–û–ë–õ–ï–ú–ê –ò–î–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ê:');
    console.log('1. –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ù–û–í–£–Æ —Ç–∞–±–ª–∏—Ü—É ton_boost_purchases');
    console.log('2. –í —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('3. Frontend –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ deposits');
    console.log('4. –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ - –æ–Ω–∏ –≤—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è');
    
    console.log('\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –î–£–ë–õ–ò–ö–ê–¢–û–í:');
    console.log('- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞');
    console.log('- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏');
    console.log('- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
    
    console.log('\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ ton_boost_purchases');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ backend');
    console.log('3. –ò–ª–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ package_id –Ω–∞ frontend');
    console.log('4. –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –ë–î (–µ—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeTonBoostDisplay()
  .then(() => {
    console.log('\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===\n');
    process.exit(0);
  })
  .catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });