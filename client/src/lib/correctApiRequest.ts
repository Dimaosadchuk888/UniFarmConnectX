/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Telegram WebApp –¥–∞–Ω–Ω—ã—Ö
 * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–æ–≤
 */

import { toast } from '@/hooks/use-toast';
import { handleTokenRefresh, isTokenExpiredError, isTokenExpiringSoon } from './tokenRefreshHandler';

interface RequestConfig {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: any;
  credentials?: RequestCredentials;
  retryCount?: number;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ rate limit
let lastRateLimitToastTime = 0;
const RATE_LIMIT_TOAST_COOLDOWN = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const MAX_AUTH_RETRIES = 2;

// Fallback —Ç–æ–∫–µ–Ω –Ω–∞ —Å–ª—É—á–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ (–∏—Å—Ç–µ–∫–∞–µ—Ç 14 –∏—é–ª—è 2025)
const FALLBACK_JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld190ZXN0IiwiZmlyc3RfbmFtZSI6IlByZXZpZXciLCJyZWZfY29kZSI6IlJFRl8xNzUxNzgwNTIxOTE4X2UxdjYyZCIsImlhdCI6MTc1MTg3MTA2MywiZXhwIjoxNzUyNDc1ODYzfQ.NKbyJiXtLnGzyr0w-C1oR658X5TzDO6EkKU8Ie5zgE0';

async function makeRequestWithAuth(url: string, config: RequestConfig): Promise<Response> {
  const requestHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    ...config.headers
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
  let token = localStorage.getItem('unifarm_jwt_token');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ (–∑–∞ 1 —á–∞—Å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
  if (token && isTokenExpiringSoon(token)) {
    console.log('[correctApiRequest] –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ...');
    const refreshResult = await handleTokenRefresh();
    if (refreshResult.success && refreshResult.token) {
      token = refreshResult.token;
    }
  }
  
  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
  if (!token) {
    console.warn('[correctApiRequest] ‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–∫–µ–Ω');
    token = FALLBACK_JWT_TOKEN;
    localStorage.setItem('unifarm_jwt_token', token);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  requestHeaders['Authorization'] = `Bearer ${token}`;
  
  console.log('[correctApiRequest] JWT —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω, –¥–ª–∏–Ω–∞:', token.length);

  // –î–æ–±–∞–≤–ª—è–µ–º Telegram WebApp –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initData) {
    requestHeaders['X-Telegram-Init-Data'] = window.Telegram.WebApp.initData;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const requestConfig: RequestInit = {
    method: config.method || 'GET',
    headers: requestHeaders,
    credentials: config.credentials || 'include'
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
  if (config.body && ['POST', 'PUT', 'PATCH'].includes(requestConfig.method!)) {
    requestConfig.body = typeof config.body === 'string' ? config.body : JSON.stringify(config.body);
  }

  return fetch(url, requestConfig);
}

export async function correctApiRequest(
  url: string, 
  method: string = 'GET', 
  body?: any, 
  headers: Record<string, string> = {},
  retryCount: number = 0
) {
  const config: RequestConfig = {
    method,
    headers,
    body,
    credentials: 'include',
    retryCount
  };

  try {
    console.log('[correctApiRequest] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      url,
      method,
      body,
      retryCount
    });
    
    const response = await makeRequestWithAuth(url, config);
    
    console.log('[correctApiRequest] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
      ok: response.ok,
      status: response.status,
      statusText: response.statusText
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('[correctApiRequest] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorData);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 - Unauthorized (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
      if (response.status === 401 && retryCount < MAX_AUTH_RETRIES) {
        console.log('[correctApiRequest] üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        const refreshResult = await handleTokenRefresh();
        
        if (refreshResult.success) {
          console.log('[correctApiRequest] ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...');
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          return correctApiRequest(url, method, body, headers, retryCount + 1);
        } else {
          console.error('[correctApiRequest] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshResult.error);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          toast({
            title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞",
            variant: "destructive",
            duration: 5000
          });
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 - Too Many Requests
      if (response.status === 429) {
        const currentTime = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å toast (–Ω–µ –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥)
        if (currentTime - lastRateLimitToastTime > RATE_LIMIT_TOAST_COOLDOWN) {
          lastRateLimitToastTime = currentTime;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          toast({
            title: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
            description: errorData.error || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            variant: "destructive",
            duration: 5000
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ retryAfter –≤ –æ—à–∏–±–∫—É
        const error = new Error(errorData.error || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤');
        (error as any).status = 429;
        (error as any).retryAfter = errorData.retryAfter;
        throw error;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –æ—à–∏–±–∫–µ
      const error = new Error(errorData.message || errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      Object.assign(error, errorData);
      throw error;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    const data = await response.json();
    console.log('[correctApiRequest] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', data);
    return data;
  } catch (error) {
    console.error('[correctApiRequest] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', {
      error,
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });
    throw error;
  }
}

export default correctApiRequest;