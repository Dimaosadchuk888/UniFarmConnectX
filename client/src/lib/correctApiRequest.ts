/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Telegram WebApp –¥–∞–Ω–Ω—ã—Ö
 */

import { toast } from '@/hooks/use-toast';

interface RequestConfig {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  headers?: Record<string, string>;
  body?: any;
  credentials?: RequestCredentials;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ rate limit
let lastRateLimitToastTime = 0;
const RATE_LIMIT_TOAST_COOLDOWN = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

export async function correctApiRequest(url: string, method: string = 'GET', body?: any, headers: Record<string, string> = {}) {
  const credentials = 'include';

  // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const requestHeaders: Record<string, string> = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    ...headers
  };

  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
  const forceJWTToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld190ZXN0IiwiZmlyc3RfbmFtZSI6IlByZXZpZXciLCJyZWZfY29kZSI6IlJFRl8xNzUxNzgwNTIxOTE4X2UxdjYyZCIsImlhdCI6MTc1MTg3MTA2MywiZXhwIjoxNzUyNDc1ODYzfQ.NKbyJiXtLnGzyr0w-C1oR658X5TzDO6EkKU8Ie5zgE0';
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω (–æ–±—Ö–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã localStorage)
  requestHeaders['Authorization'] = `Bearer ${forceJWTToken}`;
  
  console.log('[correctApiRequest] üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô JWT —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization');
  console.log('[correctApiRequest] JWT —Ç–æ–∫–µ–Ω –¥–ª–∏–Ω–∞:', forceJWTToken.length);
  console.log('[correctApiRequest] JWT —Ç–æ–∫–µ–Ω –ø—Ä–µ–≤—å—é:', forceJWTToken.substring(0, 50) + '...');

  // –î–æ–±–∞–≤–ª—è–µ–º Telegram WebApp –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
  if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initData) {
    requestHeaders['X-Telegram-Init-Data'] = window.Telegram.WebApp.initData;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const requestConfig: RequestInit = {
    method,
    headers: requestHeaders,
    credentials
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
  if (body && ['POST', 'PUT', 'PATCH'].includes(method)) {
    requestConfig.body = typeof body === 'string' ? body : JSON.stringify(body);
  }

  try {
    console.log('[correctApiRequest] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      url,
      method,
      body,
      headers: requestHeaders
    });
    
    const response = await fetch(url, requestConfig);
    
    console.log('[correctApiRequest] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
      ok: response.ok,
      status: response.status,
      statusText: response.statusText
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('[correctApiRequest] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorData);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 - Too Many Requests
      if (response.status === 429) {
        const currentTime = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å toast (–Ω–µ –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥)
        if (currentTime - lastRateLimitToastTime > RATE_LIMIT_TOAST_COOLDOWN) {
          lastRateLimitToastTime = currentTime;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          toast({
            title: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
            description: errorData.error || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            variant: "destructive",
            duration: 5000
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ retryAfter –≤ –æ—à–∏–±–∫—É
        const error = new Error(errorData.error || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤');
        (error as any).status = 429;
        (error as any).retryAfter = errorData.retryAfter;
        throw error;
      }
      
      throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    const data = await response.json();
    console.log('[correctApiRequest] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', data);
    return data;
  } catch (error) {
    console.error('[correctApiRequest] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', {
      error,
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });
    throw error;
  }
}

export default correctApiRequest;