/**
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç race conditions –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

interface UpdateRequest {
  source: string;
  timestamp: number;
  forceRefresh: boolean;
  userId: number;
}

export class BalanceUpdateCoordinator {
  private static instance: BalanceUpdateCoordinator;
  private pendingRequests = new Map<number, UpdateRequest>();
  private lastUpdateTime = new Map<number, number>();
  private updateCallbacks = new Map<number, (forceRefresh: boolean) => Promise<void>>();
  
  // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  private readonly DEBOUNCE_TIME = 1500; // 1.5 —Å–µ–∫—É–Ω–¥—ã
  private readonly MIN_UPDATE_INTERVAL = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
  
  private constructor() {}
  
  static getInstance(): BalanceUpdateCoordinator {
    if (!BalanceUpdateCoordinator.instance) {
      BalanceUpdateCoordinator.instance = new BalanceUpdateCoordinator();
    }
    return BalanceUpdateCoordinator.instance;
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  registerUpdateCallback(userId: number, callback: (forceRefresh: boolean) => Promise<void>) {
    this.updateCallbacks.set(userId, callback);
    console.log(`[BalanceCoordinator] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }
  
  /**
   * –£–¥–∞–ª—è–µ—Ç callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  unregisterUpdateCallback(userId: number) {
    this.updateCallbacks.delete(userId);
    this.pendingRequests.delete(userId);
    this.lastUpdateTime.delete(userId);
  }
  
  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å —É–º–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π
   */
  async requestUpdate(userId: number, source: string, forceRefresh: boolean = false): Promise<void> {
    const now = Date.now();
    const lastUpdate = this.lastUpdateTime.get(userId) || 0;
    const timeSinceLastUpdate = now - lastUpdate;
    
    console.log(`[BalanceCoordinator] –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç ${source} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, {
      forceRefresh,
      timeSinceLastUpdate: `${Math.round(timeSinceLastUpdate / 1000)}—Å`,
      minInterval: `${this.MIN_UPDATE_INTERVAL / 1000}—Å`
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    if (!forceRefresh && timeSinceLastUpdate < this.MIN_UPDATE_INTERVAL) {
      console.log(`[BalanceCoordinator] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç ${source} - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ`, {
        remaining: `${Math.round((this.MIN_UPDATE_INTERVAL - timeSinceLastUpdate) / 1000)}—Å`
      });
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const request: UpdateRequest = {
      source,
      timestamp: now,
      forceRefresh,
      userId
    };
    
    const existingRequest = this.pendingRequests.get(userId);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å pending –∑–∞–ø—Ä–æ—Å –∏ –Ω–æ–≤—ã–π –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π - –∑–∞–º–µ–Ω—è–µ–º
    if (existingRequest) {
      const shouldReplace = forceRefresh && !existingRequest.forceRefresh;
      if (shouldReplace) {
        console.log(`[BalanceCoordinator] –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ${existingRequest.source} –Ω–∞ ${source} (–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)`);
        this.pendingRequests.set(userId, request);
      } else {
        console.log(`[BalanceCoordinator] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç ${source} - —É–∂–µ –µ—Å—Ç—å pending –æ—Ç ${existingRequest.source}`);
        return;
      }
    } else {
      this.pendingRequests.set(userId, request);
    }
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ - –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    await new Promise(resolve => setTimeout(resolve, this.DEBOUNCE_TIME));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
    const currentRequest = this.pendingRequests.get(userId);
    if (!currentRequest || currentRequest.timestamp !== request.timestamp) {
      console.log(`[BalanceCoordinator] –ó–∞–ø—Ä–æ—Å –æ—Ç ${source} —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –∑–∞–º–µ–Ω–µ–Ω`);
      return;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await this.executeUpdate(userId, request);
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
   */
  private async executeUpdate(userId: number, request: UpdateRequest): Promise<void> {
    const callback = this.updateCallbacks.get(userId);
    if (!callback) {
      console.warn(`[BalanceCoordinator] –ù–µ—Ç callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return;
    }
    
    try {
      console.log(`[BalanceCoordinator] ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç ${request.source} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, {
        forceRefresh: request.forceRefresh
      });
      
      await callback(request.forceRefresh);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      this.lastUpdateTime.set(userId, Date.now());
      
      console.log(`[BalanceCoordinator] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç ${request.source}`);
      
    } catch (error) {
      console.error(`[BalanceCoordinator] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç ${request.source}:`, error);
    } finally {
      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      this.pendingRequests.delete(userId);
    }
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤)
   */
  async forceUpdate(userId: number, source: string): Promise<void> {
    console.log(`[BalanceCoordinator] üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç ${source} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const callback = this.updateCallbacks.get(userId);
    if (!callback) {
      console.warn(`[BalanceCoordinator] –ù–µ—Ç callback –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return;
    }
    
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ pending –∑–∞–ø—Ä–æ—Å—ã
      this.pendingRequests.delete(userId);
      
      await callback(true);
      this.lastUpdateTime.set(userId, Date.now());
      
      console.log(`[BalanceCoordinator] ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ç ${source}`);
      
    } catch (error) {
      console.error(`[BalanceCoordinator] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç ${source}:`, error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
   */
  getStats(): Record<string, any> {
    return {
      pendingRequests: this.pendingRequests.size,
      registeredUsers: this.updateCallbacks.size,
      lastUpdateTimes: Object.fromEntries(this.lastUpdateTime.entries())
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const balanceCoordinator = BalanceUpdateCoordinator.getInstance();