import { useEffect, useRef } from 'react';
import { useWebSocket } from '../contexts/webSocketContext';
import { useUser } from '../contexts/userContext';
import { balanceCoordinator } from '../services/balanceUpdateCoordinator';

/**
 * Hook –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ WebSocket
 * –°–ª—É—à–∞–µ—Ç WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UserContext
 */
export function useWebSocketBalanceSync() {
  const { lastMessage, subscribeToUserUpdates, connectionStatus } = useWebSocket();
  const { userId, refreshBalance } = useUser();
  const subscriptionRef = useRef<Set<number>>(new Set());

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  useEffect(() => {
    if (userId) {
      console.log(`[useWebSocketBalanceSync] üéØ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      balanceCoordinator.registerUpdateCallback(userId, async (forceRefresh) => {
        await refreshBalance(forceRefresh);
      });
      
      return () => {
        console.log(`[useWebSocketBalanceSync] üóëÔ∏è –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        balanceCoordinator.unregisterUpdateCallback(userId);
      };
    }
  }, [userId, refreshBalance]);

  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–£–ú–ù–û)
    if (userId && connectionStatus === 'connected' && !subscriptionRef.current.has(userId)) {
      console.log('[useWebSocketBalanceSync] üîå –£–º–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      subscribeToUserUpdates(userId);
      subscriptionRef.current.add(userId);
    }
  }, [userId, connectionStatus, subscribeToUserUpdates]);
  
  // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï: —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ
  useEffect(() => {
    if (!userId) return;
    
    const interval = setInterval(() => {
      if (userId) {
        console.log('[useWebSocketBalanceSync] üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä (2 –º–∏–Ω)');
        balanceCoordinator.requestUpdate(userId, 'interval-auto', false); // –ë–ï–ó forceRefresh
      }
    }, 120000); // 2 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 30 —Å–µ–∫—É–Ω–¥ - –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    
    return () => clearInterval(interval);
  }, [userId]);

  useEffect(() => {
    // –ö–û–û–†–î–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
    if (lastMessage && lastMessage.type === 'balance_update') {
      console.log('[useWebSocketBalanceSync] üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', lastMessage);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (lastMessage.userId === userId && userId) {
        console.log('[useWebSocketBalanceSync] üéØ –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ balanceCoordinator');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
        balanceCoordinator.requestUpdate(userId, 'websocket-update', true);
      }
    }
  }, [lastMessage, userId]);

  return {
    isConnected: connectionStatus === 'connected',
    connectionStatus
  };
}