import { useQuery } from '@tanstack/react-query';
import { correctApiRequest } from '@/lib/correctApiRequest';
import { useState, useEffect } from 'react';
import { useUser } from '@/contexts/userContext';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
export enum MissionStatus {
  AVAILABLE = 'available',
  PROCESSING = 'processing',
  COMPLETED = 'completed'
}

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –∏–∑ –ë–î
export interface DbMission {
  id: number;
  type: string;
  title: string;
  description: string;
  reward_uni: string; // –í –ë–î —ç—Ç–æ numeric –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  is_active: boolean;
}

// –¢–∏–ø –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserMission {
  id: number;
  user_id: number;
  mission_id: number;
  completed_at: string;
}

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –¥–ª—è UI
export interface Mission {
  id: number;
  type: string;
  title: string;
  description: string;
  rewardUni: number;
  status: MissionStatus;
  progress?: number; // –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100
  visitStartTime?: number; // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏
  verificationAvailable?: boolean; // –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∏—Å—Å–∏—è—Ö
 */
export function useMissionData() {
  const { userId } = useUser();
  const [missions, setMissions] = useState<Mission[]>([]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
  const { 
    data: dbMissions, 
    isLoading: missionsLoading, 
    error: missionsError 
  } = useQuery<DbMission[]>({
    queryKey: ['/api/missions/active'],
    queryFn: async () => {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π');
      
      try {
        const data = await correctApiRequest('/api/missions/active', 'GET');
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, data);
        
        if (data && data.success && Array.isArray(data.data)) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ (${data.data.length} —à—Ç.)`);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          return [];
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return [];
      }
    }
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { 
    data: userCompletedMissions, 
    isLoading: userMissionsLoading, 
    error: userMissionsError 
  } = useQuery<UserMission[]>({
    queryKey: ['/api/user_missions', userId],
    queryFn: async () => {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', userId);
      
      try {
        const data = await correctApiRequest(`/api/user_missions?user_id=${userId || 1}`, 'GET');
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, data);
        
        if (data && data.success && Array.isArray(data.data)) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ (${data.data.length} —à—Ç.)`);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          return [];
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return [];
      }
    }
  });
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∏—Å—Å–∏—è—Ö
  useEffect(() => {
    console.log('useEffect –≤ —Ö—É–∫–µ useMissionData –≤—ã–∑–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
    if (!dbMissions || !Array.isArray(dbMissions)) {
      console.log('dbMissions –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      setMissions([]);
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const completedMissionsById: Record<number, boolean> = {};
    
    // –Ø–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ userCompletedMissions –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('userCompletedMissions —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
      isUndefined: userCompletedMissions === undefined,
      isNull: userCompletedMissions === null,
      isArray: Array.isArray(userCompletedMissions),
      value: userCompletedMissions
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É userCompletedMissions –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –º–∞—Å—Å–∏–≤–æ–º
    const safeUserMissions = Array.isArray(userCompletedMissions) ? userCompletedMissions : [];
    
    if (safeUserMissions.length > 0) {
      console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', safeUserMissions.length);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
      for (const mission of safeUserMissions) {
        if (mission && typeof mission === 'object' && 'mission_id' in mission) {
          completedMissionsById[mission.mission_id] = true;
        }
      }
    } else {
      console.log('–ú–∞—Å—Å–∏–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –ø—É—Å—Ç');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è UI —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const mappedMissions: Mission[] = [];
    
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–π:', { 
      dbMissions, 
      isArray: Array.isArray(dbMissions),
      length: dbMissions?.length 
    });
    
    if (dbMissions && Array.isArray(dbMissions)) {
      for (const dbMission of dbMissions) {
        if (dbMission && typeof dbMission === 'object') {
          const isCompleted = completedMissionsById[dbMission.id] || false;
          
          try {
            mappedMissions.push({
              id: dbMission.id || 0,
              type: dbMission.type || 'unknown',
              title: dbMission.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
              description: dbMission.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
              rewardUni: typeof dbMission.reward_uni === 'string' ? 
                parseFloat(dbMission.reward_uni) : 
                (typeof dbMission.reward_uni === 'number' ? dbMission.reward_uni : 0),
              status: isCompleted ? MissionStatus.COMPLETED : MissionStatus.AVAILABLE
            });
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∏—Å—Å–∏–∏:', err, dbMission);
          }
        }
      }
    } else {
      console.warn('dbMissions –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', dbMissions);
    }
    
    console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –º–∏—Å—Å–∏–π:', mappedMissions.length);
    
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∏—Å—Å–∏–π:', mappedMissions.length);
    setMissions(mappedMissions);
  }, [dbMissions, userCompletedMissions]);
  
  return {
    missions,
    setMissions,
    isLoading: missionsLoading || userMissionsLoading,
    hasError: !!missionsError || !!userMissionsError
  };
}