import { useEffect, useRef } from 'react';
import { tokenRecoveryService } from '../services/tokenRecoveryService';

/**
 * JWT Token Watcher Hook
 * 
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç JWT —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑-–∑–∞ Telegram WebApp lifecycle cleanup
 */
export const useJwtTokenWatcher = () => {
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const lastTokenCheckRef = useRef<string>('');
  const recoveryInProgressRef = useRef<boolean>(false);

  useEffect(() => {
    console.log('[JWT Watcher] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤');
    
    const checkJwtToken = async () => {
      try {
        const currentToken = localStorage.getItem('unifarm_jwt_token');
        const currentTime = new Date().toISOString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if (!currentToken) {
          console.warn(`[JWT Watcher] üö® JWT —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! Time: ${currentTime}`);
          
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          if (!recoveryInProgressRef.current) {
            recoveryInProgressRef.current = true;
            console.log('[JWT Watcher] –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
            
            try {
              const recovered = await tokenRecoveryService.recoverJwtToken();
              if (recovered) {
                console.log('[JWT Watcher] ‚úÖ JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
              } else {
                console.error('[JWT Watcher] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω');
              }
            } catch (error) {
              console.error('[JWT Watcher] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            } finally {
              recoveryInProgressRef.current = false;
            }
          }
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
        const tokenAge = tokenRecoveryService.getTokenAge(currentToken);
        if (tokenAge > 25 * 60 * 1000) { // 25 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
          console.warn(`[JWT Watcher] ‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ä—ã–π (${Math.round(tokenAge / 60000)} –º–∏–Ω—É—Ç), –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...`);
          
          if (!recoveryInProgressRef.current) {
            recoveryInProgressRef.current = true;
            try {
              await tokenRecoveryService.proactiveTokenRefresh();
              console.log('[JWT Watcher] ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            } catch (error) {
              console.error('[JWT Watcher] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            } finally {
              recoveryInProgressRef.current = false;
            }
          }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        if (currentToken !== lastTokenCheckRef.current) {
          console.log(`[JWT Watcher] üîÑ JWT —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è. Age: ${Math.round(tokenAge / 60000)} –º–∏–Ω—É—Ç`);
          lastTokenCheckRef.current = currentToken;
        }

      } catch (error) {
        console.error('[JWT Watcher] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞:', error);
      }
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
    checkJwtToken();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    intervalRef.current = setInterval(checkJwtToken, 30000);

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
        console.log('[JWT Watcher] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ JWT —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    };
  }, []);

  return {
    isWatching: !!intervalRef.current,
    forceCheck: async () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        const checkJwtToken = async () => {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
          const currentToken = localStorage.getItem('unifarm_jwt_token');
          if (!currentToken && !recoveryInProgressRef.current) {
            recoveryInProgressRef.current = true;
            try {
              await tokenRecoveryService.recoverJwtToken();
            } finally {
              recoveryInProgressRef.current = false;
            }
          }
        };
        await checkJwtToken();
        intervalRef.current = setInterval(checkJwtToken, 30000);
      }
    }
  };
};