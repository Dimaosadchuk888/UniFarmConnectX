import { useState, useEffect } from "react";
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider, useQuery } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { apiRequest } from "@/lib/queryClient";
import { 
  getTelegramUserData, 
  initTelegramWebApp, 
  isTelegramWebApp, 
  getCachedTelegramUserId,
  clearTelegramCache  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
} from "./services/telegramService";
import { extractTelegramInitData, getTelegramUserId, hasTelegramUserId } from "./services/telegramInitData";
import { TonConnectUIProvider } from '@tonconnect/ui-react';
import { TONCONNECT_MANIFEST_URL } from './config/tonConnect';
import { getReferrerIdFromURL } from './lib/utils';
import userService from '@/services/userService';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ Telegram initData
import TelegramInitDataWarning from "@/components/ui/TelegramInitDataWarning";

import Header from "@/components/layout/Header";
import NavigationBar from "@/components/layout/NavigationBar";
import Dashboard from "@/pages/Dashboard";
import Farming from "@/pages/Farming";
import Missions from "@/pages/Missions";
import Friends from "@/pages/Friends";
import Wallet from "@/pages/Wallet";
import TelegramTest from "./pages/TelegramTest";
import WebhookSetup from "./pages/WebhookSetup";
import DebugPage from "./pages/DebugPage";
import AdminPage from "./pages/AdminPage";
import ReferralDebug from "./pages/ReferralDebug";
import AuditPage from "./pages/AuditPage";
import TelegramSetupGuide from "./pages/TelegramSetupGuide";
import TelegramValidationTool from "./pages/TelegramValidationTool";

// For Telegram WebApp types
// –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Telegram WebApp
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        expand: () => void;
        ready: () => void;
        initData: string;
        initDataUnsafe: {
          user?: {
            id: number;
            username?: string;
            first_name?: string;
            last_name?: string;
            photo_url?: string;
          };
          auth_date?: string;
          hash?: string;
          platform?: string;
        };
        platform?: string;
        colorScheme?: string;
        startParam?: string; // –ü–∞—Ä–∞–º–µ—Ç—Ä start= –∏–∑ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        version?: string;    // –í–µ—Ä—Å–∏—è API
        themeParams?: Record<string, string>; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
        MainButton?: {
          show: () => void;
          hide: () => void;
          setText: (text: string) => void;
          onClick: (callback: () => void) => void;
        };
        onEvent?: (eventType: string, callback: () => void) => void;
        sendData?: (data: string) => void;
        openLink?: (url: string) => void;
        close?: () => void;
      };
    };
    // –î–æ–±–∞–≤–ª—è–µ–º localStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    localStorage?: Storage;
    process: {
      env: Record<string, string | undefined>;
    };
    TextEncoder: typeof TextEncoder;
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç RootTelegramDiagnostics —É–¥–∞–ª–µ–Ω

function App() {
  const [activeTab, setActiveTab] = useState("dashboard");
  const [isLoading, setIsLoading] = useState(false);
  const [userId, setUserId] = useState<number | null>(null);
  const [telegramAuthError, setTelegramAuthError] = useState<string | null>(null);
  const [showDiagnostics] = useState(true); // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp –ø–æ –¢–ó
  useEffect(() => {
    const webApp = typeof window !== 'undefined' ? window.Telegram?.WebApp : null;
    console.log('==[ Telegram WebApp Init Check ]==');
    console.log('Telegram.WebApp:', webApp);
    
    // –®–∞–≥ 1.2 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ initData –≤ Telegram WebApp
    console.log('==[ InitData Check ]==', 
      webApp?.initData || null, 
      webApp?.initDataUnsafe || null
    );
    
    if (webApp) {
      console.log('==[ InitData Fields Check ]==', {
        user: !!webApp.initDataUnsafe?.user,
        auth_date: !!webApp.initDataUnsafe?.auth_date,
        hash: !!webApp.initDataUnsafe?.hash
      });
    } else {
      console.log('==[ InitData Fields Check ]==', {
        user: false,
        auth_date: false,
        hash: false
      });
    }
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
    console.log('[App] üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Telegram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    clearTelegramCache();
    console.log('[App] ‚úÖ –ö—ç—à Telegram –æ—á–∏—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
  }, []);

  // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp API
  useEffect(() => {
    // –≠—Ç–∞–ø 1.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è window.Telegram.WebApp
    console.log('[TG AUDIT] –≠—Ç–∞–ø 1.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ window.Telegram.WebApp');
    console.log('[TG AUDIT] window.Telegram —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!window.Telegram);
    console.log('[TG AUDIT] window.Telegram?.WebApp —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!window.Telegram?.WebApp);
    
    const webApp = window.Telegram?.WebApp;

    if (webApp) {
      console.log('[TG AUDIT] ‚úì WebApp API –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      
      // –≠—Ç–∞–ø 1.2: –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–∞–Ω–Ω—ã—Ö
      console.log('[TG AUDIT] –≠—Ç–∞–ø 1.2: –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      console.log('[TG AUDIT] initData:', webApp.initData);
      console.log('[TG AUDIT] initData –¥–ª–∏–Ω–∞:', webApp.initData?.length || 0);
      console.log('[TG AUDIT] initDataUnsafe:', webApp.initDataUnsafe);
      console.log('[TG AUDIT] initDataUnsafe.user:', webApp.initDataUnsafe?.user);
      console.log('[TG AUDIT] initDataUnsafe.auth_date:', webApp.initDataUnsafe?.auth_date);
      console.log('[TG AUDIT] initDataUnsafe.hash:', webApp.initDataUnsafe?.hash);
      console.log('[TG AUDIT] platform:', webApp.platform);
      console.log('[TG AUDIT] version:', webApp.version);
      console.log('[TG AUDIT] colorScheme:', webApp.colorScheme);
      console.log('[TG AUDIT] themeParams:', webApp.themeParams);
      console.log('[TG AUDIT] startParam:', webApp.startParam);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
      if (!webApp.initData || !webApp.initDataUnsafe?.user) {
        console.error('[TG AUDIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞: Telegram WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
      } else {
        console.log('[TG AUDIT] ‚úì –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      }
      
      // –≠—Ç–∞–ø 1.3: –í—ã–∑–æ–≤ Telegram.WebApp.ready()
      console.log('[TG AUDIT] –≠—Ç–∞–ø 1.3: –í—ã–∑–æ–≤ Telegram.WebApp.ready()');
      try {
        webApp.ready();
        console.log('[TG AUDIT] ‚úì –ú–µ—Ç–æ–¥ webApp.ready() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('[TG AUDIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ webApp.ready():', error);
      }
      
      // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      try {
        webApp.expand();
        console.log('[TG AUDIT] ‚úì –ú–µ—Ç–æ–¥ webApp.expand() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('[TG AUDIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ webApp.expand():', error);
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
      authenticateWithTelegram();
    } else {
      console.error('[TG AUDIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞: Telegram WebApp –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      console.log('[TG AUDIT] –î–µ—Ç–∞–ª–∏ window:', {
        windowDefined: typeof window !== 'undefined',
        telegramDefined: typeof window.Telegram !== 'undefined',
        userAgent: navigator.userAgent,
        isIframe: window.self !== window.top,
        documentURL: window.location.href
      });
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∞–∂–µ –±–µ–∑ Telegram WebApp
      authenticateWithTelegram();
    }
  }, []);

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–∞–Ω–Ω–µ—Ä —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–æ–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤ telegramInitData.ts
  const authenticateWithTelegram = async () => {
    try {
      setIsLoading(true);
      setTelegramAuthError(null);

      // –ê–£–î–ò–¢: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram WebApp
      const telegramInitData = extractTelegramInitData();
      console.log('[App] –ê–£–î–ò–¢: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Telegram WebApp —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:', {
        isValid: telegramInitData.isValid,
        userId: telegramInitData.userId || '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        startParam: telegramInitData.startParam || '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        errors: telegramInitData.validationErrors
      });
      
      // –ü–æ–ª—É—á–∞–µ–º userId —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const telegramUserId = getTelegramUserId();
      const oldTelegramData = getTelegramUserData();
      
      console.log('[App] –ê–£–î–ò–¢: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ID:', {
        newMethod: telegramUserId,
        oldMethod: oldTelegramData?.userId || '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        dataValid: !!oldTelegramData
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã,
      // –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–∞–¥–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—É—é –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é
      let authData = null;
      let hasTelegramValidData = telegramInitData.isValid && telegramInitData.userId;
      
      if (hasTelegramValidData) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
        // –î–æ–±–∞–≤–ª—è–µ–º refCode –≤ –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        authData = {
          id: telegramInitData.userId,
          initData: telegramInitData.rawInitData,
          username: telegramInitData.username,
          firstName: telegramInitData.firstName,
          lastName: telegramInitData.lastName,
          photoUrl: telegramInitData.photoUrl,
          startParam: telegramInitData.startParam,
          refCode: telegramInitData.refCode  // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ refCode –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        };
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if (telegramInitData.refCode) {
          console.log('[App] –ê–£–î–ò–¢: –ò–∑–≤–ª–µ—á–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ Telegram WebApp:', telegramInitData.refCode);
        }
        console.log('[App] –ê–£–î–ò–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, ID:', telegramInitData.userId);
      } else if (oldTelegramData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
        authData = oldTelegramData.authData;
        console.log('[App] –ê–£–î–ò–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, ID:', oldTelegramData.userId);
      }
      
      if (!authData) {
        console.warn('[App] –ê–£–î–ò–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram WebApp –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –º–µ—Ç–æ–¥');
        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        // setTelegramAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
        setIsLoading(false);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ URL
      const referrerId = getReferrerIdFromURL();
      console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ URL:', referrerId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log('[App] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', {
        hasAuthData: !!authData,
        authDataType: authData ? typeof authData : null,
        authDataFormat: authData && typeof authData === 'object' ? 'object' : 
                       (authData && typeof authData === 'string' ? 'string' : 'unknown'),
        referrerId: referrerId
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö authData
      let requestBody;
      if (authData && typeof authData === 'object') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: refCode –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ extractTelegramInitData)
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: referrerId –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–µ—Ç–æ–¥ getReferrerIdFromURL)
        const refCodeToUse = authData.refCode || null;
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        console.log('[App] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
          refCodeFromInitData: authData.refCode || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          refCodeFromURL: referrerId || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          finalRefCode: refCodeToUse || referrerId || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        });
        
        // –ï—Å–ª–∏ authData —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        requestBody = JSON.stringify({
          authData: authData.initData || '', // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º—É —Å—Ç—Ä–æ–∫—É initData, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
          userId: authData.id,
          username: authData.username,
          firstName: authData.firstName,
          lastName: authData.lastName,
          startParam: authData.startParam,
          refCode: refCodeToUse,     // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
          referrerId: referrerId     // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        });
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        requestBody = JSON.stringify({ 
          authData: authData, 
          referrerId: referrerId
        });
      }
      
      const authResult = await apiRequest('/api/auth/telegram', {
        method: 'POST',
        body: requestBody
      });

      if (authResult.success && authResult.data) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserId(authResult.data.user_id);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', authResult.data);
        
        // –ï—Å–ª–∏ –±—ã–ª —Ä–µ—Ñ–µ—Ä–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (referrerId && authResult.data.referrer_registered) {
          console.log('–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', referrerId);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Toast –∏–ª–∏ –¥—Ä—É–≥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        queryClient.invalidateQueries({ queryKey: ['/api/wallet/balance'] });
      } else {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        setTelegramAuthError(authResult.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      setTelegramAuthError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setIsLoading(false);
    }
  };

  // Switch between tabs without using routes (simpler for Telegram Mini App)
  const renderActivePage = () => {
    // –≠–¢–ê–ü 4.1: –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é.
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Friends, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤–æ –≤—Å–µ—Ö —Å—Ä–µ–¥–∞—Ö.
    
    switch (activeTab) {
      case "dashboard":
        return <Dashboard />;
      case "farming":
        return <Farming />;
      case "missions":
        return <Missions />;
      case "friends":
        // –≠–¢–ê–ü 4.1: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Friends
        return <Friends />;
      case "wallet":
        return <Wallet />;
      default:
        return <Dashboard />;
    }
  };

  return (
    <QueryClientProvider client={queryClient}>
      <TonConnectUIProvider manifestUrl="https://universegames8.github.io/tonconnect-manifest/tonconnect-manifest.json">
        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ —É–¥–∞–ª–µ–Ω */}
        
        <div className="max-w-md mx-auto min-h-screen bg-background pb-20 relative">
          <Switch>
            {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram */}
            <Route path="/telegram-test">
              <TelegramTest />
            </Route>
            
            {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏ Telegram Mini App */}
            <Route path="/debug">
              <DebugPage />
            </Route>
            
            {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Webhook */}
            <Route path="/webhook-setup">
              <WebhookSetup />
            </Route>
            
            {/* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ */}
            <Route path="/admin">
              <AdminPage />
            </Route>
            
            {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã */}
            <Route path="/referral-debug">
              <ReferralDebug />
            </Route>
            
            {/* –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
            <Route path="/audit">
              <AuditPage />
            </Route>
            
            {/* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram initData */}
            <Route path="/telegram-validation">
              <TelegramValidationTool />
            </Route>
            
            {/* –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram Mini App */}
            <Route path="/telegram-setup">
              <TelegramSetupGuide />
            </Route>
            
            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
            <Route path="*">
              <Header />
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å Telegram WebApp */}
              <TelegramInitDataWarning />
              <main className="px-4 pt-2 pb-20">
                {isLoading ? (
                  <div className="flex items-center justify-center h-32">
                    <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full"></div>
                  </div>
                ) : (
                  /* –ü—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
                  renderActivePage()
                )}
              </main>
              <NavigationBar activeTab={activeTab} setActiveTab={setActiveTab} />
            </Route>
          </Switch>
        </div>
        <Toaster />
      </TonConnectUIProvider>
    </QueryClientProvider>
  );
}

export default App;
