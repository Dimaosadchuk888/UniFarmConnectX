import React, { useState, useEffect } from "react";
import { QueryClientProvider } from "@tanstack/react-query";
import { TonConnectUIProvider } from "@tonconnect/ui-react";
import { queryClient } from "./lib/queryClient";
import { Toaster } from "@/components/ui/toaster";

// Layouts and Hooks
import MainLayout from "@/layouts/MainLayout";
import { useTelegram } from "@/hooks/useTelegram";
import { useAutoAuth } from "@/hooks/useAutoAuth";
import { useJwtTokenWatcher } from "@/hooks/useJwtTokenWatcher";

// Components
import TelegramWebAppCheck from "@/components/ui/TelegramWebAppCheck";
import ErrorBoundary from "@/components/ui/ErrorBoundary";
import TonConnectErrorBoundary from "@/components/ui/TonConnectErrorBoundary";
import { UserProvider } from "@/contexts/userContext";
import { WebSocketProvider } from "@/contexts/webSocketContext";
import { NotificationProvider } from "@/contexts/NotificationContext";

import NetworkStatusIndicator from "@/components/common/NetworkStatusIndicator";
import { WebSocketBalanceSync } from "@/components/WebSocketBalanceSync";
// import { JwtTokenStatus } from "@/components/JwtTokenStatus"; // –£–ë–†–ê–ù –ò–ó UI - JWT –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ


// Pages
import Dashboard from "@/pages/Dashboard";
import Farming from "@/pages/Farming";
import Missions from "@/pages/Missions";
import Friends from "@/pages/Friends";
import Wallet from "@/pages/Wallet";

// Services
import userService from '@/services/userService';
import { getReferrerIdFromURL } from './lib/utils';
import { CacheManager } from '@/utils/cacheManager';
import { forceApplicationRefresh } from '@/utils/forceRefresh';

// Types
interface AppState {
  isLoading: boolean;
  userId: number | null;
  activeTab: string;
  authError: string | null;
  isReloadingAuth: boolean;
}

function App() {
  const [state, setState] = useState<AppState>({
    isLoading: true,
    userId: null,
    activeTab: "dashboard",
    authError: null,
    isReloadingAuth: false
  });

  // Preview mode detection - token should be set via authentication flow
  useEffect(() => {
    if (window.location.hostname.includes('railway') && !localStorage.getItem('unifarm_jwt_token')) {
      console.log('[App] Preview mode detected, no JWT token found - authentication required');
    }
  }, []);

  const { isReady: telegramReady, user: telegramUser, initData } = useTelegram();
  const { isAuthenticating, authError: autoAuthError } = useAutoAuth();
  
  // JWT Token Protection System - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const { isWatching } = useJwtTokenWatcher();
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å JWT –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  useEffect(() => {
    console.log(`[JWT_PROTECTION] –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤: ${isWatching ? '–ê–ö–¢–ò–í–ù–ê' : '–ù–ï–ê–ö–¢–ò–í–ù–ê'}`);
  }, [isWatching]);

  // Initialize app
  useEffect(() => {
    console.log('[App] Component mounted, auto auth status:', { isAuthenticating, autoAuthError });
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–ï–®–ê –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI
    console.log('üîÑ [App] –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    forceApplicationRefresh();
    
    initializeApp();
  }, []);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (autoAuthError) {
      console.error('[App] Auto auth error:', autoAuthError);
    }
  }, [autoAuthError]);

  const initializeApp = async () => {
    try {
      // Force cache clear for all users to eliminate old bugs
      const cacheCleared = CacheManager.checkVersionAndClearCache();
      if (cacheCleared) {
        console.log('üîÑ Cache cleared - user will get fresh version without bugs');
      }
      setState(prev => ({ ...prev, isLoading: true, authError: null }));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      setState(prev => ({ 
        ...prev, 
        isLoading: false,
        userId: 1 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π ID –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      }));
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      try {
        await authenticateUser();
      } catch (authError) {
        console.warn('Authentication failed, continuing with demo mode:', authError);
      }
    } catch (error) {
      console.error('App initialization error:', error);
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      setState(prev => ({ 
        ...prev, 
        isLoading: false,
        userId: 1
      }));
    }
  };

  const authenticateUser = async () => {
    console.log('[App] authenticateUser –≤—ã–∑–≤–∞–Ω');
    console.log('[App] Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram?.WebApp);
    console.log('[App] Telegram initData:', window.Telegram?.WebApp?.initData ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      // –û–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã: startapp, ref_code, refCode, start_param
      const refCode = getReferrerIdFromURL();

      if (refCode) {
        sessionStorage.setItem('referrer_code', refCode);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('[App] Referral code found via getReferrerIdFromURL():', {
          refCode: refCode,
          source: 'getReferrerIdFromURL_function'
        });
      } else {
        console.log('[App] No referral code found in any source');
      }

      // Get or create guest ID
      const guestId = getOrCreateGuestId();
      
      // Save guest ID for future sessions
      localStorage.setItem('unifarm_guest_id', guestId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp
      if (window.Telegram?.WebApp?.initData) {
        console.log('[App] –ù–∞–π–¥–µ–Ω Telegram WebApp, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        
        try {
          const response = await fetch('/api/v2/auth/telegram', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Telegram-Init-Data': window.Telegram.WebApp.initData
            },
            body: JSON.stringify({
              initData: window.Telegram.WebApp.initData,
              ref_by: refCode || undefined
            })
          });

          if (response.ok) {
            const data = await response.json();
            if (data.success && data.data?.token) {
              console.log('[App] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º JWT —Ç–æ–∫–µ–Ω');
              localStorage.setItem('unifarm_jwt_token', data.data.token);
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              if (data.data.user) {
                setState(prev => ({
                  ...prev,
                  userId: data.data.user.id,
                  authError: null
                }));
              }
              
              // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!
              console.log('[App] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
              setState(prev => ({ 
                ...prev, 
                isLoading: false,
                isAuthenticated: true 
              }));
            }
          } else {
            console.error('[App] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status, response.statusText);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if (response.status === 401) {
              try {
                const errorData = await response.json();
                if (errorData.error && 
                    (errorData.error.includes('Authentication required') || errorData.need_jwt_token)) {
                  console.log('[App] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
                  setState(prev => ({ ...prev, isReloadingAuth: true, isLoading: false }));
                  setTimeout(() => {
                    window.location.href = window.location.href;
                  }, 2000);
                  return;
                }
              } catch (parseError) {
                console.error('[App] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', parseError);
              }
            }
          }
        } catch (authError) {
          console.error('[App] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ auth/telegram:', authError);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const errorMessage = authError instanceof Error ? authError.message : String(authError);
          if (errorMessage.includes('Authentication required') || 
              errorMessage.includes('need_jwt_token') ||
              errorMessage.includes('401')) {
            console.log('[App] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ catch –±–ª–æ–∫–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
            setState(prev => ({ ...prev, isReloadingAuth: true, isLoading: false }));
            setTimeout(() => {
              window.location.href = window.location.href;
            }, 2000);
            return;
          }
        }
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
        const existingToken = localStorage.getItem('unifarm_jwt_token');
        console.log('[App] –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞:', existingToken ? '–ù–∞–π–¥–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        if (!existingToken) {
          console.log('[App] Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ—Ç JWT —Ç–æ–∫–µ–Ω–∞');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Preview —Ä–µ–∂–∏–º–µ Railway
          const hostname = window.location.hostname;
          const isRailwayPreview = hostname.includes('railway');
          console.log('[App] Hostname:', hostname, 'Is Railway Preview:', isRailwayPreview);
          
          if (isRailwayPreview) {
            console.log('[App] Preview —Ä–µ–∂–∏–º Railway - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            
            try {
              // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Preview —Ä–µ–∂–∏–º–∞
              const response = await fetch('/api/v2/auth/telegram', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  direct_registration: true,
                  telegram_id: 999489, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
                  username: 'test_user_1752129840905',
                  first_name: 'Test'
                })
              });

              console.log('[App] Preview auth response status:', response.status);
              const data = await response.json();
              console.log('[App] Preview auth response data:', data);

              if (response.ok && data.success && data.data?.token) {
                console.log('[App] Preview –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω');
                localStorage.setItem('unifarm_jwt_token', data.data.token);
                console.log('[App] –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∞');
                // –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!
                // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                setState(prev => ({ 
                  ...prev, 
                  isLoading: false,
                  isAuthenticated: true 
                }));
              } else {
                console.error('[App] Preview –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', data.error || 'Unknown error');
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if (data.error && 
                    (data.error.includes('Authentication required') || data.need_jwt_token)) {
                  console.log('[App] Preview —Ä–µ–∂–∏–º: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
                  setState(prev => ({ ...prev, isReloadingAuth: true, isLoading: false }));
                  setTimeout(() => {
                    window.location.href = window.location.href;
                  }, 2000);
                  return;
                }
              }
            } catch (error) {
              console.error('[App] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è preview –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              const errorMessage = error instanceof Error ? error.message : String(error);
              if (errorMessage.includes('Authentication required') || 
                  errorMessage.includes('need_jwt_token') ||
                  errorMessage.includes('401')) {
                console.log('[App] Preview —Ä–µ–∂–∏–º: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ catch –±–ª–æ–∫–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
                setState(prev => ({ ...prev, isReloadingAuth: true, isLoading: false }));
                setTimeout(() => {
                  window.location.href = window.location.href;
                }, 2000);
                return;
              }
            }
          } else {
            console.log('[App] –ù–µ –≤ Preview —Ä–µ–∂–∏–º–µ Railway, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
          }
        } else {
          console.log('[App] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JWT —Ç–æ–∫–µ–Ω');
        }
      }
      
      console.log('Demo mode: using guest ID', guestId);
    } catch (error) {
      console.warn('Authentication skipped, continuing in demo mode:', error);
    }
  };

  const getOrCreateGuestId = () => {
    let guestId = localStorage.getItem('unifarm_guest_id');
    
    if (!guestId) {
      guestId = 'guest_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('unifarm_guest_id', guestId);
    }
    
    return guestId;
  };

  const handleTabChange = (tab: string) => {
    setState(prev => ({ ...prev, activeTab: tab }));
  };

  const renderPage = () => {
    switch (state.activeTab) {
      case "dashboard":
        return <Dashboard />;
      case "farming":
        return <Farming />;
      case "missions":
        return <Missions />;
      case "friends":
        return <Friends />;
      case "wallet":
        return <Wallet />;
      default:
        return <Dashboard />;
    }
  };

  // Loading state
  if (state.isLoading || state.isReloadingAuth) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">
            {state.isReloadingAuth 
              ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...' 
              : '–ó–∞–≥—Ä—É–∑–∫–∞ UniFarm...'
            }
          </p>
          {state.isReloadingAuth && (
            <p className="text-xs text-muted-foreground mt-2">
              –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            </p>
          )}
        </div>
      </div>
    );
  }

  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  // –û—à–∏–±–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç UI

  return (
    <QueryClientProvider client={queryClient}>
      <ErrorBoundary>
        <TonConnectUIProvider manifestUrl="https://web-production-8e45b.up.railway.app/tonconnect-manifest.json">
          <TonConnectErrorBoundary>
              <NotificationProvider>
                <UserProvider>
                  <WebSocketProvider>
                  <WebSocketBalanceSync />
                  <TelegramWebAppCheck>
                    <MainLayout 
                      activeTab={state.activeTab} 
                      onTabChange={handleTabChange}
                    >
                      {renderPage()}
                    </MainLayout>
                    {/* <JwtTokenStatus /> - –°–ö–†–´–¢–û: JWT –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                    {/* <NetworkStatusIndicator /> */}
                    <Toaster />
                  </TelegramWebAppCheck>
                  </WebSocketProvider>
                </UserProvider>
              </NotificationProvider>
          </TonConnectErrorBoundary>
        </TonConnectUIProvider>
      </ErrorBoundary>
    </QueryClientProvider>
  );
}

export default App;