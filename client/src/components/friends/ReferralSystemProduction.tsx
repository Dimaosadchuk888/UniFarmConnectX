import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { FiCopy as Copy, FiUsers as Users, FiTrendingUp as TrendingUp, FiGift as Gift } from 'react-icons/fi';
import { useToast } from '@/hooks/use-toast';
import { correctApiRequest } from '@/lib/correctApiRequest';
import { useUser } from '@/contexts/userContext';

interface ReferralStats {
  totalReferrals: number;
  activeReferrals: number;
  totalEarned: {
    UNI: string;
    TON: string;
  };
  monthlyEarned: {
    UNI: string;
    TON: string;
  };
}

interface ReferralLevel {
  level: number;
  referrals: number;
  commission: string;
  earnings: {
    UNI: string;
    TON: string;
  };
}

export const ReferralSystemProduction: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();
  const user = useUser();
  const userId = user?.userId || 48; // fallback –¥–ª—è –¥–µ–º–æ

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö (–≤–∫–ª—é—á–∞–µ—Ç –∫–æ–¥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
  const { data: referralInfoData, refetch: refetchReferralInfo } = useQuery({
    queryKey: ['/api/v2/referrals/info', userId],
    queryFn: async () => await correctApiRequest(`/api/v2/referrals/${userId}`),
    enabled: !!userId,
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const { data: referralsData } = useQuery({
    queryKey: ['/api/v2/referrals/list', userId],
    queryFn: async () => await correctApiRequest(`/api/v2/referrals/${userId}/list`),
    enabled: !!userId,
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  const referralCode = referralInfoData?.ref_code || user?.refCode || '';
  const referralLink = `https://t.me/UniFarming_Bot?start=${referralCode}`;
  
  // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ referralInfoData
  const stats: ReferralStats = referralInfoData?.stats ? {
    totalReferrals: referralInfoData.stats.totalReferrals || 0,
    activeReferrals: referralInfoData.stats.activeReferrals || 0,
    totalEarned: {
      UNI: referralInfoData.stats.totalEarned?.UNI || '0.00',
      TON: referralInfoData.stats.totalEarned?.TON || '0.00'
    },
    monthlyEarned: {
      UNI: referralInfoData.stats.monthlyEarned?.UNI || '0.00',
      TON: referralInfoData.stats.monthlyEarned?.TON || '0.00'
    }
  } : {
    totalReferrals: 0,
    activeReferrals: 0,
    totalEarned: { UNI: '0.00', TON: '0.00' },
    monthlyEarned: { UNI: '0.00', TON: '0.00' }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 20-—É—Ä–æ–≤–Ω–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ –∏–∑ backend
  const referralLevels: ReferralLevel[] = Array.from({ length: 20 }, (_, i) => {
    const level = i + 1;
    let commission = '0%';
    
    // –ú–æ–¥–µ–ª—å –∫–æ–º–∏—Å—Å–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ backend
    if (level === 1) commission = '100%';
    else if (level === 2) commission = '2%';
    else commission = `${level}%`; // 3-20%
    
    return {
      level,
      referrals: 0, // –í –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      commission,
      earnings: {
        UNI: '0.00',
        TON: '0.00'
      }
    };
  });

  const copyReferralLink = () => {
    if (!referralCode) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω",
        variant: "destructive"
      });
      return;
    }
    
    navigator.clipboard.writeText(referralLink);
    toast({
      title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!",
      description: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const generateNewCode = async () => {
    setLoading(true);
    try {
      await correctApiRequest('/api/v2/referrals/generate-code', 'POST', { userId });
      await refetchReferralInfo();
      toast({
        title: "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        description: "–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ */}
      <Card className="bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Gift className="w-5 h-5 text-purple-600" />
            <span className="bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            </span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-white rounded-lg p-4 border border-purple-200">
            <div className="flex items-center justify-between">
              <div className="flex-1 mr-4">
                <p className="text-sm text-gray-500 mb-1">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</p>
                <p className="font-mono text-lg font-semibold text-purple-700">
                  {referralCode || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  {referralLink}
                </p>
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={copyReferralLink}
                  size="sm"
                  className="bg-purple-600 hover:bg-purple-700"
                  disabled={!referralCode}
                >
                  <Copy className="w-4 h-4 mr-2" />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Button
                  onClick={generateNewCode}
                  size="sm"
                  variant="outline"
                  disabled={loading}
                >
                  {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
                </Button>
              </div>
            </div>
          </div>
          
          <div className="text-sm text-gray-600">
            <p>üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏</p>
            <p>üéØ –ü–æ–ª—É—á–∞–π—Ç–µ 100% –æ—Ç –∏—Ö –¥–æ—Ö–æ–¥–∞ –Ω–∞ 1-–º —É—Ä–æ–≤–Ω–µ</p>
            <p>üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã —Å 2-20 —É—Ä–æ–≤–Ω–µ–π</p>
          </div>
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <Users className="w-8 h-8 text-blue-600" />
              <div>
                <p className="text-2xl font-bold text-blue-600">{stats.totalReferrals}</p>
                <p className="text-sm text-gray-500">–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <TrendingUp className="w-8 h-8 text-green-600" />
              <div>
                <p className="text-2xl font-bold text-green-600">{stats.activeReferrals}</p>
                <p className="text-sm text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div>
              <p className="text-lg font-bold text-purple-600">{stats.totalEarned.UNI} UNI</p>
              <p className="text-lg font-bold text-blue-600">{stats.totalEarned.TON} TON</p>
              <p className="text-sm text-gray-500">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ</p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div>
              <p className="text-lg font-bold text-purple-600">{stats.monthlyEarned.UNI} UNI</p>
              <p className="text-lg font-bold text-blue-600">{stats.monthlyEarned.TON} TON</p>
              <p className="text-sm text-gray-500">–ó–∞ –º–µ—Å—è—Ü</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-green-600" />
            20-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–∏—Å—Å–∏–π
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>–£—Ä–æ–≤–µ–Ω—å</TableHead>
                  <TableHead>–ö–æ–º–∏—Å—Å–∏—è</TableHead>
                  <TableHead>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤</TableHead>
                  <TableHead>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ UNI</TableHead>
                  <TableHead>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ TON</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {referralLevels.map((level) => (
                  <TableRow key={level.level}>
                    <TableCell>
                      <Badge variant={level.level === 1 ? "default" : "secondary"}>
                        {level.level}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <span className={level.level === 1 ? "font-bold text-green-600" : ""}>
                        {level.commission}
                      </span>
                    </TableCell>
                    <TableCell>{level.referrals}</TableCell>
                    <TableCell className="text-purple-600 font-medium">
                      {level.earnings.UNI}
                    </TableCell>
                    <TableCell className="text-blue-600 font-medium">
                      {level.earnings.TON}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ */}
      {referralsData?.referrals && referralsData.referrals.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5 text-blue-600" />
              –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {referralsData.referrals.map((referral: any, index: number) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium">{referral.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referral.id}`}</p>
                    <p className="text-sm text-gray-500">
                      –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {new Date(referral.created_at).toLocaleDateString()}
                    </p>
                  </div>
                  <Badge variant="outline">
                    –£—Ä–æ–≤–µ–Ω—å {referral.level || 1}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};