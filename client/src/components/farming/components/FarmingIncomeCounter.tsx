import React, { useState, useEffect, useMemo } from 'react';
import BigNumber from 'bignumber.js';

interface FarmingIncomeCounterProps {
  depositAmount: string | number;
  rate: number; // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (0.01 = 1% –≤ –¥–µ–Ω—å)
  lastUpdate: string | null;
  isActive: boolean;
}

const FarmingIncomeCounter: React.FC<FarmingIncomeCounterProps> = ({
  depositAmount,
  rate,
  lastUpdate,
  isActive
}) => {
  const [accumulatedIncome, setAccumulatedIncome] = useState<string>('0');
  const [currentTime, setCurrentTime] = useState(Date.now());

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ BigNumber –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
  const deposit = useMemo(() => {
    try {
      return new BigNumber(depositAmount || 0);
    } catch {
      return new BigNumber(0);
    }
  }, [depositAmount]);

  const dailyRate = useMemo(() => {
    try {
      return new BigNumber(rate || 0);
    } catch {
      return new BigNumber(0);
    }
  }, [rate]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    if (!isActive) return;

    const timer = setInterval(() => {
      setCurrentTime(Date.now());
    }, 1000);

    return () => clearInterval(timer);
  }, [isActive]);

  // –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  useEffect(() => {
    if (!isActive || !lastUpdate || deposit.isZero() || dailyRate.isZero()) {
      setAccumulatedIncome('0');
      return;
    }

    try {
      const lastUpdateTime = new Date(lastUpdate).getTime();
      const now = currentTime;
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç
      if (isNaN(lastUpdateTime) || lastUpdateTime > now) {
        setAccumulatedIncome('0');
        return;
      }

      // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω—è—Ö —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const millisecondsElapsed = now - lastUpdateTime;
      const daysElapsed = millisecondsElapsed / (1000 * 60 * 60 * 24);

      // –§–æ—Ä–º—É–ª–∞: income = depositAmount * rate * daysElapsed
      const income = deposit
        .multipliedBy(dailyRate)
        .multipliedBy(daysElapsed);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
      setAccumulatedIncome(income.toFixed(6));
    } catch (error) {
      console.error('[FarmingIncomeCounter] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
      setAccumulatedIncome('0');
    }
  }, [currentTime, deposit, dailyRate, lastUpdate, isActive]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatIncome = (value: string): string => {
    const num = parseFloat(value);
    if (isNaN(num)) return '0.00';
    
    // –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
    if (num < 0.01 && num > 0) {
      return num.toFixed(6);
    }
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –∑–Ω–∞–∫–∞
    return num.toFixed(2);
  };

  // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  const incomePerSecond = useMemo(() => {
    if (deposit.isZero() || dailyRate.isZero()) return '0';
    
    // –î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É = (–¥–µ–ø–æ–∑–∏—Ç * —Å—Ç–∞–≤–∫–∞) / (24 * 60 * 60)
    const secondlyIncome = deposit
      .multipliedBy(dailyRate)
      .dividedBy(86400);
    
    return secondlyIncome.toFixed(8);
  }, [deposit, dailyRate]);

  if (!isActive) {
    return null;
  }

  return (
    <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
      <div className="flex items-center justify-between mb-2">
        <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
          –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥:
        </span>
        <div className="text-right">
          <div className="text-lg font-bold text-blue-600 dark:text-blue-400">
            +{formatIncome(accumulatedIncome)} UNI
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400">
            ~{formatIncome(incomePerSecond)} UNI/—Å–µ–∫
          </div>
        </div>
      </div>
      
      {/* –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
      <div className="flex items-center gap-2 mt-2">
        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
        <span className="text-xs text-gray-500 dark:text-gray-400">
          –î–æ—Ö–æ–¥ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </span>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div className="mt-3 p-2 bg-blue-100 dark:bg-blue-900/30 rounded text-xs text-gray-600 dark:text-gray-400">
        üí° –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      </div>
    </div>
  );
};

export default FarmingIncomeCounter;