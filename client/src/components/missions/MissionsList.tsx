import { useEffect, useState, useRef } from 'react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { 
  FiCheckCircle, 
  FiClock, 
  FiAlertCircle, 
  FiMessageCircle, 
  FiUsers, 
  FiCalendar, 
  FiDollarSign, 
  FiTv,
  FiUserPlus,
  FiTarget
} from 'react-icons/fi';
import { motion } from 'framer-motion';
import ConfettiEffect from '@/components/ui/ConfettiEffect';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { toast } from '@/hooks/use-toast';
import { useUser } from '@/contexts/userContext';
import { invalidateQueryWithUserId } from '@/lib/queryClient';
import { correctApiRequest } from '@/lib/correctApiRequest';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π
export enum MissionStatus {
  AVAILABLE = 'available',
  PROCESSING = 'processing',
  COMPLETED = 'completed'
}

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –∏–∑ –ë–î
interface DbMission {
  id: number;
  type: string;
  title: string;
  description: string;
  reward_uni: string; // –í –ë–î —ç—Ç–æ numeric –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  is_active: boolean;
  link?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
}

// –¢–∏–ø –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserMission {
  id: number;
  user_id: number;
  mission_id: number;
  completed_at: string;
}

// –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏
interface CompleteMissionResponse {
  success: boolean;
  message: string;
  reward?: number;
}

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –¥–ª—è UI
interface Mission {
  id: number;
  type: string;
  title: string;
  description: string;
  rewardUni: number;
  status: MissionStatus;
  progress?: number; // –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100
  visitStartTime?: number; // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏
  verificationAvailable?: boolean; // –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
  link?: string; // —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
}

export const MissionsList: React.FC = () => {
  const queryClient = useQueryClient();
  const { userId } = useUser(); // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [missions, setMissions] = useState<Mission[]>([]);
  const [showConfetti, setShowConfetti] = useState(false);
  const [completedMissionId, setCompletedMissionId] = useState<number | null>(null);
  const [rewardAmount, setRewardAmount] = useState<number | null>(null);
  const [processingMissionId, setProcessingMissionId] = useState<number | null>(null);
  const [timerIntervalId, setTimerIntervalId] = useState<number | null>(null);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º queryFn
  const { data: dbMissions, isLoading: missionsLoading, error: missionsError } = useQuery<DbMission[]>({
    queryKey: ['/api/v2/missions/active'],
    queryFn: async () => {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π');
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º nocache –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log(`üì§ GET –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º correctApiRequest`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ nocache –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const nocache = Date.now();
        const user_id = userId || 35; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π user_id –∏–ª–∏ 35 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const data = await correctApiRequest(`/api/v2/missions/active?user_id=${user_id}&nocache=${nocache}`, 'GET');
        
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        if (data && data.success && Array.isArray(data.data)) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ (${data.data.length} —à—Ç.)`);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          return [];
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∏—Å—Å–∏–π:', error);
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
        return [];
      }
    },
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    retry: false,
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ 
    staleTime: 0
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º queryFn
  const { data: userCompletedMissions, isLoading: userMissionsLoading, error: userMissionsError } = useQuery<UserMission[]>({
    queryKey: ['/api/v2/user-missions', userId],
    queryFn: async () => {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', userId);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å nocache
        console.log(`üì§ GET –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º correctApiRequest`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º nocache –ø–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        const nocache = Date.now();
        const data = await correctApiRequest(`/api/v2/user-missions?user_id=${userId || 1}&nocache=${nocache}`, 'GET');
        
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        if (data && data.success && Array.isArray(data.data)) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ (${data.data.length} —à—Ç.)`);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          return [];
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
        return [];
      }
    },
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    retry: false,
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    staleTime: 0,
    // –í–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    enabled: !!userId
  });
  
  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (timerIntervalId !== null) {
        clearInterval(timerIntervalId);
      }
    };
  }, [timerIntervalId]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI
  useEffect(() => {
    try {
      console.log('MissionsList: dbMissions –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', dbMissions ? '–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã' : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç null/undefined –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!dbMissions) {
        console.log('MissionsList: dbMissions –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –º–∏—Å—Å–∏–π');
        setMissions([]);
        return;
      }
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
      if (!Array.isArray(dbMissions)) {
        console.log('MissionsList: dbMissions –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –º–∏—Å—Å–∏–π');
        setMissions([]);
        return;
      }
      
      console.log(`MissionsList: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dbMissions.length} –º–∏—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
      
      // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–∞—Ä—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
      const completedMissionsMap = new Map<number, UserMission>();
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∏—Å—Å–∏–∏
      if (userCompletedMissions && Array.isArray(userCompletedMissions)) {
        console.log(`MissionsList: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${userCompletedMissions.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π`);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –º–∞—Å—Å–∏–≤—É
        userCompletedMissions.forEach(mission => {
          if (mission && typeof mission === 'object' && 'mission_id' in mission && typeof mission.mission_id === 'number') {
            completedMissionsMap.set(mission.mission_id, mission);
          }
        });
        
        console.log(`MissionsList: –≤ –∫–∞—Ä—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–æ ${completedMissionsMap.size} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π`);
      } else {
        console.log('MissionsList: –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DbMission[] –≤ Mission[] —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
      const mappedMissions: Mission[] = dbMissions
        .filter(dbMission => dbMission && typeof dbMission === 'object' && dbMission.id !== undefined)
        .map(dbMission => {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –º–∏—Å—Å–∏—è
          const isCompleted = dbMission.id !== undefined && completedMissionsMap.has(dbMission.id);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–π—Å—Ç–≤
          return {
            id: dbMission.id as number,
            type: dbMission.type || 'default',
            title: dbMission.title || '–ú–∏—Å—Å–∏—è',
            description: dbMission.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            rewardUni: typeof dbMission.reward_uni === 'string' ? parseFloat(dbMission.reward_uni) || 0 : 0,
            status: isCompleted ? MissionStatus.COMPLETED : MissionStatus.AVAILABLE,
            link: dbMission.link // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          };
        });
      
      console.log(`MissionsList: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${mappedMissions.length} –º–∏—Å—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setMissions(mappedMissions);
    } catch (error) {
      console.error('MissionsList: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
      // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      setMissions([]);
    }
  }, [dbMissions, userCompletedMissions]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
  const handleCompleteMission = async (missionId: number) => {
    try {
      // –û—Ç–º–µ—á–∞–µ–º –º–∏—Å—Å–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
      setProcessingMissionId(missionId);
      setMissions(missions.map(mission => 
        mission.id === missionId 
          ? { ...mission, status: MissionStatus.PROCESSING, progress: 0 } 
          : mission
      ));
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ correctApiRequest
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ ${missionId} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º correctApiRequest`);
      
      const result = await correctApiRequest('/api/v2/missions/complete', 'POST', {
        user_id: userId || 1,
        mission_id: missionId
      }) as CompleteMissionResponse;
      
      console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, result);
      
      if (result.success) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        let progress = 0;
        const interval = setInterval(() => {
          progress += 10;
          setMissions(prevMissions => 
            prevMissions.map(mission => 
              mission.id === missionId 
                ? { ...mission, progress } 
                : mission
            )
          );
          
          if (progress >= 100) {
            clearInterval(interval);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ
            setCompletedMissionId(missionId);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤–µ–ª–∏—á–∏–Ω—É –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –¥–≤—É—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç:
            // 1. –ü—Ä—è–º–æ –∏–∑ API-–æ—Ç–≤–µ—Ç–∞ (result.reward)
            // 2. –ò–∑ —Ç–µ–∫—É—â–µ–π –º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ API-–æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–≥—Ä–∞–¥—ã
            const currentMission = missions.find(m => m.id === missionId);
            const rewardValue = result.reward !== undefined ? result.reward : 
                                (currentMission ? currentMission.rewardUni : 0);
            
            console.log(`[DEBUG] –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é: API=${result.reward}, UI=${currentMission?.rewardUni}, –ò—Ç–æ–≥=${rewardValue}`);
            
            setRewardAmount(rewardValue);
            setShowConfetti(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏
            setMissions(prevMissions => 
              prevMissions.map(mission => 
                mission.id === missionId 
                  ? { ...mission, status: MissionStatus.COMPLETED, progress: 100 } 
                  : mission
              )
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            toast({
              title: "–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
              description: `${result.message}`
            });
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π –º–∏—Å—Å–∏–∏
            setProcessingMissionId(null);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º invalidateQueryWithUserId –≤–º–µ—Å—Ç–æ invalidateQueries
            invalidateQueryWithUserId('/api/v2/user-missions');
          }
        }, 200);
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: result.message
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏—Å—Å–∏—é –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setMissions(prevMissions => 
          prevMissions.map(mission => 
            mission.id === missionId 
              ? { ...mission, status: MissionStatus.AVAILABLE, progress: undefined } 
              : mission
          )
        );
        
        setProcessingMissionId(null);
      }
    } catch (error) {
      console.error('Error completing mission:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏—Å—Å–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏—Å—Å–∏—é –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setMissions(prevMissions => 
        prevMissions.map(mission => 
          mission.id === missionId 
            ? { ...mission, status: MissionStatus.AVAILABLE, progress: undefined } 
            : mission
        )
      );
      
      setProcessingMissionId(null);
    }
  };
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
  const RewardIndicator = ({ reward }: { reward: number }) => {
    const rewardRef = useRef<HTMLDivElement>(null);
    
    useEffect(() => {
      const element = rewardRef.current;
      if (element) {
        element.animate(
          [
            { opacity: 0, transform: 'translateY(20px) scale(0.8)' },
            { opacity: 1, transform: 'translateY(-20px) scale(1.2)' },
            { opacity: 0, transform: 'translateY(-50px) scale(1)' }
          ],
          {
            duration: 1500,
            easing: 'ease-out'
          }
        );
      }
    }, []);
    
    return (
      <div 
        ref={rewardRef}
        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 flex items-center gap-2 bg-purple-900/70 backdrop-blur-sm px-5 py-3 rounded-xl shadow-xl"
      >
        <FiDollarSign className="h-6 w-6 text-purple-300" />
        <span className="text-purple-200 font-bold text-2xl">+{reward} UNI</span>
      </div>
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∏—Å—Å–∏–∏
  const getMissionTypeIcon = (type: string) => {
    switch (type) {
      case 'social':
        return <FiMessageCircle className="h-5 w-5 text-blue-400" />;
      case 'partner':
      case 'invite':
        return <FiUserPlus className="h-5 w-5 text-indigo-400" />;
      case 'daily':
      case 'check-in':
        return <FiCalendar className="h-5 w-5 text-amber-400" />;
      case 'deposit':
        return <FiDollarSign className="h-5 w-5 text-emerald-400" />;
      default:
        return <FiTv className="h-5 w-5 text-purple-400" />;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–∏—Å—Å–∏–∏
  const getMissionStatusInfo = (status: MissionStatus) => {
    switch (status) {
      case MissionStatus.AVAILABLE:
        return { 
          color: 'bg-blue-500/80 backdrop-blur-sm', 
          text: '–î–æ—Å—Ç—É–ø–Ω–æ', 
          icon: <FiAlertCircle className="h-4 w-4 mr-1" /> 
        };
      case MissionStatus.PROCESSING:
        return { 
          color: 'bg-amber-500/80 backdrop-blur-sm', 
          text: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
          icon: <FiClock className="h-4 w-4 mr-1" /> 
        };
      case MissionStatus.COMPLETED:
        return { 
          color: 'bg-emerald-500/80 backdrop-blur-sm', 
          text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 
          icon: <FiCheckCircle className="h-4 w-4 mr-1" /> 
        };
      default:
        return { 
          color: 'bg-muted/80', 
          text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 
          icon: null 
        };
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–∏—Å—Å–∏–∏
  const extractUrlFromDescription = (description: string): string | null => {
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –≤ —Ç–µ–∫—Å—Ç–µ
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const matches = description.match(urlRegex);
    
    if (matches && matches.length > 0) {
      return matches[0];
    }
    
    return null;
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏
  const handleStartSocialMission = (missionId: number, url: string) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    window.open(url, '_blank');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏
    setMissions(prevMissions => 
      prevMissions.map(mission => 
        mission.id === missionId 
          ? { 
              ...mission, 
              visitStartTime: Date.now(),
              status: MissionStatus.PROCESSING,
              progress: 0,
              verificationAvailable: false
            } 
          : mission
      )
    );
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –æ—á–∏—â–∞–µ–º –µ–≥–æ
    if (timerIntervalId !== null) {
      clearInterval(timerIntervalId);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
    const intervalId = window.setInterval(() => {
      const currentTime = Date.now();
      
      setMissions(prevMissions => {
        return prevMissions.map(mission => {
          if (mission.id === missionId && mission.status === MissionStatus.PROCESSING) {
            const startTime = mission.visitStartTime || currentTime;
            const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);
            const remainingSeconds = Math.max(0, 5 - elapsedSeconds);
            
            // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (remainingSeconds === 0 && !mission.verificationAvailable) {
              return { ...mission, verificationAvailable: true };
            }
            
            return mission;
          }
          return mission;
        });
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∏—Å—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      const hasActiveSocialMissions = missions.some(
        m => m.type === 'social' && m.status === MissionStatus.PROCESSING && !m.verificationAvailable
      );
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (!hasActiveSocialMissions) {
        clearInterval(intervalId);
        setTimerIntervalId(null);
      }
    }, 1000);
    
    setTimerIntervalId(intervalId);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    setTimeout(() => {
      setMissions(prevMissions => 
        prevMissions.map(mission => 
          mission.id === missionId && mission.status === MissionStatus.PROCESSING
            ? { ...mission, verificationAvailable: true } 
            : mission
        )
      );
    }, 5000);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏
  const handleVerifySocialMission = (missionId: number) => {
    handleCompleteMission(missionId);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  const handleConfettiComplete = () => {
    setShowConfetti(false);
    setCompletedMissionId(null);
    setRewardAmount(null);
  };
  
  const isLoading = missionsLoading || userMissionsLoading;
  
  // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
  if (isLoading) {
    return (
      <div className="space-y-4 p-4">
        <div className="text-center mb-4 text-muted-foreground text-sm">
          –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...
        </div>
        {[1, 2, 3].map((i) => (
          <Card key={i} className="w-full opacity-70 animate-pulse">
            <CardHeader className="pb-2 h-16"></CardHeader>
            <CardContent className="h-20"></CardContent>
            <CardFooter className="h-12"></CardFooter>
          </Card>
        ))}
      </div>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (missionsError || userMissionsError) {
    return (
      <div className="space-y-4 p-4">
        <Card className="w-full bg-card/95 backdrop-blur-sm border border-red-500/20 shadow-lg relative overflow-hidden">
          {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –≤ DailyBonusCard */}
          <div className="absolute -right-8 -top-8 w-24 h-24 bg-red-500/5 rounded-full blur-xl"></div>
          <div className="absolute -left-8 -bottom-8 w-24 h-24 bg-red-500/5 rounded-full blur-xl"></div>
          <CardHeader>
            <CardTitle className="text-lg flex items-center">
              <FiAlertCircle className="mr-2 h-5 w-5 text-red-400" />
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              {missionsError 
                ? `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${(missionsError as Error).message}` 
                : `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${(userMissionsError as Error).message}`}
            </p>
            <Button 
              className="mt-4 w-full"
              onClick={() => {
                // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/active'] });
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/user-completed', userId] });
              }}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –º–∏—Å—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (!missions || missions.length === 0) {
    return (
      <div className="space-y-4 p-4">
        <Card className="w-full bg-card/95 backdrop-blur-sm border border-amber-500/20 shadow-lg relative overflow-hidden">
          {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
          <div className="absolute -right-8 -top-8 w-24 h-24 bg-amber-500/5 rounded-full blur-xl"></div>
          <div className="absolute -left-8 -bottom-8 w-24 h-24 bg-amber-500/5 rounded-full blur-xl"></div>
          <CardHeader>
            <CardTitle className="text-lg flex items-center">
              <FiAlertCircle className="mr-2 h-5 w-5 text-amber-400" />
              –ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </p>
            <Button 
              className="mt-4 w-full"
              onClick={() => {
                // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/active'] });
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/user-completed', userId] });
              }}
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  return (
    <div className="relative">
      {/* –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏ */}
      <ConfettiEffect 
        active={showConfetti} 
        onComplete={handleConfettiComplete} 
        duration={3500} 
        colors={['#c4b5fd', '#8b5cf6', '#a855f7', '#7c3aed', '#6366f1', '#d946ef']}
        particleCount={100}
        spread={90}
        gravity={0.65}
      />
      
      <div className="space-y-6 p-4">
        {/* –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ UniFarm */}
        <div className="flex items-center gap-3 mb-2">
          <div className="w-8 h-8 rounded-full bg-primary/10 backdrop-blur-sm border border-primary/20 flex items-center justify-center">
            <FiTarget className="h-5 w-5 text-primary" />
          </div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
            –ó–∞–¥–∞–Ω–∏—è
          </h2>
        </div>
        
        {missions.map((mission) => {
          const statusInfo = getMissionStatusInfo(mission.status);
          const isRecentlyCompleted = completedMissionId !== null && completedMissionId === mission.id;
          const isProcessing = processingMissionId !== null && processingMissionId === mission.id;
          
          return (
            <motion.div
              key={mission.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className="relative"
            >
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏ */}
              {isRecentlyCompleted && rewardAmount !== null && (
                <RewardIndicator reward={rewardAmount} />
              )}
              
              <Card 
                className={`w-full bg-card/95 backdrop-blur-sm border border-primary/10 relative overflow-hidden shadow-lg hover:shadow-xl hover:border-primary/20 transition-all duration-500 card-hover-effect ${
                  isRecentlyCompleted 
                    ? 'shadow-[0_0_20px_rgba(139,92,246,0.4)] border-primary/30 scale-[1.02]' 
                    : ''
                }`}
              >
                {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö UniFarm */}
                <div className="absolute -right-12 -top-12 w-32 h-32 bg-primary/5 rounded-full blur-xl"></div>
                <div className="absolute -left-16 -bottom-16 w-32 h-32 bg-primary/5 rounded-full blur-xl"></div>
                <CardHeader className="pb-2 relative">
                  <div className="flex justify-between items-start">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-primary/10 backdrop-blur-sm border border-primary/20 flex items-center justify-center shadow-sm">
                        {getMissionTypeIcon(mission.type)}
                      </div>
                      <CardTitle className={`text-lg font-semibold ${
                        isRecentlyCompleted ? 'text-primary' : 'text-foreground'
                      }`}>{mission.title}</CardTitle>
                    </div>
                    <Badge className={`${statusInfo.color} text-white font-medium px-3 py-1 shadow-sm ${
                      isRecentlyCompleted ? 'animate-pulse' : ''
                    }`}>
                      <span className="flex items-center">
                        {statusInfo.icon}
                        {statusInfo.text}
                      </span>
                    </Badge>
                  </div>
                  <CardDescription className="mt-3 text-sm text-foreground/70 leading-relaxed">{mission.description}</CardDescription>
                </CardHeader>
                
                <CardContent>
                  {mission.status === MissionStatus.PROCESSING && (
                    <div className="mt-2">
                      <div className="flex justify-between text-xs mb-1">
                        <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                        <span>{mission.progress || 0}%</span>
                      </div>
                      <Progress
                        value={mission.progress}
                        className="h-2"
                      />
                    </div>
                  )}
                </CardContent>
                
                <CardFooter className="flex justify-between items-center border-t border-primary/10 pt-4 relative">
                  <div className="flex items-center">
                    <div className="text-foreground/70 font-medium mr-3">–ù–∞–≥—Ä–∞–¥–∞:</div>
                    <div className="flex items-center px-3 py-2 bg-primary/10 backdrop-blur-sm border border-primary/20 rounded-lg shadow-sm">
                      <FiDollarSign className="h-4 w-4 text-primary mr-2" />
                      <span className="text-primary font-bold">{mission.rewardUni} UNI</span>
                    </div>
                  </div>
                  
                  {/* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∏—Å—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ü–µ—Ä–µ–π—Ç–∏ –∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ */}
                  {mission.status === MissionStatus.AVAILABLE && mission.type === 'social' && (
                    <Button 
                      size="sm"
                      onClick={() => {
                        const url = mission.link || 'https://t.me/unifarm';
                        console.log(`üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –º–∏—Å—Å–∏–∏ ${mission.id}:`, url);
                        handleStartSocialMission(mission.id, url);
                      }}
                      className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-white font-medium px-4 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200"
                      disabled={isProcessing}
                    >
                      –ü–µ—Ä–µ–π—Ç–∏
                    </Button>
                  )}
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ */}
                  {mission.status === MissionStatus.PROCESSING && mission.type === 'social' && (
                    <div className="flex flex-col gap-2">
                      {!mission.verificationAvailable && (
                        <div className="text-xs text-center text-muted-foreground mb-1">
                          –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {5 - Math.floor((Date.now() - (mission.visitStartTime || 0)) / 1000)} —Å–µ–∫.
                        </div>
                      )}
                      <Button 
                        size="sm"
                        onClick={() => handleVerifySocialMission(mission.id)}
                        className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-medium px-4 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 disabled:opacity-50"
                        disabled={!mission.verificationAvailable || isProcessing}
                      >
                        {isProcessing ? (
                          <>
                            <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-primary border-r-transparent"></span>
                            –ü—Ä–æ–≤–µ—Ä–∫–∞...
                          </>
                        ) : (
                          "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
                        )}
                      </Button>
                    </div>
                  )}
                  
                  {/* –û–±—ã—á–Ω—ã–µ –º–∏—Å—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã–ø–æ–ª–Ω–∏—Ç—å" */}
                  {mission.status === MissionStatus.AVAILABLE && mission.type !== 'social' && (
                    <Button 
                      size="sm"
                      onClick={() => handleCompleteMission(mission.id)}
                      className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-white font-medium px-4 py-2 rounded-lg shadow-md hover:shadow-lg transition-all duration-200"
                      disabled={isProcessing}
                    >
                      {isProcessing ? (
                        <>
                          <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-primary border-r-transparent"></span>
                          –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...
                        </>
                      ) : (
                        "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
                      )}
                    </Button>
                  )}
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏ */}
                  {mission.status === MissionStatus.COMPLETED && (
                    <Badge variant="outline" className="border-green-400/60 bg-green-50/5 text-green-400 px-3 py-1 font-medium shadow-sm">
                      <FiCheckCircle className="h-4 w-4 mr-1.5" />
                      –ü–æ–ª—É—á–µ–Ω–æ
                    </Badge>
                  )}
                </CardFooter>
              </Card>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
};

export default MissionsList;