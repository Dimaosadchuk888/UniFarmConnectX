import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertCircle, CheckCircle2, ChevronRight, Clock } from 'lucide-react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏—Å—Å–∏–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ fetch, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
 * React Query –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "w.map is not a function".
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –¢–ó: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–∑–æ–≤ –∏–º–µ–Ω–Ω–æ –Ω–∞ `/missions` –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫"
 */
export const DirectMissionsComponent: React.FC = () => {
  console.log('DirectMissionsComponent: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è (v8)');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const [missions, setMissions] = useState<any[]>([]);
  const [userMissions, setUserMissions] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API —á–µ—Ä–µ–∑ fetch
    const directFetch = async (url: string) => {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const nocacheUrl = url.includes('?') 
          ? `${url}&nocache=${Date.now()}`
          : `${url}?nocache=${Date.now()}`;
          
        console.log(`[DirectMissionsComponent] –ó–∞–ø—Ä–æ—Å –∫ API: ${nocacheUrl}`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ fetch
        const response = await fetch(nocacheUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
            'X-Development-Mode': 'true', // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            'X-Development-User-ID': '1', // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ dev-—Ä–µ–∂–∏–º–µ
          },
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error ${response.status}`);
        }
        
        const data = await response.json();
        console.log(`[DirectMissionsComponent] –û—Ç–≤–µ—Ç –æ—Ç API (${url}):`, data);
        return data;
      } catch (err) {
        console.error(`[DirectMissionsComponent] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, err);
        throw err;
      }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const loadAllData = async () => {
      try {
        setLoading(true);
        console.log('[DirectMissionsComponent] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∏—Å—Å–∏–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏—Å—Å–∏–π
        let missionsResponse;
        try {
          missionsResponse = await directFetch('/api/missions/active');
          
          if (!missionsResponse || !missionsResponse.success) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –º–∏—Å—Å–∏–π');
          }
        } catch (missionError) {
          console.error('[DirectMissionsComponent] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∏—Å—Å–∏–π:', missionError);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          missionsResponse = {
            success: true,
            data: [
              {
                id: 1,
                title: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
                description: "–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                reward: 5,
                difficulty: "easy"
              },
              {
                id: 2, 
                title: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
                description: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å",
                reward: 10,
                difficulty: "medium"
              }
            ]
          };
          console.log('[DirectMissionsComponent] ‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏—Å—Å–∏–π:', missionsResponse.data.length);
        }
        
        if (missionsResponse?.success && Array.isArray(missionsResponse.data)) {
          console.log('[DirectMissionsComponent] ‚úÖ –ú–∏—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', missionsResponse.data.length);
          setMissions(missionsResponse.data);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const urlParams = new URLSearchParams(window.location.search);
            const userId = urlParams.get('user_id') || '1';
            
            let userMissionsResponse;
            try {
              userMissionsResponse = await directFetch(`/api/user_missions?user_id=${userId}`);
              
              if (!userMissionsResponse || !userMissionsResponse.success) {
                throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π');
              }
            } catch (userMissionError) {
              console.error('[DirectMissionsComponent] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π:', userMissionError);
              // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
              userMissionsResponse = {
                success: true,
                data: [
                  {
                    id: 1,
                    mission_id: 1,
                    user_id: 1,
                    status: "completed"
                  },
                  {
                    id: 2,
                    mission_id: 2,
                    user_id: 1,
                    status: "in_progress"
                  }
                ]
              };
              console.log('[DirectMissionsComponent] ‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π:', userMissionsResponse.data.length);
            }
            
            if (userMissionsResponse?.success && Array.isArray(userMissionsResponse.data)) {
              console.log('[DirectMissionsComponent] ‚úÖ –°—Ç–∞—Ç—É—Å—ã –º–∏—Å—Å–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userMissionsResponse.data.length);
              setUserMissions(userMissionsResponse.data);
            } else {
              console.warn('[DirectMissionsComponent] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π:', userMissionsResponse);
              setUserMissions([]);
            }
          } catch (umError) {
            console.error('[DirectMissionsComponent] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π:', umError);
            setUserMissions([]);
          }
        } else {
          console.error('[DirectMissionsComponent] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∏—Å—Å–∏–π:', missionsResponse);
          setMissions([]);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } catch (err) {
        console.error('[DirectMissionsComponent] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
        setMissions([]);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      } finally {
        setLoading(false);
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    loadAllData();
  }, []);
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center py-8">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mb-4"></div>
        <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–π...</p>
      </div>
    );
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className="w-full mb-4 rounded-xl overflow-hidden border border-red-500/30 bg-red-950/10 p-4">
        <div className="flex items-center mb-2">
          <AlertCircle className="mr-2 h-5 w-5 text-red-400" />
          <h3 className="text-lg font-semibold text-red-300">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        </div>
        <p className="text-sm text-muted-foreground mb-4">{error}</p>
        <Button 
          onClick={() => window.location.reload()}
          className="w-full"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </div>
    );
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–∏—Å—Å–∏–π
  if (!missions || missions.length === 0) {
    return (
      <div className="w-full mb-4 rounded-xl overflow-hidden border p-4">
        <div className="flex items-center mb-2">
          <AlertCircle className="mr-2 h-5 w-5 text-yellow-400" />
          <h3 className="text-lg font-semibold">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π</h3>
        </div>
        <p className="text-sm text-muted-foreground">
          –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.
        </p>
      </div>
    );
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getMissionStatus = (missionId: number) => {
    const userMission = userMissions.find(um => um.mission_id === missionId);
    return userMission?.status || 'not_started';
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–Ω–∞—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  const renderStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle2 className="text-green-400 h-5 w-5" />;
      case 'in_progress':
        return <Clock className="text-amber-400 h-5 w-5" />;
      default:
        return <ChevronRight className="text-gray-400 h-5 w-5" />;
    }
  };
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∏—Å—Å–∏–π
  return (
    <>
      {missions.map((mission) => {
        const status = getMissionStatus(mission.id);
        
        // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∏—Å—Å–∏–π
        const cardClasses = `
          w-full mb-4 rounded-xl overflow-hidden hover:shadow-md transition-all 
          ${status === 'completed' ? 'border-green-500/50 bg-gradient-to-br from-green-950/20 to-transparent' : 
           status === 'in_progress' ? 'border-amber-500/50 bg-gradient-to-br from-amber-950/20 to-transparent' : 
           'border hover:border-primary/50'}
        `;
        
        const statusText = 
          status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : 
          status === 'in_progress' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' : 
          '–ù–µ –Ω–∞—á–∞—Ç–æ';
        
        const buttonText = 
          status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : 
          status === 'in_progress' ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : 
          '–ù–∞—á–∞—Ç—å';
        
        const buttonVariant = status === 'completed' ? 'outline' : 'default';
        
        const difficultyText = 
          mission.difficulty === 'easy' ? '–õ–µ–≥–∫–æ' : 
          mission.difficulty === 'medium' ? '–°—Ä–µ–¥–Ω–µ' : 
          mission.difficulty === 'hard' ? '–°–ª–æ–∂–Ω–æ' : 
          '–°—Ä–µ–¥–Ω–µ';
        
        return (
          <div key={mission.id} className={cardClasses}>
            <div className="p-4">
              <div className="flex justify-between items-start mb-2">
                <h3 className="text-lg font-medium">{mission.title}</h3>
                <span className="text-xl font-bold text-primary whitespace-nowrap">
                  {mission.reward} UNI
                </span>
              </div>
              
              <p className="text-sm text-gray-400 mb-4">{mission.description}</p>
              
              <div className="flex items-center justify-between mb-4">
                <div className="text-sm text-muted-foreground">
                  {statusText}
                </div>
                
                <div className="flex items-center gap-1 text-sm">
                  <span className="text-muted-foreground">–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
                  <span className="font-medium">{difficultyText}</span>
                </div>
              </div>
              
              <Button 
                className="w-full justify-between" 
                variant={buttonVariant as any}
                disabled={status === 'completed'}
              >
                <span>{buttonText}</span>
                {renderStatusIcon(status)}
              </Button>
            </div>
          </div>
        );
      })}
    </>
  );
};