import { useEffect, useState, useRef } from 'react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { 
  FiCheckCircle, 
  FiClock, 
  FiAlertCircle, 
  FiMessageCircle, 
  FiUsers, 
  FiCalendar, 
  FiDollarSign, 
  FiTv,
  FiUserPlus,
  FiTarget
} from 'react-icons/fi';
import { motion } from 'framer-motion';
import ConfettiEffect from '@/components/ui/ConfettiEffect';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { toast } from '@/hooks/use-toast';
import { useUser } from '@/contexts/userContext';
import { correctApiRequest } from '@/lib/correctApiRequest';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–∏—Å—Å–∏–π
export enum MissionStatus {
  AVAILABLE = 'available',
  PROCESSING = 'processing',
  COMPLETED = 'completed'
}

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –∏–∑ –ë–î
interface DbMission {
  id: number;
  type: string;
  title: string;
  description: string;
  reward_uni: string; // –í –ë–î —ç—Ç–æ numeric –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  is_active: boolean;
  link?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
}

// –¢–∏–ø –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserMission {
  id: number;
  user_id: number;
  mission_id: number;
  completed_at: string;
}

// –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏
interface CompleteMissionResponse {
  success: boolean;
  message: string;
  reward?: number;
}

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –¥–ª—è UI
interface Mission {
  id: number;
  type: string;
  title: string;
  description: string;
  rewardUni: number;
  status: MissionStatus;
  progress?: number; // –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100
  visitStartTime?: number; // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏
  verificationAvailable?: boolean; // –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
  link?: string; // —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
}

export const MissionsListFixed: React.FC = () => {
  const queryClient = useQueryClient();
  const { userId } = useUser(); // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [missions, setMissions] = useState<Mission[]>([]);
  const [showConfetti, setShowConfetti] = useState(false);
  const [completedMissionId, setCompletedMissionId] = useState<number | null>(null);
  const [rewardAmount, setRewardAmount] = useState<number | null>(null);
  const [processingMissionId, setProcessingMissionId] = useState<number | null>(null);
  const [timerIntervalId, setTimerIntervalId] = useState<number | null>(null);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endpoint
  const { data: dbMissions, isLoading: missionsLoading, error: missionsError } = useQuery<DbMission[]>({
    queryKey: ['/api/v2/missions/list'],
    queryFn: async () => {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π');
      
      try {
        const nocache = Date.now();
        const data = await correctApiRequest(`/api/v2/missions/list?nocache=${nocache}`, 'GET');
        
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, data);
        
        if (data && data.success && Array.isArray(data.data)) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ (${data.data.length} —à—Ç.)`);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          return [];
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∏—Å—Å–∏–π:', error);
        return [];
      }
    },
    retry: false,
    staleTime: 0
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endpoint
  const { data: userCompletedMissions, isLoading: userMissionsLoading, error: userMissionsError } = useQuery<UserMission[]>({
    queryKey: ['/api/v2/missions/user', userId],
    queryFn: async () => {
      console.log('üöÄ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', userId);
      
      try {
        const nocache = Date.now();
        const data = await correctApiRequest(`/api/v2/missions/user/${userId || 48}?nocache=${nocache}`, 'GET');
        
        console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, data);
        
        if (data && data.success && Array.isArray(data.data)) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ (${data.data.length} —à—Ç.)`);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
          return [];
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
        return [];
      }
    },
    retry: false,
    staleTime: 0,
    enabled: !!userId
  });
  
  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (timerIntervalId !== null) {
        clearInterval(timerIntervalId);
      }
    };
  }, [timerIntervalId]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI
  useEffect(() => {
    try {
      console.log('MissionsList: dbMissions –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', dbMissions ? '–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã' : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      
      if (!dbMissions) {
        console.log('MissionsList: dbMissions –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –º–∏—Å—Å–∏–π');
        setMissions([]);
        return;
      }
      
      if (!Array.isArray(dbMissions)) {
        console.log('MissionsList: dbMissions –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –º–∏—Å—Å–∏–π');
        setMissions([]);
        return;
      }
      
      console.log(`MissionsList: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dbMissions.length} –º–∏—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
      
      const completedMissionsMap = new Map<number, UserMission>();
      
      if (userCompletedMissions && Array.isArray(userCompletedMissions)) {
        console.log(`MissionsList: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${userCompletedMissions.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π`);
        
        userCompletedMissions.forEach(mission => {
          if (mission && typeof mission === 'object' && 'mission_id' in mission && typeof mission.mission_id === 'number') {
            completedMissionsMap.set(mission.mission_id, mission);
          }
        });
        
        console.log(`MissionsList: –≤ –∫–∞—Ä—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–æ ${completedMissionsMap.size} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π`);
      } else {
        console.log('MissionsList: –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      }
      
      const mappedMissions: Mission[] = dbMissions
        .filter(dbMission => dbMission && typeof dbMission === 'object' && dbMission.id !== undefined)
        .map(dbMission => {
          const isCompleted = dbMission.id !== undefined && completedMissionsMap.has(dbMission.id);
          
          return {
            id: dbMission.id as number,
            type: dbMission.type || 'default',
            title: dbMission.title || '–ú–∏—Å—Å–∏—è',
            description: dbMission.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            rewardUni: typeof dbMission.reward_uni === 'string' ? parseFloat(dbMission.reward_uni) || 0 : 0,
            status: isCompleted ? MissionStatus.COMPLETED : MissionStatus.AVAILABLE,
            link: dbMission.link
          };
        });
      
      console.log(`MissionsList: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${mappedMissions.length} –º–∏—Å—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
      
      setMissions(mappedMissions);
    } catch (error) {
      console.error('MissionsList: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', error);
      setMissions([]);
    }
  }, [dbMissions, userCompletedMissions]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ API
  const handleCompleteMission = async (missionId: number) => {
    try {
      setProcessingMissionId(missionId);
      setMissions(missions.map(mission => 
        mission.id === missionId 
          ? { ...mission, status: MissionStatus.PROCESSING, progress: 0 } 
          : mission
      ));
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ ${missionId} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º correctApiRequest`);
      
      const result = await correctApiRequest('/api/v2/missions/complete', 'POST', {
        missionId: missionId
      }) as CompleteMissionResponse;
      
      console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ correctApiRequest:`, result);
      
      if (result.success) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        let progress = 0;
        const interval = setInterval(() => {
          progress += 10;
          setMissions(prevMissions => 
            prevMissions.map(mission => 
              mission.id === missionId 
                ? { ...mission, progress } 
                : mission
            )
          );
          
          if (progress >= 100) {
            clearInterval(interval);
            
            setCompletedMissionId(missionId);
            
            const currentMission = missions.find(m => m.id === missionId);
            const rewardValue = result.reward !== undefined ? result.reward : 
                                (currentMission ? currentMission.rewardUni : 0);
            
            console.log(`[DEBUG] –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é: API=${result.reward}, UI=${currentMission?.rewardUni}, –ò—Ç–æ–≥=${rewardValue}`);
            
            setRewardAmount(rewardValue);
            setShowConfetti(true);
            
            setMissions(prevMissions => 
              prevMissions.map(mission => 
                mission.id === missionId 
                  ? { ...mission, status: MissionStatus.COMPLETED, progress: 100 } 
                  : mission
              )
            );
            
            toast({
              title: "–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
              description: `${result.message}`
            });
            
            setProcessingMissionId(null);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ endpoints
            queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/list'] });
            queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/user', userId] });
          }
        }, 200);
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: result.message
        });
        
        setMissions(prevMissions => 
          prevMissions.map(mission => 
            mission.id === missionId 
              ? { ...mission, status: MissionStatus.AVAILABLE, progress: undefined } 
              : mission
          )
        );
        
        setProcessingMissionId(null);
      }
    } catch (error) {
      console.error('Error completing mission:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏—Å—Å–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      });
      
      setMissions(prevMissions => 
        prevMissions.map(mission => 
          mission.id === missionId 
            ? { ...mission, status: MissionStatus.AVAILABLE, progress: undefined } 
            : mission
        )
      );
      
      setProcessingMissionId(null);
    }
  };
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
  const RewardIndicator = ({ reward }: { reward: number }) => {
    const rewardRef = useRef<HTMLDivElement>(null);
    
    useEffect(() => {
      const element = rewardRef.current;
      if (element) {
        element.animate(
          [
            { opacity: 0, transform: 'translateY(20px) scale(0.8)' },
            { opacity: 1, transform: 'translateY(-20px) scale(1.2)' },
            { opacity: 0, transform: 'translateY(-50px) scale(1)' }
          ],
          {
            duration: 1500,
            easing: 'ease-out'
          }
        );
      }
    }, []);
    
    return (
      <div 
        ref={rewardRef}
        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 flex items-center gap-2 bg-purple-900/70 backdrop-blur-sm px-5 py-3 rounded-xl shadow-xl"
      >
        <FiDollarSign className="h-6 w-6 text-purple-300" />
        <span className="text-purple-200 font-bold text-2xl">+{reward} UNI</span>
      </div>
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∏—Å—Å–∏–∏
  const getMissionTypeIcon = (type: string) => {
    switch (type) {
      case 'social':
        return <FiMessageCircle className="h-5 w-5 text-blue-400" />;
      case 'partner':
      case 'invite':
        return <FiUserPlus className="h-5 w-5 text-indigo-400" />;
      case 'daily':
      case 'check-in':
        return <FiCalendar className="h-5 w-5 text-amber-400" />;
      case 'deposit':
        return <FiDollarSign className="h-5 w-5 text-emerald-400" />;
      default:
        return <FiTv className="h-5 w-5 text-purple-400" />;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–∏—Å—Å–∏–∏
  const getMissionStatusInfo = (status: MissionStatus) => {
    switch (status) {
      case MissionStatus.AVAILABLE:
        return { 
          color: 'bg-blue-500/80 backdrop-blur-sm', 
          text: '–î–æ—Å—Ç—É–ø–Ω–æ', 
          icon: <FiAlertCircle className="h-4 w-4 mr-1" /> 
        };
      case MissionStatus.PROCESSING:
        return { 
          color: 'bg-amber-500/80 backdrop-blur-sm', 
          text: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', 
          icon: <FiClock className="h-4 w-4 mr-1" /> 
        };
      case MissionStatus.COMPLETED:
        return { 
          color: 'bg-emerald-500/80 backdrop-blur-sm', 
          text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 
          icon: <FiCheckCircle className="h-4 w-4 mr-1" /> 
        };
      default:
        return { 
          color: 'bg-muted/80', 
          text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 
          icon: null 
        };
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  const handleConfettiComplete = () => {
    setShowConfetti(false);
    setCompletedMissionId(null);
    setRewardAmount(null);
  };
  
  const isLoading = missionsLoading || userMissionsLoading;
  
  // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
  if (isLoading) {
    return (
      <div className="space-y-4 p-4">
        <div className="text-center mb-4 text-muted-foreground text-sm">
          –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...
        </div>
        {[1, 2, 3].map((i) => (
          <Card key={i} className="w-full opacity-70 animate-pulse">
            <CardHeader className="pb-2 h-16"></CardHeader>
            <CardContent className="h-20"></CardContent>
            <CardFooter className="h-12"></CardFooter>
          </Card>
        ))}
      </div>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (missionsError || userMissionsError) {
    return (
      <div className="space-y-4 p-4">
        <Card className="w-full bg-card/95 backdrop-blur-sm border border-red-500/20 shadow-lg relative overflow-hidden">
          <div className="absolute -right-8 -top-8 w-24 h-24 bg-red-500/5 rounded-full blur-xl"></div>
          <div className="absolute -left-8 -bottom-8 w-24 h-24 bg-red-500/5 rounded-full blur-xl"></div>
          <CardHeader>
            <CardTitle className="text-lg flex items-center">
              <FiAlertCircle className="mr-2 h-5 w-5 text-red-400" />
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              {missionsError 
                ? `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${(missionsError as Error).message}` 
                : `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${(userMissionsError as Error).message}`}
            </p>
            <Button 
              className="mt-4 w-full"
              onClick={() => {
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/list'] });
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/user', userId] });
              }}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –º–∏—Å—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (!missions || missions.length === 0) {
    return (
      <div className="space-y-4 p-4">
        <Card className="w-full bg-card/95 backdrop-blur-sm border border-amber-500/20 shadow-lg relative overflow-hidden">
          <div className="absolute -right-8 -top-8 w-24 h-24 bg-amber-500/5 rounded-full blur-xl"></div>
          <div className="absolute -left-8 -bottom-8 w-24 h-24 bg-amber-500/5 rounded-full blur-xl"></div>
          <CardHeader>
            <CardTitle className="text-lg flex items-center">
              <FiAlertCircle className="mr-2 h-5 w-5 text-amber-400" />
              –ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground mb-4">
              –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.
            </p>
            <Button 
              className="w-full"
              onClick={() => {
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/list'] });
                queryClient.invalidateQueries({ queryKey: ['/api/v2/missions/user', userId] });
              }}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-4 p-4 relative">
      {/* –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ */}
      {showConfetti && completedMissionId && (
        <ConfettiEffect 
          active={true}
          onComplete={handleConfettiComplete}
          particleCount={100}
          duration={3000}
        />
      )}
      
      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã */}
      {showConfetti && completedMissionId && rewardAmount && (
        <RewardIndicator reward={rewardAmount} />
      )}
      
      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –º–∏—Å—Å–∏–π */}
      {missions.map((mission, index) => {
        const statusInfo = getMissionStatusInfo(mission.status);
        const isProcessing = processingMissionId === mission.id;
        
        return (
          <motion.div
            key={mission.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Card className="w-full bg-card/95 backdrop-blur-sm border border-primary/20 shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden">
              {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞ */}
              <div className="absolute -right-8 -top-8 w-24 h-24 bg-primary/5 rounded-full blur-xl"></div>
              <div className="absolute -left-8 -bottom-8 w-24 h-24 bg-primary/5 rounded-full blur-xl"></div>
              
              <CardHeader className="pb-2 relative">
                <div className="flex items-start justify-between">
                  <div className="flex items-center space-x-3">
                    {getMissionTypeIcon(mission.type)}
                    <div>
                      <CardTitle className="text-lg font-bold text-white flex items-center">
                        {mission.title}
                      </CardTitle>
                      <CardDescription className="text-sm text-muted-foreground mt-1">
                        {mission.description}
                      </CardDescription>
                    </div>
                  </div>
                  
                  <Badge 
                    className={`${statusInfo.color} text-white border-0 text-xs px-2 py-1 flex items-center`}
                  >
                    {statusInfo.icon}
                    {statusInfo.text}
                  </Badge>
                </div>
              </CardHeader>
              
              <CardContent className="py-3 relative">
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –º–∏—Å—Å–∏–π */}
                {mission.status === MissionStatus.PROCESSING && mission.progress !== undefined && (
                  <div className="mb-3">
                    <div className="flex justify-between text-xs text-muted-foreground mb-1">
                      <span>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...</span>
                      <span>{mission.progress}%</span>
                    </div>
                    <Progress value={mission.progress} className="h-2" />
                  </div>
                )}
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <FiDollarSign className="h-4 w-4 text-primary" />
                    <span className="text-sm text-muted-foreground">–ù–∞–≥—Ä–∞–¥–∞:</span>
                    <span className="font-bold text-primary">{mission.rewardUni} UNI</span>
                  </div>
                </div>
              </CardContent>
              
              <CardFooter className="pt-2 relative">
                {mission.status === MissionStatus.AVAILABLE && (
                  <Button 
                    className="w-full bg-gradient-to-r from-primary/90 to-primary hover:from-primary hover:to-primary/90 transition-all duration-300"
                    onClick={() => handleCompleteMission(mission.id)}
                    disabled={isProcessing}
                  >
                    {isProcessing ? (
                      <div className="flex items-center space-x-2">
                        <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        <span>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</span>
                      </div>
                    ) : (
                      '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'
                    )}
                  </Button>
                )}
                
                {mission.status === MissionStatus.PROCESSING && (
                  <Button 
                    className="w-full bg-amber-500/80 hover:bg-amber-500 transition-all duration-300" 
                    disabled
                  >
                    <FiClock className="h-4 w-4 mr-2" />
                    –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...
                  </Button>
                )}
                
                {mission.status === MissionStatus.COMPLETED && (
                  <Button 
                    className="w-full bg-emerald-500/80 hover:bg-emerald-500 transition-all duration-300" 
                    disabled
                  >
                    <FiCheckCircle className="h-4 w-4 mr-2" />
                    –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                  </Button>
                )}
              </CardFooter>
            </Card>
          </motion.div>
        );
      })}
    </div>
  );
};