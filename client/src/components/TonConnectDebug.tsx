import React, { useEffect, useState } from 'react';
import { useTonAddress, useTonConnectUI } from '@tonconnect/ui-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { AlertCircle, CheckCircle, Loader2, RefreshCw } from 'lucide-react';

interface DebugInfo {
  manifestStatus: 'loading' | 'success' | 'error';
  manifestError?: string;
  manifestData?: any;
  walletConnected: boolean;
  walletAddress?: string;
  error?: string;
}

export function TonConnectDebug() {
  const [tonConnectUI] = useTonConnectUI();
  const userFriendlyAddress = useTonAddress();
  const [debugInfo, setDebugInfo] = useState<DebugInfo>({
    manifestStatus: 'loading',
    walletConnected: false
  });

  console.log('[TonConnectDebug] Component rendered', {
    tonConnectUI: !!tonConnectUI,
    userFriendlyAddress,
    connected: tonConnectUI?.connected
  });

  useEffect(() => {
    console.log('[TonConnectDebug] useEffect called');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    checkManifest();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    const checkWallet = setInterval(() => {
      const connected = tonConnectUI?.connected || false;
      console.log('[TonConnectDebug] Wallet check:', { connected, userFriendlyAddress });
      
      setDebugInfo(prev => ({
        ...prev,
        walletConnected: connected,
        walletAddress: userFriendlyAddress
      }));
    }, 1000);

    return () => clearInterval(checkWallet);
  }, [tonConnectUI?.connected, userFriendlyAddress]);

  const checkManifest = async () => {
    try {
      console.log('[TonConnectDebug] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...');
      const response = await fetch('/tonconnect-manifest.json');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('[TonConnectDebug] –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', data);
      
      setDebugInfo(prev => ({
        ...prev,
        manifestStatus: 'success',
        manifestData: data
      }));
    } catch (error) {
      console.error('[TonConnectDebug] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:', error);
      setDebugInfo(prev => ({
        ...prev,
        manifestStatus: 'error',
        manifestError: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }));
    }
  };

  const handleConnect = async () => {
    try {
      console.log('[TonConnectDebug] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...', {
        tonConnectUI: !!tonConnectUI,
        connected: tonConnectUI?.connected
      });
      
      if (!tonConnectUI) {
        throw new Error('TonConnectUI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
      const result = await tonConnectUI.openModal();
      console.log('[TonConnectDebug] –†–µ–∑—É–ª—å—Ç–∞—Ç openModal:', result);
    } catch (error) {
      console.error('[TonConnectDebug] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      setDebugInfo(prev => ({
        ...prev,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
      }));
    }
  };

  const handleDisconnect = async () => {
    try {
      console.log('[TonConnectDebug] –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫...');
      await tonConnectUI.disconnect();
    } catch (error) {
      console.error('[TonConnectDebug] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>üîç TON Connect Debug</CardTitle>
        <CardDescription>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –°—Ç–∞—Ç—É—Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ */}
        <div className="space-y-2">
          <h3 className="font-semibold">–°—Ç–∞—Ç—É—Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞</h3>
          {debugInfo.manifestStatus === 'loading' && (
            <Alert>
              <Loader2 className="h-4 w-4 animate-spin" />
              <AlertDescription>–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç...</AlertDescription>
            </Alert>
          )}
          {debugInfo.manifestStatus === 'success' && (
            <Alert className="border-green-500 bg-green-50 dark:bg-green-950">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-600">
                –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ
              </AlertDescription>
            </Alert>
          )}
          {debugInfo.manifestStatus === 'error' && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {debugInfo.manifestError}
              </AlertDescription>
            </Alert>
          )}
        </div>

        {/* –î–∞–Ω–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ */}
        {debugInfo.manifestData && (
          <div className="space-y-2">
            <h3 className="font-semibold">–î–∞–Ω–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞</h3>
            <pre className="p-4 bg-muted rounded-lg overflow-x-auto text-xs">
              {JSON.stringify(debugInfo.manifestData, null, 2)}
            </pre>
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞ */}
        <div className="space-y-2">
          <h3 className="font-semibold">–°—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞</h3>
          <div className="flex items-center gap-2">
            <div className={`h-3 w-3 rounded-full ${debugInfo.walletConnected ? 'bg-green-500' : 'bg-red-500'}`} />
            <span>{debugInfo.walletConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}</span>
          </div>
          {debugInfo.walletAddress && (
            <div className="text-sm text-muted-foreground">
              –ê–¥—Ä–µ—Å: {debugInfo.walletAddress}
            </div>
          )}
        </div>

        {/* –û—à–∏–±–∫–∏ */}
        {debugInfo.error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{debugInfo.error}</AlertDescription>
          </Alert>
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex gap-2">
          {!debugInfo.walletConnected ? (
            <Button onClick={handleConnect} className="flex-1">
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            </Button>
          ) : (
            <Button onClick={handleDisconnect} variant="outline" className="flex-1">
              –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            </Button>
          )}
          <Button onClick={checkManifest} variant="outline" size="icon">
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        <div className="mt-4 p-4 bg-muted rounded-lg text-sm">
          <h4 className="font-semibold mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>
          <ol className="list-decimal list-inside space-y-1">
            <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫</li>
            <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤</li>
            <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (Tonkeeper, MyTonWallet)</li>
            <li>–ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω –∏ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏</li>
          </ol>
        </div>
      </CardContent>
    </Card>
  );
}