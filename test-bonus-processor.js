/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤,
 * –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é ReferralBonusProcessor.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node test-bonus-processor.js <user_id> <amount> <currency>
 */

require('dotenv').config();
const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// –≠–º—É–ª—è—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã TransactionType
const TransactionType = {
  REFERRAL_BONUS: 'referral_bonus'
};

// –≠–º—É–ª—è—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Currency
const Currency = {
  UNI: 'UNI',
  TON: 'TON'
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã reward_distribution_logs
 */
async function checkRewardLogsTable() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã reward_distribution_logs...');
    
    const { rows: tables } = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'reward_distribution_logs'
    `);
    
    if (tables.length === 0) {
      console.log('üî® –¢–∞–±–ª–∏—Ü–∞ reward_distribution_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
      
      await pool.query(`
        CREATE TABLE IF NOT EXISTS reward_distribution_logs (
          id SERIAL PRIMARY KEY,
          source_user_id INTEGER NOT NULL,
          batch_id VARCHAR(100) NOT NULL,
          currency VARCHAR(10) NOT NULL,
          earned_amount VARCHAR(30) NOT NULL,
          status VARCHAR(20) NOT NULL DEFAULT 'pending',
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          started_at TIMESTAMP WITH TIME ZONE,
          completed_at TIMESTAMP WITH TIME ZONE,
          error_message TEXT
        )
      `);
      
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_reward_logs_status ON reward_distribution_logs(status)
      `);
      
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_reward_logs_batch ON reward_distribution_logs(batch_id)
      `);
      
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_reward_logs_source_user ON reward_distribution_logs(source_user_id)
      `);
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ reward_distribution_logs —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      return true;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ reward_distribution_logs —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã reward_distribution_logs:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getReferralStructure(userId, maxLevels = 20) {
  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (–º–∞–∫—Å–∏–º—É–º ${maxLevels} —É—Ä–æ–≤–Ω–µ–π)...`);
    
    const { rows } = await pool.query(`
      WITH RECURSIVE ref_tree AS (
        SELECT id, parent_id, username, ref_code, 0 AS level
        FROM users
        WHERE id = $1
        
        UNION ALL
        
        SELECT u.id, u.parent_id, u.username, u.ref_code, rt.level + 1
        FROM users u
        JOIN ref_tree rt ON u.parent_id = rt.id
        WHERE rt.level < $2
      )
      SELECT id, parent_id, username, ref_code, level
      FROM ref_tree
      ORDER BY level, id
    `, [userId, maxLevels]);
    
    if (rows.length <= 1) {
      console.log('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const levelCounts = rows.reduce((acc, user) => {
        acc[user.level] = (acc[user.level] || 0) + 1;
        return acc;
      }, {});
      
      console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
      Object.keys(levelCounts).sort((a, b) => a - b).forEach(level => {
        console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${levelCounts[level]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      });
    }
    
    return rows;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
    throw error;
  }
}

/**
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ReferralBonusProcessor
 * –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processReferralBonus(userId, earnedAmount, currency) {
  try {
    console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log(`üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnedAmount} ${currency}`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–∫–µ—Ç–∞
    const batchId = `test-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const structure = await getReferralStructure(userId);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º
    if (structure.length <= 1) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤');
      return {
        batchId,
        updatedUsers: 0,
        totalBonus: 0
      };
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await pool.query(
      'INSERT INTO reward_distribution_logs (source_user_id, batch_id, currency, earned_amount, status, started_at) VALUES ($1, $2, $3, $4, $5, NOW())',
      [userId, batchId, currency, earnedAmount.toString(), 'processing']
    );
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è (—ç–º—É–ª—è—Ü–∏—è)
    const levelPercents = Array(20).fill(0).map((_, i) => {
      if (i === 0) return 0.05; // 5% –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
      if (i === 1) return 0.03; // 3% –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
      if (i <= 5) return 0.01; // 1% –¥–ª—è 3-5 —É—Ä–æ–≤–Ω–µ–π
      return 0.005; // 0.5% –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    });
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∞–º–æ–≥–æ —Å–µ–±—è)
    const referrals = structure.filter(user => user.id !== userId);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const referralsByParent = referrals.reduce((acc, user) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Ä–æ–≤–Ω–µ–º >= 20
      if (user.level >= 20) return acc;
      
      const parentId = user.parent_id;
      if (!acc[parentId]) {
        acc[parentId] = [];
      }
      acc[parentId].push(user);
      return acc;
    }, {});
    
    console.log(`üë• –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ ${Object.keys(referralsByParent).length} –∏–Ω–≤–∞–π—Ç–µ—Ä–∞–º`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const balanceUpdates = [];
    const transactionInserts = [];
    
    // –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤)
    const userIds = [];
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    for (const parentId in referralsByParent) {
      const percent = levelPercents[referralsByParent[parentId][0].level - 1] || 0;
      const bonusAmount = earnedAmount * percent;
      
      if (bonusAmount <= 0) continue;
      
      const formattedAmount = bonusAmount.toFixed(6);
      balanceUpdates.push({
        id: parseInt(parentId),
        amount: formattedAmount
      });
      
      userIds.push(parseInt(parentId));
      
      transactionInserts.push({
        user_id: parseInt(parentId),
        type: TransactionType.REFERRAL_BONUS,
        currency: currency,
        amount: formattedAmount,
        status: 'confirmed',
        source: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —É—Ä–æ–≤–Ω—è ${referralsByParent[parentId][0].level}`,
        meta: JSON.stringify({
          source_user_id: userId,
          level: referralsByParent[parentId][0].level,
          batch_id: batchId
        })
      });
    }
    
    console.log(`üí≥ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${balanceUpdates.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞`);
    console.log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${transactionInserts.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å –ø–æ–º–æ—â—å—é CASE
      if (balanceUpdates.length > 0) {
        // –°–æ–∑–¥–∞–µ–º CASE –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        const caseExpressions = balanceUpdates.map(update => 
          `WHEN id = ${update.id} THEN balance_${currency.toLowerCase()} + ${update.amount}`
        ).join('\n');
        
        const userIdsStr = userIds.join(',');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
        const updateQuery = `
          UPDATE users
          SET balance_${currency.toLowerCase()} = CASE
            ${caseExpressions}
            ELSE balance_${currency.toLowerCase()}
          END
          WHERE id IN (${userIdsStr})
        `;
        
        await client.query(updateQuery);
        console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${balanceUpdates.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
      
      // –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (transactionInserts.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        const values = transactionInserts.map((tx, i) => 
          `($${i*6+1}, $${i*6+2}, $${i*6+3}, $${i*6+4}, $${i*6+5}, $${i*6+6})`
        ).join(', ');
        
        const params = transactionInserts.flatMap(tx => [
          tx.user_id,
          tx.type,
          tx.currency,
          tx.amount,
          tx.status,
          tx.source
        ]);
        
        const insertQuery = `
          INSERT INTO transactions 
          (user_id, type, currency, amount, status, source)
          VALUES ${values}
        `;
        
        await client.query(insertQuery, params);
        console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ ${transactionInserts.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      await client.query(
        'UPDATE reward_distribution_logs SET status = $1, completed_at = NOW() WHERE batch_id = $2',
        ['completed', batchId]
      );
      
      await client.query('COMMIT');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
      return {
        batchId,
        updatedUsers: balanceUpdates.length,
        totalBonus: balanceUpdates.reduce((sum, update) => sum + parseFloat(update.amount), 0)
      };
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:', error);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      await pool.query(
        'UPDATE reward_distribution_logs SET status = $1, error_message = $2, completed_at = NOW() WHERE batch_id = $3',
        ['failed', error.message, batchId]
      );
      
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ processReferralBonus:', error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
 */
async function runTest(userId, amount, currency) {
  console.log(`\n============================================`);
  console.log(`üöÄ –¢–ï–°–¢ –ü–†–û–¶–ï–°–°–û–†–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ë–û–ù–£–°–û–í`);
  console.log(`============================================\n`);
  console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:`);
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
  console.log(`üí∞ –°—É–º–º–∞: ${amount}`);
  console.log(`üíµ –í–∞–ª—é—Ç–∞: ${currency}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∂—É—Ä–Ω–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const tableExists = await checkRewardLogsTable();
    if (!tableExists) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É reward_distribution_logs');
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    console.time('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    const result = await processReferralBonus(userId, amount, currency);
    console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:`);
    console.log(`üÜî Batch ID: ${result.batchId}`);
    console.log(`üë• –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.updatedUsers}`);
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: ${result.totalBonus.toFixed(6)} ${currency}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂—É—Ä–Ω–∞–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const { rows: logs } = await pool.query(
      'SELECT * FROM reward_distribution_logs WHERE batch_id = $1',
      [result.batchId]
    );
    
    if (logs.length > 0) {
      console.log(`\nüìù –ó–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:`);
      console.log(`üÜî ID: ${logs[0].id}`);
      console.log(`üë§ Source User ID: ${logs[0].source_user_id}`);
      console.log(`üí∞ Earned Amount: ${logs[0].earned_amount} ${logs[0].currency}`);
      console.log(`üîÑ –°—Ç–∞—Ç—É—Å: ${logs[0].status}`);
      console.log(`‚è∞ –°–æ–∑–¥–∞–Ω–æ: ${logs[0].created_at}`);
      console.log(`üöÄ –ù–∞—á–∞—Ç–æ: ${logs[0].started_at}`);
      console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${logs[0].completed_at}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
  }
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    if (args.length < 3) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.error('node test-bonus-processor.js <user_id> <amount> <currency>');
      console.error('–ü—Ä–∏–º–µ—Ä: node test-bonus-processor.js 1 100 UNI');
      process.exit(1);
    }
    
    const userId = parseInt(args[0]);
    const amount = parseFloat(args[1]);
    const currency = args[2].toUpperCase();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (isNaN(userId) || userId <= 0) {
      console.error('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    if (isNaN(amount) || amount <= 0) {
      console.error('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    if (currency !== 'UNI' && currency !== 'TON') {
      console.error('‚ùå –í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å UNI –∏–ª–∏ TON');
      process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await runTest(userId, amount, currency);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await pool.end();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();