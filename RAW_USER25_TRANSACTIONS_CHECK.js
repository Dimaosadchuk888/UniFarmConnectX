#!/usr/bin/env node

/**
 * –ü–†–û–í–ï–†–ö–ê –°–´–†–´–• –î–ê–ù–ù–´–• User #25 - –ë–ï–ó –§–ò–õ–¨–¢–†–û–í
 * –ü–æ–∫–∞–∂–µ—Ç –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –Ω–∞–π–¥–µ—Ç –≥–¥–µ –ø—Ä–æ–ø–∞–ª–∏ TON –¥–µ–ø–æ–∑–∏—Ç—ã
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkRawUser25Data() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–´–†–´–• –î–ê–ù–ù–´–• User #25 - –ë–ï–ó –§–ò–õ–¨–¢–†–û–í');
  console.log('='.repeat(80));
  
  // 1. –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò User #25 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
  console.log('\n1Ô∏è‚É£ –°–´–†–´–ï –î–ê–ù–ù–´–ï - –ü–û–°–õ–ï–î–ù–ò–ï 100 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User #25');
  console.log('-'.repeat(60));
  
  const { data: allTransactions, error: txError } = await supabase
    .from('transactions')
    .select('id, type, amount_ton, amount_uni, currency, description, created_at')
    .eq('user_id', 25)
    .order('created_at', { ascending: false })
    .limit(100);

  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    return;
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions.length}`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ amount_ton
  const withAmountTon = allTransactions.filter(tx => parseFloat(tx.amount_ton || 0) > 0);
  const withTonCurrency = allTransactions.filter(tx => tx.currency === 'TON');
  const withTonInDescription = allTransactions.filter(tx => 
    tx.description && tx.description.toLowerCase().includes('ton')
  );
  
  console.log(`ü™ô –° amount_ton > 0: ${withAmountTon.length}`);
  console.log(`üí∞ –° currency=TON: ${withTonCurrency.length}`);
  console.log(`üìù –° 'TON' –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: ${withTonInDescription.length}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  console.log('\nüìã –ü–†–ò–ú–ï–†–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° amount_ton > 0:');
  withAmountTon.slice(0, 10).forEach(tx => {
    console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[0]} | ${tx.type} | ${tx.amount_ton} TON`);
    console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${(tx.description || '').substring(0, 80)}...`);
  });
  
  console.log('\nüìã –ü–†–ò–ú–ï–†–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° currency=TON:');
  withTonCurrency.slice(0, 10).forEach(tx => {
    console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[0]} | ${tx.type} | ${tx.amount_ton} TON`);
    console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${(tx.description || '').substring(0, 80)}...`);
  });

  console.log('\nüìã –ü–†–ò–ú–ï–†–´ –° TON –í –û–ü–ò–°–ê–ù–ò–ò:');
  withTonInDescription.slice(0, 10).forEach(tx => {
    console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[0]} | ${tx.type} | ${tx.amount_ton} TON`);
    console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${(tx.description || '').substring(0, 80)}...`);
  });

  // 2. –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í User #25');
  console.log('-'.repeat(60));
  
  const blockchainDeposits = allTransactions.filter(tx => 
    tx.description && tx.description.includes('blockchain')
  );
  
  console.log(`üîó –ù–∞–π–¥–µ–Ω–æ blockchain –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${blockchainDeposits.length}`);
  
  if (blockchainDeposits.length > 0) {
    console.log('üìã –î–ï–¢–ê–õ–ò BLOCKCHAIN –î–ï–ü–û–ó–ò–¢–û–í:');
    blockchainDeposits.forEach(tx => {
      console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[0]} | Type:${tx.type}`);
      console.log(`  Amount TON: ${tx.amount_ton} | Currency: ${tx.currency}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log('  ---');
    });
  }
  
  // 3. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú
  console.log('\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('-'.repeat(60));
  
  const typeStats = {};
  allTransactions.forEach(tx => {
    const key = `${tx.type}-${tx.currency}`;
    if (!typeStats[key]) {
      typeStats[key] = { count: 0, totalTon: 0, totalUni: 0 };
    }
    typeStats[key].count++;
    typeStats[key].totalTon += parseFloat(tx.amount_ton || 0);
    typeStats[key].totalUni += parseFloat(tx.amount_uni || 0);
  });
  
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:');
  Object.entries(typeStats).forEach(([type, stats]) => {
    if (stats.totalTon > 0) {
      console.log(`ü™ô ${type}: ${stats.count} —à—Ç, ${stats.totalTon.toFixed(6)} TON`);
    } else {
      console.log(`   ${type}: ${stats.count} —à—Ç, ${stats.totalUni.toFixed(6)} UNI`);
    }
  });

  // 4. –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê –ü–û –í–°–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú
  console.log('\n4Ô∏è‚É£ –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–ê –ü–û –í–°–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú');
  console.log('-'.repeat(60));
  
  let totalTonBalance = 0;
  let totalUniBalance = 0;
  
  allTransactions.forEach(tx => {
    const tonAmount = parseFloat(tx.amount_ton || 0);
    const uniAmount = parseFloat(tx.amount_uni || 0);
    
    // –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ FARMING_REWARD –∏ REFERRAL_REWARD –∫–∞–∫ –¥–æ—Ö–æ–¥—ã
    if (['FARMING_REWARD', 'REFERRAL_REWARD'].includes(tx.type)) {
      totalTonBalance += tonAmount;
      totalUniBalance += uniAmount;
    } else if (tx.type?.includes('WITHDRAWAL')) {
      totalTonBalance -= tonAmount;
      totalUniBalance -= uniAmount;
    }
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∫–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º
  });
  
  console.log(`üí∞ –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–° –ø–æ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º:`);
  console.log(`   TON: ${totalTonBalance.toFixed(6)}`);
  console.log(`   UNI: ${totalUniBalance.toFixed(6)}`);
  
  // 5. –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ë–ê–õ–ê–ù–°–ê
  const { data: userData } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', 25)
    .single();
  
  if (userData) {
    console.log(`\nüí∞ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–°:`);
    console.log(`   TON: ${userData.balance_ton}`);
    console.log(`   UNI: ${userData.balance_uni}`);
    
    const tonDiff = parseFloat(userData.balance_ton) - totalTonBalance;
    const uniDiff = parseFloat(userData.balance_uni) - totalUniBalance;
    
    console.log(`\n‚ö†Ô∏è  –†–ê–ó–ù–ò–¶–ê:`);
    console.log(`   TON: ${tonDiff.toFixed(6)} (${tonDiff > 0 ? '–∏–∑–±—ã—Ç–æ–∫' : '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'})`);
    console.log(`   UNI: ${uniDiff.toFixed(6)} (${uniDiff > 0 ? '–∏–∑–±—ã—Ç–æ–∫' : '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'})`);
  }
  
  console.log('\n' + '='.repeat(80));
}

checkRawUser25Data().catch(console.error);