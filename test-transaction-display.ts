/**
 * –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –•–ï–®–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–µ—à–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

import { supabase } from './core/supabaseClient';

async function testTransactionDisplay() {
  console.log('üß™ –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –•–ï–®–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User ID 25');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ö–µ—à–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('='.repeat(80));

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–µ–ø–æ–∑–∏—Ç–∞ User ID 25
    const { data: deposits, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'completed')
      .order('created_at', { ascending: false })
      .limit(3);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      return;
    }

    if (!deposits || deposits.length === 0) {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log('');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
    for (let i = 0; i < deposits.length; i++) {
      const deposit = deposits[i];
      
      console.log(`${i + 1}. –î–µ–ø–æ–∑–∏—Ç ID ${deposit.id}`);
      console.log(`   –í—Ä–µ–º—è: ${deposit.created_at}`);
      console.log(`   –°—É–º–º–∞: ${deposit.amount_ton} TON`);
      console.log(`   –¢–∏–ø: ${deposit.type}`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ TransactionItem
      const transactionHash = deposit.metadata?.tx_hash || deposit.metadata?.ton_tx_hash || deposit.transaction_hash;
      const isTonDeposit = deposit.type === 'TON_DEPOSIT';
      
      console.log(`   üìã –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:`);
      console.log(`      - transactionHash: ${transactionHash ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
      console.log(`      - isTonDeposit: ${isTonDeposit}`);
      console.log(`      - –£—Å–ª–æ–≤–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${transactionHash && isTonDeposit ? '‚úÖ –ü–û–ö–ê–ñ–ï–¢–°–Ø' : '‚ùå –ù–ï –ü–û–ö–ê–ñ–ï–¢–°–Ø'}`);
      
      if (transactionHash && isTonDeposit) {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∫ —Ö–µ—à –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ UI
        const displayHash = transactionHash.length > 16 
          ? `${transactionHash.slice(0, 8)}...${transactionHash.slice(-8)}`
          : transactionHash;
        
        const tonViewerUrl = `https://tonviewer.com/transaction/${transactionHash}`;
        
        console.log(`      ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ UI:`);
        console.log(`         –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ö–µ—à: "${displayHash}"`);
        console.log(`         –ü–æ–ª–Ω—ã–π —Ö–µ—à: "${transactionHash}"`);
        console.log(`         TON Viewer URL: ${tonViewerUrl}`);
        console.log(`         –ö–Ω–æ–ø–∫–∏: [–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å] [TON Viewer]`);
      } else {
        console.log(`      ‚ùå –í UI –ù–ï –û–¢–û–ë–†–ê–ó–ò–¢–°–Ø - –Ω–µ—Ç —Ö–µ—à–∞ –∏–ª–∏ –Ω–µ TON –¥–µ–ø–æ–∑–∏—Ç`);
      }
      
      console.log('');
    }
    
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
    const depositsWithHashes = deposits.filter(d => 
      (d.metadata?.tx_hash || d.metadata?.ton_tx_hash || d.transaction_hash) && d.type === 'TON_DEPOSIT'
    ).length;
    
    console.log(`–î–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —Ö–µ—à–∞–º–∏: ${depositsWithHashes}/${deposits.length}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${Math.round((depositsWithHashes / deposits.length) * 100)}%`);
    
    if (depositsWithHashes === deposits.length) {
      console.log('‚úÖ –í–°–ï –î–ï–ü–û–ó–ò–¢–´ –ë–£–î–£–¢ –û–¢–û–ë–†–ê–ñ–ê–¢–¨ –•–ï–®–ò!');
    } else {
      console.log('‚ö†Ô∏è –ù–µ –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ö–µ—à–∏');
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTransactionDisplay().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});