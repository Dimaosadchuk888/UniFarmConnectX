import { supabase } from './core/supabase';

async function analyzeDeposits() {
  const userId = 74;
  console.log('=== –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n');
  
  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const { data: deposits } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'FARMING_DEPOSIT')
    .order('created_at', { ascending: false });
    
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${deposits?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_DEPOSIT`);
  
  let totalDeposits = 0;
  deposits?.forEach((dep, idx) => {
    totalDeposits += parseFloat(dep.amount_uni || '0');
    console.log(`  ${idx + 1}. ${dep.created_at}: ${dep.amount_uni} UNI (${dep.description})`);
  });
  
  console.log(`\nüí∞ –°—É–º–º–∞ –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalDeposits} UNI`);
  
  // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç –∏–∑ uni_farming_data
  const { data: farmingData } = await supabase
    .from('uni_farming_data')
    .select('deposit_amount, is_active, created_at, updated_at')
    .eq('user_id', userId)
    .single();
    
  console.log(`\nüìà –¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç –≤ uni_farming_data: ${farmingData?.deposit_amount || 0} UNI`);
  console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${farmingData?.is_active ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –°–æ–∑–¥–∞–Ω: ${farmingData?.created_at}`);
  console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${farmingData?.updated_at}`);
  
  // 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞
  const { data: income } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'FARMING_INCOME')
    .order('created_at', { ascending: false })
    .limit(5);
    
  console.log(`\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞:`);
  income?.forEach((inc, idx) => {
    console.log(`  ${idx + 1}. ${inc.created_at}: +${inc.amount_uni} UNI`);
  });
  
  // 4. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
  const difference = (farmingData?.deposit_amount || 0) - totalDeposits;
  console.log(`\nüîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:`);
  console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${difference} UNI`);
  
  if (difference > 0) {
    console.log(`   ‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç –≤ farming_data –ë–û–õ–¨–®–ï —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ ${difference} UNI`);
    console.log(`   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
    console.log(`   - –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ deposit_amount –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`   - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏`);
    console.log(`   - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ –¥–µ–ø–æ–∑–∏—Ç`);
  } else if (difference < 0) {
    console.log(`   ‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç –≤ farming_data –ú–ï–ù–¨–®–ï —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ ${Math.abs(difference)} UNI`);
    console.log(`   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
    console.log(`   - –ß–∞—Å—Ç–∏—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã –Ω–µ –æ—Ç—Ä–∞–∂–µ–Ω—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö`);
    console.log(`   - –û—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
  } else {
    console.log(`   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
  }
}

analyzeDeposits().catch(console.error);