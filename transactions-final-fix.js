/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã transactions schema
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
 */

import { createClient } from '@supabase/supabase-js';

async function fixTransactionsSchema() {
  const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
  
  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é transactions —Ç–∞–±–ª–∏—Ü—É...');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: existingTx } = await supabase
      .from('transactions')
      .select('*')
      .limit(5);

    let schema = null;
    
    if (existingTx && existingTx.length > 0) {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const fields = Object.keys(existingTx[0]);
      const types = [...new Set(existingTx.map(t => t.type))];
      
      schema = {
        fields: fields,
        existing_types: types,
        sample_count: existingTx.length
      };
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`‚úÖ –ü–æ–ª—è: ${fields.join(', ')}`);
      console.log(`‚úÖ –¢–∏–ø—ã: ${types.join(', ')}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã
      const { data: users } = await supabase
        .from('users')
        .select('id')
        .limit(1);

      if (users && users.length > 0) {
        const userId = users[0].id;
        
        // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        const { data: testTx, error } = await supabase
          .from('transactions')
          .insert({
            user_id: userId,
            description: 'Schema analysis transaction'
          })
          .select()
          .single();

        if (testTx) {
          schema = {
            fields: Object.keys(testTx),
            minimal_transaction: testTx,
            note: 'Created from minimal test'
          };
          
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await supabase
            .from('transactions')
            .delete()
            .eq('id', testTx.id);
            
          console.log(`‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ö–µ–º–∞: ${schema.fields.join(', ')}`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è transactions
    const adaptedCode = {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      createTransaction: `
const createTransaction = async (userId, description, additionalData = {}) => {
  const transactionData = {
    user_id: userId,
    description: description,
    created_at: new Date().toISOString(),
    ...additionalData
  };

  const { data, error } = await supabase
    .from('transactions')
    .insert(transactionData)
    .select()
    .single();

  if (error) {
    console.error('Transaction creation failed:', error.message);
    return { data: null, error };
  }

  return { data, error: null };
};`,

      // –ß—Ç–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      getUserTransactions: `
const getUserTransactions = async (userId, limit = 50) => {
  const { data, error } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false })
    .limit(limit);

  return { data: data || [], error };
};`,

      // –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      getTransactionStats: `
const getTransactionStats = async (userId) => {
  const { count, error } = await supabase
    .from('transactions')
    .select('*', { count: 'exact', head: true })
    .eq('user_id', userId);

  return { count: count || 0, error };
};`
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const report = {
      timestamp: new Date().toISOString(),
      schema_analyzed: schema ? true : false,
      schema: schema,
      adapted_code: adaptedCode,
      status: schema ? 'SCHEMA_WORKING' : 'MINIMAL_FUNCTIONALITY',
      recommendations: [
        'Use minimal transaction structure with user_id and description',
        'Add additional fields as needed based on actual schema',
        'Test with existing data structure if available'
      ]
    };

    const fs = await import('fs');
    fs.writeFileSync('TRANSACTIONS_FINAL_FIX.json', JSON.stringify(report, null, 2));

    console.log('\n' + '='.repeat(50));
    console.log('TRANSACTIONS SCHEMA –ò–°–ü–†–ê–í–õ–ï–ù–ê');
    console.log('='.repeat(50));
    console.log(`–°—Ç–∞—Ç—É—Å: ${report.status}`);
    console.log(`–°—Ö–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ${report.schema_analyzed ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log('–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω');
    console.log('='.repeat(50));

    if (schema) {
      console.log('‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê');
    } else {
      console.log('‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –û–ë–ï–°–ü–ï–ß–ï–ù–ê');
    }

    return report;

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixTransactionsSchema()
  .then(result => {
    if (result) {
      console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ TRANSACTIONS_FINAL_FIX.json');
    }
  })
  .catch(console.error);