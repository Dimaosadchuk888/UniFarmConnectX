/**
 * –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: 290, 278, 191, 184
 * –ü–æ—á–µ–º—É –∏—Ö ton_farming_data –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–æ–∑–¥–∞–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –≤—Ä—É—á–Ω—É—é
const AFFECTED_USERS = [290, 278, 191, 184];

async function analyzeSpecificUserActivationFailures() {
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 290, 278, 191, 184');
    console.log('=' .repeat(70));
    
    try {
        for (const userId of AFFECTED_USERS) {
            console.log(`\nüë§ === –ê–ù–ê–õ–ò–ó USER ${userId} ===`);
            
            // 1. –ò—â–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ TON Boost —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: userPurchases, error: purchasesError } = await supabase
                .from('transactions')
                .select('*')
                .eq('type', 'BOOST_PURCHASE')
                .eq('user_id', userId)
                .order('created_at', { ascending: true });
                
            if (purchasesError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ User ${userId}:`, purchasesError);
                continue;
            }
            
            console.log(`üí∞ –ü–û–ö–£–ü–ö–ò TON BOOST: ${userPurchases?.length || 0}`);
            
            if (!userPurchases || userPurchases.length === 0) {
                console.log('‚ö†Ô∏è –ü–æ–∫—É–ø–æ–∫ TON Boost –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                continue;
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É
            userPurchases.forEach((purchase, index) => {
                const purchaseTime = new Date(purchase.created_at);
                console.log(`\n   üí∞ –ü–æ–∫—É–ø–∫–∞ ${index + 1}:`);
                console.log(`      ID: ${purchase.id}`);
                console.log(`      –í—Ä–µ–º—è: ${purchaseTime.toLocaleString('ru-RU')}`);
                console.log(`      –°—É–º–º–∞: ${purchase.amount} ${purchase.currency}`);
                if (purchase.metadata) {
                    console.log(`      Package: ${purchase.metadata.package_name} (ID: ${purchase.metadata.boost_package_id})`);
                    console.log(`      Rate: ${purchase.metadata.daily_rate}`);
                }
            });
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ users —Ç–∞–±–ª–∏—Ü—ã
            const { data: userState, error: userError } = await supabase
                .from('users')
                .select('ton_boost_package, ton_boost_rate, ton_boost_active, created_at')
                .eq('id', userId)
                .single();
                
            if (userState) {
                console.log(`\n   üë§ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï USERS:`);
                console.log(`      ton_boost_package: ${userState.ton_boost_package}`);
                console.log(`      ton_boost_rate: ${userState.ton_boost_rate}`);
                console.log(`      ton_boost_active: ${userState.ton_boost_active}`);
                console.log(`      –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(userState.created_at).toLocaleDateString('ru-RU')}`);
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ ton_farming_data –∑–∞–ø–∏—Å–∏
            const { data: farmingRecords, error: farmingError } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', userId.toString())
                .order('created_at', { ascending: true });
                
            console.log(`\n   üöú TON_FARMING_DATA –ó–ê–ü–ò–°–ò: ${farmingRecords?.length || 0}`);
            
            if (farmingRecords && farmingRecords.length > 0) {
                farmingRecords.forEach((record, index) => {
                    const recordTime = new Date(record.created_at);
                    console.log(`\n      üìù –ó–∞–ø–∏—Å—å ${index + 1}:`);
                    console.log(`         ID: ${record.id}`);
                    console.log(`         –°–æ–∑–¥–∞–Ω–∞: ${recordTime.toLocaleString('ru-RU')}`);
                    console.log(`         Balance: ${record.farming_balance}`);
                    console.log(`         Rate: ${record.farming_rate}`);
                    console.log(`         Active: ${record.boost_active}`);
                    console.log(`         Package ID: ${record.boost_package_id}`);
                    
                    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–æ–∫—É–ø–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    if (userPurchases) {
                        let closestPurchase = null;
                        let minTimeDiff = Infinity;
                        
                        userPurchases.forEach(purchase => {
                            const timeDiff = Math.abs(recordTime.getTime() - new Date(purchase.created_at).getTime()) / 1000;
                            if (timeDiff < minTimeDiff) {
                                minTimeDiff = timeDiff;
                                closestPurchase = purchase;
                            }
                        });
                        
                        if (closestPurchase) {
                            console.log(`         üîó –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–∫—É–ø–∫–∞: ID ${closestPurchase.id}`);
                            console.log(`         ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: ${minTimeDiff.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
                            
                            if (minTimeDiff <= 600) {
                                console.log(`         ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï`);
                            } else if (minTimeDiff <= 3600) {
                                console.log(`         ‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–û –†–£–ß–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï`);
                            } else {
                                console.log(`         üîÑ –°–¢–ê–†–ê–Ø –ó–ê–ü–ò–°–¨ –ò–õ–ò –†–£–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï`);
                            }
                        }
                    }
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è)
                const recentRecords = farmingRecords.filter(record => {
                    const recordTime = new Date(record.created_at);
                    const twoDaysAgo = new Date();
                    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
                    return recordTime >= twoDaysAgo;
                });
                
                console.log(`\n   üìÖ –ù–ï–î–ê–í–ù–ò–ï –ó–ê–ü–ò–°–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è): ${recentRecords.length}`);
                
                if (recentRecords.length > 0) {
                    console.log(`   üîß –°–¢–ê–¢–£–°: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π`);
                } else {
                    console.log(`   ‚ö†Ô∏è –°–¢–ê–¢–£–°: –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
                }
            } else {
                console.log(`   ‚ùå TON_FARMING_DATA –ó–ê–ü–ò–°–ò –û–¢–°–£–¢–°–¢–í–£–Æ–¢!`);
                console.log(`   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø–æ–∫—É–ø–∫–∏, –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã`);
            }
            
            // 4. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if (userPurchases && userPurchases.length > 0) {
                console.log(`\n   ‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:`);
                
                const firstPurchase = userPurchases[0];
                const lastPurchase = userPurchases[userPurchases.length - 1];
                const firstTime = new Date(firstPurchase.created_at);
                const lastTime = new Date(lastPurchase.created_at);
                
                console.log(`      üìÖ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: ${firstTime.toLocaleString('ru-RU')}`);
                console.log(`      üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${lastTime.toLocaleString('ru-RU')}`);
                
                if (userPurchases.length > 1) {
                    const timeSpan = (lastTime.getTime() - firstTime.getTime()) / 1000 / 60; // –º–∏–Ω—É—Ç—ã
                    console.log(`      ‚è±Ô∏è –ü–µ—Ä–∏–æ–¥ –ø–æ–∫—É–ø–æ–∫: ${timeSpan.toFixed(1)} –º–∏–Ω—É—Ç`);
                    
                    if (timeSpan < 60) {
                        console.log(`      üö® –í–´–°–û–ö–ê–Ø –ß–ê–°–¢–û–¢–ê –ü–û–ö–£–ü–û–ö - –≤–æ–∑–º–æ–∂–Ω—ã–µ race conditions`);
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥ (25 –∏—é–ª—è –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                const criticalPeriodStart = new Date('2025-07-25T00:00:00.000Z');
                const criticalPeriodEnd = new Date('2025-07-25T12:00:00.000Z');
                
                const criticalPurchases = userPurchases.filter(purchase => {
                    const purchaseTime = new Date(purchase.created_at);
                    return purchaseTime >= criticalPeriodStart && purchaseTime <= criticalPeriodEnd;
                });
                
                if (criticalPurchases.length > 0) {
                    console.log(`      üéØ –ü–û–ö–£–ü–ö–ò –í –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–ï–†–ò–û–î: ${criticalPurchases.length}`);
                    console.log(`      üí° –ü–µ—Ä–∏–æ–¥ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö`);
                } else {
                    console.log(`      ‚úÖ –ü–æ–∫—É–ø–∫–∏ –≤–Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞`);
                }
            }
        }
        
        // –†–ê–ó–î–ï–õ: –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        console.log(`\nüìä === –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í ===`);
        console.log('-' .repeat(60));
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
        
        let totalPurchases = 0;
        let totalFarmingRecords = 0;
        let usersWithRecentRecords = 0;
        
        for (const userId of AFFECTED_USERS) {
            const { data: purchases } = await supabase
                .from('transactions')
                .select('*')
                .eq('type', 'BOOST_PURCHASE')
                .eq('user_id', userId);
                
            const { data: farmingRecords } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', userId.toString());
                
            const purchaseCount = purchases?.length || 0;
            const farmingCount = farmingRecords?.length || 0;
            
            totalPurchases += purchaseCount;
            totalFarmingRecords += farmingCount;
            
            if (farmingRecords && farmingRecords.length > 0) {
                const hasRecentRecord = farmingRecords.some(record => {
                    const recordTime = new Date(record.created_at);
                    const twoDaysAgo = new Date();
                    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
                    return recordTime >= twoDaysAgo;
                });
                
                if (hasRecentRecord) {
                    usersWithRecentRecords++;
                }
            }
            
            console.log(`   User ${userId}: ${purchaseCount} –ø–æ–∫—É–ø–æ–∫ ‚Üí ${farmingCount} farming –∑–∞–ø–∏—Å–µ–π`);
        }
        
        console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
        console.log(`   üë• –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${AFFECTED_USERS.length}`);
        console.log(`   üí∞ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: ${totalPurchases}`);
        console.log(`   üöú –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ farming –∑–∞–ø–∏—Å–µ–π: ${totalFarmingRecords}`);
        console.log(`   üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: ${usersWithRecentRecords}`);
        console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${((usersWithRecentRecords / AFFECTED_USERS.length) * 100).toFixed(1)}%`);
        
        // –î–ò–ê–ì–ù–û–ó
        console.log(`\nüéØ –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´:`);
        
        if (usersWithRecentRecords === AFFECTED_USERS.length) {
            console.log('‚úÖ –í–°–ï –ü–û–°–¢–†–ê–î–ê–í–®–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´');
            console.log('üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
        } else if (usersWithRecentRecords === 0) {
            console.log('‚ùå –ù–ò –û–î–ò–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò');
            console.log('üö® –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï');
        } else {
            console.log('‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï');
            console.log(`üîß ${AFFECTED_USERS.length - usersWithRecentRecords} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
        }
        
        console.log(`\nüí° –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´:`);
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ TonFarmingRepository.ts:');
        console.log('   ‚ùå –î–û: user_id: parseInt(userId) - INTEGER');
        console.log('   ‚úÖ –ü–û–°–õ–ï: user_id: userId.toString() - STRING');
        console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–ª–∞ STRING, –Ω–æ –ø–æ–ª—É—á–∞–ª–∞ INTEGER');
        console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: INSERT –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeSpecificUserActivationFailures().then(() => {
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});