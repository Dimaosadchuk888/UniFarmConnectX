/**
 * T58 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ UniFarm
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
 */

import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üöÄ T58: –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
 */
function generateRefCode() {
  return `TEST_REF_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function createTestUser(level, referrerCode = null) {
  const telegramId = 2000000000 + level; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ telegram_id –Ω–∞—á–∏–Ω–∞—è —Å 2000000001
  const refCode = generateRefCode();
  
  console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è ${level} (telegram_id: ${telegramId})`);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    let referrerId = null;
    if (referrerCode) {
      const { data: referrer } = await supabase
        .from('users')
        .select('id')
        .eq('ref_code', referrerCode)
        .single();
      
      if (referrer) {
        referrerId = referrer.id;
        console.log(`   üìé –°–≤—è–∑–∞–Ω —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º ID: ${referrerId}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error } = await supabase
      .from('users')
      .insert({
        telegram_id: telegramId,
        username: `test_user_${level}`,
        first_name: `TestUser${level}`,
        ref_code: refCode,
        balance_uni: '100.00000000',
        balance_ton: '100.00000000',
        uni_farming_rate: '0.001000',
        uni_farming_start_timestamp: new Date().toISOString(),
        uni_deposit_amount: '100.00000000',
        referred_by: referrerId
      })
      .select()
      .single();

    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è ${level}:`, error);
      return null;
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è ${level} —Å–æ–∑–¥–∞–Ω (ID: ${user.id}, ref_code: ${refCode})`);
    return user;
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${level}:`, error);
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç 20-—É—Ä–æ–≤–Ω–µ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
 */
async function createReferralChain() {
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏...');
  
  const chain = [];
  let previousRefCode = null;
  
  for (let level = 1; level <= 20; level++) {
    const user = await createTestUser(level, previousRefCode);
    
    if (!user) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è ${level}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞`);
      break;
    }
    
    chain.push(user);
    previousRefCode = user.ref_code;
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${chain.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ`);
  return chain;
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function simulateFarmingIncome(user) {
  const uniIncome = 0.001; // 1 –º–∏–ª–ª–∏—Ç–æ–∫–µ–Ω UNI –¥–æ—Ö–æ–¥–∞
  const tonIncome = 0.0001; // 0.1 –º–∏–ª–ª–∏—Ç–æ–∫–µ–Ω TON –¥–æ—Ö–æ–¥–∞
  
  console.log(`üí∞ –°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`);
  console.log(`    UNI –¥–æ—Ö–æ–¥: ${uniIncome}`);
  console.log(`    TON –¥–æ—Ö–æ–¥: ${tonIncome}`);
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUniBalance = parseFloat(user.balance_uni) + uniIncome;
    const newTonBalance = parseFloat(user.balance_ton) + tonIncome;
    
    const { error: updateError } = await supabase
      .from('users')
      .update({
        balance_uni: newUniBalance.toFixed(8),
        balance_ton: newTonBalance.toFixed(8)
      })
      .eq('id', user.id);
    
    if (updateError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, updateError);
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞
    const transactions = [
      {
        user_id: user.id,
        type: 'UNI_FARMING_INCOME',
        amount_uni: uniIncome.toFixed(8),
        amount_ton: '0',
        currency: 'UNI',
        status: 'completed',
        description: '–î–æ—Ö–æ–¥ –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ (—Ç–µ—Å—Ç)',
        source_user_id: user.id,
        created_at: new Date().toISOString()
      },
      {
        user_id: user.id,
        type: 'TON_BOOST_INCOME',
        amount_uni: '0',
        amount_ton: tonIncome.toFixed(8),
        currency: 'TON',
        status: 'completed',
        description: '–î–æ—Ö–æ–¥ –æ—Ç TON Boost (—Ç–µ—Å—Ç)',
        source_user_id: user.id,
        created_at: new Date().toISOString()
      }
    ];
    
    const { error: txError } = await supabase
      .from('transactions')
      .insert(transactions);
    
    if (txError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, txError);
      return false;
    }
    
    console.log(`‚úÖ –î–æ—Ö–æ–¥ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
    return { uniIncome, tonIncome };
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}:`, error);
    return false;
  }
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Ü–µ–ø–æ—á–∫–∏
 */
async function simulateReferralRewards(chain) {
  console.log('üéÅ –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π...');
  
  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ü–µ–ø–æ—á–∫–µ (—É—Ä–æ–≤–µ–Ω—å 20) –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞
  const sourceUser = chain[chain.length - 1];
  const income = await simulateFarmingIncome(sourceUser);
  
  if (!income) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
    return false;
  }
  
  console.log(`üíé –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${sourceUser.id}...`);
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ü–µ–ø–æ—á–∫–µ –≤–≤–µ—Ä—Ö –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
  let currentUser = sourceUser;
  let level = 1;
  
  while (currentUser && currentUser.referred_by && level <= 20) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const { data: referrer, error: refError } = await supabase
        .from('users')
        .select('*')
        .eq('id', currentUser.referred_by)
        .single();
      
      if (refError || !referrer) {
        console.log(`‚ö†Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ø–æ—á–∫–∏`);
        break;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      const uniReward = level === 1 ? income.uniIncome : income.uniIncome * (level / 100);
      const tonReward = level === 1 ? income.tonIncome : income.tonIncome * (level / 100);
      
      console.log(`üèÜ –£—Ä–æ–≤–µ–Ω—å ${level}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referrer.id} –ø–æ–ª—É—á–∞–µ—Ç:`);
      console.log(`    UNI –Ω–∞–≥—Ä–∞–¥–∞: ${uniReward.toFixed(8)} (${level === 1 ? '100%' : level + '%'})`);
      console.log(`    TON –Ω–∞–≥—Ä–∞–¥–∞: ${tonReward.toFixed(8)} (${level === 1 ? '100%' : level + '%'})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const newUniBalance = parseFloat(referrer.balance_uni) + uniReward;
      const newTonBalance = parseFloat(referrer.balance_ton) + tonReward;
      
      const { error: updateError } = await supabase
        .from('users')
        .update({
          balance_uni: newUniBalance.toFixed(8),
          balance_ton: newTonBalance.toFixed(8)
        })
        .eq('id', referrer.id);
      
      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referrer.id}:`, updateError);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
      const referralTransactions = [];
      
      if (uniReward > 0) {
        referralTransactions.push({
          user_id: referrer.id,
          type: 'REFERRAL_REWARD',
          amount_uni: uniReward.toFixed(8),
          amount_ton: '0',
          currency: 'UNI',
          status: 'completed',
          description: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ${level} —É—Ä–æ–≤–Ω—è –æ—Ç uni_farming`,
          source_user_id: sourceUser.id,
          created_at: new Date().toISOString()
        });
      }
      
      if (tonReward > 0) {
        referralTransactions.push({
          user_id: referrer.id,
          type: 'REFERRAL_REWARD',
          amount_uni: '0',
          amount_ton: tonReward.toFixed(8),
          currency: 'TON',
          status: 'completed',
          description: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ${level} —É—Ä–æ–≤–Ω—è –æ—Ç boost_income`,
          source_user_id: sourceUser.id,
          created_at: new Date().toISOString()
        });
      }
      
      if (referralTransactions.length > 0) {
        const { error: txError } = await supabase
          .from('transactions')
          .insert(referralTransactions);
        
        if (txError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${referrer.id}:`, txError);
        } else {
          console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referrer.id}`);
        }
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
      currentUser = referrer;
      level++;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–≤–Ω—è ${level}:`, error);
      break;
    }
  }
  
  console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${level - 1} —É—Ä–æ–≤–Ω–µ–π`);
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function verifyResults(chain) {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ REFERRAL_REWARD
    const { data: referralTxs, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(50);
    
    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
      return false;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${referralTxs.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    const rewardsByLevel = {};
    referralTxs.forEach(tx => {
      const level = tx.description.match(/(\d+) —É—Ä–æ–≤–Ω—è/)?.[1] || 'unknown';
      if (!rewardsByLevel[level]) {
        rewardsByLevel[level] = { uni: 0, ton: 0, count: 0 };
      }
      rewardsByLevel[level].uni += parseFloat(tx.amount_uni || 0);
      rewardsByLevel[level].ton += parseFloat(tx.amount_ton || 0);
      rewardsByLevel[level].count++;
    });
    
    console.log('\nüìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ —É—Ä–æ–≤–Ω—è–º:');
    Object.keys(rewardsByLevel).sort((a, b) => parseInt(a) - parseInt(b)).forEach(level => {
      const data = rewardsByLevel[level];
      console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: UNI ${data.uni.toFixed(8)}, TON ${data.ton.toFixed(8)} (${data.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüí∞ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    for (let i = 0; i < Math.min(10, chain.length); i++) {
      const user = chain[i];
      const { data: updatedUser } = await supabase
        .from('users')
        .select('id, telegram_id, balance_uni, balance_ton')
        .eq('id', user.id)
        .single();
      
      if (updatedUser) {
        console.log(`   User ${updatedUser.id}: UNI ${updatedUser.balance_uni}, TON ${updatedUser.balance_ton}`);
      }
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    return false;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function cleanupTestData(chain) {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const testUserIds = chain.map(user => user.id);
    
    const { error: txError } = await supabase
      .from('transactions')
      .delete()
      .in('user_id', testUserIds);
    
    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { error: userError } = await supabase
      .from('users')
      .delete()
      .in('id', testUserIds);
    
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runReferralChainTest() {
  console.log('üéØ T58: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏\n');
  
  try {
    // –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
    const chain = await createReferralChain();
    
    if (chain.length !== 20) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∏–∑ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ–∑–¥–∞–Ω–æ: ${chain.length})`);
      return false;
    }
    
    console.log('\nüîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –≠—Ç–∞–ø 2: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    await simulateReferralRewards(chain);
    
    // –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await verifyResults(chain);
    
    // –≠—Ç–∞–ø 4: –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const shouldCleanup = process.argv.includes('--cleanup');
    if (shouldCleanup) {
      await cleanupTestData(chain);
    } else {
      console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --cleanup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }
    
    console.log('\n‚úÖ T58: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runReferralChainTest()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });