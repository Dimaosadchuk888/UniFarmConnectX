/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô HELPER –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í –í –ü–†–û–î–ê–ö–®–ï–ù–ï
 * –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

import { supabase } from './core/supabase';
import { logger } from './core/logger';

export class DeduplicationHelper {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * –ë–ï–ó–û–ü–ê–°–ù–û: —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ—Ç –∏–∑ –ë–î, –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç
   */
  static async checkRecentTransaction(
    userId: number,
    transactionType: string,
    amount: string | number,
    currency: string,
    timeWindowMinutes: number = 10
  ): Promise<{ exists: boolean; existingTransaction?: any }> {
    try {
      const timeWindowAgo = new Date(Date.now() - timeWindowMinutes * 60 * 1000).toISOString();
      
      const { data: existing, error } = await supabase
        .from('transactions')
        .select('id, created_at, description, amount')
        .eq('user_id', userId)
        .eq('type', transactionType)
        .eq('amount', amount.toString())
        .eq('currency', currency)
        .gte('created_at', timeWindowAgo)
        .limit(1);

      if (error) {
        logger.error('[DeduplicationHelper] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
        return { exists: false }; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      }

      if (existing && existing.length > 0) {
        logger.warn('[DeduplicationHelper] üõ°Ô∏è –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', {
          userId,
          transactionType,
          amount,
          currency,
          existingId: existing[0].id,
          existingTime: existing[0].created_at,
          timeWindowMinutes
        });
        
        return { 
          exists: true, 
          existingTransaction: existing[0] 
        };
      }

      return { exists: false };
      
    } catch (error) {
      logger.error('[DeduplicationHelper] Exception –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
      return { exists: false }; // –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ DAILY_BONUS –¥—É–±–ª–∏–∫–∞—Ç—ã
   * –ë–ï–ó–û–ü–ê–°–ù–û: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TON Boost –±–æ–Ω—É—Å–æ–≤
   */
  static async checkDailyBonusDuplicate(
    userId: number, 
    bonusAmount: number,
    packageName: string
  ): Promise<{ isDuplicate: boolean; message?: string }> {
    try {
      const result = await this.checkRecentTransaction(
        userId,
        'DAILY_BONUS',
        bonusAmount,
        'UNI',
        10 // 10 –º–∏–Ω—É—Ç –æ–∫–Ω–æ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      );

      if (result.exists) {
        return {
          isDuplicate: true,
          message: `DAILY_BONUS —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–∞–∫–µ—Ç–∞ "${packageName}" (${bonusAmount} UNI)`
        };
      }

      return { isDuplicate: false };
      
    } catch (error) {
      logger.error('[DeduplicationHelper] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DAILY_BONUS:', error);
      return { isDuplicate: false }; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   * –ë–ï–ó–û–ü–ê–°–ù–û: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
   */
  static logPreventedDuplicate(
    userId: number,
    transactionType: string,
    amount: string | number,
    context: string
  ): void {
    logger.warn('[üõ°Ô∏è DEDUPLICATION] –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', {
      userId,
      transactionType,
      amount,
      context,
      timestamp: new Date().toISOString(),
      preventedBy: 'DeduplicationHelper'
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç farming –¥—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   * –ë–ï–ó–û–ü–ê–°–ù–û: —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  static async checkFarmingDuplicate(
    userId: number,
    farmingType: 'FARMING_DEPOSIT' | 'FARMING_REWARD',
    amount: number
  ): Promise<boolean> {
    const result = await this.checkRecentTransaction(
      userId,
      farmingType,
      amount,
      farmingType === 'FARMING_DEPOSIT' ? 'UNI' : 'UNI',
      5 // 5 –º–∏–Ω—É—Ç –æ–∫–Ω–æ –¥–ª—è farming –æ–ø–µ—Ä–∞—Ü–∏–π
    );

    return result.exists;
  }
}

export default DeduplicationHelper;