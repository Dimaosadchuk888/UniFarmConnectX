#!/usr/bin/env tsx

/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø JWT –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø WITHDRAWAL –°–ò–°–¢–ï–ú–´
 * –î–∞—Ç–∞: 29 –∏—é–ª—è 2025
 * 
 * –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
 * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–º–µ—Å—Ç–æ "Network Error"
 */

import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000/api/v2';

console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø JWT –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò');
console.log('='.repeat(60));

async function testJWTAuth() {
  console.log('\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    const response = await fetch(`${API_BASE}/wallet/withdraw`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer invalid_jwt_token_test'
      },
      body: JSON.stringify({
        amount: '1',
        wallet_address: 'EQTest',
        currency: 'TON'
      })
    });
    
    const data = await response.json() as any;
    
    console.log('Status:', response.status);
    console.log('Response:', JSON.stringify(data, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (response.status === 401) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å 401 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
      
      if (data.error && data.error.includes('Authentication required') || 
          data.error?.includes('Invalid') || 
          data.error?.includes('JWT token') ||
          data.need_jwt_token === true) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ');
        console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JWT –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢!');
        return true;
      } else {
        console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
        return false;
      }
    } else {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return false;
  }
}

async function testWithoutToken() {
  console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    const response = await fetch(`${API_BASE}/wallet/withdraw`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        amount: '1',
        wallet_address: 'EQTest',
        currency: 'TON'
      })
    });
    
    const data = await response.json() as any;
    
    console.log('Status:', response.status);
    console.log('Response:', JSON.stringify(data, null, 2));
    
    if (response.status === 401 && data.need_jwt_token) {
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      return true;
    } else {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return false;
  }
}

async function main() {
  const test1 = await testJWTAuth();
  const test2 = await testWithoutToken();
  
  console.log('\n' + '='.repeat(60));
  console.log('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT: ${test1 ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
  console.log(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π JWT: ${test2 ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
  
  if (test1 && test2) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
    console.log('‚úÖ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥—è—Ç "Network Error"');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  } else {
    console.log('\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
    console.log('–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
}

main().catch(console.error);