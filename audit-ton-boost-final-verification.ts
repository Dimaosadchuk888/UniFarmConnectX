/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è TON Boost
 * –†–æ–ª—å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
 * –¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */

import { supabase } from './core/supabase.js';

async function auditTonBoostSystem() {
  console.log('=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø TON BOOST ===');
  console.log('–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞:', new Date().toISOString());
  console.log('\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('=' .repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost
  const { data: tonFarmingUsers, error: tfError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .order('user_id');

  if (tfError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:', tfError);
    return;
  }

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonFarmingUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost`);
  
  // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const user of tonFarmingUsers || []) {
    console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.user_id}`);
    console.log(`  - farming_balance: ${user.farming_balance} TON`);
    console.log(`  - farming_rate: ${user.farming_rate}`);
    console.log(`  - boost_package_id: ${user.boost_package_id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: purchases, error: pError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', user.user_id)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: true });

    if (pError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user ${user.user_id}:`, pError);
      continue;
    }

    console.log(`  - –ù–∞–π–¥–µ–Ω–æ ${purchases?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE`);
    
    let totalPurchased = 0;
    for (const purchase of purchases || []) {
      const amount = parseFloat(purchase.amount_ton || purchase.amount || '0');
      totalPurchased += amount;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
      let metadata = null;
      try {
        if (purchase.metadata) {
          metadata = typeof purchase.metadata === 'string' 
            ? JSON.parse(purchase.metadata) 
            : purchase.metadata;
        }
      } catch (e) {
        console.error(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ metadata –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${purchase.id}:`, e.message);
      }
      
      console.log(`  üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${purchase.id}: ${amount} TON (${purchase.created_at})`);
      if (metadata) {
        console.log(`     metadata:`, JSON.stringify(metadata, null, 2));
      }
    }
    
    console.log(`  üí∞ –ò—Ç–æ–≥–æ –∫—É–ø–ª–µ–Ω–æ: ${totalPurchased} TON`);
    console.log(`  üìä –¢–µ–∫—É—â–∏–π farming_balance: ${user.farming_balance} TON`);
    
    if (Math.abs(totalPurchased - user.farming_balance) > 0.01) {
      console.log(`  ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: —Ä–∞–∑–Ω–∏—Ü–∞ ${totalPurchased - user.farming_balance} TON`);
    } else {
      console.log(`  ‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫`);
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–æ—Ö–æ–¥–∞
  console.log('\n\nüîç 2. –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô –î–û–•–û–î–ê');
  console.log('=' .repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞ TON Boost
  const { data: incomeTransactions, error: iError } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'FARMING_REWARD')
    .like('description', '%TON Boost%')
    .order('created_at', { ascending: false })
    .limit(20);

  if (iError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–∞:', iError);
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${incomeTransactions?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Ö–æ–¥–∞`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const incomeByUser = new Map();
    for (const tx of incomeTransactions || []) {
      if (!incomeByUser.has(tx.user_id)) {
        incomeByUser.set(tx.user_id, []);
      }
      incomeByUser.get(tx.user_id).push(tx);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [userId, transactions] of incomeByUser) {
      console.log(`\nüë§ –î–æ—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const userData = tonFarmingUsers?.find(u => u.user_id === userId);
      if (userData) {
        console.log(`  - farming_balance: ${userData.farming_balance} TON`);
        console.log(`  - farming_rate: ${userData.farming_rate}`);
        console.log(`  - –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω: ${userData.farming_balance * userData.farming_rate * 5 / 1440} TON`);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      for (const tx of transactions.slice(0, 3)) {
        const amount = parseFloat(tx.amount_ton || tx.amount || '0');
        console.log(`  üìù ${tx.created_at}: +${amount} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
        try {
          if (tx.metadata) {
            const metadata = typeof tx.metadata === 'string' 
              ? JSON.parse(tx.metadata) 
              : tx.metadata;
            if (metadata.original_type === 'TON_BOOST_INCOME') {
              console.log(`     ‚úÖ metadata.original_type = TON_BOOST_INCOME`);
            }
          }
        } catch (e) {
          console.error(`     ‚ö†Ô∏è –û—à–∏–±–∫–∞ metadata:`, e.message);
        }
      }
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –æ—à–∏–±–æ–∫ —Å metadata
  console.log('\n\nüîç 3. –ü–†–û–í–ï–†–ö–ê SQL –û–®–ò–ë–û–ö –° METADATA');
  console.log('=' .repeat(50));
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º metadata
  const { data: allTransactions, error: atError } = await supabase
    .from('transactions')
    .select('id, metadata')
    .not('metadata', 'is', null)
    .limit(100);

  if (atError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', atError);
  } else {
    let invalidJsonCount = 0;
    let validJsonCount = 0;
    
    for (const tx of allTransactions || []) {
      try {
        if (typeof tx.metadata === 'string') {
          JSON.parse(tx.metadata);
        }
        validJsonCount++;
      } catch (e) {
        invalidJsonCount++;
        console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${tx.id}:`, tx.metadata);
      }
    }
    
    console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–π JSON: ${validJsonCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${invalidJsonCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
  console.log('\n\nüîç 4. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò');
  console.log('=' .repeat(50));
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å farming_balance = 0, –Ω–æ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
  const problemUsers = [];
  
  for (const user of tonFarmingUsers || []) {
    if (user.farming_balance === 0 || user.farming_balance === '0') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –ø–æ–∫—É–ø–∫–∏
      const { data: purchases } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', user.user_id)
        .eq('type', 'BOOST_PURCHASE')
        .limit(1);
      
      if (purchases && purchases.length > 0) {
        problemUsers.push({
          user_id: user.user_id,
          farming_balance: user.farming_balance,
          has_purchases: true
        });
      }
    }
  }
  
  console.log(`\n‚ùó –ù–∞–π–¥–µ–Ω–æ ${problemUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å farming_balance = 0, –Ω–æ —Å –ø–æ–∫—É–ø–∫–∞–º–∏:`);
  for (const user of problemUsers) {
    console.log(`  - User ${user.user_id}: farming_balance = ${user.farming_balance}`);
  }

  // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('=' .repeat(50));
  
  const totalUsers = tonFarmingUsers?.length || 0;
  const activeUsers = tonFarmingUsers?.filter(u => parseFloat(u.farming_balance) > 0).length || 0;
  const totalFarmingBalance = tonFarmingUsers?.reduce((sum, u) => sum + parseFloat(u.farming_balance || 0), 0) || 0;
  
  console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${totalUsers}`);
  console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö (farming_balance > 0): ${activeUsers}`);
  console.log(`‚úÖ –û–±—â–∏–π farming_balance: ${totalFarmingBalance} TON`);
  console.log(`‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${problemUsers.length}`);
  
  console.log('\n=== –ö–û–ù–ï–¶ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
auditTonBoostSystem()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });