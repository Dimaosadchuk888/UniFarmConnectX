#!/usr/bin/env tsx

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ User 25 –≤ –ë–î
 * –ò—Å—Å–ª–µ–¥—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

import { supabase } from './core/supabaseClient';
import { logger } from './core/logger';

async function checkUser25Balance() {
  console.log('üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ë–∞–ª–∞–Ω—Å User 25 –≤ –ë–î\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User 25 –≤ –ë–î
    const { data: user25, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, created_at')
      .eq('id', 25)
      .single();

    if (userError || !user25) {
      console.log('‚ùå User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      return;
    }

    console.log('üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° USER 25 –í –ë–î:');
    console.log(`User ID: ${user25.id}`);
    console.log(`Telegram: ${user25.telegram_id} (@${user25.username})`);
    console.log(`UNI: ${user25.balance_uni}`);
    console.log(`TON: ${user25.balance_ton}`);
    console.log(`–°–æ–∑–¥–∞–Ω: ${user25.created_at}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25
    const { data: recentTransactions, error: txError } = await supabase
      .from('transactions')
      .select('id, type, amount_ton, amount_uni, created_at, description, tx_hash_unique')
      .eq('user_id', 25)
      .order('created_at', { ascending: false })
      .limit(20);

    console.log('\nüìà –ü–û–°–õ–ï–î–ù–ò–ï 20 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 25:');
    if (recentTransactions && recentTransactions.length > 0) {
      recentTransactions.forEach((tx, index) => {
        const time = new Date(tx.created_at).toLocaleTimeString();
        const date = new Date(tx.created_at).toLocaleDateString();
        console.log(`${index + 1}. [${date} ${time}] ${tx.type} | UNI: ${tx.amount_uni} | TON: ${tx.amount_ton} | ${tx.description}`);
        if (tx.tx_hash_unique) {
          console.log(`    Hash: ${tx.tx_hash_unique}`);
        }
      });
    } else {
      console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ò—â–µ–º TON –¥–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    
    const { data: recentDeposits, error: depositsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', yesterday)
      .order('created_at', { ascending: false });

    console.log('\nüí∞ TON –î–ï–ü–û–ó–ò–¢–´ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:');
    if (recentDeposits && recentDeposits.length > 0) {
      let totalTonDeposits = 0;
      recentDeposits.forEach((deposit, index) => {
        totalTonDeposits += parseFloat(deposit.amount_ton || '0');
        console.log(`${index + 1}. ${deposit.created_at} | ${deposit.amount_ton} TON | ${deposit.description}`);
        console.log(`    Hash: ${deposit.tx_hash_unique}`);
      });
      console.log(`\nüìä –í–°–ï–ì–û TON –î–ï–ü–û–ó–ò–¢–û–í: ${totalTonDeposits.toFixed(6)} TON`);
    } else {
      console.log('   –î–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: allTransactions, error: allTxError } = await supabase
      .from('transactions')
      .select('type, amount_uni, amount_ton')
      .eq('user_id', 25);

    if (allTransactions && !allTxError) {
      let calculatedUni = 0;
      let calculatedTon = 0;

      allTransactions.forEach(tx => {
        const uni = parseFloat(tx.amount_uni || '0');
        const ton = parseFloat(tx.amount_ton || '0');

        // –î–æ—Ö–æ–¥—ã
        if (['TON_DEPOSIT', 'FARMING_REWARD', 'REFERRAL_REWARD', 'DAILY_BONUS', 'MISSION_REWARD', 'DEPOSIT'].includes(tx.type)) {
          calculatedUni += uni;
          calculatedTon += ton;
        }
        // –†–∞—Å—Ö–æ–¥—ã
        else if (['WITHDRAWAL', 'FARMING_DEPOSIT', 'BOOST_PAYMENT', 'TON_BOOST_PURCHASE'].includes(tx.type)) {
          calculatedUni -= uni;
          calculatedTon -= ton;
        }
      });

      console.log('\nüßÆ –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–° –ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
      console.log(`UNI: ${calculatedUni.toFixed(6)}`);
      console.log(`TON: ${calculatedTon.toFixed(6)}`);

      console.log('\n‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –ë–î vs –†–ê–°–ß–ï–¢–ù–´–ô:');
      console.log(`UNI: –ë–î=${user25.balance_uni} | –†–ê–°–ß–ï–¢=${calculatedUni.toFixed(6)} | –†–ê–ó–ù–ò–¶–ê=${(parseFloat(user25.balance_uni.toString()) - calculatedUni).toFixed(6)}`);
      console.log(`TON: –ë–î=${user25.balance_ton} | –†–ê–°–ß–ï–¢=${calculatedTon.toFixed(6)} | –†–ê–ó–ù–ò–¶–ê=${(parseFloat(user25.balance_ton.toString()) - calculatedTon).toFixed(6)}`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à–µ (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.log('\nüîÑ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('Backend –∫–µ—à TTL: 5 –º–∏–Ω—É—Ç');
    console.log('Frontend –∫–µ—à TTL: 15 —Å–µ–∫—É–Ω–¥');
    console.log('–ü—Ä–æ–±–ª–µ–º–∞: Frontend –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    logger.error('[CRITICAL] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ User 25', { error });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
checkUser25Balance().catch(console.error);