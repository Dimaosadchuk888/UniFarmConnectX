/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–µ–π
 */

import { supabase } from './core/supabaseClient';
import { logger } from './core/logger';

async function verifyProductionChanges() {
  console.log('üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ù–ê –ü–†–û–î–ê–ö–®–ù');
  
  try {
    // 1. –¢–µ—Å—Ç –≤–Ω–µ—à–Ω–µ–≥–æ boost API
    const response = await fetch('http://localhost:3000/api/v2/boost/farming-status?user_id=184');
    const boostData = await response.json();
    
    console.log('\nüìä BOOST API –°–¢–ê–¢–£–°:');
    console.log(`Status: ${response.status}`);
    console.log(`Success: ${boostData.success}`);
    console.log(`Has Data: ${!!boostData.data}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ pending boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    const { data: pendingBoosts, error } = await supabase
      .from('transactions')
      .select('id, user_id, amount, created_at')
      .eq('status', 'pending')
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString());
    
    console.log('\n‚è≥ PENDING BOOST –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${pendingBoosts?.length || 0}`);
    
    if (pendingBoosts && pendingBoosts.length > 0) {
      console.log('‚ö†Ô∏è –ï—Å—Ç—å pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å');
      pendingBoosts.forEach((tx, i) => {
        console.log(`${i+1}. User ${tx.user_id}: ${tx.amount} TON (—Å–æ–∑–¥–∞–Ω–∞ ${tx.created_at})`);
      });
    } else {
      console.log('‚úÖ –ù–µ—Ç pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö boost –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    const { data: recentActivations } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, description, created_at')
      .eq('type', 'BOOST_PURCHASE')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log('\nüöÄ –ü–û–°–õ–ï–î–ù–ò–ï BOOST –ü–û–ö–£–ü–ö–ò (1 —á–∞—Å):');
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${recentActivations?.length || 0}`);
    recentActivations?.forEach((tx, i) => {
      console.log(`${i+1}. User ${tx.user_id}: ${tx.amount} TON - ${tx.description}`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —É User 25
    const { data: user25Recent } = await supabase
      .from('transactions')
      .select('id, type, amount, description, created_at')
      .eq('user_id', 25)
      .eq('currency', 'TON')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });
    
    console.log('\nüë§ USER 25 –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:');
    console.log(`TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${user25Recent?.length || 0}`);
    
    if (user25Recent && user25Recent.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
      const boostPurchases = user25Recent.filter(tx => tx.type === 'BOOST_PURCHASE');
      const farmingRewards = user25Recent.filter(tx => tx.type === 'FARMING_REWARD');
      
      console.log(`- BOOST_PURCHASE: ${boostPurchases.length}`);
      console.log(`- FARMING_REWARD: ${farmingRewards.length}`);
      
      if (boostPurchases.length > 0 && farmingRewards.length > boostPurchases.length) {
        console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!');
      } else {
        console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏');
      }
    } else {
      console.log('‚úÖ User 25 –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
    console.log('\nüéØ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===');
    console.log('‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('üîÑ –ö–µ—à–∏ –æ—á–∏—â–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
}

verifyProductionChanges().catch(console.error);