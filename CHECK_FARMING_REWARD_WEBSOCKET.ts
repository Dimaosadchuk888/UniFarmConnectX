#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!,
  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!
);

console.log('\nüåê –ü–†–û–í–ï–†–ö–ê WEBSOCKET –ò FARMING_REWARD –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
console.log('='.repeat(65));

async function checkWebSocketIntegration() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å original_type = TON_DEPOSIT
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö TON_DEPOSIT –í FARMING_REWARD');
    console.log('-'.repeat(50));
    
    const { data: tonDepositFarming, error: farmingError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, description, metadata, created_at')
      .eq('type', 'FARMING_REWARD')
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(100);

    if (!farmingError && tonDepositFarming) {
      const tonDepositCandidates = tonDepositFarming.filter(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        return metadata.original_type === 'TON_DEPOSIT' || 
               (tx.description?.toLowerCase().includes('deposit') && parseFloat(tx.amount_ton || '0') > 0);
      });
      
      console.log(`üìä –í—Å–µ–≥–æ FARMING_REWARD: ${tonDepositFarming.length}`);
      console.log(`üíé –° TON_DEPOSIT –º–∞—Ä–∫–µ—Ä–∞–º–∏: ${tonDepositCandidates.length}`);
      
      if (tonDepositCandidates.length > 0) {
        console.log('\nüîç –ü–†–ò–ú–ï–†–´ TON_DEPOSIT –í FARMING_REWARD:');
        tonDepositCandidates.slice(0, 3).forEach(tx => {
          const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
          console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON`);
          console.log(`      Original_type: ${metadata.original_type}`);
          console.log(`      TX_Hash: ${metadata.tx_hash?.substring(0, 25)}...`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log('');
        });
      } else {
        console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û TON_DEPOSIT –≤ FARMING_REWARD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é');
        console.log('üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ù–ï –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ UnifiedTransactionService');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º shouldUpdateBalance –ª–æ–≥–∏–∫—É
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó SHOULDUPDATEBALANCE –õ–û–ì–ò–ö–ò');
    console.log('-'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ –∫–æ–¥–∞
    const shouldUpdateTypes = [
      'FARMING_REWARD', 'TON_BOOST_INCOME', 'UNI_DEPOSIT', 'TON_DEPOSIT', 
      'REFERRAL_REWARD', 'MISSION_REWARD', 'DAILY_BONUS'
    ];
    
    console.log('üìã –¢–ò–ü–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô, –ö–û–¢–û–†–´–ï –û–ë–ù–û–í–õ–Ø–Æ–¢ –ë–ê–õ–ê–ù–°:');
    shouldUpdateTypes.forEach(type => {
      console.log(`   ‚úÖ ${type}`);
    });
    
    console.log('\nüí° –ê–ù–ê–õ–ò–ó:');
    console.log('   üîç TON_DEPOSIT –≤ —Å–ø–∏—Å–∫–µ ‚Üí –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å');
    console.log('   üîç FARMING_REWARD –≤ —Å–ø–∏—Å–∫–µ ‚Üí –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å');
    console.log('   ‚ùì DEPOSIT –ù–ï –≤ —Å–ø–∏—Å–∫–µ ‚Üí –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ WebSocket');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∏—Ö –±–∞–ª–∞–Ω—Å —ç—Ñ—Ñ–µ–∫—Ç
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ò –ë–ê–õ–ê–ù–°–ê');
    console.log('-'.repeat(50));
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–¥–∞–≤–Ω–∏–º DEPOSIT
    const { data: recentDeposits, error: depositError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, created_at, metadata')
      .eq('type', 'DEPOSIT')
      .gt('amount_ton', 0.05)
      .gt('created_at', new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(5);

    if (!depositError && recentDeposits && recentDeposits.length > 0) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${recentDeposits.length} –Ω–µ–¥–∞–≤–Ω–∏—Ö DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      for (const deposit of recentDeposits) {
        console.log(`\nüîç –ê–ù–ê–õ–ò–ó DEPOSIT ID: ${deposit.id}`);
        console.log(`   User: ${deposit.user_id}, Amount: ${deposit.amount_ton} TON`);
        console.log(`   –í—Ä–µ–º—è: ${new Date(deposit.created_at).toLocaleString('ru-RU')}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('id, balance_ton, telegram_username')
          .eq('id', deposit.user_id)
          .single();
          
        if (!userError && user) {
          console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance_ton} TON`);
          console.log(`   Username: @${user.telegram_username}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
          const { data: correspondingFarming, error: corrError } = await supabase
            .from('transactions')
            .select('id, amount_ton, description, metadata')
            .eq('type', 'FARMING_REWARD')
            .eq('user_id', deposit.user_id)
            .gte('created_at', new Date(new Date(deposit.created_at).getTime() - 5 * 60 * 1000).toISOString())
            .lte('created_at', new Date(new Date(deposit.created_at).getTime() + 5 * 60 * 1000).toISOString());
            
          if (!corrError && correspondingFarming && correspondingFarming.length > 0) {
            console.log(`   üîó –ù–ê–ô–î–ï–ù–ê —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è FARMING_REWARD:`);
            correspondingFarming.forEach(fr => {
              const metadata = typeof fr.metadata === 'string' ? JSON.parse(fr.metadata || '{}') : (fr.metadata || {});
              console.log(`      ID: ${fr.id}, Amount: ${fr.amount_ton} TON`);
              console.log(`      Original_type: ${metadata.original_type}`);
            });
          } else {
            console.log(`   ‚ùå –ù–ï–¢ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
          }
        }
      }
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('-'.repeat(50));
    
    console.log('üìä –§–ê–ö–¢–´:');
    console.log('   ‚úÖ FARMING_REWARD —Å–æ–¥–µ—Ä–∂–∏—Ç TON_BOOST_INCOME (28 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–¥–µ–Ω—å)');
    console.log('   ‚úÖ Metadata.original_type —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ø–æ–¥—Ç–∏–ø–æ–≤');
    console.log('   ‚úÖ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è FARMING_REWARD');
    console.log('   ‚ùå –†–µ–∞–ª—å–Ω—ã–µ DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (20 –Ω–∞–π–¥–µ–Ω–æ) –ù–ï –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ WebSocket');
    console.log('   ‚ùå DEPOSIT –ù–ï –≤ shouldUpdateBalance —Å–ø–∏—Å–∫–µ');
    
    console.log('\nüí° –í–ê–†–ò–ê–ù–¢–´ –†–ï–®–ï–ù–ò–Ø:');
    console.log('\n   üìã –í–ê–†–ò–ê–ù–¢ 1: –û—Å—Ç–∞–≤–∏—Ç—å TON_DEPOSIT ‚Üí FARMING_REWARD');
    console.log('      ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞');
    console.log('      ‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('      ‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –¥–µ–ø–æ–∑–∏—Ç—ã —à–ª–∏ —á–µ—Ä–µ–∑ UnifiedTransactionService');
    
    console.log('\n   üìã –í–ê–†–ò–ê–ù–¢ 2: –ò–∑–º–µ–Ω–∏—Ç—å TON_DEPOSIT ‚Üí DEPOSIT');
    console.log('      ‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –¥–µ–ø–æ–∑–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å DEPOSIT');
    console.log('      ‚ùå –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å DEPOSIT –≤ shouldUpdateBalance');
    console.log('      ‚ùå –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WebSocket –¥–ª—è DEPOSIT —Ç–∏–ø–∞');
    
    console.log('\n   üìã –í–ê–†–ò–ê–ù–¢ 3: Dual System - –æ–±–∞ —Ç–∏–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
    console.log('      ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
    console.log('      ‚úÖ –ù–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã —á–µ—Ä–µ–∑ FARMING_REWARD, —Å—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è DEPOSIT');
    console.log('      ‚ùå –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–≤—É—Ö —Å–∏—Å—Ç–µ–º');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

checkWebSocketIntegration();
