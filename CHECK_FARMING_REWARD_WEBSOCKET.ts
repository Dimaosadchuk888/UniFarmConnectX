/**
 * üîß –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * 
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
 */

import { supabase } from './core/supabase';

async function restoreAffectedUsers() {
  console.log('\nüîß === –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===\n');
  
  // –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data
  const affectedUsers = [290, 278, 191, 184];
  
  console.log(`üéØ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú ${affectedUsers.length} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:`);
  console.log(`   User IDs: [${affectedUsers.join(', ')}]\n`);
  
  try {
    for (const userId of affectedUsers) {
      console.log(`üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï User ${userId}:`);
      console.log('‚îÄ'.repeat(35));
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users —Ç–∞–±–ª–∏—Ü—ã
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('ton_boost_package, ton_boost_rate, balance_ton')
        .eq('id', userId)
        .single();
      
      if (!userData) {
        console.log(`   ‚ùå User ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ users —Ç–∞–±–ª–∏—Ü–µ`);
        continue;
      }
      
      console.log(`   üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
      console.log(`      Package: ${userData.ton_boost_package}`);
      console.log(`      Rate: ${userData.ton_boost_rate}`);
      console.log(`      Balance: ${userData.balance_ton}`);
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
      const { data: transactions, error: txError } = await supabase
        .from('transactions')
        .select('amount, type, created_at')
        .eq('user_id', userId)
        .eq('currency', 'TON')
        .in('type', ['DEPOSIT', 'BOOST_PURCHASE'])
        .order('created_at', { ascending: false });
      
      let depositAmount = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 TON –¥–ª—è –ø–∞–∫–µ—Ç–∞ 1
      if (transactions && transactions.length > 0) {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç
        const lastDeposit = transactions.find(tx => tx.type === 'DEPOSIT' && tx.amount > 0);
        if (lastDeposit) {
          depositAmount = lastDeposit.amount;
        }
      }
      
      console.log(`   üí∞ –î–µ–ø–æ–∑–∏—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${depositAmount} TON`);
      
      // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
      const farmingData = {
        user_id: userId.toString(), // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú STRING 
        boost_active: true,
        boost_package_id: userData.ton_boost_package || 1,
        farming_rate: (userData.ton_boost_rate || 0.01).toString(),
        farming_balance: depositAmount,
        boost_expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // +1 –≥–æ–¥
        farming_start_timestamp: new Date().toISOString(),
        farming_last_update: new Date().toISOString(),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        total_earned: 0,
        last_claim_at: new Date().toISOString()
      };
      
      console.log(`   üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data...`);
      
      const { data: insertResult, error: insertError } = await supabase
        .from('ton_farming_data')
        .insert(farmingData)
        .select();
      
      if (insertError) {
        console.log(`   ‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${insertError.message}`);
        continue;
      }
      
      console.log(`   ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
      // 4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º ton_boost_active –≤ users —Ç–∞–±–ª–∏—Ü–µ
      console.log(`   üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º ton_boost_active...`);
      
      const { error: updateError } = await supabase
        .from('users')
        .update({ 
          ton_boost_active: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);
      
      if (updateError) {
        console.log(`   ‚ùå –û–®–ò–ë–ö–ê –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${updateError.message}`);
      } else {
        console.log(`   ‚úÖ User ${userId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      }
      
      console.log(`   üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n`);
    }
    
    // 5. –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
    console.log('5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    console.log('=======================');
    
    for (const userId of affectedUsers) {
      const { data: checkData, error } = await supabase
        .from('ton_farming_data')
        .select('user_id, boost_active, farming_balance')
        .eq('user_id', userId.toString())
        .single();
      
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('ton_boost_active')
        .eq('id', userId)
        .single();
      
      const hasFarmingData = !!checkData;
      const isUserActive = userData?.ton_boost_active === true;
      
      console.log(`   User ${userId}: Farming Data: ${hasFarmingData ? '‚úÖ' : '‚ùå'}, Active: ${isUserActive ? '‚úÖ' : '‚ùå'}`);
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('   ‚úÖ –í—Å–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–µ–ø–µ—Ä—å –∏—Ö —É–≤–∏–¥–∏—Ç –∏ –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã');
    console.log('   ‚úÖ –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É –±–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö');
    
    console.log('\n‚úÖ === –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===\n');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
restoreAffectedUsers();