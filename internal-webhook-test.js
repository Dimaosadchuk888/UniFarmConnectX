/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
 */

import fetch from 'node-fetch';

const INTERNAL_URL = 'http://localhost:3000/webhook';
const EXTERNAL_URL = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app/webhook';

// –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
const testUpdate = {
  update_id: 123456789,
  message: {
    message_id: 1,
    from: {
      id: 123456789,
      is_bot: false,
      first_name: "Test",
      username: "testuser"
    },
    chat: {
      id: 123456789,
      type: "private"
    },
    date: Math.floor(Date.now() / 1000),
    text: "/start"
  }
};

async function testInternalWebhook() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π webhook...');
  
  try {
    const response = await fetch(INTERNAL_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot'
      },
      body: JSON.stringify(testUpdate)
    });

    const result = await response.text();
    console.log(`üìå –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log('üìÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç–≤–µ—Ç:', result);

    if (response.status === 200) {
      console.log('‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }
  } catch (error) {
    console.log('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
}

async function testExternalWebhook() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É—é –≤–Ω–µ—à–Ω–∏–π webhook...');
  
  try {
    const response = await fetch(EXTERNAL_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot'
      },
      body: JSON.stringify(testUpdate)
    });

    const result = await response.text();
    console.log(`üìå –í–Ω–µ—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log('üìÑ –í–Ω–µ—à–Ω–∏–π –æ—Ç–≤–µ—Ç:', result);

    if (response.status === 200) {
      console.log('‚úÖ –í–Ω–µ—à–Ω–∏–π webhook —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }
  } catch (error) {
    console.log('‚ùå –í–Ω–µ—à–Ω–∏–π webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
}

async function testAllRoutes() {
  const routes = [
    'http://localhost:3000/webhook',
    'http://localhost:3000/api/webhook',
    'http://localhost:3000/api/v2/webhook'
  ];

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏...');
  
  for (const route of routes) {
    try {
      const response = await fetch(route, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testUpdate)
      });
      
      console.log(`üìç ${route}: ${response.status}`);
      
      if (response.status === 200) {
        const result = await response.json();
        console.log('‚úÖ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –ü–£–¢–¨:', route);
        console.log('üìÑ –û—Ç–≤–µ—Ç:', result);
        break;
      }
    } catch (error) {
      console.log(`‚ùå ${route}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞');
  console.log('‚îÄ'.repeat(50));
  
  await testInternalWebhook();
  console.log('‚îÄ'.repeat(30));
  
  await testExternalWebhook();
  console.log('‚îÄ'.repeat(30));
  
  await testAllRoutes();
  console.log('‚îÄ'.repeat(50));
  console.log('üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

main().catch(console.error);