#!/usr/bin/env node

/**
 * –¢–ï–°–¢ BOC PAYLOAD –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è BOC payload –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

console.log("üîç –¢–ï–°–¢ BOC PAYLOAD GENERATION");
console.log("=====================================");

// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
const testData = {
  userId: "999489", // –†–µ–∞–ª—å–Ω—ã–π telegram_id
  boostId: "1",
  tonAmount: 1.0,
  address: "UQBlrUfJMIlAcyYzttyxV2xrrvaHHIKEKeetGZbDoitTRWT8"
};

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º rawPayload
const rawPayload = `UniFarmBoost:${testData.userId}:${testData.boostId}`;
console.log(`‚úÖ Raw Payload: "${rawPayload}"`);
console.log(`   –î–ª–∏–Ω–∞: ${rawPayload.length} —Å–∏–º–≤–æ–ª–æ–≤`);

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º nanoTON conversion
const nanoTonAmount = Math.round(testData.tonAmount * 1000000000).toString();
console.log(`‚úÖ TON Amount: ${testData.tonAmount} TON`);
console.log(`   NanoTON: ${nanoTonAmount} (${nanoTonAmount.length} —Ü–∏—Ñ—Ä)`);

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON –∞–¥—Ä–µ—Å
const addressRegex = /^(EQ|UQ)[A-Za-z0-9_-]{46}$/;
console.log(`‚úÖ TON Address: ${testData.address}`);
console.log(`   –§–æ—Ä–º–∞—Ç –≤–∞–ª–∏–¥–µ–Ω: ${addressRegex.test(testData.address)}`);
console.log(`   –î–ª–∏–Ω–∞: ${testData.address.length} —Å–∏–º–≤–æ–ª–æ–≤`);

// 4. –°–∏–º—É–ª–∏—Ä—É–µ–º BOC —Å–æ–∑–¥–∞–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ @ton/core)
console.log("\nüîç –ü–†–û–í–ï–†–ö–ê BOC PAYLOAD:");
console.log("=====================================");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback BOC
const fallbackBOC = 'te6cckEBAQEADgAAGAAAAABVbmlGYXJtAACjJA==';
console.log(`‚úÖ Fallback BOC: ${fallbackBOC}`);
console.log(`   –î–ª–∏–Ω–∞: ${fallbackBOC.length} —Å–∏–º–≤–æ–ª–æ–≤`);
console.log(`   Base64 –≤–∞–ª–∏–¥–µ–Ω: ${/^[A-Za-z0-9+/]*={0,2}$/.test(fallbackBOC)}`);

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
const validUntil = Math.floor(Date.now() / 1000) + 600;
const transaction = {
  validUntil: validUntil,
  messages: [
    {
      address: testData.address,
      amount: nanoTonAmount,
      payload: fallbackBOC
    }
  ]
};

console.log("\nüîç –°–¢–†–£–ö–¢–£–†–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:");
console.log("=====================================");
console.log(`‚úÖ ValidUntil: ${validUntil} (—á–µ—Ä–µ–∑ ${Math.floor((validUntil - Date.now()/1000)/60)} –º–∏–Ω—É—Ç)`);
console.log(`‚úÖ Messages count: ${transaction.messages.length}`);
console.log(`‚úÖ Message structure:`);
console.log(`   - Address: ${transaction.messages[0].address}`);
console.log(`   - Amount: ${transaction.messages[0].amount} nanoTON`);
console.log(`   - Payload length: ${transaction.messages[0].payload.length}`);

// 6. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
console.log("\n‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:");
console.log("=====================================");

const issues = [];

if (rawPayload.length > 50) {
  issues.push("‚ùå RawPayload —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è BOC");
}

if (nanoTonAmount.length > 15) {
  issues.push("‚ùå NanoTON —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è");
}

if (!testData.address.startsWith('UQ') && !testData.address.startsWith('EQ')) {
  issues.push("‚ùå TON –∞–¥—Ä–µ—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞");
}

if (fallbackBOC.length < 10) {
  issues.push("‚ùå BOC payload —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
}

if (issues.length === 0) {
  console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
  console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
  console.log("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ BOC —Å @ton/core");
  console.log("- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TON –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–µ–Ω –≤ mainnet");
  console.log("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç BOC");
} else {
  issues.forEach(issue => console.log(issue));
}

console.log("\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù");