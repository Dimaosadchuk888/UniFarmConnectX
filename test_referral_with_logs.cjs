/**
 * –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testReferralWithLogs() {
  console.log('=== –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    const healthResponse = await fetch('http://localhost:3000/health');
    if (!healthResponse.ok) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π initData –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testUser = {
      id: 999999227,
      username: 'TestReferralUser227',
      first_name: 'Test',
      language_code: 'en',
      auth_date: Math.floor(Date.now() / 1000),
      hash: 'test_hash_123'
    };
    
    const initData = `user=${encodeURIComponent(JSON.stringify(testUser))}&auth_date=${testUser.auth_date}&hash=${testUser.hash}`;
    const refCode = 'REF_1750079004411_nddfp2';
    
    console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    console.log(`   Telegram ID: ${testUser.id}`);
    console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${refCode}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        initData: initData,
        ref_by: refCode
      })
    });
    
    const result = await response.json();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:');
    console.log('–°—Ç–∞—Ç—É—Å:', response.status);
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2));
    
    if (result.success && result.user) {
      const userId = result.user.id;
      console.log(`\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${userId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
      console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–í–Ø–ó–ò:');
      
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('id, telegram_id, username, referred_by')
        .eq('id', userId)
        .single();
      
      if (userError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        
        if (user.referred_by) {
          console.log('‚úÖ –ü–æ–ª–µ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω–æ:', user.referred_by);
        } else {
          console.log('‚ùå –ü–æ–ª–µ referred_by –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–æ');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º referrals —Ç–∞–±–ª–∏—Ü—É
      const { data: referralRecord, error: referralError } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', userId);
      
      if (referralError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ referrals:', referralError.message);
      } else if (referralRecord.length > 0) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals –Ω–∞–π–¥–µ–Ω–∞:', referralRecord[0]);
      } else {
        console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ referrals –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:');
      
      await supabase.from('users').delete().eq('id', userId);
      await supabase.from('referrals').delete().eq('user_id', userId);
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –°–ï–†–í–ï–†–ê:');
    
    setTimeout(async () => {
      try {
        const { execSync } = require('child_process');
        const logs = execSync('tail -50 server.log 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤"', { encoding: 'utf8' });
        
        if (logs.includes('AuthService')) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏ AuthService');
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
          const referralLogs = logs.split('\n').filter(line => 
            line.includes('—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏') || 
            line.includes('ReferralService') ||
            line.includes('processReferral')
          );
          
          if (referralLogs.length > 0) {
            console.log('üìù –õ–æ–≥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:');
            referralLogs.forEach(log => console.log(`   ${log}`));
          } else {
            console.log('‚ùå –õ–æ–≥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }
        } else {
          console.log('‚ùå –õ–æ–≥–∏ AuthService –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
      }
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testReferralWithLogs();