#!/usr/bin/env node

/**
 * REPLIT WEBSOCKET CONNECTION FIX
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ Replit —á–µ—Ä–µ–∑ HTTPS –ø—Ä–æ–∫—Å–∏
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ 1006 –∏ "–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
 */

import { writeFileSync, readFileSync } from 'fs';
import { join } from 'path';

console.log('üîß REPLIT WebSocket Fix - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WSS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...\n');

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket –¥–ª—è Replit
console.log('1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WebSocket...');

const fixedWebSocketHook = `import { useState, useEffect, useCallback, useRef } from 'react';

interface WebSocketMessage {
  type: string;
  [key: string]: any;
}

interface UseWebSocketOptions {
  onOpen?: (event: Event) => void;
  onMessage?: (data: any) => void;
  onClose?: (event: CloseEvent) => void;
  onError?: (event: Event) => void;
  reconnectInterval?: number;
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º - REPLIT OPTIMIZED
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ HTTPS –ø—Ä–æ–∫—Å–∏ Replit
 */
const useWebSocket = (options: UseWebSocketOptions = {}) => {
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);
  const [errorCount, setErrorCount] = useState<number>(0);

  // Refs –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏
  const socketRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isReplitRef = useRef<boolean>(false);

  const {
    onOpen,
    onMessage,
    onClose,
    onError,
    reconnectInterval = 3000
  } = options;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    isReplitRef.current = window.location.hostname.includes('replit.app');
  }, []);

  const clearResources = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
  }, []);

  const disconnect = useCallback(() => {
    clearResources();

    if (socketRef.current) {
      try {
        if (socketRef.current.readyState === WebSocket.OPEN || 
            socketRef.current.readyState === WebSocket.CONNECTING) {
          socketRef.current.close(1000, "Normal closure");
        }
      } catch (err) {
        console.error('[WebSocket] Error closing socket:', err);
      }

      socketRef.current = null;
    }

    setIsConnected(false);
  }, [clearResources]);

  const connect = useCallback(() => {
    clearResources();

    if (socketRef.current) {
      disconnect();
    }

    try {
      let wsUrl: string;
      
      if (isReplitRef.current) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Replit
        // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º WSS –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ Replit
        const protocol = 'ws:';
        const host = window.location.hostname;
        const port = window.location.port || '3000';
        wsUrl = \`\${protocol}//\${host}:\${port}/ws\`;
        
        console.log('[WebSocket] Replit mode - using direct WS connection:', wsUrl);
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.host;
        wsUrl = \`\${protocol}//\${host}/ws\`;
        
        console.log('[WebSocket] Standard mode:', wsUrl);
      }

      console.log('[WebSocket] Connecting to:', wsUrl);
      const socket = new WebSocket(wsUrl);
      socketRef.current = socket;

      socket.onopen = (event) => {
        console.log('[WebSocket] Connection established successfully');
        setIsConnected(true);
        setErrorCount(0);
        onOpen?.(event);
      };

      socket.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          setLastMessage(data);
          onMessage?.(data);
        } catch (error) {
          console.error('[WebSocket] Message parsing error:', error);
        }
      };

      socket.onclose = (event) => {
        console.log('[WebSocket] Connection closed:', event.code, event.reason);
        setIsConnected(false);
        onClose?.(event);

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (event.code !== 1000) {
          setErrorCount(prev => prev + 1);
          
          const delay = Math.min(reconnectInterval * Math.pow(1.5, errorCount), 30000);
          console.log(\`[WebSocket] Reconnecting in \${delay}ms...\`);
          
          reconnectTimeoutRef.current = setTimeout(() => {
            if (errorCount < 10) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
              connect();
            } else {
              console.log('[WebSocket] Max reconnection attempts reached');
            }
          }, delay);
        }
      };

      socket.onerror = (event) => {
        console.log('[WebSocket] Error occurred');
        onError?.(event);
      };

    } catch (error) {
      console.error('[WebSocket] Connection setup error:', error);
      setErrorCount(prev => prev + 1);
    }
  }, [disconnect, onOpen, onMessage, onClose, onError, reconnectInterval, errorCount]);

  const sendMessage = useCallback((message: any) => {
    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
      try {
        socketRef.current.send(JSON.stringify(message));
        return true;
      } catch (error) {
        console.error('[WebSocket] Send message error:', error);
        return false;
      }
    }
    return false;
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!isReplitRef.current) {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Replit —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º
      const timer = setTimeout(connect, 1000);
      return () => clearTimeout(timer);
    }
    // –ù–∞ Replit –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);

  return {
    isConnected,
    lastMessage,
    sendMessage,
    connect,
    disconnect,
    connectionStatus: isConnected ? 'connected' : 'disconnected'
  };
};

export default useWebSocket;`;

try {
  writeFileSync('client/src/hooks/useWebSocket-replit-fixed.ts', fixedWebSocketHook);
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π WebSocket hook –¥–ª—è Replit');
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket hook:', error.message);
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - HTTP polling –¥–ª—è Replit
console.log('\n2. –°–æ–∑–¥–∞–µ–º HTTP polling fallback –¥–ª—è Replit...');

const httpPollingHook = `import { useState, useEffect, useRef } from 'react';

interface ConnectionStatus {
  isConnected: boolean;
  lastUpdate: Date | null;
  method: 'websocket' | 'polling';
}

/**
 * HTTP Polling fallback –¥–ª—è Replit
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
 */
export const useReplitConnection = () => {
  const [status, setStatus] = useState<ConnectionStatus>({
    isConnected: false,
    lastUpdate: null,
    method: 'polling'
  });
  
  const pollingRef = useRef<NodeJS.Timeout | null>(null);
  const isActiveRef = useRef<boolean>(true);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
  const checkConnection = async () => {
    try {
      const response = await fetch('/api/v2/health', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (response.ok) {
        setStatus(prev => ({
          ...prev,
          isConnected: true,
          lastUpdate: new Date()
        }));
        return true;
      }
    } catch (error) {
      setStatus(prev => ({
        ...prev,
        isConnected: false,
        lastUpdate: new Date()
      }));
    }
    return false;
  };

  // –ó–∞–ø—É—Å–∫ polling –¥–ª—è Replit
  useEffect(() => {
    const isReplit = window.location.hostname.includes('replit.app');
    
    if (isReplit) {
      console.log('[Connection] Using HTTP polling for Replit');
      
      // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
      checkConnection();
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      pollingRef.current = setInterval(() => {
        if (isActiveRef.current) {
          checkConnection();
        }
      }, 30000);
    }
    
    return () => {
      if (pollingRef.current) {
        clearInterval(pollingRef.current);
      }
      isActiveRef.current = false;
    };
  }, []);

  return {
    connectionStatus: status.isConnected ? 'connected' : 'disconnected',
    isConnected: status.isConnected,
    lastUpdate: status.lastUpdate,
    method: status.method
  };
};`;

try {
  writeFileSync('client/src/hooks/useReplitConnection.ts', httpPollingHook);
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω HTTP polling fallback');
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è polling hook:', error.message);
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ NetworkStatusIndicator –¥–ª—è Replit
console.log('\n3. –û–±–Ω–æ–≤–ª—è–µ–º NetworkStatusIndicator –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ Replit...');

try {
  const currentNetworkStatus = readFileSync('client/src/components/common/NetworkStatusIndicator.tsx', 'utf8');
  
  const fixedNetworkStatus = currentNetworkStatus
    .replace(
      '// WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è Replit - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP API —Å—Ç–∞—Ç—É—Å\n  const connectionStatus = \'connected\'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω',
      'const { connectionStatus } = useReplitConnection();'
    )
    .replace(
      'import { useState, useEffect } from \'react\';',
      'import { useState, useEffect } from \'react\';\nimport { useReplitConnection } from \'@/hooks/useReplitConnection\';'
    );
  
  writeFileSync('client/src/components/common/NetworkStatusIndicator.tsx', fixedNetworkStatus);
  console.log('   ‚úÖ NetworkStatusIndicator –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è Replit');
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NetworkStatusIndicator:', error.message);
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket –Ω–∞ Replit
console.log('\n4. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...');

const platformConfig = `/**
 * Platform-specific configuration for UniFarm
 */

export const platformConfig = {
  isReplit: () => {
    if (typeof window === 'undefined') return false;
    return window.location.hostname.includes('replit.app');
  },
  
  shouldUseWebSocket: () => {
    return !platformConfig.isReplit();
  },
  
  getConnectionMethod: () => {
    return platformConfig.shouldUseWebSocket() ? 'websocket' : 'polling';
  },
  
  getWebSocketUrl: () => {
    if (typeof window === 'undefined') return '';
    
    if (platformConfig.isReplit()) {
      // –î–ª—è Replit –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket
      return '';
    }
    
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.host;
    return \`\${protocol}//\${host}/ws\`;
  }
};`;

try {
  writeFileSync('client/src/config/platform.ts', platformConfig);
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
console.log('==========================================');

const instructions = `
# REPLIT WEBSOCKET CONNECTION FIX

## –ü—Ä–æ–±–ª–µ–º–∞
WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∞–¥–∞—é—Ç —Å –∫–æ–¥–æ–º 1006 –Ω–∞ Replit, 
–ø–æ–∫–∞–∑—ã–≤–∞—è "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º".

## –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞
Replit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ WSS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º.
WebSocket —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã –Ω–∞ HTTP polling.

## –†–µ—à–µ–Ω–∏–µ

### 1. –ó–∞–º–µ–Ω–∏—Ç–µ WebSocket hook (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø):
\`\`\`bash
mv client/src/hooks/useWebSocket.ts client/src/hooks/useWebSocket-backup.ts
mv client/src/hooks/useWebSocket-replit-fixed.ts client/src/hooks/useWebSocket.ts
\`\`\`

### 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTP polling fallback:
- –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: client/src/hooks/useReplitConnection.ts
- NetworkStatusIndicator –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω

### 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
- WebSocket –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å—Å—è
- –ö—Ä–∞—Å–Ω—ã–π –±–∞–Ω–Ω–µ—Ä "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º" –∏—Å—á–µ–∑–Ω–µ—Ç
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

## –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç–µ WebSocket:

\`\`\`typescript
// –í App.tsx –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ WebSocketProvider
// <WebSocketProvider>
//   {children}
// </WebSocketProvider>

// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ HTTP API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
\`\`\`

## –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚úÖ –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ WebSocket –≤ –∫–æ–Ω—Å–æ–ª–∏
‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤
`;

try {
  writeFileSync('REPLIT_WEBSOCKET_FIX_INSTRUCTIONS.md', instructions);
  console.log('   ‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ REPLIT_WEBSOCKET_FIX_INSTRUCTIONS.md');
} catch (error) {
  console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:', error.message);
}

console.log('\nüéØ REPLIT WEBSOCKET FIX –ì–û–¢–û–í');
console.log('==============================');
console.log('–í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é.');
console.log('–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ REPLIT_WEBSOCKET_FIX_INSTRUCTIONS.md');
console.log('–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º".');