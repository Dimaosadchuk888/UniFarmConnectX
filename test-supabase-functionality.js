/**
 * –ü–æ–ª–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UniFarm –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ Supabase API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ supabase.from(...)
 */

const { supabase } = await import('./core/supabase.ts');
const { AuthService } = await import('./modules/auth/service.ts');
const { FarmingService } = await import('./modules/farming/service.ts');
const { WalletService } = await import('./modules/wallet/service.ts');
const { DailyBonusService } = await import('./modules/dailyBonus/service.ts');
const { AdminService } = await import('./modules/admin/service.ts');
const { AirdropService } = await import('./modules/airdrop/service.ts');

class SupabaseFunctionalityTest {
  constructor() {
    this.testResults = {
      auth: { status: 'pending', details: [] },
      users: { status: 'pending', details: [] },
      farming: { status: 'pending', details: [] },
      referral: { status: 'pending', details: [] },
      wallet: { status: 'pending', details: [] },
      dailyBonus: { status: 'pending', details: [] },
      airdrop: { status: 'pending', details: [] },
      admin: { status: 'pending', details: [] }
    };
    this.testUser = null;
  }

  log(module, status, message, sqlOperation = null) {
    console.log(`[${module.toUpperCase()}] ${status}: ${message}`);
    if (sqlOperation) {
      console.log(`  SQL: ${sqlOperation}`);
    }
    this.testResults[module].details.push({
      status,
      message,
      sqlOperation,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
   */
  async testSupabaseConnection() {
    try {
      console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
      
      const { data, error } = await supabase
        .from('users')
        .select('count', { count: 'exact', head: true });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
        return false;
      }

      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${data || 0}`);
      return true;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      return false;
    }
  }

  /**
   * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
   */
  async testTelegramAuth() {
    try {
      console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
      const testTelegramUser = {
        id: 999999999,
        username: 'test_supabase_user',
        first_name: 'Test',
        last_name: 'User'
      };

      this.log('auth', 'INFO', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram auth');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { data: existingUser } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', testTelegramUser.id)
        .single();

      this.log('auth', 'SUCCESS', '–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'SELECT * FROM users WHERE telegram_id = 999999999');

      if (existingUser) {
        this.testUser = existingUser;
        this.log('auth', 'INFO', `–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${existingUser.username}`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUserData = {
          telegram_id: testTelegramUser.id,
          username: testTelegramUser.username || `user_${testTelegramUser.id}`,
          ref_code: `REF_${Date.now()}`,
          balance_uni: '0',
          balance_ton: '0',
          is_active: true
        };

        const { data: newUser, error } = await supabase
          .from('users')
          .insert(newUserData)
          .select()
          .single();

        if (error) {
          this.log('auth', 'ERROR', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
          this.testResults.auth.status = 'failed';
          return false;
        }

        this.testUser = newUser;
        this.log('auth', 'SUCCESS', `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUser.username}`, 'INSERT INTO users (telegram_id, username, ref_code, ...)');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ref_code
      if (this.testUser.ref_code) {
        this.log('auth', 'SUCCESS', `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${this.testUser.ref_code}`);
      } else {
        this.log('auth', 'WARNING', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      this.testResults.auth.status = 'success';
      return true;

    } catch (error) {
      this.log('auth', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      this.testResults.auth.status = 'failed';
      return false;
    }
  }

  /**
   * 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async testUserOperations() {
    try {
      console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');

      if (!this.testUser) {
        this.log('users', 'ERROR', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.users.status = 'failed';
        return false;
      }

      // –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const { data: userProfile, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('id', this.testUser.id)
        .single();

      if (profileError) {
        this.log('users', 'ERROR', `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${profileError.message}`);
        this.testResults.users.status = 'failed';
        return false;
      }

      this.log('users', 'SUCCESS', '–ß—Ç–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'SELECT * FROM users WHERE id = ?');

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const updateData = {
        last_active: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { error: updateError } = await supabase
        .from('users')
        .update(updateData)
        .eq('id', this.testUser.id);

      if (updateError) {
        this.log('users', 'ERROR', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${updateError.message}`);
      } else {
        this.log('users', 'SUCCESS', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'UPDATE users SET last_active = NOW() WHERE id = ?');
      }

      // –ü–æ–∏—Å–∫ –ø–æ telegram_id
      const { data: userByTgId } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', this.testUser.telegram_id)
        .single();

      if (userByTgId) {
        this.log('users', 'SUCCESS', '–ü–æ–∏—Å–∫ –ø–æ telegram_id', 'SELECT * FROM users WHERE telegram_id = ?');
      }

      // –ü–æ–∏—Å–∫ –ø–æ ref_code
      const { data: userByRefCode } = await supabase
        .from('users')
        .select('*')
        .eq('ref_code', this.testUser.ref_code)
        .single();

      if (userByRefCode) {
        this.log('users', 'SUCCESS', '–ü–æ–∏—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É', 'SELECT * FROM users WHERE ref_code = ?');
      }

      this.testResults.users.status = 'success';
      return true;

    } catch (error) {
      this.log('users', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${error.message}`);
      this.testResults.users.status = 'failed';
      return false;
    }
  }

  /**
   * 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞—Ä–º–∏–Ω–≥–∞
   */
  async testFarmingOperations() {
    try {
      console.log('\nüåæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞—Ä–º–∏–Ω–≥–∞...');

      if (!this.testUser) {
        this.log('farming', 'ERROR', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.testResults.farming.status = 'failed';
        return false;
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞
      const farmingService = new FarmingService();
      const farmingData = await farmingService.getFarmingDataByTelegramId(this.testUser.telegram_id.toString());

      this.log('farming', 'SUCCESS', '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞', 'SELECT * FROM users WHERE telegram_id = ?');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ (–µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å)
      if (parseFloat(this.testUser.balance_uni || '0') > 0) {
        const farmingStarted = await farmingService.startFarming(this.testUser.telegram_id.toString());
        if (farmingStarted) {
          this.log('farming', 'SUCCESS', '–ù–∞—á–∞–ª–æ UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞', 'UPDATE users SET uni_farming_start_timestamp = NOW()');
        }
      } else {
        this.log('farming', 'INFO', 'UNI —Ñ–∞—Ä–º–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º farming_sessions —Ç–∞–±–ª–∏—Ü—É
      const { data: farmingSessions, error: sessionsError } = await supabase
        .from('farming_sessions')
        .select('*')
        .eq('user_id', this.testUser.id)
        .limit(5);

      if (!sessionsError) {
        this.log('farming', 'SUCCESS', `–ù–∞–π–¥–µ–Ω–æ ${farmingSessions?.length || 0} —Å–µ—Å—Å–∏–π —Ñ–∞—Ä–º–∏–Ω–≥–∞`, 'SELECT * FROM farming_sessions WHERE user_id = ?');
      }

      this.testResults.farming.status = 'success';
      return true;

    } catch (error) {
      this.log('farming', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${error.message}`);
      this.testResults.farming.status = 'failed';
      return false;
    }
  }

  /**
   * 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async testReferralSystem() {
    try {
      console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
      const { data: referrals, error: referralsError } = await supabase
        .from('referrals')
        .select('*')
        .eq('user_id', this.testUser.id)
        .limit(5);

      if (!referralsError) {
        this.log('referral', 'SUCCESS', `–ù–∞–π–¥–µ–Ω–æ ${referrals?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`, 'SELECT * FROM referrals WHERE user_id = ?');
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
      const testReferralData = {
        user_id: this.testUser.id,
        referrer_id: this.testUser.id, // –î–ª—è —Ç–µ—Å—Ç–∞ - —Å–∞–º —Å–µ–±–µ
        level: 1,
        commission_rate: 0.05,
        total_earned: '0'
      };

      const { data: newReferral, error: referralError } = await supabase
        .from('referrals')
        .upsert(testReferralData)
        .select()
        .single();

      if (!referralError) {
        this.log('referral', 'SUCCESS', '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏', 'INSERT INTO referrals (user_id, referrer_id, level, ...)');
      } else {
        this.log('referral', 'WARNING', `–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏: ${referralError.message}`);
      }

      this.testResults.referral.status = 'success';
      return true;

    } catch (error) {
      this.log('referral', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
      this.testResults.referral.status = 'failed';
      return false;
    }
  }

  /**
   * 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async testWalletOperations() {
    try {
      console.log('\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');

      const walletService = new WalletService();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
      const walletData = await walletService.getWalletDataByTelegramId(this.testUser.telegram_id.toString());
      this.log('wallet', 'SUCCESS', '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞', 'SELECT * FROM users WHERE telegram_id = ?');

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const testTransaction = {
        user_id: this.testUser.id,
        type: 'TEST_TRANSACTION',
        amount_uni: 1.0,
        amount_ton: 0,
        description: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Supabase',
        status: 'confirmed'
      };

      const { data: newTransaction, error: transactionError } = await supabase
        .from('transactions')
        .insert(testTransaction)
        .select()
        .single();

      if (!transactionError) {
        this.log('wallet', 'SUCCESS', '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'INSERT INTO transactions (user_id, type, amount_uni, ...)');
      } else {
        this.log('wallet', 'ERROR', `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${transactionError.message}`);
      }

      // –ß—Ç–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { data: transactions, error: historyError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', this.testUser.id)
        .order('created_at', { ascending: false })
        .limit(10);

      if (!historyError) {
        this.log('wallet', 'SUCCESS', `–ù–∞–π–¥–µ–Ω–æ ${transactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`, 'SELECT * FROM transactions WHERE user_id = ? ORDER BY created_at DESC');
      }

      this.testResults.wallet.status = 'success';
      return true;

    } catch (error) {
      this.log('wallet', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`);
      this.testResults.wallet.status = 'failed';
      return false;
    }
  }

  /**
   * 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
   */
  async testDailyBonusSystem() {
    try {
      console.log('\nüéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞...');

      const dailyBonusService = new DailyBonusService();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      const canClaim = await dailyBonusService.canClaimDailyBonus(this.testUser.id.toString());
      this.log('dailyBonus', 'SUCCESS', `–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: ${canClaim}`, 'SELECT * FROM users WHERE id = ?');

      // –ï—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å - –ø–æ–ª—É—á–∞–µ–º
      if (canClaim) {
        const bonusResult = await dailyBonusService.claimDailyBonus(this.testUser.id.toString());
        if (bonusResult.success) {
          this.log('dailyBonus', 'SUCCESS', `–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω: ${bonusResult.amount}`, 'UPDATE users SET daily_bonus_last_claim = NOW(), balance_uni = balance_uni + ?');
        } else {
          this.log('dailyBonus', 'WARNING', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: ${bonusResult.message}`);
        }
      } else {
        this.log('dailyBonus', 'INFO', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è');
      }

      this.testResults.dailyBonus.status = 'success';
      return true;

    } catch (error) {
      this.log('dailyBonus', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: ${error.message}`);
      this.testResults.dailyBonus.status = 'failed';
      return false;
    }
  }

  /**
   * 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã airdrop –∏ –º–∏—Å—Å–∏–π
   */
  async testAirdropSystem() {
    try {
      console.log('\nü™Ç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã airdrop –∏ –º–∏—Å—Å–∏–π...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å airdrop
      const { data: airdropEligible, error: eligibleError } = await supabase
        .from('users')
        .select('*')
        .eq('id', this.testUser.id)
        .single();

      if (!eligibleError) {
        this.log('airdrop', 'SUCCESS', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ airdrop', 'SELECT * FROM users WHERE id = ?');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      const { data: completedMissions, error: missionsError } = await supabase
        .from('user_sessions') // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        .select('*')
        .eq('user_id', this.testUser.id)
        .limit(5);

      if (!missionsError) {
        this.log('airdrop', 'SUCCESS', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π', 'SELECT * FROM user_sessions WHERE user_id = ?');
      }

      this.testResults.airdrop.status = 'success';
      return true;

    } catch (error) {
      this.log('airdrop', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ airdrop: ${error.message}`);
      this.testResults.airdrop.status = 'failed';
      return false;
    }
  }

  /**
   * 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
   */
  async testAdminOperations() {
    try {
      console.log('\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');

      const adminService = new AdminService();

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const dashboardStats = await adminService.getDashboardStats();
      this.log('admin', 'SUCCESS', `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${dashboardStats.totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${dashboardStats.totalTransactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersList = await adminService.getUsersList(1, 10);
      this.log('admin', 'SUCCESS', `–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersList.users?.length || 0} –∑–∞–ø–∏—Å–µ–π`, 'SELECT * FROM users ORDER BY created_at DESC LIMIT 10');

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (this.testUser) {
        const userDetails = await adminService.getUserDetails(this.testUser.id.toString());
        this.log('admin', 'SUCCESS', `–ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userDetails?.username || 'N/A'}`, 'SELECT * FROM users WHERE id = ?');
      }

      this.testResults.admin.status = 'success';
      return true;

    } catch (error) {
      this.log('admin', 'ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: ${error.message}`);
      this.testResults.admin.status = 'failed';
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    console.log('\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');

    const report = `# SUPABASE DEPLOY REPORT
**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ${new Date().toISOString()}
**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** ${Object.values(this.testResults).every(r => r.status === 'success') ? '‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê' : '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π:

### 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.auth.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.auth.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** INSERT INTO users, SELECT * FROM users WHERE telegram_id = ?
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** telegram_id: 999999999, username: test_supabase_user

### 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (Users)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.users.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.users.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT, UPDATE users, –ø–æ–∏—Å–∫ –ø–æ telegram_id –∏ ref_code
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_active, –ø–æ–∏—Å–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–∞–º

### 3. –§–∞—Ä–º–∏–Ω–≥ (Farming)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.farming.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.farming.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT farming_sessions, UPDATE users SET uni_farming_start_timestamp
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –ù–∞—á–∞–ª–æ/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏–π

### 4. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.referral.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.referral.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT, INSERT INTO referrals
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π —Å commission_rate = 0.05

### 5. –ö–æ—à–µ–ª—ë–∫ (Wallet)
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.wallet.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.wallet.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** INSERT INTO transactions, SELECT transactions history
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1.0 UNI

### 6. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.dailyBonus.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.dailyBonus.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT users, UPDATE daily_bonus_last_claim
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞

### 7. Airdrop / –ú–∏—Å—Å–∏–∏
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.airdrop.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.airdrop.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** SELECT user_sessions, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ airdrop
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π

### 8. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
**–°—Ç–∞—Ç—É—Å:** ${this.testResults.admin.status === 'success' ? '‚úÖ' : '‚ùå'} ${this.testResults.admin.status.toUpperCase()}
**SQL –æ–ø–µ—Ä–∞—Ü–∏–∏:** COUNT users/transactions, SELECT users —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã, —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
- **–ú–µ—Ç–æ–¥:** Supabase API —á–µ—Ä–µ–∑ core/supabase.ts
- **SDK:** @supabase/supabase-js
- **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:** SUPABASE_URL, SUPABASE_KEY

## –û–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
${Object.values(this.testResults).every(r => r.status === 'success') 
  ? '‚úÖ –°–∏—Å—Ç–µ–º–∞ UniFarm –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–∞ Supabase API. –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, SQL –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–ª–∏–∑—É.'
  : '‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º.'}

## –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏:
${Object.entries(this.testResults).map(([module, result]) => 
  `### ${module.toUpperCase()}:\n${result.details.map(d => `- ${d.status}: ${d.message}${d.sqlOperation ? ` (SQL: ${d.sqlOperation})` : ''}`).join('\n')}`
).join('\n\n')}
`;

    return report;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runFullTest() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UniFarm –Ω–∞ Supabase API');
    console.log('=' * 80);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const connectionOk = await this.testSupabaseConnection();
    if (!connectionOk) {
      console.error('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase');
      return;
    }

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    await this.testTelegramAuth();
    await this.testUserOperations();
    await this.testFarmingOperations();
    await this.testReferralSystem();
    await this.testWalletOperations();
    await this.testDailyBonusSystem();
    await this.testAirdropSystem();
    await this.testAdminOperations();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const report = this.generateReport();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const fs = await import('fs/promises');
    await fs.writeFile('SUPABASE_DEPLOY_REPORT.md', report, 'utf8');
    
    console.log('\n' + '=' * 80);
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SUPABASE_DEPLOY_REPORT.md');
    console.log('=' * 80);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new SupabaseFunctionalityTest();
tester.runFullTest().catch(console.error);