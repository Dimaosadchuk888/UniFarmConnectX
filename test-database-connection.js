/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –±–∞–∑—É
 */

import { pool } from './core/db.ts';

async function testDatabaseConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const basicTest = await pool.query('SELECT 1 as test');
    console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbInfo = await pool.query(`
      SELECT 
        current_database() as database_name,
        current_schema() as schema_name,
        inet_server_addr() as server_ip,
        version() as pg_version
    `);
    
    const info = dbInfo.rows[0];
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${info.database_name}`);
    console.log(`   –°—Ö–µ–º–∞: ${info.schema_name}`);
    console.log(`   IP —Å–µ—Ä–≤–µ—Ä–∞: ${info.server_ip}`);
    console.log(`   –í–µ—Ä—Å–∏—è PostgreSQL: ${info.pg_version.split(' ')[0]} ${info.pg_version.split(' ')[1]}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}`);
    console.log(`   PGHOST: ${process.env.PGHOST || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    console.log(`   PGUSER: ${process.env.PGUSER || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    console.log(`   PGDATABASE: ${process.env.PGDATABASE || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    const tables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    if (tables.rows.length > 0) {
      tables.rows.forEach(row => {
        console.log(`   - ${row.table_name}`);
      });
    } else {
      console.log('   –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:');
    
    if (info.database_name === 'neondb') {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Neon –≤–º–µ—Å—Ç–æ Supabase!');
      console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PGHOST/PGUSER/PGDATABASE –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç DATABASE_URL');
    } else if (info.database_name === 'postgres') {
      console.log('‚úÖ –ö–û–†–†–ï–ö–¢–ù–û: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL');
    } else {
      console.log(`‚ö†Ô∏è  –ù–ï–ò–ó–í–ï–°–¢–ù–û: –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${info.database_name}"`);
    }
    
    return {
      success: true,
      database: info.database_name,
      schema: info.schema_name,
      server_ip: info.server_ip,
      tables_count: tables.rows.length,
      is_neon: info.database_name === 'neondb',
      is_supabase: info.database_name === 'postgres'
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return {
      success: false,
      error: error.message
    };
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDatabaseConnection()
  .then(result => {
    console.log('\nüìÑ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:', JSON.stringify(result, null, 2));
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });