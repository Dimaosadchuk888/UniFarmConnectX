import { supabase } from './core/supabase.js';

async function checkTransactionTypesInDB() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n');
  console.log('='*60 + '\n');
  
  // 1. –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ë–î
  console.log('1Ô∏è‚É£ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ò–ü–´ –í –ë–î:\n');
  
  const { data: types, error } = await supabase
    .from('transactions')
    .select('type')
    .limit(1000);
    
  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error);
    return;
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
  const uniqueTypes = new Set<string>();
  types?.forEach(t => {
    if (t.type) uniqueTypes.add(t.type);
  });
  
  console.log('–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤:', uniqueTypes.size);
  Array.from(uniqueTypes).sort().forEach(type => {
    console.log(`- ${type}`);
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ
  console.log('\n' + '='*60);
  console.log('\n2Ô∏è‚É£ –¢–ò–ü–´ –û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –í –ö–û–î–ï:\n');
  
  const codeTypes = [
    'FARMING_REWARD',
    'FARMING_DEPOSIT', 
    'REFERRAL_REWARD',
    'MISSION_REWARD',
    'DAILY_BONUS',
    'TON_BOOST_INCOME',
    'BOOST_PURCHASE',
    'AIRDROP_REWARD'
  ];
  
  console.log('–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã (TransactionsTransactionType):');
  codeTypes.slice(0, 5).forEach(type => {
    const exists = uniqueTypes.has(type);
    console.log(`- ${type} ${exists ? '‚úÖ (–µ—Å—Ç—å –≤ –ë–î)' : '‚ùå (–Ω–µ—Ç –≤ –ë–î)'}`);
  });
  
  console.log('\n–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã (ExtendedTransactionType):');
  codeTypes.slice(5).forEach(type => {
    const exists = uniqueTypes.has(type);
    console.log(`- ${type} ${exists ? '‚úÖ (–µ—Å—Ç—å –≤ –ë–î)' : '‚ùå (–Ω–µ—Ç –≤ –ë–î)'}`);
  });
  
  // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
  console.log('\n' + '='*60);
  console.log('\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:\n');
  
  for (const type of uniqueTypes) {
    const { count } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .eq('type', type);
      
    console.log(`${type}: ${count || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata —Å original_type
  console.log('\n' + '='*60);
  console.log('\n4Ô∏è‚É£ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° METADATA original_type:\n');
  
  const { data: metadataTransactions } = await supabase
    .from('transactions')
    .select('type, metadata')
    .not('metadata', 'is', null)
    .limit(100);
    
  const originalTypes = new Set<string>();
  metadataTransactions?.forEach(tx => {
    if (tx.metadata?.original_type) {
      originalTypes.add(tx.metadata.original_type);
    }
  });
  
  if (originalTypes.size > 0) {
    console.log('–ù–∞–π–¥–µ–Ω—ã original_type –≤ metadata:');
    Array.from(originalTypes).forEach(type => {
      console.log(`- ${type}`);
    });
  } else {
    console.log('‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å original_type –≤ metadata');
  }
  
  // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n' + '='*60);
  console.log('\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
  
  const missingTypes = Array.from(codeTypes.slice(0, 5)).filter(type => !uniqueTypes.has(type));
  
  if (missingTypes.length > 0) {
    console.log('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ enum –ë–î —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã:');
    missingTypes.forEach(type => console.log(`- ${type}`));
  } else {
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î!');
  }
  
  console.log('\nüí° –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:');
  console.log('1. –ù–ï —É–¥–∞–ª—è—Ç—å –ø–æ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users - –∫–æ–¥ –º–æ–∂–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å');
  console.log('2. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∏–ø—ã –≤ enum —á–µ—Ä–µ–∑ ALTER TYPE');
  console.log('3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã');
  console.log('4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã (–∫–∞–∫ –≤ UniFarmingRepository)');
}

checkTransactionTypesInDB();