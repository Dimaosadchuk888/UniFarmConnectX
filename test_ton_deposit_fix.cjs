#!/usr/bin/env node
/**
 * –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TON DEPOSIT –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ processTonDeposit –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
 */

const fs = require('fs');
const http = require('http');

async function testTonDepositFix() {
  console.log('üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TON DEPOSIT –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò');
  console.log('='.repeat(50));
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
  console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï');
  const serviceFile = 'modules/wallet/service.ts';
  
  if (fs.existsSync(serviceFile)) {
    const content = fs.readFileSync(serviceFile, 'utf8');
    
    // –ò—â–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    const fixedLine = content.includes("eq('metadata->tx_hash', ton_tx_hash)");
    const oldBugLine = content.includes("eq('description', ton_tx_hash)");
    
    console.log(`üìÑ –§–∞–π–ª: ${serviceFile}`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${fixedLine}`);
    console.log(`‚ùå –°—Ç–∞—Ä–∞—è –æ—à–∏–±–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞: ${oldBugLine ? '–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢!' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    if (fixedLine && !oldBugLine) {
      console.log('üéØ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û');
    } else {
      console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° –ü–†–ò–ú–ï–ù–ï–ù–ò–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–ô');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const lines = content.split('\n');
    lines.forEach((line, index) => {
      if (line.includes("metadata->tx_hash") && line.includes('ton_tx_hash')) {
        console.log(`üìç –°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
      }
    });
    
  } else {
    console.log('‚ùå –§–∞–π–ª service.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê');
  
  try {
    const response = await new Promise((resolve, reject) => {
      const req = http.get('http://localhost:3000/health', (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => resolve({ status: res.statusCode, data }));
      });
      req.on('error', reject);
      req.setTimeout(5000, () => reject(new Error('Timeout')));
    });
    
    console.log(`üì° Server Status: ${response.status}`);
    console.log(`üìã Response: ${response.data}`);
    
    if (response.status === 200) {
      console.log('‚úÖ –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û');
    } else {
      console.log('‚ö†Ô∏è –°–ï–†–í–ï–† –í–û–ó–í–†–ê–©–ê–ï–¢ –û–®–ò–ë–ö–£');
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
  }
  
  // 3. –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log('\n3Ô∏è‚É£ –õ–û–ì–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
  
  console.log('–°—É—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  console.log('‚ùå –ë–´–õ–û: eq("description", ton_tx_hash)');
  console.log('   - description = "TON deposit from blockchain: abc123..."');
  console.log('   - ton_tx_hash = "abc123..."');  
  console.log('   - –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ù–ï–¢!');
  console.log('');
  console.log('‚úÖ –°–¢–ê–õ–û: eq("metadata->tx_hash", ton_tx_hash)');
  console.log('   - metadata.tx_hash = "abc123..."');
  console.log('   - ton_tx_hash = "abc123..."');
  console.log('   - –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ï–°–¢–¨!');
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
  console.log('‚úÖ TON –±–∞–ª–∞–Ω—Å—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  
  return true;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTonDepositFix()
  .then(() => console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ'))
  .catch(error => console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error));