/**
 * Complete Security Test with Server Startup
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints
 */

const { spawn } = require('child_process');
const path = require('path');

class SecurityTestWithServer {
  constructor() {
    this.serverProcess = null;
    this.baseUrl = 'http://localhost:3000';
    this.serverStarted = false;
  }

  async startServer() {
    return new Promise((resolve, reject) => {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ UniFarm...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ npm run dev
      this.serverProcess = spawn('npm', ['run', 'dev'], {
        stdio: ['pipe', 'pipe', 'pipe'],
        cwd: process.cwd()
      });

      let serverOutput = '';

      this.serverProcess.stdout.on('data', (data) => {
        const output = data.toString();
        serverOutput += output;
        console.log('Server:', output);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if (output.includes('Server running') || output.includes('localhost:3000') || output.includes('ready')) {
          this.serverStarted = true;
          console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
          resolve();
        }
      });

      this.serverProcess.stderr.on('data', (data) => {
        const error = data.toString();
        console.error('Server Error:', error);
      });

      this.serverProcess.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        reject(error);
      });

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      setTimeout(() => {
        if (!this.serverStarted) {
          console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
          resolve();
        }
      }, 10000);
    });
  }

  async waitForServer() {
    const maxAttempts = 30;
    let attempts = 0;

    while (attempts < maxAttempts) {
      try {
        const response = await fetch(`${this.baseUrl}/api/health`);
        if (response.status === 200 || response.status === 404) {
          console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã');
          return true;
        }
      } catch (error) {
        // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
      }

      attempts++;
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞... –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    return false;
  }

  async testEndpoint(method, path, expectedStatus = 401) {
    try {
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json'
        }
      };

      if (method === 'POST') {
        options.body = JSON.stringify({ test: 'data' });
      }

      const response = await fetch(`${this.baseUrl}${path}`, options);
      const status = response.status;
      
      console.log(`üîí ${method} ${path} ‚Üí ${status}`);
      
      if (status === expectedStatus) {
        return { path, method, status, secured: true, result: 'PASS' };
      } else if (status === 404) {
        return { path, method, status, secured: false, result: 'NOT_FOUND' };
      } else {
        const text = await response.text();
        return { path, method, status, secured: false, result: 'VULNERABLE', response: text.substring(0, 200) };
      }
    } catch (error) {
      return { path, method, status: 'ERROR', secured: false, result: 'ERROR', error: error.message };
    }
  }

  async runSecurityTests() {
    const endpoints = [
      // Farming endpoints
      { method: 'GET', path: '/api/farming/data' },
      { method: 'GET', path: '/api/farming/info' },
      { method: 'GET', path: '/api/farming/status' },
      
      // Boost endpoints
      { method: 'GET', path: '/api/boosts' },
      { method: 'POST', path: '/api/boosts/activate' },
      
      // Mission endpoints
      { method: 'GET', path: '/api/missions/stats' },
      
      // Referral endpoints
      { method: 'POST', path: '/api/referrals/process' },
      { method: 'GET', path: '/api/referrals/stats' },
      
      // Daily bonus endpoints
      { method: 'POST', path: '/api/daily-bonus/claim' },
      
      // Admin endpoints (–¥–æ–ª–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å admin –ø—Ä–∞–≤–∞)
      { method: 'GET', path: '/api/admin/stats' },
      { method: 'GET', path: '/api/admin/users' }
    ];

    console.log('\nüîç –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API...');
    const results = [];

    for (const endpoint of endpoints) {
      const result = await this.testEndpoint(endpoint.method, endpoint.path);
      results.push(result);
      await new Promise(resolve => setTimeout(resolve, 200)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    return results;
  }

  generateReport(results) {
    const totalEndpoints = results.length;
    const securedEndpoints = results.filter(r => r.secured).length;
    const vulnerableEndpoints = results.filter(r => r.result === 'VULNERABLE').length;
    const notFoundEndpoints = results.filter(r => r.result === 'NOT_FOUND').length;
    const errorEndpoints = results.filter(r => r.result === 'ERROR').length;

    console.log('\n' + '='.repeat(80));
    console.log('üìã –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò API ENDPOINTS');
    console.log('='.repeat(80));
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –í—Å–µ–≥–æ endpoints: ${totalEndpoints}`);
    console.log(`   ‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã—Ö (401): ${securedEndpoints}`);
    console.log(`   ‚ùå –£—è–∑–≤–∏–º—ã—Ö: ${vulnerableEndpoints}`);
    console.log(`   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö (404): ${notFoundEndpoints}`);
    console.log(`   üö® –û—à–∏–±–æ–∫: ${errorEndpoints}`);
    
    const securityPercentage = totalEndpoints > 0 ? ((securedEndpoints / totalEndpoints) * 100).toFixed(1) : 0;
    console.log(`\nüõ°Ô∏è –£–†–û–í–ï–ù–¨ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: ${securityPercentage}%`);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (vulnerableEndpoints > 0) {
      console.log(`\n‚ùå –£–Ø–ó–í–ò–ú–´–ï ENDPOINTS:`);
      results.filter(r => r.result === 'VULNERABLE').forEach(result => {
        console.log(`   ${result.method} ${result.path} ‚Üí ${result.status}`);
      });
    }

    if (notFoundEndpoints > 0) {
      console.log(`\n‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–ù–´–ï ENDPOINTS:`);
      results.filter(r => r.result === 'NOT_FOUND').forEach(result => {
        console.log(`   ${result.method} ${result.path} ‚Üí 404`);
      });
    }

    if (errorEndpoints > 0) {
      console.log(`\nüö® –û–®–ò–ë–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:`);
      results.filter(r => r.result === 'ERROR').forEach(result => {
        console.log(`   ${result.method} ${result.path} ‚Üí ${result.error}`);
      });
    }

    console.log('\n' + '='.repeat(80));
    
    const isProductionReady = vulnerableEndpoints === 0 && errorEndpoints < totalEndpoints;
    
    if (isProductionReady) {
      console.log('üéâ –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ù–ê–°–¢–†–û–ï–ù–ê –ö–û–†–†–ï–ö–¢–ù–û');
    } else {
      console.log('‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
    }

    return {
      totalEndpoints,
      securedEndpoints,
      vulnerableEndpoints,
      notFoundEndpoints,
      errorEndpoints,
      securityPercentage: parseFloat(securityPercentage),
      isProductionReady
    };
  }

  async cleanup() {
    if (this.serverProcess) {
      console.log('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
      this.serverProcess.kill('SIGTERM');
    }
  }

  async runFullTest() {
    try {
      await this.startServer();
      await this.waitForServer();
      
      const results = await this.runSecurityTests();
      const report = this.generateReport(results);
      
      return report;
    } catch (error) {
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    } finally {
      await this.cleanup();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new SecurityTestWithServer();
  
  try {
    const report = await tester.runFullTest();
    
    if (report.isProductionReady) {
      console.log('\n‚úÖ –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù');
      process.exit(0);
    } else {
      console.log('\n‚ö†Ô∏è –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø');
      process.exit(0); // –ù–µ —Ñ–µ–π–ª–∏–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    }
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

main();