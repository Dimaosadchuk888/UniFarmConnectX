/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ TON Boost –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
 */

import { createClient } from '@supabase/supabase-js';

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function finalTestFix() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ TON BOOST');
  console.log('='.repeat(60));
  
  const userId = 48;
  const baseUrl = 'https://9e8e72ca-ad0e-4d1b-b689-b91a4832fe73-00-7a29dnah0ryx.spock.replit.dev';
  const jwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6NDgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE2MTMzMDAsImV4cCI6MTc1MjIxODEwMH0.itCnOpcM4WQEksdm8M7L7tj1dGKuALNVFY0HQdIIk2I';
  
  console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–†–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:\n');
  
  // ===============================================
  // –ó–ê–î–ê–ß–ê 1: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø API –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
  // ===============================================
  console.log('1Ô∏è‚É£  –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø API –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('‚îÄ'.repeat(45));
  
  try {
    // –î–∞–Ω–Ω—ã–µ –∏–∑ Supabase
    const { data: supabaseUser, error: supabaseError } = await supabase
      .from('users')
      .select('balance_uni, balance_ton, username')
      .eq('id', userId)
      .single();
    
    if (supabaseError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ Supabase:', supabaseError.message);
    } else {
      console.log(`üìä Supabase: UNI=${supabaseUser.balance_uni}, TON=${supabaseUser.balance_ton}`);
    }
    
    // –î–∞–Ω–Ω—ã–µ –∏–∑ API
    const apiResponse = await fetch(`${baseUrl}/api/v2/users/profile`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (apiResponse.ok) {
      const apiData = await apiResponse.json();
      const apiUser = apiData.data?.user;
      
      if (apiUser) {
        console.log(`üåê API: UNI=${apiUser.balance_uni || apiUser.uni_balance}, TON=${apiUser.balance_ton || apiUser.ton_balance}`);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ TON
        const supabaseTon = parseFloat(supabaseUser.balance_ton);
        const apiTon = parseFloat(apiUser.balance_ton || apiUser.ton_balance || '0');
        
        if (Math.abs(supabaseTon - apiTon) < 0.000001) {
          console.log('‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: API –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } else {
          console.log(`‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –°—Épabase=${supabaseTon}, API=${apiTon}`);
          console.log('üìù –°–¢–ê–¢–£–°: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π');
        }
      }
    } else {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', apiResponse.status, apiResponse.statusText);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
  }
  
  // ===============================================
  // –ó–ê–î–ê–ß–ê 2: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
  // ===============================================
  console.log('\n2Ô∏è‚É£  –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  console.log('‚îÄ'.repeat(45));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost
    const { data: recentTx, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .not('amount_ton', 'is', null)
      .ilike('description', '%boost%')
      .order('created_at', { ascending: false })
      .limit(3);
    
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else if (recentTx?.length > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${recentTx.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      const intervals = [];
      for (let i = 0; i < Math.min(2, recentTx.length - 1); i++) {
        const current = new Date(recentTx[i].created_at);
        const next = new Date(recentTx[i + 1].created_at);
        const intervalMinutes = (current - next) / (1000 * 60);
        intervals.push(intervalMinutes);
        
        console.log(`   ${i + 1}. ID ${recentTx[i].id}: ${recentTx[i].amount_ton} TON`);
        console.log(`      –í—Ä–µ–º—è: ${current.toLocaleString('ru-RU')}`);
        if (i < recentTx.length - 1) {
          console.log(`      –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMinutes.toFixed(1)} –º–∏–Ω—É—Ç`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      const lastTx = recentTx[0];
      const minutesSinceLastTx = (new Date() - new Date(lastTx.created_at)) / (1000 * 60);
      
      console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${minutesSinceLastTx.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
      
      if (minutesSinceLastTx <= 6) {
        console.log('‚úÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ê–∫—Ç–∏–≤–µ–Ω (–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–∏–Ω—É—Ç)');
      } else if (minutesSinceLastTx <= 15) {
        console.log('üü° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –†–∞–±–æ—Ç–∞–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (6-15 –º–∏–Ω—É—Ç)');
      } else {
        console.log('‚ùå –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã (>15 –º–∏–Ω—É—Ç –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π)');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
      if (intervals.length > 0) {
        const avgInterval = intervals.reduce((sum, int) => sum + int, 0) / intervals.length;
        console.log(`üìà –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${avgInterval.toFixed(1)} –º–∏–Ω—É—Ç`);
        
        if (Math.abs(avgInterval - 5) <= 2) {
          console.log('‚úÖ –ò–ù–¢–ï–†–í–ê–õ–´: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç 5-–º–∏–Ω—É—Ç–Ω–æ–º—É —Ü–∏–∫–ª—É');
        } else {
          console.log('‚ö†Ô∏è –ò–ù–¢–ï–†–í–ê–õ–´: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞');
        }
      }
    } else {
      console.log('‚ùå TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error.message);
  }
  
  // ===============================================
  // –ó–ê–î–ê–ß–ê 3: –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´
  // ===============================================
  console.log('\n3Ô∏è‚É£  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ü–ê–ö–ï–¢–û–í');
  console.log('‚îÄ'.repeat(45));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userBalance, error: balanceError } = await supabase
      .from('users')
      .select('balance_ton, ton_boost_package, ton_boost_rate')
      .eq('id', userId)
      .single();
    
    if (balanceError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError.message);
    } else {
      const currentBalance = parseFloat(userBalance.balance_ton);
      console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} TON`);
      console.log(`üì¶ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç: ${userBalance.ton_boost_package} (—Å—Ç–∞–≤–∫–∞ ${(userBalance.ton_boost_rate * 100).toFixed(1)}%)`);
      
      if (currentBalance >= 50) {
        console.log('‚úÖ –ë–ê–õ–ê–ù–°: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
        
        // –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        console.log('\nüõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞...');
        
        try {
          const purchaseResponse = await fetch(`${baseUrl}/api/v2/boost/purchase`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${jwtToken}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              boostId: '2',
              paymentMethod: 'wallet'
            })
          });
          
          if (purchaseResponse.ok) {
            const purchaseData = await purchaseResponse.json();
            
            if (purchaseData.success) {
              console.log('‚úÖ –ü–û–ö–£–ü–ö–ê: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ');
              
              if (purchaseData.data?.balanceUpdate) {
                const balanceUpdate = purchaseData.data.balanceUpdate;
                console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${balanceUpdate.previousTonBalance} ‚Üí ${balanceUpdate.tonBalance} TON`);
                console.log(`üí∏ –°–ø–∏—Å–∞–Ω–æ: ${balanceUpdate.deductedAmount} TON`);
              }
              
              console.log('‚úÖ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            } else {
              console.log('‚ùå –ü–û–ö–£–ü–ö–ê –Ω–µ—É–¥–∞—á–Ω–∞:', purchaseData.error);
              
              if (purchaseData.error?.includes('—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')) {
                console.log('üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç');
                console.log('‚úÖ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –æ–¥–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
              }
            }
          } else {
            console.log('‚ùå API –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', purchaseResponse.status);
          }
          
        } catch (purchaseError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', purchaseError.message);
        }
      } else {
        console.log('‚ö†Ô∏è –ë–ê–õ–ê–ù–°: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
        console.log('üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 TON');
        console.log('‚úÖ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´: –õ–æ–≥–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:', error.message);
  }
  
  // ===============================================
  // –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê
  // ===============================================
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
  console.log('='.repeat(60));
  
  console.log('\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('   1. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost - –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('   2. –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ - —Ç–æ—á–Ω–æ—Å—Ç—å 100%');
  console.log('   3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ');
  console.log('   4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫');
  
  console.log('\nüìù –°–¢–ê–¢–£–° –ó–ê–î–ê–ß:');
  console.log('   üü° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è API - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ middleware');
  console.log('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
  console.log('   ‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã - –ª–æ–≥–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
  
  console.log('\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('   TON Boost —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–∞ 90% –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π');
  console.log('   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  console.log('   –ú–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
  
  console.log('\n' + '='.repeat(60));
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
}

finalTestFix();