/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
 * –¢–µ—Å—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º BOC –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
 */

import { supabase } from './core/supabase';
import { UnifiedTransactionService } from './core/TransactionService';

// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π BOC –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ (–∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å)
const UNIQUE_BOC = 'te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKABZpFBvrrFJAWiokVZF0jaVpS4WogHhGrlhtGT3Nx2c+u4VTiWDwFKqA5bFP1f+FcnGm3mCx5TtEYlGNh1ccWBFNTRi7RHrhaAAAG8AAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKh3NZQAAAAAAAAAAAAAAAAAABGzXXX';

async function verifyDuplicationFixSuccess() {
  console.log('\nüéâ === –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===\n');

  const userId = 184;
  const transactionService = UnifiedTransactionService.getInstance();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ—Ç BOC –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ BOC...');
    const { data: existing } = await supabase
      .from('transactions')
      .select('id')
      .eq('tx_hash_unique', UNIQUE_BOC)
      .limit(1);

    if (existing && existing.length > 0) {
      console.log('‚ö†Ô∏è BOC —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—á–∏—â–∞–µ–º...');
      await supabase
        .from('transactions')
        .delete()
        .eq('tx_hash_unique', UNIQUE_BOC);
    }

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏)
    console.log('\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º BOC...');
    const result1 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 1.23,
      description: 'SUCCESS_TEST - New unique transaction',
      metadata: {
        tx_hash: UNIQUE_BOC,
        test_type: 'success_verification'
      }
    });

    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç 1: ${result1.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
    if (!result1.success) console.log(`–û—à–∏–±–∫–∞: ${result1.error}`);

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)
    console.log('\n2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const result2 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 1.23,
      description: 'SUCCESS_TEST - Duplicate attempt (should fail)',
      metadata: {
        tx_hash: UNIQUE_BOC,
        test_type: 'duplicate_attempt'
      }
    });

    const duplicateBlocked = !result2.success;
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç 2: ${duplicateBlocked ? '‚úÖ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' : '‚ùå –ü–†–û–®–ï–õ'}`);
    if (!result2.success) console.log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${result2.error}`);

    // –¢–µ—Å—Ç 3: –î—É–±–ª–∏–∫–∞—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)
    console.log('\n3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º...');
    const bocWithSuffix = `${UNIQUE_BOC}_1754226200000_final789`;
    const result3 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 1.23,
      description: 'SUCCESS_TEST - Suffix duplicate (should fail)',
      metadata: {
        tx_hash: bocWithSuffix,
        test_type: 'suffix_duplicate'
      }
    });

    const suffixBlocked = !result3.success;
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç 3: ${suffixBlocked ? '‚úÖ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' : '‚ùå –ü–†–û–®–ï–õ'}`);
    if (!result3.success) console.log(`‚úÖ –°—É—Ñ—Ñ–∏–∫—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${result3.error}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...');
    const { data: finalTransactions } = await supabase
      .from('transactions')
      .select('id, tx_hash_unique, description, created_at')
      .eq('user_id', userId)
      .like('description', '%SUCCESS_TEST%')
      .order('created_at', { ascending: false });

    const dbCount = finalTransactions?.length || 0;
    console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏: ${dbCount}`);
    
    finalTransactions?.forEach((tx, i) => {
      console.log(`  ${i+1}. ID: ${tx.id}, Hash: ${tx.tx_hash_unique?.substring(0, 30)}..., Desc: ${tx.description?.substring(0, 40)}...`);
    });

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await supabase
      .from('transactions')
      .delete()
      .eq('user_id', userId)
      .like('description', '%SUCCESS_TEST%');

    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\nüèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:');
    console.log(`‚úÖ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${result1.success}`);
    console.log(`‚úÖ –¢–æ—á–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${duplicateBlocked}`);
    console.log(`‚úÖ –°—É—Ñ—Ñ–∏–∫—Å –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${suffixBlocked}`);
    console.log(`‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î: ${dbCount === 1}`);

    const allTestsPassed = result1.success && duplicateBlocked && suffixBlocked && dbCount === 1;
    
    if (allTestsPassed) {
      console.log('\nüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–û!');
      console.log('üîí –°–∏—Å—Ç–µ–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö:');
      console.log('   ‚úÖ Frontend —É–¥–∞–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π');
      console.log('   ‚úÖ Backend –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã');
      console.log('   ‚úÖ Backend –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏');
      console.log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏');
      console.log('\nüöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—É!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:');
      if (!result1.success) console.log('   ‚ùå –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è');
      if (!duplicateBlocked) console.log('   ‚ùå –¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è');
      if (!suffixBlocked) console.log('   ‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è');
      if (dbCount !== 1) console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

verifyDuplicationFixSuccess().then(() => {
  console.log('\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});