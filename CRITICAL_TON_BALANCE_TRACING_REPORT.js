#!/usr/bin/env node

/**
 * –ö–†–ò–¢–ò–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–†–ê–°–°–ò–ù–ì –ë–ê–õ–ê–ù–°–ê User #25
 * –í—ã—è—Å–Ω—è–µ—Ç –≥–¥–µ –∏ –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–ø–∏—Å–∞–Ω–∏–µ 2.99 TON
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function criticalBalanceTracing() {
  console.log('üö® –ö–†–ò–¢–ò–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–†–ê–°–°–ò–ù–ì –ë–ê–õ–ê–ù–°–ê User #25');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('–¶–µ–ª—å: –ù–∞–π—Ç–∏ –≥–¥–µ –ø—Ä–æ–ø–∞–ª–æ 2.99 TON –∏–∑ 3.3 TON');
  
  // 1. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User #25
  console.log('\n1Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô User #25');
  console.log('-'.repeat(60));
  
  const { data: allTransactions, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 25)
    .order('created_at', { ascending: true }); // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª—è —Ç—Ä–∞—Å—Å–∏–Ω–≥–∞

  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    return;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è 0 –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å metadata —Å TON)
  const tonTransactions = allTransactions.filter(tx => 
    parseFloat(tx.amount_ton || 0) > 0 || 
    tx.currency === 'TON' ||
    tx.description?.includes('TON deposit') ||
    tx.description?.includes('TON') ||
    (tx.metadata && JSON.stringify(tx.metadata).includes('TON'))
  );

  console.log(`üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User #25: ${allTransactions.length}`);
  console.log(`ü™ô TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);

  // –ü–æ—Å—Ç—Ä–æ–∏–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é TON –æ–ø–µ—Ä–∞—Ü–∏–π
  let runningBalance = 0;
  console.log('\nüìà –•–†–û–ù–û–õ–û–ì–ò–Ø TON –û–ü–ï–†–ê–¶–ò–ô (–†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–°):');
  console.log('–î–∞—Ç–∞ | ID | –¢–∏–ø | –°—É–º–º–∞ | –ë–∞–ª–∞–Ω—Å | –û–ø–∏—Å–∞–Ω–∏–µ');
  console.log('-'.repeat(80));

  tonTransactions.forEach(tx => {
    const amount = parseFloat(tx.amount_ton || 0);
    const prevBalance = runningBalance;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (+ –∏–ª–∏ -)
    if (tx.type === 'FARMING_REWARD' || tx.type === 'REFERRAL_REWARD') {
      runningBalance += amount;
    } else if (tx.type?.includes('WITHDRAWAL') || tx.description?.includes('withdrawal')) {
      runningBalance -= amount;
    } else {
      runningBalance += amount; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–±–∞–≤–ª—è–µ–º
    }

    const date = tx.created_at.split('T')[0];
    const sign = runningBalance > prevBalance ? '+' : (runningBalance < prevBalance ? '-' : '=');
    
    console.log(`${date} | ${tx.id} | ${tx.type} | ${sign}${amount} | ${runningBalance.toFixed(6)} | ${(tx.description || '').substring(0, 40)}...`);
  });

  console.log(`\nüìä –ò–¢–û–ì–û –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–°: ${runningBalance.toFixed(6)} TON`);

  // 2. –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ë–ê–õ–ê–ù–°–ê
  console.log('\n2Ô∏è‚É£ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–° User #25');
  console.log('-'.repeat(60));
  
  const { data: userData, error: userError } = await supabase
    .from('users')
    .select('id, username, balance_ton, balance_uni, created_at')
    .eq('id', 25)
    .single();

  if (userError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
    return;
  }

  const actualBalance = parseFloat(userData.balance_ton || 0);
  const discrepancy = runningBalance - actualBalance;

  console.log(`üë§ User #25 (@${userData.username})`);
  console.log(`üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${actualBalance} TON`);
  console.log(`üìä –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${runningBalance.toFixed(6)} TON`);
  console.log(`‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${discrepancy.toFixed(6)} TON`);
  console.log(`üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${userData.created_at}`);

  // 3. –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –¢–ê–ë–õ–ò–¶–ê–•
  console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø –í –°–ò–°–¢–ï–ú–ï');
  console.log('-'.repeat(60));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º withdraw_requests
  const { data: withdrawals, error: withdrawError } = await supabase
    .from('withdraw_requests')
    .select('*')
    .eq('user_id', 25)
    .order('created_at', { ascending: false });

  console.log(`üí∏ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: ${withdrawals?.length || 0}`);
  if (withdrawals && withdrawals.length > 0) {
    console.log('üìã –î–ï–¢–ê–õ–ò –í–´–í–û–î–û–í:');
    withdrawals.forEach(w => {
      console.log(`‚Ä¢ ID: ${w.id} | ${w.created_at.split('T')[0]} | ${w.amount_ton} TON | Status: ${w.status}`);
    });
  }

  // 4. –ê–ù–ê–õ–ò–ó BALANCE HISTORY (–µ—Å–ª–∏ –µ—Å—Ç—å)
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –ò–°–¢–û–†–ò–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê');
  console.log('-'.repeat(60));

  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –±–∞–ª–∞–Ω—Å–æ–≤
  const { data: balanceHistory, error: historyError } = await supabase
    .from('balance_history')
    .select('*')
    .eq('user_id', 25)
    .order('created_at', { ascending: false })
    .limit(20);

  if (historyError && !historyError.message.includes('does not exist')) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', historyError.message);
  } else if (balanceHistory && balanceHistory.length > 0) {
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${balanceHistory.length}`);
    balanceHistory.slice(0, 10).forEach(h => {
      console.log(`‚Ä¢ ${h.created_at.split('T')[0]} | TON: ${h.balance_ton_before} ‚Üí ${h.balance_ton_after} | –û–ø–µ—Ä–∞—Ü–∏—è: ${h.operation_type}`);
    });
  } else {
    console.log('‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ balance_history –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
  }

  // 5. –ê–ù–ê–õ–ò–ó –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê User #25
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• –°–ü–ò–°–ê–ù–ò–ô');
  console.log('-'.repeat(60));

  // –ò—â–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
  const suspiciousTransactions = allTransactions.filter(tx => {
    const desc = (tx.description || '').toLowerCase();
    const type = (tx.type || '').toLowerCase();
    
    return desc.includes('subtract') ||
           desc.includes('deduct') ||
           desc.includes('withdraw') ||
           desc.includes('rollback') ||
           desc.includes('reverse') ||
           desc.includes('cancel') ||
           type.includes('withdrawal') ||
           type.includes('fee') ||
           type.includes('commission');
  });

  console.log(`üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${suspiciousTransactions.length}`);
  if (suspiciousTransactions.length > 0) {
    console.log('‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:');
    suspiciousTransactions.forEach(tx => {
      console.log(`‚Ä¢ ID: ${tx.id} | ${tx.created_at.split('T')[0]} | Type: ${tx.type}`);
      console.log(`  TON: ${tx.amount_ton} | UNI: ${tx.amount_uni} | Currency: ${tx.currency}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      console.log('  ---');
    });
  }

  // 6. –ê–ù–ê–õ–ò–ó –ú–ï–¢–ê–î–ê–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
  console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ú–ï–¢–ê–î–ê–ù–ù–´–• –ò –ò–°–¢–û–ß–ù–ò–ö–û–í');
  console.log('-'.repeat(60));

  const transactionsWithMetadata = tonTransactions.filter(tx => tx.metadata && Object.keys(tx.metadata).length > 0);
  console.log(`üìä TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${transactionsWithMetadata.length}`);

  if (transactionsWithMetadata.length > 0) {
    console.log('üìã –ê–ù–ê–õ–ò–ó –ú–ï–¢–ê–î–ê–ù–ù–´–•:');
    transactionsWithMetadata.slice(0, 5).forEach(tx => {
      console.log(`‚Ä¢ ID: ${tx.id} | ${tx.amount_ton} TON`);
      console.log(`  Metadata: ${JSON.stringify(tx.metadata, null, 2)}`);
      console.log(`  Source: ${tx.source || 'N/A'}`);
      console.log('  ---');
    });
  }

  // 7. –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó
  console.log('\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(60));

  console.log(`üìä –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´:`);
  console.log(`   ‚Ä¢ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
  console.log(`   ‚Ä¢ –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${runningBalance.toFixed(6)} TON`);
  console.log(`   ‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${actualBalance} TON`);
  console.log(`   ‚Ä¢ –ü–†–û–ü–ê–õ–û: ${discrepancy.toFixed(6)} TON`);
  console.log(`   ‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: ${withdrawals?.length || 0}`);
  console.log(`   ‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${suspiciousTransactions.length}`);

  if (Math.abs(discrepancy) > 0.001) {
    console.log('\nüö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
    console.log(`   –°–ò–°–¢–ï–ú–ê –ü–û–¢–ï–†–Ø–õ–ê ${Math.abs(discrepancy).toFixed(6)} TON –∏–∑ –±–∞–ª–∞–Ω—Å–∞ User #25!`);
    
    if (suspiciousTransactions.length > 0) {
      console.log('   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è');
    } else {
      console.log('   ‚ùì –ü—Ä–∏—á–∏–Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö - –≤–æ–∑–º–æ–∂–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –±–∞–≥');
    }
  }

  console.log('\n' + '='.repeat(80));
  console.log('üìã –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ BalanceManager.subtractBalance() –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏');
  console.log('2. –ù–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å');
  console.log('3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–ø–∞–≤—à–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
  console.log('4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤');
  console.log('='.repeat(80));
}

criticalBalanceTracing().catch(console.error);