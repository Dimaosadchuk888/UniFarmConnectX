#!/usr/bin/env node
/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò TON CONNECT
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏: Tonkeeper ‚Üí Backend ‚Üí Database
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkRecentTonActivity() {
  console.log('üîç –ü–û–ò–°–ö –ù–ï–î–ê–í–ù–ò–• TON –ê–ö–¢–ò–í–ù–û–°–¢–ï–ô');
  
  // –ò—â–µ–º –ª—é–±—ã–µ –Ω–µ–¥–∞–≤–Ω–∏–µ TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  
  const { data: recentActivity, error } = await supabase
    .from('transactions')
    .select('*')
    .or('currency.eq.TON,description.ilike.%TON%,type.ilike.%TON%')
    .gte('created_at', yesterday.toISOString())
    .order('created_at', { ascending: false });

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error.message);
    return [];
  }

  console.log(`üìä TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ 24 —á–∞—Å–∞: ${recentActivity.length}`);
  
  if (recentActivity.length > 0) {
    console.log('üìù –ù–µ–¥–∞–≤–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    recentActivity.forEach(tx => {
      console.log(`   ID ${tx.id}: User ${tx.user_id} | ${tx.type} | ${tx.amount} ${tx.currency}`);
      console.log(`      ${new Date(tx.created_at).toLocaleString()} - ${tx.description}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 25 –∏ 227
      if (tx.user_id === 25 || tx.user_id === 227) {
        console.log(`      üéØ –ù–ê–ô–î–ï–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –¶–ï–õ–ï–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!`);
      }
    });
  }

  return recentActivity;
}

async function checkTonConnectLogs() {
  console.log('\nüîó –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON CONNECT –õ–û–ì–ò–ö–ò');
  
  // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã TON Connect
  const { data: possibleTonConnect, error } = await supabase
    .from('transactions')
    .select('*')
    .or('description.ilike.%blockchain%,description.ilike.%tonkeeper%,description.ilike.%wallet%')
    .order('created_at', { ascending: false })
    .limit(20);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TON Connect —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
    return;
  }

  console.log(`üîó –í–æ–∑–º–æ–∂–Ω—ã—Ö TON Connect —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${possibleTonConnect.length}`);
  
  if (possibleTonConnect.length > 0) {
    console.log('üìù –ü—Ä–∏–º–µ—Ä—ã:');
    possibleTonConnect.slice(0, 5).forEach(tx => {
      console.log(`   ID ${tx.id}: User ${tx.user_id} | ${tx.type} | ${tx.description}`);
      
      if (tx.user_id === 25 || tx.user_id === 227) {
        console.log(`      üéØ –¶–ï–õ–ï–í–û–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ô–î–ï–ù!`);
      }
    });
  }
}

async function checkMissingTransactions() {
  console.log('\nüïµÔ∏è –ü–û–ò–°–ö "–ü–û–¢–ï–†–Ø–ù–ù–´–•" –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø—Ä–æ–ø—É—Å–∫–∏ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
  const { data: recentIds } = await supabase
    .from('transactions')
    .select('id')
    .order('id', { ascending: false })
    .limit(100);

  if (recentIds && recentIds.length > 1) {
    const gaps = [];
    for (let i = 0; i < recentIds.length - 1; i++) {
      const current = recentIds[i].id;
      const next = recentIds[i + 1].id;
      const gap = current - next;
      
      if (gap > 10) { // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π –ø—Ä–æ–ø—É—Å–∫
        gaps.push({ from: next, to: current, gap: gap - 1 });
      }
    }
    
    if (gaps.length > 0) {
      console.log('üö® –ù–ê–ô–î–ï–ù–´ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–ü–£–°–ö–ò –í ID:');
      gaps.slice(0, 3).forEach(gap => {
        console.log(`   ID ${gap.from} ‚Üí ${gap.to} (–ø—Ä–æ–ø—É—â–µ–Ω–æ ~${gap.gap} –∑–∞–ø–∏—Å–µ–π)`);
      });
    } else {
      console.log('‚úÖ –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  }
}

async function checkUserSpecificIssues() {
  console.log('\nüë§ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 25 –ò 227');
  
  for (const userId of [25, 227]) {
    console.log(`\n--- User ${userId} ---`);
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const { data: lastActivity } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1);

    if (lastActivity && lastActivity.length > 0) {
      const last = lastActivity[0];
      console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(last.created_at).toLocaleString()}`);
      console.log(`   ${last.type} | ${last.amount} ${last.currency} | ${last.description}`);
    } else {
      console.log(`‚ö†Ô∏è  –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –¥–ª—è User ${userId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const { data: user } = await supabase
      .from('users')
      .select('balance_ton, balance_uni, created_at, updated_at')
      .eq('id', userId)
      .single();

    if (user) {
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å—ã: TON=${user.balance_ton}, UNI=${user.balance_uni}`);
      console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(user.updated_at).toLocaleString()}`);
      
      // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å TON > 0, –Ω–æ –Ω–µ—Ç TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - —ç—Ç–æ –∞–Ω–æ–º–∞–ª–∏—è
      if (parseFloat(user.balance_ton || 0) > 0) {
        const { data: tonTx } = await supabase
          .from('transactions')
          .select('count')
          .eq('user_id', userId)
          .eq('currency', 'TON');
        
        if (!tonTx || tonTx.length === 0) {
          console.log(`üö® –ê–ù–û–ú–ê–õ–ò–Ø: TON –±–∞–ª–∞–Ω—Å ${user.balance_ton} –ë–ï–ó —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!`);
        }
      }
    }
  }
}

async function runTonConnectDiagnosis() {
  console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON CONNECT –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('=' * 50);
  
  const results = {};
  
  results.recentActivity = await checkRecentTonActivity();
  await checkTonConnectLogs();
  await checkMissingTransactions();
  await checkUserSpecificIssues();
  
  console.log('\nüéØ –í–´–í–û–î–´:');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const user25Activity = results.recentActivity.filter(tx => tx.user_id === 25);
  const user227Activity = results.recentActivity.filter(tx => tx.user_id === 227);
  
  console.log(`üìä User 25 TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24—á: ${user25Activity.length}`);
  console.log(`üìä User 227 TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24—á: ${user227Activity.length}`);
  
  if (user25Activity.length === 0 && user227Activity.length === 0) {
    console.log('‚ö†Ô∏è  –ù–ò –û–î–ò–ù –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï –ò–ú–ï–ï–¢ –Ω–µ–¥–∞–≤–Ω–∏—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   1. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –¥–æ—à–ª–∞ –¥–æ backend API');
    console.log('   2. –û—à–∏–±–∫–∞ –≤ TON Connect –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    console.log('   3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–ª–∞—Å—å –ø–æ–¥ –¥—Ä—É–≥–∏–º user_id');
    console.log('   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–æ–º/—Ñ–æ—Ä–º–∞—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  }
  
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ TON Connect –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

runTonConnectDiagnosis().catch(console.error);