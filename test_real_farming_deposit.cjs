#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function testRealFarmingDeposit() {
  console.log('üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –¥–µ–ø–æ–∑–∏—Ç User 184
    const { data: beforeData, error: beforeError } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount')
      .eq('id', 184)
      .single();

    if (beforeError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö BEFORE:', beforeError);
      return;
    }

    console.log('üìä BEFORE - User 184:');
    console.log(`   Balance UNI: ${beforeData.balance_uni}`);
    console.log(`   Deposit Amount: ${beforeData.uni_deposit_amount}\n`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BEFORE
    const { data: beforeTransactions, error: beforeTxError } = await supabase
      .from('transactions')
      .select('id')
      .eq('user_id', 184)
      .eq('type', 'FARMING_DEPOSIT');

    if (beforeTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BEFORE:', beforeTxError);
      return;
    }

    console.log(`üìà BEFORE - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${beforeTransactions.length}\n`);

    // 3. –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ API —Ñ–∞—Ä–º–∏–Ω–≥–∞
    console.log('üì° –í—ã–ø–æ–ª–Ω—è—é POST /api/v2/farming/deposit...');

    const fetch = require('node-fetch');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è User 184
    const authResponse = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        initData: 'user=%7B%22id%22%3A184%2C%22first_name%22%3A%22Test%22%2C%22username%22%3A%22test_user_184%22%7D&hash=test&start_param=184'
      })
    });

    const authData = await authResponse.json();
    
    if (!authData.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authData);
      return;
    }

    const jwtToken = authData.data.token;
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

    // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
    const farmingResponse = await fetch('http://localhost:3000/api/v2/farming/deposit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${jwtToken}`
      },
      body: JSON.stringify({
        amount: 500  // –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç 500 UNI
      })
    });

    const farmingData = await farmingResponse.json();
    console.log('üìù –û—Ç–≤–µ—Ç API:', farmingData);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ AFTER
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥—ë–º —Å–µ–∫—É–Ω–¥—É

    const { data: afterData, error: afterError } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount')
      .eq('id', 184)
      .single();

    if (afterError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö AFTER:', afterError);
      return;
    }

    console.log('\nüìä AFTER - User 184:');
    console.log(`   Balance UNI: ${afterData.balance_uni}`);
    console.log(`   Deposit Amount: ${afterData.uni_deposit_amount}`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ AFTER
    const { data: afterTransactions, error: afterTxError } = await supabase
      .from('transactions')
      .select('id, amount, description, created_at')
      .eq('user_id', 184)
      .eq('type', 'FARMING_DEPOSIT')
      .order('created_at', { ascending: false })
      .limit(3);

    if (afterTxError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π AFTER:', afterTxError);
      return;
    }

    console.log(`\nüìà AFTER - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FARMING_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${afterTransactions.length}`);

    if (afterTransactions.length > beforeTransactions.length) {
      console.log('‚úÖ –ù–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ê!');
      const newTransaction = afterTransactions[0];
      console.log(`   ID: ${newTransaction.id}`);
      console.log(`   Amount: ${newTransaction.amount}`);
      console.log(`   Description: ${newTransaction.description}`);
      console.log(`   Created: ${newTransaction.created_at}`);
    } else {
      console.log('‚ùå –ù–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ù–ï –°–û–ó–î–ê–ù–ê!');
    }

    // 6. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const balanceChange = beforeData.balance_uni - afterData.balance_uni;
    const depositChange = afterData.uni_deposit_amount - beforeData.uni_deposit_amount;

    console.log('\nüìà –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:');
    console.log(`   Balance –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${balanceChange > 0 ? '-' : '+'}${Math.abs(balanceChange)} UNI`);
    console.log(`   Deposit –∏–∑–º–µ–Ω–µ–Ω–∏–µ: +${depositChange} UNI`);

    if (balanceChange === 500 && depositChange === 500) {
      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö');
    }

  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ:', error);
  }
}

testRealFarmingDeposit();