#!/usr/bin/env node

/**
 * –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª–µ–π –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 */

import http from 'http';

const API_BASE = 'http://localhost:3000/api/v2';
const TEST_TOKEN = 'mock-jwt-token-for-testing';

async function apiRequest(path, method = 'GET', body = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: `/api/v2${path}`,
      method,
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`,
        'Content-Type': 'application/json',
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(data) });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    
    if (body) {
      req.write(JSON.stringify(body));
    }
    
    req.end();
  });
}

async function checkDatabaseState() {
  console.log('=== –ì–õ–£–ë–û–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE ===\n');
  
  const results = {
    working: [],
    notWorking: [],
    suspicious: []
  };

  // 1. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (users)');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = await apiRequest('/users/profile');
    
    if (userProfile.status === 200 && userProfile.data.success) {
      const user = userProfile.data.data;
      console.log('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
        id: user.id,
        telegram_id: user.telegram_id,
        username: user.username,
        ref_code: user.ref_code
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
      const requiredFields = ['id', 'telegram_id', 'username', 'ref_code', 'balance_uni', 'balance_ton'];
      const missingFields = requiredFields.filter(field => !(field in user));
      
      if (missingFields.length === 0) {
        results.working.push('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users: –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      } else {
        results.notWorking.push(`‚ùå –¢–∞–±–ª–∏—Ü–∞ users: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è ${missingFields.join(', ')}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
      if (user.ref_code && user.ref_code.trim() !== '') {
        results.working.push('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        results.suspicious.push('‚ùì –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è');
      }
      
    } else {
      results.notWorking.push('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  } catch (error) {
    results.notWorking.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã users: ${error.message}`);
  }

  // 2. –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –î–ï–ü–û–ó–ò–¢–û–í
  console.log('\nüí∞ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    const walletBalance = await apiRequest('/wallet/balance');
    
    if (walletBalance.status === 200 && walletBalance.data.success) {
      const balance = walletBalance.data.data;
      console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', balance);
      
      results.working.push('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactions = await apiRequest('/wallet/history');
      
      if (transactions.status === 200 && transactions.data.success) {
        const txData = transactions.data.data;
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txData.length}`);
        
        if (txData.length > 0) {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          const txTypes = [...new Set(txData.map(tx => tx.type))];
          console.log('–¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txTypes);
          
          results.working.push(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç (${txData.length} –∑–∞–ø–∏—Å–µ–π)`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
          const deposits = txData.filter(tx => tx.type === 'DEPOSIT' || tx.type === 'TON_DEPOSIT');
          if (deposits.length > 0) {
            results.working.push(`‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –ë–î (–Ω–∞–π–¥–µ–Ω–æ ${deposits.length})`);
          } else {
            results.suspicious.push('‚ùì –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
          }
        } else {
          results.suspicious.push('‚ùì –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞');
        }
      }
    }
  } catch (error) {
    results.notWorking.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${error.message}`);
  }

  // 3. –ü–†–û–í–ï–†–ö–ê TON BOOST –ü–û–ö–£–ü–û–ö
  console.log('\nüöÄ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –ø–æ–∫—É–ø–æ–∫');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö Boost
    const activeBoosts = await apiRequest('/boost/active');
    
    if (activeBoosts.status === 200) {
      const boosts = activeBoosts.data.data || [];
      console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö Boost –ø–∞–∫–µ—Ç–æ–≤: ${boosts.length}`);
      
      if (boosts.length > 0) {
        results.working.push(`‚úÖ TON Boost –ø–æ–∫—É–ø–∫–∏ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è (${boosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö)`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Boost –∑–∞–ø–∏—Å–µ–π
        const firstBoost = boosts[0];
        const boostFields = ['user_id', 'package_id', 'amount', 'rate', 'expires_at'];
        const missingBoostFields = boostFields.filter(field => !(field in firstBoost));
        
        if (missingBoostFields.length === 0) {
          results.working.push('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Boost –∑–∞–ø–∏—Å–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        } else {
          results.suspicious.push(`‚ùì –í Boost –∑–∞–ø–∏—Å—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${missingBoostFields.join(', ')}`);
        }
      } else {
        results.suspicious.push('‚ùì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤');
      }
    }
  } catch (error) {
    results.notWorking.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TON Boost: ${error.message}`);
  }

  // 4. –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
  console.log('\nüë• 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
  
  try {
    const referralInfo = await apiRequest('/referral/1');
    
    if (referralInfo.status === 200 && referralInfo.data.success) {
      const refData = referralInfo.data.data;
      
      if (refData.ref_code) {
        results.working.push('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è');
      }
      
      if (refData.stats) {
        results.working.push('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞');
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', refData.stats);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const referralList = await apiRequest('/referral/1/list');
      
      if (referralList.status === 200) {
        const refs = referralList.data.data || [];
        if (refs.length > 0) {
          results.working.push(`‚úÖ –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (${refs.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)`);
        } else {
          results.suspicious.push('‚ùì –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—É—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö)');
        }
      }
    }
  } catch (error) {
    results.notWorking.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${error.message}`);
  }

  // 5. –ü–†–û–í–ï–†–ö–ê FARMING –°–ò–°–¢–ï–ú–´
  console.log('\nüåæ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ farming —Å–∏—Å—Ç–µ–º—ã');
  
  try {
    const farmingStatus = await apiRequest('/farming/status');
    
    if (farmingStatus.status === 200 && farmingStatus.data.success) {
      const farming = farmingStatus.data.data;
      console.log('–°—Ç–∞—Ç—É—Å farming:', {
        isActive: farming.isActive,
        depositAmount: farming.depositAmount,
        dailyIncomeUni: farming.dailyIncomeUni
      });
      
      results.working.push('‚úÖ Farming —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤ –ë–î
      if ('uni_farming_start_timestamp' in farming) {
        results.working.push('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ farming —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
      } else {
        results.suspicious.push('‚ùì –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ farming –º–æ–≥—É—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è');
      }
    }
  } catch (error) {
    results.notWorking.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ farming: ${error.message}`);
  }

  // 6. –ü–†–û–í–ï–†–ö–ê –ú–ò–°–°–ò–ô
  console.log('\nüéØ 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∏—Å—Å–∏–π');
  
  try {
    const missionsList = await apiRequest('/missions/list');
    
    if (missionsList.status === 200 && missionsList.data.success) {
      const missions = missionsList.data.data;
      console.log(`–î–æ—Å—Ç—É–ø–Ω–æ –º–∏—Å—Å–∏–π: ${missions.length}`);
      
      results.working.push('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMissions = await apiRequest('/missions/user/1');
      
      if (userMissions.status === 200) {
        results.working.push('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è');
      } else {
        results.suspicious.push('‚ùì –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–π –º–æ–∂–µ—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è');
      }
    }
  } catch (error) {
    results.notWorking.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏—Å—Å–∏–π: ${error.message}`);
  }

  // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ü–û –°–û–°–¢–û–Ø–ù–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
  
  console.log('‚úÖ –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢:');
  results.working.forEach(item => console.log(`  ${item}`));
  
  console.log('\n‚ùå –ß–¢–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢:');
  if (results.notWorking.length === 0) {
    console.log('  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
  } else {
    results.notWorking.forEach(item => console.log(`  ${item}`));
  }
  
  console.log('\n‚ùì –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ú–û–ú–ï–ù–¢–´:');
  if (results.suspicious.length === 0) {
    console.log('  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
  } else {
    results.suspicious.forEach(item => console.log(`  ${item}`));
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
  console.log('\nüîç –ê–ù–ê–õ–ò–ó –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:');
  
  const integrity = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  integrity.push('‚Ä¢ –ë–∞–ª–∞–Ω—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ users (balance_uni, balance_ton)');
  integrity.push('‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ transactions');
  integrity.push('‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–µ referred_by –≤ users');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
  integrity.push('\n‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
  integrity.push('  - user_sessions (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–µ—Å—Å–∏–π)');
  integrity.push('  - referrals (–¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª referred_by)');
  integrity.push('  - farming_sessions (–≤–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ farming)');
  
  integrity.forEach(item => console.log(item));
  
  console.log('\n' + '='.repeat(60));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseState().catch(console.error);