// –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∏ –∫ –∫–∞–∫–∏–º –ø–æ–ª—è–º –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025
// –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–î–ï - –¢–û–õ–¨–ö–û –ê–ù–ê–õ–ò–ó

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface SchedulerArchitectureAnalysis {
  tables: {
    users: any;
    ton_farming_data: any;
    ton_boost_purchases: any;
    transactions: any;
  };
  fields: {
    ton_boost_fields: string[];
    farming_fields: string[];
    missing_fields: string[];
  };
  schedulers: {
    uni_farming: any;
    ton_boost: any;
  };
  data_flow: {
    source_tables: string[];
    processing_logic: string[];
    output_transactions: string[];
  };
}

async function analyzeSchedulerArchitecture(): Promise<SchedulerArchitectureAnalysis> {
  console.log('üîß –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í');
  console.log('='.repeat(70));

  const analysis: SchedulerArchitectureAnalysis = {
    tables: {
      users: null,
      ton_farming_data: null,
      ton_boost_purchases: null,
      transactions: null
    },
    fields: {
      ton_boost_fields: [],
      farming_fields: [],
      missing_fields: []
    },
    schedulers: {
      uni_farming: null,
      ton_boost: null
    },
    data_flow: {
      source_tables: [],
      processing_logic: [],
      output_transactions: []
    }
  };

  // 1. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ USERS - –û–°–ù–û–í–ù–û–ô –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–•
  try {
    console.log('\nüìã 1. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ USERS:');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    const { data: userColumns, error: columnsError } = await supabase.rpc('get_table_columns', { table_name: 'users' }).single();
    
    if (columnsError) {
      // Fallback: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
      const { data: sampleUser } = await supabase
        .from('users')
        .select('*')
        .limit(1)
        .single();
      
      if (sampleUser) {
        const fields = Object.keys(sampleUser);
        console.log(`‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${fields.length} —à—Ç—É–∫`);
        
        // –ò—â–µ–º TON Boost –ø–æ–ª—è
        const tonBoostFields = fields.filter(f => 
          f.includes('ton_boost') || 
          f.includes('farming') && f.includes('ton') ||
          f.includes('ton_farming')
        );
        
        const farmingFields = fields.filter(f => 
          f.includes('farming') || 
          f.includes('uni_farming')
        );
        
        console.log(`üéØ TON Boost –ø–æ–ª—è (${tonBoostFields.length}):`, tonBoostFields);
        console.log(`üåæ Farming –ø–æ–ª—è (${farmingFields.length}):`, farmingFields);
        
        analysis.fields.ton_boost_fields = tonBoostFields;
        analysis.fields.farming_fields = farmingFields;
        analysis.tables.users = { field_count: fields.length, sample: sampleUser };
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã users: ${error}`);
  }

  // 2. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ TON_FARMING_DATA
  try {
    console.log('\nüìä 2. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ TON_FARMING_DATA:');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .limit(5);

    if (farmingError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ton_farming_data: ${farmingError.message}`);
      if (farmingError.code === '42P01') {
        console.log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
        analysis.tables.ton_farming_data = { exists: false, error: farmingError.message };
      }
    } else {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_farming_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${farmingData?.length || 0}`);
      
      if (farmingData && farmingData.length > 0) {
        const sampleRecord = farmingData[0];
        const fields = Object.keys(sampleRecord);
        console.log(`üìã –ü–æ–ª—è –≤ ton_farming_data:`, fields);
        
        // –ò—â–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è TON Boost
        const boostFields = fields.filter(f => f.includes('boost'));
        const farmingFields = fields.filter(f => f.includes('farming'));
        
        console.log(`üéØ Boost –ø–æ–ª—è:`, boostFields);
        console.log(`üåæ Farming –ø–æ–ª—è:`, farmingFields);
        
        analysis.tables.ton_farming_data = {
          exists: true,
          record_count: farmingData.length,
          fields: fields,
          sample: sampleRecord
        };
      }
    }
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ton_farming_data: ${error}`);
  }

  // 3. –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST
  try {
    console.log('\nüë• 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° TON BOOST:');
    
    // –ò—â–µ–º –≤ users —Ç–∞–±–ª–∏—Ü–µ
    const { data: usersWithBoost, error: boostError } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, balance_ton, balance_uni')
      .eq('ton_boost_active', true);

    if (boostError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${boostError.message}`);
    } else {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_active=true: ${usersWithBoost?.length || 0}`);
      
      if (usersWithBoost && usersWithBoost.length > 0) {
        console.log(`üìã –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
        usersWithBoost.slice(0, 3).forEach(user => {
          console.log(`   User ${user.id} (@${user.username || 'N/A'}): ${user.balance_ton} TON, ${user.balance_uni} UNI`);
        });
      }
    }
    
    // –ò—â–µ–º –≤ ton_farming_data (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (analysis.tables.ton_farming_data?.exists) {
      const { data: farmingWithBoost } = await supabase
        .from('ton_farming_data')
        .select('*')
        .eq('boost_active', true);
      
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data —Å boost_active=true: ${farmingWithBoost?.length || 0}`);
      
      if (farmingWithBoost && farmingWithBoost.length > 0) {
        console.log(`üìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑ ton_farming_data:`);
        farmingWithBoost.slice(0, 3).forEach(record => {
          console.log(`   User ${record.user_id}: farming_balance=${record.farming_balance}, boost_package_id=${record.boost_package_id}`);
        });
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error}`);
  }

  // 4. –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
  try {
    console.log('\nüí∞ 4. –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ü–æ–ª—É—á–∞–µ–º enum —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: transactionTypes } = await supabase.rpc('get_enum_values', { enum_name: 'transaction_type' });
    
    if (transactionTypes) {
      console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`, transactionTypes);
      
      const boostTypes = transactionTypes.filter((type: string) => 
        type.includes('BOOST') || type.includes('TON_BOOST')
      );
      console.log(`üéØ TON Boost —Ç–∏–ø—ã:`, boostTypes);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ TON_BOOST_INCOME
      if (boostTypes.includes('TON_BOOST_INCOME')) {
        console.log(`‚úÖ –¢–∏–ø TON_BOOST_INCOME –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      } else {
        console.log(`‚ùå –¢–∏–ø TON_BOOST_INCOME –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
        analysis.fields.missing_fields.push('TON_BOOST_INCOME enum value');
      }
    } else {
      // Fallback: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data: sampleTx } = await supabase
        .from('transactions')
        .select('type')
        .limit(100);
      
      if (sampleTx) {
        const uniqueTypes = [...new Set(sampleTx.map(tx => tx.type))];
        console.log(`üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`, uniqueTypes);
        
        const boostTypes = uniqueTypes.filter(type => 
          type.includes('BOOST') || type.includes('TON_BOOST')
        );
        console.log(`üéØ Boost-—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã:`, boostTypes);
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error}`);
  }

  // 5. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ù–ê–ì–†–ê–î –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
  try {
    console.log('\n‚è∞ 5. –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í:');
    
    // UNI Farming –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    const { data: uniFarmingRewards } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', new Date(Date.now() - 10 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log(`üåæ UNI Farming –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ 10 –º–∏–Ω—É—Ç: ${uniFarmingRewards?.length || 0}`);
    
    if (uniFarmingRewards && uniFarmingRewards.length > 0) {
      console.log(`‚úÖ UNI Farming –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –†–ê–ë–û–¢–ê–ï–¢`);
      const avgReward = uniFarmingRewards.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0) / uniFarmingRewards.length;
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${avgReward.toFixed(6)} UNI`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å—Ç—å –ª–∏ TON Boost –º–Ω–æ–∂–∏—Ç–µ–ª–∏
      const withBoostMetadata = uniFarmingRewards.filter(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        return metadata.boost_multiplier || metadata.ton_boost_active || metadata.original_type === 'TON_BOOST_INCOME';
      });
      
      console.log(`üéØ –ù–∞–≥—Ä–∞–¥—ã —Å TON Boost –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${withBoostMetadata.length}`);
      
      if (withBoostMetadata.length > 0) {
        console.log(`‚úÖ TON Boost –Ω–∞–≥—Ä–∞–¥—ã –û–ë–ù–ê–†–£–ñ–ï–ù–´ –≤ FARMING_REWARD`);
        console.log(`üìã –ü—Ä–∏–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:`, withBoostMetadata[0].metadata);
      } else {
        console.log(`‚ùå TON Boost –Ω–∞–≥—Ä–∞–¥—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö`);
      }
    } else {
      console.log(`‚ö†Ô∏è UNI Farming –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
    // TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: tonBoostRewards } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_BOOST_INCOME')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (tonBoostRewards && tonBoostRewards.length > 0) {
      console.log(`üéØ TON_BOOST_INCOME —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —á–∞—Å: ${tonBoostRewards.length}`);
      console.log(`‚úÖ TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –°–û–ó–î–ê–ï–¢ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
    } else {
      console.log(`‚ùå TON_BOOST_INCOME —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤: ${error}`);
  }

  return analysis;
}

async function analyzeTonBoostDataFlow(): Promise<void> {
  console.log('\nüîÑ –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–• TON BOOST');
  console.log('='.repeat(70));

  try {
    // 1. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost —á–µ—Ä–µ–∑ TonFarmingRepository –ª–æ–≥–∏–∫—É
    console.log('\nüìä 1. –ò–ú–ò–¢–ê–¶–ò–Ø getActiveBoostUsers():');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ton_farming_data
    let activeUsers: any[] = [];
    let dataSource = '';
    
    const { data: farmingUsers, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true);

    if (farmingError) {
      console.log(`‚ö†Ô∏è ton_farming_data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${farmingError.message}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
      
      // Fallback: users —Ç–∞–±–ª–∏—Ü–∞
      const { data: usersBoost, error: usersError } = await supabase
        .from('users')
        .select('*')
        .eq('ton_boost_active', true);

      if (usersError) {
        console.log(`‚ùå Fallback —Ç–æ–∂–µ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: ${usersError.message}`);
        return;
      } else {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç TonFarmingData
        activeUsers = (usersBoost || []).map(user => ({
          user_id: user.id,
          farming_balance: user.ton_farming_balance || '0',
          farming_rate: user.ton_farming_rate || '0.01',
          boost_active: user.ton_boost_active || false,
          boost_package_id: user.ton_boost_package_id,
          ton_boost_rate: user.ton_boost_rate
        }));
        dataSource = 'users (fallback)';
      }
    } else {
      activeUsers = farmingUsers || [];
      dataSource = 'ton_farming_data';
    }
    
    console.log(`üìã –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: ${dataSource}`);
    console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
    
    if (activeUsers.length > 0) {
      console.log(`üìä –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:`);
      activeUsers.slice(0, 3).forEach(user => {
        console.log(`   User ${user.user_id}:`);
        console.log(`      farming_balance: ${user.farming_balance}`);
        console.log(`      boost_package_id: ${user.boost_package_id}`);
        console.log(`      ton_boost_rate: ${user.ton_boost_rate || 'N/A'}`);
      });
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã
      console.log(`\nüí∞ 2. –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:`);
      
      const userIds = activeUsers.map(u => parseInt(u.user_id.toString())).filter(id => !isNaN(id));
      console.log(`üî¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ ID:`, userIds);
      
      const { data: userBalances, error: balanceError } = await supabase
        .from('users')
        .select('id, balance_ton, balance_uni')
        .in('id', userIds);
      
      if (balanceError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${balanceError.message}`);
      } else {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${userBalances?.length || 0}`);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        const balanceMap = new Map(userBalances?.map(u => [u.id, u]) || []);
        console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ –º–∞–ø–µ:`, Array.from(balanceMap.keys()));
        
        // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤
        console.log(`\nüíµ 3. –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –î–û–•–û–î–û–í:`);
        
        for (const user of activeUsers.slice(0, 2)) { // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –¥–ª—è —Ç–µ—Å—Ç–∞
          const userId = parseInt(user.user_id.toString());
          const userBalance = balanceMap.get(userId);
          
          if (!userBalance) {
            console.log(`‚ùå User ${user.user_id}: –±–∞–ª–∞–Ω—Å –ù–ï –Ω–∞–π–¥–µ–Ω`);
            continue;
          }
          
          console.log(`‚úÖ User ${user.user_id}:`);
          console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userBalance.balance_ton} TON`);
          console.log(`   –î–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${user.farming_balance} TON`);
          
          // –†–∞—Å—á–µ—Ç –∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
          const dailyRate = user.ton_boost_rate || 0.01;
          const userDeposit = Math.max(0, parseFloat(user.farming_balance || '0'));
          const dailyIncome = userDeposit * dailyRate;
          const fiveMinuteIncome = dailyIncome / 288;
          
          console.log(`   –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${dailyRate * 100}%`);
          console.log(`   –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyIncome.toFixed(6)} TON`);
          console.log(`   –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω: ${fiveMinuteIncome.toFixed(8)} TON`);
          
          if (fiveMinuteIncome <= 0.00001) {
            console.log(`   ‚ö†Ô∏è –î–æ—Ö–æ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª - –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º`);
          } else {
            console.log(`   ‚úÖ –î–æ—Ö–æ–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è`);
          }
        }
      }
    } else {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
  }
}

async function main(): Promise<void> {
  console.log('üîß –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í TON BOOST');
  console.log('='.repeat(80));
  console.log('–î–∞—Ç–∞:', new Date().toISOString());
  console.log('');

  const architecture = await analyzeSchedulerArchitecture();
  await analyzeTonBoostDataFlow();

  console.log('\n' + '='.repeat(80));
  console.log('üéØ –í–´–í–û–î–´ –ü–û –ê–†–•–ò–¢–ï–ö–¢–£–†–ï');
  console.log('='.repeat(80));

  console.log('\nüóÑÔ∏è –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:');
  if (architecture.tables.ton_farming_data?.exists) {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_farming_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫');
  } else {
    console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —á–µ—Ä–µ–∑ users');
  }
  
  console.log('\nüìä –ü–û–õ–Ø –î–õ–Ø TON BOOST:');
  if (architecture.fields.ton_boost_fields.length > 0) {
    console.log('‚úÖ TON Boost –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã:', architecture.fields.ton_boost_fields);
  } else {
    console.log('‚ùå TON Boost –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n‚öôÔ∏è –ú–ï–•–ê–ù–ò–ó–ú –†–ê–ë–û–¢–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
  console.log('1. TonFarmingRepository.getActiveBoostUsers() –∏—â–µ—Ç boost_active=true');
  console.log('2. –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∏–∑ users.balance_ton/balance_uni');
  console.log('3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç farming_balance –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤');
  console.log('4. –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ FARMING_REWARD —Å metadata.original_type=TON_BOOST_INCOME');
  console.log('5. BalanceManager –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã');
  console.log('6. WebSocket —É–≤–µ–¥–æ–º–ª—è–µ—Ç frontend');
  
  console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–û–ß–ö–ò –û–¢–ö–ê–ó–ê:');
  if (architecture.fields.missing_fields.length > 0) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', architecture.fields.missing_fields);
  }
  
  console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ production');
  console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ ton_farming_data.boost_active=true –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã farming_balance (–≤–æ–∑–º–æ–∂–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã)');
  console.log('4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å metadata –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
main().catch(console.error);