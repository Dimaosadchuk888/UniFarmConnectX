/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –ü–æ—á–µ–º—É –≤—á–µ—Ä–∞—à–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ TON Boost –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ ton_farming_data
 * –ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—ã–ª–∞ –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–µ—à–µ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±–∞–≥
 * –î–ê–¢–ê: 25 –∏—é–ª—è 2025
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function analyzeYesterdayTonBoostFailure() {
    console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ß–ï–†–ê–®–ù–ï–ô –ü–†–û–ë–õ–ï–ú–´ TON BOOST');
    console.log('–ü–æ—á–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ ton_farming_data –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?');
    console.log('=' .repeat(70));
    
    try {
        // –†–ê–ó–î–ï–õ 1: –ê–Ω–∞–ª–∏–∑ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ TON Boost
        console.log('\nüìÖ –†–ê–ó–î–ï–õ 1: –ê–ù–ê–õ–ò–ó –í–ß–ï–†–ê–®–ù–ò–• –ü–û–ö–£–ü–û–ö');
        console.log('-' .repeat(60));
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 2);
        const today = new Date();
        
        console.log(`üîç –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${yesterday.toLocaleDateString('ru-RU')} - ${today.toLocaleDateString('ru-RU')}`);
        
        const { data: recentPurchases, error: purchasesError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .gte('created_at', yesterday.toISOString())
            .order('created_at', { ascending: true });
            
        if (purchasesError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', purchasesError);
            return;
        }
        
        console.log(`\nüí∞ –ù–ê–ô–î–ï–ù–û –ü–û–ö–£–ü–û–ö TON BOOST: ${recentPurchases?.length || 0}`);
        
        if (!recentPurchases || recentPurchases.length === 0) {
            console.log('‚ö†Ô∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –ø–æ–∫—É–ø–æ–∫ TON Boost –Ω–µ –±—ã–ª–æ');
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –¥–Ω—è–º
        const purchasesByDay = new Map<string, any[]>();
        recentPurchases.forEach(purchase => {
            const day = new Date(purchase.created_at).toLocaleDateString('ru-RU');
            if (!purchasesByDay.has(day)) {
                purchasesByDay.set(day, []);
            }
            purchasesByDay.get(day)!.push(purchase);
        });
        
        console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º:');
        for (const [day, purchases] of purchasesByDay) {
            console.log(`   ${day}: ${purchases.length} –ø–æ–∫—É–ø–æ–∫`);
        }
        
        // –†–ê–ó–î–ï–õ 2: –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è farming –∑–∞–ø–∏—Å–∏
        console.log('\nüìÖ –†–ê–ó–î–ï–õ 2: –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ô –ü–û–ö–£–ü–ö–ò');
        console.log('-' .repeat(60));
        
        let successfulCreations = 0;
        let failedCreations = 0;
        const failedUsers: any[] = [];
        
        for (let i = 0; i < recentPurchases.length; i++) {
            const purchase = recentPurchases[i];
            const purchaseTime = new Date(purchase.created_at);
            
            console.log(`\nüîç –ê–ù–ê–õ–ò–ó –ü–û–ö–£–ü–ö–ò ${i + 1}/${recentPurchases.length}:`);
            console.log(`   üí∞ ID: ${purchase.id}`);
            console.log(`   üë§ User: ${purchase.user_id}`);
            console.log(`   üìÖ –í—Ä–µ–º—è: ${purchaseTime.toLocaleString('ru-RU')}`);
            console.log(`   üí∏ –°—É–º–º–∞: ${purchase.amount} ${purchase.currency}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
            if (purchase.metadata) {
                console.log(`   üì¶ Package ID: ${purchase.metadata.boost_package_id}`);
                console.log(`   üìù Package Name: ${purchase.metadata.package_name}`);
                console.log(`   ‚ö° Daily Rate: ${purchase.metadata.daily_rate}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ farming –∑–∞–ø–∏—Å—å
            const { data: farmingRecord, error: farmingError } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', purchase.user_id.toString())
                .order('created_at', { ascending: false })
                .limit(1)
                .single();
                
            if (farmingRecord) {
                const farmingTime = new Date(farmingRecord.created_at);
                const timeDiff = Math.abs(farmingTime.getTime() - purchaseTime.getTime()) / 1000;
                
                console.log(`   ‚úÖ FARMING –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:`);
                console.log(`      üìÖ –°–æ–∑–¥–∞–Ω–∞: ${farmingTime.toLocaleString('ru-RU')}`);
                console.log(`      ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${timeDiff.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
                console.log(`      üí∞ Balance: ${farmingRecord.farming_balance}`);
                console.log(`      ‚ö° Rate: ${farmingRecord.farming_rate}`);
                console.log(`      üîÑ Active: ${farmingRecord.boost_active}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã–µ —Å—Ä–æ–∫–∏ (–¥–æ 10 –º–∏–Ω—É—Ç)
                if (timeDiff <= 600) {
                    successfulCreations++;
                    console.log(`      ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û`);
                } else {
                    console.log(`      ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê - –≤–æ–∑–º–æ–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                    failedCreations++;
                    failedUsers.push({
                        userId: purchase.user_id,
                        purchaseId: purchase.id,
                        purchaseTime,
                        farmingTime,
                        timeDiff
                    });
                }
            } else {
                console.log(`   ‚ùå FARMING –ó–ê–ü–ò–°–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê!`);
                console.log(`   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∫—É–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –¥–µ–ø–æ–∑–∏—Ç!`);
                failedCreations++;
                failedUsers.push({
                    userId: purchase.user_id,
                    purchaseId: purchase.id,
                    purchaseTime,
                    farmingTime: null,
                    timeDiff: null
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ users —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏
            const { data: userState, error: userError } = await supabase
                .from('users')
                .select('ton_boost_package, ton_boost_rate, ton_boost_active')
                .eq('id', purchase.user_id)
                .single();
                
            if (userState) {
                console.log(`   üë§ –°–û–°–¢–û–Ø–ù–ò–ï USERS:`);
                console.log(`      üì¶ ton_boost_package: ${userState.ton_boost_package}`);
                console.log(`      ‚ö° ton_boost_rate: ${userState.ton_boost_rate}`);
                console.log(`      üîÑ ton_boost_active: ${userState.ton_boost_active}`);
            }
        }
        
        // –†–ê–ó–î–ï–õ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        console.log('\nüìä –†–ê–ó–î–ï–õ 3: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –°–û–ó–î–ê–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í');
        console.log('-' .repeat(60));
        
        const totalPurchases = recentPurchases.length;
        const successRate = totalPurchases > 0 ? (successfulCreations / totalPurchases * 100).toFixed(1) : '0';
        
        console.log(`\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
        console.log(`   üí∞ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: ${totalPurchases}`);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–∑–¥–µ–Ω–∏–π: ${successfulCreations}`);
        console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–æ–∑–¥–µ–Ω–∏–π: ${failedCreations}`);
        console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate}%`);
        
        if (failedUsers.length > 0) {
            console.log(`\nüö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò (${failedUsers.length}):`);
            failedUsers.forEach((user, index) => {
                console.log(`   ${index + 1}. User ${user.userId}:`);
                console.log(`      üí∞ Purchase ID: ${user.purchaseId}`);
                console.log(`      üìÖ Purchase Time: ${user.purchaseTime.toLocaleString('ru-RU')}`);
                if (user.farmingTime) {
                    console.log(`      ‚è±Ô∏è Delay: ${user.timeDiff.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
                    console.log(`      üìù Status: –†–£–ß–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï`);
                } else {
                    console.log(`      üìù Status: –î–ï–ü–û–ó–ò–¢ –ù–ï –°–û–ó–î–ê–ù`);
                }
            });
        }
        
        // –†–ê–ó–î–ï–õ 4: –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        console.log('\nüìä –†–ê–ó–î–ï–õ 4: –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í');
        console.log('-' .repeat(60));
        
        console.log('\n‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∫—É–ø–æ–∫:');
        recentPurchases.forEach((purchase, index) => {
            const time = new Date(purchase.created_at);
            console.log(`   ${index + 1}. ${time.toLocaleString('ru-RU')} - User ${purchase.user_id}`);
        });
        
        // –ò—â–µ–º –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        const timeWindows = new Map<string, number>();
        recentPurchases.forEach(purchase => {
            const time = new Date(purchase.created_at);
            const hourWindow = `${time.getDate()}.${time.getMonth()}.${time.getFullYear()} ${time.getHours()}:00`;
            timeWindows.set(hourWindow, (timeWindows.get(hourWindow) || 0) + 1);
        });
        
        console.log('\nüìä –ü–æ–∫—É–ø–∫–∏ –ø–æ —á–∞—Å–∞–º:');
        for (const [window, count] of timeWindows) {
            if (count > 1) {
                console.log(`   ${window}: ${count} –ø–æ–∫—É–ø–æ–∫`);
            }
        }
        
        // –†–ê–ó–î–ï–õ 5: –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
        console.log('\nüìä –†–ê–ó–î–ï–õ 5: –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –ü–†–ò–ß–ò–ù');
        console.log('-' .repeat(60));
        
        console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú:');
        
        if (failedCreations === 0) {
            console.log('   ‚úÖ –í–°–ï –ü–û–ö–£–ü–ö–ò –°–û–ó–î–ê–õ–ò –î–ï–ü–û–ó–ò–¢–´ –£–°–ü–ï–®–ù–û');
            console.log('   üí° –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è, –∞ –µ–¥–∏–Ω–∏—á–Ω–∞—è');
        } else if (successRate === '0') {
            console.log('   ‚ùå –ù–ò –û–î–ù–ê –ü–û–ö–£–ü–ö–ê –ù–ï –°–û–ó–î–ê–õ–ê –î–ï–ü–û–ó–ò–¢');
            console.log('   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ò–°–¢–ï–ú–ù–´–ô –ë–ê–ì');
            console.log('   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('      - –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ activateBoost()');
            console.log('      - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö');
            console.log('      - –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ton_farming_data —Ç–∞–±–ª–∏—Ü—ã');
        } else {
            console.log(`   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´: ${successRate}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏`);
            console.log('   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('      - –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–µ—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            console.log('      - Intermittent bug –≤ activateBoost()');
            console.log('      - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
            console.log('      - Race conditions –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ');
        }
        
        // –†–ê–ó–î–ï–õ 6: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        console.log('\nüìä –†–ê–ó–î–ï–õ 6: –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢');
        console.log('-' .repeat(60));
        
        // –ò—â–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–∫–∞
        console.log('\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ò–ü–û–í –î–ê–ù–ù–´–•:');
        console.log('   üìÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 25 –∏—é–ª—è 2025');
        console.log('   üîß –ü—Ä–æ–±–ª–µ–º–∞: user_id INTEGER vs STRING –≤ TonFarmingRepository');
        console.log('   üí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ò–∑–º–µ–Ω–µ–Ω user_id: parseInt(userId) –Ω–∞ user_id: userId.toString()');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const fixDate = new Date('2025-07-25T10:00:00.000Z'); // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const beforeFix = recentPurchases.filter(p => new Date(p.created_at) < fixDate);
        const afterFix = recentPurchases.filter(p => new Date(p.created_at) >= fixDate);
        
        console.log(`\nüìä –ü–û–ö–£–ü–ö–ò –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: ${beforeFix.length}`);
        console.log(`üìä –ü–û–ö–£–ü–ö–ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: ${afterFix.length}`);
        
        if (beforeFix.length > 0 && afterFix.length > 0) {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ –∏ –ø–æ—Å–ª–µ
            let beforeSuccess = 0;
            let afterSuccess = 0;
            
            for (const purchase of beforeFix) {
                const { data: farming } = await supabase
                    .from('ton_farming_data')
                    .select('created_at')
                    .eq('user_id', purchase.user_id.toString())
                    .single();
                    
                if (farming) {
                    const timeDiff = Math.abs(new Date(farming.created_at).getTime() - new Date(purchase.created_at).getTime()) / 1000;
                    if (timeDiff <= 600) beforeSuccess++;
                }
            }
            
            for (const purchase of afterFix) {
                const { data: farming } = await supabase
                    .from('ton_farming_data')
                    .select('created_at')
                    .eq('user_id', purchase.user_id.toString())
                    .single();
                    
                if (farming) {
                    const timeDiff = Math.abs(new Date(farming.created_at).getTime() - new Date(purchase.created_at).getTime()) / 1000;
                    if (timeDiff <= 600) afterSuccess++;
                }
            }
            
            const beforeRate = beforeFix.length > 0 ? (beforeSuccess / beforeFix.length * 100).toFixed(1) : '0';
            const afterRate = afterFix.length > 0 ? (afterSuccess / afterFix.length * 100).toFixed(1) : '0';
            
            console.log(`   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${beforeRate}% (${beforeSuccess}/${beforeFix.length})`);
            console.log(`   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${afterRate}% (${afterSuccess}/${afterFix.length})`);
            
            if (parseFloat(beforeRate) < parseFloat(afterRate)) {
                console.log('   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–õ–£–ß–®–ò–õ–û –°–ò–¢–£–ê–¶–ò–Æ');
            } else if (parseFloat(beforeRate) > parseFloat(afterRate)) {
                console.log('   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò –¢–ò–ü–û–í');
            } else {
                console.log('   üîÑ –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø');
            }
        }
        
        // –†–ê–ó–î–ï–õ 7: –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑
        console.log('\nüìä –†–ê–ó–î–ï–õ 7: –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó');
        console.log('-' .repeat(60));
        
        console.log('\nüéØ –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´:');
        
        if (failedCreations === 0) {
            console.log('‚úÖ –ü–†–û–ë–õ–ï–ú–ê –û–¢–°–£–¢–°–¢–í–£–ï–¢ - –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö');
        } else if (parseFloat(successRate) < 50) {
            console.log('‚ùå –°–ò–°–¢–ï–ú–ù–´–ô –ë–ê–ì - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –Ω–µ —Å–æ–∑–¥–∞—é—Ç –¥–µ–ø–æ–∑–∏—Ç—ã');
            console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        } else {
            console.log('‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç –¥–µ–ø–æ–∑–∏—Ç—ã');
            console.log('üí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('   - –ü—Ä–æ–±–ª–µ–º—ã –∫–µ—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            console.log('   - Race conditions –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö');
            console.log('   - Intermittent –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (failedUsers.length > 0) {
            console.log('1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ ton_farming_data –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            console.log('2. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
            console.log('3. –î–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É –≤ activateBoost() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤');
        } else {
            console.log('1. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            console.log('2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫');
            console.log('3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—à–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—É');
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
analyzeYesterdayTonBoostFailure().then(() => {
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—á–µ—Ä–∞—à–Ω–µ–π –ø—Ä–æ–±–ª–µ–º—ã TON Boost –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});