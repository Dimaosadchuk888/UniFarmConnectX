/**
 * –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì USER 25
 * –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

let lastTransactionCount = 0;
let lastBalance = 0;

async function continuousMonitorUser25() {
  console.log('‚ö° –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì USER 25 –ó–ê–ü–£–©–ï–ù');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥...\n');
  
  const userId = 25;
  let checkCount = 0;
  
  const monitor = setInterval(async () => {
    checkCount++;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const { data: user } = await supabase
        .from('users')
        .select('balance_ton')
        .eq('id', userId)
        .single();
      
      const currentBalance = parseFloat(user.balance_ton || '0');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { count } = await supabase
        .from('transactions')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)
        .eq('currency', 'TON');
      
      const currentTime = new Date().toLocaleTimeString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (checkCount === 1) {
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        lastTransactionCount = count;
        lastBalance = currentBalance;
        console.log(`${currentTime} - üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentBalance} TON, ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      } else {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        const balanceChanged = Math.abs(currentBalance - lastBalance) > 0.001;
        const transactionCountChanged = count !== lastTransactionCount;
        
        if (balanceChanged || transactionCountChanged) {
          console.log(`${currentTime} - üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!`);
          
          if (balanceChanged) {
            const diff = currentBalance - lastBalance;
            console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å: ${lastBalance} ‚Üí ${currentBalance} TON (${diff > 0 ? '+' : ''}${diff})`);
          }
          
          if (transactionCountChanged) {
            const txDiff = count - lastTransactionCount;
            console.log(`   üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${lastTransactionCount} ‚Üí ${count} (+${txDiff})`);
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const { data: newTx } = await supabase
              .from('transactions')
              .select('*')
              .eq('user_id', userId)
              .eq('currency', 'TON')
              .order('created_at', { ascending: false })
              .limit(txDiff);
            
            if (newTx && newTx.length > 0) {
              console.log('   üÜï –ù–û–í–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
              newTx.forEach((tx, i) => {
                console.log(`      ${i + 1}. ${tx.type}: ${tx.amount} TON - ${tx.description}`);
              });
            }
          }
          
          lastBalance = currentBalance;
          lastTransactionCount = count;
        } else {
          console.log(`${currentTime} - ‚è≥ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π (${currentBalance} TON, ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
        }
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ 30 –ø—Ä–æ–≤–µ—Ä–æ–∫ (5 –º–∏–Ω—É—Ç)
      if (checkCount >= 30) {
        console.log('\nüèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (5 –º–∏–Ω—É—Ç)');
        clearInterval(monitor);
        
        if (lastTransactionCount === count && checkCount > 1) {
          console.log('‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ù–ï –ø–æ—è–≤–∏–ª–∏—Å—å');
          console.log('–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - frontend/backend —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
        }
      }
      
    } catch (error) {
      console.log(`${new Date().toLocaleTimeString()} - ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

continuousMonitorUser25().catch(console.error);