// –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
const http = require('http');
const jwt = require('jsonwebtoken');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω
const token = jwt.sign(
  { userId: 184, telegram_id: 184, username: 'test' },
  process.env.JWT_SECRET || 'fallback_secret',
  { expiresIn: '1h' }
);

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve({ status: res.statusCode, data: result });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function diagnoseReferralProblem() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –ü–†–û–ë–õ–ï–ú–´');
  console.log('='.repeat(50));
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
    console.log('\n1Ô∏è‚É£ –¢–ï–°–¢: –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184');
    const referrals = await makeRequest('/api/v2/referral/184/list');
    console.log('–°—Ç–∞—Ç—É—Å:', referrals.status);
    console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(referrals.data, null, 2));
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
    console.log('\n2Ô∏è‚É£ –¢–ï–°–¢: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184');
    const stats = await makeRequest('/api/v2/referral/184/stats');
    console.log('–°—Ç–∞—Ç—É—Å:', stats.status);
    console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(stats.data, null, 2));
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    const transactions = await makeRequest('/api/v2/transactions?limit=5');
    console.log('–°—Ç–∞—Ç—É—Å:', transactions.status);
    if (transactions.data.success && transactions.data.data.transactions) {
      const referralTxs = transactions.data.data.transactions.filter(t => t.type === 'REFERRAL_REWARD');
      console.log('–ù–∞–π–¥–µ–Ω–æ REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', referralTxs.length);
      referralTxs.forEach((tx, i) => {
        console.log(`  ${i+1}. ${tx.description} - ${tx.amount} ${tx.currency}`);
      });
    }
    
    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('- –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—É—Å—Ç, –Ω–æ –µ—Å—Ç—å REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('- –≠—Ç–æ –∑–Ω–∞—á–∏—Ç: –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è, –Ω–æ –ø–æ–ª–µ referred_by –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    console.log('- –ü—Ä–æ–±–ª–µ–º–∞ –≤ processReferralInline() - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ referred_by –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

diagnoseReferralProblem();