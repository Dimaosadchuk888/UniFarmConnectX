#!/usr/bin/env tsx

/**
 * –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø TELEGRAM –ë–û–¢–û–í
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç webhook connectivity, bot tokens –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { config } from 'dotenv';
import { logger } from './core/logger';
import { supabase } from './core/supabase';

config();

interface BotTestResult {
  botName: string;
  tokenValid: boolean;
  webhookSet: boolean;
  webhookUrl?: string;
  lastError?: string;
  testMessageSent?: boolean;
}

class TelegramBotTester {
  private mainBotToken: string;
  private adminBotToken: string;
  private baseUrl: string;

  constructor() {
    this.mainBotToken = process.env.TELEGRAM_BOT_TOKEN || '';
    this.adminBotToken = process.env.ADMIN_BOT_TOKEN || '';
    this.baseUrl = process.env.APP_DOMAIN || 'https://uni-farm-connect-unifarm01010101.replit.app';
  }

  async testBotAPI(token: string, botName: string): Promise<BotTestResult> {
    const result: BotTestResult = {
      botName,
      tokenValid: false,
      webhookSet: false
    };

    try {
      // Test bot token validity
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${botName}...`);
      
      const botInfoResponse = await fetch(`https://api.telegram.org/bot${token}/getMe`);
      const botInfo = await botInfoResponse.json();
      
      if (botInfo.ok) {
        result.tokenValid = true;
        console.log(`‚úÖ ${botName} token –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: @${botInfo.result.username}`);
      } else {
        result.lastError = botInfo.description;
        console.log(`‚ùå ${botName} token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${botInfo.description}`);
        return result;
      }

      // Check webhook info
      const webhookInfoResponse = await fetch(`https://api.telegram.org/bot${token}/getWebhookInfo`);
      const webhookInfo = await webhookInfoResponse.json();
      
      if (webhookInfo.ok) {
        const info = webhookInfo.result;
        result.webhookUrl = info.url;
        result.webhookSet = !!info.url;
        
        console.log(`üì° Webhook info for ${botName}:`);
        console.log(`   URL: ${info.url || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
        console.log(`   Pending updates: ${info.pending_update_count}`);
        console.log(`   Last error: ${info.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`);
        console.log(`   Last error date: ${info.last_error_date ? new Date(info.last_error_date * 1000) : '–ù–∏–∫–æ–≥–¥–∞'}`);
        
        if (info.last_error_message) {
          result.lastError = info.last_error_message;
        }
      }

      // Set webhook if needed
      const expectedWebhookUrl = botName === 'MainBot' 
        ? `${this.baseUrl}/api/v2/telegram/webhook`
        : `${this.baseUrl}/api/v2/admin-bot/webhook`;

      if (!result.webhookSet || result.webhookUrl !== expectedWebhookUrl) {
        console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è ${botName}: ${expectedWebhookUrl}`);
        
        const setWebhookResponse = await fetch(`https://api.telegram.org/bot${token}/setWebhook`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            url: expectedWebhookUrl,
            allowed_updates: ['message', 'callback_query']
          })
        });
        
        const setWebhookResult = await setWebhookResponse.json();
        
        if (setWebhookResult.ok) {
          result.webhookSet = true;
          result.webhookUrl = expectedWebhookUrl;
          console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${botName}`);
        } else {
          result.lastError = setWebhookResult.description;
          console.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è ${botName}: ${setWebhookResult.description}`);
        }
      } else {
        console.log(`‚úÖ Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è ${botName}`);
      }

      return result;

    } catch (error) {
      result.lastError = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${botName}: ${result.lastError}`);
      return result;
    }
  }

  async testWebhookConnectivity(webhookUrl: string, botName: string): Promise<boolean> {
    try {
      console.log(`\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ webhook: ${webhookUrl}`);
      
      // Test webhook endpoint availability
      const testPayload = {
        update_id: 999999,
        message: {
          message_id: 1,
          from: { id: 12345, username: 'test_user', first_name: 'Test' },
          chat: { id: 12345, type: 'private' },
          date: Math.floor(Date.now() / 1000),
          text: '/start'
        }
      };

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testPayload)
      });

      const responseText = await response.text();
      
      console.log(`üìä Webhook ${botName} –æ—Ç–≤–µ—Ç:`);
      console.log(`   Status: ${response.status} ${response.statusText}`);
      console.log(`   Response: ${responseText.substring(0, 200)}`);
      
      return response.ok;

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ webhook ${botName}: ${error instanceof Error ? error.message : String(error)}`);
      return false;
    }
  }

  async testWithdrawalTransactionCreation(): Promise<boolean> {
    try {
      console.log('\nüí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥...');
      
      // Get a test user
      const { data: testUser, error: userError } = await supabase
        .from('users')
        .select('id, telegram_id, username, balance_ton, balance_uni')
        .gt('balance_ton', 1)
        .limit(1)
        .single();

      if (userError || !testUser) {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        return false;
      }

      console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID ${testUser.id}, @${testUser.username}, TON: ${testUser.balance_ton}`);

      // Test transaction creation without actually processing withdrawal
      const testTransactionData = {
        user_id: testUser.id,
        type: 'WITHDRAWAL', // –ò—Å–ø–æ–ª—å–∑—É–µ–º WITHDRAWAL –≤–º–µ—Å—Ç–æ lowercase withdrawal
        amount_uni: '0',
        amount_ton: '0.001', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
        currency: 'TON',
        status: 'test_only', // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        description: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥',
        created_at: new Date().toISOString()
      };

      const { data: transactionResult, error: transactionError } = await supabase
        .from('transactions')
        .insert(testTransactionData)
        .select()
        .single();

      if (transactionError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError.message);
        console.log('   Code:', transactionError.code);
        console.log('   Details:', transactionError.details);
        return false;
      }

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
        id: transactionResult.id,
        user_id: transactionResult.user_id,
        type: transactionResult.type,
        status: transactionResult.status
      });

      // Clean up test transaction
      await supabase
        .from('transactions')
        .delete()
        .eq('id', transactionResult.id);

      console.log('üßπ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
      return true;

    } catch (error) {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error instanceof Error ? error.message : String(error));
      return false;
    }
  }

  async runFullTest(): Promise<void> {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê TELEGRAM –ë–û–¢–û–í');
    console.log('==========================================');

    if (!this.mainBotToken) {
      console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ environment variables');
      return;
    }

    if (!this.adminBotToken) {
      console.log('‚ùå ADMIN_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ environment variables');
      return;
    }

    // Test main bot
    const mainBotResult = await this.testBotAPI(this.mainBotToken, 'MainBot (@UniFarming_Bot)');
    
    // Test admin bot
    const adminBotResult = await this.testBotAPI(this.adminBotToken, 'AdminBot (@unifarm_admin_bot)');

    // Test webhook connectivity
    if (mainBotResult.webhookSet && mainBotResult.webhookUrl) {
      await this.testWebhookConnectivity(mainBotResult.webhookUrl, 'MainBot');
    }

    if (adminBotResult.webhookSet && adminBotResult.webhookUrl) {
      await this.testWebhookConnectivity(adminBotResult.webhookUrl, 'AdminBot');
    }

    // Test withdrawal transaction creation
    await this.testWithdrawalTransactionCreation();

    // Summary
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('==================');
    console.log(`MainBot Token: ${mainBotResult.tokenValid ? '‚úÖ' : '‚ùå'}`);
    console.log(`MainBot Webhook: ${mainBotResult.webhookSet ? '‚úÖ' : '‚ùå'}`);
    console.log(`AdminBot Token: ${adminBotResult.tokenValid ? '‚úÖ' : '‚ùå'}`);
    console.log(`AdminBot Webhook: ${adminBotResult.webhookSet ? '‚úÖ' : '‚ùå'}`);

    if (mainBotResult.lastError || adminBotResult.lastError) {
      console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:');
      if (mainBotResult.lastError) {
        console.log(`   MainBot: ${mainBotResult.lastError}`);
      }
      if (adminBotResult.lastError) {
        console.log(`   AdminBot: ${adminBotResult.lastError}`);
      }
    }

    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (!mainBotResult.tokenValid) {
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    if (!adminBotResult.tokenValid) {
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ADMIN_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    if (!mainBotResult.webhookSet || !adminBotResult.webhookSet) {
      console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ application –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã webhook –≤ server/routes.ts');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new TelegramBotTester();
tester.runFullTest().catch(console.error);