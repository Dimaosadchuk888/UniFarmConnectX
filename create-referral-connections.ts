import { supabase } from './core/supabaseClient';

async function createReferralConnections() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï –ü–ê–†–¢–ù–ï–†–°–ö–ò–• –°–í–Ø–ó–ï–ô –î–õ–Ø –¢–ï–°–¢–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í ===\n');
  
  const REFERRER_ID = 184;
  const testUserIds = [311, 312, 313];
  
  console.log('–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ referrals:');
  console.log('- inviter_id (–∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª) = 184');
  console.log('- user_id (–∫—Ç–æ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω) = 311, 312, 313\n');
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å–≤—è–∑–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
  for (const userId of testUserIds) {
    const { error: refError } = await supabase
      .from('referrals')
      .insert({
        inviter_id: REFERRER_ID,  // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏!
        user_id: userId,          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏!
        level: 1,
        created_at: new Date().toISOString()
      });
      
    if (!refError) {
      console.log(`‚úÖ User ${userId} –ø—Ä–∏–≤—è–∑–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª L1 –∫ User ${REFERRER_ID}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ User ${userId}: ${refError.message}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\n\n–ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–ò–• –°–í–Ø–ó–ï–ô:');
  
  const { data: refs } = await supabase
    .from('referrals')
    .select('*')
    .eq('inviter_id', REFERRER_ID)
    .in('user_id', testUserIds);
    
  if (refs && refs.length > 0) {
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${refs.length} –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å–≤—è–∑–µ–π:`);
    refs.forEach(ref => {
      console.log(`‚îú‚îÄ‚îÄ User ${ref.user_id} - —Ä–µ—Ñ–µ—Ä–∞–ª L${ref.level} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ref.inviter_id}`);
    });
  } else {
    console.log('‚ùå –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
  console.log('\n\n–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´:');
  
  const { data: users } = await supabase
    .from('users')
    .select('id, username, ton_boost_package, ton_farming_balance')
    .in('id', testUserIds);
    
  const { data: farming } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_active')
    .in('user_id', testUserIds);
    
  console.log('\n–¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ:');
  users?.forEach(user => {
    const farmingData = farming?.find(f => f.user_id === user.id);
    console.log(`\n${user.username} (ID: ${user.id})`);
    console.log(`‚îú‚îÄ‚îÄ TON Boost –ø–∞–∫–µ—Ç: ${user.ton_boost_package} ‚úÖ`);
    console.log(`‚îú‚îÄ‚îÄ TON farming –±–∞–ª–∞–Ω—Å: ${user.ton_farming_balance} TON ‚úÖ`);
    console.log(`‚îú‚îÄ‚îÄ Boost –∞–∫—Ç–∏–≤–µ–Ω: ${farmingData?.boost_active ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚îî‚îÄ‚îÄ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å–≤—è–∑—å: —Å–æ–∑–¥–∞–Ω–∞ —Å User ${REFERRER_ID} ‚úÖ`);
  });
  
  console.log('\n\nüéâ –£–°–ü–ï–•! –í—Å–µ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:');
  console.log('- –ò–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã');
  console.log('- –ü—Ä–∏–≤—è–∑–∞–Ω—ã –∫–∞–∫ –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã L1');
  console.log('- –ù–∞—á–Ω—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TON farming —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç');
  console.log('- –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç –∏—Ö farming!');
}

createReferralConnections();