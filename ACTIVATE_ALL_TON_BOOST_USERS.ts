#!/usr/bin/env tsx
/**
 * –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 251 –ò 255
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import { config } from 'dotenv';
config();

async function main() {
  console.log('üöÄ === –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í ===');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toISOString());
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 251, 255');
  console.log('üí∞ –î–µ–ø–æ–∑–∏—Ç: 2 TON –∫–∞–∂–¥–æ–º—É');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á—Ç–æ –∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    const supabaseUrl = 'https://wunnsvicbebssrjqedor.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1bm5zdmljYmVic3NyanFlZG9yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjAzNjc5NjcsImV4cCI6MjAzNTk0Mzk2N30.mH6cD4A6UD7RwzrwClFHqBGvWyxXqE6Tz9ZGP0PYbRY';
    
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('id')
      .limit(1);
      
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', testError);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π TON Boost –ø–∞–∫–µ—Ç
    console.log('\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ TON Boost –ø–∞–∫–µ—Ç–æ–≤...');
    const { data: packages, error: packagesError } = await supabase
      .from('boost_packages')
      .select('*')
      .eq('is_active', true)
      .order('min_amount', { ascending: true });
      
    if (packagesError || !packages) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤:', packagesError);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${packages.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:`);
    packages.forEach(pkg => {
      console.log(`  - ${pkg.name}: –æ—Ç ${pkg.min_amount} TON, —Å—Ç–∞–≤–∫–∞: ${pkg.daily_rate}, UNI –±–æ–Ω—É—Å: ${pkg.uni_bonus}`);
    });
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è 2 TON
    const suitablePackage = packages.find(pkg => pkg.min_amount <= 2);
    if (!suitablePackage) {
      console.error('‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è 2 TON');
      return;
    }
    
    console.log(`\nüì¶ –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: ${suitablePackage.name} (ID: ${suitablePackage.id})`);
    
    const targetUsers = [251, 255];
    const depositAmount = 2;
    const results = [];
    
    for (const userId of targetUsers) {
      console.log(`\n${'='.repeat(50)}`);
      console.log(`üîÑ –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}`);
      console.log(`${'='.repeat(50)}`);
      
      try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('*')
          .eq('id', userId)
          .single();
          
        if (userError) {
          console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, userError);
          results.push({ userId, success: false, error: 'User not found' });
          continue;
        }
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${user.username || 'No username'})`);
        console.log(`üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã: TON=${user.balance_ton}, UNI=${user.balance_uni}`);
        console.log(`üîß –¢–µ–∫—É—â–∏–π –±—É—Å—Ç: ${user.ton_boost_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
        
        // 2. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        const currentTonBalance = parseFloat(user.balance_ton || '0');
        let newTonBalance = currentTonBalance;
        
        if (currentTonBalance < depositAmount) {
          newTonBalance = currentTonBalance + depositAmount + 0.1; // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
          console.log(`üí≥ –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å: ${currentTonBalance} ‚Üí ${newTonBalance} TON`);
          
          const { error: balanceError } = await supabase
            .from('users')
            .update({ balance_ton: newTonBalance })
            .eq('id', userId);
            
          if (balanceError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:`, balanceError);
            results.push({ userId, success: false, error: 'Balance update failed' });
            continue;
          }
        } else {
          console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: ${currentTonBalance} TON`);
        }
        
        // 3. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏...`);
        const { data: transaction, error: txError } = await supabase
          .from('transactions')
          .insert({
            user_id: userId,
            type: 'BOOST_PURCHASE',
            amount: depositAmount,
            currency: 'TON',
            status: 'completed',
            description: `Manual TON Boost activation: ${suitablePackage.name}`,
            metadata: {
              package_id: suitablePackage.id,
              package_name: suitablePackage.name,
              manual_activation: true,
              admin_script: true
            }
          })
          .select()
          .single();
          
        if (txError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, txError);
          results.push({ userId, success: false, error: 'Transaction failed' });
          continue;
        }
        
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
        
        // 4. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º TON Boost –≤ —Ç–∞–±–ª–∏—Ü–µ users
        console.log(`‚ö° –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost —Å—Ç–∞—Ç—É—Å–∞...`);
        const { error: activationError } = await supabase
          .from('users')
          .update({
            ton_boost_active: true,
            ton_boost_package: suitablePackage.id,
            ton_boost_package_id: suitablePackage.id,
            ton_boost_rate: suitablePackage.daily_rate,
            balance_ton: newTonBalance - depositAmount, // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
            updated_at: new Date().toISOString()
          })
          .eq('id', userId);
          
        if (activationError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`, activationError);
          results.push({ userId, success: false, error: 'Activation failed' });
          continue;
        }
        
        console.log(`‚úÖ TON Boost –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ users table`);
        
        // 5. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
        console.log(`üöú –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞...`);
        const farmingRecord = {
          user_id: userId.toString(),
          farming_balance: depositAmount,
          farming_rate: suitablePackage.daily_rate / 86400, // daily rate to per second
          boost_package_id: suitablePackage.id,
          boost_active: true,
          last_claim: new Date().toISOString(),
          farming_start_timestamp: new Date().toISOString(),
          farming_last_update: new Date().toISOString(),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        const { error: farmingError } = await supabase
          .from('ton_farming_data')
          .upsert(farmingRecord, { onConflict: 'user_id' });
          
        if (farmingError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è farming record:`, farmingError);
          results.push({ userId, success: false, error: 'Farming record failed' });
          continue;
        }
        
        console.log(`‚úÖ Farming record —Å–æ–∑–¥–∞–Ω`);
        
        // 6. –ù–∞—á–∏—Å–ª—è–µ–º UNI –±–æ–Ω—É—Å
        if (suitablePackage.uni_bonus > 0) {
          console.log(`üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ UNI –±–æ–Ω—É—Å–∞: ${suitablePackage.uni_bonus} UNI`);
          
          const currentUniBalance = parseFloat(user.balance_uni || '0');
          const newUniBalance = currentUniBalance + suitablePackage.uni_bonus;
          
          const { error: uniError } = await supabase
            .from('users')
            .update({ balance_uni: newUniBalance })
            .eq('id', userId);
            
          if (uniError) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è UNI –±–æ–Ω—É—Å–∞:`, uniError);
          } else {
            console.log(`‚úÖ UNI –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: ${currentUniBalance} ‚Üí ${newUniBalance}`);
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é UNI –±–æ–Ω—É—Å–∞
            await supabase
              .from('transactions')
              .insert({
                user_id: userId,
                type: 'DAILY_BONUS',
                amount: suitablePackage.uni_bonus,
                currency: 'UNI',
                status: 'completed',
                description: `TON Boost Package Bonus: ${suitablePackage.uni_bonus} UNI`,
                metadata: {
                  bonus_type: 'ton_boost_activation',
                  package_id: suitablePackage.id
                }
              });
          }
        }
        
        console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –£–°–ü–ï–®–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!`);
        results.push({ userId, success: true });
        
      } catch (error) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        results.push({ userId, success: false, error: String(error) });
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log(`\n${'='.repeat(60)}`);
    console.log('üìä === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
    console.log(`${'='.repeat(60)}`);
    
    const successCount = results.filter(r => r.success).length;
    const totalCount = results.length;
    
    results.forEach(({ userId, success, error }) => {
      console.log(`${success ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${success ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : `–û–®–ò–ë–ö–ê (${error})`}`);
    });
    
    console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã`);
    
    if (successCount === totalCount) {
      console.log('\nüéâ –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 251 –∏ 255 —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã');
      console.log('‚úÖ –ö–∞–∂–¥–æ–º—É –∑–∞—á–∏—Å–ª–µ–Ω –¥–µ–ø–æ–∑–∏—Ç 2 TON –≤ farming —Å–∏—Å—Ç–µ–º—É');
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('‚úÖ –ë—É—Å—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
      for (const userId of [251, 255]) {
        const { data: finalUser } = await supabase
          .from('users')
          .select('ton_boost_active, ton_boost_package, balance_ton, balance_uni')
          .eq('id', userId)
          .single();
          
        const { data: farmingData } = await supabase
          .from('ton_farming_data')
          .select('farming_balance, boost_active')
          .eq('user_id', userId.toString())
          .single();
          
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:`);
        console.log(`   - Boost –∞–∫—Ç–∏–≤–µ–Ω: ${finalUser?.ton_boost_active}`);
        console.log(`   - –ü–∞–∫–µ—Ç ID: ${finalUser?.ton_boost_package}`);
        console.log(`   - TON –±–∞–ª–∞–Ω—Å: ${finalUser?.balance_ton}`);
        console.log(`   - UNI –±–∞–ª–∞–Ω—Å: ${finalUser?.balance_uni}`);
        console.log(`   - Farming –±–∞–ª–∞–Ω—Å: ${farmingData?.farming_balance}`);
        console.log(`   - Farming –∞–∫—Ç–∏–≤–µ–Ω: ${farmingData?.boost_active}`);
      }
      
    } else {
      console.log('\n‚ö†Ô∏è –ù–ï –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –£–î–ê–õ–ò–°–¨');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
  }
}

main().catch(console.error);