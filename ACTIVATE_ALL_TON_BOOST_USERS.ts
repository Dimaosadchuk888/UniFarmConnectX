#!/usr/bin/env tsx

/**
 * üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST –ü–û–ö–£–ü–ö–ê–ú–ò
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –æ—à–∏–±–∫—É - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ–ª–∞–≥ ton_boost_active –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function activateAllBoostUsers() {
  console.log('üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –í–°–ï–• TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('=' .repeat(45));
  
  try {
    // 1. –ù–ê–•–û–î–ò–ú –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ü–û–ö–£–ü–ö–ê–ú–ò
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–æ–∫—É–ø–∫–∞–º–∏...');
    
    const { data: boostPurchases } = await supabase
      .from('transactions')
      .select('user_id')
      .eq('type', 'BOOST_PURCHASE')
      .eq('status', 'completed');

    if (!boostPurchases || boostPurchases.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      return;
    }

    const uniqueUserIds = [...new Set(boostPurchases.map(tx => parseInt(tx.user_id)))];
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${uniqueUserIds.length}`);
    console.log(`IDs: ${uniqueUserIds.join(', ')}`);

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...');
    
    const { data: currentStatus } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_package, ton_boost_rate')
      .in('id', uniqueUserIds)
      .order('id');

    const inactiveUsers = currentStatus?.filter(user => !user.ton_boost_active) || [];
    const activeUsers = currentStatus?.filter(user => user.ton_boost_active) || [];

    console.log(`‚úÖ –£–∂–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}`);
    console.log(`‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${inactiveUsers.length}`);

    if (inactiveUsers.length === 0) {
      console.log('\nüéâ –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –£–ñ–ï –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´!');
      return { success: true, activated: 0, alreadyActive: activeUsers.length };
    }

    // 3. –ê–ö–¢–ò–í–ò–†–£–ï–ú –ù–ï–ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\n3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const inactiveUserIds = inactiveUsers.map(user => user.id);
    console.log(`–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º: ${inactiveUserIds.join(', ')}`);

    const { data: updateResult, error: updateError } = await supabase
      .from('users')
      .update({ 
        ton_boost_active: true,
        updated_at: new Date().toISOString()
      })
      .in('id', inactiveUserIds)
      .select('id, username, ton_boost_active');

    if (updateError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò:', updateError.message);
      throw updateError;
    }

    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...');
    
    console.log(`\n‚úÖ –£–°–ü–ï–®–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û: ${updateResult?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    updateResult?.forEach(user => {
      console.log(`   - User ${user.id} (@${user.username}): Active = ${user.ton_boost_active}`);
    });

    // 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
    console.log('\n5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    
    const { data: schedulerReady } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_package, ton_boost_rate')
      .in('id', uniqueUserIds)
      .eq('ton_boost_active', true)
      .not('ton_boost_package', 'is', null)
      .order('id');

    console.log(`\nüìà –ì–û–¢–û–í–û –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê: ${schedulerReady?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    schedulerReady?.forEach(user => {
      console.log(`   - User ${user.id}: Package ${user.ton_boost_package}, Rate ${user.ton_boost_rate}`);
    });

    return {
      success: true,
      total_users: uniqueUserIds.length,
      activated: updateResult?.length || 0,
      already_active: activeUsers.length,
      ready_for_scheduler: schedulerReady?.length || 0
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ô –û–®–ò–ë–ö–ò TON BOOST –ê–ö–¢–ò–í–ê–¶–ò–ò\n');
    
    const result = await activateAllBoostUsers();
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ö–¢–ò–í–ê–¶–ò–ò:');
    console.log('=' .repeat(30));
    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${result.total_users}`);
    console.log(`üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–π—á–∞—Å: ${result.activated}`);
    console.log(`‚úÖ –£–∂–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ: ${result.already_active}`);
    console.log(`üìà –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${result.ready_for_scheduler}`);
    
    if (result.activated > 0) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
      console.log('   –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥—ã –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
      console.log('   –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    } else {
      console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();