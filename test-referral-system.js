/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
 */

import { generateRefCode, generateUniqueRefCode, validateRefCode, cleanRefCode } from './server/utils/refCodeUtils.js';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤...\n');

// –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–¥–∞
console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–¥–∞:');
for (let i = 0; i < 5; i++) {
  const code = generateRefCode();
  console.log(`   –ö–æ–¥ ${i + 1}: ${code} (–¥–ª–∏–Ω–∞: ${code.length})`);
}

// –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–æ–≤
console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–æ–≤:');
const testCodes = [
  'AB3CD4EF', // –≤–∞–ª–∏–¥–Ω—ã–π
  'abcd1234', // –≤–∞–ª–∏–¥–Ω—ã–π
  'AB3CD4E',  // –∫–æ—Ä–æ—Ç–∫–∏–π
  'AB3CD4EFG', // –¥–ª–∏–Ω–Ω—ã–π
  'AB3CD4O0',  // —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã O, 0
  'AB3CD4I1',  // —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã I, 1
  '',          // –ø—É—Å—Ç–æ–π
  null,        // null
];

testCodes.forEach(code => {
  const isValid = validateRefCode(code);
  console.log(`   "${code}" -> ${isValid ? '‚úÖ –≤–∞–ª–∏–¥–Ω—ã–π' : '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'}`);
});

// –¢–µ—Å—Ç 3: –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–æ–≤
console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–æ–≤ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤:');
const codeWithPrefix = [
  'ref_AB3CD4EF',
  'AB3CD4EF',
  'ref_',
  '',
];

codeWithPrefix.forEach(code => {
  const cleaned = cleanRefCode(code);
  console.log(`   "${code}" -> "${cleaned}"`);
});

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—É—Ç–∞—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—É—Ç–∞—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤:');
let hasConfusingChars = false;
const confusingChars = ['0', 'O', '1', 'I', 'l'];

for (let i = 0; i < 100; i++) {
  const code = generateRefCode();
  for (const char of confusingChars) {
    if (code.includes(char)) {
      console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω –ø—É—Ç–∞—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª "${char}" –≤ –∫–æ–¥–µ: ${code}`);
      hasConfusingChars = true;
    }
  }
}

if (!hasConfusingChars) {
  console.log('   ‚úÖ –ü—É—Ç–∞—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ 100 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–∞—Ö');
}

// –¢–µ—Å—Ç 5: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤
console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤:');
const generatedCodes = new Set();
let duplicateFound = false;

for (let i = 0; i < 1000; i++) {
  const code = generateRefCode();
  if (generatedCodes.has(code)) {
    console.log(`   ‚ùå –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${code}`);
    duplicateFound = true;
    break;
  }
  generatedCodes.add(code);
}

if (!duplicateFound) {
  console.log(`   ‚úÖ –í—Å–µ 1000 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã`);
}

console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`);
console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${generatedCodes.size}`);
console.log(`   - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞: 8 —Å–∏–º–≤–æ–ª–æ–≤`);
console.log(`   - –ê–ª—Ñ–∞–≤–∏—Ç: 54 —Å–∏–º–≤–æ–ª–∞ (–±–µ–∑ 0, O, 1, I, l)`);
console.log(`   - –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: 54^8 = ${Math.pow(54, 8).toLocaleString()}`);

console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');