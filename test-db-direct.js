#!/usr/bin/env node
/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase PostgreSQL
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π SQL —á–µ—Ä–µ–∑ pg –±–∏–±–ª–∏–æ—Ç–µ–∫—É
 */

import pg from 'pg';
const { Client } = pg;

async function testDirectConnection() {
  console.log('üîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
  
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return false;
  }
  
  console.log('DATABASE_URL –¥–ª–∏–Ω–∞:', process.env.DATABASE_URL.length);
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });
  
  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π SQL-–∑–∞–ø—Ä–æ—Å
    const result = await client.query(`
      SELECT current_database(), current_schema(), inet_server_addr();
    `);
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
    console.log('  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', result.rows[0].current_database);
    console.log('  –°—Ö–µ–º–∞:', result.rows[0].current_schema);
    console.log('  IP —Å–µ—Ä–≤–µ—Ä–∞:', result.rows[0].inet_server_addr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);
    
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    if (tablesResult.rows.length === 0) {
      console.log('  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ public');
    } else {
      tablesResult.rows.forEach(row => {
        console.log('  -', row.table_name);
      });
    }
    
    await client.end();
    console.log('üéâ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    if (error.code) {
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    }
    await client.end().catch(() => {});
    return false;
  }
}

testDirectConnection()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });