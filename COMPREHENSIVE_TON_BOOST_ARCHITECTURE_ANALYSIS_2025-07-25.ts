/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ TON BOOST - 25 –∏—é–ª—è 2025
 * –ü–æ–ª–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
 * 
 * –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ê–î–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã TON Boost
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function analyzeTonBoostArchitecture() {
    console.log('\nüîß –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ TON BOOST');
    console.log('=' .repeat(70));
    
    try {
        // ========================================
        // –†–ê–ó–î–ï–õ 1: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶
        // ========================================
        console.log('\nüìä –†–ê–ó–î–ï–õ 1: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶');
        console.log('-' .repeat(60));
        
        // 1.1 –¢–∞–±–ª–∏—Ü–∞ users - Boost –ø–æ–ª—è
        console.log('\nüë§ 1.1 –¢–ê–ë–õ–ò–¶–ê USERS - BOOST –ü–û–õ–Ø:');
        const { data: usersSchema, error: usersError } = await supabase
            .from('users')
            .select('*')
            .limit(1)
            .single();
            
        if (usersSchema) {
            const boostFields = Object.keys(usersSchema).filter(key => 
                key.includes('boost') || key.includes('ton_')
            );
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ Boost/TON –ø–æ–ª—è –≤ users:');
            boostFields.forEach(field => {
                console.log(`   - ${field}: ${typeof usersSchema[field]} = ${usersSchema[field]}`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö
            const expectedFields = ['boost_package_level', 'ton_boost_package', 'ton_boost_rate', 'ton_balance', 'balance_ton'];
            console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π:');
            expectedFields.forEach(field => {
                if (boostFields.includes(field)) {
                    console.log(`   ‚úÖ ${field} - –°–£–©–ï–°–¢–í–£–ï–¢`);
                } else {
                    console.log(`   ‚ùå ${field} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
            });
        }
        
        // 1.2 –¢–∞–±–ª–∏—Ü–∞ transactions - Boost –∑–∞–ø–∏—Å–∏
        console.log('\nüí≥ 1.2 –¢–ê–ë–õ–ò–¶–ê TRANSACTIONS - BOOST –ó–ê–ü–ò–°–ò:');
        const { data: transactionSchema, error: transError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .limit(1)
            .single();
            
        if (transactionSchema) {
            console.log('‚úÖ –ü–æ–ª—è –≤ transactions –¥–ª—è BOOST_PURCHASE:');
            Object.keys(transactionSchema).forEach(field => {
                const value = transactionSchema[field];
                console.log(`   - ${field}: ${typeof value} = ${value}`);
            });
            
            // –ê–Ω–∞–ª–∏–∑ metadata
            if (transactionSchema.metadata) {
                console.log('\nüîó –°—Ç—Ä—É–∫—Ç—É—Ä–∞ metadata:');
                Object.keys(transactionSchema.metadata).forEach(key => {
                    console.log(`   - metadata.${key}: ${transactionSchema.metadata[key]}`);
                });
            }
        }
        
        // 1.3 –¢–∞–±–ª–∏—Ü–∞ user_boost_package (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        console.log('\nüì¶ 1.3 –¢–ê–ë–õ–ò–¶–ê USER_BOOST_PACKAGE:');
        try {
            const { data: boostPackageData, error: boostPackageError } = await supabase
                .from('user_boost_package')
                .select('*')
                .limit(1);
                
            if (boostPackageError) {
                console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê USER_BOOST_PACKAGE –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢');
                console.log(`   –û—à–∏–±–∫–∞: ${boostPackageError.message}`);
            } else {
                console.log('‚úÖ –¢–ê–ë–õ–ò–¶–ê USER_BOOST_PACKAGE –ù–ê–ô–î–ï–ù–ê');
                if (boostPackageData && boostPackageData.length > 0) {
                    console.log('‚úÖ –ü–æ–ª—è –≤ user_boost_package:');
                    Object.keys(boostPackageData[0]).forEach(field => {
                        console.log(`   - ${field}: ${typeof boostPackageData[0][field]}`);
                    });
                } else {
                    console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–∞—è');
                }
            }
        } catch (error) {
            console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê USER_BOOST_PACKAGE –ù–ï–î–û–°–¢–£–ü–ù–ê');
        }
        
        // 1.4 –¢–∞–±–ª–∏—Ü–∞ ton_farming_data
        console.log('\nüöú 1.4 –¢–ê–ë–õ–ò–¶–ê TON_FARMING_DATA:');
        const { data: farmingSchema, error: farmingError } = await supabase
            .from('ton_farming_data')
            .select('*')
            .limit(1)
            .single();
            
        if (farmingSchema) {
            console.log('‚úÖ –ü–æ–ª—è –≤ ton_farming_data:');
            Object.keys(farmingSchema).forEach(field => {
                const value = farmingSchema[field];
                console.log(`   - ${field}: ${typeof value} = ${value}`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
            const expectedFarmingFields = ['user_id', 'amount', 'source', 'is_active', 'start_time', 'package_level'];
            console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π:');
            expectedFarmingFields.forEach(field => {
                if (Object.keys(farmingSchema).includes(field)) {
                    console.log(`   ‚úÖ ${field} - –°–£–©–ï–°–¢–í–£–ï–¢`);
                } else {
                    console.log(`   ‚ùå ${field} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
            });
        }
        
        // ========================================
        // –†–ê–ó–î–ï–õ 2: –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–•
        // ========================================
        console.log('\nüìä –†–ê–ó–î–ï–õ 2: –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–• –ü–û–ö–£–ü–ö–ò');
        console.log('-' .repeat(60));
        
        // 2.1 –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –ø–æ—Ç–æ–∫
        const { data: latestPurchase, error: purchaseError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
            
        if (latestPurchase) {
            console.log(`\nüí∞ –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ö–£–ü–ö–ê (ID: ${latestPurchase.id}):`);
            console.log(`   üë§ User ID: ${latestPurchase.user_id}`);
            console.log(`   üìÖ –í—Ä–µ–º—è: ${new Date(latestPurchase.created_at).toLocaleString('ru-RU')}`);
            console.log(`   üí∏ –°—É–º–º–∞: ${latestPurchase.amount} ${latestPurchase.currency}`);
            console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${latestPurchase.description}`);
            
            const userId = latestPurchase.user_id;
            
            // 2.2 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('\nüë§ 2.2 –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û–°–õ–ï –ü–û–ö–£–ü–ö–ò:');
            const { data: userState, error: userStateError } = await supabase
                .from('users')
                .select('*')
                .eq('id', userId)
                .single();
                
            if (userState) {
                const boostRelatedFields = Object.keys(userState).filter(key => 
                    key.includes('boost') || key.includes('ton_')
                );
                boostRelatedFields.forEach(field => {
                    console.log(`   - ${field}: ${userState[field]}`);
                });
            }
            
            // 2.3 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ farming –∑–∞–ø–∏—Å–∏
            console.log('\nüöú 2.3 –°–û–°–¢–û–Ø–ù–ò–ï FARMING –î–ê–ù–ù–´–•:');
            const { data: farmingState, error: farmingStateError } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', userId.toString())
                .single();
                
            if (farmingStateError) {
                console.log('‚ùå FARMING –ó–ê–ü–ò–°–¨ –û–¢–°–£–¢–°–¢–í–£–ï–¢!');
                console.log(`   –û—à–∏–±–∫–∞: ${farmingStateError.message}`);
                console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∫—É–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ farming –¥–µ–ø–æ–∑–∏—Ç!');
            } else {
                console.log('‚úÖ FARMING –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:');
                Object.keys(farmingState).forEach(field => {
                    console.log(`   - ${field}: ${farmingState[field]}`);
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å
                const purchaseTime = new Date(latestPurchase.created_at).getTime();
                const farmingTime = new Date(farmingState.created_at).getTime();
                const timeDiff = Math.abs(purchaseTime - farmingTime) / 1000 / 60;
                console.log(`   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${timeDiff.toFixed(2)} –º–∏–Ω—É—Ç`);
            }
        }
        
        // ========================================
        // –†–ê–ó–î–ï–õ 3: –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        // ========================================
        console.log('\nüìä –†–ê–ó–î–ï–õ 3: –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô TON BOOST');
        console.log('-' .repeat(60));
        
        // 3.1 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ Boost –ø–∞–∫–µ—Ç–∞–º–∏
        const { data: activeBoostUsers, error: activeError } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_rate, balance_ton, created_at')
            .gt('ton_boost_package', 0);
            
        console.log(`\nüë• 3.1 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ê–ö–¢–ò–í–ù–´–ú–ò BOOST –ü–ê–ö–ï–¢–ê–ú–ò: ${activeBoostUsers?.length || 0}`);
        
        if (activeBoostUsers && activeBoostUsers.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for (let i = 0; i < Math.min(5, activeBoostUsers.length); i++) {
                const user = activeBoostUsers[i];
                console.log(`\n   üë§ User ${user.id}:`);
                console.log(`      Package: ${user.ton_boost_package}, Rate: ${user.ton_boost_rate}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ farming –∑–∞–ø–∏—Å–∏
                const { data: userFarming } = await supabase
                    .from('ton_farming_data')
                    .select('farming_balance, boost_active, created_at')
                    .eq('user_id', user.id.toString())
                    .single();
                    
                if (userFarming) {
                    console.log(`      ‚úÖ Farming: Balance ${userFarming.farming_balance}, Active: ${userFarming.boost_active}`);
                } else {
                    console.log(`      ‚ùå FARMING –ó–ê–ü–ò–°–¨ –û–¢–°–£–¢–°–¢–í–£–ï–¢!`);
                }
            }
        }
        
        // 3.2 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        console.log('\nüìà 3.2 –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:');
        const totalBoostUsers = activeBoostUsers?.length || 0;
        
        let farmingRecordsCount = 0;
        if (totalBoostUsers > 0) {
            for (const user of activeBoostUsers) {
                const { data: farmingCheck } = await supabase
                    .from('ton_farming_data')
                    .select('id')
                    .eq('user_id', user.id.toString())
                    .single();
                    
                if (farmingCheck) {
                    farmingRecordsCount++;
                }
            }
        }
        
        const matchPercentage = totalBoostUsers > 0 ? ((farmingRecordsCount / totalBoostUsers) * 100).toFixed(1) : '0';
        
        console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ Boost: ${totalBoostUsers}`);
        console.log(`   üöú –° farming –∑–∞–ø–∏—Å—è–º–∏: ${farmingRecordsCount}`);
        console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${matchPercentage}%`);
        
        if (farmingRecordsCount < totalBoostUsers) {
            const missingRecords = totalBoostUsers - farmingRecordsCount;
            console.log(`   üö® –û–¢–°–£–¢–°–¢–í–£–ï–¢ ${missingRecords} farming –∑–∞–ø–∏—Å–µ–π!`);
        }
        
        // ========================================
        // –†–ê–ó–î–ï–õ 4: –ê–ù–ê–õ–ò–ó –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô
        // ========================================
        console.log('\nüìä –†–ê–ó–î–ï–õ 4: –ê–ù–ê–õ–ò–ó –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô –ò –ü–†–û–ë–õ–ï–ú');
        console.log('-' .repeat(60));
        
        console.log('\nüîç 4.1 –í–´–Ø–í–õ–ï–ù–ù–´–ï –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
        const missingFieldsInUsers = [];
        const expectedUserFields = ['boost_package_level'];
        if (usersSchema) {
            expectedUserFields.forEach(field => {
                if (!Object.keys(usersSchema).includes(field)) {
                    missingFieldsInUsers.push(field);
                }
            });
        }
        
        if (missingFieldsInUsers.length > 0) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ users:');
            missingFieldsInUsers.forEach(field => {
                console.log(`   - ${field}`);
            });
        } else {
            console.log('‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –≤ users –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ ton_farming_data
        if (farmingSchema) {
            console.log('\nüîç 4.2 –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–• TON_FARMING_DATA:');
            console.log(`   - user_id: ${typeof farmingSchema.user_id} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: string)`);
            console.log(`   - farming_balance: ${typeof farmingSchema.farming_balance} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: number)`);
            console.log(`   - boost_active: ${typeof farmingSchema.boost_active} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: boolean)`);
            
            if (typeof farmingSchema.user_id !== 'string') {
                console.log('‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: user_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è string');
            }
        }
        
        // ========================================
        // –†–ê–ó–î–ï–õ 5: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ
        // ========================================
        console.log('\nüìä –†–ê–ó–î–ï–õ 5: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ');
        console.log('-' .repeat(60));
        
        console.log('\nüí° 5.1 –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
        
        if (farmingRecordsCount < totalBoostUsers) {
            console.log('üîß 1. –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• FARMING –ó–ê–ü–ò–°–ï–ô:');
            console.log('   - –°–æ–∑–¥–∞—Ç—å ton_farming_data –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ Boost');
            console.log('   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ users.ton_boost_package –∏ users.ton_boost_rate');
        }
        
        console.log('\nüîß 2. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í:');
        console.log('   - –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ activateBoost() –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ farming –∑–∞–ø–∏—Å–∏');
        console.log('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        
        console.log('\nüîß 3. –ú–û–ù–ò–¢–û–†–ò–ù–ì –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:');
        console.log('   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ users.ton_boost_package <-> ton_farming_data');
        console.log('   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeTonBoostArchitecture().then(() => {
    console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã TON Boost –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});