/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ JWT
 */

const fetch = require('node-fetch');

async function getUserData() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API...');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    const response = await fetch('http://localhost:3000/api/v2/users/profile', {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer test',
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.success && data.data && data.data.user) {
      const user = data.data.user;
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:');
      console.log(`  ID: ${user.id}`);
      console.log(`  telegram_id: ${user.telegram_id}`);
      console.log(`  username: ${user.username}`);
      console.log(`  ref_code: ${user.ref_code}`);
      console.log(`  balance_uni: ${user.balance_uni}`);
      console.log(`  balance_ton: ${user.balance_ton}`);
      
      // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
      const jwt = require('jsonwebtoken');
      const tokenPayload = {
        userId: user.id,
        telegram_id: user.telegram_id,
        username: user.username,
        first_name: user.first_name || 'Demo User',
        ref_code: user.ref_code,
        iat: Math.floor(Date.now() / 1000),
        exp: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60) // 7 –¥–Ω–µ–π
      };
      
      const token = jwt.sign(tokenPayload, process.env.JWT_SECRET || 'fallback_secret');
      
      console.log('\nüîë JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:');
      console.log(`Bearer ${token}`);
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è client/index.html
      const htmlUpdateCode = `
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.clear();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}
      const productionJWT = '${token}';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      localStorage.setItem('telegramJWT', productionJWT);
      console.log('[Production Setup] JWT —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id=${user.id}');
      console.log('[Production Setup] –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞ –æ—á–∏—â–µ–Ω—ã');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (!window.location.search.includes('reloaded=1')) {
        window.location.href = window.location.href + '?reloaded=1';
      }`;
      
      console.log('\nüìù –ö–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è client/index.html:');
      console.log(htmlUpdateCode);
      
      return {
        user,
        token,
        htmlCode: htmlUpdateCode
      };
      
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('Response:', data);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
getUserData().then(result => {
  if (result) {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  }
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
});