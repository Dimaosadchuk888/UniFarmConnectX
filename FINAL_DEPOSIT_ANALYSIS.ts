#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabase = createClient(
  process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!,
  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!
);

console.log('\nüíé –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –ì–î–ï –°–û–ó–î–ê–Æ–¢–°–Ø DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ò');
console.log('='.repeat(70));

async function analyzeDepositCreation() {
  try {
    // 1. –ù–∞–π–¥–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: allDeposits, error: depositError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, description, metadata, created_at')
      .eq('type', 'DEPOSIT')
      .gt('amount_ton', 0.01)
      .order('created_at', { ascending: false })
      .limit(50);

    if (!depositError && allDeposits) {
      console.log(`\n1Ô∏è‚É£ –ù–ê–ô–î–ï–ù–û ${allDeposits.length} DEPOSIT –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
      console.log('-'.repeat(50));
      
      let withUnifiedService = 0;
      let withoutUnifiedService = 0;
      let withTxHash = 0;
      
      console.log('üìä –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø:');
      allDeposits.forEach((tx, index) => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        const hasOriginalType = !!metadata.original_type;
        const hasTxHash = !!metadata.tx_hash;
        const hasSource = !!metadata.source;
        
        if (hasOriginalType || hasSource) withUnifiedService++;
        else withoutUnifiedService++;
        
        if (hasTxHash) withTxHash++;
        
        if (index < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
          console.log(`\n   #${index + 1} ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON`);
          console.log(`       –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
          console.log(`       –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
          console.log(`       Original_type: ${metadata.original_type || '–ù–µ—Ç'}`);
          console.log(`       Source: ${metadata.source || '–ù–µ—Ç'}`);
          console.log(`       TX_Hash: ${hasTxHash ? metadata.tx_hash.substring(0, 20) + '...' : '–ù–µ—Ç'}`);
          console.log(`       üîç –ò—Å—Ç–æ—á–Ω–∏–∫: ${hasOriginalType || hasSource ? 'UnifiedTransactionService' : '–ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –ë–î'}`);
        }
      });
      
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í:`);
      console.log(`   üîß –ß–µ—Ä–µ–∑ UnifiedTransactionService: ${withUnifiedService}`);
      console.log(`   üìù –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –ë–î: ${withoutUnifiedService}`);
      console.log(`   üîó –° TX Hash: ${withTxHash}`);
      console.log(`   üìÖ –ë–µ–∑ TX Hash: ${allDeposits.length - withTxHash}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –≥–¥–µ –≤ –∫–æ–¥–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è DEPOSIT –Ω–∞–ø—Ä—è–º—É—é
      console.log(`\nüí° –ê–ù–ê–õ–ò–ó:`);
      if (withoutUnifiedService > withUnifiedService) {
        console.log('   ‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û DEPOSIT —Å–æ–∑–¥–∞–Ω—ã –ù–ê–ü–†–Ø–ú–£–Æ –≤ –ë–î');
        console.log('   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:');
        console.log('      - –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è WalletService –±–µ–∑ UnifiedTransactionService');
        console.log('      - –ü—Ä—è–º—ã–µ SQL –≤—Å—Ç–∞–≤–∫–∏');
        console.log('      - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö');
        console.log('      - –î—Ä—É–≥–æ–π API endpoint');
      } else {
        console.log('   ‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û DEPOSIT —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ UnifiedTransactionService');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é WalletService
    console.log(`\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ô –õ–û–ì–ò–ö–ò WALLETSERVICE:`);
    console.log('-'.repeat(50));
    
    console.log('üìã –¢–ï–ö–£–©–ò–ô –ö–û–î (modules/wallet/service.ts):');
    console.log(`   ‚úÖ processTonDeposit() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedTransactionService`);
    console.log(`   ‚úÖ –¢–∏–ø: 'TON_DEPOSIT' ‚Üí UnifiedTransactionService`);
    console.log(`   ‚úÖ –ú–∞–ø–ø–∏–Ω–≥: 'TON_DEPOSIT' ‚Üí 'FARMING_REWARD'`);
    console.log(`   ‚ùì –ù–æ —Ä–µ–∞–ª—å–Ω—ã–µ DEPOSIT –≤ –ë–î –∏–º–µ—é—Ç —Ç–∏–ø 'DEPOSIT'`);

    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º User #25 –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
    console.log(`\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó USER #25 (–ò–°–ß–ï–ó–ê–Æ–©–ò–ï –î–ï–ü–û–ó–ò–¢–´):`);
    console.log('-'.repeat(50));
    
    const { data: user25Deposits, error: user25Error } = await supabase
      .from('transactions')
      .select('id, type, amount_ton, description, metadata, created_at')
      .eq('user_id', 25)
      .in('type', ['DEPOSIT', 'FARMING_REWARD'])
      .gt('amount_ton', 0.01)
      .order('created_at', { ascending: false })
      .limit(20);

    if (!user25Error && user25Deposits) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${user25Deposits.length} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è User #25:`);
      
      const deposits = user25Deposits.filter(tx => tx.type === 'DEPOSIT');
      const farmingRewards = user25Deposits.filter(tx => tx.type === 'FARMING_REWARD');
      
      console.log(`   üì• DEPOSIT: ${deposits.length}`);
      console.log(`   üåæ FARMING_REWARD: ${farmingRewards.length}`);
      
      deposits.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        console.log(`\n   üíé DEPOSIT ID: ${tx.id}, Amount: ${tx.amount_ton} TON`);
        console.log(`      –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        console.log(`      TX_Hash: ${metadata.tx_hash?.substring(0, 30)}...`);
        console.log(`      Source: ${metadata.source || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      });
      
      // –ù–∞–π–¥–µ–º TON boost –¥–æ—Ö–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const tonBoostRewards = farmingRewards.filter(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        return metadata.original_type === 'TON_BOOST_INCOME';
      });
      
      console.log(`\n   üöÄ TON Boost –¥–æ—Ö–æ–¥—ã: ${tonBoostRewards.length}`);
      if (tonBoostRewards.length > 0) {
        const latestBoost = tonBoostRewards[0];
        const metadata = typeof latestBoost.metadata === 'string' ? JSON.parse(latestBoost.metadata || '{}') : (latestBoost.metadata || {});
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${latestBoost.amount_ton} TON (${new Date(latestBoost.created_at).toLocaleString('ru-RU')})`);
        console.log(`      Daily_rate: ${metadata.daily_rate}, Deposit: ${metadata.user_deposit}`);
      }
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log(`\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:`);
    console.log('-'.repeat(50));
    console.log('üéØ –ü–†–û–ë–õ–ï–ú–ê –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ê:');
    console.log('   1. –¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç TON_DEPOSIT ‚Üí FARMING_REWARD');
    console.log('   2. –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –≤ –ë–î –∏–º–µ—é—Ç —Ç–∏–ø DEPOSIT');
    console.log('   3. WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è FARMING_REWARD, –Ω–æ –ù–ï –¥–ª—è DEPOSIT');
    console.log('   4. –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DEPOSIT –Ω–∞–ø—Ä—è–º—É—é');
    
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï:');
    console.log('   üìã –í–ê–†–ò–ê–ù–¢ 1 (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø): –î–æ–±–∞–≤–∏—Ç—å DEPOSIT –≤ WebSocket');
    console.log('      - –î–æ–±–∞–≤–∏—Ç—å DEPOSIT –≤ shouldUpdateBalance()');
    console.log('      - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
    console.log('      - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    
    console.log('\n   üìã –í–ê–†–ò–ê–ù–¢ 2: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è DEPOSIT');
    console.log('      - –ù–∞–π—Ç–∏ –≥–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é');
    console.log('      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ UnifiedTransactionService');
    console.log('      - –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π, –Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeDepositCreation();
