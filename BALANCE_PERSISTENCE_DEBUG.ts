#!/usr/bin/env tsx

/**
 * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í
 * 
 * –ò—Å—Å–ª–µ–¥—É–µ–º –ø–æ—á–µ–º—É –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–∫–∞—Ç—ã–≤–∞—é—Ç—Å—è
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function balancePersistenceDebug() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í');
  console.log('=' .repeat(60));
  
  try {
    const userIds = [251, 255];
    
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –°–•–ï–ú–£ –¢–ê–ë–õ–ò–¶–´ USERS
    console.log('1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã users...');
    
    const { data: schema, error: schemaError } = await supabase
      .rpc('get_table_schema', { table_name: 'users' });
    
    if (schemaError) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    } else if (schema) {
      console.log('‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞:', schema);
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´ –° –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò
    console.log('\n2Ô∏è‚É£ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...');
    
    const { data: detailedUsers, error: detailError } = await supabase
      .from('users')
      .select('*')
      .in('id', userIds);

    if (detailError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ï–¢–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:', detailError.message);
      return;
    }

    console.log('\nüìä –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–•:');
    detailedUsers?.forEach(user => {
      console.log(`\nUser ${user.id} (@${user.username}):`);
      console.log(`   Balance TON: ${user.balance_ton}`);
      console.log(`   Balance UNI: ${user.balance_uni}`);
      console.log(`   Created: ${user.created_at}`);
      console.log(`   Last active: ${user.last_active || 'N/A'}`);
      console.log(`   Referrer: ${user.referrer_id || 'N/A'}`);
      console.log(`   Status: ${user.status || 'N/A'}`);
    });

    // 3. –ò–©–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–¶–ï–°–°–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í
    console.log('\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
    const { data: triggers, error: triggerError } = await supabase
      .rpc('get_table_triggers', { table_name: 'users' });
    
    if (triggerError) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã');
    } else if (triggers) {
      console.log('üîß –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ users:', triggers);
    }

    // 4. –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...');
    
    const testUserId = 251;
    const testUser = detailedUsers?.find(u => u.id === testUserId);
    
    if (testUser) {
      const originalBalance = Number(testUser.balance_ton);
      const testAmount = 0.1; // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
      const targetBalance = originalBalance + testAmount;
      
      console.log(`\nüß™ –¢–ï–°–¢ –Ω–∞ User ${testUserId}:`);
      console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${originalBalance} TON`);
      console.log(`   –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞: +${testAmount} TON`);
      console.log(`   –¶–µ–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å: ${targetBalance} TON`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º
      const { error: updateError } = await supabase
        .from('users')
        .update({ balance_ton: targetBalance })
        .eq('id', testUserId);

      if (updateError) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø:', updateError.message);
      } else {
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const { data: updatedUser, error: checkError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', testUserId)
          .single();

        if (checkError) {
          console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', checkError.message);
        } else {
          const newBalance = Number(updatedUser.balance_ton);
          console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:`);
          console.log(`   –û–∂–∏–¥–∞–ª–∏: ${targetBalance} TON`);
          console.log(`   –ü–æ–ª—É—á–∏–ª–∏: ${newBalance} TON`);
          
          if (Math.abs(newBalance - targetBalance) < 0.0001) {
            console.log('‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù - –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
          } else if (Math.abs(newBalance - originalBalance) < 0.0001) {
            console.log('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù - –±–∞–ª–∞–Ω—Å –æ—Ç–∫–∞—Ç–∏–ª—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É');
            console.log('üîç –ü–†–ò–ß–ò–ù–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã');
          } else {
            console.log('‚ö†Ô∏è  –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ï–ù - –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É');
          }
        }
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const { error: rollbackError } = await supabase
          .from('users')
          .update({ balance_ton: originalBalance })
          .eq('id', testUserId);
        
        if (!rollbackError) {
          console.log('üîÑ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—á–µ–Ω–æ');
        }
      }
    }

    // 5. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ò–°–¢–û–†–ò–Æ –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–û–í
    console.log('\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    // –°–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: recentTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', userIds.map(id => id.toString()))
      .order('created_at', { ascending: false })
      .limit(20);

    if (txError) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } else {
      console.log('\nüìã –ù–ï–î–ê–í–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      recentTransactions?.forEach(tx => {
        const date = new Date(tx.created_at).toLocaleString('ru-RU');
        console.log(`User ${tx.user_id}: ${tx.amount} ${tx.currency} (${tx.type}) - ${date}`);
      });
    }

    // 6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('‚îÅ'.repeat(60));
    
    console.log('üîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–¢–ö–ê–¢–û–í:');
    console.log('1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('2. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    console.log('3. –¢—Ä–∏–≥–≥–µ—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–µ –±–∞–ª–∞–Ω—Å—ã');
    console.log('4. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–µ –±–∞–ª–∞–Ω—Å—ã');
    
    console.log('\nüí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ü–û–î–•–û–î–´:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤');
    console.log('2. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
    console.log('3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('4. –ù–∞–π—Ç–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤');

    return {
      success: true,
      recommendation: 'create_compensation_transactions'
    };

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await balancePersistenceDebug();
    console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();