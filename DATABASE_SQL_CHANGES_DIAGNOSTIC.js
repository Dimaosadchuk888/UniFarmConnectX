#!/usr/bin/env node

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SQL –ò–ó–ú–ï–ù–ï–ù–ò–ô –ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ë–î
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseDatabaseSQLChanges() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SQL –ò–ó–ú–ï–ù–ï–ù–ò–ô –ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ë–î');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - –ø–æ–∏—Å–∫ SQL —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  
  const currentUserId = 184;
  
  // 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ users
  console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ users');
  console.log('-'.repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã users
    const { data: userSchema, error: schemaError } = await supabase
      .rpc('get_table_schema', { table_name: 'users' })
      .single();
    
    if (schemaError && !schemaError.message.includes('function get_table_schema')) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã:', schemaError.message);
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏
    const { data: sampleUser, error: sampleError } = await supabase
      .from('users')
      .select('*')
      .eq('id', currentUserId)
      .single();
    
    if (sampleError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', sampleError.message);
    } else {
      console.log('üìä –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã users:');
      Object.keys(sampleUser).forEach(field => {
        const value = sampleUser[field];
        const type = typeof value;
        console.log(`   ${field}: ${type} = ${value}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã:', error.message);
  }

  // 2. –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø TRIGGERS
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –¢–†–ò–ì–ì–ï–†–û–í –ù–ê –¢–ê–ë–õ–ò–¶–ï users');
  console.log('-'.repeat(60));
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É
    const { data: triggers, error: triggersError } = await supabase
      .from('information_schema.triggers')
      .select('trigger_name, event_manipulation, action_timing, action_statement')
      .eq('event_object_table', 'users');
    
    if (triggersError) {
      console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞)');
      console.log('   –û—à–∏–±–∫–∞:', triggersError.message);
    } else if (triggers && triggers.length > 0) {
      console.log(`üö® –ù–ê–ô–î–ï–ù–û –¢–†–ò–ì–ì–ï–†–û–í: ${triggers.length}`);
      triggers.forEach(trigger => {
        console.log(`‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä: ${trigger.trigger_name}`);
        console.log(`  –°–æ–±—ã—Ç–∏—è: ${trigger.event_manipulation}`);
        console.log(`  –í—Ä–µ–º—è: ${trigger.action_timing}`);
        console.log(`  –î–µ–π—Å—Ç–≤–∏–µ: ${trigger.action_statement.substring(0, 100)}...`);
        console.log('  ---');
      });
    } else {
      console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ users –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
  }

  // 3. –ê–ù–ê–õ–ò–ó –ù–ï–î–ê–í–ù–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –í transactions
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ transactions');
  console.log('-'.repeat(60));
  
  const { data: sampleTransaction, error: txSampleError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', currentUserId)
    .order('created_at', { ascending: false })
    .limit(1)
    .single();
  
  if (txSampleError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txSampleError.message);
  } else {
    console.log('üìä –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions:');
    Object.keys(sampleTransaction).forEach(field => {
      const value = sampleTransaction[field];
      const type = typeof value;
      console.log(`   ${field}: ${type} = ${JSON.stringify(value).substring(0, 50)}...`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ tx_hash_unique –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    console.log('\nüîç –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–û–õ–Ø:');
    console.log(`   tx_hash_unique: ${sampleTransaction.tx_hash_unique}`);
    console.log(`   is_duplicate: ${sampleTransaction.is_duplicate}`);
    console.log(`   duplicate_of_id: ${sampleTransaction.duplicate_of_id}`);
  }

  // 4. –ü–†–û–í–ï–†–ö–ê CONSTRAINT'–æ–≤ –ò –ò–ù–î–ï–ö–°–û–í
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö UNIQUE CONSTRAINT –ù–ê tx_hash_unique');
  console.log('-'.repeat(60));
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π tx_hash_unique –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ constraint
    const testHash = `test_hash_${Date.now()}`;
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { data: firstTx, error: firstError } = await supabase
      .from('transactions')
      .insert({
        user_id: currentUserId,
        type: 'FARMING_REWARD',
        amount: '0.001',
        amount_uni: '0',
        amount_ton: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'Test transaction for constraint check',
        tx_hash_unique: testHash
      })
      .select()
      .single();
    
    if (firstError) {
      console.log('‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', firstError.message);
    } else {
      console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é
      const { data: secondTx, error: secondError } = await supabase
        .from('transactions')
        .insert({
          user_id: currentUserId,
          type: 'FARMING_REWARD',
          amount: '0.001',
          amount_uni: '0',
          amount_ton: '0.001',
          currency: 'TON',
          status: 'completed',
          description: 'Duplicate test transaction',
          tx_hash_unique: testHash
        })
        .select()
        .single();
      
      if (secondError && secondError.message.includes('duplicate')) {
        console.log('üö® CONSTRAINT –ê–ö–¢–ò–í–ï–ù! –û–±–Ω–∞—Ä—É–∂–µ–Ω unique constraint –Ω–∞ tx_hash_unique');
        console.log('   –û—à–∏–±–∫–∞:', secondError.message);
      } else if (secondError) {
        console.log('‚ÑπÔ∏è  –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞:', secondError.message);
      } else {
        console.log('‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ - constraint –ù–ï –ê–ö–¢–ò–í–ï–ù');
        
        // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç
        await supabase.from('transactions').delete().eq('id', secondTx.id);
      }
      
      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç
      await supabase.from('transactions').delete().eq('id', firstTx.id);
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ constraint:', error.message);
  }

  // 5. –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –°–ü–ò–°–ê–ù–ò–Ø
  console.log('\n5Ô∏è‚É£ –†–ï–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ü–ò–°–ê–ù–ò–Ø TON (15 —Å–µ–∫)');
  console.log('-'.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const { data: initialUser } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', currentUserId)
    .single();
  
  console.log(`üìä –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: TON=${initialUser?.balance_ton}, UNI=${initialUser?.balance_uni}`);
  
  let detectedDeductions = [];
  let previousTon = parseFloat(initialUser?.balance_ton || '0');
  let previousUni = parseFloat(initialUser?.balance_uni || '0');
  
  console.log('‚è±Ô∏è  –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è...');
  
  const monitorInterval = setInterval(async () => {
    try {
      const { data: currentUser } = await supabase
        .from('users')
        .select('balance_ton, balance_uni')
        .eq('id', currentUserId)
        .single();
      
      if (currentUser) {
        const currentTon = parseFloat(currentUser.balance_ton);
        const currentUni = parseFloat(currentUser.balance_uni);
        
        const tonDiff = currentTon - previousTon;
        const uniDiff = currentUni - previousUni;
        
        // –§–∏–∫—Å–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û —Å–ø–∏—Å–∞–Ω–∏—è (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if (tonDiff < -0.000001 || uniDiff < -1) {
          const now = new Date();
          console.log(`\nüí∏ –°–ü–ò–°–ê–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û - ${now.toLocaleString('ru-RU')}`);
          console.log(`   TON: ${previousTon.toFixed(6)} ‚Üí ${currentTon.toFixed(6)} (${tonDiff.toFixed(6)})`);
          console.log(`   UNI: ${previousUni.toFixed(6)} ‚Üí ${currentUni.toFixed(6)} (${uniDiff.toFixed(6)})`);
          
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è
          const { data: recentTx } = await supabase
            .from('transactions')
            .select('id, type, amount_ton, amount_uni, description, created_at')
            .eq('user_id', currentUserId)
            .gte('created_at', new Date(now.getTime() - 30000).toISOString())
            .order('created_at', { ascending: false });
          
          let foundExplanation = false;
          if (recentTx && recentTx.length > 0) {
            console.log(`   üìã –ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (${recentTx.length}):`);
            recentTx.forEach(tx => {
              const txTon = parseFloat(tx.amount_ton || '0');
              const txUni = parseFloat(tx.amount_uni || '0');
              console.log(`      ${tx.created_at.split('T')[1].substring(0, 8)} | ${tx.type} | TON:${txTon} UNI:${txUni}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—ä—è—Å–Ω—è–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏–µ
              if (Math.abs(txTon + tonDiff) < 0.000001 || Math.abs(txUni + uniDiff) < 1) {
                foundExplanation = true;
              }
            });
          }
          
          if (!foundExplanation) {
            console.log(`   üö® –ù–ï–¢ –û–ë–™–Ø–°–ù–Ø–Æ–©–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò - —ç—Ç–æ –ü–†–Ø–ú–û–ï UPDATE –ë–î!`);
          }
          
          detectedDeductions.push({
            timestamp: now,
            tonDeduction: -tonDiff,
            uniDeduction: -uniDiff,
            hasExplanation: foundExplanation
          });
        }
        
        previousTon = currentTon;
        previousUni = currentUni;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
    }
  }, 2000);
  
  setTimeout(() => {
    clearInterval(monitorInterval);
    
    console.log('\n6Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
    console.log('-'.repeat(60));
    console.log(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–π: ${detectedDeductions.length}`);
    
    if (detectedDeductions.length > 0) {
      const unexplainedDeductions = detectedDeductions.filter(d => !d.hasExplanation);
      console.log(`üö® –ù–µ–æ–±—ä—è—Å–Ω–∏–º—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π: ${unexplainedDeductions.length}`);
      
      console.log('\nüìã –î–ï–¢–ê–õ–ò –í–°–ï–• –°–ü–ò–°–ê–ù–ò–ô:');
      detectedDeductions.forEach((deduction, i) => {
        console.log(`${i + 1}. ${deduction.timestamp.toLocaleString('ru-RU')}`);
        console.log(`   TON —Å–ø–∏—Å–∞–Ω–æ: ${deduction.tonDeduction.toFixed(6)}`);
        console.log(`   UNI —Å–ø–∏—Å–∞–Ω–æ: ${deduction.uniDeduction.toFixed(6)}`);
        console.log(`   –ï—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: ${deduction.hasExplanation ? '–î–ê' : '–ù–ï–¢'}`);
      });
      
      if (unexplainedDeductions.length > 0) {
        console.log('\nüéØ –î–ò–ê–ì–ù–û–ó:');
        console.log('   –°–∏—Å—Ç–µ–º–∞ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        console.log('   –≠—Ç–æ –ü–†–Ø–ú–´–ï UPDATE –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ users');
        console.log('   –ò—Å—Ç–æ—á–Ω–∏–∫: BalanceManager –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
      }
    } else {
      console.log('‚ÑπÔ∏è  –ó–∞ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SQL –ò–ó–ú–ï–ù–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('='.repeat(80));
  }, 15000);
}

diagnoseDatabaseSQLChanges().catch(console.error);