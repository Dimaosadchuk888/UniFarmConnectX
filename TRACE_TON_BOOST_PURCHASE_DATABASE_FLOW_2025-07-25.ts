/**
 * –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–û–¢–û–ö–ê –ü–û–ö–£–ü–ö–ò TON BOOST –í –ë–ê–ó–ï –î–ê–ù–ù–´–• - 25 –∏—é–ª—è 2025
 * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–∞—Ö –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseAnonKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function traceTonBoostPurchaseFlow() {
    console.log('\nüîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–û–¢–û–ö–ê –ü–û–ö–£–ü–ö–ò TON BOOST –í –ë–î');
    console.log('=' .repeat(60));
    
    try {
        // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∏ –∏—Ö –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
        console.log('\nüìä –®–ê–ì 1: –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–ö–£–ü–ö–ò BOOST_PURCHASE');
        console.log('-' .repeat(50));
        
        const { data: purchases, error: purchasesError } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .order('created_at', { ascending: false })
            .limit(5);
            
        if (purchasesError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', purchasesError.message);
            return;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${purchases?.length || 0} –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ BOOST_PURCHASE`);
        
        if (!purchases || purchases.length === 0) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ TON Boost');
            return;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É
        for (let i = 0; i < Math.min(3, purchases.length); i++) {
            const purchase = purchases[i];
            console.log(`\nüí∞ –ü–û–ö–£–ü–ö–ê #${i + 1} (ID: ${purchase.id}):`);
            console.log(`   üë§ User ID: ${purchase.user_id}`);
            console.log(`   üí∏ –°—É–º–º–∞: ${purchase.amount_ton} TON`);
            console.log(`   üìÖ –í—Ä–µ–º—è: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
            console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${purchase.status}`);
            console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
            
            if (purchase.metadata) {
                console.log(`   üîó Metadata:`, purchase.metadata);
            }
            
            // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users
            console.log(`\n   üìä –û–¢–†–ê–ñ–ï–ù–ò–ï –í –¢–ê–ë–õ–ò–¶–ï USERS:`);
            const { data: userData, error: userError } = await supabase
                .from('users')
                .select('id, ton_boost_package, ton_boost_rate, balance_ton, created_at')
                .eq('id', purchase.user_id)
                .single();
                
            if (userError) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError.message}`);
            } else {
                console.log(`   ‚úÖ users.ton_boost_package: ${userData.ton_boost_package}`);
                console.log(`   ‚úÖ users.ton_boost_rate: ${userData.ton_boost_rate}`);
                console.log(`   üí∞ users.balance_ton: ${userData.balance_ton}`);
                console.log(`   üìÖ users.created_at: ${new Date(userData.created_at).toLocaleString('ru-RU')}`);
            }
            
            // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data
            console.log(`\n   üìä –û–¢–†–ê–ñ–ï–ù–ò–ï –í –¢–ê–ë–õ–ò–¶–ï TON_FARMING_DATA:`);
            const { data: farmingData, error: farmingError } = await supabase
                .from('ton_farming_data')
                .select('*')
                .eq('user_id', purchase.user_id.toString())
                .single();
                
            if (farmingError) {
                console.log(`   ‚ùå FARMING –ó–ê–ü–ò–°–¨ –û–¢–°–£–¢–°–¢–í–£–ï–¢: ${farmingError.message}`);
                console.log(`   üö® –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∫—É–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞ farming –∑–∞–ø–∏—Å—å!`);
            } else {
                console.log(`   ‚úÖ FARMING –ó–ê–ü–ò–°–¨ –ù–ê–ô–î–ï–ù–ê:`);
                console.log(`      ID: ${farmingData.id}`);
                console.log(`      Balance: ${farmingData.farming_balance} TON`);
                console.log(`      Rate: ${farmingData.farming_rate}`);
                console.log(`      Package ID: ${farmingData.boost_package_id}`);
                console.log(`      –ê–∫—Ç–∏–≤–µ–Ω: ${farmingData.boost_active}`);
                console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${new Date(farmingData.created_at).toLocaleString('ru-RU')}`);
                console.log(`      –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${new Date(farmingData.updated_at).toLocaleString('ru-RU')}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–æ–π –∏ farming –∑–∞–ø–∏—Å—å—é
                const purchaseTime = new Date(purchase.created_at).getTime();
                const farmingTime = new Date(farmingData.created_at).getTime();
                const timeDiffMinutes = Math.abs(purchaseTime - farmingTime) / 1000 / 60;
                
                console.log(`      ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${timeDiffMinutes.toFixed(2)} –º–∏–Ω—É—Ç`);
                
                if (timeDiffMinutes < 5) {
                    console.log(`      ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
                } else {
                    console.log(`      ‚ö†Ô∏è –ë–û–õ–¨–®–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê - –≤–æ–∑–º–æ–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`);
                }
            }
        }
        
        // –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö —Å–≤—è–∑–∏
        console.log('\nüìä –®–ê–ì 4: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶');
        console.log('-' .repeat(50));
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã transactions (BOOST_PURCHASE)
        console.log('\nüóÉÔ∏è –¢–ê–ë–õ–ò–¶–ê TRANSACTIONS (BOOST_PURCHASE):');
        const { data: transactionSample } = await supabase
            .from('transactions')
            .select('*')
            .eq('type', 'BOOST_PURCHASE')
            .limit(1)
            .single();
            
        if (transactionSample) {
            console.log('‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions:');
            Object.keys(transactionSample).forEach(key => {
                const value = transactionSample[key];
                const type = typeof value;
                console.log(`   - ${key}: ${type} = ${value}`);
            });
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã users (ton_boost_package)
        console.log('\nüë§ –¢–ê–ë–õ–ò–¶–ê USERS (TON BOOST –ü–û–õ–Ø):');
        const { data: userSample } = await supabase
            .from('users')
            .select('id, ton_boost_package, ton_boost_rate, balance_ton')
            .gt('ton_boost_package', 0)
            .limit(1)
            .single();
            
        if (userSample) {
            console.log('‚úÖ TON Boost –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
            console.log(`   - id: ${userSample.id}`);
            console.log(`   - ton_boost_package: ${userSample.ton_boost_package}`);
            console.log(`   - ton_boost_rate: ${userSample.ton_boost_rate}`);
            console.log(`   - balance_ton: ${userSample.balance_ton}`);
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã ton_farming_data
        console.log('\nüöú –¢–ê–ë–õ–ò–¶–ê TON_FARMING_DATA:');
        const { data: farmingSample } = await supabase
            .from('ton_farming_data')
            .select('*')
            .limit(1)
            .single();
            
        if (farmingSample) {
            console.log('‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ ton_farming_data:');
            Object.keys(farmingSample).forEach(key => {
                const value = farmingSample[key];
                const type = typeof value;
                console.log(`   - ${key}: ${type} = ${value}`);
            });
        }
        
        // –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã boost_purchases
        console.log('\nüìä –®–ê–ì 5: –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ BOOST_PURCHASES');
        console.log('-' .repeat(50));
        
        try {
            const { data: boostPurchases, error: boostError } = await supabase
                .from('boost_purchases')
                .select('*')
                .limit(1);
                
            if (boostError) {
                console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê BOOST_PURCHASES –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢');
                console.log(`   –û—à–∏–±–∫–∞: ${boostError.message}`);
                console.log('üí° –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç transactions —Ç–∞–±–ª–∏—Ü—É –≤–º–µ—Å—Ç–æ boost_purchases');
            } else {
                console.log('‚úÖ –¢–ê–ë–õ–ò–¶–ê BOOST_PURCHASES –ù–ê–ô–î–ï–ù–ê');
                console.log(`   –ó–∞–ø–∏—Å–µ–π: ${boostPurchases?.length || 0}`);
                if (boostPurchases && boostPurchases.length > 0) {
                    console.log('‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ boost_purchases:');
                    Object.keys(boostPurchases[0]).forEach(key => {
                        const value = boostPurchases[0][key];
                        const type = typeof value;
                        console.log(`   - ${key}: ${type} = ${value}`);
                    });
                }
            }
        } catch (error) {
            console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê BOOST_PURCHASES –ù–ï–î–û–°–¢–£–ü–ù–ê');
        }
        
        // –®–ê–ì 6: –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüìà –®–ê–ì 6: –ò–¢–û–ì–û–í–´–ô –ü–û–¢–û–ö –î–ê–ù–ù–´–• –ü–û–ö–£–ü–ö–ò TON BOOST');
        console.log('-' .repeat(50));
        
        console.log('üîÑ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–û–¢–û–ö–ê:');
        console.log('1. üí∞ –ü–û–ö–£–ü–ö–ê ‚Üí transactions —Ç–∞–±–ª–∏—Ü–∞ (type: BOOST_PURCHASE)');
        console.log('2. üë§ –ê–ö–¢–ò–í–ê–¶–ò–Ø ‚Üí users —Ç–∞–±–ª–∏—Ü–∞ (ton_boost_package, ton_boost_rate)');
        console.log('3. üöú –§–ê–†–ú–ò–ù–ì ‚Üí ton_farming_data —Ç–∞–±–ª–∏—Ü–∞ (farming_balance, farming_rate)');
        console.log('4. üìä –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ‚Üí –ß–∏—Ç–∞–µ—Ç ton_farming_data –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤');
        
        console.log('\nüìã –ö–õ–Æ–ß–ï–í–´–ï –¢–ê–ë–õ–ò–¶–´:');
        console.log('‚úÖ transactions - –•—Ä–∞–Ω–∏—Ç –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ (BOOST_PURCHASE)');
        console.log('‚úÖ users - –•—Ä–∞–Ω–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (ton_boost_package)');
        console.log('‚úÖ ton_farming_data - –•—Ä–∞–Ω–∏—Ç farming –±–∞–ª–∞–Ω—Å—ã –∏ —Å—Ç–∞–≤–∫–∏');
        console.log('‚ùå boost_purchases - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è)');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
traceTonBoostPurchaseFlow().then(() => {
    console.log('\n‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø–æ–∫—É–ø–∫–∏ TON Boost –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});