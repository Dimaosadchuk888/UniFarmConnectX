#!/usr/bin/env tsx

/**
 * üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò USER 251 –ò 255
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 251 –∏ 255 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 2 TON –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function checkCompensationResult() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò USER 251 –ò 255');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´ USER 251 –ò 255
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, username, balance_ton, balance_uni, created_at')
      .in('id', [251, 255])
      .order('id');

    if (usersError) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:', usersError.message);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò 251 –ò 255 –ù–ï –ù–ê–ô–î–ï–ù–´!');
      return;
    }

    console.log('\nüìä –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´:');
    console.log('‚îÅ'.repeat(80));
    users.forEach(user => {
      console.log(`User ${user.id} (@${user.username || 'unknown'})`);
      console.log(`   TON Balance: ${user.balance_ton} TON`);
      console.log(`   UNI Balance: ${user.balance_uni} UNI`);
      console.log(`   Registered: ${user.created_at}`);
      console.log('');
    });

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú BACKUP –¢–ê–ë–õ–ò–¶–£ –ï–°–õ–ò –°–£–©–ï–°–¢–í–£–ï–¢
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ backup –¥–∞–Ω–Ω—ã—Ö...');
    
    const { data: backup, error: backupError } = await supabase
      .from('backup_compensation_251_255')
      .select('*')
      .order('id');

    if (backupError) {
      console.log('‚ö†Ô∏è  Backup —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
    } else if (backup && backup.length > 0) {
      console.log('\nüíæ –î–ê–ù–ù–´–ï –ò–ó BACKUP (–¥–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏):');
      console.log('‚îÅ'.repeat(80));
      backup.forEach(backupUser => {
        console.log(`User ${backupUser.id} (@${backupUser.username || 'unknown'})`);
        console.log(`   –°—Ç–∞—Ä—ã–π TON Balance: ${backupUser.balance_ton} TON`);
        console.log('');
      });

      // –°–†–ê–í–ù–ò–í–ê–ï–ú –°–¢–ê–†–´–ï –ò –ù–û–í–´–ï –ë–ê–õ–ê–ù–°–´
      console.log('3Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í (–¥–æ –∏ –ø–æ—Å–ª–µ):');
      console.log('‚îÅ'.repeat(80));
      
      users.forEach(user => {
        const backupUser = backup.find(b => b.id === user.id);
        if (backupUser) {
          const difference = Number(user.balance_ton) - Number(backupUser.balance_ton);
          const status = Math.abs(difference - 2.0) < 0.001 ? '‚úÖ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê' : '‚ùå –û–®–ò–ë–ö–ê –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò';
          
          console.log(`User ${user.id}:`);
          console.log(`   –î–æ:    ${backupUser.balance_ton} TON`);
          console.log(`   –ü–æ—Å–ª–µ: ${user.balance_ton} TON`);
          console.log(`   –†–∞–∑–Ω–∏—Ü–∞: +${difference.toFixed(6)} TON`);
          console.log(`   –°—Ç–∞—Ç—É—Å: ${status}`);
          console.log('');
        }
      });
    }

    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –≠–¢–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('user_id', ['251', '255'])
      .order('created_at', { ascending: false })
      .limit(10);

    if (txError) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else if (transactions && transactions.length > 0) {
      console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
      console.log('‚îÅ'.repeat(80));
      transactions.forEach(tx => {
        const date = new Date(tx.created_at).toLocaleString('ru-RU');
        console.log(`User ${tx.user_id}: ${tx.amount} ${tx.currency} (${tx.type}) - ${date}`);
        if (tx.description) {
          console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        }
        console.log('');
      });
    }

    // 5. –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°
    console.log('üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò:');
    console.log('‚îÅ'.repeat(80));
    
    const user251 = users.find(u => u.id === 251);
    const user255 = users.find(u => u.id === 255);
    
    if (user251) {
      console.log(`‚úÖ User 251: –ë–∞–ª–∞–Ω—Å ${user251.balance_ton} TON`);
    } else {
      console.log('‚ùå User 251: –ù–ï –ù–ê–ô–î–ï–ù');
    }
    
    if (user255) {
      console.log(`‚úÖ User 255: –ë–∞–ª–∞–Ω—Å ${user255.balance_ton} TON`);
    } else {
      console.log('‚ùå User 255: –ù–ï –ù–ê–ô–î–ï–ù');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
    const allBalancesPositive = users.every(u => Number(u.balance_ton) > 0);
    
    if (allBalancesPositive) {
      console.log('\nüéâ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!');
      console.log('   –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ TON –±–∞–ª–∞–Ω—Å—ã');
    } else {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–í–ï–†–ö–ê:');
      console.log('   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞–ª–∞–Ω—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏');
    }

    return {
      success: true,
      users: users,
      compensationApplied: allBalancesPositive
    };
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  try {
    const result = await checkCompensationResult();
    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();

export { checkCompensationResult };