/**
 * –§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è TON Boost –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –†–æ–ª—å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã
 * –§–æ–∫—É—Å: User 74 –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
 */

import { supabase } from './core/supabase.js';

async function focusedTonBoostAudit() {
  console.log('=== –§–û–ö–£–°–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø TON BOOST ===');
  console.log('–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞:', new Date().toISOString());
  console.log('\n');

  // –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const keyUsers = [74, 48, 1, 14, 15]; // User 74 - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç, –¥—Ä—É–≥–∏–µ - —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏

  console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('=' .repeat(50));

  for (const userId of keyUsers) {
    console.log(`\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ${userId}`);
    console.log('-'.repeat(40));

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data
    const { data: tonData, error: tError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId)
      .single();

    if (tError && tError.code !== 'PGRST116') {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:`, tError);
      continue;
    }

    if (!tonData) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data`);
      continue;
    }

    console.log(`üìä –î–∞–Ω–Ω—ã–µ ton_farming_data:`);
    console.log(`  - farming_balance: ${tonData.farming_balance} TON`);
    console.log(`  - farming_rate: ${tonData.farming_rate}`);
    console.log(`  - boost_package_id: ${tonData.boost_package_id}`);
    console.log(`  - farming_start: ${tonData.farming_start_timestamp}`);
    console.log(`  - last_update: ${tonData.farming_last_update}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: purchases, error: pError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(10);

    if (pError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`, pError);
      continue;
    }

    console.log(`\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ BOOST_PURCHASE (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):`);
    let totalPurchased = 0;
    
    for (const purchase of purchases || []) {
      const amount = parseFloat(purchase.amount_ton || purchase.amount || '0');
      totalPurchased += amount;
      
      console.log(`  üìù ${purchase.created_at}:`);
      console.log(`     - ID: ${purchase.id}`);
      console.log(`     - –°—É–º–º–∞: ${amount} TON`);
      console.log(`     - –û–ø–∏—Å–∞–Ω–∏–µ: ${purchase.description}`);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ metadata
      if (purchase.metadata) {
        try {
          const metadata = typeof purchase.metadata === 'string' 
            ? JSON.parse(purchase.metadata) 
            : purchase.metadata;
          console.log(`     - Metadata:`, JSON.stringify(metadata, null, 8));
        } catch (e) {
          console.log(`     - ‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π metadata:`, purchase.metadata);
        }
      }
    }

    console.log(`\nüíµ –°—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫: ${totalPurchased} TON`);
    console.log(`üìä –¢–µ–∫—É—â–∏–π farming_balance: ${tonData.farming_balance} TON`);
    
    const difference = totalPurchased - parseFloat(tonData.farming_balance || '0');
    if (Math.abs(difference) > 0.01) {
      console.log(`‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: ${difference} TON`);
    } else {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫—É–ø–∫–∞–º`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã
    const { data: incomes, error: iError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'FARMING_REWARD')
      .like('description', '%TON Boost%')
      .order('created_at', { ascending: false })
      .limit(5);

    if (!iError && incomes && incomes.length > 0) {
      console.log(`\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞:`);
      
      for (const income of incomes) {
        const amount = parseFloat(income.amount_ton || income.amount || '0');
        console.log(`  üìù ${income.created_at}: +${amount} TON`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata
        if (income.metadata) {
          try {
            const metadata = typeof income.metadata === 'string' 
              ? JSON.parse(income.metadata) 
              : income.metadata;
            if (metadata.original_type) {
              console.log(`     - original_type: ${metadata.original_type}`);
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
          }
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥
      const expectedIncome = parseFloat(tonData.farming_balance || '0') * 
                           parseFloat(tonData.farming_rate || '0.01') * 
                           5 / 1440; // –ó–∞ 5 –º–∏–Ω—É—Ç
      console.log(`\nüí° –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω: ${expectedIncome.toFixed(6)} TON`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –æ—à–∏–±–æ–∫
  console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê SQL –û–®–ò–ë–û–ö –° METADATA');
  console.log('=' .repeat(50));

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: recentTx, error: rtError } = await supabase
    .from('transactions')
    .select('id, type, metadata, created_at')
    .or('type.eq.BOOST_PURCHASE,type.eq.FARMING_REWARD')
    .order('created_at', { ascending: false })
    .limit(50);

  if (!rtError && recentTx) {
    let validCount = 0;
    let invalidCount = 0;
    const invalidExamples = [];

    for (const tx of recentTx) {
      if (tx.metadata) {
        try {
          if (typeof tx.metadata === 'string') {
            JSON.parse(tx.metadata);
          }
          validCount++;
        } catch (e) {
          invalidCount++;
          if (invalidExamples.length < 3) {
            invalidExamples.push({
              id: tx.id,
              type: tx.type,
              metadata: tx.metadata,
              error: e.message
            });
          }
        }
      }
    }

    console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–π JSON metadata: ${validCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON metadata: ${invalidCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    if (invalidExamples.length > 0) {
      console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö metadata:`);
      for (const example of invalidExamples) {
        console.log(`  - TX ${example.id} (${example.type}):`);
        console.log(`    Metadata: ${example.metadata}`);
        console.log(`    –û—à–∏–±–∫–∞: ${example.error}`);
      }
    }
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  console.log('\n\nüìä –°–í–û–î–ö–ê –ü–û –ü–†–û–ë–õ–ï–ú–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú');
  console.log('=' .repeat(50));

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å farming_balance = 0 –Ω–æ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
  const { data: allTonUsers, error: atuError } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, boost_package_id')
    .eq('farming_balance', 0)
    .order('user_id');

  if (!atuError && allTonUsers) {
    console.log(`\n‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å farming_balance = 0: ${allTonUsers.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –ø–æ–∫—É–ø–∫–∏
    const problemUsers = [];
    for (const user of allTonUsers.slice(0, 10)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 10
      const { data: hasPurchases } = await supabase
        .from('transactions')
        .select('id')
        .eq('user_id', user.user_id)
        .eq('type', 'BOOST_PURCHASE')
        .limit(1);
      
      if (hasPurchases && hasPurchases.length > 0) {
        problemUsers.push(user.user_id);
      }
    }

    if (problemUsers.length > 0) {
      console.log(`\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –Ω–æ farming_balance = 0:`);
      console.log(`   ${problemUsers.join(', ')}`);
    }
  }

  console.log('\n=== –ö–û–ù–ï–¶ –§–û–ö–£–°–ò–†–û–í–ê–ù–ù–û–ô –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
focusedTonBoostAudit()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });