import { supabase } from './core/supabase.js';

async function checkTransactionTypes() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î ===\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('type')
      .limit(100);

    if (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    const uniqueTypes = new Set(transactions?.map(t => t.type) || []);
    
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î:');
    Array.from(uniqueTypes).forEach(type => {
      console.log(`- ${type}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ tonBoostIncomeScheduler.ts...');
    console.log('–í –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∏–ø: TON_BOOST_INCOME');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å TON —Å—É–º–º–∞–º–∏
    const { data: tonTransactions, error: tonError } = await supabase
      .from('transactions')
      .select('type, amount_ton, created_at')
      .not('amount_ton', 'is', null)
      .gt('amount_ton', 0)
      .order('created_at', { ascending: false })
      .limit(10);

    if (!tonError && tonTransactions) {
      console.log('\nüí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å TON —Å—É–º–º–∞–º–∏:');
      tonTransactions.forEach(tx => {
        console.log(`- ${tx.type}: ${tx.amount_ton} TON (${tx.created_at})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è TON –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n‚ùì –í—ã–≤–æ–¥:');
    console.log('- TON_BOOST_INCOME –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î');
    console.log('- –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('- –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å TON_BOOST_INCOME –≤ enum transaction_type –≤ –ë–î');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkTransactionTypes().catch(console.error);