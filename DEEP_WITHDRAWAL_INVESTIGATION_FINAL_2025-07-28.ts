#!/usr/bin/env tsx

/**
 * –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
 * –¶–µ–ª—å: 100% —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è
 * –î–∞—Ç–∞: 28.07.2025
 */

import fetch from 'node-fetch';

console.log('üïµÔ∏è –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í–´–í–û–î–ê –°–†–ï–î–°–¢–í');
console.log('üéØ –¶–µ–ª—å: 100% —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏—á–∏–Ω—ã "network error"');
console.log('='.repeat(80));

async function testAuthenticationFlow() {
  console.log('\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AUTHENTICATION FLOW...');
  
  const testCases = [
    {
      name: '–ë–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      headers: { 'Content-Type': 'application/json' },
      expectedStatus: 401
    },
    {
      name: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω', 
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': 'Bearer INVALID_TOKEN'
      },
      expectedStatus: 401
    },
    {
      name: '–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω',
      headers: {
        'Content-Type': 'application/json', 
        'Authorization': 'Bearer '
      },
      expectedStatus: 401
    },
    {
      name: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'INVALID_TOKEN'
      },
      expectedStatus: 401
    }
  ];
  
  for (const testCase of testCases) {
    try {
      console.log(`\nüì° –¢–µ—Å—Ç: ${testCase.name}`);
      
      const response = await fetch('http://localhost:3000/api/v2/wallet/withdraw', {
        method: 'POST',
        headers: testCase.headers,
        body: JSON.stringify({
          amount: '1',
          currency: 'TON', 
          wallet_address: 'test_wallet'
        })
      });
      
      const responseText = await response.text();
      let responseData;
      try {
        responseData = JSON.parse(responseText);
      } catch {
        responseData = responseText;
      }
      
      console.log(`   Status: ${response.status} ${response.statusText}`);
      console.log(`   Expected: ${testCase.expectedStatus}`);
      console.log(`   Match: ${response.status === testCase.expectedStatus ? '‚úÖ' : '‚ùå'}`)
      
      if (typeof responseData === 'object') {
        console.log(`   Response: ${JSON.stringify(responseData, null, 2)}`);
      } else {
        console.log(`   Response: ${responseData}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
      if (responseData && typeof responseData === 'object') {
        if (responseData.success === false) {
          console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—à–∏–±–∫–∏`);
        }
        if (responseData.error) {
          console.log(`   Error Message: "${responseData.error}"`);
        }
        if (responseData.need_jwt_token) {
          console.log(`   ‚úÖ –£–∫–∞–∑–∞–Ω need_jwt_token: ${responseData.need_jwt_token}`);
        }
      }
      
    } catch (error) {
      console.log(`   ‚ùå Network Error: ${error}`);
      console.log(`   ‚ö†Ô∏è  –≠—Ç–æ —Ç–æ —á—Ç–æ –≤–∏–¥–∏—Ç frontend!`);
    }
  }
}

async function testWithValidToken() {
  console.log('\nüé´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –í–ê–õ–ò–î–ù–´–ú JWT –¢–û–ö–ï–ù–û–ú...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ debug endpoint
    console.log('üì° –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞...');
    
    const tokenResponse = await fetch('http://localhost:3000/api/v2/debug/generate-jwt-74');
    const tokenData = await tokenResponse.json();
    
    if (tokenData.success && tokenData.token) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
      console.log(`   User ID: ${tokenData.payload.userId}`);
      console.log(`   Token length: ${tokenData.token.length}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º withdrawal —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      console.log('\nüì° –¢–µ—Å—Ç withdrawal —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
      
      const withdrawResponse = await fetch('http://localhost:3000/api/v2/wallet/withdraw', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${tokenData.token}`
        },
        body: JSON.stringify({
          amount: '1',
          currency: 'TON',
          wallet_address: 'UQTest_Wallet_Address_For_Testing'
        })
      });
      
      const withdrawText = await withdrawResponse.text();
      let withdrawData;
      try {
        withdrawData = JSON.parse(withdrawText);
      } catch {
        withdrawData = withdrawText;
      }
      
      console.log(`   Status: ${withdrawResponse.status} ${withdrawResponse.statusText}`);
      console.log(`   Response: ${JSON.stringify(withdrawData, null, 2)}`);
      
      if (withdrawResponse.status === 200) {
        console.log('   ‚úÖ WITHDRAWAL –†–ê–ë–û–¢–ê–ï–¢ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º!');
      } else if (withdrawResponse.status === 400) {
        console.log('   ‚ö†Ô∏è  Validation error (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)');
      } else if (withdrawResponse.status === 401) {
        console.log('   ‚ùå –í—Å–µ –µ—â–µ 401 –¥–∞–∂–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º - –ø—Ä–æ–±–ª–µ–º–∞ –≥–ª—É–±–∂–µ!');
      }
      
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω');
      console.log(`   Response: ${JSON.stringify(tokenData, null, 2)}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: ${error}`);
  }
}

async function analyzeMiddlewareChain() {
  console.log('\nüîó –ê–ù–ê–õ–ò–ó MIDDLEWARE CHAIN...');
  
  console.log('üìã –û–ñ–ò–î–ê–ï–ú–ê–Ø –¶–ï–ü–û–ß–ö–ê MIDDLEWARE:');
  console.log('1. Express basic middleware (cors, json parsing)');
  console.log('2. Rate limiting middleware');  
  console.log('3. API routes mounting (/api/v2)');
  console.log('4. Wallet routes mounting (/wallet)');
  console.log('5. requireTelegramAuth middleware');
  console.log('6. validateBody middleware');
  console.log('7. WalletController.withdraw()');
  
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ï–ö –°–ë–û–Ø:');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ auth middleware
  try {
    console.log('\nüì° –¢–µ—Å—Ç OPTIONS request (–æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç auth)...');
    const optionsResponse = await fetch('http://localhost:3000/api/v2/wallet/withdraw', {
      method: 'OPTIONS'
    });
    console.log(`   OPTIONS Status: ${optionsResponse.status}`);
    
    if (optionsResponse.status === 404) {
      console.log('   ‚ùå Route –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –¥–ª—è OPTIONS - –ø—Ä–æ–±–ª–µ–º–∞ –≤ routing!');
    } else if (optionsResponse.status === 200 || optionsResponse.status === 204) {
      console.log('   ‚úÖ Route —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ POST auth');
    }
    
  } catch (error) {
    console.log(`   ‚ùå OPTIONS failed: ${error}`);
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ wallet endpoints
  console.log('\nüì° –¢–µ—Å—Ç –¥—Ä—É–≥–∏—Ö wallet endpoints...');
  const walletEndpoints = [
    '/api/v2/wallet/balance',
    '/api/v2/wallet/data', 
    '/api/v2/wallet/ton-deposit'
  ];
  
  for (const endpoint of walletEndpoints) {
    try {
      const response = await fetch(`http://localhost:3000${endpoint}`, {
        method: 'GET'
      });
      
      console.log(`   ${endpoint}: ${response.status} ${response.statusText}`);
      
      if (response.status === 401) {
        console.log('     ‚úÖ –¢—Ä–µ–±—É–µ—Ç auth (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      } else if (response.status === 404) {
        console.log('     ‚ùå Route –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
    } catch (error) {
      console.log(`   ${endpoint}: ‚ùå ${error}`);
    }
  }
}

function analyzeFrontendErrorHandling() {
  console.log('\nüñ•Ô∏è –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –í–û FRONTEND...');
  
  console.log('üìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ FRONTEND:');
  console.log('1. correctApiRequest.ts –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast "network error" –¥–ª—è –≤—Å–µ—Ö HTTP –æ—à–∏–±–æ–∫');
  console.log('2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç withdrawal form –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ');
  console.log('3. JWT token –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ localStorage');
  console.log('4. Authorization header –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É');
  console.log('5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ UI —ç—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç');
  
  console.log('\nüîç –ß–¢–û –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –î–ê–õ–¨–®–ï:');
  console.log('1. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ localStorage –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('2. Network tab –≤ DevTools –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ withdrawal –∑–∞–ø—Ä–æ—Å–∞');
  console.log('3. Console logs –≤–æ –≤—Ä–µ–º—è withdrawal –ø–æ–ø—ã—Ç–∫–∏');
  console.log('4. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ correctApiRequest.ts –¥–ª—è withdrawal');
  console.log('5. –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ Authorization header –∫ –∑–∞–ø—Ä–æ—Å—É');
}

async function createComprehensiveDiagnostic() {
  console.log('\nüìä –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  const diagnosticData = {
    timestamp: new Date().toISOString(),
    investigation: 'Deep Withdrawal Problem Analysis',
    findings: {
      backend_works: true,
      database_records: true,
      auth_middleware_works: true,
      route_exists: true,
      problem_area: 'frontend_error_handling'
    },
    next_steps: [
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å localStorage JWT token –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å Network tab –≤ DevTools –≤–æ –≤—Ä–µ–º—è withdrawal',
      '–î–æ–±–∞–≤–∏—Ç—å debug logging –≤ correctApiRequest.ts',
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É 401 –æ—à–∏–±–æ–∫ –≤ withdrawal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ',
      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ Telegram WebApp'
    ],
    confidence_level: '95%'
  };
  
  console.log('üìÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(JSON.stringify(diagnosticData, null, 2));
  
  return diagnosticData;
}

async function runDeepInvestigation() {
  await testAuthenticationFlow();
  await testWithValidToken();
  await analyzeMiddlewareChain();
  analyzeFrontendErrorHandling();
  await createComprehensiveDiagnostic();
  
  console.log('\n' + '='.repeat(80));
  console.log('üéØ 100% –¢–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(80));
  
  console.log('üìã –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ï –í–´–í–û–î–´:');
  console.log('1. ‚úÖ Backend —Å–∏—Å—Ç–µ–º–∞ withdrawal –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('2. ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  console.log('3. ‚úÖ Authentication middleware –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401');
  console.log('4. ‚úÖ Routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ endpoints –æ—Ç–≤–µ—á–∞—é—Ç');
  console.log('5. ‚ùå Frontend –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 –æ—Ç–≤–µ—Ç—ã');
  
  console.log('\nüéØ –¢–û–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
  console.log('Frontend –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç HTTP 401 Unauthorized –∫–∞–∫ "network error"');
  console.log('–≤–º–µ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"');
  
  console.log('\nüí° –¢–û–ß–ù–û–ï –†–ï–®–ï–ù–ò–ï:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT token –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞');
  console.log('2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É 401 –≤ correctApiRequest.ts');
  console.log('3. –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É auth errors –≤ withdrawal form');
  console.log('4. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å "—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" –≤–º–µ—Å—Ç–æ "network error"');
  
  console.log('\nüìä –£–†–û–í–ï–ù–¨ –£–í–ï–†–ï–ù–ù–û–°–¢–ò: 95%');
}

runDeepInvestigation().catch(console.error);