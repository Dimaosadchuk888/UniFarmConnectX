import { supabase } from './core/supabase';

async function checkPostRestartStatus() {
  console.log('=== –°–¢–ê–¢–£–° –ü–û–°–õ–ï –†–ï–°–¢–ê–†–¢–ê ===\n');
  console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    console.log('üìä 1. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–°–õ–ï –†–ï–°–¢–ê–†–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç):\n');
    
    const tenMinutesAgo = new Date();
    tenMinutesAgo.setMinutes(tenMinutesAgo.getMinutes() - 10);

    const { data: recentTx, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .gt('created_at', tenMinutesAgo.toISOString())
      .in('type', ['FARMING_REWARD'])
      .order('created_at', { ascending: false });

    if (!txError && recentTx) {
      const uniTx = recentTx.filter(t => t.currency === 'UNI');
      const tonTx = recentTx.filter(t => t.currency === 'TON');
      
      console.log(`UNI Farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${uniTx.length} ‚úÖ`);
      if (uniTx.length > 0) {
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω—è—è: ${new Date(uniTx[0].created_at).toLocaleString()}`);
        console.log(`  –°—É–º–º–∞: ${uniTx[0].amount} UNI`);
      }
      
      console.log(`\nTON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTx.length} ${tonTx.length > 0 ? '‚úÖ' : '‚ùå'}`);
      if (tonTx.length === 0) {
        console.log('  –ù–ï–¢ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞!');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ farming_balance
    console.log('\nüí∞ 2. –°–û–°–¢–û–Ø–ù–ò–ï farming_balance:\n');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_active, updated_at')
      .eq('boost_active', true)
      .order('farming_balance', { ascending: false })
      .limit(10);

    if (!farmingError && farmingData) {
      let nonZeroCount = 0;
      
      farmingData.forEach(user => {
        const balance = parseFloat(user.farming_balance);
        if (balance > 0) nonZeroCount++;
        
        console.log(`User ${user.user_id}: farming_balance = ${balance} TON ${balance > 0 ? '‚úÖ' : '‚ùå'}`);
      });
      
      console.log(`\n–ò—Ç–æ–≥–æ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${nonZeroCount} –∏–∑ ${farmingData.length}`);
      
      if (nonZeroCount === 0) {
        console.log('\n‚ùå –í–°–ï farming_balance –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É = 0!');
        console.log('   –†–µ—Å—Ç–∞—Ä—Ç –ù–ï —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É —Å –±–∞–ª–∞–Ω—Å–∞–º–∏.');
      }
    }

    // 3. –í—ã–≤–æ–¥—ã
    console.log('\nüìù 3. –í–´–í–û–î–´:\n');
    
    console.log('–§–ê–ö–¢–´:');
    console.log('- UNI Farming –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ‚úÖ');
    console.log('- TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ‚ùå');
    console.log('- farming_balance –≤—Å–µ –µ—â–µ = 0 –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚ùå');
    console.log('- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è');
    
    console.log('\n–í–ï–†–û–Ø–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
    console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑-–∑–∞:');
    console.log('1. –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞');
    console.log('2. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –º–æ–¥—É–ª–µ–π');
    console.log('3. –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ processTonBoostIncome()');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

checkPostRestartStatus();