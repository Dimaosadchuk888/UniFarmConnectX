import { supabase } from './core/supabaseClient';

async function monitorBoostPurchase() {
  const userId = '184';
  
  console.log('=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ö–£–ü–ö–ò TON BOOST ===\n');
  console.log('üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª TON Boost');
  console.log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç Starter Boost –∑–∞ 1 TON');
  console.log('3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏\n');
  
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { data: initialState } = await supabase
    .from('users')
    .select('balance_ton, ton_farming_balance')
    .eq('id', userId)
    .single();
    
  console.log('–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
  console.log(`‚îú‚îÄ‚îÄ balance_ton: ${initialState.balance_ton} TON`);
  console.log(`‚îî‚îÄ‚îÄ ton_farming_balance: ${initialState.ton_farming_balance} TON`);
  console.log(`–û–±—â–∞—è —Å—É–º–º–∞: ${parseFloat(initialState.balance_ton) + parseFloat(initialState.ton_farming_balance)} TON\n`);
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  let checkCount = 0;
  const interval = setInterval(async () => {
    checkCount++;
    
    const { data: currentState } = await supabase
      .from('users')
      .select('balance_ton, ton_farming_balance, ton_boost_active, ton_boost_package')
      .eq('id', userId)
      .single();
      
    const balanceTonChanged = currentState.balance_ton !== initialState.balance_ton;
    const farmingBalanceChanged = currentState.ton_farming_balance !== initialState.ton_farming_balance;
    
    if (balanceTonChanged || farmingBalanceChanged) {
      console.log(`\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø (–ø—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount}):`);
      
      if (balanceTonChanged) {
        const diff = parseFloat(currentState.balance_ton) - parseFloat(initialState.balance_ton);
        console.log(`balance_ton: ${initialState.balance_ton} ‚Üí ${currentState.balance_ton} (${diff > 0 ? '+' : ''}${diff.toFixed(6)} TON)`);
      }
      
      if (farmingBalanceChanged) {
        const diff = parseFloat(currentState.ton_farming_balance) - parseFloat(initialState.ton_farming_balance);
        console.log(`ton_farming_balance: ${initialState.ton_farming_balance} ‚Üí ${currentState.ton_farming_balance} (${diff > 0 ? '+' : ''}${diff.toFixed(6)} TON)`);
      }
      
      console.log(`\n–¢–µ–∫—É—â–∞—è –æ–±—â–∞—è —Å—É–º–º–∞: ${parseFloat(currentState.balance_ton) + parseFloat(currentState.ton_farming_balance)} TON`);
      console.log(`Boost –∞–∫—Ç–∏–≤–µ–Ω: ${currentState.ton_boost_active ? '‚úÖ' : '‚ùå'}`);
      console.log(`–ü–∞–∫–µ—Ç: ${currentState.ton_boost_package || '–Ω–µ—Ç'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
      const totalBefore = parseFloat(initialState.balance_ton) + parseFloat(initialState.ton_farming_balance);
      const totalAfter = parseFloat(currentState.balance_ton) + parseFloat(currentState.ton_farming_balance);
      const totalDiff = totalAfter - totalBefore;
      
      if (Math.abs(totalDiff) > 0.01) { // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 0.01 TON
        console.log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û–±—â–∞—è —Å—É–º–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${totalDiff.toFixed(6)} TON!`);
        console.log('–≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤!');
      } else {
        console.log(`\n‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${totalDiff.toFixed(6)} TON)`);
      }
      
      clearInterval(interval);
      console.log('\n\n=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ===');
    } else if (checkCount % 10 === 0) {
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount}: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç...`);
    }
  }, 1000);
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
  setTimeout(() => {
    clearInterval(interval);
    console.log('\n\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (2 –º–∏–Ω—É—Ç—ã)');
  }, 120000);
}

monitorBoostPurchase();