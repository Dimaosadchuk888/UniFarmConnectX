/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ UNI —Ñ–∞—Ä–º–∏–Ω–≥
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –êPI –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ñ–∞—Ä–º–∏–Ω–≥, –ø—Ä–æ–≤–µ—Ä—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 * 
 * –ó–∞–ø—É—Å–∫: node test-farming-deposit.js <user_id> <amount>
 * –ü—Ä–∏–º–µ—Ä: node test-farming-deposit.js 1 100
 */

import fetch from 'node-fetch';

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = process.env.API_URL || 'https://93cb0060-75d7-4281-ac65-b204cda864a4-00-1j7bpbfst9vfx.pike.replit.dev';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserBalance(userId) {
  try {
    const response = await fetch(`${API_BASE_URL}/api/wallet/balance?user_id=${userId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: ${response.status} ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
 */
async function getFarmingInfo(userId) {
  try {
    const response = await fetch(`${API_BASE_URL}/api/uni-farming/info?user_id=${userId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${response.status} ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ:', error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number|string} amount –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
 */
async function depositToFarming(userId, amount) {
  try {
    console.log(`\n[üöÄ] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç ${amount} UNI –≤ —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=${userId}...`);
    
    const response = await fetch(`${API_BASE_URL}/api/uni-farming/deposit`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: userId,
        amount: amount.toString()  // API –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
      })
    });
    
    const responseBody = await response.text();
    
    try {
      const jsonResponse = JSON.parse(responseBody);
      console.log(`[üìÑ] –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
      
      if (response.ok && jsonResponse.success) {
        console.log(`[‚úÖ] –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        console.log(`[üìä] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(jsonResponse.data || {}, null, 2));
        return jsonResponse;
      } else {
        console.log(`[‚ùå] –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${jsonResponse.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        console.log(`[üìù] –î–µ—Ç–∞–ª–∏:`, JSON.stringify(jsonResponse, null, 2));
        return jsonResponse;
      }
    } catch (parseError) {
      console.log(`[‚ùå] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ JSON`);
      console.log(`[üìù] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:`, responseBody.substring(0, 200));
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: ${parseError.message}`);
    }
  } catch (error) {
    console.error('[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
 * @param {number} userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number|string} amount –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
 */
async function testDeposit(userId, amount) {
  console.log('====================================================================');
  console.log(`[üß™] –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ü–û–ó–ò–¢–ê –í –§–ê–†–ú–ò–ù–ì`);
  console.log(`[üë§] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
  console.log(`[üí∞] –°—É–º–º–∞: ${amount} UNI`);
  console.log('====================================================================');
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    console.log('\n[1Ô∏è‚É£] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    const balanceResponse = await getUserBalance(userId);
    
    if (!balanceResponse.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    const initialBalance = parseFloat(balanceResponse.data.uni);
    console.log(`[üíµ] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å UNI: ${initialBalance}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    const depositAmount = parseFloat(amount);
    if (initialBalance < depositAmount) {
      console.log(`[‚ö†Ô∏è] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ (${initialBalance} < ${depositAmount})`);
      console.log(`[‚ö†Ô∏è] –¢–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω, –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç API`);
    }
    
    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ
    console.log('\n[2Ô∏è‚É£] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞...');
    const farmingInfoResponse = await getFarmingInfo(userId);
    
    if (!farmingInfoResponse.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ');
    }
    
    console.log(`[üìà] –¢–µ–∫—É—â–∏–π APY: ${farmingInfoResponse.data.total_apy || 'N/A'}%`);
    console.log(`[üíº] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${farmingInfoResponse.data.balance || 0} UNI`);
    
    // –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
    console.log('\n[3Ô∏è‚É£] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞...');
    const depositResponse = await depositToFarming(userId, amount);
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (–µ—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–µ–Ω)
    if (depositResponse.success) {
      console.log('\n[4Ô∏è‚É£] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞...');
      const afterDepositBalanceResponse = await getUserBalance(userId);
      
      if (!afterDepositBalanceResponse.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
      }
      
      const afterDepositBalance = parseFloat(afterDepositBalanceResponse.data.uni);
      console.log(`[üíµ] –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞: ${afterDepositBalance} UNI`);
      console.log(`[üîÑ] –†–∞–∑–Ω–∏—Ü–∞: ${initialBalance - afterDepositBalance} UNI`);
      
      // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
      console.log('\n[5Ô∏è‚É£] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ...');
      const afterDepositFarmingResponse = await getFarmingInfo(userId);
      
      if (!afterDepositFarmingResponse.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
      }
      
      console.log(`[üìà] –¢–µ–∫—É—â–∏–π APY: ${afterDepositFarmingResponse.data.total_apy || 'N/A'}%`);
      console.log(`[üíº] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${afterDepositFarmingResponse.data.balance || 0} UNI`);
      console.log(`[üîÑ] –†–∞–∑–Ω–∏—Ü–∞: +${parseFloat(afterDepositFarmingResponse.data.balance || 0) - parseFloat(farmingInfoResponse.data.balance || 0)} UNI`);
    }
    
    // –ò—Ç–æ–≥
    console.log('\n====================================================================');
    console.log(`[üèÅ] –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: ${depositResponse.success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log('====================================================================');
    
  } catch (error) {
    console.error('\n[‚ùå] –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –¢–ï–°–¢–ê:');
    console.error(error);
    console.log('====================================================================');
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
async function main() {
  try {
    const args = process.argv.slice(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (args.length < 2) {
      console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞');
      console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-farming-deposit.js <user_id> <amount>');
      process.exit(1);
    }
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const userId = parseInt(args[0]);
    const amount = args[1];
    
    if (isNaN(userId) || userId <= 0) {
      console.error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      console.error('–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await testDeposit(userId, amount);
    
  } catch (error) {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();