/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
 * 
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ
 * 
 * –ó–∞–ø—É—Å–∫: node test-daily-bonus.js <user_id> [claim]
 * –ü—Ä–∏–º–µ—Ä: node test-daily-bonus.js 1
 * –ü—Ä–∏–º–µ—Ä —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º: node test-daily-bonus.js 1 claim
 */

import fetch from 'node-fetch';

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = process.env.API_URL || 'https://93cb0060-75d7-4281-ac65-b204cda864a4-00-1j7bpbfst9vfx.pike.replit.dev';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} - –û—Ç–≤–µ—Ç API
 */
async function getBonusStatus(userId) {
  try {
    console.log(`[üìã] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=${userId}...`);
    
    const response = await fetch(`${API_BASE_URL}/api/daily-bonus/status?user_id=${userId}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ–Ω—É—Å–∞: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<object>} - –û—Ç–≤–µ—Ç API
 */
async function claimBonus(userId) {
  try {
    console.log(`[üéÅ] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=${userId}...`);
    
    const response = await fetch(`${API_BASE_URL}/api/daily-bonus/claim`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: userId })
    });
    
    const responseBody = await response.text();
    
    try {
      const jsonResponse = JSON.parse(responseBody);
      
      if (response.ok && jsonResponse.success) {
        return jsonResponse;
      } else {
        console.log(`[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞: ${jsonResponse.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        return jsonResponse;
      }
    } catch (parseError) {
      console.log(`[‚ùå] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ JSON`);
      console.log(`[üìù] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:`, responseBody.substring(0, 200));
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: ${parseError.message}`);
    }
  } catch (error) {
    console.error('[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ—Ç –µ–≥–æ
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {boolean} shouldClaim - –ù—É–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å
 */
async function testDailyBonus(userId, shouldClaim = false) {
  console.log('====================================================================');
  console.log(`[üß™] –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ë–û–ù–£–°–ê`);
  console.log(`[üë§] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
  console.log('====================================================================');
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–∞
    const statusResponse = await getBonusStatus(userId);
    
    if (!statusResponse.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞');
    }
    
    const status = statusResponse.data;
    
    console.log('\n[üìä] –°—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:');
    console.log(`[üïí] –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${status.is_available ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`[üìÖ] –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${status.current_streak || 0}`);
    console.log(`[üéØ] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: ${status.max_streak || 0}`);
    
    if (status.next_available_at) {
      console.log(`[‚è±Ô∏è] –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${new Date(status.next_available_at).toLocaleString()}`);
    }
    
    if (status.last_claimed_at) {
      console.log(`[üìÜ] –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: ${new Date(status.last_claimed_at).toLocaleString()}`);
    }
    
    // –®–∞–≥ 2: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å
    if (shouldClaim) {
      if (status.is_available) {
        console.log('\n[üéÅ] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞...');
        const claimResponse = await claimBonus(userId);
        
        if (claimResponse.success) {
          console.log('[‚úÖ] –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!');
          
          if (claimResponse.data && claimResponse.data.amount) {
            console.log(`[üí∞] –ü–æ–ª—É—á–µ–Ω–æ: ${claimResponse.data.amount} UNI`);
          }
          
          if (claimResponse.data && claimResponse.data.new_streak) {
            console.log(`[üìÖ] –ù–æ–≤–∞—è —Å–µ—Ä–∏—è: ${claimResponse.data.new_streak}`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
          console.log('\n[üîÑ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...');
          const updatedStatus = await getBonusStatus(userId);
          
          if (updatedStatus.success) {
            console.log('\n[üìä] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:');
            console.log(`[üïí] –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${updatedStatus.data.is_available ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`[üìÖ] –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${updatedStatus.data.current_streak || 0}`);
            console.log(`[üéØ] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: ${updatedStatus.data.max_streak || 0}`);
            
            if (updatedStatus.data.next_available_at) {
              console.log(`[‚è±Ô∏è] –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${new Date(updatedStatus.data.next_available_at).toLocaleString()}`);
            }
          }
        } else {
          console.log('[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å');
          if (claimResponse.error && claimResponse.error.message) {
            console.log(`[‚ùì] –ü—Ä–∏—á–∏–Ω–∞: ${claimResponse.error.message}`);
          }
        }
      } else {
        console.log('\n[‚ö†Ô∏è] –ë–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ.');
      }
    }
    
    // –ò—Ç–æ–≥
    console.log('\n====================================================================');
    console.log(`[üèÅ] –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û`);
    console.log('====================================================================');
    
  } catch (error) {
    console.error('\n[‚ùå] –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –¢–ï–°–¢–ê:');
    console.error(error);
    console.log('====================================================================');
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
async function main() {
  try {
    const args = process.argv.slice(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (args.length < 1) {
      console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-daily-bonus.js <user_id> [claim]');
      process.exit(1);
    }
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const userId = parseInt(args[0]);
    const shouldClaim = args[1] === 'claim';
    
    if (isNaN(userId) || userId <= 0) {
      console.error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await testDailyBonus(userId, shouldClaim);
    
  } catch (error) {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();