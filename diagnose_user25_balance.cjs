const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseKey) {
  console.error('SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseUser25TONBalance() {
  console.log('=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –ë–ê–õ–ê–ù–°–ê USER 25 –í PRODUCTION ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º User 25
    console.log('1. üë§ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25:');
    let { data: user25, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, balance_uni, created_at')
      .eq('id', 25)
      .single();
      
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è User 25:', userError.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id –∏–∑ –ª–æ–≥–æ–≤ (425855744)
      console.log('\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id 425855744:');
      const { data: userByTgId, error: tgError } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', 425855744)
        .single();
        
      if (tgError) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id 425855744 –Ω–µ –Ω–∞–π–¥–µ–Ω:', tgError.message);
        return;
      } else {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userByTgId);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user25 = userByTgId;
      }
    } else {
      console.log('‚úÖ User 25 –Ω–∞–π–¥–µ–Ω:', {
        id: user25.id,
        telegram_id: user25.telegram_id,
        username: user25.username,
        balance_ton: user25.balance_ton,
        balance_uni: user25.balance_uni,
        updated_at: user25.updated_at
      });
    }

    const userId = user25.id;
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n2. üí∞ –í–°–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER ' + userId + ':');
    const { data: tonTransactions, error: tonTxError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(20);
      
    if (tonTxError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonTxError.message);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${tonTransactions?.length || 0} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      tonTransactions?.forEach((tx, index) => {
        console.log(`${index + 1}. ID: ${tx.id}`);
        console.log(`   üíµ –°—É–º–º–∞: ${tx.amount || tx.amount_ton || '0'} TON`);
        console.log(`   üè∑Ô∏è  –¢–∏–ø: ${tx.type}, –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`   üìÖ –î–∞—Ç–∞: ${tx.created_at}`);
        console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
        console.log(`   üîó Metadata: ${tx.metadata ? JSON.stringify(tx.metadata) : '–Ω–µ—Ç'}`);
        console.log('');
      });
    }
    
    // 3. –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã (DEPOSIT, TON_DEPOSIT)
    console.log('\n3. üì• –í–°–ï –î–ï–ü–û–ó–ò–¢–´ USER ' + userId + ':');
    const { data: deposits, error: depositError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .or('type.eq.DEPOSIT,type.eq.TON_DEPOSIT,description.ilike.%deposit%')
      .order('created_at', { ascending: false });
      
    if (depositError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositError.message);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${deposits?.length || 0} –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      deposits?.forEach((tx, index) => {
        console.log(`${index + 1}. ID: ${tx.id}`);
        console.log(`   üíµ –°—É–º–º–∞: ${tx.amount || tx.amount_ton || tx.amount_uni || '0'}`);
        console.log(`   üí± –í–∞–ª—é—Ç–∞: ${tx.currency || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üè∑Ô∏è  –¢–∏–ø: ${tx.type}, –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`   üìÖ –î–∞—Ç–∞: ${tx.created_at}`);
        console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–Ω–µ—Ç'}`);
        console.log('');
      });
    }
    
    // 4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
    console.log('\n4. üìã –ü–û–°–õ–ï–î–ù–ò–ï 10 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER ' + userId + ':');
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (recentError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', recentError.message);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${recentTx?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      recentTx?.forEach((tx, index) => {
        console.log(`${index + 1}. ID: ${tx.id}, ${tx.currency || 'UNI'}: ${tx.amount || tx.amount_ton || tx.amount_uni || '0'}`);
        console.log(`   üè∑Ô∏è  ${tx.type} (${tx.status}) - ${tx.created_at}`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º User 227 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\n5. üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° USER 227:');
    const { data: user227, error: user227Error } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, balance_uni')
      .eq('id', 227)
      .single();
      
    if (user227Error) {
      console.log('‚ùå User 227 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user227Error.message);
    } else {
      console.log('‚úÖ User 227 –¥–∞–Ω–Ω—ã–µ:', {
        id: user227.id,
        telegram_id: user227.telegram_id,
        username: user227.username,
        balance_ton: user227.balance_ton,
        balance_uni: user227.balance_uni
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 227
      const { data: user227Tx } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', 227)
        .eq('currency', 'TON')
        .order('created_at', { ascending: false })
        .limit(5);
      
      console.log(`üìä User 227 –∏–º–µ–µ—Ç ${user227Tx?.length || 0} TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏/–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n6. üîê –ü–†–û–í–ï–†–ö–ê –î–†–£–ì–ò–• –î–ê–ù–ù–´–• USER ' + userId + ':');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º user_sessions
    const { data: sessions } = await supabase
      .from('user_sessions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(3);
    
    console.log(`üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessions?.length || 0}`);
    sessions?.forEach(session => {
      console.log(`   üìÖ –°–µ—Å—Å–∏—è –æ—Ç ${session.created_at}, –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${session.last_active || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseUser25TONBalance().then(() => {
  console.log('\n=== ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
  process.exit(0);
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', err.message);
  process.exit(1);
});