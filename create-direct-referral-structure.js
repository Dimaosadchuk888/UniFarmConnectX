/**
 * –ü–†–Ø–ú–û–ï –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –ß–ï–†–ï–ó –ë–ê–ó–£ –î–ê–ù–ù–´–•
 * –û–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—ã API –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é
 */

import { createClient } from '@supabase/supabase-js';

async function createDirectReferralStructure() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üéØ –ü–†–Ø–ú–û–ï –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´');
  console.log('='.repeat(60));
  
  const baseUserId = 48;
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: baseUser, error: baseUserError } = await supabase
    .from('users')
    .select('*')
    .eq('id', baseUserId)
    .single();
  
  if (baseUserError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', baseUserError.message);
    return;
  }
  
  console.log(`üìä –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${baseUser.username} (ID: ${baseUserId})`);
  console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${baseUser.ref_code}`);
  
  const createdUsers = [];
  let currentReferrerId = baseUserId;
  
  console.log('\nüèóÔ∏è –°–û–ó–î–ê–ù–ò–ï 20-–£–†–û–í–ù–ï–í–û–ô –°–¢–†–£–ö–¢–£–†–´:');
  console.log('-'.repeat(60));
  
  for (let level = 1; level <= 20; level++) {
    console.log(`\nüìç –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É—Ä–æ–≤–Ω—è ${level}:`);
    
    const telegramId = 888888000 + level;
    const username = `partner_level_${level}`;
    const refCode = `REF_LEVEL_${level}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const newUserData = {
        telegram_id: telegramId,
        username: username,
        first_name: `–ü–∞—Ä—Ç–Ω–µ—Ä`,
        last_name: `–£—Ä–æ–≤–µ–Ω—å${level}`,
        ref_code: refCode,
        referred_by: currentReferrerId, // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–∞
        balance_uni: '100',
        balance_ton: '100',
        uni_deposit_amount: '50',
        uni_farming_start_timestamp: new Date().toISOString(),
        uni_farming_rate: '0.01',
        ton_boost_package: '1',
        ton_boost_rate: '0.01',
        ton_boost_start_timestamp: new Date().toISOString(),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      console.log(`   üìù –°–æ–∑–¥–∞–Ω–∏–µ: ${username} (telegram_id: ${telegramId})`);
      console.log(`   üë• –†–µ—Ñ–µ—Ä–µ–Ω—Ç: ID ${currentReferrerId}`);
      
      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert([newUserData])
        .select()
        .single();
      
      if (createError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:`, createError.message);
        continue;
      }
      
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω: ID ${newUser.id}`);
      console.log(`   üîó –†–µ—Ñ-–∫–æ–¥: ${newUser.ref_code}`);
      console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å: 100 UNI + 100 TON`);
      console.log(`   üìà –î–µ–ø–æ–∑–∏—Ç—ã: 50 UNI + TON Boost –ø–∞–∫–µ—Ç 1`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const initialTransactions = [
        {
          user_id: newUser.id,
          type: 'FARMING_REWARD',
          amount_uni: '100',
          description: `üí∞ Initial deposit: 100 UNI`,
          status: 'completed',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          user_id: newUser.id,
          type: 'FARMING_REWARD',
          amount_ton: '100',
          description: `üí∞ Initial deposit: 100 TON`,
          status: 'completed',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          user_id: newUser.id,
          type: 'FARMING_REWARD',
          amount_uni: '50',
          description: `üìà UNI farming deposit: 50 UNI (rate: 1%)`,
          status: 'completed',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          user_id: newUser.id,
          type: 'FARMING_REWARD',
          amount_ton: '20',
          description: `üöÄ TON Boost package 1 activation: 20 TON`,
          status: 'completed',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ];
      
      const { data: transactions, error: txError } = await supabase
        .from('transactions')
        .insert(initialTransactions)
        .select();
      
      if (!txError) {
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${transactions.length} –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      createdUsers.push({
        level: level,
        user_id: newUser.id,
        telegram_id: telegramId,
        username: username,
        ref_code: refCode,
        referrer_id: currentReferrerId,
        balance_uni: '100',
        balance_ton: '100'
      });
      
      // –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ
      currentReferrerId = newUser.id;
      
      console.log(`   üéØ –£—Ä–æ–≤–µ–Ω—å ${level} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è ${level}:`, error.message);
      continue;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('\nüìä –°–¢–†–£–ö–¢–£–†–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ï–¢–ò:');
  console.log('='.repeat(60));
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${createdUsers.length}/20\n`);
  
  console.log('–£—Ä–æ–≤–µ–Ω—å | User ID | Username         | Ref Code                      | Referrer ID');
  console.log('-'.repeat(90));
  console.log(`   0     |   ${baseUserId}   | ${baseUser.username.padEnd(16)} | ${baseUser.ref_code} | (–æ—Å–Ω–æ–≤–Ω–æ–π)`);
  
  createdUsers.forEach(user => {
    console.log(`   ${user.level.toString().padStart(2)}     | ${user.user_id.toString().padStart(7)} | ${user.username.padEnd(16)} | ${user.ref_code.padEnd(29)} | ${user.referrer_id}`);
  });
  
  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
  console.log('\nüîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô:');
  console.log('-'.repeat(60));
  
  let correctLinks = 0;
  for (const user of createdUsers) {
    const { data: verification, error: verifyError } = await supabase
      .from('users')
      .select('id, username, referred_by')
      .eq('id', user.user_id)
      .single();
    
    if (!verifyError && verification) {
      const isCorrect = verification.referred_by === user.referrer_id;
      console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} ${user.username}: referred_by = ${verification.referred_by} (–æ–∂–∏–¥–∞–ª—Å—è ${user.referrer_id})`);
      if (isCorrect) correctLinks++;
    }
  }
  
  console.log(`\nüìà –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${correctLinks}/${createdUsers.length}`);
  
  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –∏–º–∏—Ç–∞—Ü–∏—é —Ñ–∞—Ä–º–∏–Ω–≥–∞
  console.log('\n‚ö° –ê–ö–¢–ò–í–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´:');
  console.log('-'.repeat(60));
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    for (let i = 0; i < Math.min(5, createdUsers.length); i++) {
      const user = createdUsers[i];
      console.log(`üí∞ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞ –¥–ª—è ${user.username}...`);
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const farmingTx = {
        user_id: user.user_id,
        type: 'FARMING_REWARD',
        amount_uni: '2.5',
        description: `üåæ UNI farming income: 2.5 UNI (level ${user.level} activity)`,
        status: 'completed',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      const { data: farmingTransaction, error: farmingError } = await supabase
        .from('transactions')
        .insert([farmingTx])
        .select()
        .single();
      
      if (!farmingError) {
        console.log(`   ‚úÖ –§–∞—Ä–º–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ID ${farmingTransaction.id}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const newBalance = parseFloat(user.balance_uni) + 2.5;
        await supabase
          .from('users')
          .update({ balance_uni: newBalance.toString() })
          .eq('id', user.user_id);
        
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: +2.5 UNI = ${newBalance} UNI`);
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è user_id=48
  console.log('\nüéØ –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô –î–õ–Ø USER_ID=48:');
  console.log('-'.repeat(60));
  
  const { data: referralRewards, error: rewardsError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', baseUserId)
    .or('description.ilike.%referral%,description.ilike.%bonus%')
    .order('created_at', { ascending: false })
    .limit(20);
  
  if (!rewardsError && referralRewards?.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralRewards.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:`);
    referralRewards.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      console.log(`   ${idx + 1}. ID: ${tx.id} | ${amount} ${currency} | ${tx.description}`);
    });
  } else {
    console.log('üìù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  console.log('\nüí∏ –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:');
  console.log('-'.repeat(60));
  
  const referralCommissions = [];
  
  // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–≤—ã—Ö 5 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
  for (let i = 0; i < Math.min(5, createdUsers.length); i++) {
    const user = createdUsers[i];
    const level = user.level;
    
    // –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é (1 —É—Ä–æ–≤–µ–Ω—å = 100%, –¥–∞–ª–µ–µ 2%-20%)
    let commissionRate;
    if (level === 1) {
      commissionRate = 1.0; // 100%
    } else {
      commissionRate = (level - 1) * 0.01; // 2%, 3%, 4%, 5%
    }
    
    const baseAmount = 2.5; // –û—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const commission = baseAmount * commissionRate;
    
    if (commission > 0) {
      const referralTx = {
        user_id: baseUserId,
        type: 'FARMING_REWARD',
        amount_uni: commission.toFixed(6),
        description: `üë• Referral commission ${(commissionRate * 100).toFixed(0)}% from level ${level} partner (${user.username}): ${commission.toFixed(4)} UNI`,
        status: 'completed',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      referralCommissions.push(referralTx);
    }
  }
  
  if (referralCommissions.length > 0) {
    const { data: createdCommissions, error: commissionError } = await supabase
      .from('transactions')
      .insert(referralCommissions)
      .select();
    
    if (!commissionError) {
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdCommissions.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:`);
      createdCommissions.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. ${tx.amount_uni} UNI - ${tx.description}`);
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const totalCommission = referralCommissions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni), 0);
      const currentBalance = parseFloat(baseUser.balance_uni);
      const newBalance = currentBalance + totalCommission;
      
      await supabase
        .from('users')
        .update({ balance_uni: newBalance.toString() })
        .eq('id', baseUserId);
      
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å user_id=48 –æ–±–Ω–æ–≤–ª–µ–Ω: +${totalCommission.toFixed(4)} UNI`);
    }
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:');
  console.log('='.repeat(60));
  
  const { data: finalStats, error: statsError } = await supabase
    .from('users')
    .select('id, username, balance_uni, balance_ton, referred_by, uni_deposit_amount, ton_boost_package')
    .in('id', [baseUserId, ...createdUsers.map(u => u.user_id)])
    .order('id');
  
  if (!statsError) {
    const totalUsers = finalStats.length;
    const totalUniBalance = finalStats.reduce((sum, u) => sum + parseFloat(u.balance_uni || 0), 0);
    const totalTonBalance = finalStats.reduce((sum, u) => sum + parseFloat(u.balance_ton || 0), 0);
    const activeDeposits = finalStats.filter(u => u.uni_deposit_amount && parseFloat(u.uni_deposit_amount) > 0).length;
    const tonBoostUsers = finalStats.filter(u => u.ton_boost_package).length;
    const referralLinks = finalStats.filter(u => u.referred_by).length;
    
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`üí∞ –û–±—â–∏–π UNI –±–∞–ª–∞–Ω—Å: ${totalUniBalance.toFixed(2)} UNI`);
    console.log(`üí∞ –û–±—â–∏–π TON –±–∞–ª–∞–Ω—Å: ${totalTonBalance.toFixed(2)} TON`);
    console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö UNI –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${activeDeposits}`);
    console.log(`üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${tonBoostUsers}`);
    console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${referralLinks}`);
    
    console.log(`\nüìã User_ID=48 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    const mainUser = finalStats.find(u => u.id === baseUserId);
    if (mainUser) {
      console.log(`   üí∞ UNI –±–∞–ª–∞–Ω—Å: ${mainUser.balance_uni} UNI`);
      console.log(`   üí∞ TON –±–∞–ª–∞–Ω—Å: ${mainUser.balance_ton} TON`);
      console.log(`   üë• –ü—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${finalStats.filter(u => u.referred_by === baseUserId).length}`);
    }
  }
  
  console.log('\n‚úÖ 20-–£–†–û–í–ù–ï–í–ê–Ø –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –°–û–ó–î–ê–ù–ê');
  console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
  
  return {
    created_users: createdUsers,
    total_created: createdUsers.length,
    structure_complete: createdUsers.length === 20
  };
}

createDirectReferralStructure().catch(console.error);