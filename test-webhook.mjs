/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã webhook
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @UniFarming_Bot,
 * —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ webhook –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ 
 * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
 */

import fetch from 'node-fetch';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const API_BASE = `https://api.telegram.org/bot${BOT_TOKEN}`;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!BOT_TOKEN) {
  console.error('\x1b[41m\x1b[1m –û–®–ò–ë–ö–ê \x1b[0m –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
  process.exit(1);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function callTelegramApi(method, data = {}) {
  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–µ—Ç–æ–¥—É ${method}`);
    console.log('   –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
    
    const response = await fetch(`${API_BASE}/${method}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    const result = await response.json();
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${method}:`, JSON.stringify(result, null, 2));
    return result;
  } catch (error) {
    console.error('\x1b[31m–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:\x1b[0m', error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
async function getBotInfo() {
  console.log('\n\x1b[1m\x1b[34m‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\x1b[0m');
  const result = await callTelegramApi('getMe');
  
  if (!result || !result.ok) {
    console.error('\x1b[31m‚úñ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:\x1b[0m', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    process.exit(1);
  }
  
  const botInfo = result.result;
  console.log(`\x1b[32m‚úì –ë–æ—Ç @${botInfo.username} (ID: ${botInfo.id}) –Ω–∞–π–¥–µ–Ω\x1b[0m`);
  console.log(`\x1b[2m  –ò–º—è: ${botInfo.first_name}\x1b[0m`);
  
  return botInfo;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook
async function getWebhookInfo() {
  console.log('\n\x1b[1m\x1b[34m‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook\x1b[0m');
  const result = await callTelegramApi('getWebhookInfo');
  
  if (!result || !result.ok) {
    console.error('\x1b[31m‚úñ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:\x1b[0m', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    process.exit(1);
  }
  
  const webhookInfo = result.result;
  console.log('\x1b[32m‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –ø–æ–ª—É—á–µ–Ω–∞\x1b[0m');
  console.log('\x1b[2m  URL:', webhookInfo.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('  –û–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', webhookInfo.pending_update_count || 0);
  console.log('  –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', webhookInfo.last_error_message || '–Ω–µ—Ç –æ—à–∏–±–æ–∫');
  console.log('  –ú–∞–∫—Å. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', webhookInfo.max_connections || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ');
  console.log('  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', webhookInfo.allowed_updates ? webhookInfo.allowed_updates.join(', ') : '–≤—Å–µ');
  console.log('  IP-–∞–¥—Ä–µ—Å:', webhookInfo.ip_address || '–Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log(`  –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥ –æ—à–∏–±–∫–∏: ${webhookInfo.last_error_date ? webhookInfo.last_error_date : '–Ω–µ—Ç'}\x1b[0m`);
  
  return webhookInfo;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTestMessage(chatId, message) {
  console.log(`\n\x1b[1m\x1b[34m‚û§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}\x1b[0m`);
  
  const data = {
    chat_id: chatId,
    text: message,
    parse_mode: 'HTML'
  };
  
  const result = await callTelegramApi('sendMessage', data);
  
  if (!result || !result.ok) {
    console.error('\x1b[31m‚úñ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\x1b[0m', result?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    return false;
  }
  
  console.log('\x1b[32m‚úì –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\x1b[0m');
  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('\n\x1b[44m\x1b[1m –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ WEBHOOK \x1b[0m\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await getBotInfo();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    const webhookInfo = await getWebhookInfo();
    
    if (!webhookInfo.url) {
      console.error('\x1b[31m‚úñ Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç setup-telegram-mini-app.mjs\x1b[0m');
      process.exit(1);
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è ID —á–∞—Ç–∞
    const chatId = process.argv[2] || 1234567890; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
    
    if (!chatId) {
      console.error('\x1b[31m‚úñ ID —á–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node test-webhook.mjs YOUR_CHAT_ID\x1b[0m');
      process.exit(1);
    }
    
    const testMessage = `
<b>üìß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã webhook.
–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

‚è± –í—Ä–µ–º—è: ${new Date().toISOString()}
ü§ñ –ë–æ—Ç: @${botInfo.username}
`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendTestMessage(chatId, testMessage);
    
    console.log('\n\x1b[42m\x1b[1m –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê \x1b[0m\n');
    console.log('\x1b[33m–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:\x1b[0m');
    console.log('1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞');
    console.log('2. –ó–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É)');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞');
    
  } catch (error) {
    console.error('\n\x1b[41m\x1b[1m –û–®–ò–ë–ö–ê \x1b[0m', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();