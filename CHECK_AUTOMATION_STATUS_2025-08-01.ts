// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ TON Boost
import { supabase } from './core/supabase';

async function checkAutomationStatus() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò TON BOOST');
  console.log('='.repeat(70));

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
  console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô:');
  
  const fixedUsers = [234, 232, 249, 239, 237, 238, 236, 233];
  
  for (const userId of fixedUsers) {
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('farming_balance, boost_active, updated_at')
      .eq('user_id', userId)
      .single();
    
    if (farmingData && farmingData.farming_balance !== '0') {
      console.log(`‚úÖ User ${userId}: farming_balance = ${farmingData.farming_balance} TON, boost_active = ${farmingData.boost_active}`);
    } else {
      console.log(`‚ùå User ${userId}: –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–µ–π (–¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ)
  console.log('\nüî¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–ï–ó –ó–ê–ü–ò–°–ï–ô (–¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):');
  
  const missingUsers = [304, 305, 307];
  
  for (const userId of missingUsers) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –¥–µ–ø–æ–∑–∏—Ç—ã
    const { data: deposits } = await supabase
      .from('transactions')
      .select('amount_ton')
      .eq('user_id', userId)
      .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
      .gte('amount_ton', '0.1');
    
    const totalDeposits = deposits ? deposits.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0) : 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('farming_balance, boost_active')
      .eq('user_id', userId)
      .single();
    
    if (farmingData) {
      console.log(`‚úÖ User ${userId}: –°–û–ó–î–ê–ù–ê –∑–∞–ø–∏—Å—å farming_balance = ${farmingData.farming_balance} TON (–¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits.toFixed(3)} TON)`);
    } else {
      console.log(`‚è≥ User ${userId}: –ó–∞–ø–∏—Å—å –ù–ï –°–û–ó–î–ê–ù–ê, –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits.toFixed(3)} TON - —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏`);
    }
  }

  // 3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  
  const { data: allRecords } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, boost_active, created_at')
    .gte('created_at', '2025-08-01')
    .order('created_at', { ascending: false });
  
  if (allRecords) {
    const correctRecords = allRecords.filter(r => parseFloat(r.farming_balance) > 0);
    const zeroRecords = allRecords.filter(r => parseFloat(r.farming_balance) === 0);
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${allRecords.length}`);
    console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (farming_balance > 0): ${correctRecords.length}`);
    console.log(`‚ùå –ó–∞–ø–∏—Å–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${zeroRecords.length}`);
    
    if (correctRecords.length > 0) {
      console.log('\n‚úÖ –ö–û–†–†–ï–ö–¢–ù–´–ï –ó–ê–ü–ò–°–ò:');
      correctRecords.forEach(r => {
        console.log(`   User ${r.user_id}: ${r.farming_balance} TON, boost_active = ${r.boost_active}`);
      });
    }
  }

  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:');
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  console.log('‚úÖ –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º farming_balance');
}

checkAutomationStatus().catch(console.error);