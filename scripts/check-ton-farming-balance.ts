import { supabase } from '../core/supabase';
import { logger } from '../core/logger';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è farming_balance –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost
 */
async function checkTonFarmingBalance() {
  logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ton_farming_data
    const { data: allUsers, error: allError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .order('user_id');
      
    if (allError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', allError);
      return;
    }
    
    logger.info(`\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${allUsers?.length || 0}`);
    
    // 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const activeUsers = allUsers?.filter(u => u.is_active) || [];
    const inactiveUsers = allUsers?.filter(u => !u.is_active) || [];
    const usersWithPackage = allUsers?.filter(u => u.boost_package_id > 0) || [];
    
    logger.info(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (is_active=true): ${activeUsers.length}`);
    logger.info(`‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (is_active=false): ${inactiveUsers.length}`);
    logger.info(`üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å boost –ø–∞–∫–µ—Ç–∞–º–∏: ${usersWithPackage.length}`);
    
    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–∫–µ—Ç–∞–º–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç is_active)
    const packageUsersWithZeroBalance = usersWithPackage.filter(u => u.farming_balance === 0 || u.farming_balance === null);
    const packageUsersWithBalance = usersWithPackage.filter(u => u.farming_balance > 0);
    
    logger.info(`\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å boost –ø–∞–∫–µ—Ç–∞–º–∏:`);
    logger.info(`  - –° –Ω—É–ª–µ–≤—ã–º farming_balance: ${packageUsersWithZeroBalance.length}`);
    logger.info(`  - –° –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º farming_balance: ${packageUsersWithBalance.length}`);
    
    // 4. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    if (packageUsersWithZeroBalance.length > 0) {
      logger.info(`\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω—É–ª–µ–≤—ã–º farming_balance (—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):`);
      for (const user of packageUsersWithZeroBalance) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∫—É–ø–∫–∏
        const { data: purchase } = await supabase
          .from('boost_purchases')
          .select('required_amount, created_at')
          .eq('user_id', user.user_id)
          .eq('boost_type', 'TON_BOOST')
          .order('created_at', { ascending: false })
          .limit(1)
          .single();
          
        logger.info(`  User ${user.user_id}:`);
        logger.info(`    - Package ID: ${user.boost_package_id}`);
        logger.info(`    - Farming balance: ${user.farming_balance || 0} TON`);
        logger.info(`    - Last purchase: ${purchase ? `${purchase.required_amount} TON (${purchase.created_at})` : '–ù–µ—Ç –∑–∞–ø–∏—Å–∏'}`);
      }
    }
    
    // 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –±–∞–ª–∞–Ω—Å–æ–º
    if (packageUsersWithBalance.length > 0) {
      logger.info(`\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º farming_balance:`);
      for (const user of packageUsersWithBalance) {
        logger.info(`  User ${user.user_id}: ${user.farming_balance} TON (–ø–∞–∫–µ—Ç ${user.boost_package_id})`);
      }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalFarmingBalance = usersWithPackage.reduce((sum, u) => sum + (u.farming_balance || 0), 0);
    const avgFarmingBalance = usersWithPackage.length > 0 ? totalFarmingBalance / usersWithPackage.length : 0;
    
    logger.info(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    logger.info(`  - –û–±—â–∏–π farming_balance: ${totalFarmingBalance.toFixed(2)} TON`);
    logger.info(`  - –°—Ä–µ–¥–Ω–∏–π farming_balance: ${avgFarmingBalance.toFixed(2)} TON`);
    
    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (packageUsersWithZeroBalance.length > 0) {
      logger.info(`\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ${packageUsersWithZeroBalance.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      logger.info(`   tsx scripts/fix-ton-farming-balance.ts --confirm`);
    } else {
      logger.info(`\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å boost –ø–∞–∫–µ—Ç–∞–º–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π farming_balance`);
    }
    
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTonFarmingBalance()
  .then(() => {
    logger.info('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });