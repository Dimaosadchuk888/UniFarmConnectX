import { supabase } from '../core/supabase.js';

async function analyzeTableDiscrepancies() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò');
  console.log('='.repeat(80));
  console.log('');

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ UNI –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä UNI FARMING –ê–ù–ê–õ–ò–ó:\n');

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –≤ users
    const { data: usersWithUni } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount, uni_farming_active, uni_farming_balance')
      .gt('uni_deposit_amount', 0)
      .order('id');

    // –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ uni_farming_data
    const { data: uniFarmingRecords } = await supabase
      .from('uni_farming_data')
      .select('*')
      .order('user_id');

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ (users): ${usersWithUni?.length || 0}`);
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ uni_farming_data: ${uniFarmingRecords?.length || 0}`);
    console.log('');

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ uni_farming_data –Ω–æ –Ω–µ—Ç –≤ users
    if (usersWithUni && uniFarmingRecords) {
      const userIds = new Set(usersWithUni.map(u => u.id));
      const farmingUserIds = new Set(uniFarmingRecords.map(f => f.user_id));
      
      const onlyInFarming = [...farmingUserIds].filter(id => !userIds.has(id));
      const onlyInUsers = [...userIds].filter(id => !farmingUserIds.has(id));

      if (onlyInFarming.length > 0) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¢–û–õ–¨–ö–û –≤ uni_farming_data: ${onlyInFarming.join(', ')}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ–æ–±—â–µ –≤ users
        const { data: checkUsers } = await supabase
          .from('users')
          .select('id, uni_deposit_amount')
          .in('id', onlyInFarming);
        
        if (checkUsers) {
          console.log('   –î–µ—Ç–∞–ª–∏:');
          checkUsers.forEach(u => {
            console.log(`   - User ${u.id}: uni_deposit_amount = ${u.uni_deposit_amount}`);
          });
        }
        console.log('');
      }

      if (onlyInUsers.length > 0) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¢–û–õ–¨–ö–û –≤ users (—Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏): ${onlyInUsers.join(', ')}`);
        console.log('');
      }

      // –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö
      console.log('üìã –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö:');
      let discrepancyCount = 0;
      
      uniFarmingRecords.forEach(farming => {
        const user = usersWithUni.find(u => u.id === farming.user_id);
        if (user) {
          const issues = [];
          
          if (user.balance_uni !== farming.balance) {
            issues.push(`balance: ${farming.balance} vs ${user.balance_uni}`);
          }
          if (user.uni_deposit_amount !== farming.deposit_amount) {
            issues.push(`deposit: ${farming.deposit_amount} vs ${user.uni_deposit_amount}`);
          }
          if (user.uni_farming_active !== farming.is_active) {
            issues.push(`active: ${farming.is_active} vs ${user.uni_farming_active}`);
          }
          if (user.uni_farming_balance !== farming.farming_balance) {
            issues.push(`farming_balance: ${farming.farming_balance} vs ${user.uni_farming_balance}`);
          }
          
          if (issues.length > 0) {
            discrepancyCount++;
            if (discrepancyCount <= 5) {
              console.log(`   User ${user.id}: ${issues.join(', ')}`);
            }
          }
        }
      });
      
      if (discrepancyCount > 5) {
        console.log(`   ... –∏ –µ—â–µ ${discrepancyCount - 5} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π`);
      }
      console.log('');
    }

    // 2. –ê–Ω–∞–ª–∏–∑ TON –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä TON FARMING –ê–ù–ê–õ–ò–ó:\n');

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON –∫–æ—à–µ–ª—å–∫–∞–º–∏
    const { data: usersWithTon } = await supabase
      .from('users')
      .select('id, ton_wallet_address, ton_farming_balance, ton_boost_package')
      .not('ton_wallet_address', 'is', null)
      .order('id');

    // –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ton_farming_data
    const { data: tonFarmingRecords } = await supabase
      .from('ton_farming_data')
      .select('*')
      .order('user_id');

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –∫–æ—à–µ–ª—å–∫–∞–º–∏ (users): ${usersWithTon?.length || 0}`);
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${tonFarmingRecords?.length || 0}`);
    console.log('');

    if (usersWithTon && tonFarmingRecords) {
      const tonUserIds = new Set(usersWithTon.map(u => u.id));
      const tonFarmingIds = new Set(tonFarmingRecords.map(f => f.user_id));
      
      const onlyInTonFarming = [...tonFarmingIds].filter(id => !tonUserIds.has(id));
      const onlyInTonUsers = [...tonUserIds].filter(id => !tonFarmingIds.has(id));

      if (onlyInTonFarming.length > 0) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¢–û–õ–¨–ö–û –≤ ton_farming_data: ${onlyInTonFarming.join(', ')}`);
        console.log('');
      }

      if (onlyInTonUsers.length > 0) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¢–û–õ–¨–ö–û –≤ users (—Å –∫–æ—à–µ–ª—å–∫–∞–º–∏): ${onlyInTonUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        console.log(`   IDs: ${onlyInTonUsers.slice(0, 10).join(', ')}${onlyInTonUsers.length > 10 ? '...' : ''}`);
        console.log('');
      }
    }

    // 3. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîó –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•:\n');

    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ API –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
    console.log('–¢–∞–±–ª–∏—Ü–∞ USERS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:');
    console.log('- /api/v2/balance - –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å');
    console.log('- /api/v2/uni-farming/* - UNI —Ñ–∞—Ä–º–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('- /api/v2/ton-boost/* - TON boost –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('- Schedulers –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤');
    console.log('');

    console.log('–¢–∞–±–ª–∏—Ü–∞ UNI_FARMING_DATA –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:');
    console.log('- UniFarmingRepository (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)');
    console.log('- –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ API');
    console.log('');

    console.log('–¢–∞–±–ª–∏—Ü–∞ TON_FARMING_DATA –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:');
    console.log('- TonFarmingRepository (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)');
    console.log('- –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ API');
    console.log('');

    // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:\n');

    console.log('1. –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('   - –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ farming_data —Ç–∞–±–ª–∏—Ü –≤ users');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è');
    console.log('');

    console.log('2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï:');
    console.log('   üìå –¢–∞–±–ª–∏—Ü–∞ USERS –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã');
    console.log('   üìå farming_data —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è (legacy)');
    console.log('   üìå –í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ users');
    console.log('   üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å views –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
    console.log('');

    console.log('3. –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log('   –§–∞–∑–∞ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ)');
    console.log('   –§–∞–∑–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ views');
    console.log('   –§–∞–∑–∞ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –≤ users');
    console.log('   –§–∞–∑–∞ 4: –ü–µ—Ä–µ–≤–æ–¥ —á—Ç–µ–Ω–∏—è –Ω–∞ users');
    console.log('   –§–∞–∑–∞ 5: –ê—Ä—Ö–∏–≤–∞—Ü–∏—è farming_data —Ç–∞–±–ª–∏—Ü');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π...\n');
analyzeTableDiscrepancies();