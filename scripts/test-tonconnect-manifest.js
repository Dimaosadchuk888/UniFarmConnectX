import fetch from 'node-fetch';

const BASE_URL = 'https://uni-farm-connect-unifarm01010101.replit.app';

async function testTonConnectManifest() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...\n');
  
  // 1. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É
  console.log('1Ô∏è‚É£ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ /tonconnect-manifest.json:');
  try {
    const response = await fetch(`${BASE_URL}/tonconnect-manifest.json`, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json'
      }
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`   Headers:`, Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const text = await response.text();
      console.log(`   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${text.length} –±–∞–π—Ç`);
      try {
        const json = JSON.parse(text);
        console.log(`   ‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π:`);
        console.log(JSON.stringify(json, null, 2));
      } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, e.message);
        console.log(`   –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:`, text.substring(0, 200));
      }
    } else {
      const text = await response.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${response.status}:`);
      console.log(`   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:`, text.substring(0, 500));
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error.message);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å
  console.log('\n2Ô∏è‚É£ HEAD –∑–∞–ø—Ä–æ—Å –∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É:');
  try {
    const response = await fetch(`${BASE_URL}/tonconnect-manifest.json`, {
      method: 'HEAD'
    });
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);
    console.log(`   Content-Length: ${response.headers.get('content-length')}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π:');
  const paths = [
    '/tonconnect-manifest.json',
    '/.well-known/tonconnect-manifest.json',
    '/api/tonconnect-manifest.json',
    '/public/tonconnect-manifest.json'
  ];
  
  for (const path of paths) {
    try {
      const response = await fetch(`${BASE_URL}${path}`, { method: 'HEAD' });
      console.log(`   ${path}: ${response.status} ${response.statusText}`);
    } catch (error) {
      console.log(`   ${path}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`);
    }
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:');
  const resources = [
    '/assets/unifarm-icon.svg',
    '/test-ton-connect.html',
    '/health'
  ];
  
  for (const resource of resources) {
    try {
      const response = await fetch(`${BASE_URL}${resource}`, { method: 'HEAD' });
      console.log(`   ${resource}: ${response.status} ${response.statusText}`);
    } catch (error) {
      console.log(`   ${resource}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`);
    }
  }
}

testTonConnectManifest().catch(console.error);