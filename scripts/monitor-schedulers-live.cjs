#!/usr/bin/env node

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã scheduler'–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
const previousStates = new Map();
const startTime = Date.now();

async function monitorSchedulers() {
  console.clear();
  console.log(colors.cyan + '=== –ú–û–ù–ò–¢–û–†–ò–ù–ì SCHEDULER\'–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò ===' + colors.reset);
  console.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor((Date.now() - startTime) / 1000)} —Å–µ–∫`);
  console.log(new Date().toLocaleString('ru-RU'));
  console.log('');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    console.log(colors.blue + 'üìä –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:' + colors.reset);
    console.log('-----------------------------------');
    
    const { data: recentTx, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['FARMING_REWARD', 'TON_BOOST_INCOME', 'REFERRAL_REWARD'])
      .order('created_at', { ascending: false })
      .limit(10);

    if (!txError && recentTx && recentTx.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${recentTx.length}`);
      
      recentTx.forEach((tx, index) => {
        const age = (Date.now() - new Date(tx.created_at).getTime()) / 1000;
        const ageStr = age < 60 ? `${age.toFixed(0)}—Å –Ω–∞–∑–∞–¥` : `${(age/60).toFixed(1)}–º –Ω–∞–∑–∞–¥`;
        
        let color = colors.green;
        if (age > 300) color = colors.red; // –ë–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç - –∫—Ä–∞—Å–Ω—ã–π
        else if (age > 60) color = colors.yellow; // –ë–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã - –∂–µ–ª—Ç—ã–π
        
        const amount = tx.amount_uni || tx.amount_ton || 0;
        const currency = tx.amount_uni ? 'UNI' : 'TON';
        
        console.log(`${index + 1}. ${color}[${ageStr}]${colors.reset} User ${tx.user_id}: ${tx.type} +${parseFloat(amount).toFixed(6)} ${currency}`);
      });
      
      // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const lastTxTime = new Date(recentTx[0].created_at).getTime();
      const timeSinceLastTx = (Date.now() - lastTxTime) / 1000;
      
      if (timeSinceLastTx < 30) {
        console.log(colors.green + '\n‚úÖ Scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ' + timeSinceLastTx.toFixed(0) + ' —Å–µ–∫ –Ω–∞–∑–∞–¥' + colors.reset);
      } else if (timeSinceLastTx < 300) {
        console.log(colors.yellow + '\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞. –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ' + (timeSinceLastTx/60).toFixed(1) + ' –º–∏–Ω –Ω–∞–∑–∞–¥' + colors.reset);
      } else {
        console.log(colors.red + '\n‚ùå Scheduler –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ' + (timeSinceLastTx/60).toFixed(0) + ' –º–∏–Ω –Ω–∞–∑–∞–¥' + colors.reset);
      }
    } else {
      console.log(colors.red + '‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!' + colors.reset);
    }

    // 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n' + colors.blue + 'üí∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ê–õ–ê–ù–°–û–í (—Ç–æ–ø 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö):' + colors.reset);
    console.log('-----------------------------------------');
    
    const { data: activeUsers, error: userError } = await supabase
      .from('users')
      .select('id, username, balance_uni, balance_ton, uni_farming_active, ton_boost_active, uni_farming_last_update')
      .or('uni_farming_active.eq.true,ton_boost_active.eq.true')
      .order('uni_farming_last_update', { ascending: false })
      .limit(5);

    if (!userError && activeUsers) {
      activeUsers.forEach(user => {
        const prevState = previousStates.get(user.id);
        
        let uniChange = '';
        let tonChange = '';
        
        if (prevState) {
          const uniDiff = user.balance_uni - prevState.balance_uni;
          const tonDiff = user.balance_ton - prevState.balance_ton;
          
          if (Math.abs(uniDiff) > 0.000001) {
            uniChange = uniDiff > 0 
              ? colors.green + ` (+${uniDiff.toFixed(6)})` + colors.reset
              : colors.red + ` (${uniDiff.toFixed(6)})` + colors.reset;
          }
          
          if (Math.abs(tonDiff) > 0.000001) {
            tonChange = tonDiff > 0 
              ? colors.green + ` (+${tonDiff.toFixed(6)})` + colors.reset
              : colors.red + ` (${tonDiff.toFixed(6)})` + colors.reset;
          }
        }
        
        console.log(`User ${user.id} (@${user.username}):`);
        console.log(`  UNI: ${user.balance_uni.toFixed(6)}${uniChange}`);
        console.log(`  TON: ${user.balance_ton.toFixed(6)}${tonChange}`);
        console.log(`  –§–∞—Ä–º–∏–Ω–≥: ${user.uni_farming_active ? '‚úÖ' : '‚ùå'} | TON Boost: ${user.ton_boost_active ? '‚úÖ' : '‚ùå'}`);
        
        if (user.uni_farming_last_update) {
          const updateAge = (Date.now() - new Date(user.uni_farming_last_update).getTime()) / 1000 / 60;
          console.log(`  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateAge.toFixed(1)} –º–∏–Ω –Ω–∞–∑–∞–¥`);
        }
        console.log('');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        previousStates.set(user.id, {
          balance_uni: user.balance_uni,
          balance_ton: user.balance_ton
        });
      });
    }

    // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    console.log(colors.blue + 'üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°:' + colors.reset);
    console.log('-------------------------------');
    
    const hourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    
    const { data: hourlyStats, error: statsError } = await supabase
      .from('transactions')
      .select('type')
      .in('type', ['FARMING_REWARD', 'TON_BOOST_INCOME', 'REFERRAL_REWARD'])
      .gte('created_at', hourAgo);

    if (!statsError && hourlyStats) {
      const stats = {
        FARMING_REWARD: 0,
        TON_BOOST_INCOME: 0,
        REFERRAL_REWARD: 0
      };
      
      hourlyStats.forEach(tx => {
        stats[tx.type] = (stats[tx.type] || 0) + 1;
      });
      
      console.log(`‚Ä¢ FARMING_REWARD: ${stats.FARMING_REWARD} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`‚Ä¢ TON_BOOST_INCOME: ${stats.TON_BOOST_INCOME} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`‚Ä¢ REFERRAL_REWARD: ${stats.REFERRAL_REWARD} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`‚Ä¢ –í–°–ï–ì–û: ${hourlyStats.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }

    console.log('\n' + colors.magenta + '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.' + colors.reset);

  } catch (error) {
    console.error(colors.red + '\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error + colors.reset);
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
console.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ scheduler\'–æ–≤...');
monitorSchedulers();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(monitorSchedulers, 10000);

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  process.exit(0);
});