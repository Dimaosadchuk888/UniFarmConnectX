import { supabase } from '../core/supabase.js';

interface FieldAnalysis {
  fieldName: string;
  totalRecords: number;
  nonNullCount: number;
  nonZeroCount: number;
  uniqueValues: number;
  sampleValues: any[];
  isEmpty: boolean;
  recommendation: string;
}

interface DuplicateAnalysis {
  field1: string;
  field2: string;
  identicalCount: number;
  differentCount: number;
  canMerge: boolean;
  recommendation: string;
}

async function analyzeFieldDataPresence() {
  console.log('üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–õ–ò–ß–ò–Ø –î–ê–ù–ù–´–• –í –ü–û–õ–Ø–• –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
  console.log('================================================================================\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .order('id');

    if (error) throw error;
    
    const totalUsers = users?.length || 0;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
    const fieldsToAnalyze = [
      // –ë–∞–ª–∞–Ω—Å—ã
      'balance_uni', 'uni_farming_balance',
      'balance_ton', 'ton_farming_balance',
      
      // –î–µ–ø–æ–∑–∏—Ç—ã
      'uni_deposit_amount', 'uni_farming_deposit',
      
      // TON boost
      'ton_boost_package', 'ton_boost_package_id',
      
      // –°—Ç–∞–≤–∫–∏
      'uni_farming_rate', 'ton_farming_rate', 'ton_boost_rate',
      
      // Timestamps
      'uni_farming_start_timestamp', 'ton_farming_start_timestamp',
      
      // –ê–¥—Ä–µ—Å–∞
      'wallet', 'ton_wallet_address',
      
      // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      'uni_farming_active', 'ton_farming_active',
      
      // –î—Ä—É–≥–∏–µ –ø–æ–ª—è
      'ref_code', 'inviter_ref_code',
      'level', 'xp', 'referrals_count',
      'referral_bonus_amount', 'referral_bonus_claimed'
    ];

    const fieldAnalysis: { [key: string]: FieldAnalysis } = {};

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    for (const field of fieldsToAnalyze) {
      if (field in (users?.[0] || {})) {
        const values = users!.map(u => u[field]);
        const nonNullValues = values.filter(v => v !== null && v !== undefined);
        const nonZeroValues = values.filter(v => v !== null && v !== undefined && v !== 0 && v !== '0' && v !== false);
        const uniqueValues = new Set(nonNullValues);
        
        fieldAnalysis[field] = {
          fieldName: field,
          totalRecords: totalUsers,
          nonNullCount: nonNullValues.length,
          nonZeroCount: nonZeroValues.length,
          uniqueValues: uniqueValues.size,
          sampleValues: Array.from(uniqueValues).slice(0, 5),
          isEmpty: nonZeroValues.length === 0,
          recommendation: ''
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (fieldAnalysis[field].isEmpty) {
          fieldAnalysis[field].recommendation = 'üóëÔ∏è –£–î–ê–õ–ò–¢–¨ - –ø–æ–ª–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö';
        } else if (fieldAnalysis[field].nonZeroCount < 5) {
          fieldAnalysis[field].recommendation = '‚ö†Ô∏è –ü–†–û–í–ï–†–ò–¢–¨ - –æ—á–µ–Ω—å –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö';
        } else {
          fieldAnalysis[field].recommendation = '‚úÖ –°–û–•–†–ê–ù–ò–¢–¨ - –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
    console.log('üìä –ê–ù–ê–õ–ò–ó –ù–ê–õ–ò–ß–ò–Ø –î–ê–ù–ù–´–• –í –ü–û–õ–Ø–•:\n');
    console.log('================================================================================\n');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('üè¶ –ë–ê–õ–ê–ù–°–´:\n');
    ['balance_uni', 'uni_farming_balance', 'balance_ton', 'ton_farming_balance'].forEach(field => {
      if (fieldAnalysis[field]) {
        printFieldAnalysis(fieldAnalysis[field]);
      }
    });

    console.log('\nüí∞ –î–ï–ü–û–ó–ò–¢–´:\n');
    ['uni_deposit_amount', 'uni_farming_deposit'].forEach(field => {
      if (fieldAnalysis[field]) {
        printFieldAnalysis(fieldAnalysis[field]);
      }
    });

    console.log('\nüöÄ TON BOOST:\n');
    ['ton_boost_package', 'ton_boost_package_id'].forEach(field => {
      if (fieldAnalysis[field]) {
        printFieldAnalysis(fieldAnalysis[field]);
      }
    });

    console.log('\nüìà –°–¢–ê–í–ö–ò –§–ê–†–ú–ò–ù–ì–ê:\n');
    ['uni_farming_rate', 'ton_farming_rate', 'ton_boost_rate'].forEach(field => {
      if (fieldAnalysis[field]) {
        printFieldAnalysis(fieldAnalysis[field]);
      }
    });

    console.log('\nüè† –ê–î–†–ï–°–ê –ö–û–®–ï–õ–¨–ö–û–í:\n');
    ['wallet', 'ton_wallet_address'].forEach(field => {
      if (fieldAnalysis[field]) {
        printFieldAnalysis(fieldAnalysis[field]);
      }
    });

    // –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\n\nüîÑ –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ü–û–õ–ï–ô:\n');
    console.log('================================================================================\n');

    const duplicatePairs = [
      ['balance_uni', 'uni_farming_balance'],
      ['balance_ton', 'ton_farming_balance'],
      ['uni_deposit_amount', 'uni_farming_deposit'],
      ['ton_boost_package', 'ton_boost_package_id'],
      ['ton_farming_rate', 'ton_boost_rate'],
      ['wallet', 'ton_wallet_address']
    ];

    const duplicateAnalysis: DuplicateAnalysis[] = [];

    for (const [field1, field2] of duplicatePairs) {
      if (field1 in (users?.[0] || {}) && field2 in (users?.[0] || {})) {
        let identicalCount = 0;
        let differentCount = 0;

        users!.forEach(user => {
          const val1 = user[field1];
          const val2 = user[field2];
          
          // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
          const normalizedVal1 = typeof val1 === 'number' || !isNaN(Number(val1)) ? Number(val1) : val1;
          const normalizedVal2 = typeof val2 === 'number' || !isNaN(Number(val2)) ? Number(val2) : val2;

          if (normalizedVal1 === normalizedVal2) {
            identicalCount++;
          } else {
            differentCount++;
          }
        });

        const analysis: DuplicateAnalysis = {
          field1,
          field2,
          identicalCount,
          differentCount,
          canMerge: differentCount === 0,
          recommendation: ''
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é
        if (fieldAnalysis[field1]?.isEmpty && !fieldAnalysis[field2]?.isEmpty) {
          analysis.recommendation = `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${field1} (–ø—É—Å—Ç–æ–µ) ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${field2}`;
        } else if (!fieldAnalysis[field1]?.isEmpty && fieldAnalysis[field2]?.isEmpty) {
          analysis.recommendation = `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${field2} (–ø—É—Å—Ç–æ–µ) ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${field1}`;
        } else if (analysis.canMerge) {
          analysis.recommendation = `‚úÖ –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å - –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã`;
        } else {
          analysis.recommendation = `‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è`;
        }

        duplicateAnalysis.push(analysis);
      }
    }

    // –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    duplicateAnalysis.forEach(analysis => {
      console.log(`üìå ${analysis.field1} vs ${analysis.field2}`);
      console.log(`   –ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${analysis.identicalCount}/${totalUsers}`);
      console.log(`   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${analysis.differentCount}`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${analysis.recommendation}\n`);
    });

    // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    console.log('================================================================================\n');

    console.log('üóëÔ∏è –ü–û–õ–Ø –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø (–ø—É—Å—Ç—ã–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è):\n');
    Object.values(fieldAnalysis)
      .filter(f => f.isEmpty)
      .forEach(f => console.log(`   - ${f.fieldName}`));

    console.log('\n\n‚úÖ –ü–û–õ–Ø –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò (—Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ):\n');
    duplicateAnalysis
      .filter(d => d.canMerge && !fieldAnalysis[d.field1]?.isEmpty && !fieldAnalysis[d.field2]?.isEmpty)
      .forEach(d => console.log(`   - ${d.field1} ‚Üê ‚Üí ${d.field2}`));

    console.log('\n\n‚ö†Ô∏è –ü–û–õ–Ø –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø (–µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è):\n');
    duplicateAnalysis
      .filter(d => !d.canMerge && d.differentCount > 0)
      .forEach(d => console.log(`   - ${d.field1} vs ${d.field2} (${d.differentCount} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π)`));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n\nüì¶ –ê–ù–ê–õ–ò–ó –°–¢–ê–†–´–• –¢–ê–ë–õ–ò–¶:\n');
    console.log('================================================================================\n');

    const oldTables = ['uni_farming_data', 'ton_farming_data', 'userBalances'];
    
    for (const table of oldTables) {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (!error) {
        console.log(`${table}: ${count || 0} –∑–∞–ø–∏—Å–µ–π ${count === 0 ? 'üóëÔ∏è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)' : '‚ö†Ô∏è (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ)'}`);
      } else {
        console.log(`${table}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úÖ`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

function printFieldAnalysis(analysis: FieldAnalysis) {
  console.log(`${analysis.fieldName}:`);
  console.log(`   –ù–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${analysis.nonNullCount}/${analysis.totalRecords}`);
  console.log(`   –ù–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${analysis.nonZeroCount}/${analysis.totalRecords}`);
  console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${analysis.uniqueValues}`);
  if (analysis.sampleValues.length > 0) {
    console.log(`   –ü—Ä–∏–º–µ—Ä—ã: ${analysis.sampleValues.slice(0, 3).join(', ')}`);
  }
  console.log(`   ${analysis.recommendation}\n`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeFieldDataPresence().then(() => {
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(err => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});