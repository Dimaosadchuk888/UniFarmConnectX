/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ TON Boost
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost
 */

import { supabase } from '../core/supabase';
import { logger } from '../core/logger';

interface UserWithMissingFarmingData {
  id: number;
  ton_boost_active: boolean;
  ton_boost_package: number;
  ton_boost_rate: string;
  ton_farming_balance: string;
  ton_farming_start_timestamp: string | null;
}

async function migrationFixTonFarmingDeposits() {
  console.log('üîß –ú–ò–ì–†–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ TON Boost');
  console.log('=' .repeat(70));
  
  try {
    // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost
    console.log('\nüìã –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost');
    
    const { data: activeBoostUsers, error: usersError } = await supabase
      .from('users')
      .select(`
        id, 
        ton_boost_active, 
        ton_boost_package, 
        ton_boost_rate, 
        ton_farming_balance,
        ton_farming_start_timestamp
      `)
      .eq('ton_boost_active', true)
      .not('ton_boost_package', 'is', null);
    
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${activeBoostUsers?.length || 0}`);
    
    if (!activeBoostUsers || activeBoostUsers.length === 0) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ ton_farming_data
    console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data');
    
    const userIds = activeBoostUsers.map(u => u.id.toString());
    const { data: existingFarmingRecords, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_package_id')
      .in('user_id', userIds);
    
    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:', farmingError);
      return;
    }
    
    const existingUserIds = new Set(existingFarmingRecords?.map(r => r.user_id) || []);
    const missingUsers = activeBoostUsers.filter(user => !existingUserIds.has(user.id.toString()));
    
    console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${existingFarmingRecords?.length || 0}`);
    console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${missingUsers.length}`);
    
    if (missingUsers.length === 0) {
      console.log('üéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      let syncIssues = 0;
      
      activeBoostUsers.forEach(user => {
        const farmingRecord = existingFarmingRecords?.find(f => f.user_id === user.id.toString());
        if (farmingRecord) {
          const userBalance = parseFloat(user.ton_farming_balance || '0');
          const farmingBalance = parseFloat(farmingRecord.farming_balance || '0');
          
          if (Math.abs(userBalance - farmingBalance) > 0.000001) {
            console.log(`‚ö†Ô∏è  User ${user.id}: –ë–∞–ª–∞–Ω—Å –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω (users: ${userBalance}, farming: ${farmingBalance})`);
            syncIssues++;
          }
        }
      });
      
      if (syncIssues === 0) {
        console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      } else {
        console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${syncIssues} –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
      }
      
      return;
    }
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ ton_farming_data
    console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${missingUsers.map(u => u.id).join(', ')}`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const user of missingUsers) {
      try {
        console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ User ${user.id}`);
        
        const farmingBalance = parseFloat(user.ton_farming_balance || '0');
        const farmingRate = parseFloat(user.ton_boost_rate || '0.01');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥
        const dailyIncome = farmingBalance * farmingRate;
        
        const farmingData = {
          user_id: user.id.toString(), // STRING –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          farming_balance: farmingBalance.toString(),
          farming_rate: farmingRate.toString(),
          farming_start_timestamp: user.ton_farming_start_timestamp || new Date().toISOString(),
          farming_last_update: new Date().toISOString(),
          farming_accumulated: '0',
          farming_last_claim: null,
          boost_active: true,
          boost_package_id: user.ton_boost_package,
          boost_expires_at: null, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
          daily_income: dailyIncome.toString(),
          total_earned: '0',
          last_claim: null,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        console.log(`   üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: balance=${farmingBalance}, rate=${farmingRate}, daily=${dailyIncome.toFixed(6)}`);
        
        const { data: insertResult, error: insertError } = await supabase
          .from('ton_farming_data')
          .insert(farmingData)
          .select();
        
        if (insertError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è User ${user.id}:`, insertError);
          errorCount++;
        } else {
          console.log(`   ‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è User ${user.id}`);
          successCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è User ${user.id}:`, error);
        errorCount++;
      }
    }
    
    // –®–∞–≥ 4: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${missingUsers.length}`);
    
    if (successCount > 0) {
      console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
      console.log('- –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON Boost —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
      console.log('- –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('- –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏');
    }
    
    if (errorCount > 0) {
      console.log('\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´');
      console.log('- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å');
      console.log('- –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¢–û–õ–¨–ö–û –≤ ton_farming_data');
console.log('‚ö†Ô∏è  –û–Ω–∞ –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users');
console.log('‚ö†Ô∏è  –û–Ω–∞ –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
console.log('‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...\n');

setTimeout(() => {
  migrationFixTonFarmingDeposits().then(() => {
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  });
}, 10000);