/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è TON Farming
 */

import { supabase } from '../core/supabase.js';
import { BoostService } from '../modules/boost/service.js';

async function verifyFix() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TON FARMING ===\n');

  const userId = '74';
  const boostService = new BoostService();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
  const { data: userData } = await supabase
    .from('users')
    .select('balance_ton')
    .eq('id', userId)
    .single();
    
  const { data: farmingData } = await supabase
    .from('ton_farming_data')
    .select('farming_balance')
    .eq('user_id', userId)
    .single();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
  const apiResult = await boostService.getTonBoostFarmingStatus(userId);
  const deposit = apiResult.deposits[0];
  
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n');
  console.log('–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ (balance_ton):', userData?.balance_ton, 'TON');
  console.log('–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (farming_balance):', farmingData?.farming_balance, 'TON');
  console.log('API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (amount):', deposit?.amount, 'TON');
  
  const isFixed = deposit?.amount === farmingData?.farming_balance;
  
  if (isFixed) {
    console.log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('   API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç farming_balance –≤–º–µ—Å—Ç–æ balance_ton');
    console.log('   UI –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  } else {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –£–°–¢–†–ê–ù–ï–ù–ê');
  }
  
  console.log('\nüìà –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞:');
  console.log('   –ë–∞–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:', farmingData?.farming_balance, 'TON');
  console.log('   –°—Ç–∞–≤–∫–∞:', deposit?.rate + '% –≤ –¥–µ–Ω—å');
  console.log('   –î–æ—Ö–æ–¥:', (parseFloat(farmingData?.farming_balance || '0') * parseFloat(deposit?.rate || '0') / 100).toFixed(2), 'TON/–¥–µ–Ω—å');
}

verifyFix()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });