/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å boost_active
 */

import { supabase } from '../core/supabase';
import { logger } from '../core/logger';

async function monitorTonBoostHealth() {
  console.log('\n' + '='.repeat(80));
  console.log('–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–Ø TON BOOST');
  console.log('–í—Ä–µ–º—è: ' + new Date().toISOString());
  console.log('='.repeat(80) + '\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON farming
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    const { data: recentTx, count } = await supabase
      .from('transactions')
      .select('*', { count: 'exact' })
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .gte('created_at', oneHourAgo);
    
    console.log(`1. TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${count || 0}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤
    const { data: activeFarmers } = await supabase
      .from('ton_farming_data')
      .select('*')
      .gt('farming_balance', 0);
    
    console.log(`2. –í—Å–µ–≥–æ —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º > 0: ${activeFarmers?.length || 0}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å boost_active = true
    const { data: activeBoostUsers, count: activeCount } = await supabase
      .from('ton_farming_data')
      .select('*', { count: 'exact' })
      .eq('boost_active', true)
      .gt('farming_balance', 0);
    
    console.log(`3. –§–∞—Ä–º–µ—Ä–æ–≤ —Å boost_active = TRUE: ${activeCount || 0}`);
    
    // 4. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤
    const { data: inactiveFarmers } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', false)
      .gt('farming_balance', 0)
      .gt('boost_package_id', 0);
    
    console.log(`4. –§–∞—Ä–º–µ—Ä–æ–≤ —Å boost_active = FALSE: ${inactiveFarmers?.length || 0}`);
    
    // 5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (inactiveFarmers && inactiveFarmers.length > 0) {
      console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê!');
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${inactiveFarmers.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏:`);
      
      inactiveFarmers.forEach(f => {
        console.log(`  - User ${f.user_id}: ${f.farming_balance} TON, package #${f.boost_package_id}`);
      });
      
      console.log('\nüîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
      
      const { data: fixedUsers, error } = await supabase
        .from('ton_farming_data')
        .update({ 
          boost_active: true,
          updated_at: new Date().toISOString()
        })
        .eq('boost_active', false)
        .gt('farming_balance', 0)
        .gt('boost_package_id', 0)
        .select();
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
      } else {
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedUsers?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
        logger.info('[TON_BOOST_HEALTH] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞—Ä–º–µ—Ä–æ–≤:', fixedUsers?.length || 0);
      }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:');
    if (activeFarmers && activeFarmers.length > 0) {
      const now = Date.now();
      let stuckCount = 0;
      
      activeFarmers.forEach(f => {
        if (f.farming_last_update) {
          const lastUpdate = new Date(f.farming_last_update).getTime();
          const minutesAgo = Math.floor((now - lastUpdate) / (1000 * 60));
          
          if (minutesAgo > 15) {
            stuckCount++;
            console.log(`  ‚ö†Ô∏è  User ${f.user_id}: –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è ${minutesAgo} –º–∏–Ω—É—Ç`);
          }
        }
      });
      
      if (stuckCount > 0) {
        console.log(`\n‚ö†Ô∏è  ${stuckCount} —Ñ–∞—Ä–º–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç`);
        console.log('–í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.log('‚úÖ –í—Å–µ —Ñ–∞—Ä–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ');
      }
    }
    
    // 7. –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\n' + '-'.repeat(80));
    console.log('–ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:');
    
    if (count === 0 && activeFarmers && activeFarmers.length > 0) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('   –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞—Ä–º–µ—Ä—ã, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    } else if (activeCount === 0 && activeFarmers && activeFarmers.length > 0) {
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ñ–∞—Ä–º–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã (boost_active = FALSE)');
      console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
    } else if (count && count > 0) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      console.log(`   –°–æ–∑–¥–∞–Ω–æ ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å`);
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
  }
  
  console.log('\n' + '='.repeat(80) + '\n');
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitorTonBoostHealth();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
export { monitorTonBoostHealth };