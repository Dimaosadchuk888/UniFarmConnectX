import { supabase } from '../core/supabase.js';
import * as fs from 'fs';

interface SyncResult {
  field1: string;
  field2: string;
  syncedCount: number;
  errors: string[];
}

async function synchronizeDuplicateFields() {
  console.log('üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ü–û–õ–ï–ô\n');
  console.log('================================================================================\n');
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –ø–æ–ª—è–º–∏');
  console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º\n');

  const results: SyncResult[] = [];

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .order('id');

    if (error) throw error;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users?.length || 0}\n`);

    // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è uni_deposit_amount –∏ uni_farming_deposit (–ø–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã)
    console.log('üìå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è uni_deposit_amount ‚Üê ‚Üí uni_farming_deposit\n');
    let syncedCount = 0;
    const errors: string[] = [];

    for (const user of users || []) {
      if (user.uni_deposit_amount !== user.uni_farming_deposit) {
        // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ)
        const maxValue = Math.max(
          Number(user.uni_deposit_amount) || 0,
          Number(user.uni_farming_deposit) || 0
        );

        console.log(`   User ${user.id}: ${user.uni_deposit_amount} vs ${user.uni_farming_deposit} ‚Üí ${maxValue}`);

        const { error: updateError } = await supabase
          .from('users')
          .update({
            uni_deposit_amount: maxValue,
            uni_farming_deposit: maxValue
          })
          .eq('id', user.id);

        if (updateError) {
          errors.push(`User ${user.id}: ${updateError.message}`);
        } else {
          syncedCount++;
        }
      }
    }

    results.push({
      field1: 'uni_deposit_amount',
      field2: 'uni_farming_deposit',
      syncedCount,
      errors
    });

    console.log(`   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount} –∑–∞–ø–∏—Å–µ–π\n`);

    // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ton_boost_package –∏ ton_boost_package_id
    console.log('üìå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ton_boost_package ‚Üê ‚Üí ton_boost_package_id\n');
    syncedCount = 0;
    const errors2: string[] = [];

    for (const user of users || []) {
      // –õ–æ–≥–∏–∫–∞: –µ—Å–ª–∏ ton_boost_package > 0, –Ω–æ ton_boost_package_id –ø—É—Å—Ç–æ–π, –∑–∞–ø–æ–ª–Ω—è–µ–º
      if (user.ton_boost_package > 0 && !user.ton_boost_package_id) {
        console.log(`   User ${user.id}: ton_boost_package=${user.ton_boost_package}, ton_boost_package_id=null ‚Üí ${user.ton_boost_package}`);
        
        const { error: updateError } = await supabase
          .from('users')
          .update({
            ton_boost_package_id: user.ton_boost_package
          })
          .eq('id', user.id);

        if (updateError) {
          errors2.push(`User ${user.id}: ${updateError.message}`);
        } else {
          syncedCount++;
        }
      }
      // –ï—Å–ª–∏ ton_boost_package_id –µ—Å—Ç—å, –Ω–æ ton_boost_package = 0, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
      else if (user.ton_boost_package_id && user.ton_boost_package === 0) {
        console.log(`   User ${user.id}: ton_boost_package=0, ton_boost_package_id=${user.ton_boost_package_id} ‚Üí ${user.ton_boost_package_id}`);
        
        const { error: updateError } = await supabase
          .from('users')
          .update({
            ton_boost_package: user.ton_boost_package_id
          })
          .eq('id', user.id);

        if (updateError) {
          errors2.push(`User ${user.id}: ${updateError.message}`);
        } else {
          syncedCount++;
        }
      }
    }

    results.push({
      field1: 'ton_boost_package',
      field2: 'ton_boost_package_id',
      syncedCount,
      errors: errors2
    });

    console.log(`   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount} –∑–∞–ø–∏—Å–µ–π\n`);

    // 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ uni_farming_balance –∏–∑ balance_uni (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ uni_farming_balance = 0)
    console.log('üìå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö uni_farming_balance –∏–∑ balance_uni\n');
    syncedCount = 0;
    const errors3: string[] = [];

    for (const user of users || []) {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ uni_farming_balance = 0, –∞ balance_uni > 0
      if (user.uni_farming_balance === 0 && user.balance_uni > 0 && user.uni_farming_active) {
        console.log(`   User ${user.id}: uni_farming_balance=0, balance_uni=${user.balance_uni} ‚Üí ${user.balance_uni}`);
        
        const { error: updateError } = await supabase
          .from('users')
          .update({
            uni_farming_balance: user.balance_uni
          })
          .eq('id', user.id);

        if (updateError) {
          errors3.push(`User ${user.id}: ${updateError.message}`);
        } else {
          syncedCount++;
        }
      }
    }

    results.push({
      field1: 'balance_uni',
      field2: 'uni_farming_balance',
      syncedCount,
      errors: errors3
    });

    console.log(`   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount} –∑–∞–ø–∏—Å–µ–π\n`);

    // 4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ wallet –∏–∑ ton_wallet_address (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ wallet –ø—É—Å—Ç–æ–π)
    console.log('üìå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö wallet –∏–∑ ton_wallet_address\n');
    syncedCount = 0;
    const errors4: string[] = [];

    for (const user of users || []) {
      if (!user.wallet && user.ton_wallet_address) {
        console.log(`   User ${user.id}: wallet=null, ton_wallet_address=${user.ton_wallet_address.substring(0, 20)}...`);
        
        const { error: updateError } = await supabase
          .from('users')
          .update({
            wallet: user.ton_wallet_address
          })
          .eq('id', user.id);

        if (updateError) {
          errors4.push(`User ${user.id}: ${updateError.message}`);
        } else {
          syncedCount++;
        }
      }
    }

    results.push({
      field1: 'wallet',
      field2: 'ton_wallet_address',
      syncedCount,
      errors: errors4
    });

    console.log(`   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount} –∑–∞–ø–∏—Å–µ–π\n`);

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:\n');
    console.log('================================================================================\n');

    let totalSynced = 0;
    let totalErrors = 0;

    results.forEach(result => {
      totalSynced += result.syncedCount;
      totalErrors += result.errors.length;
      
      console.log(`${result.field1} ‚Üê ‚Üí ${result.field2}:`);
      console.log(`   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${result.syncedCount}`);
      if (result.errors.length > 0) {
        console.log(`   –û—à–∏–±–æ–∫: ${result.errors.length}`);
        result.errors.slice(0, 3).forEach(err => console.log(`     - ${err}`));
      }
      console.log();
    });

    console.log(`\n‚úÖ –í–°–ï–ì–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${totalSynced} –∑–∞–ø–∏—Å–µ–π`);
    if (totalErrors > 0) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${totalErrors}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:\n');
    console.log('================================================================================\n');

    const { data: checkUsers, error: checkError } = await supabase
      .from('users')
      .select('id, uni_deposit_amount, uni_farming_deposit, ton_boost_package, ton_boost_package_id, balance_uni, uni_farming_balance, wallet, ton_wallet_address')
      .order('id');

    if (!checkError && checkUsers) {
      let remainingDiffs = 0;

      checkUsers.forEach(user => {
        const diffs: string[] = [];
        
        if (user.uni_deposit_amount !== user.uni_farming_deposit) {
          diffs.push(`uni_deposit: ${user.uni_deposit_amount} vs ${user.uni_farming_deposit}`);
        }
        
        if (user.ton_boost_package > 0 && user.ton_boost_package !== user.ton_boost_package_id) {
          diffs.push(`ton_boost: ${user.ton_boost_package} vs ${user.ton_boost_package_id}`);
        }

        if (diffs.length > 0) {
          remainingDiffs++;
          if (remainingDiffs <= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            console.log(`User ${user.id}: ${diffs.join(', ')}`);
          }
        }
      });

      if (remainingDiffs === 0) {
        console.log('‚úÖ –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
      } else {
        console.log(`\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è: ${remainingDiffs} –∑–∞–ø–∏—Å–µ–π`);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      results,
      totalSynced,
      totalErrors
    };

    await fs.promises.writeFile(
      'FIELD_SYNCHRONIZATION_REPORT.json',
      JSON.stringify(report, null, 2)
    );

    console.log('\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FIELD_SYNCHRONIZATION_REPORT.json');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!');
console.log('‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...\n');

setTimeout(() => {
  synchronizeDuplicateFields().then(() => {
    console.log('\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err);
    process.exit(1);
  });
}, 5000);