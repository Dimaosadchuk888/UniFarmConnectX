#!/usr/bin/env tsx
/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

import * as fs from 'fs';

const indexData = [
  {
    "schemaname": "public",
    "tablename": "airdrop_missions",
    "indexname": "idx_airdrop_missions_active",
    "indexdef": "CREATE INDEX idx_airdrop_missions_active ON public.airdrop_missions USING btree (is_active)"
  },
  {
    "schemaname": "public",
    "tablename": "missions",
    "indexname": "idx_missions_active",
    "indexdef": "CREATE INDEX idx_missions_active ON public.missions USING btree (is_active)"
  },
  {
    "schemaname": "public",
    "tablename": "missions",
    "indexname": "idx_missions_type",
    "indexdef": "CREATE INDEX idx_missions_type ON public.missions USING btree (mission_type)"
  },
  {
    "schemaname": "public",
    "tablename": "referrals",
    "indexname": "idx_referrals_referred",
    "indexdef": "CREATE INDEX idx_referrals_referred ON public.referrals USING btree (referred_user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "referrals",
    "indexname": "idx_referrals_user",
    "indexdef": "CREATE INDEX idx_referrals_user ON public.referrals USING btree (user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "ton_farming_data",
    "indexname": "idx_ton_farming_active",
    "indexdef": "CREATE INDEX idx_ton_farming_active ON public.ton_farming_data USING btree (boost_active)"
  },
  {
    "schemaname": "public",
    "tablename": "ton_farming_data",
    "indexname": "idx_ton_farming_user",
    "indexdef": "CREATE INDEX idx_ton_farming_user ON public.ton_farming_data USING btree (user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "ton_farming_data",
    "indexname": "idx_ton_farming_user_id",
    "indexdef": "CREATE INDEX idx_ton_farming_user_id ON public.ton_farming_data USING btree (user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_action",
    "indexdef": "CREATE INDEX idx_transactions_action ON public.transactions USING btree (action)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_amount",
    "indexdef": "CREATE INDEX idx_transactions_amount ON public.transactions USING btree (amount)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_created_at",
    "indexdef": "CREATE INDEX idx_transactions_created_at ON public.transactions USING btree (created_at)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_tx_hash",
    "indexdef": "CREATE INDEX idx_transactions_tx_hash ON public.transactions USING btree (tx_hash)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_type",
    "indexdef": "CREATE INDEX idx_transactions_type ON public.transactions USING btree (type)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_user_id",
    "indexdef": "CREATE INDEX idx_transactions_user_id ON public.transactions USING btree (user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "transactions",
    "indexname": "idx_transactions_user_id__created_at_desc",
    "indexdef": "CREATE INDEX idx_transactions_user_id__created_at_desc ON public.transactions USING btree (user_id, created_at DESC)"
  },
  {
    "schemaname": "public",
    "tablename": "uni_farming_data",
    "indexname": "idx_uni_farming_active",
    "indexdef": "CREATE INDEX idx_uni_farming_active ON public.uni_farming_data USING btree (is_active)"
  },
  {
    "schemaname": "public",
    "tablename": "uni_farming_data",
    "indexname": "idx_uni_farming_user",
    "indexdef": "CREATE INDEX idx_uni_farming_user ON public.uni_farming_data USING btree (user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "uni_farming_data",
    "indexname": "idx_uni_farming_user_id",
    "indexdef": "CREATE INDEX idx_uni_farming_user_id ON public.uni_farming_data USING btree (user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_balance_uni__balance_ton",
    "indexdef": "CREATE INDEX idx_users_balance_uni__balance_ton ON public.users USING btree (balance_uni, balance_ton) WHERE ((balance_uni > (0)::numeric) OR (balance_ton > (0)::numeric))"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_ref_code",
    "indexdef": "CREATE INDEX idx_users_ref_code ON public.users USING btree (ref_code)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_referred_by",
    "indexdef": "CREATE INDEX idx_users_referred_by ON public.users USING btree (referred_by)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_status",
    "indexdef": "CREATE INDEX idx_users_status ON public.users USING btree (status)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_telegram_id",
    "indexdef": "CREATE INDEX idx_users_telegram_id ON public.users USING btree (telegram_id)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_ton_boost_active",
    "indexdef": "CREATE INDEX idx_users_ton_boost_active ON public.users USING btree (ton_boost_active) WHERE (ton_boost_active = true)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_ton_farming_active",
    "indexdef": "CREATE INDEX idx_users_ton_farming_active ON public.users USING btree (ton_farming_balance) WHERE (ton_farming_balance > (0)::numeric)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_ton_wallet_address",
    "indexdef": "CREATE INDEX idx_users_ton_wallet_address ON public.users USING btree (ton_wallet_address) WHERE (ton_wallet_address IS NOT NULL)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "indexname": "idx_users_uni_farming_active",
    "indexdef": "CREATE INDEX idx_users_uni_farming_active ON public.users USING btree (uni_farming_active) WHERE (uni_farming_active = true)"
  },
  {
    "schemaname": "public",
    "tablename": "withdraw_requests",
    "indexname": "idx_withdraw_requests_created_at",
    "indexdef": "CREATE INDEX idx_withdraw_requests_created_at ON public.withdraw_requests USING btree (created_at DESC)"
  },
  {
    "schemaname": "public",
    "tablename": "withdraw_requests",
    "indexname": "idx_withdraw_requests_status",
    "indexdef": "CREATE INDEX idx_withdraw_requests_status ON public.withdraw_requests USING btree (status)"
  },
  {
    "schemaname": "public",
    "tablename": "withdraw_requests",
    "indexname": "idx_withdraw_requests_user_id",
    "indexdef": "CREATE INDEX idx_withdraw_requests_user_id ON public.withdraw_requests USING btree (user_id)"
  }
];

function analyzeIndexes() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ù–î–ï–ö–°–û–í');
  console.log('=' .repeat(60) + '\n');
  
  // –ù–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
  const ourIndexes = [
    'idx_users_telegram_id',
    'idx_transactions_user_id__created_at_desc',
    'idx_users_balance_uni__balance_ton',
    'idx_users_uni_farming_active',
    'idx_users_referred_by',
    'idx_transactions_type',
    'idx_withdraw_requests_status',
    'idx_withdraw_requests_user_id'
  ];
  
  console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–®–ò–• 8 –ò–ù–î–ï–ö–°–û–í:\n');
  
  const foundIndexes = indexData.map(idx => idx.indexname);
  let allFound = true;
  
  ourIndexes.forEach((indexName, i) => {
    const found = foundIndexes.includes(indexName);
    console.log(`${i + 1}. ${indexName}: ${found ? '‚úÖ –°–û–ó–î–ê–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    if (!found) allFound = false;
  });
  
  if (allFound) {
    console.log('\nüéâ –í–°–ï 8 –ò–ù–î–ï–ö–°–û–í –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!\n');
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
  console.log('üìä –ê–ù–ê–õ–ò–ó –ò–ù–î–ï–ö–°–û–í –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:\n');
  
  const indexesByTable: Record<string, any[]> = {};
  indexData.forEach(idx => {
    if (!indexesByTable[idx.tablename]) {
      indexesByTable[idx.tablename] = [];
    }
    indexesByTable[idx.tablename].push(idx);
  });
  
  Object.entries(indexesByTable).forEach(([table, indexes]) => {
    console.log(`üìÅ ${table}: ${indexes.length} –∏–Ω–¥–µ–∫—Å–æ–≤`);
    indexes.forEach(idx => {
      const isOurs = ourIndexes.includes(idx.indexname);
      console.log(`   ${isOurs ? 'üÜï' : '  '} ${idx.indexname}`);
    });
    console.log('');
  });
  
  // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–Ω–¥–µ–∫—Å–æ–≤
  console.log('‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ò–ù–î–ï–ö–°–´:\n');
  
  const duplicates = [
    {
      table: 'ton_farming_data',
      field: 'user_id',
      indexes: ['idx_ton_farming_user', 'idx_ton_farming_user_id']
    },
    {
      table: 'uni_farming_data', 
      field: 'user_id',
      indexes: ['idx_uni_farming_user', 'idx_uni_farming_user_id']
    }
  ];
  
  duplicates.forEach(dup => {
    console.log(`‚ùó –¢–∞–±–ª–∏—Ü–∞ ${dup.table}, –ø–æ–ª–µ ${dup.field}:`);
    console.log(`   –î—É–±–ª–∏—Ä—É—é—Ç—Å—è: ${dup.indexes.join(', ')}`);
  });
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');
  console.log(`–í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexData.length}`);
  console.log(`–ù–∞—à–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: ${ourIndexes.length} (–≤—Å–µ —Å–æ–∑–¥–∞–Ω—ã)`);
  console.log(`–î—Ä—É–≥–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexData.length - ourIndexes.length}`);
  console.log(`–î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è: 2 –ø–∞—Ä—ã\n`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
  console.log('1. ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
  console.log('2. ‚ö†Ô∏è  –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–Ω–¥–µ–∫—Å–æ–≤:');
  console.log('   - idx_ton_farming_user_id (–¥—É–±–ª–∏—Ä—É–µ—Ç idx_ton_farming_user)');
  console.log('   - idx_uni_farming_user_id (–¥—É–±–ª–∏—Ä—É–µ—Ç idx_uni_farming_user)');
  console.log('3. üìà –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
  console.log('   ANALYZE users;');
  console.log('   ANALYZE transactions;');
  console.log('   ANALYZE withdraw_requests;');
  console.log('4. üåê –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (167ms) –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å:');
  console.log('   - –°–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π Supabase');
  console.log('   - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  console.log('   - –ë–æ–ª—å—à–∏–º –æ–±—ä—ë–º–æ–º –¥–∞–Ω–Ω—ã—Ö (850K+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const report = {
    timestamp: new Date().toISOString(),
    total_indexes: indexData.length,
    our_indexes: {
      count: ourIndexes.length,
      all_created: true,
      list: ourIndexes
    },
    duplicates: duplicates,
    tables_with_indexes: Object.keys(indexesByTable),
    recommendations: [
      '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã',
      '–£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
      '–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü –∫–æ–º–∞–Ω–¥–æ–π ANALYZE',
      '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    ]
  };
  
  fs.writeFileSync(
    'docs/FINAL_INDEX_ANALYSIS.json',
    JSON.stringify(report, null, 2)
  );
  
  console.log('‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/FINAL_INDEX_ANALYSIS.json');
}

analyzeIndexes();