#!/usr/bin/env tsx
/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è User ID 287
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
 */

import { supabase } from '../core/supabase';

async function checkUser287SchedulerStatus() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê - USER ID 287');
  console.log('==========================================\n');

  const userId = 287;

  // 1. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('1. üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  const { data: userState } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single();

  if (userState) {
    console.log(`   ‚Ä¢ ID: ${userState.id}`);
    console.log(`   ‚Ä¢ Username: ${userState.username || 'N/A'}`);
    console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å TON: ${userState.balance_ton || 0}`);
    console.log(`   ‚Ä¢ TON Boost Package: ${userState.ton_boost_package || '–ù–ï–¢'}`);
    console.log(`   ‚Ä¢ TON Boost Package ID: ${userState.ton_boost_package_id || '–ù–ï–¢'}`);
    console.log(`   ‚Ä¢ TON Boost Rate: ${userState.ton_boost_rate || '–ù–ï–¢'}`);
    console.log(`   ‚Ä¢ TON Boost Start: ${userState.ton_boost_start_timestamp || '–ù–ï–¢'}`);
  }

  // 2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ ton_farming_data
  console.log('\n2. üóÉÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –í TON_FARMING_DATA:');
  const { data: farmingData } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId);

  if (farmingData && farmingData.length > 0) {
    farmingData.forEach((data, index) => {
      console.log(`   –ó–∞–ø–∏—Å—å ${index + 1}:`);
      console.log(`   ‚Ä¢ Package ID: ${data.boost_package_id}`);
      console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${data.boost_active ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${data.farming_balance}`);
      console.log(`   ‚Ä¢ –°—Ç–∞–≤–∫–∞: ${data.farming_rate}`);
      console.log(`   ‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${data.start_date}`);
      console.log(`   ‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${data.end_date}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫
      if (data.end_date) {
        const endDate = new Date(data.end_date);
        const now = new Date();
        const isExpired = now > endDate;
        const timeLeft = endDate.getTime() - now.getTime();
        const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
        
        console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å—Ä–æ–∫–∞: ${isExpired ? '‚ùå –ò–°–¢–ï–ö' : '‚úÖ –ê–ö–¢–ò–í–ï–ù'}`);
        if (!isExpired) {
          console.log(`   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: ${hoursLeft}`);
        }
      }
      console.log('');
    });
  } else {
    console.log('   ‚ùå –ó–∞–ø–∏—Å–∏ –≤ ton_farming_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  // 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  console.log('3. üìú –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
  const { data: schedulerTx } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'FARMING_REWARD')
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(10);

  if (schedulerTx && schedulerTx.length > 0) {
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${schedulerTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:`);
    schedulerTx.forEach((tx, index) => {
      console.log(`   ${index + 1}. [${tx.created_at}]`);
      console.log(`      –°—É–º–º–∞: ${tx.amount_ton} TON`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      if (tx.metadata?.transaction_source) {
        console.log(`      –ò—Å—Ç–æ—á–Ω–∏–∫: ${tx.metadata.transaction_source}`);
      }
      if (tx.metadata?.original_type) {
        console.log(`      –¢–∏–ø: ${tx.metadata.original_type}`);
      }
    });

    // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã
    if (schedulerTx.length >= 2) {
      const intervals = [];
      for (let i = 0; i < schedulerTx.length - 1; i++) {
        const time1 = new Date(schedulerTx[i].created_at);
        const time2 = new Date(schedulerTx[i + 1].created_at);
        const intervalMin = (time1.getTime() - time2.getTime()) / (1000 * 60);
        intervals.push(intervalMin);
      }
      
      const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
      console.log(`\n   üìä –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏: ${avgInterval.toFixed(1)} –º–∏–Ω—É—Ç`);
      
      const lastTxTime = new Date(schedulerTx[0].created_at);
      const timeSinceLast = (Date.now() - lastTxTime.getTime()) / (1000 * 60);
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${timeSinceLast.toFixed(1)} –º–∏–Ω—É—Ç`);
      
      if (timeSinceLast > avgInterval * 3) {
        console.log('   ‚ö†Ô∏è –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –í–ï–†–û–Ø–¢–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù (–ø—Ä–µ–≤—ã—à–µ–Ω —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 3 —Ä–∞–∑–∞)');
      }
    }
  } else {
    console.log('   ‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  // 4. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  console.log('\n4. üåê –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
  const { data: globalActivity } = await supabase
    .from('transactions')
    .select('user_id, created_at, amount_ton')
    .eq('type', 'FARMING_REWARD')
    .eq('currency', 'TON')
    .gte('created_at', new Date(Date.now() - 15 * 60 * 1000).toISOString())
    .order('created_at', { ascending: false })
    .limit(10);

  if (globalActivity && globalActivity.length > 0) {
    console.log(`   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ (${globalActivity.length} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ 15 –º–∏–Ω—É—Ç):`);
    globalActivity.forEach(tx => {
      console.log(`   ‚Ä¢ User ${tx.user_id}: ${tx.amount_ton} TON [${tx.created_at}]`);
    });
    
    const hasUser287 = globalActivity.some(tx => tx.user_id === 287);
    if (!hasUser287) {
      console.log('\n   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: User 287 –ù–ï –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, —Ö–æ—Ç—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö');
    }
  } else {
    console.log('   ‚ùå –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ì–õ–û–ë–ê–õ–¨–ù–û (–Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ 15 –º–∏–Ω—É—Ç)');
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\n5. üë• –î–†–£–ì–ò–ï –ê–ö–¢–ò–í–ù–´–ï TON BOOST –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
  const { data: activeUsers } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, farming_balance, boost_active')
    .eq('boost_active', true)
    .gt('farming_balance', 0);

  if (activeUsers && activeUsers.length > 0) {
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    activeUsers.forEach(user => {
      console.log(`   ‚Ä¢ User ${user.user_id}: Package ${user.boost_package_id}, Balance ${user.farming_balance} TON`);
    });
    
    const user287Active = activeUsers.find(u => u.user_id === 287);
    if (user287Active) {
      console.log('\n   ‚úÖ User 287 —á–∏—Å–ª–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
      console.log(`      –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${user287Active.farming_balance} TON`);
      
      if (parseFloat(user287Active.farming_balance) <= 0) {
        console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞ - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å');
      }
    } else {
      console.log('\n   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: User 287 –ù–ï —á–∏—Å–ª–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö');
    }
  } else {
    console.log('   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  // 6. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
  console.log('\n6. üéØ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  if (userState?.ton_boost_package && farmingData?.length > 0) {
    const farmingRecord = farmingData[0];
    const hasValidBalance = parseFloat(farmingRecord.farming_balance || '0') > 0;
    const isActive = farmingRecord.boost_active;
    
    if (!isActive) {
      console.log('‚ùå –ü–†–ò–ß–ò–ù–ê –û–°–¢–ê–ù–û–í–ö–ò: Boost –ø–∞–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ ton_farming_data');
    } else if (!hasValidBalance) {
      console.log('‚ùå –ü–†–ò–ß–ò–ù–ê –û–°–¢–ê–ù–û–í–ö–ò: –ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞ –≤ ton_farming_data');
    } else if (farmingRecord.end_date && new Date(farmingRecord.end_date) < new Date()) {
      console.log('‚ùå –ü–†–ò–ß–ò–ù–ê –û–°–¢–ê–ù–û–í–ö–ò: –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è Boost –ø–∞–∫–µ—Ç–∞');
    } else {
      console.log('‚ö†Ô∏è –ù–ï–Ø–°–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ—Ç');
      console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    }
  } else {
    console.log('‚ùå –ü–†–ò–ß–ò–ù–ê –û–°–¢–ê–ù–û–í–ö–ò: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –æ Boost –ø–∞–∫–µ—Ç–µ');
  }

  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫
checkUser287SchedulerStatus()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });