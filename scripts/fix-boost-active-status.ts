/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ boost_active –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤
 */

import { supabase } from '../core/supabase';

async function fixBoostActiveStatus() {
  console.log('\n' + '='.repeat(80));
  console.log('–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê boost_active –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –§–ê–†–ú–ï–†–û–í');
  console.log('='.repeat(80) + '\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å farming_balance > 0 –∏ boost_package_id > 0
    const { data: inactiveFarmers, error: fetchError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .gt('farming_balance', 0)
      .gt('boost_package_id', 0)
      .eq('boost_active', false);
    
    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', fetchError);
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${inactiveFarmers?.length || 0} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏:\n`);
    
    if (inactiveFarmers && inactiveFarmers.length > 0) {
      console.log('–§–∞—Ä–º–µ—Ä—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:');
      inactiveFarmers.forEach(farmer => {
        console.log(`  - User ${farmer.user_id}: ${farmer.farming_balance} TON, package #${farmer.boost_package_id}`);
      });
      
      console.log('\n–û–±–Ω–æ–≤–ª—è–µ–º boost_active = TRUE...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º boost_active –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
      const { data: updateResult, error: updateError } = await supabase
        .from('ton_farming_data')
        .update({ 
          boost_active: true,
          farming_last_update: new Date().toISOString()
        })
        .gt('farming_balance', 0)
        .gt('boost_package_id', 0)
        .eq('boost_active', false)
        .select();
      
      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError);
        return;
      }
      
      console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult?.length || 0} –∑–∞–ø–∏—Å–µ–π!`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:');
      updateResult?.forEach(record => {
        console.log(`  - User ${record.user_id}: boost_active = ${record.boost_active}`);
      });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: activeUsers, count } = await supabase
        .from('ton_farming_data')
        .select('*', { count: 'exact' })
        .eq('boost_active', true)
        .gt('farming_balance', 0);
      
      console.log(`\nüìä –ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${count || 0}`);
      
      if (activeUsers && activeUsers.length > 0) {
        console.log('\nüéØ –¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        activeUsers.forEach(user => {
          console.log(`  - User ${user.user_id}: ${user.farming_balance} TON`);
        });
      }
      
    } else {
      console.log('–ù–µ—Ç —Ñ–∞—Ä–º–µ—Ä–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(80) + '\n');
  
  process.exit(0);
}

fixBoostActiveStatus();