#!/usr/bin/env node

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Replit Preview –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase, JWT —Ç–æ–∫–µ–Ω—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '..', '.env') });

console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ===\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('1. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:');
console.log('----------------------------------');
console.log(`SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`SUPABASE_KEY: ${process.env.SUPABASE_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`JWT_SECRET: ${process.env.JWT_SECRET ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
console.log();

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function checkSupabaseConnection() {
  console.log('2. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE:');
  console.log('-----------------------------------');
  
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
    console.log('‚ùå Supabase credentials –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    return;
  }
  
  try {
    const { createClient } = require('@supabase/supabase-js');
    const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data, error, count } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${count}`);
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
  console.log();
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è user ID 74
async function checkUserJWT() {
  console.log('3. –ü–†–û–í–ï–†–ö–ê JWT –î–õ–Ø USER ID 74:');
  console.log('--------------------------------');
  
  try {
    const jwt = require('jsonwebtoken');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∏–∑ localStorage (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const testToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjc0LCJ0ZWxlZ3JhbV9pZCI6OTk5NDg5LCJ1c2VybmFtZSI6InRlc3RfdXNlcl8xNzUyMTI5ODQwOTA1IiwicmVmX2NvZGUiOiJURVNUXzE3NTIxMjk4NDA5MDVfZG9reHYwIiwiaWF0IjoxNzUyMTQ0MjkxLCJleHAiOjE3NTI3NDkwOTF9.2A18-Rx0enn8v30ANK6RVBl7SoR_TV2fUJN2hOox-C4';
    
    try {
      const decoded = jwt.decode(testToken);
      console.log('üìã –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:');
      console.log(`   User ID: ${decoded.userId}`);
      console.log(`   Telegram ID: ${decoded.telegram_id}`);
      console.log(`   Username: ${decoded.username}`);
      console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(decoded.exp * 1000).toLocaleString('ru-RU')}`);
      
      const now = Date.now() / 1000;
      if (decoded.exp < now) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫!');
      } else {
        console.log('‚úÖ –¢–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', err.message);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    if (process.env.JWT_SECRET) {
      console.log('\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è user ID 74:');
      const newToken = jwt.sign(
        {
          userId: 74,
          telegram_id: 999489,
          username: 'test_user_74',
          ref_code: 'TEST_74_REPLIT'
        },
        process.env.JWT_SECRET,
        { expiresIn: '7d' }
      );
      console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      console.log('\nüîë –ù–û–í–´–ô JWT –¢–û–ö–ï–ù (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ):');
      console.log('=====================================');
      console.log(newToken);
      console.log('=====================================');
    } else {
      console.log('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω');
    }
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å JWT:', err.message);
  }
  console.log();
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
async function checkUserInDatabase() {
  console.log('4. –ü–†–û–í–ï–†–ö–ê USER ID 74 –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
  console.log('-------------------------------------');
  
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
    console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase');
    return;
  }
  
  try {
    const { createClient } = require('@supabase/supabase-js');
    const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 74
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 74)
      .single();
    
    if (error && error.code === 'PGRST116') {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 74 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: testUsers, error: testError } = await supabase
        .from('users')
        .select('id, username, telegram_id, uni_balance, ton_balance')
        .like('username', '%test%')
        .limit(5);
      
      if (testUsers && testUsers.length > 0) {
        console.log('\nüìã –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        testUsers.forEach(u => {
          console.log(`   ID: ${u.id}, Username: ${u.username}, Telegram: ${u.telegram_id}, UNI: ${u.uni_balance}, TON: ${u.ton_balance}`);
        });
      }
    } else if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    } else if (user) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
      console.log(`   ID: ${user.id}`);
      console.log(`   Username: ${user.username}`);
      console.log(`   Telegram ID: ${user.telegram_id}`);
      console.log(`   UNI Balance: ${user.uni_balance}`);
      console.log(`   TON Balance: ${user.ton_balance}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runDiagnostics() {
  await checkSupabaseConnection();
  await checkUserJWT();
  await checkUserInDatabase();
  
  console.log('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
}

runDiagnostics().catch(console.error);