import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ Supabase –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseFromCore = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

const supabaseFromCoreSupabase = createClient(
  process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co',
  process.env.SUPABASE_KEY
);

async function debugMiddleware() {
  console.log('üîç –ó–ê–î–ê–ß–ê 5: –û—Ç–ª–∞–¥–∫–∞ middleware –ª–æ–≥–∏–∫–∏');
  console.log('='.repeat(50));
  
  // JWT —Ç–æ–∫–µ–Ω –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MTc4MDUyMTkxOF9lMXY2MmQiLCJpYXQiOjE3NTE4Njk5NzYsImV4cCI6MTc1MjQ3NDc3Nn0.3OX9TDF5XpRW8PUHeozdIoBRIl-UWvjNJWKHbn56Fso';
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
  const decoded = jwt.verify(token, process.env.JWT_SECRET);
  const userId = decoded.userId || decoded.user_id;
  
  console.log('üìã JWT payload:');
  console.log(`  userId: ${userId} (—Ç–∏–ø: ${typeof userId})`);
  console.log(`  telegram_id: ${decoded.telegram_id}`);
  console.log(`  username: ${decoded.username}`);
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ Supabase –∫–ª–∏–µ–Ω—Ç—ã:');
  
  // –¢–µ—Å—Ç 1: core/supabaseClient.ts
  console.log('\nüì¶ Client 1 (core/supabaseClient.ts):');
  try {
    const { data: user1, error: error1 } = await supabaseFromCore
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (error1 && error1.code !== 'PGRST116') {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error1.message}`);
    } else if (user1) {
      console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID=${user1.id}, username=${user1.username}`);
    } else {
      console.log('  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (e) {
    console.error('  üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e.message);
  }
  
  // –¢–µ—Å—Ç 2: core/supabase.ts
  console.log('\nüì¶ Client 2 (core/supabase.ts):');
  try {
    const { data: user2, error: error2 } = await supabaseFromCoreSupabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (error2 && error2.code !== 'PGRST116') {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error2.message}`);
    } else if (user2) {
      console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID=${user2.id}, username=${user2.username}`);
    } else {
      console.log('  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (e) {
    console.error('  üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ userId
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:');
  
  // –ö–∞–∫ —á–∏—Å–ª–æ
  console.log('\n  –ü–æ–∏—Å–∫ –∫–∞–∫ —á–∏—Å–ª–æ (62):');
  const { data: asNumber } = await supabaseFromCore
    .from('users')
    .select('id, username')
    .eq('id', 62)
    .single();
  console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${asNumber ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
  
  // –ö–∞–∫ —Å—Ç—Ä–æ–∫–∞
  console.log('\n  –ü–æ–∏—Å–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ ("62"):');
  const { data: asString } = await supabaseFromCore
    .from('users')
    .select('id, username')
    .eq('id', '62')
    .single();
  console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${asString ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL Supabase
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  console.log(`  SUPABASE_URL –∏–∑ env: ${process.env.SUPABASE_URL}`);
  console.log(`  SUPABASE_URL –≤ client 1: ${process.env.SUPABASE_URL}`);
  console.log(`  SUPABASE_URL –≤ client 2: ${process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co'}`);
  console.log(`  –°–æ–≤–ø–∞–¥–∞—é—Ç: ${process.env.SUPABASE_URL === (process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co') ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

debugMiddleware();