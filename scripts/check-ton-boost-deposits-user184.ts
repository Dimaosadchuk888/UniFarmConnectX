/**
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
 */

import { supabase } from '../core/supabase';

async function checkTonBoostDeposits() {
  console.log('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TON BOOST –î–ï–ü–û–ó–ò–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184');
  console.log('=' .repeat(70));
  
  const userId = 184;
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const { data: transactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(10);
    
    const boostPurchases = transactions?.filter(t => 
      t.type === 'BOOST_PURCHASE' || 
      t.description?.includes('TON Boost') ||
      t.metadata?.original_type === 'BOOST_PURCHASE'
    ) || [];
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${boostPurchases.length} TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    boostPurchases.forEach((t, i) => {
      console.log(`${i+1}. ID: ${t.id}, –¢–∏–ø: ${t.type}, –°—É–º–º–∞: ${t.amount} ${t.currency}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${t.description}`);
      console.log(`   –î–∞—Ç–∞: ${t.created_at}`);
      console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(t.metadata, null, 2));
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    const { data: user } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (user) {
      console.log('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å TON:', user.balance_ton);
      console.log('TON Boost –∞–∫—Ç–∏–≤–µ–Ω:', user.ton_boost_active);
      console.log('TON Boost –ø–∞–∫–µ—Ç:', user.ton_boost_package);
      console.log('TON Boost ID –ø–∞–∫–µ—Ç–∞:', user.ton_boost_package_id);
      console.log('TON Boost –∫—É—Ä—Å:', user.ton_boost_rate);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data —Ç–∞–±–ª–∏—Ü—É
    console.log('\nüí∞ TON FARMING DATA:');
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId.toString())
      .order('created_at', { ascending: false });
    
    if (farmingData && farmingData.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${farmingData.length} –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data:`);
      farmingData.forEach((f, i) => {
        console.log(`${i+1}. Farming Balance: ${f.farming_balance} TON`);
        console.log(`   Farming Rate: ${f.farming_rate} TON/—Å–µ–∫`);
        console.log(`   Package ID: ${f.boost_package_id}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${f.created_at}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${f.updated_at}`);
      });
      
      // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
      const totalDeposit = farmingData.reduce((sum, f) => sum + parseFloat(f.farming_balance || '0'), 0);
      console.log(`\nüíé –û–ë–©–ò–ô –î–ï–ü–û–ó–ò–¢ –í –§–ê–†–ú–ò–ù–ì–ï: ${totalDeposit} TON`);
    } else {
      console.log('‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ï–ô –í TON_FARMING_DATA');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º boost_packages —Ç–∞–±–ª–∏—Ü—É
    console.log('\nüì¶ –î–û–°–¢–£–ü–ù–´–ï TON BOOST –ü–ê–ö–ï–¢–´:');
    const { data: packages } = await supabase
      .from('boost_packages')
      .select('*')
      .order('min_amount', { ascending: true });
    
    if (packages) {
      packages.forEach(p => {
        console.log(`- ID: ${p.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}, –°—É–º–º–∞: ${p.min_amount} TON, –ö—É—Ä—Å: ${p.rate_ton_per_second}/—Å–µ–∫`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    console.log('\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–ú:');
    
    const { data: schedulerCheck } = await supabase
      .from('users')
      .select('id, ton_boost_active, ton_boost_package')
      .eq('id', userId)
      .eq('ton_boost_active', true)
      .not('ton_boost_package', 'is', null);
    
    if (schedulerCheck && schedulerCheck.length > 0) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–ò–î–ï–ù –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É TON Boost');
      console.log('–ê–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç:', schedulerCheck[0].ton_boost_package);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –í–ò–î–ï–ù –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É TON Boost');
      console.log('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ton_boost_active = true AND ton_boost_package IS NOT NULL');
    }
    
    // 6. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('\nüöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
    
    if (farmingData && farmingData.length > 0 && user?.ton_boost_active) {
      const totalRate = farmingData.reduce((sum, f) => sum + parseFloat(f.farming_rate || '0'), 0);
      const dailyIncome = totalRate * 86400; // 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      
      console.log(`–û–±—â–∏–π –∫—É—Ä—Å: ${totalRate} TON/—Å–µ–∫`);
      console.log(`–î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyIncome} TON/–¥–µ–Ω—å`);
      console.log(`–ß–∞—Å–æ–≤–æ–π –¥–æ—Ö–æ–¥: ${dailyIncome / 24} TON/—á–∞—Å`);
      console.log(`–î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${totalRate * 300} TON`);
    } else {
      console.log('‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ—Ö–æ–¥ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫
checkTonBoostDeposits().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});