import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function migrateTonBoostPurchases() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é TON Boost –ø–æ–∫—É–ø–æ–∫...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ BOOST_PURCHASE
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BOOST_PURCHASE')
      .eq('currency', 'TON')
      .order('created_at', { ascending: true });

    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE`);

    if (!transactions || transactions.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userTransactions = new Map<number, any[]>();
    for (const tx of transactions) {
      const userId = tx.user_id;
      if (!userTransactions.has(userId)) {
        userTransactions.set(userId, []);
      }
      userTransactions.get(userId)!.push(tx);
    }

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${userTransactions.size}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [userId, userTxs] of userTransactions) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${userTxs.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('ton_boost_package, ton_farming_balance')
        .eq('id', userId)
        .single();

      if (userError || !user) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, userError);
        continue;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      for (const tx of userTxs) {
        const amount = Math.abs(parseFloat(tx.amount || '0'));
        if (amount === 0) continue;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        let packageId = 1;
        let packageName = 'Starter Boost';
        let rate = 0.01; // 1%

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        const description = tx.description || '';
        if (description.includes('Standard Boost') || amount >= 300) {
          packageId = 2;
          packageName = 'Standard Boost';
          rate = 0.015; // 1.5%
        } else if (description.includes('Premium Boost') || amount >= 1000) {
          packageId = 3;
          packageName = 'Premium Boost';
          rate = 0.02; // 2%
        } else if (description.includes('Elite Boost') || amount >= 5000) {
          packageId = 4;
          packageName = 'Elite Boost';
          rate = 0.025; // 2.5%
        }

        const dailyIncome = amount * rate;
        const expiresAt = new Date(tx.created_at);
        expiresAt.setFullYear(expiresAt.getFullYear() + 1); // +1 –≥–æ–¥

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏
        const { data: existing } = await supabase
          .from('ton_boost_purchases')
          .select('id')
          .eq('user_id', userId)
          .eq('amount', amount.toString())
          .eq('created_at', tx.created_at)
          .single();

        if (existing) {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—É–º–º–∞: ${amount}`);
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ton_boost_purchases
        const { error: insertError } = await supabase
          .from('ton_boost_purchases')
          .insert({
            user_id: userId,
            package_id: packageId,
            package_name: packageName,
            amount: amount.toString(),
            rate: rate.toString(),
            daily_income: dailyIncome.toString(),
            payment_method: 'wallet',
            tx_hash: tx.tx_hash,
            status: 'active',
            purchased_at: tx.created_at,
            expires_at: expiresAt.toISOString(),
            created_at: tx.created_at
          });

        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, insertError);
        } else {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, –ø–∞–∫–µ—Ç "${packageName}", —Å—É–º–º–∞ ${amount} TON`);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    const { count } = await supabase
      .from('ton_boost_purchases')
      .select('*', { count: 'exact', head: true });

    console.log(`\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ ton_boost_purchases: ${count}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateTonBoostPurchases().catch(console.error);