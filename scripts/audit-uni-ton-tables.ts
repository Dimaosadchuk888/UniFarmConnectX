import { supabase } from '../core/supabase.js';

interface TableAnalysis {
  tableName: string;
  recordCount: number;
  fields: string[];
  sampleData?: any[];
}

interface DuplicationAnalysis {
  field: string;
  tables: string[];
  discrepancies: number;
  risk: 'LOW' | 'MEDIUM' | 'HIGH';
}

async function analyzeUniTonTables() {
  console.log('üîç –ê–£–î–ò–¢ –¢–ê–ë–õ–ò–¶ UNI/TON –ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–•');
  console.log('='.repeat(80));
  console.log('');

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶:\n');

    // –¢–∞–±–ª–∏—Ü–∞ users
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .order('id')
      .limit(5);

    const { count: userCount } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });

    if (!usersError) {
      console.log('1. –¢–∞–±–ª–∏—Ü–∞ USERS:');
      console.log(`   –ó–∞–ø–∏—Å–µ–π: ${userCount}`);
      console.log('   –ü–æ–ª—è UNI:');
      console.log('   - balance_uni (–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å UNI)');
      console.log('   - uni_deposit_amount (—Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞)');
      console.log('   - uni_farming_deposit (–¥—É–±–ª–∏–∫–∞—Ç uni_deposit_amount)');
      console.log('   - uni_farming_balance (–¥—É–±–ª–∏–∫–∞—Ç balance_uni)');
      console.log('   - uni_farming_active (—Å—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞)');
      console.log('   - uni_farming_rate (—Å—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞)');
      console.log('   - uni_farming_start_timestamp (–Ω–∞—á–∞–ª–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞)');
      console.log('   –ü–æ–ª—è TON:');
      console.log('   - balance_ton (–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å TON)');
      console.log('   - ton_farming_balance (–±–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞ TON)');
      console.log('   - ton_wallet_address (–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞)');
      console.log('   - wallet (–¥—É–±–ª–∏–∫–∞—Ç ton_wallet_address)');
      console.log('   - ton_boost_package (ID –ø–∞–∫–µ—Ç–∞)');
      console.log('   - ton_boost_package_id (–¥—É–±–ª–∏–∫–∞—Ç ton_boost_package)');
      console.log('   - ton_boost_purchase_date');
      console.log('   - ton_boost_rate (—Å—Ç–∞–≤–∫–∞ –±—É—Å—Ç–∞)');
      console.log('   - ton_farming_rate (—Å—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ TON)');
      console.log('');
    }

    // –¢–∞–±–ª–∏—Ü–∞ uni_farming_data
    const { data: uniFarmingData, count: uniFarmingCount } = await supabase
      .from('uni_farming_data')
      .select('*', { count: 'exact' })
      .order('user_id')
      .limit(5);

    if (uniFarmingData) {
      console.log('2. –¢–∞–±–ª–∏—Ü–∞ UNI_FARMING_DATA:');
      console.log(`   –ó–∞–ø–∏—Å–µ–π: ${uniFarmingCount}`);
      console.log('   –ü–æ–ª—è:');
      console.log('   - user_id');
      console.log('   - balance (–¥—É–±–ª–∏—Ä—É–µ—Ç balance_uni –∏–∑ users)');
      console.log('   - is_active (–¥—É–±–ª–∏—Ä—É–µ—Ç uni_farming_active)');
      console.log('   - deposit_amount (–¥—É–±–ª–∏—Ä—É–µ—Ç uni_deposit_amount)');
      console.log('   - farming_balance (–¥—É–±–ª–∏—Ä—É–µ—Ç uni_farming_balance)');
      console.log('   - farming_rate (–¥—É–±–ª–∏—Ä—É–µ—Ç uni_farming_rate)');
      console.log('   - start_timestamp (–¥—É–±–ª–∏—Ä—É–µ—Ç uni_farming_start_timestamp)');
      console.log('   - created_at');
      console.log('');
    }

    // –¢–∞–±–ª–∏—Ü–∞ ton_farming_data
    const { data: tonFarmingData, count: tonFarmingCount } = await supabase
      .from('ton_farming_data')
      .select('*', { count: 'exact' })
      .order('user_id')
      .limit(5);

    if (tonFarmingData) {
      console.log('3. –¢–∞–±–ª–∏—Ü–∞ TON_FARMING_DATA:');
      console.log(`   –ó–∞–ø–∏—Å–µ–π: ${tonFarmingCount}`);
      console.log('   –ü–æ–ª—è:');
      console.log('   - user_id');
      console.log('   - wallet_address (–¥—É–±–ª–∏—Ä—É–µ—Ç ton_wallet_address)');
      console.log('   - balance (–¥—É–±–ª–∏—Ä—É–µ—Ç ton_farming_balance)');
      console.log('   - farming_balance');
      console.log('   - farming_rate (–¥—É–±–ª–∏—Ä—É–µ—Ç ton_farming_rate)');
      console.log('   - boost_package_id (–¥—É–±–ª–∏—Ä—É–µ—Ç ton_boost_package)');
      console.log('   - boost_rate (–¥—É–±–ª–∏—Ä—É–µ—Ç ton_boost_rate)');
      console.log('   - created_at');
      console.log('');
    }

    // 2. –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–•:\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É users –∏ uni_farming_data
    const { data: uniSync } = await supabase.rpc('check_uni_sync', {});
    
    // SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    const { data: uniDiscrepancies } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount, uni_farming_active')
      .order('id');

    const { data: uniDataMap } = await supabase
      .from('uni_farming_data')
      .select('user_id, balance, deposit_amount, is_active');

    let uniSyncIssues = 0;
    let tonSyncIssues = 0;

    if (uniDiscrepancies && uniDataMap) {
      const farmingMap = new Map(uniDataMap.map(f => [f.user_id, f]));
      
      for (const user of uniDiscrepancies) {
        const farmingData = farmingMap.get(user.id);
        if (farmingData) {
          if (user.balance_uni !== farmingData.balance ||
              user.uni_deposit_amount !== farmingData.deposit_amount ||
              user.uni_farming_active !== farmingData.is_active) {
            uniSyncIssues++;
          }
        }
      }
    }

    console.log('UNI –¥–∞–Ω–Ω—ã–µ:');
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å UNI –¥–∞–Ω–Ω—ã–º–∏ –≤ users: ${uniDiscrepancies?.filter(u => u.uni_deposit_amount > 0).length || 0}`);
    console.log(`- –ó–∞–ø–∏—Å–µ–π –≤ uni_farming_data: ${uniFarmingCount || 0}`);
    console.log(`- –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏: ${uniSyncIssues}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É users –∏ ton_farming_data
    const { data: tonDiscrepancies } = await supabase
      .from('users')
      .select('id, ton_wallet_address, ton_farming_balance, ton_boost_package')
      .not('ton_wallet_address', 'is', null)
      .order('id');

    const { data: tonDataMap } = await supabase
      .from('ton_farming_data')
      .select('user_id, wallet_address, balance, boost_package_id');

    if (tonDiscrepancies && tonDataMap) {
      const tonMap = new Map(tonDataMap.map(t => [t.user_id, t]));
      
      for (const user of tonDiscrepancies) {
        const tonData = tonMap.get(user.id);
        if (tonData) {
          if (user.ton_wallet_address !== tonData.wallet_address ||
              user.ton_farming_balance !== tonData.balance ||
              user.ton_boost_package !== tonData.boost_package_id) {
            tonSyncIssues++;
          }
        }
      }
    }

    console.log('TON –¥–∞–Ω–Ω—ã–µ:');
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –∫–æ—à–µ–ª—å–∫–∞–º–∏ –≤ users: ${tonDiscrepancies?.length || 0}`);
    console.log(`- –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${tonFarmingCount || 0}`);
    console.log(`- –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏: ${tonSyncIssues}`);
    console.log('');

    // 3. –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    console.log('\n‚ö†Ô∏è  –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í:\n');

    const risks = [
      {
        risk: '–í–´–°–û–ö–ò–ô',
        description: '–†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏',
        details: '–†–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ users –∏ farming_data —Ç–∞–±–ª–∏—Ü–∞—Ö –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–∞–º',
        affected: `${uniSyncIssues + tonSyncIssues} –∑–∞–ø–∏—Å–µ–π`
      },
      {
        risk: '–°–†–ï–î–ù–ò–ô',
        description: '–ò–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
        details: '–û–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ 2-3 –º–µ—Å—Ç–∞—Ö, —É—Å–ª–æ–∂–Ω—è—è –ø–æ–¥–¥–µ—Ä–∂–∫—É',
        affected: '–í—Å–µ –ø–æ–ª—è —Ñ–∞—Ä–º–∏–Ω–≥–∞'
      },
      {
        risk: '–°–†–ï–î–ù–ò–ô',
        description: '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
        details: '–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü',
        affected: '–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏'
      },
      {
        risk: '–ù–ò–ó–ö–ò–ô',
        description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        details: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å JOIN –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã',
        affected: '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —á—Ç–µ–Ω–∏–µ'
      }
    ];

    risks.forEach(r => {
      console.log(`üî¥ ${r.risk}: ${r.description}`);
      console.log(`   ${r.details}`);
      console.log(`   –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ: ${r.affected}`);
      console.log('');
    });

    // 4. –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    console.log('\nüìà –¢–ï–ö–£–©–ï–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:\n');

    // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const lastWeek = new Date();
    lastWeek.setDate(lastWeek.getDate() - 7);

    const { data: recentTransactions } = await supabase
      .from('transactions')
      .select('type')
      .gte('created_at', lastWeek.toISOString())
      .in('type', ['UNI_DEPOSIT', 'UNI_WITHDRAWAL', 'TON_DEPOSIT', 'FARMING_REWARD']);

    const transactionTypes = recentTransactions?.reduce((acc, t) => {
      acc[t.type] = (acc[t.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>) || {};

    console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:');
    Object.entries(transactionTypes).forEach(([type, count]) => {
      console.log(`- ${type}: ${count}`);
    });
    console.log('');

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');

    console.log('1. –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ):');
    console.log('   - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ –ë–î –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ schedulers');
    console.log('   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    console.log('');

    console.log('2. –°–†–ï–î–ù–ï–°–†–û–ß–ù–´–ï (—Ç—Ä–µ–±—É—é—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):');
    console.log('   - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å views –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º');
    console.log('   - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ–¥ –Ω–∞ –µ–¥–∏–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã');
    console.log('');

    console.log('3. –î–û–õ–ì–û–°–†–û–ß–ù–´–ï (–ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏):');
    console.log('   - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã farming_data');
    console.log('   - –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ users');
    console.log('   - –°–æ–∑–¥–∞—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å foreign keys');
    console.log('');

    // 6. –°—Ö–µ–º–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('\nüîó –°–•–ï–ú–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:\n');
    console.log('users (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)');
    console.log('  ‚îú‚îÄ‚îÄ uni_farming_data (–¥—É–±–ª–∏—Ä—É–µ—Ç UNI –ø–æ–ª—è)');
    console.log('  ‚îÇ   ‚îî‚îÄ‚îÄ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: UniFarmingRepository, —Å—Ç–∞—Ä—ã–π –∫–æ–¥');
    console.log('  ‚îú‚îÄ‚îÄ ton_farming_data (–¥—É–±–ª–∏—Ä—É–µ—Ç TON –ø–æ–ª—è)');
    console.log('  ‚îÇ   ‚îî‚îÄ‚îÄ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: TonFarmingRepository, —Å—Ç–∞—Ä—ã–π –∫–æ–¥');
    console.log('  ‚îî‚îÄ‚îÄ transactions (—Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ user_id)');
    console.log('      ‚îî‚îÄ‚îÄ —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ —Ç–∞–±–ª–∏—Ü UNI/TON...\n');
analyzeUniTonTables();