import { supabase } from '../core/supabase.js';

async function fixTonBoostTypes() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–• TON_BOOST –ü–û–õ–ï–ô');
  console.log('='.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_package_id –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π
  const { data: users, error } = await supabase
    .from('users')
    .select('id, ton_boost_package, ton_boost_package_id');
  
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    return;
  }
  
  console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${users?.length || 0}`);
  
  let fixed = 0;
  let errors = 0;
  
  for (const user of users || []) {
    // –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —á–∏—Å–ª—É
    const packageValue = Number(user.ton_boost_package || 0);
    const packageIdValue = Number(user.ton_boost_package_id || 0);
    
    // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ 0)
    const finalValue = Math.max(packageValue, packageIdValue);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    const { error: updateError } = await supabase
      .from('users')
      .update({ 
        ton_boost_package: finalValue,
        ton_boost_package_id: finalValue 
      })
      .eq('id', user.id);
    
    if (updateError) {
      console.error(`‚ùå User ${user.id}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateError);
      errors++;
    } else {
      fixed++;
      if (fixed % 20 === 0) {
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${fixed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
      }
    }
  }
  
  console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${fixed}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
  
  const { data: checkUsers } = await supabase
    .from('users')
    .select('id, ton_boost_package, ton_boost_package_id');
  
  let stillDifferent = 0;
  checkUsers?.forEach(user => {
    if (user.ton_boost_package !== user.ton_boost_package_id) {
      stillDifferent++;
    }
  });
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
  console.log(`  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${checkUsers?.length || 0}`);
  console.log(`  - –†–∞–∑–ª–∏—á–∏–π –≤ ton_boost –ø–æ–ª—è—Ö: ${stillDifferent}`);
  
  if (stillDifferent === 0) {
    console.log('\n‚úÖ –í–°–ï TON_BOOST –ü–û–õ–Ø –£–°–ü–ï–®–ù–û –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!');
  } else {
    console.log('\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏');
  }
}

fixTonBoostTypes().catch(console.error);