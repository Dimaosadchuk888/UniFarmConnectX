import { supabase } from '../core/supabase.js';
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface DuplicateGroup {
  group: string;
  fields: string[];
  description: string;
  dataType?: string[];
}

interface FieldUsage {
  field: string;
  usageCount: number;
  files: string[];
  isWrite: boolean;
  isRead: boolean;
  criticalUsage: boolean;
}

async function searchFieldInCode(field: string): Promise<FieldUsage> {
  const usage: FieldUsage = {
    field,
    usageCount: 0,
    files: [],
    isWrite: false,
    isRead: false,
    criticalUsage: false
  };

  const directories = ['modules', 'server', 'client/src', 'shared', 'scripts'];
  const extensions = ['.ts', '.tsx', '.js', '.jsx'];

  for (const dir of directories) {
    const dirPath = path.join(__dirname, '..', dir);
    if (!fs.existsSync(dirPath)) continue;

    const searchDir = (currentPath: string) => {
      try {
        const items = fs.readdirSync(currentPath);
        
        for (const item of items) {
          const fullPath = path.join(currentPath, item);
          const stat = fs.statSync(fullPath);
          
          if (stat.isDirectory() && !item.includes('node_modules')) {
            searchDir(fullPath);
          } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
            const content = fs.readFileSync(fullPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            const patterns = [
              new RegExp(`\\.${field}\\b`, 'g'),
              new RegExp(`\\['${field}'\\]`, 'g'),
              new RegExp(`\\["${field}"\\]`, 'g'),
              new RegExp(`${field}:`, 'g'),
              new RegExp(`\\.set\\([^)]*${field}`, 'g'),
              new RegExp(`\\.update\\([^)]*${field}`, 'g'),
              new RegExp(`INSERT[^;]*${field}`, 'gi'),
              new RegExp(`UPDATE[^;]*${field}`, 'gi')
            ];
            
            let found = false;
            for (const pattern of patterns) {
              const matches = content.match(pattern);
              if (matches) {
                usage.usageCount += matches.length;
                found = true;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                if (pattern.toString().includes('set|update|INSERT|UPDATE')) {
                  usage.isWrite = true;
                } else {
                  usage.isRead = true;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                if (fullPath.includes('farming') || fullPath.includes('boost') || 
                    fullPath.includes('wallet') || fullPath.includes('transaction')) {
                  usage.criticalUsage = true;
                }
              }
            }
            
            if (found && !usage.files.includes(fullPath)) {
              usage.files.push(fullPath.replace(path.join(__dirname, '..'), ''));
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
      }
    };

    searchDir(dirPath);
  }

  return usage;
}

async function analyzeDuplicateFields() {
  console.log('üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ü–û–õ–ï–ô');
  console.log('='.repeat(80));
  console.log('');

  const duplicates: DuplicateGroup[] = [
    {
      group: 'UNI Deposit',
      fields: ['uni_deposit_amount', 'uni_farming_deposit'],
      description: '–°—É–º–º–∞ UNI –¥–µ–ø–æ–∑–∏—Ç–∞',
      dataType: ['numeric', 'numeric']
    },
    {
      group: 'UNI Balance',
      fields: ['balance_uni', 'uni_farming_balance'],
      description: 'UNI –±–∞–ª–∞–Ω—Å/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è',
      dataType: ['numeric', 'numeric']
    },
    {
      group: 'TON Boost Package',
      fields: ['ton_boost_package', 'ton_boost_package_id'],
      description: 'ID –ø–∞–∫–µ—Ç–∞ TON Boost',
      dataType: ['integer', 'integer']
    },
    {
      group: 'Wallet Address',
      fields: ['wallet', 'ton_wallet_address'],
      description: 'TON –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞',
      dataType: ['text', 'text']
    }
  ];

  // 1. –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–î–ï
  console.log('üìä –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–î–ï:');
  console.log('-'.repeat(80));
  
  const fieldUsageMap = new Map<string, FieldUsage>();
  
  for (const dup of duplicates) {
    console.log(`\n${dup.group}:`);
    
    for (const field of dup.fields) {
      const usage = await searchFieldInCode(field);
      fieldUsageMap.set(field, usage);
      
      console.log(`  ${field}:`);
      console.log(`    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${usage.usageCount}`);
      console.log(`    - –§–∞–π–ª–æ–≤: ${usage.files.length}`);
      console.log(`    - –û–ø–µ—Ä–∞—Ü–∏–∏: ${usage.isWrite ? '–∑–∞–ø–∏—Å—å' : ''}${usage.isWrite && usage.isRead ? ', ' : ''}${usage.isRead ? '—á—Ç–µ–Ω–∏–µ' : ''}`);
      console.log(`    - –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: ${usage.criticalUsage ? '‚ö†Ô∏è –í–´–°–û–ö–ê–Ø' : '–æ–±—ã—á–Ω–∞—è'}`);
      
      if (usage.files.length > 0 && usage.files.length <= 3) {
        console.log(`    - –§–∞–π–ª—ã: ${usage.files.join(', ')}`);
      }
    }
  }

  // 2. –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –ë–î
  console.log('\n\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –ë–ê–ó–ï:');
  console.log('-'.repeat(80));

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const { data: users, count } = await supabase
    .from('users')
    .select('*', { count: 'exact' });

  if (!users) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    return;
  }

  console.log(`\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${count}`);

  for (const dup of duplicates) {
    console.log(`\n${dup.group} (${dup.fields.join(' vs ')}):`);
    
    let identicalCount = 0;
    let differentCount = 0;
    let bothNullCount = 0;
    let oneNullCount = 0;
    const differences: any[] = [];
    
    for (const user of users) {
      const val1 = user[dup.fields[0]];
      const val2 = user[dup.fields[1]];
      
      if (val1 === null && val2 === null) {
        bothNullCount++;
      } else if (val1 === null || val2 === null) {
        oneNullCount++;
        if (differences.length < 5) {
          differences.push({
            userId: user.id,
            telegram_id: user.telegram_id,
            [dup.fields[0]]: val1,
            [dup.fields[1]]: val2
          });
        }
      } else if (String(val1) === String(val2)) {
        identicalCount++;
      } else {
        differentCount++;
        if (differences.length < 5) {
          differences.push({
            userId: user.id,
            telegram_id: user.telegram_id,
            [dup.fields[0]]: val1,
            [dup.fields[1]]: val2
          });
        }
      }
    }
    
    console.log(`  - –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${identicalCount} (${(identicalCount/count*100).toFixed(1)}%)`);
    console.log(`  - –†–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è: ${differentCount} (${(differentCount/count*100).toFixed(1)}%)`);
    console.log(`  - –û–±–∞ NULL: ${bothNullCount} (${(bothNullCount/count*100).toFixed(1)}%)`);
    console.log(`  - –û–¥–∏–Ω NULL: ${oneNullCount} (${(oneNullCount/count*100).toFixed(1)}%)`);
    
    if (differences.length > 0) {
      console.log(`  - –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–∏–π (–ø–µ—Ä–≤—ã–µ 5):`);
      differences.forEach(diff => {
        console.log(`    User ${diff.userId}: ${dup.fields[0]}=${diff[dup.fields[0]]}, ${dup.fields[1]}=${diff[dup.fields[1]]}`);
      });
    }
  }

  // 3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–´–• –ü–û–õ–ï–ô
  console.log('\n\nüéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–´–• –ü–û–õ–ï–ô:');
  console.log('-'.repeat(80));

  for (const dup of duplicates) {
    console.log(`\n${dup.group}:`);
    
    const usage1 = fieldUsageMap.get(dup.fields[0])!;
    const usage2 = fieldUsageMap.get(dup.fields[1])!;
    
    let primary = '';
    let reason = '';
    
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ–ª—è
    if (usage1.usageCount > usage2.usageCount * 2) {
      primary = dup.fields[0];
      reason = '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥–µ';
    } else if (usage2.usageCount > usage1.usageCount * 2) {
      primary = dup.fields[1];
      reason = '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥–µ';
    } else if (usage1.criticalUsage && !usage2.criticalUsage) {
      primary = dup.fields[0];
      reason = '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö';
    } else if (!usage1.criticalUsage && usage2.criticalUsage) {
      primary = dup.fields[1];
      reason = '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö';
    } else if (dup.fields[0].includes('_')) {
      primary = dup.fields[0];
      reason = '–±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è';
    } else {
      primary = dup.fields[1];
      reason = '–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ';
    }
    
    console.log(`  üìå –ì–ª–∞–≤–Ω–æ–µ –ø–æ–ª–µ: ${primary}`);
    console.log(`  üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    console.log(`  ‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç: ${dup.fields.find(f => f !== primary)}`);
  }

  // 4. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó BALANCE –ü–û–õ–ï–ô
  console.log('\n\nüí∞ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó BALANCE –ü–û–õ–ï–ô:');
  console.log('-'.repeat(80));
  
  const { data: balanceAnalysis } = await supabase
    .from('users')
    .select('id, telegram_id, balance_uni, uni_farming_balance, uni_deposit_amount, uni_farming_deposit')
    .not('balance_uni', 'eq', 'uni_farming_balance')
    .limit(10);

  if (balanceAnalysis && balanceAnalysis.length > 0) {
    console.log('\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏ balance_uni vs uni_farming_balance:');
    balanceAnalysis.forEach(user => {
      const depositSum = parseFloat(user.uni_deposit_amount || '0');
      const farmingSum = parseFloat(user.uni_farming_balance || '0');
      const totalBalance = parseFloat(user.balance_uni || '0');
      
      console.log(`\nUser ${user.id}:`);
      console.log(`  - balance_uni: ${totalBalance}`);
      console.log(`  - uni_farming_balance: ${farmingSum}`);
      console.log(`  - uni_deposit_amount: ${depositSum}`);
      console.log(`  - –†–∞–∑–Ω–∏—Ü–∞: ${(totalBalance - farmingSum).toFixed(6)}`);
      console.log(`  - –í—ã–≤–æ–¥: balance_uni = –¥–µ–ø–æ–∑–∏—Ç + –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞`);
    });
  }

  // 5. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
  console.log('\n\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('='.repeat(80));
  
  console.log('\n1. –ü–û–õ–Ø –° –†–ê–ó–ù–´–ú –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï–ú (–ù–ï –£–î–ê–õ–Ø–¢–¨):');
  console.log('   - balance_uni: –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å UNI (–¥–µ–ø–æ–∑–∏—Ç + –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)');
  console.log('   - uni_farming_balance: —Ç–æ–ª—å–∫–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞');
  console.log('   ‚ö†Ô∏è –≠—Ç–∏ –ø–æ–ª—è –ù–ï –¥—É–±–ª–∏–∫–∞—Ç—ã, —É –Ω–∏—Ö —Ä–∞–∑–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞!');
  
  console.log('\n2. –ò–°–¢–ò–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´ (–ú–û–ñ–ù–û –£–ù–ò–§–ò–¶–ò–†–û–í–ê–¢–¨):');
  console.log('   - wallet ‚Üí ton_wallet_address (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ton_wallet_address)');
  console.log('   - ton_boost_package ‚Üí ton_boost_package_id (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö)');
  
  console.log('\n3. –¢–†–ï–ë–£–Æ–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
  console.log('   - uni_deposit_amount ‚Üî uni_farming_deposit');
  console.log('   - –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
  
  console.log('\n4. –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
  console.log('   a) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è—Ö-–¥—É–±–ª–∏–∫–∞—Ç–∞—Ö');
  console.log('   b) –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω—ã—Ö –ø–æ–ª–µ–π');
  console.log('   c) –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    duplicateGroups: duplicates,
    fieldUsage: Object.fromEntries(fieldUsageMap),
    recommendations: {
      keep_separate: ['balance_uni', 'uni_farming_balance'],
      unify: [
        { from: 'wallet', to: 'ton_wallet_address' },
        { from: 'ton_boost_package', to: 'ton_boost_package_id' }
      ],
      sync_required: ['uni_deposit_amount', 'uni_farming_deposit']
    }
  };
  
  fs.writeFileSync(
    path.join(__dirname, '..', 'DUPLICATE_FIELDS_AUDIT_REPORT.md'),
    JSON.stringify(report, null, 2)
  );
  
  console.log('\n\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DUPLICATE_FIELDS_AUDIT_REPORT.md');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–µ–π...\n');
analyzeDuplicateFields().catch(console.error);