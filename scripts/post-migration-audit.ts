import { supabase } from '../core/supabase.js';
import { glob } from 'glob';
import fs from 'fs/promises';

interface AuditResult {
  database: {
    tables: string[];
    userColumns: string[];
    deletedColumns: string[];
    views: string[];
  };
  code: {
    filesChecked: number;
    filesWithIssues: string[];
    removedFieldUsage: {
      uni_farming_deposit: number;
      ton_boost_package_id: number;
      wallet: number;
    };
    primaryFieldUsage: {
      uni_deposit_amount: number;
      ton_boost_package: number;
      ton_wallet_address: number;
    };
  };
  status: 'SUCCESS' | 'FAILED';
  issues: string[];
}

async function auditDatabase(): Promise<AuditResult['database']> {
  console.log('üîç –ê—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users
  const { data: columns } = await supabase.rpc('get_table_columns', { table_name: 'users' });
  const userColumns = columns?.map((c: any) => c.column_name) || [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
  const deletedColumns = ['uni_farming_deposit', 'ton_boost_package_id', 'wallet'];
  const stillExists = deletedColumns.filter(col => userColumns.includes(col));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º views
  const { data: views } = await supabase.rpc('get_views');
  const viewNames = views?.map((v: any) => v.table_name) || [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
  const { data: tables } = await supabase.rpc('get_tables');
  const tableNames = tables?.map((t: any) => t.table_name) || [];
  
  return {
    tables: tableNames,
    userColumns,
    deletedColumns: stillExists,
    views: viewNames
  };
}

async function auditCode(): Promise<AuditResult['code']> {
  console.log('üîç –ê—É–¥–∏—Ç –∫–æ–¥–∞...');
  
  const files = await glob([
    'client/**/*.{ts,tsx}',
    'server/**/*.{ts,js}',
    'modules/**/*.{ts,js}',
    'shared/**/*.{ts,js}'
  ]);
  
  const removedFieldUsage = {
    uni_farming_deposit: 0,
    ton_boost_package_id: 0,
    wallet: 0
  };
  
  const primaryFieldUsage = {
    uni_deposit_amount: 0,
    ton_boost_package: 0,
    ton_wallet_address: 0
  };
  
  const filesWithIssues: string[] = [];
  
  for (const file of files) {
    const content = await fs.readFile(file, 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    if (content.includes('uni_farming_deposit')) {
      removedFieldUsage.uni_farming_deposit++;
      filesWithIssues.push(file);
    }
    if (content.includes('ton_boost_package_id')) {
      removedFieldUsage.ton_boost_package_id++;
      filesWithIssues.push(file);
    }
    if (content.includes('wallet') && !content.includes('ton_wallet_address')) {
      // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è wallet
      if (content.match(/[^_]wallet[^_]/)) {
        removedFieldUsage.wallet++;
        filesWithIssues.push(file);
      }
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    if (content.includes('uni_deposit_amount')) {
      primaryFieldUsage.uni_deposit_amount++;
    }
    if (content.includes('ton_boost_package')) {
      primaryFieldUsage.ton_boost_package++;
    }
    if (content.includes('ton_wallet_address')) {
      primaryFieldUsage.ton_wallet_address++;
    }
  }
  
  return {
    filesChecked: files.length,
    filesWithIssues: [...new Set(filesWithIssues)],
    removedFieldUsage,
    primaryFieldUsage
  };
}

async function performAudit(): Promise<void> {
  console.log('üöÄ –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò');
  console.log('='.repeat(60));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}`);
  console.log('\n');
  
  const result: AuditResult = {
    database: await auditDatabase(),
    code: await auditCode(),
    status: 'SUCCESS',
    issues: []
  };
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ë–î
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–£–î–ò–¢–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
  console.log('-'.repeat(40));
  console.log(`‚úÖ –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: ${result.database.tables.length}`);
  console.log(`‚úÖ –ö–æ–ª–æ–Ω–æ–∫ –≤ users: ${result.database.userColumns.length}`);
  console.log(`‚úÖ Views —Å–æ–∑–¥–∞–Ω–æ: ${result.database.views.length}`);
  
  if (result.database.deletedColumns.length > 0) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!`);
    console.log(`   –ù–∞–π–¥–µ–Ω—ã: ${result.database.deletedColumns.join(', ')}`);
    result.issues.push('–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è –Ω–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î');
    result.status = 'FAILED';
  } else {
    console.log(`‚úÖ –í—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
  const requiredFields = ['uni_deposit_amount', 'ton_boost_package', 'ton_wallet_address'];
  const missingFields = requiredFields.filter(f => !result.database.userColumns.includes(f));
  
  if (missingFields.length > 0) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
    result.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ –ë–î');
    result.status = 'FAILED';
  } else {
    console.log(`‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î`);
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–¥–∞
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–£–î–ò–¢–ê –ö–û–î–ê:');
  console.log('-'.repeat(40));
  console.log(`‚úÖ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${result.code.filesChecked}`);
  
  if (Object.values(result.code.removedFieldUsage).some(v => v > 0)) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:`);
    Object.entries(result.code.removedFieldUsage).forEach(([field, count]) => {
      if (count > 0) {
        console.log(`   - ${field}: ${count} —Ä–∞–∑`);
      }
    });
    console.log(`   –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${result.code.filesWithIssues.join(', ')}`);
    result.issues.push('–ö–æ–¥ –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è');
    result.status = 'FAILED';
  } else {
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ!`);
  }
  
  console.log(`\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π:`);
  Object.entries(result.code.primaryFieldUsage).forEach(([field, count]) => {
    console.log(`   - ${field}: ${count} —Ä–∞–∑`);
  });
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò:');
  console.log('-'.repeat(40));
  
  if (result.status === 'SUCCESS') {
    console.log('‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–µ–π');
    console.log('‚úÖ –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è');
    console.log('‚úÖ Views –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
  } else {
    console.log('‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø!');
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
    result.issues.forEach(issue => console.log(`  - ${issue}`));
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    result,
    summary: {
      databaseStatus: result.database.deletedColumns.length === 0 ? 'CLEAN' : 'NEEDS_CLEANUP',
      codeStatus: Object.values(result.code.removedFieldUsage).every(v => v === 0) ? 'CLEAN' : 'NEEDS_CLEANUP',
      overallStatus: result.status
    }
  };
  
  await fs.writeFile(
    'POST_MIGRATION_AUDIT_REPORT.json',
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ POST_MIGRATION_AUDIT_REPORT.json');
}

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async function createRPCFunctions() {
  try {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    await supabase.rpc('create_function', {
      name: 'get_table_columns',
      definition: `
        CREATE OR REPLACE FUNCTION get_table_columns(table_name text)
        RETURNS TABLE(column_name text) AS $$
        BEGIN
          RETURN QUERY
          SELECT c.column_name::text
          FROM information_schema.columns c
          WHERE c.table_schema = 'public' 
            AND c.table_name = get_table_columns.table_name;
        END;
        $$ LANGUAGE plpgsql;
      `
    });
  } catch (e) {
    // –§—É–Ω–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
  
  try {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è views
    await supabase.rpc('create_function', {
      name: 'get_views',
      definition: `
        CREATE OR REPLACE FUNCTION get_views()
        RETURNS TABLE(table_name text) AS $$
        BEGIN
          RETURN QUERY
          SELECT v.table_name::text
          FROM information_schema.views v
          WHERE v.table_schema = 'public';
        END;
        $$ LANGUAGE plpgsql;
      `
    });
  } catch (e) {
    // –§—É–Ω–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
  
  try {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    await supabase.rpc('create_function', {
      name: 'get_tables',
      definition: `
        CREATE OR REPLACE FUNCTION get_tables()
        RETURNS TABLE(table_name text) AS $$
        BEGIN
          RETURN QUERY
          SELECT t.table_name::text
          FROM information_schema.tables t
          WHERE t.table_schema = 'public' 
            AND t.table_type = 'BASE TABLE';
        END;
        $$ LANGUAGE plpgsql;
      `
    });
  } catch (e) {
    // –§—É–Ω–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
createRPCFunctions()
  .then(() => performAudit())
  .catch(console.error);