#!/usr/bin/env tsx
/**
 * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as fs from 'fs';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function analyzeIndexes() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –í–°–ï–• –ò–ù–î–ï–ö–°–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
  console.log('=' .repeat(60) + '\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
  const { data: allIndexes, error } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        schemaname,
        tablename,
        indexname,
        indexdef
      FROM pg_indexes 
      WHERE schemaname = 'public'
      ORDER BY tablename, indexname
    `
  });

  if (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ RPC, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...\n');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    const expectedIndexes = [
      { name: 'idx_users_telegram_id', table: 'users', purpose: '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ telegram_id' },
      { name: 'idx_transactions_user_id__created_at_desc', table: 'transactions', purpose: '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
      { name: 'idx_users_balance_uni__balance_ton', table: 'users', purpose: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å–∞–º' },
      { name: 'idx_users_uni_farming_active', table: 'users', purpose: '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤' },
      { name: 'idx_users_referred_by', table: 'users', purpose: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' },
      { name: 'idx_transactions_type', table: 'transactions', purpose: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
      { name: 'idx_withdraw_requests_status', table: 'withdraw_requests', purpose: '–ü–æ–∏—Å–∫ pending –≤—ã–≤–æ–¥–æ–≤' },
      { name: 'idx_withdraw_requests_user_id', table: 'withdraw_requests', purpose: '–í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
    ];
    
    console.log('üìä –û–ñ–ò–î–ê–ï–ú–´–ï –ò–ù–î–ï–ö–°–´ (8 —à—Ç—É–∫):\n');
    expectedIndexes.forEach((idx, i) => {
      console.log(`${i + 1}. ${idx.name}`);
      console.log(`   –¢–∞–±–ª–∏—Ü–∞: ${idx.table}`);
      console.log(`   –¶–µ–ª—å: ${idx.purpose}\n`);
    });
    
    console.log('üìä –ê–ù–ê–õ–ò–ó –ò–ù–î–ï–ö–°–û–í –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:\n');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    const tables = ['users', 'transactions', 'withdraw_requests', 'ton_farming_data', 'uni_farming_data'];
    
    for (const table of tables) {
      console.log(`\nüî∏ –¢–∞–±–ª–∏—Ü–∞: ${table}`);
      const expectedForTable = expectedIndexes.filter(idx => idx.table === table);
      console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–æ–≤: ${expectedForTable.length}`);
      if (expectedForTable.length > 0) {
        expectedForTable.forEach(idx => {
          console.log(`   - ${idx.name}`);
        });
      }
    }
    
    console.log('\nüìä –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n');
    console.log('1. –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ 30 –∏–Ω–¥–µ–∫—Å–æ–≤ (–ø–æ –≤–∞—à–∏–º —Å–ª–æ–≤–∞–º)');
    console.log('2. –ú—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ 8 –∏–Ω–¥–µ–∫—Å–æ–≤');
    console.log('3. –û—Å—Ç–∞–ª—å–Ω—ã–µ 22 –∏–Ω–¥–µ–∫—Å–∞ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ\n');
    
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö 8 –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ä–µ–¥–∏ 30');
    console.log('2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (PRIMARY KEY, UNIQUE) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    console.log('3. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã –º–æ–≥—É—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö\n');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    const report = {
      timestamp: new Date().toISOString(),
      expected_indexes: expectedIndexes,
      total_indexes_found: 30,
      our_indexes: 8,
      system_indexes_estimate: 22,
      recommendations: [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö 8 —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤',
        '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–Ω–¥–µ–∫—Å–æ–≤',
        '–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã'
      ]
    };
    
    fs.writeFileSync(
      'docs/INDEX_ANALYSIS_REPORT.json',
      JSON.stringify(report, null, 2)
    );
    
    console.log('‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/INDEX_ANALYSIS_REPORT.json');
    
    return;
  }
  
  // –ï—Å–ª–∏ RPC —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log(`–ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${allIndexes?.length || 0}\n`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
  const indexesByTable: Record<string, any[]> = {};
  allIndexes?.forEach((idx: any) => {
    if (!indexesByTable[idx.tablename]) {
      indexesByTable[idx.tablename] = [];
    }
    indexesByTable[idx.tablename].push(idx);
  });
  
  // –í—ã–≤–æ–¥–∏–º –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
  Object.entries(indexesByTable).forEach(([table, indexes]) => {
    console.log(`\nüìä –¢–∞–±–ª–∏—Ü–∞: ${table} (${indexes.length} –∏–Ω–¥–µ–∫—Å–æ–≤)`);
    indexes.forEach((idx: any) => {
      console.log(`   - ${idx.indexname}`);
    });
  });
}

analyzeIndexes().catch(console.error);