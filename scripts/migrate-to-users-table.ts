import { supabase } from '../core/supabase.js';

async function migrateToUsersTable() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£ USERS');
  console.log('='.repeat(80));
  console.log('');

  const results = {
    created_users: 0,
    updated_deposits: 0,
    updated_boosts: 0,
    errors: []
  };

  try {
    // 1. –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('üìù –®–ê–ì 1: –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ uni_farming_data
    const { data: uniFarmingUsers } = await supabase
      .from('uni_farming_data')
      .select('*')
      .order('user_id');

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: existingUsers } = await supabase
      .from('users')
      .select('id')
      .order('id');

    const existingIds = new Set(existingUsers?.map(u => u.id) || []);

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const farming of uniFarmingUsers || []) {
      if (!existingIds.has(farming.user_id)) {
        console.log(`–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${farming.user_id}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        const depositAmount = isNaN(farming.deposit_amount) ? 0 : farming.deposit_amount;
        
        const { error } = await supabase
          .from('users')
          .insert({
            id: farming.user_id,
            telegram_id: farming.user_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ telegram_id
            username: `legacy_user_${farming.user_id}`,
            uni_deposit_amount: depositAmount,
            uni_farming_balance: farming.farming_balance || 0,
            uni_farming_active: farming.is_active || false,
            balance_uni: farming.farming_balance || 0,
            created_at: farming.created_at || new Date().toISOString()
          });

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è user ${farming.user_id}:`, error);
          results.errors.push({ user_id: farming.user_id, error: error.message });
        } else {
          console.log(`‚úÖ User ${farming.user_id} —Å–æ–∑–¥–∞–Ω (deposit: ${depositAmount} UNI)`);
          results.created_users++;
        }
      }
    }

    console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${results.created_users} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // 2. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í
    console.log('\n\nüìù –®–ê–ì 2: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const { data: depositsToSync } = await supabase
      .from('uni_farming_data')
      .select('user_id, deposit_amount, farming_balance')
      .gt('deposit_amount', 0)
      .order('user_id');

    for (const deposit of depositsToSync || []) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ users
      const { data: currentUser } = await supabase
        .from('users')
        .select('uni_deposit_amount')
        .eq('id', deposit.user_id)
        .single();

      if (currentUser && currentUser.uni_deposit_amount === 0) {
        console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è user ${deposit.user_id}: ${deposit.deposit_amount} UNI`);
        
        const { error } = await supabase
          .from('users')
          .update({
            uni_deposit_amount: deposit.deposit_amount,
            uni_farming_balance: deposit.farming_balance || 0,
            balance_uni: deposit.farming_balance || 0
          })
          .eq('id', deposit.user_id);

        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ user ${deposit.user_id}:`, error);
          results.errors.push({ user_id: deposit.user_id, error: error.message });
        } else {
          console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω`);
          results.updated_deposits++;
        }
      }
    }

    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated_deposits} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

    // 3. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø TON BOOST PACKAGES
    console.log('\n\nüìù –®–ê–ì 3: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø TON BOOST PACKAGES\n');

    const { data: tonBoosts } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_package_id, farming_balance')
      .not('boost_package_id', 'is', null)
      .order('user_id');

    for (const boost of tonBoosts || []) {
      console.log(`–û–±–Ω–æ–≤–ª—è–µ–º boost package –¥–ª—è user ${boost.user_id}: –ø–∞–∫–µ—Ç ${boost.boost_package_id}`);
      
      const { error } = await supabase
        .from('users')
        .update({
          ton_boost_package: boost.boost_package_id,
          ton_farming_balance: boost.farming_balance || 0
        })
        .eq('id', boost.user_id);

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è boost user ${boost.user_id}:`, error);
        results.errors.push({ user_id: boost.user_id, error: error.message });
      } else {
        console.log(`‚úÖ Boost package –æ–±–Ω–æ–≤–ª–µ–Ω`);
        results.updated_boosts++;
      }
    }

    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated_boosts} boost packages`);

    // 4. –°–û–ó–î–ê–ù–ò–ï SQL VIEWS
    console.log('\n\nüìù –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï SQL VIEWS –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò\n');

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏—Ö)
    console.log('–ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ SQL)
    console.log('–°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Views');

    // –°–æ–∑–¥–∞–µ–º Views
    const viewsSQL = `
-- –°–Ω–∞—á–∞–ª–∞ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
ALTER TABLE uni_farming_data RENAME TO _archived_uni_farming_data_2025_08_02;
ALTER TABLE ton_farming_data RENAME TO _archived_ton_farming_data_2025_08_02;

-- View –¥–ª—è uni_farming_data
CREATE OR REPLACE VIEW uni_farming_data AS
SELECT 
  gen_random_uuid() as id,
  id as user_id,
  uni_deposit_amount as deposit_amount,
  uni_farming_balance as farming_balance,
  COALESCE(uni_farming_balance, 0) as total_earned,
  updated_at as last_claim_at,
  uni_farming_active as is_active,
  created_at as farming_start,
  created_at,
  updated_at,
  0.01 as farming_rate,
  NULL as farming_start_timestamp,
  updated_at as farming_last_update,
  uni_deposit_amount as farming_deposit
FROM users
WHERE uni_deposit_amount > 0 OR uni_farming_balance > 0;

-- View –¥–ª—è ton_farming_data  
CREATE OR REPLACE VIEW ton_farming_data AS
SELECT 
  gen_random_uuid() as id,
  id as user_id,
  ton_wallet_address as wallet_address,
  ton_farming_balance as farming_balance,
  ton_boost_package as boost_package_id,
  created_at,
  updated_at
FROM users
WHERE ton_wallet_address IS NOT NULL OR ton_farming_balance > 0 OR ton_boost_package IS NOT NULL;
`;

    console.log('SQL Views –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Supabase Dashboard');
    console.log('–°–æ—Ö—Ä–∞–Ω—è—é SQL –≤ —Ñ–∞–π–ª...');
    
    const fs = await import('fs/promises');
    await fs.writeFile('CREATE_VIEWS_SQL.sql', viewsSQL);
    console.log('‚úÖ SQL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ CREATE_VIEWS_SQL.sql');

    // 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    console.log('\n\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:\n');

    const { count: totalUsers } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });

    const { count: uniDeposits } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .gt('uni_deposit_amount', 0);

    const { count: tonBoostUsers } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .not('ton_boost_package', 'is', null);

    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ users: ${totalUsers}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${uniDeposits}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON boost: ${tonBoostUsers}`);

    // 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    console.log('\n\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n');
    console.log('='.repeat(80));
    console.log(`–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.created_users}`);
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${results.updated_deposits}`);
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ boost packages: ${results.updated_boosts}`);
    
    if (results.errors.length > 0) {
      console.log(`\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ (${results.errors.length}):`);
      results.errors.forEach(e => {
        console.log(`- User ${e.user_id}: ${e.error}`);
      });
    }

    console.log('\nüìå –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞ CREATE_VIEWS_SQL.sql –≤ Supabase Dashboard');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ boost/service.ts –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ users.ton_farming_balance');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ Views');
    console.log('4. –£–¥–∞–ª–∏—Ç–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      results,
      next_steps: [
        'Execute CREATE_VIEWS_SQL.sql',
        'Update boost/service.ts',
        'Test Views functionality',
        'Remove archived tables'
      ]
    };

    await fs.writeFile('MIGRATION_REPORT_2025-08-02.json', JSON.stringify(report, null, 2));
    console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MIGRATION_REPORT_2025-08-02.json');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
console.log('üîß –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...\n');
console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
console.log('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –±—ç–∫–∞–ø!\n');

// –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–º–µ–Ω—É
console.log('–ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã)');
setTimeout(() => {
  migrateToUsersTable();
}, 5000);