import { supabase } from '../core/supabase.js';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

async function createAuthToken() {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 74...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 74)
      .single();
      
    if (error || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 74 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: user.id,
      telegram_id: user.telegram_id,
      username: user.username,
      balance_uni: user.balance_uni,
      balance_ton: user.balance_ton
    });
    
    // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è JWT
    const payload = {
      userId: user.id,
      telegram_id: user.telegram_id,
      username: user.username,
      ref_code: user.ref_code
    };
    
    // –ü–æ–ª—É—á–∞–µ–º JWT —Å–µ–∫—Ä–µ—Ç
    const JWT_SECRET = process.env.JWT_SECRET;
    if (!JWT_SECRET) {
      console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });
    
    console.log('\n‚úÖ JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìã –¢–æ–∫–µ–Ω:', token);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:');
    console.log(decoded);
    
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    console.log('\nüìå –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:');
    console.log(`localStorage.setItem('unifarm_jwt_token', '${token}');`);
    console.log('location.reload();');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

createAuthToken();