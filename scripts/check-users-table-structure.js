/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUsersTable() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      return;
    }

    if (!data || data.length === 0) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ users –ø—É—Å—Ç–∞—è');
      return;
    }

    const fields = Object.keys(data[0]);
    console.log('üìã –í—Å–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
    fields.forEach(field => {
      const value = data[0][field];
      const type = value === null ? 'null' : typeof value;
      console.log(`   - ${field}: ${type} (–ø—Ä–∏–º–µ—Ä: ${value})`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –±–∞–ª–∞–Ω—Å–æ–≤:');
    const balanceFields = ['uni_balance', 'ton_balance', 'balance_uni', 'balance_ton', 'balance'];
    
    balanceFields.forEach(field => {
      if (fields.includes(field)) {
        console.log(`‚úÖ ${field} - –Ω–∞–π–¥–µ–Ω–æ`);
      } else {
        console.log(`‚ùå ${field} - –ù–ï –Ω–∞–π–¥–µ–Ω–æ`);
      }
    });

    // –ò—â–µ–º –ª—é–±—ã–µ –ø–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
    console.log('\nüîç –ü–æ–ª—è, –≤–æ–∑–º–æ–∂–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏:');
    fields.filter(field => 
      field.includes('balance') || 
      field.includes('uni') || 
      field.includes('ton') ||
      field.includes('amount')
    ).forEach(field => {
      console.log(`   - ${field}: ${data[0][field]}`);
    });

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkUsersTable();