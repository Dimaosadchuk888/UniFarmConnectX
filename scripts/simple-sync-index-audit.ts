#!/usr/bin/env tsx
/**
 * –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∞—É–¥–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runSimpleAudit() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ò –ò–ù–î–ï–ö–°–û–í');
  console.log('=' .repeat(50) + '\n');
  
  // 1. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π UNI farming
  console.log('üìä 1. –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô UNI FARMING\n');
  
  const { data: users } = await supabase
    .from('users')
    .select('id, telegram_id, username, uni_deposit_amount, uni_farming_balance, uni_farming_rate, uni_farming_active')
    .gt('uni_deposit_amount', 0);
  
  const { data: uniFarmingData } = await supabase
    .from('uni_farming_data')
    .select('*');
  
  // –°–æ–∑–¥–∞—ë–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const farmingMap = new Map();
  uniFarmingData?.forEach(f => farmingMap.set(f.user_id, f));
  
  const uniDifferences = [];
  let totalDepositDiff = 0;
  let totalBalanceDiff = 0;
  
  users?.forEach(user => {
    const farming = farmingMap.get(user.id);
    
    if (farming) {
      const depositDiff = Math.abs(user.uni_deposit_amount - (farming.deposit_amount || 0));
      const balanceDiff = Math.abs(user.uni_farming_balance - (farming.farming_balance || 0));
      
      if (depositDiff > 0.01 || balanceDiff > 0.01) {
        uniDifferences.push({
          user_id: user.id,
          telegram_id: user.telegram_id,
          username: user.username,
          deposit_diff: depositDiff,
          balance_diff: balanceDiff,
          user_deposit: user.uni_deposit_amount,
          farming_deposit: farming.deposit_amount || 0,
          user_balance: user.uni_farming_balance,
          farming_balance: farming.farming_balance || 0
        });
        
        totalDepositDiff += depositDiff;
        totalBalanceDiff += balanceDiff;
      }
    }
  });
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${uniDifferences.length}`);
  console.log(`–û–±—â–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ deposit: ${totalDepositDiff.toFixed(2)}`);
  console.log(`–û–±—â–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ balance: ${totalBalanceDiff.toFixed(2)}`);
  
  if (uniDifferences.length > 0) {
    console.log('\n–ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 5):');
    uniDifferences.slice(0, 5).forEach(diff => {
      console.log(`  User ${diff.user_id} (@${diff.username}):`);
      console.log(`    deposit: ${diff.user_deposit} vs ${diff.farming_deposit} (—Ä–∞–∑–Ω–∏—Ü–∞: ${diff.deposit_diff})`);
      console.log(`    balance: ${diff.user_balance} vs ${diff.farming_balance} (—Ä–∞–∑–Ω–∏—Ü–∞: ${diff.balance_diff})`);
    });
  }
  
  // 2. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π TON farming
  console.log('\nüìä 2. –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô TON FARMING\n');
  
  const { data: tonUsers } = await supabase
    .from('users')
    .select('id, telegram_id, username, ton_farming_balance, ton_boost_active, ton_boost_rate')
    .or('ton_farming_balance.gt.0,ton_boost_active.eq.true');
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('*');
  
  const tonMap = new Map();
  tonFarmingData?.forEach(f => tonMap.set(parseInt(f.user_id), f));
  
  const tonDifferences = [];
  let totalTonBalanceDiff = 0;
  
  tonUsers?.forEach(user => {
    const farming = tonMap.get(user.id);
    
    if (farming) {
      const balanceDiff = Math.abs(user.ton_farming_balance - (farming.farming_balance || 0));
      
      if (balanceDiff > 0.01) {
        tonDifferences.push({
          user_id: user.id,
          telegram_id: user.telegram_id,
          username: user.username,
          balance_diff: balanceDiff,
          user_balance: user.ton_farming_balance,
          farming_balance: farming.farming_balance || 0
        });
        
        totalTonBalanceDiff += balanceDiff;
      }
    }
  });
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${tonDifferences.length}`);
  console.log(`–û–±—â–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ balance: ${totalTonBalanceDiff.toFixed(2)}`);
  
  // 3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
  console.log('\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò\n');
  
  const syncFields = [];
  
  if (uniDifferences.length > 0) {
    if (totalDepositDiff > 0) {
      syncFields.push({
        field: 'uni_deposit_amount',
        table: 'users',
        source: 'uni_farming_data.deposit_amount',
        strategy: 'GREATEST(users.uni_deposit_amount, uni_farming_data.deposit_amount)',
        priority: 'CRITICAL',
        affected_records: uniDifferences.filter(d => d.deposit_diff > 0).length
      });
    }
    
    if (totalBalanceDiff > 0) {
      syncFields.push({
        field: 'uni_farming_balance',
        table: 'users',
        source: 'uni_farming_data.farming_balance',
        strategy: 'GREATEST(users.uni_farming_balance, uni_farming_data.farming_balance)',
        priority: 'CRITICAL',
        affected_records: uniDifferences.filter(d => d.balance_diff > 0).length
      });
    }
  }
  
  if (tonDifferences.length > 0) {
    syncFields.push({
      field: 'ton_farming_balance',
      table: 'users',
      source: 'ton_farming_data.farming_balance',
      strategy: 'GREATEST(users.ton_farming_balance, ton_farming_data.farming_balance)',
      priority: 'CRITICAL',
      affected_records: tonDifferences.length
    });
  }
  
  console.log('–ü–æ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
  syncFields.forEach(field => {
    console.log(`  - ${field.field}: ${field.affected_records} –∑–∞–ø–∏—Å–µ–π (${field.priority})`);
  });
  
  // 4. –ê–ù–ê–õ–ò–ó –ù–ï–û–ë–•–û–î–ò–ú–´–• –ò–ù–î–ï–ö–°–û–í
  console.log('\nüìà –ê–ù–ê–õ–ò–ó –ù–ï–û–ë–•–û–î–ò–ú–´–• –ò–ù–î–ï–ö–°–û–í\n');
  
  const recommendedIndexes = [
    {
      table: 'users',
      columns: 'telegram_id',
      reason: '–ü–æ–∏—Å–∫ –ø–æ telegram_id –æ—á–µ–Ω—å —á–∞—Å—Ç—ã–π',
      priority: 'CRITICAL',
      type: 'btree'
    },
    {
      table: 'transactions',
      columns: 'user_id, created_at DESC',
      reason: '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      priority: 'CRITICAL',
      type: 'btree'
    },
    {
      table: 'users',
      columns: 'balance_uni, balance_ton',
      reason: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å–∞–º',
      priority: 'HIGH',
      type: 'btree',
      where: 'balance_uni > 0 OR balance_ton > 0'
    },
    {
      table: 'users',
      columns: 'uni_farming_active',
      reason: '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤',
      priority: 'HIGH',
      type: 'btree',
      where: 'uni_farming_active = true'
    },
    {
      table: 'users',
      columns: 'referred_by',
      reason: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
      priority: 'MEDIUM',
      type: 'btree',
      where: 'referred_by IS NOT NULL'
    },
    {
      table: 'transactions',
      columns: 'type',
      reason: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      priority: 'MEDIUM',
      type: 'btree'
    },
    {
      table: 'withdraw_requests',
      columns: 'status',
      reason: '–ü–æ–∏—Å–∫ pending –≤—ã–≤–æ–¥–æ–≤',
      priority: 'HIGH',
      type: 'btree',
      where: "status = 'pending'"
    },
    {
      table: 'withdraw_requests',
      columns: 'user_id',
      reason: '–í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      priority: 'HIGH',
      type: 'btree'
    }
  ];
  
  console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã:');
  recommendedIndexes.forEach((idx, i) => {
    console.log(`${i + 1}. ${idx.table}.${idx.columns} (${idx.priority})`);
    console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${idx.reason}`);
    if (idx.where) {
      console.log(`   WHERE: ${idx.where}`);
    }
  });
  
  // 5. –ì–ï–ù–ï–†–ê–¶–ò–Ø SQL –°–ö–†–ò–ü–¢–û–í
  console.log('\nüìù –ì–ï–ù–ï–†–ê–¶–ò–Ø SQL –°–ö–†–ò–ü–¢–û–í\n');
  
  // –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  let syncScript = `-- –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
-- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toISOString()}
-- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–¥–µ–ª–∞–π—Ç–µ backup –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º!

BEGIN;

-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –î–û
CREATE TEMP TABLE checksum_before AS
SELECT SUM(balance_uni + balance_ton + uni_farming_balance + ton_farming_balance) as total
FROM users;

`;

  syncFields.forEach(field => {
    if (field.field === 'uni_deposit_amount') {
      syncScript += `-- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${field.field} (${field.affected_records} –∑–∞–ø–∏—Å–µ–π)
UPDATE users u
SET uni_deposit_amount = GREATEST(u.uni_deposit_amount, COALESCE(ufd.deposit_amount, 0))
FROM uni_farming_data ufd
WHERE u.id = ufd.user_id
  AND u.uni_deposit_amount < COALESCE(ufd.deposit_amount, 0);

`;
    } else if (field.field === 'uni_farming_balance') {
      syncScript += `-- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${field.field} (${field.affected_records} –∑–∞–ø–∏—Å–µ–π)
UPDATE users u
SET uni_farming_balance = GREATEST(u.uni_farming_balance, COALESCE(ufd.farming_balance, 0))
FROM uni_farming_data ufd
WHERE u.id = ufd.user_id
  AND u.uni_farming_balance < COALESCE(ufd.farming_balance, 0);

`;
    } else if (field.field === 'ton_farming_balance') {
      syncScript += `-- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${field.field} (${field.affected_records} –∑–∞–ø–∏—Å–µ–π)
UPDATE users u
SET ton_farming_balance = GREATEST(u.ton_farming_balance, COALESCE(tfd.farming_balance, 0))
FROM ton_farming_data tfd
WHERE u.id = CAST(tfd.user_id AS INTEGER)
  AND u.ton_farming_balance < COALESCE(tfd.farming_balance, 0);

`;
    }
  });

  syncScript += `-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –ü–û–°–õ–ï
CREATE TEMP TABLE checksum_after AS
SELECT SUM(balance_uni + balance_ton + uni_farming_balance + ton_farming_balance) as total
FROM users;

-- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
SELECT 
  '–î–û' as period, total 
FROM checksum_before
UNION ALL
SELECT 
  '–ü–û–°–õ–ï' as period, total 
FROM checksum_after;

-- –ï—Å–ª–∏ —Å—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∫–æ–º–º–∏—Ç–∏–º
-- COMMIT;
-- –ï—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
-- ROLLBACK;
`;

  // –°–∫—Ä–∏–ø—Ç –∏–Ω–¥–µ–∫—Å–æ–≤
  let indexScript = `-- –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
-- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toISOString()}
-- –ò—Å–ø–æ–ª—å–∑—É–µ–º CONCURRENTLY –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü

`;

  recommendedIndexes.forEach((idx, i) => {
    const indexName = `idx_${idx.table}_${idx.columns.replace(/[, ]/g, '_').replace(/DESC/g, 'desc').toLowerCase()}`;
    
    indexScript += `-- ${i + 1}. ${idx.reason}
CREATE INDEX CONCURRENTLY IF NOT EXISTS ${indexName}
ON ${idx.table} (${idx.columns})`;
    
    if (idx.where) {
      indexScript += `
WHERE ${idx.where}`;
    }
    
    indexScript += `;

`;
  });

  indexScript += `-- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
ANALYZE users;
ANALYZE transactions;
ANALYZE withdraw_requests;
`;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
  const scriptsDir = path.join(process.cwd(), 'scripts');
  
  await fs.writeFile(
    path.join(scriptsDir, 'generated_sync_script.sql'),
    syncScript
  );
  
  await fs.writeFile(
    path.join(scriptsDir, 'generated_index_script.sql'),
    indexScript
  );
  
  console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
  console.log('   - scripts/generated_sync_script.sql');
  console.log('   - scripts/generated_index_script.sql');
  
  // 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '='.repeat(50));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
  console.log('='.repeat(50));
  console.log(`\n‚úÖ –ü–æ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${syncFields.length}`);
  syncFields.forEach(field => {
    console.log(`   - ${field.field}: ${field.affected_records} –∑–∞–ø–∏—Å–µ–π`);
  });
  
  console.log(`\n‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: ${recommendedIndexes.length}`);
  console.log(`   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${recommendedIndexes.filter(i => i.priority === 'CRITICAL').length}`);
  console.log(`   - –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${recommendedIndexes.filter(i => i.priority === 'HIGH').length}`);
  console.log(`   - –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${recommendedIndexes.filter(i => i.priority === 'MEDIUM').length}`);
  
  console.log('\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ backup: pg_dump > backup.sql');
  console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ scripts/generated_sync_script.sql');
  console.log('   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ scripts/generated_index_script.sql');
  console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
  const report = {
    timestamp: new Date().toISOString(),
    uni_differences: uniDifferences,
    ton_differences: tonDifferences,
    sync_fields: syncFields,
    recommended_indexes: recommendedIndexes,
    total_deposit_diff: totalDepositDiff,
    total_balance_diff: totalBalanceDiff,
    total_ton_balance_diff: totalTonBalanceDiff
  };
  
  await fs.writeFile(
    path.join(process.cwd(), 'docs', 'SYNC_INDEX_AUDIT_REPORT.json'),
    JSON.stringify(report, null, 2)
  );
}

runSimpleAudit().catch(console.error);