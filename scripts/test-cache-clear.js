#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É TonAPI –∫—ç—à–∞ –∏ transaction –∫—ç—à–∞
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testApiEndpoint(url, description) {
  try {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${description}`);
    console.log(`üìç URL: ${url}`);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'Cache-Test/1.0'
      }
    });

    console.log(`üìä Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ Response: ${JSON.stringify(data).slice(0, 200)}...`);
      return true;
    } else {
      console.log(`‚ùå Error response`);
      return false;
    }
  } catch (error) {
    console.log(`üí• Request failed: ${error.message}`);
    return false;
  }
}

async function testCacheClearing() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ö–≠–®–ï–ô –ò –û–ë–ù–û–í–õ–ï–ù–ò–ô');
  console.log('=' .repeat(50));
  
  // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  const serverOk = await testApiEndpoint(`${BASE_URL}/health`, 'Health Check');
  if (!serverOk) {
    console.log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    process.exit(1);
  }

  // –¢–µ—Å—Ç API endpoints –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
  const endpoints = [
    {
      url: `${BASE_URL}/api/v2/wallet/balance?user_id=184`,
      desc: 'Balance API (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫—ç—à–∞)'
    },
    {
      url: `${BASE_URL}/api/v2/uni-farming/status?user_id=184`, 
      desc: 'UNI Farming Status (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)'
    },
    {
      url: `${BASE_URL}/api/v2/boost/verify-ton-payment`,
      desc: 'TON Payment Verification (—Ç–µ—Å—Ç TonAPI –∫—ç—à–∞)'
    },
    {
      url: `${BASE_URL}/api/v2/transactions?user_id=184&page=1&limit=10`,
      desc: 'Transactions API (—Ç–µ—Å—Ç transaction –∫—ç—à–∞)'
    }
  ];

  let passedTests = 0;
  const totalTests = endpoints.length;

  for (const endpoint of endpoints) {
    const success = await testApiEndpoint(endpoint.url, endpoint.desc);
    if (success) passedTests++;
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  console.log('\n' + '=' .repeat(50));
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
  console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(passedTests/totalTests*100)}%`);
  
  if (passedTests === totalTests) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ö—ç—à–∏ –Ω–µ –º–µ—à–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º.');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
  console.log('\nüîÑ –¢–ï–°–¢ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø (3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞):');
  const testUrl = `${BASE_URL}/api/v2/wallet/balance?user_id=184`;
  
  for (let i = 1; i <= 3; i++) {
    console.log(`\nüìç –ó–∞–ø—Ä–æ—Å #${i}:`);
    const start = Date.now();
    await testApiEndpoint(testUrl, `Balance Request #${i}`);
    const duration = Date.now() - start;
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testCacheClearing().catch(error => {
  console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  process.exit(1);
});