/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö UniFarm
 * –í—ã—è–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { supabase } from '../core/supabaseClient';

async function checkTransactionTypes() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö UniFarm ===\n');
  
  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
  const { data: types, error: typesError } = await supabase
    .rpc('get_transaction_types_count'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    
  if (typesError) {
    // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('type')
      .limit(10000);
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –≤—Ä—É—á–Ω—É—é
    const typeCounts: Record<string, number> = {};
    transactions?.forEach(tx => {
      typeCounts[tx.type] = (typeCounts[tx.type] || 0) + 1;
    });
    
    console.log('üìä –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('--------------------------------');
    Object.entries(typeCounts)
      .sort(([,a], [,b]) => b - a)
      .forEach(([type, count]) => {
        console.log(`${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
  }
  
  console.log('\n');
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ farming/boost
  console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:');
  console.log('--------------------------------');
  
  const { data: farmingTx } = await supabase
    .from('transactions')
    .select('type, description, created_at')
    .or('description.ilike.%farming%,description.ilike.%boost%')
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (farmingTx && farmingTx.length > 0) {
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ farming/boost:');
    farmingTx.forEach(tx => {
      console.log(`- ${tx.type}: "${tx.description}" (${tx.created_at})`);
    });
  } else {
    console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º farming/boost –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n');
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user_id=74
  console.log('üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74:');
  console.log('----------------------------------------');
  
  const { data: user74Tx } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (user74Tx && user74Tx.length > 0) {
    user74Tx.forEach(tx => {
      console.log(`- ${tx.type}: ${tx.amount_uni || 0} UNI, ${tx.amount_ton || 0} TON`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: "${tx.description}"`);
      console.log(`  –î–∞—Ç–∞: ${tx.created_at}\n`);
    });
  } else {
    console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n');
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
  console.log('--------------------------------------------');
  
  const expectedTypes = [
    'FARMING_REWARD',
    'TON_BOOST_INCOME', 
    'DAILY_BONUS',
    'REFERRAL_REWARD',
    'MISSION_REWARD',
    'BOOST_PURCHASE',
    'FARMING_DEPOSIT'
  ];
  
  for (const type of expectedTypes) {
    const { count } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true })
      .eq('type', type);
      
    if (count === 0) {
      console.log(`‚ùå ${type}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
    } else {
      console.log(`‚úÖ ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }
  }
  
  console.log('\n=== –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ===');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkTransactionTypes().catch(console.error);