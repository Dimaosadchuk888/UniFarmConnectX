import { supabase } from '../core/supabase';

async function checkReferralSystemComplete() {
  console.log('=== –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===\n');
  console.log('üìä –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ referrals:');
    console.log('‚îÅ'.repeat(50));
    
    const { data: referrals, error: referralsError } = await supabase
      .from('referrals')
      .select('*')
      .limit(10);
      
    if (referralsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è referrals:', referralsError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${referrals?.length || 0}`);
      if (referrals && referrals.length > 0) {
        console.log('\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π:');
        referrals.slice(0, 3).forEach(ref => {
          console.log(`  - User ${ref.user_id} –ø—Ä–∏–≥–ª–∞—à–µ–Ω ${ref.inviter_id}, —É—Ä–æ–≤–µ–Ω—å ${ref.level}`);
        });
      } else {
        console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ referrals –ø—É—Å—Ç–∞!');
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô –í users:');
    console.log('‚îÅ'.repeat(50));
    
    const { data: usersWithReferrers, error: usersError } = await supabase
      .from('users')
      .select('id, username, telegram_id, ref_code, referred_by')
      .not('referred_by', 'is', null)
      .limit(10);
      
    if (usersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è users:', usersError.message);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏: ${usersWithReferrers?.length || 0}`);
      if (usersWithReferrers && usersWithReferrers.length > 0) {
        console.log('\n–ü—Ä–∏–º–µ—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π:');
        usersWithReferrers.slice(0, 5).forEach(user => {
          console.log(`  - User ${user.id} (${user.username}) –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.referred_by}`);
        });
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ REFERRAL_REWARD
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô REFERRAL_REWARD:');
    console.log('‚îÅ'.repeat(50));
    
    const { data: referralTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
      
    if (txError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π REFERRAL_REWARD: ${referralTransactions?.length || 0}`);
      if (referralTransactions && referralTransactions.length > 0) {
        console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:');
        referralTransactions.slice(0, 5).forEach(tx => {
          const metadata = tx.metadata || {};
          console.log(`  - User ${tx.user_id}: +${tx.amount_uni || 0} UNI / +${tx.amount_ton || 0} TON`);
          console.log(`    –û—Ç: ${metadata.sourceType || 'unknown'}, —É—Ä–æ–≤–µ–Ω—å: ${metadata.level || '?'}`);
          console.log(`    –î–∞—Ç–∞: ${new Date(tx.created_at).toLocaleString()}`);
        });
      } else {
        console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π REFERRAL_REWARD –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –§–ê–†–ú–ï–†–û–í –° –†–ï–§–ï–†–ï–†–ê–ú–ò:');
    console.log('‚îÅ'.repeat(50));
    
    const { data: activeFarmers, error: farmersError } = await supabase
      .from('users')
      .select('id, username, referred_by, uni_farming_active, uni_deposit_amount')
      .eq('uni_farming_active', true)
      .not('referred_by', 'is', null)
      .limit(10);
      
    if (farmersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞—Ä–º–µ—Ä–æ–≤:', farmersError.message);
    } else {
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏: ${activeFarmers?.length || 0}`);
      if (activeFarmers && activeFarmers.length > 0) {
        console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
        activeFarmers.slice(0, 5).forEach(farmer => {
          console.log(`  - User ${farmer.id}: –¥–µ–ø–æ–∑–∏—Ç ${farmer.uni_deposit_amount} UNI, —Ä–µ—Ñ–µ—Ä–µ—Ä: ${farmer.referred_by}`);
        });
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON BOOST –° –†–ï–§–ï–†–ï–†–ê–ú–ò:');
    console.log('‚îÅ'.repeat(50));
    
    const { data: tonBoostUsers, error: tonError } = await supabase
      .from('ton_farming_data')
      .select(`
        user_id,
        boost_package_id,
        farming_balance,
        users!inner(
          username,
          referred_by
        )
      `)
      .not('boost_package_id', 'is', null)
      .not('users.referred_by', 'is', null)
      .limit(10);
      
    if (tonError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON Boost:', tonError.message);
    } else {
      console.log(`‚úÖ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏: ${tonBoostUsers?.length || 0}`);
      if (tonBoostUsers && tonBoostUsers.length > 0) {
        console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
        tonBoostUsers.slice(0, 5).forEach(boost => {
          console.log(`  - User ${boost.user_id}: –ø–∞–∫–µ—Ç ${boost.boost_package_id}, –¥–µ–ø–æ–∑–∏—Ç ${boost.farming_balance} TON`);
        });
      }
    }
    
    // 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n6Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('‚îÅ'.repeat(50));
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏
    const { count: referralCount } = await supabase
      .from('users')
      .select('*', { count: 'exact' })
      .not('referred_by', 'is', null);
      
    // –û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    const { data: totalRewards } = await supabase
      .from('transactions')
      .select('amount_uni, amount_ton')
      .eq('type', 'REFERRAL_REWARD');
      
    const totalUni = totalRewards?.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0) || 0;
    const totalTon = totalRewards?.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0) || 0;
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º–∏: ${referralCount || 0}`);
    console.log(`üí∞ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:`);
    console.log(`   - UNI: ${totalUni.toFixed(2)}`);
    console.log(`   - TON: ${totalTon.toFixed(6)}`);
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• FARMING –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('‚îÅ'.repeat(50));
    
    const { data: farmingTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(5);
      
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${farmingTx?.length || 0} farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    farmingTx?.forEach(tx => {
      console.log(`  - ${new Date(tx.created_at).toLocaleString()}: User ${tx.user_id} +${tx.amount_uni || tx.amount_ton} ${tx.currency || 'UNI'}`);
    });
    
    // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('‚îÅ'.repeat(50));
    
    const hasReferralConnections = (referralCount || 0) > 0;
    const hasReferralTransactions = (totalUni + totalTon) > 0;
    const hasActiveSystem = hasReferralConnections && hasReferralTransactions;
    
    if (hasActiveSystem) {
      console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('   - –ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏');
      console.log('   - –ï—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
      console.log('   - –ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è');
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π:');
      if (!hasReferralConnections) {
        console.log('   - –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π');
      }
      if (!hasReferralTransactions) {
        console.log('   - –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkReferralSystemComplete()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });