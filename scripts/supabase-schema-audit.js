/**
 * –°–∫—Ä–∏–ø—Ç –∞—É–¥–∏—Ç–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY || process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTableSchema(tableName) {
  try {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (error) {
      return { exists: false, error: error.message };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    return {
      exists: true,
      count: count || 0,
      fields: data && data.length > 0 ? Object.keys(data[0]) : []
    };
  } catch (err) {
    return { exists: false, error: err.message };
  }
}

async function main() {
  console.log('üîç –ê–£–î–ò–¢ –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE\n');
  console.log('URL:', supabaseUrl);
  console.log('KEY:', supabaseKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('\n' + '='.repeat(60) + '\n');

  const tables = [
    'users',
    'user_sessions',
    'transactions',
    'referrals',
    'farming_sessions',
    'boost_purchases',
    'missions',
    'user_missions',
    'airdrops',
    'daily_bonus_logs',
    'withdraw_requests'
  ];

  let existingTables = 0;
  let emptyTables = 0;
  let missingTables = 0;

  for (const table of tables) {
    const result = await checkTableSchema(table);
    
    if (result.exists) {
      existingTables++;
      if (result.count === 0) {
        emptyTables++;
        console.log(`‚ö†Ô∏è  ${table}: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –ü–£–°–¢–ê–Ø (0 –∑–∞–ø–∏—Å–µ–π)`);
      } else {
        console.log(`‚úÖ ${table}: ${result.count} –∑–∞–ø–∏—Å–µ–π`);
      }
      
      if (result.fields.length > 0) {
        console.log(`   –ü–æ–ª—è: ${result.fields.join(', ')}`);
      }
    } else {
      missingTables++;
      console.log(`‚ùå ${table}: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }
    console.log('');
  }

  console.log('='.repeat(60));
  console.log('\nüìä –ò–¢–û–ì–ò:');
  console.log(`- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${existingTables}/${tables.length}`);
  console.log(`- –ü—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${emptyTables}`);
  console.log(`- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${missingTables}`);
  console.log(`- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ë–î: ${Math.round((existingTables / tables.length) * 100)}%`);

  if (missingTables > 0) {
    console.log('\n‚ö†Ô∏è  –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç scripts/supabase-create-tables.sql –≤ Supabase Dashboard');
    console.log('2. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∑–∞–ø—É—Å—Ç–∏—Ç–µ scripts/supabase-fill-data.js');
  }
}

main();