/**
 * SUPABASE SCHEMA AUDIT SCRIPT
 * –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª–µ–π –≤ Supabase
 * –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å roadmap.md –∏ —Å–∏—Å—Ç–µ–º–æ–π UniFarm
 */

import { supabase } from '../core/supabase.ts';

async function auditSupabaseSchema() {
  console.log('üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ SUPABASE SCHEMA...\n');
  
  const auditResults = {
    tables: [],
    totalTables: 0,
    totalColumns: 0,
    timestamp: new Date().toISOString()
  };

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...');
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .order('table_name');

    if (tablesError) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ SQL
      const { data: tablesSQL, error: sqlError } = await supabase.rpc('get_all_tables', {});
      
      if (sqlError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', sqlError);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        const knownTables = [
          'users',
          'user_sessions', 
          'transactions',
          'referrals',
          'farming_sessions',
          'boost_purchases',
          'missions',
          'user_missions',
          'airdrops',
          'daily_bonus_logs',
          'withdraw_requests'
        ];
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', knownTables.length);
        
        for (const tableName of knownTables) {
          await analyzeTable(tableName, auditResults);
        }
      }
    } else if (tables) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}\n`);
      
      for (const table of tables) {
        await analyzeTable(table.table_name, auditResults);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await saveAuditResults(auditResults);
    
    console.log('\n‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log(`üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${auditResults.totalTables}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π: ${auditResults.totalColumns}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error);
  }
}

async function analyzeTable(tableName, auditResults) {
  console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
  
  const tableInfo = {
    name: tableName,
    columns: [],
    indexes: [],
    foreignKeys: [],
    rowCount: 0
  };

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const { data: sampleData, error: sampleError } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (!sampleError && sampleData) {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –æ–±—Ä–∞–∑—Ü—É –¥–∞–Ω–Ω—ã—Ö
      const sample = sampleData[0] || {};
      const columns = Object.keys(sample);
      
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: ${columns.length}`);
      
      for (const columnName of columns) {
        const columnInfo = {
          name: columnName,
          type: typeof sample[columnName],
          sampleValue: sample[columnName],
          isNullable: sample[columnName] === null
        };
        
        tableInfo.columns.push(columnInfo);
        auditResults.totalColumns++;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      const { count, error: countError } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true });
        
      if (!countError) {
        tableInfo.rowCount = count || 0;
        console.log(`  üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${tableInfo.rowCount}`);
      }
    } else {
      console.log(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã: ${sampleError?.message}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
      if (tableName === 'users') {
        tableInfo.columns = [
          { name: 'id', type: 'number' },
          { name: 'telegram_id', type: 'number' },
          { name: 'username', type: 'string' },
          { name: 'first_name', type: 'string' },
          { name: 'last_name', type: 'string' },
          { name: 'ref_code', type: 'string' },
          { name: 'referrer_id', type: 'number' },
          { name: 'balance_uni', type: 'number' },
          { name: 'balance_ton', type: 'number' },
          { name: 'uni_farming_active', type: 'boolean' },
          { name: 'uni_deposit_amount', type: 'number' },
          { name: 'uni_farming_balance', type: 'number' },
          { name: 'uni_farming_start_timestamp', type: 'string' },
          { name: 'ton_boost_package', type: 'number' },
          { name: 'is_admin', type: 'boolean' },
          { name: 'created_at', type: 'string' },
          { name: 'updated_at', type: 'string' }
        ];
      }
    }
    
    auditResults.tables.push(tableInfo);
    auditResults.totalTables++;
    
  } catch (error) {
    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
  }
}

async function saveAuditResults(auditResults) {
  const fs = await import('fs/promises');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON –æ—Ç—á–µ—Ç
  await fs.writeFile(
    'SUPABASE_SCHEMA_AUDIT.json',
    JSON.stringify(auditResults, null, 2)
  );
  
  // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç
  let report = `# SUPABASE SCHEMA AUDIT REPORT\n\n`;
  report += `**–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞**: ${auditResults.timestamp}\n`;
  report += `**–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü**: ${auditResults.totalTables}\n`;
  report += `**–í—Å–µ–≥–æ –ø–æ–ª–µ–π**: ${auditResults.totalColumns}\n\n`;
  
  report += `## üìä –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•\n\n`;
  
  for (const table of auditResults.tables) {
    report += `### üìÅ –¢–∞–±–ª–∏—Ü–∞: \`${table.name}\`\n`;
    report += `**–ó–∞–ø–∏—Å–µ–π**: ${table.rowCount}\n`;
    report += `**–ü–æ–ª–µ–π**: ${table.columns.length}\n\n`;
    
    if (table.columns.length > 0) {
      report += `| –ü–æ–ª–µ | –¢–∏–ø | Nullable | –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è |\n`;
      report += `|------|-----|----------|----------------|\n`;
      
      for (const col of table.columns) {
        const sampleValue = col.sampleValue !== null ? 
          String(col.sampleValue).substring(0, 30) : 'NULL';
        report += `| ${col.name} | ${col.type} | ${col.isNullable ? 'YES' : 'NO'} | ${sampleValue} |\n`;
      }
      report += `\n`;
    }
  }
  
  await fs.writeFile('SUPABASE_SCHEMA_AUDIT_REPORT.md', report);
  
  console.log('\nüìÑ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
  console.log('  - SUPABASE_SCHEMA_AUDIT.json');
  console.log('  - SUPABASE_SCHEMA_AUDIT_REPORT.md');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
auditSupabaseSchema().catch(console.error);