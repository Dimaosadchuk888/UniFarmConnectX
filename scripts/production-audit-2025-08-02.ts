import { supabase } from '../core/supabase.js';
import * as fs from 'fs';
import { createHash } from 'crypto';

console.log('=== –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ UNIFARM CONNECT ===');
console.log('–î–∞—Ç–∞: ' + new Date().toISOString());
console.log('–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production\n');

interface AuditResult {
  category: string;
  status: 'OK' | 'WARNING' | 'ERROR';
  details: string;
  data?: any;
}

const auditResults: AuditResult[] = [];

async function auditDatabase() {
  console.log('\nüìä –ê–£–î–ò–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•...');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
  const { data: tables } = await supabase.rpc('get_table_list');
  auditResults.push({
    category: 'DATABASE_STRUCTURE',
    status: 'OK',
    details: `–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables?.length || 0}`,
    data: tables?.map((t: any) => t.table_name)
  });

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { data: users, error: usersError } = await supabase
    .from('users')
    .select('*');
  
  if (usersError) {
    auditResults.push({
      category: 'USERS_TABLE',
      status: 'ERROR',
      details: `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users: ${usersError.message}`
    });
  } else {
    const activeUsers = users?.filter(u => u.balance_uni > 0 || u.balance_ton > 0 || u.uni_deposit_amount > 0);
    auditResults.push({
      category: 'USERS_STATISTICS',
      status: 'OK',
      details: `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users?.length}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers?.length}`,
      data: {
        total: users?.length,
        active: activeUsers?.length,
        withUniBalance: users?.filter(u => u.balance_uni > 0).length,
        withTonBalance: users?.filter(u => u.balance_ton > 0).length,
        withUniFarming: users?.filter(u => u.uni_deposit_amount > 0).length,
        withTonFarming: users?.filter(u => u.ton_farming_balance > 0).length
      }
    });
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: transactions, error: txError } = await supabase
    .from('transactions')
    .select('type, status, currency')
    .order('created_at', { ascending: false })
    .limit(10000);
  
  if (txError) {
    auditResults.push({
      category: 'TRANSACTIONS_TABLE',
      status: 'ERROR',
      details: `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è transactions: ${txError.message}`
    });
  } else {
    const txStats = transactions?.reduce((acc: any, tx) => {
      const key = `${tx.type}_${tx.status}_${tx.currency}`;
      acc[key] = (acc[key] || 0) + 1;
      return acc;
    }, {});
    
    auditResults.push({
      category: 'TRANSACTION_STATISTICS',
      status: 'OK',
      details: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length}`,
      data: txStats
    });
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤
  const { data: balanceCheck } = await supabase.rpc('check_balance_integrity');
  if (balanceCheck && balanceCheck.length > 0) {
    auditResults.push({
      category: 'BALANCE_INTEGRITY',
      status: 'WARNING',
      details: `–ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö: ${balanceCheck.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      data: balanceCheck
    });
  } else {
    auditResults.push({
      category: 'BALANCE_INTEGRITY',
      status: 'OK',
      details: '–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã'
    });
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –ø–æ–∫—É–ø–æ–∫
  const { data: tonBoosts } = await supabase
    .from('ton_boost_purchases')
    .select('*')
    .order('created_at', { ascending: false });
  
  auditResults.push({
    category: 'TON_BOOST_PURCHASES',
    status: 'OK',
    details: `–í—Å–µ–≥–æ TON Boost –ø–æ–∫—É–ø–æ–∫: ${tonBoosts?.length || 0}`,
    data: {
      total: tonBoosts?.length,
      activePackages: tonBoosts?.filter(b => b.status === 'active').length,
      uniqueUsers: new Set(tonBoosts?.map(b => b.user_id)).size
    }
  });

  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: duplicates } = await supabase.rpc('find_duplicate_transactions');
  if (duplicates && duplicates.length > 0) {
    auditResults.push({
      category: 'DUPLICATE_TRANSACTIONS',
      status: 'WARNING',
      details: `–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã: ${duplicates.length}`,
      data: duplicates
    });
  } else {
    auditResults.push({
      category: 'DUPLICATE_TRANSACTIONS',
      status: 'OK',
      details: '–î—É–±–ª–∏–∫–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
    });
  }
}

async function auditReferralSystem() {
  console.log('\nüë• –ê–£–î–ò–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´...');
  
  const { data: referrals } = await supabase
    .from('referrals')
    .select('*');
  
  const referralTree: any = {};
  referrals?.forEach(r => {
    if (!referralTree[r.referrer_id]) {
      referralTree[r.referrer_id] = [];
    }
    referralTree[r.referrer_id].push(r.user_id);
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
  const visited = new Set();
  let hasCycles = false;
  
  function checkCycle(userId: number, path: Set<number>) {
    if (path.has(userId)) {
      hasCycles = true;
      return;
    }
    if (visited.has(userId)) return;
    
    visited.add(userId);
    path.add(userId);
    
    if (referralTree[userId]) {
      referralTree[userId].forEach((ref: number) => checkCycle(ref, new Set(path)));
    }
  }
  
  Object.keys(referralTree).forEach(userId => {
    checkCycle(parseInt(userId), new Set());
  });

  auditResults.push({
    category: 'REFERRAL_CYCLES',
    status: hasCycles ? 'ERROR' : 'OK',
    details: hasCycles ? '–ù–∞–π–¥–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏!' : '–¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    data: {
      totalReferrals: referrals?.length,
      uniqueReferrers: Object.keys(referralTree).length
    }
  });
}

async function auditFarmingCalculations() {
  console.log('\nüåæ –ê–£–î–ò–¢ FARMING –†–ê–°–ß–ï–¢–û–í...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ UNI farming
  const { data: uniActive } = await supabase
    .from('uni_farming_data')
    .select('*')
    .eq('is_active', true);
  
  let uniErrors = 0;
  uniActive?.forEach(farm => {
    const expectedDaily = farm.deposit_amount * 0.01; // 1% –≤ –¥–µ–Ω—å
    const actualDaily = parseFloat(farm.daily_income);
    if (Math.abs(expectedDaily - actualDaily) > 0.01) {
      uniErrors++;
    }
  });

  auditResults.push({
    category: 'UNI_FARMING_CALCULATIONS',
    status: uniErrors > 0 ? 'WARNING' : 'OK',
    details: uniErrors > 0 ? `–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: ${uniErrors}` : '–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
    data: {
      activeUniFramers: uniActive?.length,
      errorsFound: uniErrors
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TON farming
  const { data: tonActive } = await supabase
    .from('ton_farming_data')
    .select('*')
    .gt('farming_balance', 0);
  
  auditResults.push({
    category: 'TON_FARMING_STATUS',
    status: 'OK',
    details: `–ê–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${tonActive?.length || 0}`,
    data: {
      activeTonFarmers: tonActive?.length,
      totalTonDeposited: tonActive?.reduce((sum, f) => sum + f.farming_balance, 0) || 0
    }
  });
}

async function auditSecurityAndPerformance() {
  console.log('\nüîí –ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
  const { data: indexes } = await supabase.rpc('get_table_indexes');
  const criticalTables = ['users', 'transactions', 'referrals', 'ton_boost_purchases'];
  const missingIndexes: string[] = [];
  
  criticalTables.forEach(table => {
    const tableIndexes = indexes?.filter((idx: any) => idx.table_name === table);
    if (!tableIndexes || tableIndexes.length < 2) {
      missingIndexes.push(table);
    }
  });

  auditResults.push({
    category: 'DATABASE_INDEXES',
    status: missingIndexes.length > 0 ? 'WARNING' : 'OK',
    details: missingIndexes.length > 0 
      ? `–¢–∞–±–ª–∏—Ü—ã –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: ${missingIndexes.join(', ')}`
      : '–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç –∏–Ω–¥–µ–∫—Å—ã',
    data: {
      totalIndexes: indexes?.length,
      missingOnTables: missingIndexes
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü
  const { data: tableSizes } = await supabase.rpc('get_table_sizes');
  const largeTables = tableSizes?.filter((t: any) => parseInt(t.size_mb) > 100);
  
  auditResults.push({
    category: 'TABLE_SIZES',
    status: largeTables?.length > 0 ? 'WARNING' : 'OK',
    details: largeTables?.length > 0 
      ? `–ë–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã (>100MB): ${largeTables.map((t: any) => t.table_name).join(', ')}`
      : '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–π —Ä–∞–∑–º–µ—Ä',
    data: tableSizes
  });
}

async function generateReport() {
  console.log('\nüìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê...\n');
  
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      total_checks: auditResults.length,
      errors: auditResults.filter(r => r.status === 'ERROR').length,
      warnings: auditResults.filter(r => r.status === 'WARNING').length,
      ok: auditResults.filter(r => r.status === 'OK').length
    },
    results: auditResults,
    recommendation: ''
  };

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  if (report.summary.errors > 0) {
    report.recommendation = '‚ùå –ù–ï –ì–û–¢–û–í–û –ö PRODUCTION! –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.';
  } else if (report.summary.warnings > 2) {
    report.recommendation = '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ production.';
  } else {
    report.recommendation = '‚úÖ –ì–û–¢–û–í–û –ö PRODUCTION! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.';
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  fs.writeFileSync(
    'PRODUCTION_AUDIT_REPORT_2025-08-02.json',
    JSON.stringify(report, null, 2)
  );

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
  console.log('=== –ò–¢–û–ì–ò –ê–£–î–ò–¢–ê ===');
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${report.summary.total_checks}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${report.summary.ok}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${report.summary.warnings}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${report.summary.errors}`);
  console.log(`\n${report.recommendation}`);
  
  // –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  if (report.summary.errors > 0) {
    console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:');
    auditResults.filter(r => r.status === 'ERROR').forEach(r => {
      console.log(`- ${r.category}: ${r.details}`);
    });
  }
  
  if (report.summary.warnings > 0) {
    console.log('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
    auditResults.filter(r => r.status === 'WARNING').forEach(r => {
      console.log(`- ${r.category}: ${r.details}`);
    });
  }

  console.log('\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: PRODUCTION_AUDIT_REPORT_2025-08-02.json');
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
async function runFullAudit() {
  try {
    await auditDatabase();
    await auditReferralSystem();
    await auditFarmingCalculations();
    await auditSecurityAndPerformance();
    await generateReport();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—É–¥–∏—Ç–∞:', error);
    auditResults.push({
      category: 'AUDIT_ERROR',
      status: 'ERROR',
      details: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`
    });
    await generateReport();
  }
}

runFullAudit();