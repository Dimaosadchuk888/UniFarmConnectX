#!/usr/bin/env tsx
/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —á–µ—Ä–µ–∑ RPC
async function executeSql(query: string, description: string) {
  console.log(`\nüìå ${description}...`);
  
  try {
    const { data, error } = await supabase.rpc('execute_sql', { query });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      return null;
    }
    
    return data;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', err);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runOptimization() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('=' .repeat(50) + '\n');
  
  // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  console.log('üìä –®–ê–ì 1: –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  
  const { data: stats } = await supabase
    .from('users')
    .select('id');
  
  const { data: tonFarmingStats } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance');
  
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats?.length || 0}`);
  console.log(`–ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${tonFarmingStats?.length || 0}`);
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
  console.log('\nüìä –®–ê–ì 2: –ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –î–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  
  const { data: checksum } = await supabase
    .from('users')
    .select('balance_uni, balance_ton, uni_farming_balance, ton_farming_balance');
  
  let totalBefore = 0;
  checksum?.forEach(row => {
    totalBefore += (row.balance_uni || 0) + (row.balance_ton || 0) + 
                   (row.uni_farming_balance || 0) + (row.ton_farming_balance || 0);
  });
  
  console.log(`–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –î–û: ${totalBefore.toFixed(2)}`);
  
  // 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é TON farming
  console.log('\nüîÑ –®–ê–ì 3: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø TON FARMING');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { data: usersToSync } = await supabase
    .from('users')
    .select('id, ton_farming_balance');
  
  const tonMap = new Map();
  tonFarmingStats?.forEach(t => {
    tonMap.set(parseInt(t.user_id), t.farming_balance || 0);
  });
  
  let syncCount = 0;
  let syncedAmount = 0;
  
  for (const user of usersToSync || []) {
    const tonBalance = tonMap.get(user.id);
    
    if (tonBalance !== undefined && tonBalance > user.ton_farming_balance) {
      const diff = tonBalance - user.ton_farming_balance;
      
      const { error } = await supabase
        .from('users')
        .update({ ton_farming_balance: tonBalance })
        .eq('id', user.id);
      
      if (!error) {
        syncCount++;
        syncedAmount += diff;
        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω user ${user.id}: +${diff.toFixed(2)}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ user ${user.id}:`, error);
      }
    }
  }
  
  console.log(`\n–í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncCount} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`–û–±—â–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${syncedAmount.toFixed(2)}`);
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ
  console.log('\nüìä –®–ê–ì 4: –ö–û–ù–¢–†–û–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –ü–û–°–õ–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  
  const { data: checksumAfter } = await supabase
    .from('users')
    .select('balance_uni, balance_ton, uni_farming_balance, ton_farming_balance');
  
  let totalAfter = 0;
  checksumAfter?.forEach(row => {
    totalAfter += (row.balance_uni || 0) + (row.balance_ton || 0) + 
                  (row.uni_farming_balance || 0) + (row.ton_farming_balance || 0);
  });
  
  console.log(`–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –ü–û–°–õ–ï: ${totalAfter.toFixed(2)}`);
  console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${(totalAfter - totalBefore).toFixed(2)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~161.04)`);
  
  // 5. –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã
  console.log('\nüöÄ –®–ê–ì 5: –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í');
  console.log('–í–Ω–∏–º–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —á–µ—Ä–µ–∑ Supabase –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.');
  console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å scripts/generated_index_script.sql –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å–æ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
  
  // –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
  const indexes = [
    {
      name: 'idx_users_telegram_id',
      sql: 'CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users (telegram_id);',
      description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ telegram_id'
    },
    {
      name: 'idx_transactions_user_created',
      sql: 'CREATE INDEX IF NOT EXISTS idx_transactions_user_created ON transactions (user_id, created_at DESC);',
      description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
    },
    {
      name: 'idx_users_balances',
      sql: 'CREATE INDEX IF NOT EXISTS idx_users_balances ON users (balance_uni, balance_ton) WHERE balance_uni > 0 OR balance_ton > 0;',
      description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º'
    },
    {
      name: 'idx_users_uni_farming_active',
      sql: 'CREATE INDEX IF NOT EXISTS idx_users_uni_farming_active ON users (uni_farming_active) WHERE uni_farming_active = true;',
      description: '–ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤'
    }
  ];
  
  console.log('\n–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã...');
  for (const index of indexes.slice(0, 2)) {
    const result = await executeSql(index.sql, index.description);
    if (result !== null) {
      console.log(`‚úÖ ${index.name} —Å–æ–∑–¥–∞–Ω`);
    }
  }
  
  // 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  console.log('\n' + '='.repeat(50));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
  console.log('='.repeat(50));
  console.log(`\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
  console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${syncCount}`);
  console.log(`   - –î–æ–±–∞–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–∞: ${syncedAmount.toFixed(2)}`);
  console.log(`   - –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${Math.abs((totalAfter - totalBefore) - syncedAmount) < 0.1 ? '–î–ê' : '–ù–ï–¢'}`);
  
  console.log(`\n‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:`);
  console.log(`   1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ scripts/generated_index_script.sql –≤ –∫–æ–Ω—Å–æ–ª–∏ –ë–î`);
  console.log(`   2. –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –≤—Å–µ 8 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤`);
  console.log(`   3. –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: 5-10 —Ä–∞–∑`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const report = {
    timestamp: new Date().toISOString(),
    sync: {
      records_updated: syncCount,
      amount_added: syncedAmount,
      checksum_before: totalBefore,
      checksum_after: totalAfter,
      checksum_diff: totalAfter - totalBefore
    },
    status: 'COMPLETED'
  };
  
  await fs.writeFile(
    path.join(process.cwd(), 'docs', 'OPTIMIZATION_EXECUTION_REPORT.json'),
    JSON.stringify(report, null, 2)
  );
  
  console.log('\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/OPTIMIZATION_EXECUTION_REPORT.json');
}

runOptimization().catch(console.error);