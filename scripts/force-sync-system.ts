#!/usr/bin/env tsx
/**
 * –°–ö–†–ò–ü–¢ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–µ—à–∏ –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
 * 
 * –ó–∞–ø—É—Å–∫: tsx scripts/force-sync-system.ts
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import * as path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

const supabaseUrl = process.env.VITE_SUPABASE_URL!;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîÑ –ó–ê–ü–£–°–ö –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´');
console.log('='.repeat(60));

async function forceSystemSync() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–∞–∫–µ—Ç–∞–º–∏
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–∞–∫–µ—Ç–∞–º–∏...');
    
    const { data: users, error: usersError } = await supabase
      .from('ton_boost_purchases')
      .select('user_id')
      .eq('status', 'active');
    
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      return;
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id
    const uniqueUserIds = [...new Set(users?.map(u => u.user_id))];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueUserIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏`);

    // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    console.log('-'.repeat(60));
    
    for (const userId of uniqueUserIds) {
      const { data: purchases, error } = await supabase
        .from('ton_boost_purchases')
        .select('*')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('purchased_at', { ascending: true });
      
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        continue;
      }

      if (!purchases || purchases.length === 0) continue;

      // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ purchased_at
      const purchaseDates = purchases.map(p => p.purchased_at);
      const uniqueDates = [...new Set(purchaseDates)];
      const duplicateCount = purchases.length - uniqueDates.length;

      if (duplicateCount > 0) {
        console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}:`);
        console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${purchases.length}`);
        console.log(`   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${uniqueDates.length}`);
        console.log(`   - –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateCount}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const dateCount: { [key: string]: number } = {};
        purchases.forEach(p => {
          dateCount[p.purchased_at] = (dateCount[p.purchased_at] || 0) + 1;
        });
        
        const duplicatedDates = Object.entries(dateCount)
          .filter(([_, count]) => count > 1)
          .slice(0, 3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        
        if (duplicatedDates.length > 0) {
          console.log('   üìç –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
          duplicatedDates.forEach(([date, count]) => {
            console.log(`      - ${date}: ${count} –∑–∞–ø–∏—Å–µ–π`);
          });
        }
      }
    }

    // 3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('='.repeat(60));
    
    const { data: totalPurchases, error: totalError } = await supabase
      .from('ton_boost_purchases')
      .select('*', { count: 'exact' })
      .eq('status', 'active');
    
    if (!totalError && totalPurchases) {
      console.log(`‚úÖ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${totalPurchases.length}`);
      
      // –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
      const uniquePurchases = new Map();
      totalPurchases.forEach(p => {
        const key = `${p.user_id}_${p.purchased_at}`;
        if (!uniquePurchases.has(key)) {
          uniquePurchases.set(key, p);
        }
      });
      
      console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${uniquePurchases.size}`);
      console.log(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalPurchases.length - uniquePurchases.size}`);
    }

    // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('='.repeat(60));
    console.log('1. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ ton_boost_purchases');
    console.log('2. Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
    console.log('3. Frontend –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π');
    console.log('\nüìå –î–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ:');
    console.log('   - –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+F5)');
    console.log('   - –ü–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    console.log('   - –ò–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)');

    // 5. –°–∏–º—É–ª—è—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ)
    console.log('\nüîÑ –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
    console.log('1. ‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log('2. ‚è≥ –ö–µ—à React Query –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥');
    console.log('3. ‚è≥ WebSocket –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('4. ‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
forceSystemSync().then(() => {
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', err);
  process.exit(1);
});