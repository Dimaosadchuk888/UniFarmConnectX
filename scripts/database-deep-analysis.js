/**
 * –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ë–î –∏ –∫–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–∞–±–ª–∏—Ü
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseKey) {
  console.error('‚ùå SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
const detailedReport = {
  timestamp: new Date().toISOString(),
  database: {
    tables: {}
  },
  codeAnalysis: {
    modules: {},
    fieldUsage: {}
  },
  comparison: {},
  summary: {
    perfectMatches: [],
    partialMatches: [],
    criticalIssues: [],
    recommendations: []
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î
async function getActualTableSchema(tableName) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error, count } = await supabase
      .from(tableName)
      .select('*')
      .limit(5); // –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    if (error) {
      return { exists: false, error: error.message };
    }

    const schema = {
      exists: true,
      recordCount: count || 0,
      fields: {}
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø–∏—Å—è–º
    if (data && data.length > 0) {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
      const allFields = new Set();
      data.forEach(record => {
        Object.keys(record).forEach(field => allFields.add(field));
      });

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è
      allFields.forEach(field => {
        const values = data.map(record => record[field]).filter(v => v !== null);
        schema.fields[field] = {
          exists: true,
          nullable: data.some(record => record[field] === null),
          types: [...new Set(values.map(v => typeof v))],
          samples: values.slice(0, 3)
        };
      });
    }

    return schema;
  } catch (error) {
    return { exists: false, error: error.message };
  }
}

// –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ
function analyzeFieldUsageInFile(filePath, tableName) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const usage = {
    fields: new Set(),
    operations: [],
    context: []
  };

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
  const patterns = [
    // Supabase queries
    {
      regex: new RegExp(`supabase\\s*\\.\\s*from\\s*\\(\\s*['"\`]${tableName}['"\`]\\s*\\)([^;]+);`, 'gis'),
      type: 'supabase_query'
    },
    // Direct table references
    {
      regex: new RegExp(`['"\`]${tableName}['"\`]\\s*\\.\\s*(\\w+)`, 'g'),
      type: 'direct_reference'
    },
    // SQL queries
    {
      regex: new RegExp(`(SELECT|INSERT|UPDATE|DELETE)[^;]*\\b${tableName}\\b[^;]*;`, 'gis'),
      type: 'sql_query'
    }
  ];

  patterns.forEach(({ regex, type }) => {
    let match;
    while ((match = regex.exec(content)) !== null) {
      const queryContext = match[0];
      usage.operations.push({ type, context: queryContext.substring(0, 200) });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
      if (type === 'supabase_query') {
        // –ü–æ–∏—Å–∫ select –ø–æ–ª–µ–π
        const selectMatch = queryContext.match(/\.select\s*\(\s*['"`]([^'"`]+)['"`]/);
        if (selectMatch) {
          const fields = selectMatch[1].split(',').map(f => f.trim());
          fields.forEach(field => {
            if (field && field !== '*') {
              usage.fields.add(field);
            }
          });
        }

        // –ü–æ–∏—Å–∫ insert/update –ø–æ–ª–µ–π
        const insertMatch = queryContext.match(/\.(insert|update)\s*\(\s*\{([^}]+)\}/);
        if (insertMatch) {
          const fieldsContent = insertMatch[2];
          const fieldMatches = fieldsContent.match(/(\w+)\s*:/g);
          if (fieldMatches) {
            fieldMatches.forEach(fm => {
              const fieldName = fm.replace(':', '').trim();
              usage.fields.add(fieldName);
            });
          }
        }

        // –ü–æ–∏—Å–∫ eq/filter –ø–æ–ª–µ–π
        const filterMatches = queryContext.matchAll(/\.(eq|neq|gt|gte|lt|lte|like|ilike|in|contains)\s*\(\s*['"`](\w+)['"`]/g);
        for (const fm of filterMatches) {
          usage.fields.add(fm[2]);
        }
      }
    }
  });

  return usage;
}

// –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
function analyzeModuleForTable(modulePath, moduleName, tableName) {
  const analysis = {
    module: moduleName,
    files: {},
    totalFields: new Set(),
    operations: []
  };

  if (!fs.existsSync(modulePath)) return analysis;

  const files = fs.readdirSync(modulePath).filter(f => f.endsWith('.ts') || f.endsWith('.js'));
  
  files.forEach(file => {
    const filePath = path.join(modulePath, file);
    const usage = analyzeFieldUsageInFile(filePath, tableName);
    
    if (usage.fields.size > 0 || usage.operations.length > 0) {
      analysis.files[file] = usage;
      usage.fields.forEach(field => analysis.totalFields.add(field));
      analysis.operations.push(...usage.operations);
    }
  });

  return analysis;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function runDeepAnalysis() {
  console.log('üî¨ –ù–∞—á–∏–Ω–∞–µ–º —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–î –∏ –∫–æ–¥–∞ UniFarm...\n');

  const tables = [
    'users',
    'transactions', 
    'referrals',
    'farming_sessions',
    'user_sessions',
    'boost_purchases',
    'missions',
    'user_missions',
    'airdrops',
    'daily_bonus_logs',
    'withdraw_requests'
  ];

  // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
  console.log('üìä –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('=' .repeat(60));

  for (const table of tables) {
    process.stdout.write(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ${table}... `);
    const schema = await getActualTableSchema(table);
    detailedReport.database.tables[table] = schema;
    
    if (schema.exists) {
      const fieldCount = Object.keys(schema.fields).length;
      console.log(`‚úÖ ${fieldCount} –ø–æ–ª–µ–π, ${schema.recordCount} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      console.log('‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    await new Promise(resolve => setTimeout(resolve, 200));
  }

  // –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
  console.log('\nüìù –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –∫–æ–¥–µ');
  console.log('=' .repeat(60));

  const modulesPath = path.join(__dirname, '..', 'modules');
  const modules = fs.readdirSync(modulesPath).filter(m => 
    fs.statSync(path.join(modulesPath, m)).isDirectory()
  );

  for (const table of tables) {
    console.log(`\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "${table}":`);
    detailedReport.codeAnalysis.fieldUsage[table] = {
      modules: {},
      allFields: new Set(),
      totalOperations: 0
    };

    for (const module of modules) {
      const modulePath = path.join(modulesPath, module);
      const moduleAnalysis = analyzeModuleForTable(modulePath, module, table);
      
      if (moduleAnalysis.totalFields.size > 0) {
        detailedReport.codeAnalysis.fieldUsage[table].modules[module] = moduleAnalysis;
        moduleAnalysis.totalFields.forEach(field => 
          detailedReport.codeAnalysis.fieldUsage[table].allFields.add(field)
        );
        detailedReport.codeAnalysis.fieldUsage[table].totalOperations += moduleAnalysis.operations.length;
        
        console.log(`  ‚úì ${module}: ${moduleAnalysis.totalFields.size} –ø–æ–ª–µ–π, ${moduleAnalysis.operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      }
    }
  }

  // –≠—Ç–∞–ø 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑
  console.log('\nüîé –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä');
  console.log('=' .repeat(60));

  for (const table of tables) {
    const dbSchema = detailedReport.database.tables[table];
    const codeUsage = detailedReport.codeAnalysis.fieldUsage[table];
    
    const comparison = {
      table,
      status: 'unknown',
      dbFields: dbSchema.exists ? Object.keys(dbSchema.fields) : [],
      codeFields: Array.from(codeUsage.allFields),
      analysis: {
        inDbOnly: [],
        inCodeOnly: [],
        inBoth: [],
        issues: [],
        warnings: []
      }
    };

    if (!dbSchema.exists) {
      comparison.status = 'table_missing';
      comparison.analysis.issues.push({
        severity: 'CRITICAL',
        message: `–¢–∞–±–ª–∏—Ü–∞ ${table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${Object.keys(codeUsage.modules).length} –º–æ–¥—É–ª—è—Ö`
      });
    } else if (codeUsage.allFields.size === 0) {
      comparison.status = 'unused';
      comparison.analysis.warnings.push({
        severity: 'LOW',
        message: `–¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ`
      });
    } else {
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
      comparison.dbFields.forEach(field => {
        if (codeUsage.allFields.has(field)) {
          comparison.analysis.inBoth.push(field);
        } else {
          // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
          if (!['id', 'created_at', 'updated_at'].includes(field)) {
            comparison.analysis.inDbOnly.push(field);
          }
        }
      });

      codeUsage.allFields.forEach(field => {
        if (!comparison.dbFields.includes(field)) {
          comparison.analysis.inCodeOnly.push(field);
        }
      });

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      if (comparison.analysis.inCodeOnly.length > 0) {
        comparison.status = 'mismatch';
        comparison.analysis.issues.push({
          severity: 'HIGH',
          message: `${comparison.analysis.inCodeOnly.length} –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î`,
          fields: comparison.analysis.inCodeOnly
        });
      } else if (comparison.analysis.inDbOnly.length > 0) {
        comparison.status = 'has_warnings';
        comparison.analysis.warnings.push({
          severity: 'MEDIUM',
          message: `${comparison.analysis.inDbOnly.length} –ø–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è`,
          fields: comparison.analysis.inDbOnly
        });
      } else {
        comparison.status = 'perfect_match';
      }
    }

    detailedReport.comparison[table] = comparison;

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    const statusEmoji = {
      'perfect_match': '‚úÖ',
      'has_warnings': '‚ö†Ô∏è',
      'mismatch': '‚ùå',
      'table_missing': 'üö´',
      'unused': 'üí§'
    };

    console.log(`\n${statusEmoji[comparison.status]} ${table}:`);
    if (comparison.status === 'perfect_match') {
      console.log('  –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π');
    } else {
      comparison.analysis.issues.forEach(issue => {
        console.log(`  [${issue.severity}] ${issue.message}`);
        if (issue.fields && issue.fields.length <= 5) {
          console.log(`    –ü–æ–ª—è: ${issue.fields.join(', ')}`);
        } else if (issue.fields) {
          console.log(`    –ü–æ–ª—è (${issue.fields.length}): ${issue.fields.slice(0, 5).join(', ')}...`);
        }
      });
      comparison.analysis.warnings.forEach(warning => {
        console.log(`  [${warning.severity}] ${warning.message}`);
      });
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateSummary();
  saveDetailedReport();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
function generateSummary() {
  Object.entries(detailedReport.comparison).forEach(([table, comparison]) => {
    if (comparison.status === 'perfect_match') {
      detailedReport.summary.perfectMatches.push(table);
    } else if (comparison.status === 'has_warnings') {
      detailedReport.summary.partialMatches.push({
        table,
        warnings: comparison.analysis.warnings.length
      });
    } else if (comparison.status === 'mismatch' || comparison.status === 'table_missing') {
      detailedReport.summary.criticalIssues.push({
        table,
        issues: comparison.analysis.issues
      });
    }
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  detailedReport.summary.criticalIssues.forEach(({ table, issues }) => {
    issues.forEach(issue => {
      if (issue.fields && issue.fields.length > 0) {
        detailedReport.summary.recommendations.push({
          priority: 'HIGH',
          table,
          action: 'ADD_MISSING_FIELDS',
          fields: issue.fields,
          sql: generateAddFieldsSQL(table, issue.fields)
        });
      }
    });
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
function generateAddFieldsSQL(table, fields) {
  const fieldDefinitions = fields.map(field => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
    let sqlType = 'TEXT';
    if (field.includes('_id') || field === 'id') sqlType = 'INTEGER';
    else if (field.includes('amount') || field.includes('balance')) sqlType = 'DECIMAL(20,9)';
    else if (field.includes('_at') || field.includes('timestamp')) sqlType = 'TIMESTAMP';
    else if (field.includes('is_') || field.includes('_active')) sqlType = 'BOOLEAN DEFAULT FALSE';
    
    return `ALTER TABLE ${table} ADD COLUMN IF NOT EXISTS ${field} ${sqlType};`;
  });

  return fieldDefinitions.join('\n');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
function saveDetailedReport() {
  console.log('\n\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('='.repeat(60));

  const totalTables = Object.keys(detailedReport.database.tables).length;
  const existingTables = Object.values(detailedReport.database.tables).filter(t => t.exists).length;
  const perfectMatches = detailedReport.summary.perfectMatches.length;
  const criticalIssues = detailedReport.summary.criticalIssues.length;

  console.log(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: ${totalTables}`);
  console.log(`–°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: ${existingTables}`);
  console.log(`–ü–æ–ª–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: ${perfectMatches}`);
  console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${criticalIssues}`);
  console.log(`–£—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${Math.round((perfectMatches / existingTables) * 100)}%`);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const jsonPath = path.join(__dirname, '..', 'docs', `DEEP_DB_ANALYSIS_${timestamp}.json`);
  fs.writeFileSync(jsonPath, JSON.stringify(detailedReport, null, 2));
  console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π JSON –æ—Ç—á–µ—Ç: ${jsonPath}`);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ Markdown –æ—Ç—á–µ—Ç–∞
  const mdReport = generateFinalMarkdownReport();
  const mdPath = path.join(__dirname, '..', 'docs', `DATABASE_CODE_SYNC_REPORT.md`);
  fs.writeFileSync(mdPath, mdReport);
  console.log(`üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: ${mdPath}`);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ Markdown –æ—Ç—á–µ—Ç–∞
function generateFinalMarkdownReport() {
  let md = `# üß© –û—Ç—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ –∫–æ–¥–∞ UniFarm\n\n`;
  md += `**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** ${detailedReport.timestamp}\n\n`;
  
  md += `## üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
  const totalTables = Object.keys(detailedReport.database.tables).length;
  const existingTables = Object.values(detailedReport.database.tables).filter(t => t.exists).length;
  const perfectMatches = detailedReport.summary.perfectMatches.length;
  const partialMatches = detailedReport.summary.partialMatches.length;
  const criticalIssues = detailedReport.summary.criticalIssues.length;
  
  md += `| –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å | –ó–Ω–∞—á–µ–Ω–∏–µ |\n`;
  md += `|------------|----------|\n`;
  md += `| –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ | ${totalTables} |\n`;
  md += `| –°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î | ${existingTables} |\n`;
  md += `| –ü–æ–ª–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π | ${perfectMatches} |\n`;
  md += `| –ß–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π | ${partialMatches} |\n`;
  md += `| –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º | ${criticalIssues} |\n`;
  md += `| **–£—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è** | **${Math.round((perfectMatches / existingTables) * 100)}%** |\n\n`;

  // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
  md += `## üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å—É—â–Ω–æ—Å—Ç—è–º\n\n`;

  // –ü–æ–ª–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
  if (detailedReport.summary.perfectMatches.length > 0) {
    md += `### ‚úÖ –°—É—â–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º\n\n`;
    detailedReport.summary.perfectMatches.forEach(table => {
      const comp = detailedReport.comparison[table];
      md += `#### ${table}\n`;
      md += `- ‚úÖ –í—Å–µ –ø–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç\n`;
      md += `- –ü–æ–ª–µ–π –≤ –ë–î: ${comp.dbFields.length}\n`;
      md += `- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–æ–¥—É–ª—è—Ö: ${Object.keys(detailedReport.codeAnalysis.fieldUsage[table].modules).join(', ') || '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'}\n\n`;
    });
  }

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (detailedReport.summary.criticalIssues.length > 0) {
    md += `### ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è\n\n`;
    detailedReport.summary.criticalIssues.forEach(({ table, issues }) => {
      const comp = detailedReport.comparison[table];
      md += `#### ${table}\n`;
      issues.forEach(issue => {
        md += `- **[${issue.severity}]** ${issue.message}\n`;
        if (issue.fields && issue.fields.length > 0) {
          md += `  - –ü–æ–ª—è: \`${issue.fields.join('`, `')}\`\n`;
        }
      });
      const modules = Object.keys(detailedReport.codeAnalysis.fieldUsage[table].modules);
      if (modules.length > 0) {
        md += `  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–æ–¥—É–ª—è—Ö: ${modules.join(', ')}\n`;
      }
      md += '\n';
    });
  }

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (detailedReport.summary.partialMatches.length > 0) {
    md += `### ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è\n\n`;
    detailedReport.summary.partialMatches.forEach(({ table, warnings }) => {
      const comp = detailedReport.comparison[table];
      md += `#### ${table}\n`;
      comp.analysis.warnings.forEach(warning => {
        md += `- **[${warning.severity}]** ${warning.message}\n`;
        if (warning.fields && warning.fields.length > 0) {
          md += `  - –ü–æ–ª—è: \`${warning.fields.join('`, `')}\`\n`;
        }
      });
      md += '\n';
    });
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (detailedReport.summary.recommendations.length > 0) {
    md += `## üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    const recByTable = {};
    detailedReport.summary.recommendations.forEach(rec => {
      if (!recByTable[rec.table]) recByTable[rec.table] = [];
      recByTable[rec.table].push(rec);
    });

    Object.entries(recByTable).forEach(([table, recs]) => {
      md += `### –¢–∞–±–ª–∏—Ü–∞: ${table}\n\n`;
      recs.forEach(rec => {
        md += `**${rec.action}** (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${rec.priority})\n\n`;
        md += `–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è:\n`;
        md += `\`\`\`sql\n${rec.sql}\n\`\`\`\n\n`;
      });
    });
  }

  // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
  md += `## üìå –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n`;
  if (perfectMatches === existingTables) {
    md += `‚úÖ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∏ –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!**\n\n`;
  } else {
    md += `‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î —Å –∫–æ–¥–æ–º.**\n\n`;
    md += `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ:\n`;
    md += `1. –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π\n`;
    md += `2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö\n`;
    md += `3. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î\n`;
  }

  return md;
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runDeepAnalysis()
  .then(() => {
    console.log('\n‚úÖ –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  })
  .catch(error => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error);
    console.error(error.stack);
    process.exit(1);
  });