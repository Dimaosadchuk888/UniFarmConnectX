/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
 */

import { supabase } from '../core/supabase';

async function checkActualRates() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –ö–£–†–°–û–í');
  console.log('=' .repeat(55));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º boost_packages —Ç–∞–±–ª–∏—Ü—É - —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    console.log('\nüì¶ –≠–¢–ê–õ–û–ù–ù–´–ï –ö–£–†–°–´ –í BOOST_PACKAGES:');
    const { data: packages } = await supabase
      .from('boost_packages')
      .select('*')
      .order('id');
    
    if (packages) {
      packages.forEach(p => {
        const ratePerSecond = parseFloat(p.rate_ton_per_second);
        const dailyRate = ratePerSecond * 86400; // —Å–µ–∫—É–Ω–¥ –≤ –¥–Ω–µ
        const minAmount = parseFloat(p.min_amount);
        const dailyPercent = (dailyRate / minAmount) * 100;
        
        console.log(`\n–ü–∞–∫–µ—Ç ID ${p.id}: "${p.name}"`);
        console.log(`  –ö—É—Ä—Å –≤ –ë–î: ${p.rate_ton_per_second} TON/—Å–µ–∫`);
        console.log(`  –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyRate} TON`);
        console.log(`  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${minAmount} TON`);
        console.log(`  –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${dailyPercent.toFixed(4)}%`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
    console.log('\nüë§ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ö–£–†–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184:');
    const { data: user } = await supabase
      .from('users')
      .select('ton_boost_rate, ton_boost_package, ton_boost_active')
      .eq('id', 184)
      .single();
    
    if (user) {
      const userRate = parseFloat(user.ton_boost_rate || '0');
      const userDailyRate = userRate * 86400;
      
      console.log(`–ö—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.ton_boost_rate} TON/—Å–µ–∫`);
      console.log(`–î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${userDailyRate} TON`);
      console.log(`–ü–∞–∫–µ—Ç ID: ${user.ton_boost_package}`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${user.ton_boost_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\nüí∞ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –î–ï–ü–û–ó–ò–¢–´ –ò –ö–£–†–°–´:');
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '184');
    
    if (farmingData && farmingData.length > 0) {
      farmingData.forEach((f, i) => {
        const deposit = parseFloat(f.farming_balance);
        const rate = parseFloat(f.farming_rate);
        const dailyIncome = rate * 86400;
        const dailyPercent = (dailyIncome / deposit) * 100;
        
        console.log(`\n–ó–∞–ø–∏—Å—å ${i+1}:`);
        console.log(`  –î–µ–ø–æ–∑–∏—Ç: ${deposit} TON`);
        console.log(`  –ö—É—Ä—Å: ${rate} TON/—Å–µ–∫`);
        console.log(`  –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyIncome} TON`);
        console.log(`  –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${dailyPercent.toFixed(4)}%`);
        console.log(`  –°–æ–∑–¥–∞–Ω–æ: ${f.created_at}`);
        console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${f.updated_at}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –∏—â–µ–º —Ñ–∞–π–ª
    console.log('\n‚öôÔ∏è –ê–ù–ê–õ–ò–ó –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –ö–£–†–°–û–í:');
    
    if (packages && packages.length > 0) {
      const starterPackage = packages.find(p => p.id === 1);
      if (starterPackage) {
        const etalon = parseFloat(starterPackage.rate_ton_per_second);
        const actual = user ? parseFloat(user.ton_boost_rate || '0') : 0;
        
        console.log(`\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–∞ "Starter Boost":`);
        console.log(`–≠—Ç–∞–ª–æ–Ω –≤ boost_packages: ${etalon} TON/—Å–µ–∫`);
        console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${actual} TON/—Å–µ–∫`);
        
        if (Math.abs(etalon - actual) < 0.001) {
          console.log('‚úÖ –ö—É—Ä—Å—ã –°–û–í–ü–ê–î–ê–Æ–¢');
        } else {
          console.log('‚ùå –ö—É—Ä—Å—ã –ù–ï –°–û–í–ü–ê–î–ê–Æ–¢');
          console.log(`–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${Math.abs(etalon - actual)} TON/—Å–µ–∫`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å 1% –≤ –¥–µ–Ω—å
        const dailyRate = etalon * 86400;
        const minAmount = parseFloat(starterPackage.min_amount);
        const realDailyPercent = (dailyRate / minAmount) * 100;
        
        console.log(`\n–ü—Ä–æ–≤–µ—Ä–∫–∞ "1% –≤ –¥–µ–Ω—å":`);
        console.log(`–†–µ–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${realDailyPercent.toFixed(6)}%`);
        
        if (realDailyPercent >= 0.9 && realDailyPercent <= 1.1) {
          console.log('‚úÖ –ö–£–†–° –ë–õ–ò–ó–û–ö –ö 1% –í –î–ï–ù–¨');
        } else {
          console.log('‚ùå –ö–£–†–° –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ 1% –í –î–ï–ù–¨');
        }
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤
    console.log('\nüìÖ –ü–û–°–õ–ï–î–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í BOOST_PACKAGES:');
    console.log('(–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤)');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (farmingData && farmingData.length > 0) {
      const totalDeposit = farmingData.reduce((sum, f) => sum + parseFloat(f.farming_balance), 0);
      const totalRate = farmingData.reduce((sum, f) => sum + parseFloat(f.farming_rate), 0);
      const totalDailyIncome = totalRate * 86400;
      const avgDailyPercent = (totalDailyIncome / totalDeposit) * 100;
      
      console.log(`\n–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:`);
      console.log(`–û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${totalDeposit} TON`);
      console.log(`–û–±—â–∏–π –∫—É—Ä—Å: ${totalRate} TON/—Å–µ–∫`);
      console.log(`–û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${totalDailyIncome} TON`);
      console.log(`–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${avgDailyPercent.toFixed(6)}%`);
      
      if (avgDailyPercent > 100) {
        console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö—É—Ä—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100% –≤ –¥–µ–Ω—å!');
      } else if (avgDailyPercent > 10) {
        console.log('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö—É—Ä—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10% –≤ –¥–µ–Ω—å');
      } else if (avgDailyPercent >= 0.5 && avgDailyPercent <= 2) {
        console.log('‚úÖ –ö–£–†–° –í –†–ê–ó–£–ú–ù–´–• –ü–†–ï–î–ï–õ–ê–• (0.5-2% –≤ –¥–µ–Ω—å)');
      }
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

checkActualRates().then(() => {
  console.log('\n‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
});