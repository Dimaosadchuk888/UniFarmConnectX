import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testTonBoostPurchases() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ton_boost_purchases...\n');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã...');
  const { count, error: countError } = await supabase
    .from('ton_boost_purchases')
    .select('*', { count: 'exact', head: true });
    
  if (countError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ:', countError);
    return;
  }
  console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${count}\n`);
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
  console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184...');
  const { data: user184Purchases, error: user184Error } = await supabase
    .from('ton_boost_purchases')
    .select('*')
    .eq('user_id', 184)
    .eq('status', 'active')
    .order('purchased_at', { ascending: false });
    
  if (user184Error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', user184Error);
    return;
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${user184Purchases?.length || 0}`);
  
  if (user184Purchases && user184Purchases.length > 0) {
    console.log('\nüìä –î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫:');
    let totalAmount = 0;
    let totalDailyIncome = 0;
    
    user184Purchases.forEach((purchase, index) => {
      const amount = parseFloat(purchase.amount);
      const dailyIncome = parseFloat(purchase.daily_income);
      totalAmount += amount;
      totalDailyIncome += dailyIncome;
      
      console.log(`\n  –ü–æ–∫—É–ø–∫–∞ #${index + 1}:`);
      console.log(`    - –ü–∞–∫–µ—Ç: ${purchase.package_name}`);
      console.log(`    - –°—É–º–º–∞: ${amount} TON`);
      console.log(`    - –°—Ç–∞–≤–∫–∞: ${parseFloat(purchase.rate) * 100}%`);
      console.log(`    - –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyIncome} TON`);
      console.log(`    - –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${new Date(purchase.purchased_at).toLocaleString()}`);
    });
    
    console.log('\nüìà –ò—Ç–æ–≥–æ:');
    console.log(`    - –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalAmount} TON`);
    console.log(`    - –û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${totalDailyIncome.toFixed(6)} TON`);
    console.log(`    - –î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É: ${(totalDailyIncome / 86400).toFixed(8)} TON/—Å–µ–∫`);
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  console.log('\n\n3Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
  const { data: allPurchases, error: allError } = await supabase
    .from('ton_boost_purchases')
    .select('user_id, amount, daily_income')
    .eq('status', 'active');
    
  if (!allError && allPurchases) {
    const userStats = new Map<number, { count: number, total: number, income: number }>();
    
    allPurchases.forEach(purchase => {
      const userId = purchase.user_id;
      const amount = parseFloat(purchase.amount);
      const income = parseFloat(purchase.daily_income);
      
      if (!userStats.has(userId)) {
        userStats.set(userId, { count: 0, total: 0, income: 0 });
      }
      
      const stats = userStats.get(userId)!;
      stats.count++;
      stats.total += amount;
      stats.income += income;
    });
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏: ${userStats.size}`);
    console.log('\nüìä –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—É–º–º–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:');
    
    const sortedUsers = Array.from(userStats.entries())
      .sort((a, b) => b[1].total - a[1].total)
      .slice(0, 5);
      
    sortedUsers.forEach(([userId, stats], index) => {
      console.log(`  ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${userId}:`);
      console.log(`     - –ü–æ–∫—É–ø–æ–∫: ${stats.count}`);
      console.log(`     - –°—É–º–º–∞: ${stats.total} TON`);
      console.log(`     - –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${stats.income.toFixed(6)} TON`);
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTonBoostPurchases().catch(console.error);