#!/usr/bin/env tsx

/**
 * –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø SQL –°–ö–†–ò–ü–¢–û–í
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ Supabase
 */

import { readFileSync } from 'fs';
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.log('‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function runSQLFile(filename: string) {
  try {
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç: ${filename}`);
    
    const sqlContent = readFileSync(filename, 'utf8');
    console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (${sqlContent.length} —Å–∏–º–≤–æ–ª–æ–≤):`);
    console.log(sqlContent.substring(0, 500) + (sqlContent.length > 500 ? '...' : ''));
    
    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sqlContent });
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
      console.log('   –ö–æ–¥:', error.code);
      console.log('   –î–µ—Ç–∞–ª–∏:', error.details);
    } else {
      console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      if (data) {
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', data);
      }
    }
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : String(error));
  }
}

const filename = process.argv[2];
if (!filename) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è SQL —Ñ–∞–π–ª–∞: tsx scripts/run-sql.ts filename.sql');
  process.exit(1);
}

runSQLFile(filename);