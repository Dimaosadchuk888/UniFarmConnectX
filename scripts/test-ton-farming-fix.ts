/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π TON Farming
 */

import { BoostService } from '../modules/boost/service.js';

async function testFix() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===\n');

  const userId = '74';
  const boostService = new BoostService();
  
  const response = await boostService.getTonBoostFarmingStatus(userId);
  
  console.log('API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:');
  console.log(JSON.stringify(response, null, 2));
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
  
  const deposit = response.deposits[0];
  if (deposit) {
    console.log(`  - –û–±—â–∞—è —Å—É–º–º–∞: ${deposit.amount} TON (–æ–∂–∏–¥–∞–µ—Ç—Å—è 362)`);
    console.log(`  - –î–æ—Ö–æ–¥ –≤ —Å—É—Ç–∫–∏: ${response.dailyIncomeTon} TON (–æ–∂–∏–¥–∞–µ—Ç—Å—è 3.62)`);
    console.log(`  - –í —Å–µ–∫—É–Ω–¥—É: ${response.totalTonRatePerSecond} TON`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    const expectedAmount = 362;
    const expectedDailyIncome = 3.62;
    
    const actualAmount = parseFloat(deposit.amount);
    const actualDailyIncome = parseFloat(response.dailyIncomeTon);
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
    if (Math.abs(actualAmount - expectedAmount) < 0.1) {
      console.log('  ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ü–†–ê–í–ò–õ–¨–ù–û');
    } else {
      console.log('  ‚ùå –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è');
    }
    
    if (Math.abs(actualDailyIncome - expectedDailyIncome) < 0.1) {
      console.log('  ‚úÖ –î–æ—Ö–æ–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ü–†–ê–í–ò–õ–¨–ù–û');
    } else {
      console.log('  ‚ùå –î–æ—Ö–æ–¥ –≤—Å–µ –µ—â–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞');
    }
  }
}

testFix()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });