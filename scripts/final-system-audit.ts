#!/usr/bin/env tsx
/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

interface AuditReport {
  timestamp: string;
  indexes: {
    total: number;
    created: string[];
    missing: string[];
  };
  synchronization: {
    ton_farming: {
      total_users: number;
      synced: number;
      not_synced: number;
      discrepancies: any[];
    };
  };
  performance: {
    test_results: any[];
  };
  data_integrity: {
    total_users: number;
    total_transactions: number;
    checksum: number;
    issues: any[];
  };
}

async function runFinalAudit() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
  console.log('=' .repeat(60) + '\n');
  
  const report: AuditReport = {
    timestamp: new Date().toISOString(),
    indexes: { total: 0, created: [], missing: [] },
    synchronization: {
      ton_farming: { total_users: 0, synced: 0, not_synced: 0, discrepancies: [] }
    },
    performance: { test_results: [] },
    data_integrity: { total_users: 0, total_transactions: 0, checksum: 0, issues: [] }
  };
  
  // 1. –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í
  console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ò–ù–î–ï–ö–°–û–í\n');
  
  const expectedIndexes = [
    'idx_users_telegram_id',
    'idx_transactions_user_id__created_at_desc',
    'idx_users_balance_uni__balance_ton',
    'idx_users_uni_farming_active',
    'idx_users_referred_by',
    'idx_transactions_type',
    'idx_withdraw_requests_status',
    'idx_withdraw_requests_user_id'
  ];
  
  const { data: indexes } = await supabase.rpc('get_indexes');
  const createdIndexes = indexes?.map((idx: any) => idx.indexname) || [];
  
  expectedIndexes.forEach(indexName => {
    if (createdIndexes.includes(indexName)) {
      report.indexes.created.push(indexName);
      console.log(`‚úÖ ${indexName} - —Å–æ–∑–¥–∞–Ω`);
    } else {
      report.indexes.missing.push(indexName);
      console.log(`‚ùå ${indexName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  });
  
  report.indexes.total = report.indexes.created.length;
  console.log(`\n–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${report.indexes.total} –∏–∑ ${expectedIndexes.length}`);
  
  // 2. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON FARMING
  console.log('\nüìä 2. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON FARMING\n');
  
  const { data: users } = await supabase
    .from('users')
    .select('id, ton_farming_balance')
    .gt('ton_farming_balance', 0)
    .order('ton_farming_balance', { ascending: false });
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance');
  
  const tonMap = new Map();
  tonFarmingData?.forEach(t => {
    tonMap.set(parseInt(t.user_id), t.farming_balance || 0);
  });
  
  users?.forEach(user => {
    const tonBalance = tonMap.get(user.id);
    if (tonBalance !== undefined) {
      if (Math.abs(user.ton_farming_balance - tonBalance) < 0.01) {
        report.synchronization.ton_farming.synced++;
      } else {
        report.synchronization.ton_farming.not_synced++;
        report.synchronization.ton_farming.discrepancies.push({
          user_id: user.id,
          user_balance: user.ton_farming_balance,
          ton_balance: tonBalance,
          diff: user.ton_farming_balance - tonBalance
        });
      }
    }
  });
  
  report.synchronization.ton_farming.total_users = users?.length || 0;
  
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON farming: ${report.synchronization.ton_farming.total_users}`);
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${report.synchronization.ton_farming.synced}`);
  console.log(`‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${report.synchronization.ton_farming.not_synced}`);
  
  if (report.synchronization.ton_farming.discrepancies.length > 0) {
    console.log('\n–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è:');
    report.synchronization.ton_farming.discrepancies.slice(0, 5).forEach(d => {
      console.log(`  User ${d.user_id}: ${d.user_balance} vs ${d.ton_balance} (—Ä–∞–∑–Ω–∏—Ü–∞: ${d.diff})`);
    });
  }
  
  // 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
  console.log('\nüìä 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n');
  
  // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ telegram_id
  const start1 = Date.now();
  await supabase.from('users').select('*').eq('telegram_id', '184').single();
  const time1 = Date.now() - start1;
  console.log(`–ü–æ–∏—Å–∫ –ø–æ telegram_id: ${time1}ms ${time1 < 10 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time1 < 50 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  report.performance.test_results.push({ test: 'telegram_id_lookup', time: time1 });
  
  // –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const start2 = Date.now();
  await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .order('created_at', { ascending: false })
    .limit(10);
  const time2 = Date.now() - start2;
  console.log(`–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${time2}ms ${time2 < 20 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time2 < 100 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  report.performance.test_results.push({ test: 'transaction_history', time: time2 });
  
  // –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å–∞–º
  const start3 = Date.now();
  await supabase
    .from('users')
    .select('*')
    .or('balance_uni.gt.0,balance_ton.gt.0')
    .limit(10);
  const time3 = Date.now() - start3;
  console.log(`–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å–∞–º: ${time3}ms ${time3 < 30 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time3 < 150 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  report.performance.test_results.push({ test: 'balance_filter', time: time3 });
  
  // 4. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•
  console.log('\nüìä 4. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•\n');
  
  const { count: userCount } = await supabase
    .from('users')
    .select('*', { count: 'exact', head: true });
  
  const { count: txCount } = await supabase
    .from('transactions')
    .select('*', { count: 'exact', head: true });
  
  const { data: checksumData } = await supabase
    .from('users')
    .select('balance_uni, balance_ton, uni_farming_balance, ton_farming_balance');
  
  let checksum = 0;
  checksumData?.forEach(row => {
    checksum += (row.balance_uni || 0) + (row.balance_ton || 0) + 
                (row.uni_farming_balance || 0) + (row.ton_farming_balance || 0);
  });
  
  report.data_integrity.total_users = userCount || 0;
  report.data_integrity.total_transactions = txCount || 0;
  report.data_integrity.checksum = checksum;
  
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${report.data_integrity.total_users}`);
  console.log(`–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${report.data_integrity.total_transactions}`);
  console.log(`–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: ${checksum.toFixed(2)}`);
  
  // 5. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '=' .repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');
  console.log('=' .repeat(60) + '\n');
  
  const indexPercentage = (report.indexes.created.length / expectedIndexes.length) * 100;
  const syncPercentage = (report.synchronization.ton_farming.synced / report.synchronization.ton_farming.total_users) * 100;
  const avgPerformance = report.performance.test_results.reduce((sum, t) => sum + t.time, 0) / report.performance.test_results.length;
  
  console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å—ã: ${indexPercentage.toFixed(0)}% (${report.indexes.created.length}/${expectedIndexes.length})`);
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${syncPercentage.toFixed(1)}%`);
  console.log(`‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgPerformance < 50 ? '–û—Ç–ª–∏—á–Ω–∞—è' : avgPerformance < 100 ? '–•–æ—Ä–æ—à–∞—è' : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'} (—Å—Ä–µ–¥–Ω–µ–µ ${avgPerformance.toFixed(0)}ms)`);
  console.log(`‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
  
  if (report.indexes.missing.length > 0) {
    console.log(`\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã: ${report.indexes.missing.join(', ')}`);
  }
  
  if (report.synchronization.ton_farming.not_synced > 0) {
    console.log(`\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${report.synchronization.ton_farming.not_synced} –∑–∞–ø–∏—Å–µ–π`);
  }
  
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (indexPercentage === 100 && syncPercentage === 100) {
    console.log('1. –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log('2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('3. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü (ANALYZE)');
  } else {
    if (report.indexes.missing.length > 0) {
      console.log('1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã');
    }
    if (report.synchronization.ton_farming.not_synced > 0) {
      console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const fs = await import('fs');
  fs.writeFileSync(
    'docs/FINAL_AUDIT_REPORT.json',
    JSON.stringify(report, null, 2)
  );
  
  console.log('\n‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/FINAL_AUDIT_REPORT.json');
}

runFinalAudit().catch(console.error);