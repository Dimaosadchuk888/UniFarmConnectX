import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkTransactionTypes() {
  console.log('[CheckTransactionTypes] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('type')
      .limit(1000);

    if (error) {
      console.error('[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    const typeCounts = {};
    transactions.forEach(t => {
      typeCounts[t.type] = (typeCounts[t.type] || 0) + 1;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    const sortedTypes = Object.entries(typeCounts)
      .sort(([, a], [, b]) => b - a);

    console.log('üìä –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n');
    sortedTypes.forEach(([type, count]) => {
      console.log(`  ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FARMING_DEPOSIT
    if (!typeCounts['FARMING_DEPOSIT']) {
      console.log('\n‚ö†Ô∏è  –¢–∏–ø FARMING_DEPOSIT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      console.log('   –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∏–ø FARMING_REWARD —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤.');
    }

    // –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å FARMING
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ FARMING_REWARD:');
    const { data: farmingExamples } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .limit(5)
      .order('created_at', { ascending: false });

    farmingExamples?.forEach(t => {
      console.log(`  - ${t.created_at}: ${t.amount_uni} UNI (${t.description})`);
    });

  } catch (error) {
    console.error('[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkTransactionTypes();