#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –±–æ–Ω—É—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 74
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function checkDailyBonusData() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –û –ï–ñ–ï–î–ù–ï–í–ù–û–ú –ë–û–ù–£–°–ï ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 74:');
    console.log('------------------------------');
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, username, checkin_last_date, checkin_streak, created_at')
      .eq('id', 74)
      .single();
    
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }
    
    console.log(`   ID: ${user.id}`);
    console.log(`   Username: ${user.username}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π check-in: ${user.checkin_last_date || '–ù–ò–ö–û–ì–î–ê'}`);
    console.log(`   –°–µ—Ä–∏—è –¥–Ω–µ–π: ${user.checkin_streak || 0}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
    
    // 2. –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    console.log('\n2. –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–û–ù–£–°–ê:');
    console.log('---------------------------------------');
    
    const now = new Date();
    console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${now.toLocaleString('ru-RU')}`);
    console.log(`   UTC –≤—Ä–µ–º—è: ${now.toISOString()}`);
    
    if (user.checkin_last_date) {
      const lastClaimDate = new Date(user.checkin_last_date);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω: ${lastClaimDate.toLocaleString('ru-RU')}`);
      
      // –¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const timeDiff = now.getTime() - lastClaimDate.getTime();
      const hoursDiff = timeDiff / (1000 * 60 * 60);
      const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
      
      console.log(`   –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${hoursDiff.toFixed(2)} —á–∞—Å–æ–≤ (${daysDiff} –ø–æ–ª–Ω—ã—Ö –¥–Ω–µ–π)`);
      
      // –õ–æ–≥–∏–∫–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
      if (daysDiff < 1) {
        console.log('   ‚ùå –ë–æ–Ω—É—Å –£–ñ–ï –ü–û–õ–£–ß–ï–ù —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤)');
        const nextAvailable = new Date(lastClaimDate.getTime() + 24 * 60 * 60 * 1000);
        console.log(`   ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${nextAvailable.toLocaleString('ru-RU')}`);
        const hoursToWait = (nextAvailable.getTime() - now.getTime()) / (1000 * 60 * 60);
        console.log(`   ‚è±Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: ${hoursToWait.toFixed(2)} —á–∞—Å–æ–≤`);
      } else {
        console.log('   ‚úÖ –ë–æ–Ω—É—Å –î–û–°–¢–£–ü–ï–ù –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è');
      }
    } else {
      console.log('   ‚úÖ –ë–æ–Ω—É—Å –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–ª—É—á–∞–ª—Å—è - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π daily bonus
    console.log('\n3. –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô DAILY_BONUS:');
    console.log('----------------------------------');
    
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 74)
      .eq('type', 'DAILY_BONUS')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
    } else if (transactions && transactions.length > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      transactions.forEach((tx, index) => {
        console.log(`   ${index + 1}. ${new Date(tx.created_at).toLocaleString('ru-RU')} - ${tx.amount_uni} UNI`);
      });
    } else {
      console.log('   üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π DAILY_BONUS –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É daily_bonus_history (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    console.log('\n4. –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ daily_bonus_history:');
    console.log('----------------------------------------');
    
    const { data: bonusHistory, error: historyError } = await supabase
      .from('daily_bonus_history')
      .select('*')
      .eq('user_id', 74)
      .order('claimed_at', { ascending: false })
      .limit(5);
    
    if (historyError) {
      if (historyError.code === '42P01') {
        console.log('   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ daily_bonus_history –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.error('   ‚ùå –û—à–∏–±–∫–∞:', historyError);
      }
    } else if (bonusHistory && bonusHistory.length > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${bonusHistory.length} –∑–∞–ø–∏—Å–µ–π:`);
      bonusHistory.forEach((record, index) => {
        console.log(`   ${index + 1}. ${new Date(record.claimed_at).toLocaleString('ru-RU')} - ${record.bonus_amount} UNI, streak: ${record.streak_day}`);
      });
    } else {
      console.log('   üìã –ó–∞–ø–∏—Å–µ–π –≤ daily_bonus_history –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
}

checkDailyBonusData().catch(console.error);