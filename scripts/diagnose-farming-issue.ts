/**
 * CRITICAL: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–ø–ª–∞—Ç
 */

import { supabase } from '../core/supabase';
import { logger } from '../core/logger';
import { UnifiedFarmingCalculator } from '../core/farming/UnifiedFarmingCalculator';

async function diagnoseFarmingIssue() {
  logger.info('üö® [CRITICAL DIAGNOSIS] –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞—Ä–º–∏–Ω–≥–æ–º');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD
    logger.info('1. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD...');
    const { data: recentTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      .order('created_at', { ascending: false })
      .limit(50);
      
    if (txError) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
      return;
    }
    
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${recentTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞`);
    
    if (recentTransactions && recentTransactions.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
      const userTransactions = recentTransactions.reduce((acc, tx) => {
        if (!acc[tx.user_id]) acc[tx.user_id] = [];
        acc[tx.user_id].push(tx);
        return acc;
      }, {} as Record<number, any[]>);
      
      logger.info('–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
      for (const [userId, transactions] of Object.entries(userTransactions)) {
        const totalAmount = transactions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0);
        const transactionCount = transactions.length;
        const avgAmount = totalAmount / transactionCount;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        const intervals: number[] = [];
        for (let i = 1; i < transactions.length; i++) {
          const current = new Date(transactions[i-1].created_at).getTime();
          const previous = new Date(transactions[i].created_at).getTime();
          const minutesDiff = (current - previous) / (1000 * 60);
          intervals.push(minutesDiff);
        }
        
        const avgInterval = intervals.length > 0 ? intervals.reduce((a, b) => a + b, 0) / intervals.length : 0;
        
        logger.info(`User ${userId}:`, {
          transactionCount,
          totalAmount: totalAmount.toFixed(6),
          avgAmount: avgAmount.toFixed(6),
          avgIntervalMinutes: avgInterval.toFixed(2),
          intervals: intervals.slice(0, 5).map(i => i.toFixed(2)) // –ü–µ—Ä–≤—ã–µ 5 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        });
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª ~5 –º–∏–Ω—É—Ç –∏ —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
        if (avgInterval >= 4 && avgInterval <= 6 && avgAmount > 1) {
          logger.error(`üö® –ê–ù–û–ú–ê–õ–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê User ${userId}: –ò–Ω—Ç–µ—Ä–≤–∞–ª ${avgInterval.toFixed(2)} –º–∏–Ω, –Ω–æ —Å—É–º–º–∞ ${avgAmount.toFixed(6)} UNI —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è!`);
        }
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info('\n2. –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤...');
    const { data: activeFarmers, error: farmersError } = await supabase
      .from('users')
      .select('id, balance_uni, uni_deposit_amount, uni_farming_rate, uni_farming_active, uni_farming_last_update')
      .eq('uni_farming_active', true)
      .limit(10);
      
    if (farmersError) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞—Ä–º–µ—Ä–æ–≤:', farmersError);
      return;
    }
    
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤`);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º UnifiedFarmingCalculator –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UnifiedFarmingCalculator...');
    
    if (activeFarmers && activeFarmers.length > 0) {
      for (const farmer of activeFarmers.slice(0, 3)) { // –ü–µ—Ä–≤—ã–µ 3 —Ñ–∞—Ä–º–µ—Ä–∞
        logger.info(`\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è User ${farmer.id}:`);
        logger.info('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
          deposit: farmer.uni_deposit_amount,
          rate: farmer.uni_farming_rate,
          lastUpdate: farmer.uni_farming_last_update
        });
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø—Ä–æ—à–ª–æ 5 –º–∏–Ω—É—Ç
        const mockFarmer = {
          user_id: farmer.id,
          uni_deposit_amount: farmer.uni_deposit_amount,
          uni_farming_rate: farmer.uni_farming_rate || '0.01',
          uni_farming_last_update: new Date(Date.now() - 5 * 60 * 1000).toISOString(), // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          created_at: farmer.uni_farming_last_update || new Date().toISOString()
        };
        
        const calculatedIncome = await UnifiedFarmingCalculator.calculateIncome(mockFarmer);
        
        if (calculatedIncome) {
          logger.info('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:', {
            amount: calculatedIncome.amount,
            periods: calculatedIncome.periods,
            expectedFor5Min: parseFloat(farmer.uni_deposit_amount || '0') * 0.01 / 288, // –û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞ 5 –º–∏–Ω—É—Ç
            rate: calculatedIncome.rate
          });
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º
          const expectedAmount = parseFloat(farmer.uni_deposit_amount || '0') * 0.01 / 288;
          const tolerance = expectedAmount * 0.01; // 1% tolerance
          
          if (Math.abs(calculatedIncome.amount - expectedAmount) > tolerance) {
            logger.error(`üö® –û–®–ò–ë–ö–ê –†–ê–°–ß–ï–¢–ê User ${farmer.id}: –ü–æ–ª—É—á–µ–Ω–æ ${calculatedIncome.amount}, –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedAmount.toFixed(8)}`);
          } else {
            logger.info(`‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –¥–ª—è User ${farmer.id}`);
          }
        } else {
          logger.warn(`–†–∞—Å—á–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è User ${farmer.id}`);
        }
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    logger.info('\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏...');
    
    const timeRanges = [
      { name: '1 —á–∞—Å', hours: 1 },
      { name: '6 —á–∞—Å–æ–≤', hours: 6 },
      { name: '24 —á–∞—Å–∞', hours: 24 }
    ];
    
    for (const range of timeRanges) {
      const { data: periodTransactions, error } = await supabase
        .from('transactions')
        .select('amount_uni')
        .eq('type', 'FARMING_REWARD')
        .gte('created_at', new Date(Date.now() - range.hours * 60 * 60 * 1000).toISOString());
        
      if (!error && periodTransactions) {
        const totalAmount = periodTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0);
        const avgAmount = totalAmount / (periodTransactions.length || 1);
        
        logger.info(`${range.name}: ${periodTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${totalAmount.toFixed(6)} UNI, —Å—Ä–µ–¥–Ω—è—è: ${avgAmount.toFixed(6)} UNI`);
      }
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info('\n5. üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    logger.info('‚úÖ UnifiedFarmingCalculator –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    logger.info('‚úÖ –§–æ—Ä–º—É–ª–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 288 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    logger.info('‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    
    logger.info('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    logger.info('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    logger.info('2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å concurrent execution');
    logger.info('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  diagnoseFarmingIssue()
    .then(() => {
      logger.info('üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('üí• –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error);
      process.exit(1);
    });
}

export { diagnoseFarmingIssue };