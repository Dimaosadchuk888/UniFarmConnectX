#!/usr/bin/env tsx
/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
 * –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ processTonBoostIncome()
 */

import { supabase } from '../core/supabase';
import { TonFarmingRepository } from '../modules/boost/TonFarmingRepository';
import { logger } from '../core/logger';

async function testSchedulerFix() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê');
  console.log('==========================================');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`);

  try {
    // –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
    console.log('–®–ê–ì 1: üìã –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    
    const tonFarmingRepo = new TonFarmingRepository();
    const activeBoostUsers = await tonFarmingRepo.getActiveBoostUsers();
    
    if (!activeBoostUsers || activeBoostUsers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeBoostUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log('   –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', activeBoostUsers.map(u => `${u.user_id} (${typeof u.user_id})`));

    // –®–ê–ì 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
    console.log('\n–®–ê–ì 2: üîÑ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    
    const userIds = activeBoostUsers.map(u => {
      const numericId = parseInt(u.user_id.toString());
      if (isNaN(numericId)) {
        console.log(`‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô user_id: ${u.user_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return null;
      }
      console.log(`‚úÖ ${u.user_id} ‚Üí ${numericId}`);
      return numericId;
    }).filter(id => id !== null);
    
    if (userIds.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }
    
    console.log(`‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: [${userIds.join(', ')}]`);
    
    // –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
    console.log('\n–®–ê–ì 3: üí∞ –ü–û–õ–£–ß–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    
    const { data: userBalances, error: balanceError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni')
      .in('id', userIds);
    
    if (balanceError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:`, balanceError);
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${userBalances?.length || 0}`);
    console.log('   ID —Å –±–∞–ª–∞–Ω—Å–∞–º–∏:', userBalances?.map(u => u.id));
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å–∞–º
    const balanceMap = new Map(userBalances?.map(u => [u.id, u]) || []);

    let totalProcessed = 0;
    let totalEarned = 0;

    // –®–ê–ì 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
    console.log('\n–®–ê–ì 4: üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    
    for (const user of activeBoostUsers) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = parseInt(user.user_id.toString());
        if (isNaN(userId)) {
          console.log(`üö´ SKIP: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: ${user.user_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        const userBalance = balanceMap.get(userId);
        if (!userBalance) {
          console.log(`üö´ CRITICAL: –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id} (ID: ${userId})`);
          console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –≤ –º–∞–ø–µ:`, Array.from(balanceMap.keys()));
          continue;
        }
        
        console.log(`‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${user.user_id} (ID: ${userId})`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã boost –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let dailyRate = user.ton_boost_rate || 0.01;
        const userDeposit = Math.max(0, parseFloat(user.farming_balance || '0'));
        
        // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        const dailyIncome = userDeposit * dailyRate;
        const fiveMinuteIncome = dailyIncome / 288; // 288 —Ü–∏–∫–ª–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å

        console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –¥–µ–ø–æ–∑–∏—Ç ${userDeposit} TON, rate ${dailyRate}, –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω: ${fiveMinuteIncome.toFixed(8)} TON`);

        // –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–∂–µ –º–µ–ª–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
        if (fiveMinuteIncome <= 0.00001) {
          console.log(`   üö´ SKIP: –¥–æ—Ö–æ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª (${fiveMinuteIncome.toFixed(8)} TON) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        console.log(`   ‚úÖ PROCESSING: User ${user.user_id} –ø–æ–ª—É—á–∏—Ç +${fiveMinuteIncome.toFixed(6)} TON`);

        totalProcessed++;
        totalEarned += fiveMinuteIncome;

      } catch (boostError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}:`, boostError);
      }
    }

    console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–ú–£–õ–Ø–¶–ò–ò:`);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalProcessed} –∏–∑ ${activeBoostUsers.length}`);
    console.log(`‚úÖ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalEarned.toFixed(6)} TON`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User 287 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    const user287 = activeBoostUsers.find(u => u.user_id === '287' || u.user_id === 287);
    if (user287) {
      const user287Id = parseInt(user287.user_id.toString());
      const user287Balance = balanceMap.get(user287Id);
      const deposit = parseFloat(user287.farming_balance || '0');
      const rate = user287.ton_boost_rate || 0.01;
      const income = (deposit * rate) / 288;
      
      console.log(`\nüéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê USER 287:`);
      console.log(`   User ID: ${user287.user_id} ‚Üí ${user287Id}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å –Ω–∞–π–¥–µ–Ω: ${user287Balance ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   –î–µ–ø–æ–∑–∏—Ç: ${deposit} TON`);
      console.log(`   –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω: ${income.toFixed(8)} TON`);
      console.log(`   –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Ä–æ–≥: ${income > 0.00001 ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è: ${user287Balance && income > 0.00001 ? '–î–ê' : '–ù–ï–¢'}`);
    } else {
      console.log('\n‚ùå USER 287 –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
    }

  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫
testSchedulerFix()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });