#!/usr/bin/env tsx
/**
 * –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê TON BOOST
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
 */

import { supabase } from '../core/supabase';

async function testSchedulerFix() {
  console.log('üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê TON BOOST');
  console.log('=============================================');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`);

  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ton_farming_data (–∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
  console.log('1. üìã –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò–ó ton_farming_data:');
  const { data: farmingUsers, error: farmingError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('boost_active', true);

  if (farmingError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${farmingError.message}`);
    return;
  }

  console.log(`   –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${farmingUsers?.length || 0}`);
  
  if (!farmingUsers || farmingUsers.length === 0) {
    console.log('   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return;
  }

  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
  console.log('\n2. üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –¢–ò–ü–û–í:');
  
  const userIds = farmingUsers.map(u => {
    const numericId = parseInt(u.user_id.toString());
    console.log(`   ‚Ä¢ ${u.user_id} (${typeof u.user_id}) ‚Üí ${numericId} (${typeof numericId}) ${isNaN(numericId) ? '‚ùå' : '‚úÖ'}`);
    return isNaN(numericId) ? null : numericId;
  }).filter(id => id !== null);

  console.log(`\n   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID: ${userIds.length} –∏–∑ ${farmingUsers.length}`);

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
  console.log('\n3. üí∞ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–í:');
  
  const { data: userBalances, error: balanceError } = await supabase
    .from('users')
    .select('id, balance_ton, balance_uni')
    .in('id', userIds);

  if (balanceError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${balanceError.message}`);
    return;
  }

  console.log(`   –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${userBalances?.length || 0}`);
  
  // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
  const balanceMap = new Map(userBalances?.map(u => [u.id, u]) || []);
  console.log(`   –°–æ–∑–¥–∞–Ω–∞ –º–∞–ø–∞: ${balanceMap.size} –∑–∞–ø–∏—Å–µ–π`);

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
  console.log('\n4. üéØ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
  
  let successCount = 0;
  let errorCount = 0;

  for (const user of farmingUsers) {
    const userId = parseInt(user.user_id.toString());
    const userBalance = balanceMap.get(userId);
    
    if (!userBalance) {
      console.log(`   ‚ùå User ${user.user_id}: –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      errorCount++;
      continue;
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞
    const userDeposit = Math.max(0, parseFloat(user.farming_balance || '0'));
    const dailyRate = user.ton_boost_rate || 0.01;
    const dailyIncome = userDeposit * dailyRate;
    const fiveMinuteIncome = dailyIncome / 288;
    
    console.log(`   ‚úÖ User ${user.user_id}: –î–µ–ø–æ–∑–∏—Ç ${userDeposit} TON, –¥–æ—Ö–æ–¥ ${fiveMinuteIncome.toFixed(6)} TON`);
    successCount++;
  }

  // 5. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\n5. üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:');
  console.log('‚ïê'.repeat(40));
  
  if (errorCount === 0) {
    console.log(`‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í—Å–µ ${successCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('‚úÖ User 287 –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥—ã');
  } else {
    console.log(`‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: ${successCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    console.log('üîß –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
  }

  // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  console.log('\n6. üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê:');
  console.log('‚îÄ'.repeat(40));
  console.log('1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç');
  console.log('4. User 287 –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ');
  
  console.log('\n‚úÖ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ó–∞–ø—É—Å–∫
testSchedulerFix()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
  });