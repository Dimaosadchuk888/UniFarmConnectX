/**
 * –°—Ä–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
 */

import { supabase } from '../core/supabase';

async function urgentReferralDbCheck() {
  console.log('\n' + '='.repeat(80));
  console.log('–°–†–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô');
  console.log('='.repeat(80) + '\n');
  
  const userId = 184; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è User 184
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ User 184 –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞
    console.log('1. –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–§–ï–†–ê–õ–û–í USER 184:');
    const { data: referrals, error: refError } = await supabase
      .from('users')
      .select('id, username, referred_by, uni_farming_active, uni_deposit_amount, balance_uni, uni_farming_last_update, balance_ton')
      .eq('referred_by', userId)
      .order('id');
    
    if (refError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', refError);
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${referrals?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:`);
    referrals?.forEach(r => {
      console.log(`\n  User ${r.id}:`);
      console.log(`    - UNI —Ñ–∞—Ä–º–∏–Ω–≥: ${r.uni_farming_active ? '–ê–ö–¢–ò–í–ï–ù ‚úì' : '–ù–ï –ê–ö–¢–ò–í–ï–ù ‚úó'}`);
      console.log(`    - UNI –¥–µ–ø–æ–∑–∏—Ç: ${r.uni_deposit_amount || 0}`);
      console.log(`    - UNI –±–∞–ª–∞–Ω—Å: ${r.balance_uni || 0}`);
      console.log(`    - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UNI: ${r.uni_farming_last_update || '–ù–ò–ö–û–ì–î–ê'}`);
      console.log(`    - TON –±–∞–ª–∞–Ω—Å: ${r.balance_ton || 0}`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    console.log('\n\n2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –§–ê–†–ú–ò–ù–ì–ê –†–ï–§–ï–†–ê–õ–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):');
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    
    if (referrals && referrals.length > 0) {
      const referralIds = referrals.map(r => r.id);
      const { data: farmingTx, error: txError } = await supabase
        .from('transactions')
        .select('*')
        .in('user_id', referralIds)
        .eq('type', 'FARMING_REWARD')
        .gte('created_at', oneDayAgo)
        .order('created_at', { ascending: false });
      
      if (txError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
      } else {
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${farmingTx?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD:`);
        farmingTx?.forEach(tx => {
          console.log(`  - User ${tx.user_id}: ${tx.amount} ${tx.currency} (${new Date(tx.created_at).toLocaleString()})`);
        });
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 184
    console.log('\n\n3. –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò USER 184 (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):');
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
    
    const { data: referralRewards, error: rewardError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'REFERRAL_REWARD')
      .gte('created_at', sevenDaysAgo)
      .order('created_at', { ascending: false });
    
    if (rewardError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', rewardError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${referralRewards?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π REFERRAL_REWARD –∑–∞ 7 –¥–Ω–µ–π:`);
      if (referralRewards && referralRewards.length > 0) {
        referralRewards.forEach(tx => {
          console.log(`  - ${tx.amount} ${tx.currency} –æ—Ç User ${tx.source_user_id} (${new Date(tx.created_at).toLocaleString()})`);
          console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        });
      } else {
        console.log('  ‚ùå –ù–ï–¢ –†–ï–§–ï–†–ê–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô!');
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referral_earnings
    console.log('\n\n4. –ó–ê–ü–ò–°–ò –í –¢–ê–ë–õ–ò–¶–ï referral_earnings:');
    const { data: earnings, error: earningsError } = await supabase
      .from('referral_earnings')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', sevenDaysAgo)
      .order('created_at', { ascending: false });
    
    if (earningsError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è referral_earnings:', earningsError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${earnings?.length || 0} –∑–∞–ø–∏—Å–µ–π –≤ referral_earnings:`);
      if (earnings && earnings.length > 0) {
        earnings.forEach(e => {
          console.log(`  - ${e.amount} ${e.currency} –æ—Ç User ${e.source_user_id} (${new Date(e.created_at).toLocaleString()})`);
        });
      } else {
        console.log('  ‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ï–ô –í referral_earnings!');
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('\n\n5. –ü–û–°–õ–ï–î–ù–ò–ï 5 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –õ–Æ–ë–û–ì–û –¢–ò–ü–ê –î–õ–Ø USER 184:');
    const { data: recentTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);
    
    recentTx?.forEach(tx => {
      console.log(`  - ${tx.type}: ${tx.amount} ${tx.currency} (${new Date(tx.created_at).toLocaleString()})`);
    });
    
    // 6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\n\n6. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    
    const activeReferralFarmers = referrals?.filter(r => r.uni_farming_active) || [];
    const inactiveReferrals = referrals?.filter(r => !r.uni_farming_active) || [];
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`  - –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals?.length || 0}`);
    console.log(`  - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ —Å—Ä–µ–¥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${activeReferralFarmers.length}`);
    console.log(`  - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${inactiveReferrals.length}`);
    
    if (activeReferralFarmers.length === 0) {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ñ–∞—Ä–º–∏–Ω–≥!');
      console.log('   –ü–æ—ç—Ç–æ–º—É –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.');
      console.log('\nüí° –†–ï–®–ï–ù–ò–ï: –†–µ—Ñ–µ—Ä–∞–ª—ã –¥–æ–ª–∂–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥, —á—Ç–æ–±—ã –≤—ã –Ω–∞—á–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç—å 5% –æ—Ç –∏—Ö –¥–æ—Ö–æ–¥–∞.');
    } else {
      console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –Ω–æ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    }
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
    console.log('\n\n7. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ê–ë–õ–ò–¶–£ referrals:');
    const { data: referralLinks, count } = await supabase
      .from('referrals')
      .select('*', { count: 'exact' })
      .or(`referrer_id.eq.${userId},user_id.in.(${referrals?.map(r => r.id).join(',')})`);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${count || 0} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ referrals`);
    referralLinks?.forEach(link => {
      console.log(`  - Referrer: ${link.referrer_id}, User: ${link.user_id}, Referred User: ${link.referred_user_id}`);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(80) + '\n');
  
  process.exit(0);
}

urgentReferralDbCheck();