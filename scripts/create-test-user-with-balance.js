import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function createTestUser() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º 1000 TON / 1000 UNI...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const timestamp = Date.now();
    const testUserId = 999000 + Math.floor(Math.random() * 1000); // ID –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 999000-999999
    const telegramId = `${testUserId}`;
    const username = `test_user_${timestamp}`;
    const firstName = 'Test';
    const lastName = 'User';
    const refCode = `TEST_${timestamp}_${Math.random().toString(36).substring(2, 8)}`;

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert({
        telegram_id: telegramId,
        username: username,
        first_name: firstName,
        ref_code: refCode,
        balance_uni: '1000.000000000', // 1000 UNI
        balance_ton: '1000.000000000', // 1000 TON
        uni_farming_balance: '0',
        uni_farming_active: false,
        ton_boost_package: null,
        is_admin: false,
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:');
    console.log(`   ID: ${newUser.id}`);
    console.log(`   Telegram ID: ${newUser.telegram_id}`);
    console.log(`   Username: @${newUser.username}`);
    console.log(`   Ref Code: ${newUser.ref_code}`);
    console.log(`   Balance UNI: ${newUser.balance_uni}`);
    console.log(`   Balance TON: ${newUser.balance_ton}`);

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const jwtSecret = process.env.JWT_SECRET || 'unifarm_jwt_secret_key_2025_production';
    const token = jwt.sign(
      {
        userId: newUser.id,
        telegram_id: newUser.telegram_id,
        username: newUser.username,
        ref_code: newUser.ref_code
      },
      jwtSecret,
      { expiresIn: '7d' }
    );

    console.log('\nüîê JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log(token);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { error: transactionError } = await supabase
      .from('transactions')
      .insert({
        user_id: newUser.id,
        type: 'INITIAL_DEPOSIT',
        amount_uni: '1000.000000000',
        amount_ton: '1000.000000000',
        amount: '2000.000000000',
        currency: 'BOTH',
        description: 'Initial test balance deposit',
        created_at: new Date().toISOString()
      });

    if (transactionError) {
      console.error('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:', transactionError.message);
    } else {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è');
    }

    // –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test User Login - UniFarm</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #1a1a1a;
            color: #fff;
        }
        .container {
            background: #2a2a2a;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }
        h1 {
            color: #8b5cf6;
            margin-bottom: 20px;
        }
        .info {
            background: #3a3a3a;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .info p {
            margin: 5px 0;
            font-family: monospace;
        }
        button {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin-right: 10px;
            margin-top: 10px;
        }
        button:hover {
            background: #7c3aed;
        }
        .success {
            background: #10b981;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 20px;
            display: none;
        }
        .token-display {
            background: #1a1a1a;
            padding: 10px;
            border-radius: 5px;
            word-break: break-all;
            font-family: monospace;
            font-size: 12px;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ Test User Login - UniFarm</h1>
        
        <div class="info">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h3>
            <p><strong>User ID:</strong> ${newUser.id}</p>
            <p><strong>Telegram ID:</strong> ${newUser.telegram_id}</p>
            <p><strong>Username:</strong> @${newUser.username}</p>
            <p><strong>Ref Code:</strong> ${newUser.ref_code}</p>
            <p><strong>Balance UNI:</strong> ${newUser.balance_uni}</p>
            <p><strong>Balance TON:</strong> ${newUser.balance_ton}</p>
        </div>

        <div class="info">
            <h3>JWT Token:</h3>
            <div class="token-display">${token}</div>
        </div>

        <button onclick="loginUser()">üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</button>
        <button onclick="copyToken()">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω</button>
        <button onclick="openPreview()">üåê –û—Ç–∫—Ä—ã—Ç—å UniFarm</button>
        
        <div id="success" class="success"></div>
    </div>

    <script>
        const token = '${token}';
        
        function loginUser() {
            localStorage.setItem('unifarm_jwt_token', token);
            document.getElementById('success').style.display = 'block';
            document.getElementById('success').innerHTML = '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage.';
            
            setTimeout(() => {
                window.location.href = '/';
            }, 1500);
        }
        
        function copyToken() {
            navigator.clipboard.writeText(token).then(() => {
                document.getElementById('success').style.display = 'block';
                document.getElementById('success').innerHTML = 'üìã –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!';
                setTimeout(() => {
                    document.getElementById('success').style.display = 'none';
                }, 3000);
            });
        }
        
        function openPreview() {
            localStorage.setItem('unifarm_jwt_token', token);
            window.open('/', '_blank');
        }
    </script>
</body>
</html>`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    const fs = await import('fs');
    const filename = `test-user-${newUser.id}-login.html`;
    fs.writeFileSync(filename, htmlContent);

    console.log(`\nüìÑ HTML —Ñ–∞–π–ª –¥–ª—è –≤—Ö–æ–¥–∞ —Å–æ–∑–¥–∞–Ω: ${filename}`);
    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
createTestUser();