/**
 * –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 299 - –ø—Ä–æ–±–ª–µ–º–∞ —Å TON Boost
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

import { supabase } from '../core/supabase';

async function urgentCheckUser299() {
  console.log('üö® –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 299');
  console.log('=' .repeat(70));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã 1. –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 299:');
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 299)
      .single();
    
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
    } else {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 299:');
      console.log('- balance_ton:', user.balance_ton);
      console.log('- balance_uni:', user.balance_uni);
      console.log('- ton_boost_active:', user.ton_boost_active);
      console.log('- ton_boost_package:', user.ton_boost_package);
      console.log('- ton_farming_balance:', user.ton_farming_balance);
      console.log('- created_at:', user.created_at);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã 2. –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 299:');
    const { data: transactions, error: transError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 299)
      .order('created_at', { ascending: false })
      .limit(30);
    
    if (transError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions?.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
      const byType: Record<string, any[]> = {};
      transactions?.forEach(t => {
        if (!byType[t.type]) byType[t.type] = [];
        byType[t.type].push(t);
      });
      
      console.log('\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:');
      Object.entries(byType).forEach(([type, trans]) => {
        console.log(`\n${type}: ${trans.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        trans.forEach(t => {
          console.log(`  - ID ${t.id}: ${t.amount} ${t.currency}, —Å—Ç–∞—Ç—É—Å: ${t.status}, –≤—Ä–µ–º—è: ${t.created_at}`);
          if (t.metadata) {
            console.log(`    metadata:`, JSON.stringify(t.metadata).substring(0, 100));
          }
        });
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON
      const tonTransactions = transactions?.filter(t => t.currency === 'TON');
      console.log(`\nüí∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (${tonTransactions?.length}):`);
      tonTransactions?.forEach(t => {
        console.log(`- ${t.type}: ${t.amount} TON, —Å—Ç–∞—Ç—É—Å: ${t.status}, ID: ${t.id}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ BOOST_PURCHASE
      const boostPurchases = transactions?.filter(t => t.type === 'BOOST_PURCHASE');
      console.log(`\nüöÄ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (${boostPurchases?.length}):`);
      boostPurchases?.forEach(t => {
        console.log(`- ID ${t.id}: ${t.amount} ${t.currency}, —Å—Ç–∞—Ç—É—Å: ${t.status}`);
        console.log(`  metadata:`, t.metadata);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    console.log('\nüìã 3. –ü–†–û–í–ï–†–ö–ê ton_farming_data:');
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '299');
    
    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:', farmingError);
    } else {
      console.log(`–ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${farmingData?.length || 0}`);
      farmingData?.forEach(f => {
        console.log(`- farming_balance: ${f.farming_balance}, boost_active: ${f.boost_active}, package: ${f.boost_package_id}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º boost_purchases (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    console.log('\nüìã 4. –ü–†–û–í–ï–†–ö–ê boost_purchases:');
    const { data: boostPurchasesTable, error: boostError } = await supabase
      .from('boost_purchases')
      .select('*')
      .eq('user_id', 299);
    
    if (boostError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boost_purchases:', boostError);
    } else {
      console.log(`–ó–∞–ø–∏—Å–µ–π –≤ boost_purchases: ${boostPurchasesTable?.length || 0}`);
      boostPurchasesTable?.forEach(b => {
        console.log(`- ID ${b.id}: package ${b.package_id}, —Å—Ç–∞—Ç—É—Å: ${b.status}, —Å—É–º–º–∞: ${b.amount}`);
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å TON
    console.log('\nüìã 5. –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê:');
    const tonDeposits = transactions?.filter(t => 
      t.currency === 'TON' && 
      (t.type === 'TON_DEPOSIT' || t.type === 'DEPOSIT')
    );
    const tonWithdrawals = transactions?.filter(t => 
      t.currency === 'TON' && 
      (t.type === 'BOOST_PURCHASE' || t.type === 'WITHDRAWAL')
    );
    
    const totalDeposits = tonDeposits?.reduce((sum, t) => sum + parseFloat(t.amount || 0), 0) || 0;
    const totalWithdrawals = tonWithdrawals?.reduce((sum, t) => sum + parseFloat(t.amount || 0), 0) || 0;
    
    console.log(`üí∞ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ TON: ${totalDeposits}`);
    console.log(`üí∏ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏–π TON: ${totalWithdrawals}`);
    console.log(`üìä –†–∞—Å—á–µ—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${totalDeposits - totalWithdrawals}`);
    console.log(`üì± –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${user?.balance_ton}`);
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    console.log('\nüìã 6. –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è):');
    const recentActions = transactions?.slice(0, 10);
    recentActions?.forEach(t => {
      console.log(`- ${t.created_at}: ${t.type} - ${t.amount} ${t.currency} (—Å—Ç–∞—Ç—É—Å: ${t.status})`);
    });
    
    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ BOOST_PURCHASE');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –±–∞–ª–∞–Ω—Å TON');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –≤ ton_farming_data');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ metadata —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫');
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
urgentCheckUser299().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  process.exit(1);
});