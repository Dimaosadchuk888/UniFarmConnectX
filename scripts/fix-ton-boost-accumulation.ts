import { supabase } from '../core/supabase.js';
import { logger } from '../core/logger.js';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ TON Boost
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è farming_balance –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

async function fixTonBoostAccumulation() {
  logger.info('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost
    const { data: users, error: usersError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true);
      
    if (usersError) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      return;
    }
    
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${users?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost`);
    
    // 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    for (const user of users || []) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ TON Boost
      const { data: purchases, error: purchasesError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', user.user_id)
        .ilike('description', '%–ø–æ–∫—É–ø–∫–∞%TON Boost%')
        .order('created_at', { ascending: true });
        
      if (purchasesError) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user ${user.user_id}:`, purchasesError);
        continue;
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      let totalDeposit = 0;
      purchases?.forEach(p => {
        const amount = Math.abs(parseFloat(p.amount_ton || p.amount || '0'));
        totalDeposit += amount;
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
      let correctRate = user.farming_rate;
      if (purchases && purchases.length > 0) {
        const lastPurchase = purchases[purchases.length - 1];
        const metadata = lastPurchase.metadata as any;
        if (metadata?.daily_rate) {
          correctRate = metadata.daily_rate.toString();
        }
      }
      
      logger.info(`User ${user.user_id}:`, {
        currentBalance: user.farming_balance,
        correctBalance: totalDeposit,
        currentRate: user.farming_rate,
        correctRate: correctRate,
        purchaseCount: purchases?.length || 0
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞–≤–∫—É –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
      if (parseFloat(user.farming_balance) !== totalDeposit || user.farming_rate !== correctRate) {
        const { error: updateError } = await supabase
          .from('ton_farming_data')
          .update({
            farming_balance: totalDeposit.toString(),
            farming_rate: correctRate,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', user.user_id);
          
        if (updateError) {
          logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è user ${user.user_id}:`, updateError);
        } else {
          logger.info(`‚úÖ User ${user.user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: –±–∞–ª–∞–Ω—Å ${user.farming_balance} ‚Üí ${totalDeposit}, —Å—Ç–∞–≤–∫–∞ ${user.farming_rate} ‚Üí ${correctRate}`);
        }
      }
    }
    
    logger.info('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixTonBoostAccumulation();