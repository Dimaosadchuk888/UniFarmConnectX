/**
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π UniFarm
 * —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –ë–î
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
const CRITICAL_FIELDS = {
  users: {
    required: [
      'id', 'telegram_id', 'username', 
      'balance_uni', 'balance_ton',  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å uni_balance/ton_balance
      'ref_code', 'uni_farming_active', 'ton_boost_package', 'created_at'
    ],
    optional: [
      'first_name', 'last_name', 'referred_by', 'is_admin',
      'uni_farming_amount', 'uni_farming_start_timestamp',
      'ton_boost_active', 'ton_boost_start_timestamp',
      'ton_wallet_address', 'ton_wallet_verified', 'ton_wallet_linked_at'
    ]
  },
  transactions: {
    required: [
      'id', 'user_id', 'type', 'amount', 'currency', 'status', 'created_at'
    ],
    optional: [
      'amount_uni', 'amount_ton', 'description', 'metadata', 'tx_hash'
    ]
  },
  referrals: {
    required: [
      'id', 'referrer_user_id', 'referred_user_id', 'level', 'percentage', 'created_at'
    ],
    optional: []
  },
  farming_sessions: {
    required: [
      'id', 'user_id', 'type', 'amount', 'is_active', 'created_at'
    ],
    optional: [
      'start_timestamp', 'last_claim_timestamp', 'total_earned'
    ]
  },
  user_sessions: {
    required: [
      'id', 'user_id', 'session_token', 'created_at', 'expires_at'
    ],
    optional: ['last_activity', 'ip_address']
  },
  boost_purchases: {
    required: [
      'id', 'user_id', 'package_id', 'amount_ton', 'daily_rate', 'purchase_date'
    ],
    optional: ['is_active', 'expiry_date', 'total_earned']
  },
  missions: {
    required: [
      'id', 'title', 'description', 'mission_type', 'reward_type', 'reward_amount', 'created_at'
    ],
    optional: ['is_active', 'requirements', 'icon']
  },
  user_missions: {
    required: [
      'id', 'user_id', 'mission_id', 'is_completed', 'created_at'
    ],
    optional: ['completed_at', 'reward_claimed', 'progress']
  },
  airdrops: {
    required: [
      'id', 'title', 'description', 'total_amount', 'token_type', 'created_at'
    ],
    optional: ['start_date', 'end_date', 'is_active', 'requirements']
  },
  daily_bonus_logs: {
    required: [
      'id', 'user_id', 'day_number', 'bonus_amount', 'claimed_at'
    ],
    optional: ['streak_count']
  },
  withdraw_requests: {
    required: [
      'id', 'user_id', 'amount_ton', 'ton_wallet', 'status', 'created_at'
    ],
    optional: ['processed_at', 'processed_by', 'tx_hash']
  }
};

async function checkTableStructure(tableName, fields) {
  console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const { count, error: countError } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    if (countError) {
      if (countError.message.includes('does not exist')) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
        return { 
          table: tableName, 
          status: 'MISSING',
          error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        };
      }
      throw countError;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (error) throw error;

    if (!data || data.length === 0) {
      console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ü–£–°–¢–ê–Ø (0 –∑–∞–ø–∏—Å–µ–π)`);
      console.log(`   –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π`);
      return { 
        table: tableName, 
        status: 'EMPTY',
        count: 0,
        warning: '–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞'
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const actualFields = Object.keys(data[0]);
    const missingRequired = fields.required.filter(f => !actualFields.includes(f));
    const missingOptional = fields.optional.filter(f => !actualFields.includes(f));
    const extraFields = actualFields.filter(f => 
      !fields.required.includes(f) && !fields.optional.includes(f)
    );

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (missingRequired.length === 0) {
      console.log(`‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –º–µ—Å—Ç–µ (${count} –∑–∞–ø–∏—Å–µ–π)`);
    } else {
      console.log(`‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingRequired.join(', ')}`);
    }

    if (missingOptional.length > 0) {
      console.log(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingOptional.join(', ')}`);
    }

    if (extraFields.length > 0) {
      console.log(`‚ÑπÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –ë–î: ${extraFields.join(', ')}`);
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    if (tableName === 'transactions' && data[0].amount !== undefined) {
      const hasAmount = data[0].amount !== null && data[0].amount !== '0';
      console.log(`   ${hasAmount ? '‚úì' : '‚úó'} –ü–æ–ª–µ amount: ${data[0].amount || '–ø—É—Å—Ç–æ–µ'}`);
    }

    if (tableName === 'users' && data[0].balance_uni !== undefined) {
      console.log(`   ‚úì balance_uni: ${data[0].balance_uni}`);
      console.log(`   ‚úì balance_ton: ${data[0].balance_ton}`);
    }

    return {
      table: tableName,
      status: missingRequired.length > 0 ? 'ERROR' : 'OK',
      count,
      missingRequired,
      missingOptional,
      extraFields,
      actualFields
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
    return { 
      table: tableName, 
      status: 'ERROR',
      error: error.message 
    };
  }
}

async function main() {
  console.log('üöÄ –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• UniFarm');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toLocaleString());
  console.log('='.repeat(60));

  const results = [];
  let criticalIssues = 0;
  let warnings = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
  for (const [table, fields] of Object.entries(CRITICAL_FIELDS)) {
    const result = await checkTableStructure(table, fields);
    results.push(result);

    if (result.status === 'ERROR' || result.status === 'MISSING') {
      criticalIssues++;
    } else if (result.status === 'EMPTY') {
      warnings++;
    }

    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(60));

  const okTables = results.filter(r => r.status === 'OK').length;
  const errorTables = results.filter(r => r.status === 'ERROR').length;
  const missingTables = results.filter(r => r.status === 'MISSING').length;
  const emptyTables = results.filter(r => r.status === 'EMPTY').length;

  console.log(`‚úÖ –¢–∞–±–ª–∏—Ü –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã—Ö: ${okTables}/${Object.keys(CRITICAL_FIELDS).length}`);
  console.log(`‚ùå –¢–∞–±–ª–∏—Ü —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏: ${errorTables}`);
  console.log(`üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: ${missingTables}`);
  console.log(`‚ö†Ô∏è  –ü—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü: ${emptyTables}`);

  // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
  if (criticalIssues > 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
    results.forEach(r => {
      if (r.status === 'ERROR' && r.missingRequired) {
        console.log(`\n‚ùå ${r.table}:`);
        console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${r.missingRequired.join(', ')}`);
      }
      if (r.status === 'MISSING') {
        console.log(`\nüö´ ${r.table}: –¢–ê–ë–õ–ò–¶–ê –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
      }
    });
  }

  // –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Å—Ç—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
  const emptyTablesList = results.filter(r => r.status === 'EMPTY').map(r => r.table);
  if (emptyTablesList.length > 0) {
    console.log('\n‚ö†Ô∏è  –ü–£–°–¢–´–ï –¢–ê–ë–õ–ò–¶–´ (—Ç—Ä–µ–±—É—é—Ç –¥–∞–Ω–Ω—ã—Ö):');
    emptyTablesList.forEach(t => console.log(`   - ${t}`));
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  if (missingTables > 0) {
    console.log('\n1. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
    results.filter(r => r.status === 'MISSING').forEach(r => {
      console.log(`   - CREATE TABLE ${r.table} (...);`);
    });
  }

  if (errorTables > 0) {
    console.log('\n2. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
    results.filter(r => r.status === 'ERROR' && r.missingRequired).forEach(r => {
      r.missingRequired.forEach(field => {
        console.log(`   - ALTER TABLE ${r.table} ADD COLUMN ${field} ...;`);
      });
    });
  }

  if (emptyTables > 0) {
    console.log('\n3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
  const isHealthy = criticalIssues === 0;
  console.log(`\n${isHealthy ? '‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!' : '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú!'}`);
  
  if (!isHealthy) {
    console.log('\n–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã UniFarm –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:');
    console.log('1. –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('2. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
    console.log('3. –î–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    console.log('4. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  }

  process.exit(isHealthy ? 0 : 1);
}

main().catch(console.error);