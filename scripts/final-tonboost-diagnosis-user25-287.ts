#!/usr/bin/env tsx
/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ID 25 –∏ ID 287
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –¢–æ—á–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π
 * –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

import { supabase } from '../core/supabase';

async function finalTonBoostDiagnosis() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ID 25 –∏ ID 287');
  console.log('================================================================');
  console.log(`–î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${new Date().toLocaleString('ru-RU')}\n`);

  const targetUsers = [25, 287];

  for (const userId of targetUsers) {
    console.log(`\n‚îå‚îÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID ${userId} ‚îÄ‚îê`);
    console.log('‚îÇ'.padEnd(50, ' ') + '‚îÇ');

    // üîπ 1. –§–ò–ö–°–ê–¶–ò–Ø –î–ï–ü–û–ó–ò–¢–ê - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫—É–ø–∫–∏
    console.log('üîπ 1. –§–ò–ö–°–ê–¶–ò–Ø –î–ï–ü–û–ó–ò–¢–ê');
    console.log('‚îÄ'.repeat(30));
    
    const { data: boostPurchases } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .or('type.eq.BOOST_PURCHASE,description.ilike.%boost%,description.ilike.%Boost%')
      .order('created_at', { ascending: false });

    if (boostPurchases && boostPurchases.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostPurchases.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫—É–ø–∫–∏ TON Boost:`);
      boostPurchases.forEach(tx => {
        console.log(`   ‚Ä¢ ID: ${tx.id} | ${tx.created_at}`);
        console.log(`     –¢–∏–ø: ${tx.type} | –°—É–º–º–∞: ${tx.amount || tx.amount_ton} ${tx.currency}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${tx.status} | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${tx.is_confirmed ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        if (tx.metadata) {
          console.log(`     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(tx.metadata, null, 2));
        }
        console.log('');
      });
    } else {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ TON Boost –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // üîπ 2. –ê–ö–¢–ò–í–ê–¶–ò–Ø BOOST-–ü–ê–ö–ï–¢–ê
    console.log('üîπ 2. –ê–ö–¢–ò–í–ê–¶–ò–Ø BOOST-–ü–ê–ö–ï–¢–ê');
    console.log('‚îÄ'.repeat(30));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: userData } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_package_id, ton_boost_rate, ton_boost_start_timestamp, balance_ton')
      .eq('id', userId)
      .single();

    if (userData) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
      console.log(`   ‚Ä¢ TON Boost Package: ${userData.ton_boost_package || '–ù–ï–¢'}`);
      console.log(`   ‚Ä¢ TON Boost Package ID: ${userData.ton_boost_package_id || '–ù–ï–¢'}`);
      console.log(`   ‚Ä¢ TON Boost Rate: ${userData.ton_boost_rate || '–ù–ï–¢'}`);
      console.log(`   ‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${userData.ton_boost_start_timestamp || '–ù–ï–¢'}`);
      console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å TON: ${userData.balance_ton || 0}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId);

    if (farmingData && farmingData.length > 0) {
      console.log('\n‚úÖ –ó–∞–ø–∏—Å–∏ –≤ ton_farming_data:');
      farmingData.forEach(data => {
        console.log(`   ‚Ä¢ Package ID: ${data.boost_package_id}`);
        console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${data.boost_active ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${data.farming_balance}`);
        console.log(`   ‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${data.start_date}`);
        console.log(`   ‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${data.end_date}`);
        console.log(`   ‚Ä¢ –°—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${data.farming_rate}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å–∏ –≤ ton_farming_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // üîπ 3. –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ê–ß–ò–°–õ–ï–ù–ò–ô
    console.log('üîπ 3. –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ù–ê–ß–ò–°–õ–ï–ù–ò–ô');
    console.log('‚îÄ'.repeat(30));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON
    const { data: tonIncomes } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);

    if (tonIncomes && tonIncomes.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonIncomes.length} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:`);
      tonIncomes.forEach((tx, index) => {
        console.log(`   ${index + 1}. ${tx.created_at}`);
        console.log(`      –°—É–º–º–∞: ${tx.amount_ton} TON`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        if (tx.metadata?.original_type) {
          console.log(`      –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø: ${tx.metadata.original_type}`);
        }
      });

      // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
      if (tonIncomes.length >= 2) {
        const lastTime = new Date(tonIncomes[0].created_at);
        const prevTime = new Date(tonIncomes[1].created_at);
        const intervalMinutes = (lastTime.getTime() - prevTime.getTime()) / (1000 * 60);
        console.log(`\n   üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏: ${intervalMinutes.toFixed(1)} –º–∏–Ω—É—Ç`);
        
        const timeSinceLastIncome = (Date.now() - lastTime.getTime()) / (1000 * 60);
        console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${timeSinceLastIncome.toFixed(1)} –º–∏–Ω—É—Ç`);
        
        if (timeSinceLastIncome > 10) {
          console.log('   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç!');
        } else {
          console.log('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }
      }
    } else {
      console.log('‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏—è TON –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // üîπ 4. –ü–û–í–¢–û–†–ù–´–ô –í–û–ó–í–†–ê–¢ –°–†–ï–î–°–¢–í
    console.log('\nüîπ 4. –ê–ù–ê–õ–ò–ó –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í');
    console.log('‚îÄ'.repeat(30));

    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—Ç
    const { data: allTonTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .or('currency.eq.TON,amount_ton.gt.0')
      .order('created_at', { ascending: false })
      .limit(50);

    if (allTonTx && allTonTx.length > 0) {
      console.log('üìä –ê–ù–ê–õ–ò–ó –í–°–ï–• TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:');
      
      const transactionTypes = new Map();
      let totalTonIn = 0;
      let totalTonOut = 0;
      
      allTonTx.forEach(tx => {
        const amount = parseFloat(tx.amount_ton || tx.amount || '0');
        const type = tx.type;
        
        transactionTypes.set(type, (transactionTypes.get(type) || 0) + 1);
        
        if (type === 'BOOST_PURCHASE' || type === 'WITHDRAWAL') {
          totalTonOut += amount;
        } else {
          totalTonIn += amount;
        }
      });

      console.log('\n   –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      for (const [type, count] of transactionTypes) {
        console.log(`   ‚Ä¢ ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
      
      console.log(`\n   üí∞ –û–±—â–∏–π –ø—Ä–∏—Ö–æ–¥ TON: ${totalTonIn.toFixed(6)}`);
      console.log(`   üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ TON: ${totalTonOut.toFixed(6)}`);
      console.log(`   üìà –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${(totalTonIn - totalTonOut).toFixed(6)}`);

      // –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      console.log('\n   üîç –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:');
      
      const boostPurchases = allTonTx.filter(tx => 
        tx.type === 'BOOST_PURCHASE' || 
        (tx.description && tx.description.toLowerCase().includes('boost'))
      );
      
      const farmingRewards = allTonTx.filter(tx => 
        tx.type === 'FARMING_REWARD' && 
        (tx.currency === 'TON' || parseFloat(tx.amount_ton || '0') > 0)
      );

      console.log(`   ‚Ä¢ –ü–æ–∫—É–ø–æ–∫ Boost: ${boostPurchases.length}`);
      console.log(`   ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–π TON: ${farmingRewards.length}`);
      
      if (boostPurchases.length > 0 && farmingRewards.length > boostPurchases.length * 2) {
        console.log('   ‚ö†Ô∏è –ü–û–î–û–ó–†–ï–ù–ò–ï: –ù–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–æ–∫!');
        console.log(`   üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${farmingRewards.length} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ ${boostPurchases.length} –ø–æ–∫—É–ø–æ–∫`);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      console.log('\n   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      allTonTx.slice(0, 5).forEach((tx, i) => {
        console.log(`   ${i + 1}. [${tx.created_at}] ${tx.type}`);
        console.log(`      –°—É–º–º–∞: ${tx.amount_ton || tx.amount} TON`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
      });
    }

    // üîπ 5. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï / –û–¢–õ–û–ñ–ï–ù–ù–´–ï –ó–ê–ü–ò–°–ò
    console.log('\nüîπ 5. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–•');
    console.log('‚îÄ'.repeat(30));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: recentActivity } = await supabase
      .from('transactions')
      .select('created_at, type, description')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1);

    if (recentActivity && recentActivity.length > 0) {
      const lastActivity = new Date(recentActivity[0].created_at);
      const timeSinceActivity = (Date.now() - lastActivity.getTime()) / (1000 * 60);
      
      console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity.toLocaleString('ru-RU')}`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${timeSinceActivity.toFixed(1)} –º–∏–Ω—É—Ç`);
      
      if (timeSinceActivity < 60) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)');
      } else {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)');
      }
    }

    console.log('‚îÇ'.padEnd(50, ' ') + '‚îÇ');
    console.log(`‚îî${'‚îÄ'.repeat(48)}‚îò\n`);
  }

  // –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê
  console.log('\nüèÅ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  console.log('‚ïê'.repeat(50));

  for (const userId of targetUsers) {
    console.log(`\nüìã –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ID ${userId}:`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data: summary } = await supabase
      .from('users')
      .select('id, ton_boost_package, balance_ton')
      .eq('id', userId)
      .single();

    const { data: lastTonIncome } = await supabase
      .from('transactions')
      .select('created_at, amount_ton')
      .eq('user_id', userId)
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(1);

    const { data: boostPurchaseCount } = await supabase
      .from('transactions')
      .select('id')
      .eq('user_id', userId)
      .or('type.eq.BOOST_PURCHASE,description.ilike.%boost%');

    if (summary) {
      console.log(`   ‚Ä¢ Boost –ø–∞–∫–µ—Ç: ${summary.ton_boost_package || '–ù–ï–¢'}`);
      console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å TON: ${summary.balance_ton || 0}`);
      console.log(`   ‚Ä¢ –ü–æ–∫—É–ø–æ–∫ Boost: ${boostPurchaseCount?.length || 0}`);
      
      if (lastTonIncome && lastTonIncome.length > 0) {
        const timeSince = (Date.now() - new Date(lastTonIncome[0].created_at).getTime()) / (1000 * 60);
        console.log(`   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: ${timeSince.toFixed(1)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        console.log(`   ‚Ä¢ –°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: ${lastTonIncome[0].amount_ton} TON`);
      } else {
        console.log(`   ‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è: –ù–ï–¢`);
      }
    }
  }

  console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
finalTonBoostDiagnosis()
  .then(() => {
    console.log('\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
  });