import { exec } from 'child_process';
import { promisify } from 'util';
import * as fs from 'fs';
import * as path from 'path';

const execAsync = promisify(exec);

interface FieldUsage {
  field: string;
  usageCount: number;
  locations: string[];
  canRemove: boolean;
  recommendation: string;
}

async function checkFieldUsageInCode() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô –í –ö–û–î–ï\n');
  console.log('================================================================================\n');

  // –ü–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
  const fieldsToCheck = [
    // –ü–æ–ª—è-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–ø—É—Å—Ç—ã–µ)
    { field: 'uni_farming_balance', expectedEmpty: true },
    { field: 'wallet', expectedEmpty: true },
    
    // –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è
    { field: 'balance_uni', duplicate: 'uni_farming_balance' },
    { field: 'balance_ton', duplicate: 'ton_farming_balance' },
    { field: 'ton_farming_balance', duplicate: 'balance_ton' },
    { field: 'uni_deposit_amount', duplicate: 'uni_farming_deposit' },
    { field: 'uni_farming_deposit', duplicate: 'uni_deposit_amount' },
    { field: 'ton_boost_package', duplicate: 'ton_boost_package_id' },
    { field: 'ton_boost_package_id', duplicate: 'ton_boost_package' },
    { field: 'ton_farming_rate', duplicate: 'ton_boost_rate' },
    { field: 'ton_boost_rate', duplicate: 'ton_farming_rate' },
    { field: 'ton_wallet_address', duplicate: 'wallet' }
  ];

  const results: FieldUsage[] = [];

  for (const fieldInfo of fieldsToCheck) {
    console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª–µ: ${fieldInfo.field}...`);
    
    try {
      // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ TypeScript/JavaScript —Ñ–∞–π–ª–∞—Ö
      const { stdout } = await execAsync(
        `grep -r "${fieldInfo.field}" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | grep -v node_modules | grep -v ".git" | grep -v "scripts/check-field-usage" | grep -v "scripts/analyze-"`,
        { maxBuffer: 1024 * 1024 * 10 } // 10MB buffer
      );

      const lines = stdout.split('\n').filter(line => line.trim());
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏—Å–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
      const validUsages = lines.filter(line => {
        const content = line.split(':').slice(1).join(':');
        return !content.includes('//') || content.indexOf('//') > content.indexOf(fieldInfo.field);
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
      const files = [...new Set(validUsages.map(line => {
        const filePath = line.split(':')[0];
        return filePath.replace('./', '');
      }))];

      results.push({
        field: fieldInfo.field,
        usageCount: validUsages.length,
        locations: files.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
        canRemove: (fieldInfo.expectedEmpty === true) && validUsages.length === 0,
        recommendation: ''
      });

    } catch (error: any) {
      // –ï—Å–ª–∏ grep –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      if (error.code === 1) {
        results.push({
          field: fieldInfo.field,
          usageCount: 0,
          locations: [],
          canRemove: fieldInfo.expectedEmpty === true,
          recommendation: ''
        });
      } else {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${fieldInfo.field}:`, error.message);
      }
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  results.forEach(result => {
    if (result.usageCount === 0) {
      result.recommendation = 'üóëÔ∏è –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ';
    } else if (result.usageCount < 5) {
      result.recommendation = '‚ö†Ô∏è –ú–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å';
    } else {
      result.recommendation = '‚ùå –ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è';
    }
  });

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\n\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:\n');
  console.log('================================================================================\n');

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  console.log('üóëÔ∏è –ü–£–°–¢–´–ï –ü–û–õ–Ø (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ):\n');
  results
    .filter(r => ['uni_farming_balance', 'wallet'].includes(r.field))
    .forEach(result => {
      console.log(`üìå ${result.field}`);
      console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥–µ: ${result.usageCount}`);
      if (result.locations.length > 0) {
        console.log(`   –§–∞–π–ª—ã: ${result.locations.join(', ')}`);
      }
      console.log(`   ${result.recommendation}\n`);
    });

  console.log('\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ü–û–õ–Ø:\n');
  const duplicatePairs = [
    ['balance_uni', 'uni_farming_balance'],
    ['balance_ton', 'ton_farming_balance'],
    ['uni_deposit_amount', 'uni_farming_deposit'],
    ['ton_boost_package', 'ton_boost_package_id'],
    ['ton_farming_rate', 'ton_boost_rate'],
    ['wallet', 'ton_wallet_address']
  ];

  duplicatePairs.forEach(([field1, field2]) => {
    const result1 = results.find(r => r.field === field1);
    const result2 = results.find(r => r.field === field2);
    
    if (result1 && result2) {
      console.log(`üìå ${field1} vs ${field2}`);
      console.log(`   ${field1}: ${result1.usageCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
      console.log(`   ${field2}: ${result2.usageCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
      
      if (result1.usageCount === 0 && result2.usageCount > 0) {
        console.log(`   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–¥–∞–ª–∏—Ç—å ${field1}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${field2}`);
      } else if (result2.usageCount === 0 && result1.usageCount > 0) {
        console.log(`   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–¥–∞–ª–∏—Ç—å ${field2}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${field1}`);
      } else if (result1.usageCount > 0 && result2.usageCount > 0) {
        console.log(`   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–±–∞ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è`);
      } else {
        console.log(`   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–±–∞ –ø–æ–ª—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–±–∞`);
      }
      console.log();
    }
  });

  // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:\n');
  console.log('================================================================================\n');

  console.log('1Ô∏è‚É£ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –ø—É—Å—Ç—ã–µ):\n');
  results
    .filter(r => r.usageCount === 0 && ['uni_farming_balance', 'wallet'].includes(r.field))
    .forEach(r => console.log(`   - ${r.field}`));

  console.log('\n2Ô∏è‚É£ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–¢–¨ –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±–∞ –ø–æ–ª—è):\n');
  duplicatePairs
    .filter(([f1, f2]) => {
      const r1 = results.find(r => r.field === f1);
      const r2 = results.find(r => r.field === f2);
      return r1 && r2 && r1.usageCount > 0 && r2.usageCount > 0;
    })
    .forEach(([f1, f2]) => console.log(`   - ${f1} ‚Üê ‚Üí ${f2}`));

  console.log('\n3Ô∏è‚É£ –ó–ê–ú–ï–ù–ò–¢–¨ –∏ —É–¥–∞–ª–∏—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ –ø–∞—Ä—ã):\n');
  duplicatePairs.forEach(([f1, f2]) => {
    const r1 = results.find(r => r.field === f1);
    const r2 = results.find(r => r.field === f2);
    if (r1 && r2) {
      if (r1.usageCount === 0 && r2.usageCount > 0) {
        console.log(`   - –£–¥–∞–ª–∏—Ç—å ${f1} ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${f2}`);
      } else if (r2.usageCount === 0 && r1.usageCount > 0) {
        console.log(`   - –£–¥–∞–ª–∏—Ç—å ${f2} ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${f1}`);
      }
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  const detailedReport = {
    timestamp: new Date().toISOString(),
    fieldsAnalyzed: results.length,
    results: results,
    recommendations: {
      immediateRemoval: results.filter(r => r.usageCount === 0 && ['uni_farming_balance', 'wallet'].includes(r.field)).map(r => r.field),
      requiresSynchronization: duplicatePairs.filter(([f1, f2]) => {
        const r1 = results.find(r => r.field === f1);
        const r2 = results.find(r => r.field === f2);
        return r1 && r2 && r1.usageCount > 0 && r2.usageCount > 0;
      }),
      canReplace: duplicatePairs.filter(([f1, f2]) => {
        const r1 = results.find(r => r.field === f1);
        const r2 = results.find(r => r.field === f2);
        return r1 && r2 && ((r1.usageCount === 0 && r2.usageCount > 0) || (r2.usageCount === 0 && r1.usageCount > 0));
      })
    }
  };

  await fs.promises.writeFile(
    'FIELD_USAGE_ANALYSIS.json',
    JSON.stringify(detailedReport, null, 2)
  );

  console.log('\n\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FIELD_USAGE_ANALYSIS.json');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
checkFieldUsageInCode().then(() => {
  process.exit(0);
}).catch(err => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});