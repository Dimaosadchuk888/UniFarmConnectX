import { supabase } from '../core/supabase.js';
import { glob } from 'glob';
import fs from 'fs/promises';

async function auditSystem() {
  console.log('üèÅ –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –ú–ò–ì–†–ê–¶–ò–ò');
  console.log('='.repeat(60));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}`);
  console.log('\n');
  
  // 1. –ê–£–î–ò–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•
  console.log('1Ô∏è‚É£ –ê–£–î–ò–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('-'.repeat(40));
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
  const { data: userData, error: userError } = await supabase
    .from('users')
    .select('*')
    .limit(1);
  
  if (userError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', userError.message);
    return;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
  const userColumns = userData && userData.length > 0 ? Object.keys(userData[0]) : [];
  console.log(`‚úÖ –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${userColumns.length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
  const deletedFields = ['uni_farming_deposit', 'ton_boost_package_id', 'wallet'];
  const stillExist = deletedFields.filter(field => userColumns.includes(field));
  
  if (stillExist.length > 0) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: ${stillExist.join(', ')}`);
  } else {
    console.log('‚úÖ –í—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
  const primaryFields = ['uni_deposit_amount', 'ton_boost_package', 'ton_wallet_address'];
  const missingFields = primaryFields.filter(field => !userColumns.includes(field));
  
  if (missingFields.length > 0) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
  } else {
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }
  
  // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  console.log('\nüìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
  const relevantFields = userColumns.filter(col => 
    col.includes('uni_') || 
    col.includes('ton_') || 
    col.includes('wallet') ||
    col.includes('boost')
  );
  relevantFields.forEach(field => console.log(`   - ${field}`));
  
  // 2. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•');
  console.log('-'.repeat(40));
  
  const { data: stats } = await supabase
    .from('users')
    .select('id, uni_deposit_amount, ton_boost_package, ton_wallet_address')
    .not('uni_deposit_amount', 'is', null)
    .or('ton_boost_package.gt.0,ton_wallet_address.not.is.null');
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${stats?.length || 0}`);
  console.log(`   - –° UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${stats?.filter(u => u.uni_deposit_amount > 0).length || 0}`);
  console.log(`   - –° TON boost: ${stats?.filter(u => u.ton_boost_package > 0).length || 0}`);
  console.log(`   - –° TON –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${stats?.filter(u => u.ton_wallet_address).length || 0}`);
  
  // 3. –ê–£–î–ò–¢ –ö–û–î–ê
  console.log('\n3Ô∏è‚É£ –ê–£–î–ò–¢ –ö–û–î–ê');
  console.log('-'.repeat(40));
  
  const files = await glob([
    'client/**/*.{ts,tsx}',
    'server/**/*.{ts,js}',
    'modules/**/*.{ts,js}',
    'shared/**/*.{ts,js}'
  ]);
  
  console.log(`‚úÖ –§–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${files.length}`);
  
  let filesWithOldFields: string[] = [];
  let oldFieldUsage = {
    uni_farming_deposit: 0,
    ton_boost_package_id: 0,
    wallet: 0
  };
  
  for (const file of files) {
    const content = await fs.readFile(file, 'utf-8');
    let hasOldField = false;
    
    if (content.includes('uni_farming_deposit')) {
      oldFieldUsage.uni_farming_deposit++;
      hasOldField = true;
    }
    if (content.includes('ton_boost_package_id')) {
      oldFieldUsage.ton_boost_package_id++;
      hasOldField = true;
    }
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è wallet
    if (content.match(/[^\w]wallet[^\w]/)) {
      // –ò—Å–∫–ª—é—á–∞–µ–º ton_wallet_address
      if (!content.match(/ton_wallet_address/)) {
        const walletMatches = content.match(/[^\w]wallet[^\w]/g);
        if (walletMatches && walletMatches.length > 0) {
          oldFieldUsage.wallet++;
          hasOldField = true;
        }
      }
    }
    
    if (hasOldField) {
      filesWithOldFields.push(file);
    }
  }
  
  if (filesWithOldFields.length > 0) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ ${filesWithOldFields.length} —Ñ–∞–π–ª–æ–≤ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:`);
    console.log('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:');
    Object.entries(oldFieldUsage).forEach(([field, count]) => {
      if (count > 0) {
        console.log(`   - ${field}: ${count} —Ä–∞–∑`);
      }
    });
    console.log('\n   –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:');
    filesWithOldFields.slice(0, 10).forEach(file => console.log(`   - ${file}`));
    if (filesWithOldFields.length > 10) {
      console.log(`   ... –∏ –µ—â–µ ${filesWithOldFields.length - 10} —Ñ–∞–π–ª–æ–≤`);
    }
  } else {
    console.log('‚úÖ –ö–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è!');
  }
  
  // 4. –ü–†–û–í–ï–†–ö–ê VIEWS
  console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê VIEWS');
  console.log('-'.repeat(40));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å views —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ select –∑–∞–ø—Ä–æ—Å—ã
  const viewsToCheck = ['uni_farming_data', 'ton_farming_data', 'referrals', 'farming_status_view'];
  
  for (const viewName of viewsToCheck) {
    try {
      const { data, error } = await supabase
        .from(viewName)
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå View ${viewName}: –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (${error.message})`);
      } else {
        console.log(`‚úÖ View ${viewName}: —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      }
    } catch (e) {
      console.log(`‚ùå View ${viewName}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  }
  
  // 5. –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°
  console.log('\n' + '='.repeat(60));
  console.log('üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò:');
  console.log('-'.repeat(40));
  
  const issues: string[] = [];
  if (stillExist.length > 0) issues.push('–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è –Ω–µ —É–¥–∞–ª–µ–Ω—ã');
  if (missingFields.length > 0) issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è');
  if (filesWithOldFields.length > 0) issues.push('–ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è');
  
  if (issues.length === 0) {
    console.log('‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–µ–π');
    console.log('‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π');
    console.log('‚úÖ Views —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
  } else {
    console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    issues.forEach(issue => console.log(`   - ${issue}`));
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    database: {
      columnsFound: userColumns.length,
      deletedFieldsStillExist: stillExist,
      missingPrimaryFields: missingFields,
      relevantColumns: relevantFields
    },
    code: {
      totalFilesChecked: files.length,
      filesWithOldFields: filesWithOldFields.length,
      oldFieldUsage
    },
    status: issues.length === 0 ? 'SUCCESS' : 'FAILED',
    issues
  };
  
  await fs.writeFile(
    'SYSTEM_AUDIT_AFTER_MIGRATION.json',
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SYSTEM_AUDIT_AFTER_MIGRATION.json');
}

auditSystem().catch(console.error);