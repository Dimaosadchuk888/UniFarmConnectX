/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–Ω–µ—Å–µ–Ω—ã
 */

import { supabase } from '../core/supabaseClient';

interface OptimizationCheck {
  phase: string;
  item: string;
  current_state: string;
  action_needed: string;
  impact: 'low' | 'medium' | 'high';
}

async function checkDatabaseBeforeOptimization() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π UniFarm');
  console.log('=' .repeat(60));
  
  const checks: OptimizationCheck[] = [];
  
  // –§–∞–∑–∞ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log('\nüìã –§–ê–ó–ê 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è last_active
  try {
    const { data: sampleUser } = await supabase
      .from('users')
      .select('id')
      .limit(1)
      .single();
      
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å last_active
    const { error: lastActiveError } = await supabase
      .from('users')
      .select('last_active')
      .eq('id', sampleUser.id)
      .single();
      
    if (!lastActiveError) {
      checks.push({
        phase: '–§–∞–∑–∞ 1',
        item: 'users.last_active',
        current_state: '–ü–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î',
        action_needed: '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ)',
        impact: 'low'
      });
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ last_active:', error);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–µ–π referrer
  try {
    const { data: referrerData } = await supabase
      .from('users')
      .select('referred_by')
      .not('referred_by', 'is', null)
      .limit(5);
      
    const referredByCount = referrerData?.length || 0;
    
    checks.push({
      phase: '–§–∞–∑–∞ 1',
      item: 'referred_by vs referrer_id',
      current_state: `referred_by –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (${referredByCount} –∑–∞–ø–∏—Å–µ–π)`,
      action_needed: '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ referrer_id –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ',
      impact: 'medium'
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ referrer –ø–æ–ª–µ–π:', error);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–µ–π farming deposit
  try {
    const { data: depositData } = await supabase
      .from('users')
      .select('uni_deposit_amount')
      .not('uni_deposit_amount', 'is', null)
      .gt('uni_deposit_amount', 0)
      .limit(5);
      
    const depositCount = depositData?.length || 0;
    
    checks.push({
      phase: '–§–∞–∑–∞ 1',
      item: 'uni_deposit_amount vs uni_farming_deposit',
      current_state: `uni_deposit_amount –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (${depositCount} –∑–∞–ø–∏—Å–µ–π)`,
      action_needed: '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ uni_farming_deposit –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ',
      impact: 'medium'
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ deposit –ø–æ–ª–µ–π:', error);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  try {
    const { data: transactionTypes } = await supabase
      .from('transactions')
      .select('type')
      .limit(1000);
      
    const uniqueTypes = [...new Set(transactionTypes?.map(t => t.type) || [])];
    const missingTypes = ['FARMING_DEPOSIT', 'BOOST_PURCHASE', 'DAILY_BONUS', 'MISSION_REWARD', 'BOOST_REWARD'];
    const actuallyMissing = missingTypes.filter(t => !uniqueTypes.includes(t));
    
    checks.push({
      phase: '–§–∞–∑–∞ 1',
      item: '–¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      current_state: `–ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: ${uniqueTypes.join(', ')}`,
      action_needed: `–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: ${actuallyMissing.join(', ')}`,
      impact: 'high'
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
  }
  
  // –§–∞–∑–∞ 2: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
  console.log('\nüìã –§–ê–ó–ê 2: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n');
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π daily bonus
  try {
    const { data: dailyBonusData } = await supabase
      .from('users')
      .select('id')
      .not('checkin_last_date', 'is', null)
      .limit(5);
      
    const dailyBonusCount = dailyBonusData?.length || 0;
    
    checks.push({
      phase: '–§–∞–∑–∞ 2',
      item: 'checkin_last_date, checkin_streak',
      current_state: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É ${dailyBonusCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      action_needed: '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—è',
      impact: 'low'
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ daily bonus –ø–æ–ª–µ–π:', error);
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü
  const emptyTables = [
    'user_sessions',
    'referrals', 
    'farming_sessions',
    'boost_purchases',
    'user_missions',
    'airdrops',
    'daily_bonus_logs'
  ];
  
  for (const table of emptyTables) {
    try {
      const { count } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
        
      checks.push({
        phase: '–§–∞–∑–∞ 2',
        item: `–¢–∞–±–ª–∏—Ü–∞ ${table}`,
        current_state: `${count || 0} –∑–∞–ø–∏—Å–µ–π`,
        action_needed: count === 0 ? '–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ DEPRECATED –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å' : '–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å',
        impact: 'low'
      });
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error);
    }
  }
  
  // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è metadata
  try {
    const { data: metadataStats } = await supabase
      .from('transactions')
      .select('metadata')
      .not('metadata', 'is', null)
      .limit(100);
      
    const { count: totalCount } = await supabase
      .from('transactions')
      .select('*', { count: 'exact', head: true });
      
    const metadataUsage = metadataStats ? (metadataStats.length / 100 * 100).toFixed(1) : '0';
    
    checks.push({
      phase: '–§–∞–∑–∞ 2',
      item: 'transactions.metadata',
      current_state: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ~${metadataUsage}% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
      action_needed: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø–æ–ª—é',
      impact: 'low'
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ metadata:', error);
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateOptimizationReport(checks);
}

function generateOptimizationReport(checks: OptimizationCheck[]) {
  console.log('\nüìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
  console.log('=' .repeat(60));
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
  const phase1 = checks.filter(c => c.phase === '–§–∞–∑–∞ 1');
  const phase2 = checks.filter(c => c.phase === '–§–∞–∑–∞ 2');
  
  console.log('\nüî¥ –§–∞–∑–∞ 1 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  console.log('-'.repeat(60));
  phase1.forEach(check => {
    const impactIcon = check.impact === 'high' ? 'üî¥' : check.impact === 'medium' ? 'üü°' : 'üü¢';
    console.log(`${impactIcon} ${check.item}`);
    console.log(`   –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${check.current_state}`);
    console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è: ${check.action_needed}`);
    console.log();
  });
  
  console.log('\nüü° –§–∞–∑–∞ 2 - –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:');
  console.log('-'.repeat(60));
  phase2.forEach(check => {
    const impactIcon = check.impact === 'high' ? 'üî¥' : check.impact === 'medium' ? 'üü°' : 'üü¢';
    console.log(`${impactIcon} ${check.item}`);
    console.log(`   –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${check.current_state}`);
    console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è: ${check.action_needed}`);
    console.log();
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('-'.repeat(60));
  console.log('1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–∞–∑—ã 1 (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö');
  console.log('3. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –±–ª–æ–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
  console.log('4. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const report = {
    timestamp: new Date().toISOString(),
    checks,
    summary: {
      total_checks: checks.length,
      high_impact: checks.filter(c => c.impact === 'high').length,
      medium_impact: checks.filter(c => c.impact === 'medium').length,
      low_impact: checks.filter(c => c.impact === 'low').length
    }
  };
  
  const fs = require('fs');
  const reportPath = 'docs/db_optimization_pre_check.json';
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDatabaseBeforeOptimization().catch(console.error);