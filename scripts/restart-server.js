import { spawn } from 'child_process';
import { execSync } from 'child_process';

console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ UniFarm...');

// –ù–∞–π—Ç–∏ PID –ø—Ä–æ—Ü–µ—Å—Å–∞
try {
  const pids = execSync("ps aux | grep 'tsx server/index.ts' | grep -v grep | awk '{print $2}'")
    .toString()
    .split('\n')
    .filter(pid => pid);
    
  if (pids.length > 0) {
    console.log('üìç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã:', pids);
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
    pids.forEach(pid => {
      if (pid) {
        try {
          process.kill(parseInt(pid), 'SIGTERM');
          console.log(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
        } catch (e) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
        }
      }
    });
    
    // –ü–æ–¥–æ–∂–¥–∞—Ç—å
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 3000));
  }
} catch (e) {
  console.log('‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
const server = spawn('npm', ['start'], {
  cwd: '/home/runner/workspace',
  stdio: 'inherit',
  detached: true
});

server.unref();

console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
console.log('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...');