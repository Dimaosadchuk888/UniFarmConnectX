/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000/api/v2';
const JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4ODgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE5MzQ5MjIsImV4cCI6MTc1MjUzOTcyMn0.TfQyKEhxOr3lGBrJCfCKlDzQ3zUjNNpGWbZaJgjtFnw';

async function testEndpoint(path, description) {
  try {
    const response = await fetch(`${BASE_URL}${path}`, {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    const text = await response.text();
    let data;
    try {
      data = JSON.parse(text);
    } catch {
      data = text;
    }
    
    return {
      path,
      description,
      status: response.status,
      success: response.ok,
      data,
      error: response.ok ? null : `${response.status} ${response.statusText}`
    };
  } catch (error) {
    return {
      path,
      description,
      status: 0,
      success: false,
      data: null,
      error: error.message
    };
  }
}

async function checkDatabaseStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API...\n');
  
  const endpoints = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    { path: '/users/profile', desc: '–¢–∞–±–ª–∏—Ü–∞ users' },
    { path: '/wallet/balance', desc: '–î–æ—Å—Ç—É–ø –∫ –±–∞–ª–∞–Ω—Å–∞–º' },
    { path: '/farming/status', desc: '–¢–∞–±–ª–∏—Ü–∞ farming_sessions' },
    { path: '/referrals/stats', desc: '–¢–∞–±–ª–∏—Ü–∞ referrals' },
    { path: '/transactions/history', desc: '–¢–∞–±–ª–∏—Ü–∞ transactions' },
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
    { path: '/boost/farming-status', desc: '–¢–∞–±–ª–∏—Ü–∞ boost_purchases' },
    { path: '/missions/list', desc: '–¢–∞–±–ª–∏—Ü–∞ missions' },
    { path: '/daily-bonus/status', desc: '–°–∏—Å—Ç–µ–º–∞ daily bonus' },
    { path: '/airdrop/status', desc: '–¢–∞–±–ª–∏—Ü–∞ airdrops' }
  ];
  
  const results = [];
  
  for (const endpoint of endpoints) {
    const result = await testEndpoint(endpoint.path, endpoint.desc);
    results.push(result);
    
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${endpoint.desc}: ${result.success ? 'OK' : result.error}`);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  
  const working = results.filter(r => r.success).length;
  const total = results.length;
  const percentage = Math.round((working / total) * 100);
  
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏: ${working}/${total} (${percentage}%)`);
  console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏: ${total - working}`);
  
  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
  const failed = results.filter(r => !r.success);
  if (failed.length > 0) {
    console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    failed.forEach(f => {
      console.log(`- ${f.description}: ${f.error}`);
      if (f.data && typeof f.data === 'object' && f.data.error) {
        console.log(`  –î–µ—Ç–∞–ª–∏: ${f.data.error}`);
      }
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  if (percentage < 70) {
    console.log('- üö® –ö–†–ò–¢–ò–ß–ù–û: –ú–µ–Ω–µ–µ 70% –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('- üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ Supabase');
    console.log('- üìÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL-—Å–∫—Ä–∏–ø—Ç: docs/database_fix_script.sql');
  } else if (percentage < 90) {
    console.log('- ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ');
    console.log('- üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
  } else {
    console.log('- ‚úÖ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
    console.log('- üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∫–æ–¥–æ–º');
  }
  
  return {
    timestamp: new Date().toISOString(),
    total_endpoints: total,
    working_endpoints: working,
    success_rate: percentage,
    failed_endpoints: failed.map(f => ({
      path: f.path,
      description: f.description,
      error: f.error
    })),
    recommendations: percentage < 70 ? 'critical' : percentage < 90 ? 'warning' : 'good'
  };
}

// –ó–∞–ø—É—Å–∫
checkDatabaseStatus()
  .then(report => {
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ${report.success_rate}%`);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  });