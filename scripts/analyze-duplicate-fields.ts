import { supabase } from '../core/supabase.js';

async function analyzeDuplicateFields() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ü–û–õ–ï–ô –í –¢–ê–ë–õ–ò–¶–ï USERS');
  console.log('='.repeat(80));
  console.log('');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data: users } = await supabase
      .from('users')
      .select('*')
      .limit(10);

    if (!users || users.length === 0) {
      console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è
    const duplicates = [
      {
        group: 'UNI Deposit',
        fields: ['uni_deposit_amount', 'uni_farming_deposit'],
        description: '–°—É–º–º–∞ UNI –¥–µ–ø–æ–∑–∏—Ç–∞'
      },
      {
        group: 'UNI Balance',
        fields: ['balance_uni', 'uni_farming_balance'],
        description: 'UNI –±–∞–ª–∞–Ω—Å/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞'
      },
      {
        group: 'TON Boost Package',
        fields: ['ton_boost_package', 'ton_boost_package_id'],
        description: 'ID –ø–∞–∫–µ—Ç–∞ TON Boost'
      },
      {
        group: 'Wallet Address',
        fields: ['wallet', 'ton_wallet_address'],
        description: 'TON –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞'
      }
    ];

    console.log('üìä –ù–ê–ô–î–ï–ù–ù–´–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ü–û–õ–Ø:\n');

    for (const dup of duplicates) {
      console.log(`${dup.group}: ${dup.description}`);
      console.log(`–ü–æ–ª—è: ${dup.fields.join(' vs ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
      let hasDifferences = false;
      let diffCount = 0;
      
      for (const user of users) {
        const values = dup.fields.map(f => user[f]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–∏–≥–Ω–æ—Ä–∏—Ä—É—è null)
        const nonNullValues = values.filter(v => v !== null && v !== undefined);
        if (nonNullValues.length > 1) {
          const firstValue = String(nonNullValues[0]);
          const allSame = nonNullValues.every(v => String(v) === firstValue);
          
          if (!allSame) {
            hasDifferences = true;
            diffCount++;
          }
        }
      }
      
      if (hasDifferences) {
        console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ ${diffCount} –∑–∞–ø–∏—Å—è—Ö –∏–∑ ${users.length}`);
      } else {
        console.log(`‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö`);
      }
      console.log('');
    }

    // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
    console.log('\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n');

    console.log('1. –ë–ï–ó–û–ü–ê–°–ù–´–ï –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø (–¥—É–±–ª–∏–∫–∞—Ç—ã —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏):');
    console.log('   - wallet (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ton_wallet_address)');
    console.log('   - –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —ç—Ç–∏ –ø–æ–ª—è');

    console.log('\n2. –¢–†–ï–ë–£–Æ–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•:');
    console.log('   - uni_deposit_amount vs uni_farming_deposit');
    console.log('   - ton_boost_package vs ton_boost_package_id (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã!)');

    console.log('\n3. –†–ê–ó–ù–û–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï (–Ω–µ —É–¥–∞–ª—è—Ç—å):');
    console.log('   - balance_uni (–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å) vs uni_farming_balance (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞)');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NULL –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('\n\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê NULL –ó–ù–ê–ß–ï–ù–ò–ô:\n');

    const allFields = [...new Set(duplicates.flatMap(d => d.fields))];
    
    for (const field of allFields) {
      const { count: totalCount } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true });

      const { count: nonNullCount } = await supabase
        .from('users')
        .select('*', { count: 'exact', head: true })
        .not(field, 'is', null);

      const nullCount = (totalCount || 0) - (nonNullCount || 0);
      const nullPercent = totalCount ? (nullCount / totalCount * 100).toFixed(1) : 0;
      
      console.log(`${field}: ${nonNullCount}/${totalCount} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (${nullPercent}% NULL)`);
    }

    console.log('\n\n‚ö° –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n');
    console.log('–§–∞–∑–∞ 1 (—Å–µ–π—á–∞—Å): ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ - Views –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
    console.log('–§–∞–∑–∞ 2 (—Ç–µ–∫—É—â–∞—è): –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞');
    console.log('–§–∞–∑–∞ 3 (–±—É–¥—É—â–µ–µ): –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–ª—è...\n');
analyzeDuplicateFields();