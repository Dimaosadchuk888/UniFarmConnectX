import { supabase } from '../core/supabase.js';

async function checkSupabaseConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('SUPABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.SUPABASE_URL);
    console.log('SUPABASE_SERVICE_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.SUPABASE_SERVICE_KEY);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { count, error } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:', count);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 74...');
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton')
      .eq('id', 74)
      .single();
      
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑ –º–æ–¥—É–ª—è
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ UserRepository...');
    const { SupabaseUserRepository } = await import('../modules/user/service.js');
    const userRepository = new SupabaseUserRepository();
    
    const repoUser = await userRepository.getUserById(74);
    if (repoUser) {
      console.log('‚úÖ UserRepository.getUserById(74) —É—Å–ø–µ—à–Ω–æ:', {
        id: repoUser.id,
        username: repoUser.username,
        balance_uni: repoUser.balance_uni,
        balance_ton: repoUser.balance_ton
      });
    } else {
      console.log('‚ùå UserRepository.getUserById(74) –≤–µ—Ä–Ω—É–ª null');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkSupabaseConnection();