import fetch from 'node-fetch';

const BASE_URL = 'https://uni-farm-connect-unifarm01010101.replit.app';

async function testTonConnect() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TON Connect –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:');
  try {
    const manifestUrl = `${BASE_URL}/tonconnect-manifest.json`;
    const response = await fetch(manifestUrl);
    console.log(`   URL: ${manifestUrl}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);
    console.log(`   CORS: ${response.headers.get('access-control-allow-origin') || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    
    if (response.ok) {
      const manifest = await response.json();
      console.log(`   ‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:`);
      console.log(JSON.stringify(manifest, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
      if (manifest.url !== BASE_URL) {
        console.log(`   ‚ö†Ô∏è  URL –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ (${manifest.url}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º (${BASE_URL})`);
      } else {
        console.log(`   ‚úÖ URL –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`);
      }
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º .well-known –ø—É—Ç—å
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ .well-known/tonconnect-manifest.json:');
  try {
    const wellKnownUrl = `${BASE_URL}/.well-known/tonconnect-manifest.json`;
    const response = await fetch(wellKnownUrl);
    console.log(`   URL: ${wellKnownUrl}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log(`   ‚úÖ .well-known –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ö†Ô∏è  .well-known –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º favicon
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ favicon (—É–∫–∞–∑–∞–Ω –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ):');
  try {
    const faviconUrl = `${BASE_URL}/assets/favicon.ico`;
    const response = await fetch(faviconUrl, { method: 'HEAD' });
    console.log(`   URL: ${faviconUrl}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log(`   ‚úÖ Favicon –¥–æ—Å—Ç—É–ø–µ–Ω`);
    } else {
      console.log(`   ‚ùå Favicon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  console.log('\nüìä –†–µ–∑—é–º–µ:');
  console.log('–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, TON Connect –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  console.log('–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.');
}

testTonConnect().catch(console.error);