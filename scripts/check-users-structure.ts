import { supabase } from '../core/supabase.js';

async function checkUsersStructure() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ USERS');
  console.log('='.repeat(80));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .limit(1);

    if (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      return;
    }

    if (data && data.length > 0) {
      console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
      console.log('-'.repeat(40));
      
      const columns = Object.keys(data[0]);
      columns.forEach(col => {
        const value = data[0][col];
        const type = value === null ? 'null' : typeof value;
        console.log(`- ${col} (${type})`);
      });
      
      console.log('\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:');
      console.log(`- updated_at: ${columns.includes('updated_at') ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
      console.log(`- created_at: ${columns.includes('created_at') ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
      console.log(`- uni_farming_start_timestamp: ${columns.includes('uni_farming_start_timestamp') ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkUsersStructure();