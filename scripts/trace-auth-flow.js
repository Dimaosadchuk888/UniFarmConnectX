import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function traceAuthFlow() {
  console.log('üîç –ó–ê–î–ê–ß–ê 4: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('='.repeat(50));
  
  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MTc4MDUyMTkxOF9lMXY2MmQiLCJpYXQiOjE3NTE4Njk5NzYsImV4cCI6MTc1MjQ3NDc3Nn0.3OX9TDF5XpRW8PUHeozdIoBRIl-UWvjNJWKHbn56Fso';
  
  // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
  console.log('üìã –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API...');
  try {
    const response = await fetch('http://localhost:3000/api/v2/users/profile', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log(`  –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`  –û—Ç–≤–µ—Ç:`, JSON.stringify(data, null, 2));
    
    if (response.status === 401) {
      console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º timing
      console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ timing (Race Condition)...');
      
      // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –Ω–∞–π—Ç–∏
      const testUserId = 88888850;
      console.log(`  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id=${testUserId}...`);
      
      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert({
          telegram_id: testUserId,
          username: 'race_condition_test',
          first_name: 'Test',
          ref_code: `REF_TEST_${Date.now()}`,
          balance_uni: '0',
          balance_ton: '0'
        })
        .select()
        .single();
        
      if (createError) {
        console.error('  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', createError.message);
      } else {
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=${newUser.id}`);
        
        // –°—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏
        console.log('  –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...');
        const { data: foundImmediately } = await supabase
          .from('users')
          .select('id')
          .eq('id', newUser.id)
          .single();
          
        console.log(`  –ù–∞–π–¥–µ–Ω —Å—Ä–∞–∑—É: ${foundImmediately ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        console.log('  –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const { data: foundAfterDelay } = await supabase
          .from('users')
          .select('id')
          .eq('id', newUser.id)
          .single();
          
        console.log(`  –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏: ${foundAfterDelay ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await supabase.from('users').delete().eq('id', newUser.id);
      }
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error.message);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  console.log(`  SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`  SUPABASE_KEY: ${process.env.SUPABASE_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`  JWT_SECRET: ${process.env.JWT_SECRET ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`  NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

traceAuthFlow();