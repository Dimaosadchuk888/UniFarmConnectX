#!/usr/bin/env tsx

/**
 * –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –°–ï–†–í–ï–†–ê
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —á–∏—Å—Ç—ã–π –∑–∞–ø—É—Å–∫
 */

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function emergencyRestart() {
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –°–ï–†–í–ï–†–ê –ù–ê–ß–ê–¢–ê');
    
    try {
        // 1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ Node –ø—Ä–æ—Ü–µ—Å—Å—ã
        console.log('üî• –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ Node –ø—Ä–æ—Ü–µ—Å—Å—ã...');
        try {
            await execAsync('pkill -9 -f "tsx server/index.ts"');
            await execAsync('pkill -9 -f "npm run dev"');
            await execAsync('pkill -9 -f "node.*tsx.*server"');
        } catch (e) {
            console.log('   (–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã)');
        }
        
        // 2. –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
        console.log('‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã
        try {
            const { stdout } = await execAsync('ps aux | grep -E "(tsx|npm).*server" | grep -v grep');
            if (stdout.trim()) {
                console.log('‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ—Ü–µ—Å—Å—ã:', stdout);
            } else {
                console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
            }
        } catch (e) {
            console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
        }
        
        // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä...');
        const serverProcess = exec('npm run dev', { cwd: process.cwd() });
        
        serverProcess.stdout?.on('data', (data) => {
            console.log('[SERVER]', data.toString().trim());
        });
        
        serverProcess.stderr?.on('data', (data) => {
            console.error('[SERVER ERROR]', data.toString().trim());
        });
        
        // 5. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        await new Promise(resolve => setTimeout(resolve, 10000));
        
        console.log('‚úÖ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ https://uni-farm-connect-unifarm01010101.replit.app/api/v2/telegram/webhook');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ:', error);
    }
}

emergencyRestart();