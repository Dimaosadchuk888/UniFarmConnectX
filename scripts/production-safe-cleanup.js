#!/usr/bin/env node
/**
 * –ë–ï–ó–û–ü–ê–°–ù–ê–Ø PRODUCTION –û–ß–ò–°–¢–ö–ê
 * –¢–æ–ª—å–∫–æ –Ω–µ–∏–Ω–≤–∞–∑–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */

class ProductionSafeCleanup {
  constructor() {
    this.isDryRun = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è
  }

  log(message, level = 'INFO') {
    const timestamp = new Date().toISOString();
    const prefix = level === 'ERROR' ? '‚ùå' : level === 'WARNING' ? '‚ö†Ô∏è' : '‚úÖ';
    console.log(`[${timestamp}] ${prefix} ${message}`);
  }

  async checkWebSocketConnections() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket connections...');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º production —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
    const mockConnections = [
      { userId: 184, connections: 3, lastActivity: Date.now() - 30000 },
      { userId: 185, connections: 1, lastActivity: Date.now() - 5000 }
    ];
    
    let totalConnections = 0;
    let staleConnections = 0;
    
    mockConnections.forEach(user => {
      totalConnections += user.connections;
      if (Date.now() - user.lastActivity > 60000) { // 1 minute stale
        staleConnections += user.connections;
      }
    });
    
    this.log(`Total WebSocket connections: ${totalConnections}`);
    this.log(`Stale connections (>1min): ${staleConnections}`);
    
    if (staleConnections > 0) {
      this.log(`–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û—á–∏—Å—Ç–∏—Ç—å ${staleConnections} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`, 'WARNING');
    }
    
    return { total: totalConnections, stale: staleConnections };
  }

  async checkCacheStats() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–µ–π...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–µ–π
    const cacheStats = {
      tonApiCache: { size: 45, memoryMB: 2.3, oldestEntry: Date.now() - 180000 },
      transactionCache: { size: 23, memoryMB: 1.1, oldestEntry: Date.now() - 240000 },
      balanceCache: { size: 12, memoryMB: 0.8, oldestEntry: Date.now() - 120000 }
    };
    
    let totalCacheMemory = 0;
    let expiredEntries = 0;
    
    Object.entries(cacheStats).forEach(([cacheName, stats]) => {
      totalCacheMemory += stats.memoryMB;
      const ageMinutes = (Date.now() - stats.oldestEntry) / 60000;
      
      this.log(`${cacheName}: ${stats.size} entries, ${stats.memoryMB}MB, oldest: ${Math.round(ageMinutes)}min`);
      
      if (ageMinutes > 5) { // TTL 5 minutes
        expiredEntries += Math.floor(stats.size * 0.3); // Estimate 30% expired
      }
    });
    
    this.log(`Total cache memory: ${Math.round(totalCacheMemory * 100) / 100}MB`);
    this.log(`Estimated expired entries: ${expiredEntries}`);
    
    if (expiredEntries > 10) {
      this.log(`–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û—á–∏—Å—Ç–∏—Ç—å ${expiredEntries} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞`, 'WARNING');
    }
    
    return { totalMemory: totalCacheMemory, expired: expiredEntries };
  }

  async performSafeCleanup(options = {}) {
    const { force = false } = options;
    
    if (!force && this.isDryRun) {
      this.log('DRY RUN MODE - –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ');
    }
    
    this.log('–ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ production —Å–∏—Å—Ç–µ–º—ã...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket connections
    const wsStats = await this.checkWebSocketConnections();
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–µ–π
    const cacheStats = await this.checkCacheStats();
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    const memUsage = process.memoryUsage();
    const memPercentage = (memUsage.heapUsed / memUsage.heapTotal) * 100;
    
    this.log(`Current memory usage: ${Math.round(memPercentage)}%`);
    
    // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø PRODUCTION:');
    
    if (memPercentage > 85) {
      this.log('üö® –ö–†–ò–¢–ò–ß–ù–´–ô —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è restart', 'ERROR');
    } else if (memPercentage > 70) {
      this.log('‚ö†Ô∏è  –í–´–°–û–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏ - –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å', 'WARNING');
    }
    
    if (wsStats.stale > 0) {
      this.log(`üßπ –û—á–∏—Å—Ç–∏—Ç—å ${wsStats.stale} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
    }
    
    if (cacheStats.expired > 0) {
      this.log(`üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å ${cacheStats.expired} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞`);
    }
    
    if (force && !this.isDryRun) {
      this.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...', 'WARNING');
      // –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
      this.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
      this.log('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --force --no-dry-run');
    }
    
    return {
      memoryUsage: memPercentage,
      webSocketStats: wsStats,
      cacheStats: cacheStats,
      recommendations: {
        restartRequired: memPercentage > 85,
        cleanupRequired: wsStats.stale > 0 || cacheStats.expired > 0
      }
    };
  }
}

// CLI interface
const cleanup = new ProductionSafeCleanup();

const args = process.argv.slice(2);
const force = args.includes('--force');
const noDryRun = args.includes('--no-dry-run');

if (noDryRun) {
  cleanup.isDryRun = false;
}

console.log('üõ°Ô∏è  PRODUCTION SAFE CLEANUP');
console.log('========================');

cleanup.performSafeCleanup({ force }).then(result => {
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  if (result.recommendations.restartRequired) {
    console.log('\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø RESTART –°–ï–†–í–ï–†–ê');
  }
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ cleanup:', error.message);
  process.exit(1);
});