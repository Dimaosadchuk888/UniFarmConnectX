#!/usr/bin/env tsx
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function verifyOptimization() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
  console.log('=' .repeat(50) + '\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON FARMING\n');
  
  const { data: users } = await supabase
    .from('users')
    .select('id, ton_farming_balance')
    .gt('ton_farming_balance', 0)
    .order('ton_farming_balance', { ascending: false });
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance');
  
  const tonMap = new Map();
  tonFarmingData?.forEach(t => {
    tonMap.set(parseInt(t.user_id), t.farming_balance || 0);
  });
  
  let syncedCount = 0;
  let notSyncedCount = 0;
  const notSynced = [];
  
  users?.forEach(user => {
    const tonBalance = tonMap.get(user.id);
    if (tonBalance !== undefined) {
      if (Math.abs(user.ton_farming_balance - tonBalance) < 0.01) {
        syncedCount++;
      } else {
        notSyncedCount++;
        notSynced.push({
          user_id: user.id,
          user_balance: user.ton_farming_balance,
          ton_balance: tonBalance,
          diff: user.ton_farming_balance - tonBalance
        });
      }
    }
  });
  
  console.log(`‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${syncedCount} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${notSyncedCount} –∑–∞–ø–∏—Å–µ–π`);
  
  if (notSynced.length > 0) {
    console.log('\n–ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:');
    notSynced.forEach(ns => {
      console.log(`  User ${ns.user_id}: ${ns.user_balance} vs ${ns.ton_balance} (—Ä–∞–∑–Ω–∏—Ü–∞: ${ns.diff})`);
    });
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ TON farming
  console.log('\nüìä 2. –¢–û–ü-10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û TON FARMING\n');
  
  const topUsers = users?.slice(0, 10);
  topUsers?.forEach((user, index) => {
    console.log(`${index + 1}. User ${user.id}: ${user.ton_farming_balance.toFixed(2)} TON`);
  });
  
  // 3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä 3. –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n');
  
  const { data: stats } = await supabase
    .from('users')
    .select('balance_uni, balance_ton, uni_farming_balance, ton_farming_balance');
  
  let totalUni = 0;
  let totalTon = 0;
  let totalUniFarming = 0;
  let totalTonFarming = 0;
  let activeUniFarmers = 0;
  let activeTonFarmers = 0;
  
  stats?.forEach(row => {
    totalUni += row.balance_uni || 0;
    totalTon += row.balance_ton || 0;
    totalUniFarming += row.uni_farming_balance || 0;
    totalTonFarming += row.ton_farming_balance || 0;
    
    if (row.uni_farming_balance > 0) activeUniFarmers++;
    if (row.ton_farming_balance > 0) activeTonFarmers++;
  });
  
  console.log(`–û–±—â–∏–π –±–∞–ª–∞–Ω—Å UNI: ${totalUni.toFixed(2)}`);
  console.log(`–û–±—â–∏–π –±–∞–ª–∞–Ω—Å TON: ${totalTon.toFixed(2)}`);
  console.log(`–û–±—â–∏–π UNI farming: ${totalUniFarming.toFixed(2)}`);
  console.log(`–û–±—â–∏–π TON farming: ${totalTonFarming.toFixed(2)}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–µ—Ä–º–µ—Ä–æ–≤: ${activeUniFarmers}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–µ—Ä–º–µ—Ä–æ–≤: ${activeTonFarmers}`);
  console.log(`\n–û–±—â–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: ${(totalUni + totalTon + totalUniFarming + totalTonFarming).toFixed(2)}`);
  
  // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n');
  console.log('1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è TON farming –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  console.log('2. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ scripts/generated_index_script.sql');
  console.log('3. –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç 8 –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —É—Å–∫–æ—Ä–∏—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –≤ 5-10 —Ä–∞–∑');
  console.log('4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤');
}

verifyOptimization().catch(console.error);