/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ID 25 - –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ TON Farming
 */

import { supabase } from '../core/supabase';

async function diagnoseUser25NewDeposits() {
  console.log('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 25 - –ù–û–í–´–ï –î–ï–ü–û–ó–ò–¢–´');
  console.log('=' .repeat(70));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã 1. –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 25:');
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 25)
      .single();
    
    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
      return;
    }
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 25:');
    console.log('- balance_ton:', user.balance_ton);
    console.log('- ton_boost_active:', user.ton_boost_active);
    console.log('- ton_boost_package:', user.ton_boost_package);
    console.log('- ton_farming_balance:', user.ton_farming_balance);
    console.log('- ton_farming_rate:', user.ton_farming_rate);
    console.log('- ton_farming_last_update:', user.ton_farming_last_update);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìã 2. –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞):');
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
    
    const { data: recentTransactions, error: transError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: false });
    
    if (transError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 —á–∞—Å–∞: ${recentTransactions?.length}`);
      recentTransactions?.forEach(t => {
        console.log(`\n- ${t.created_at}:`);
        console.log(`  –¢–∏–ø: ${t.type}`);
        console.log(`  –°—É–º–º–∞: ${t.amount} ${t.currency}`);
        console.log(`  –°—Ç–∞—Ç—É—Å: ${t.status}`);
        if (t.metadata) {
          console.log(`  Metadata:`, JSON.stringify(t.metadata, null, 2));
        }
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    console.log('\nüìã 3. –°–û–°–¢–û–Ø–ù–ò–ï ton_farming_data:');
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '25');
    
    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ton_farming_data:', farmingError);
    } else {
      if (farmingData && farmingData.length > 0) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ ton_farming_data:');
        const record = farmingData[0];
        console.log('- farming_balance:', record.farming_balance);
        console.log('- farming_rate:', record.farming_rate);
        console.log('- boost_active:', record.boost_active);
        console.log('- boost_package_id:', record.boost_package_id);
        console.log('- updated_at:', record.updated_at);
        console.log('- daily_income:', record.daily_income);
        console.log('- total_earned:', record.total_earned);
      } else {
        console.log('‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ò –í ton_farming_data!');
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìã 4. –ü–†–û–í–ï–†–ö–ê BOOST_PURCHASE –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const { data: boostPurchases } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${boostPurchases?.length || 0}`);
    boostPurchases?.forEach(t => {
      console.log(`\n- ${t.created_at}: ${t.amount} ${t.currency}`);
      if (t.metadata) {
        console.log(`  boost_package_id: ${t.metadata.boost_package_id}`);
        console.log(`  transaction_source: ${t.metadata.transaction_source}`);
      }
    });
    
    // 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
    console.log('\nüìã 5. –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:');
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ BOOST_PURCHASE
    const totalBoostPurchases = boostPurchases?.reduce((sum, t) => 
      sum + parseFloat(t.amount || 0), 0) || 0;
    
    console.log(`\nüí∞ –°—É–º–º–∞ –≤—Å–µ—Ö BOOST_PURCHASE: ${totalBoostPurchases} TON`);
    console.log(`üìä –ë–∞–ª–∞–Ω—Å –≤ users.ton_farming_balance: ${user.ton_farming_balance}`);
    console.log(`üìä –ë–∞–ª–∞–Ω—Å –≤ ton_farming_data: ${farmingData?.[0]?.farming_balance || '–ù–ï–¢ –ó–ê–ü–ò–°–ò'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
    const userFarmingBalance = parseFloat(user.ton_farming_balance || 0);
    const tonFarmingBalance = parseFloat(farmingData?.[0]?.farming_balance || 0);
    
    if (Math.abs(totalBoostPurchases - userFarmingBalance) > 0.001) {
      console.log('\n‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!');
      console.log(`–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ users.ton_farming_balance: ${totalBoostPurchases - userFarmingBalance} TON`);
    }
    
    if (Math.abs(totalBoostPurchases - tonFarmingBalance) > 0.001) {
      console.log('\n‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –° ton_farming_data!');
      console.log(`–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ ton_farming_data: ${totalBoostPurchases - tonFarmingBalance} TON`);
    }
    
    // 6. –î–ò–ê–ì–ù–û–ó
    console.log('\nüîç –î–ò–ê–ì–ù–û–ó:');
    
    if (!farmingData || farmingData.length === 0) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
      console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ TON Farming');
    } else if (Math.abs(totalBoostPurchases - tonFarmingBalance) > 0.001) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ë–∞–ª–∞–Ω—Å –≤ ton_farming_data –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫');
      console.log('   –ù–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –≤ farming_balance');
    } else if (!user.ton_boost_active) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: ton_boost_active = false');
      console.log('   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnoseUser25NewDeposits().then(() => {
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  process.exit(1);
});