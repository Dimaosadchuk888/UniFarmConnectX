#!/usr/bin/env tsx
/**
 * –ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as fs from 'fs';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function runSystemAudit() {
  console.log('üîç –ü–û–õ–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
  console.log('=' .repeat(60) + '\n');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n`);
  
  const auditResults = {
    timestamp: new Date().toISOString(),
    indexes: { status: 'unknown', message: '' },
    synchronization: { status: '', details: {} },
    performance: { tests: [] },
    dataIntegrity: { status: '', stats: {} },
    recommendations: []
  };
  
  // 1. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON FARMING
  console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò TON FARMING\n');
  
  const { data: users } = await supabase
    .from('users')
    .select('id, ton_farming_balance')
    .gt('ton_farming_balance', 0)
    .order('ton_farming_balance', { ascending: false });
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance');
  
  const tonMap = new Map();
  tonFarmingData?.forEach(t => {
    tonMap.set(parseInt(t.user_id), t.farming_balance || 0);
  });
  
  let syncedCount = 0;
  let notSyncedCount = 0;
  const discrepancies = [];
  
  users?.forEach(user => {
    const tonBalance = tonMap.get(user.id);
    if (tonBalance !== undefined) {
      const diff = Math.abs(user.ton_farming_balance - tonBalance);
      if (diff < 0.01) {
        syncedCount++;
      } else {
        notSyncedCount++;
        if (discrepancies.length < 5) {
          discrepancies.push({
            user_id: user.id,
            user_balance: user.ton_farming_balance,
            ton_balance: tonBalance,
            diff: user.ton_farming_balance - tonBalance
          });
        }
      }
    }
  });
  
  const totalWithTon = users?.length || 0;
  const syncPercentage = totalWithTon > 0 ? (syncedCount / totalWithTon * 100) : 0;
  
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON farming: ${totalWithTon}`);
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${syncedCount} (${syncPercentage.toFixed(1)}%)`);
  console.log(`‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${notSyncedCount}`);
  
  if (discrepancies.length > 0) {
    console.log('\n–ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π:');
    discrepancies.forEach(d => {
      console.log(`  User ${d.user_id}: users.ton_farming_balance=${d.user_balance} vs ton_farming_data.farming_balance=${d.ton_balance} (—Ä–∞–∑–Ω–∏—Ü–∞: ${d.diff.toFixed(2)})`);
    });
  }
  
  auditResults.synchronization = {
    status: syncPercentage === 100 ? '‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è' : 
            syncPercentage > 95 ? '‚ö° –ü–æ—á—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : 
            '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
    details: {
      total: totalWithTon,
      synced: syncedCount,
      notSynced: notSyncedCount,
      percentage: syncPercentage
    }
  };
  
  // 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
  console.log('\nüìä 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n');
  
  // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ telegram_id (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å idx_users_telegram_id)
  const start1 = Date.now();
  const { data: user1 } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', '184')
    .single();
  const time1 = Date.now() - start1;
  console.log(`–ü–æ–∏—Å–∫ –ø–æ telegram_id: ${time1}ms ${time1 < 10 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time1 < 50 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  
  // –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å idx_transactions_user_id__created_at_desc)
  const start2 = Date.now();
  const { data: transactions } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .order('created_at', { ascending: false })
    .limit(20);
  const time2 = Date.now() - start2;
  console.log(`–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (20 –∑–∞–ø–∏—Å–µ–π): ${time2}ms ${time2 < 20 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time2 < 100 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  
  // –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å idx_transactions_type)
  const start3 = Date.now();
  const { data: tonDeposits } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'TON_DEPOSIT')
    .limit(10);
  const time3 = Date.now() - start3;
  console.log(`–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${time3}ms ${time3 < 30 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time3 < 100 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  
  // –¢–µ—Å—Ç 4: –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ—Ä—ã (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å idx_users_uni_farming_active)
  const start4 = Date.now();
  const { data: activeFarmers } = await supabase
    .from('users')
    .select('*')
    .eq('uni_farming_active', true)
    .limit(10);
  const time4 = Date.now() - start4;
  console.log(`–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤: ${time4}ms ${time4 < 20 ? '‚úÖ –æ—Ç–ª–∏—á–Ω–æ' : time4 < 80 ? '‚ö° —Ö–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –º–µ–¥–ª–µ–Ω–Ω–æ'}`);
  
  const avgTime = (time1 + time2 + time3 + time4) / 4;
  
  auditResults.performance = {
    tests: [
      { name: 'telegram_id_lookup', time: time1 },
      { name: 'transaction_history', time: time2 },
      { name: 'transaction_type_filter', time: time3 },
      { name: 'active_farmers', time: time4 }
    ]
  };
  
  // 3. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•
  console.log('\nüìä 3. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•\n');
  
  const { count: userCount } = await supabase
    .from('users')
    .select('*', { count: 'exact', head: true });
  
  const { count: txCount } = await supabase
    .from('transactions')
    .select('*', { count: 'exact', head: true });
  
  const { data: stats } = await supabase
    .from('users')
    .select('balance_uni, balance_ton, uni_farming_balance, ton_farming_balance');
  
  let totalUni = 0;
  let totalTon = 0;
  let totalUniFarming = 0;
  let totalTonFarming = 0;
  let activeUniFarmers = 0;
  let activeTonFarmers = 0;
  
  stats?.forEach(row => {
    totalUni += row.balance_uni || 0;
    totalTon += row.balance_ton || 0;
    totalUniFarming += row.uni_farming_balance || 0;
    totalTonFarming += row.ton_farming_balance || 0;
    
    if (row.uni_farming_balance > 0) activeUniFarmers++;
    if (row.ton_farming_balance > 0) activeTonFarmers++;
  });
  
  const checksum = totalUni + totalTon + totalUniFarming + totalTonFarming;
  
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
  console.log(`–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txCount}`);
  console.log(`–û–±—â–∏–π –±–∞–ª–∞–Ω—Å UNI: ${totalUni.toFixed(2)}`);
  console.log(`–û–±—â–∏–π –±–∞–ª–∞–Ω—Å TON: ${totalTon.toFixed(2)}`);
  console.log(`–û–±—â–∏–π UNI farming: ${totalUniFarming.toFixed(2)}`);
  console.log(`–û–±—â–∏–π TON farming: ${totalTonFarming.toFixed(2)}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–µ—Ä–º–µ—Ä–æ–≤: ${activeUniFarmers}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–µ—Ä–º–µ—Ä–æ–≤: ${activeTonFarmers}`);
  console.log(`\n–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: ${checksum.toFixed(2)}`);
  
  auditResults.dataIntegrity = {
    status: '‚úÖ –î–∞–Ω–Ω—ã–µ —Ü–µ–ª–æ—Å—Ç–Ω—ã',
    stats: {
      users: userCount,
      transactions: txCount,
      totalUni,
      totalTon,
      totalUniFarming,
      totalTonFarming,
      activeUniFarmers,
      activeTonFarmers,
      checksum
    }
  };
  
  // 4. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '=' .repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ê–£–î–ò–¢–ê');
  console.log('=' .repeat(60) + '\n');
  
  console.log('üéØ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:');
  console.log(`   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${auditResults.synchronization.status}`);
  console.log(`   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgTime < 30 ? '‚úÖ –û—Ç–ª–∏—á–Ω–∞—è' : avgTime < 80 ? '‚ö° –•–æ—Ä–æ—à–∞—è' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'} (—Å—Ä–µ–¥–Ω–µ–µ ${avgTime.toFixed(0)}ms)`);
  console.log(`   –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: ${auditResults.dataIntegrity.status}`);
  
  console.log('\nüìà –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:');
  console.log(`   ‚Ä¢ ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ`);
  console.log(`   ‚Ä¢ ${txCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
  console.log(`   ‚Ä¢ ${activeTonFarmers} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON —Ñ–µ—Ä–º–µ—Ä–æ–≤`);
  console.log(`   ‚Ä¢ ${syncPercentage.toFixed(1)}% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è TON farming`);
  console.log(`   ‚Ä¢ ${avgTime.toFixed(0)}ms —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (syncPercentage < 100) {
    auditResults.recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
  }
  if (avgTime > 100) {
    auditResults.recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  if (auditResults.recommendations.length > 0) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    auditResults.recommendations.forEach((rec, i) => {
      console.log(`   ${i + 1}. ${rec}`);
    });
  } else {
    console.log('\n‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê!');
    console.log('   ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ');
    console.log('   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  fs.writeFileSync(
    'docs/SYSTEM_AUDIT_REPORT_FINAL.json',
    JSON.stringify(auditResults, null, 2)
  );
  
  console.log('\n‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/SYSTEM_AUDIT_REPORT_FINAL.json');
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∏–Ω–¥–µ–∫—Å–∞—Ö
  console.log('\nüìå –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –ë–î:');
  console.log('   SELECT indexname FROM pg_indexes WHERE indexname LIKE \'idx_%\';');
}

runSystemAudit().catch(console.error);