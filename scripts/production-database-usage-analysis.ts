#!/usr/bin/env tsx
/**
 * Production Database Usage Analysis
 * –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î!
 * 
 * –¶–µ–ª—å: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—è –∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

interface FieldUsage {
  tableName: string;
  fieldName: string;
  nonNullCount: number;
  uniqueValuesCount: number;
  sampleValues: any[];
  dataType: string;
  isActive: boolean;
}

interface TableAnalysis {
  tableName: string;
  totalRecords: number;
  activeFields: FieldUsage[];
  inactiveFields: FieldUsage[];
  criticalRelations: string[];
}

const analysisResults: {
  timestamp: string;
  environment: string;
  tables: TableAnalysis[];
  criticalFindings: string[];
  safetyRecommendations: string[];
} = {
  timestamp: new Date().toISOString(),
  environment: 'production',
  tables: [],
  criticalFindings: [],
  safetyRecommendations: []
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
const CRITICAL_TABLES = [
  'users',
  'transactions', 
  'withdraw_requests'
];

// –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞)
const KNOWN_USED_FIELDS = {
  users: [
    'id', 'telegram_id', 'username', 'first_name', 'last_name',
    'ref_code', 'parent_ref_code', 'referred_by',
    'balance_uni', 'balance_ton',
    'uni_farming_active', 'uni_deposit_amount', 'uni_farming_start_timestamp',
    'uni_farming_rate', 'uni_farming_balance', 'uni_farming_last_update',
    'ton_boost_active', 'ton_boost_package_id', 'ton_boost_rate',
    'created_at', 'updated_at'
  ],
  transactions: [
    'id', 'user_id', 'type', 'amount', 'amount_uni', 'amount_ton',
    'currency', 'status', 'description', 'created_at'
  ],
  withdraw_requests: [
    'id', 'user_id', 'telegram_id', 'username', 'amount_ton',
    'ton_wallet', 'status', 'created_at', 'processed_at'
  ]
};

async function analyzeTableUsage(tableName: string): Promise<TableAnalysis | null> {
  console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return null;
    }
    
    console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${count}`);
    
    if (count === 0) {
      analysisResults.criticalFindings.push(
        `–¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞—è - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`
      );
      return {
        tableName,
        totalRecords: 0,
        activeFields: [],
        inactiveFields: [],
        criticalRelations: []
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
    const { data: sampleData, error: sampleError } = await supabase
      .from(tableName)
      .select('*')
      .limit(100);
    
    if (sampleError || !sampleData || sampleData.length === 0) {
      return null;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
    const fieldUsage: FieldUsage[] = [];
    const firstRow = sampleData[0];
    const knownFields = KNOWN_USED_FIELDS[tableName as keyof typeof KNOWN_USED_FIELDS] || [];
    
    for (const fieldName of Object.keys(firstRow)) {
      const values = sampleData.map(row => row[fieldName]);
      const nonNullValues = values.filter(v => v !== null && v !== '' && v !== undefined);
      const uniqueValues = [...new Set(nonNullValues.map(v => JSON.stringify(v)))];
      
      fieldUsage.push({
        tableName,
        fieldName,
        nonNullCount: nonNullValues.length,
        uniqueValuesCount: uniqueValues.length,
        sampleValues: uniqueValues.slice(0, 3).map(v => JSON.parse(v)),
        dataType: typeof firstRow[fieldName],
        isActive: knownFields.includes(fieldName) || nonNullValues.length > 0
      });
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
    const activeFields = fieldUsage.filter(f => f.isActive);
    const inactiveFields = fieldUsage.filter(f => !f.isActive);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
    const criticalRelations: string[] = [];
    
    if (tableName === 'transactions') {
      criticalRelations.push('user_id -> users.id (FOREIGN KEY)');
    }
    
    if (tableName === 'withdraw_requests') {
      criticalRelations.push('user_id -> users.id');
    }
    
    if (tableName === 'users' && activeFields.find(f => f.fieldName === 'referred_by')) {
      criticalRelations.push('referred_by -> users.id (SELF REFERENCE)');
    }
    
    return {
      tableName,
      totalRecords: count || 0,
      activeFields,
      inactiveFields,
      criticalRelations
    };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
    return null;
  }
}

async function analyzeUserBalances() {
  console.log('\nüí∞ –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
    const { data: usersWithUni, error: uniError } = await supabase
      .from('users')
      .select('id, balance_uni')
      .gt('balance_uni', 0)
      .limit(10);
    
    const { data: usersWithTon, error: tonError } = await supabase
      .from('users')
      .select('id, balance_ton')
      .gt('balance_ton', 0)
      .limit(10);
    
    if (!uniError && usersWithUni && usersWithUni.length > 0) {
      analysisResults.criticalFindings.push(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithUni.length}+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å UNI –±–∞–ª–∞–Ω—Å–æ–º > 0`
      );
    }
    
    if (!tonError && usersWithTon && usersWithTon.length > 0) {
      analysisResults.criticalFindings.push(
        `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithTon.length}+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º > 0`
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤
    const { count: activeFarmers } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .eq('uni_farming_active', true);
    
    if (activeFarmers && activeFarmers > 0) {
      analysisResults.criticalFindings.push(
        `üåæ ${activeFarmers} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤ UNI`
      );
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
  }
}

async function analyzeReferralSystem() {
  console.log('\nüë• –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
    const { count: usersWithReferrers } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .not('referred_by', 'is', null);
    
    const { count: usersWithParentCode } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true })
      .not('parent_ref_code', 'is', null);
    
    if (usersWithReferrers && usersWithReferrers > 0) {
      analysisResults.criticalFindings.push(
        `üë• ${usersWithReferrers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (referred_by)`
      );
    }
    
    if (usersWithParentCode && usersWithParentCode > 0) {
      analysisResults.criticalFindings.push(
        `üìé ${usersWithParentCode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—Ç parent_ref_code`
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
    const { count: referralsCount } = await supabase
      .from('referrals')
      .select('*', { count: 'exact', head: true });
    
    if (referralsCount === 0) {
      analysisResults.criticalFindings.push(
        `‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ referrals –ø—É—Å—Ç–∞—è - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ users`
      );
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
  }
}

async function generateSafetyRecommendations() {
  console.log('\nüõ°Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
  
  analysisResults.safetyRecommendations = [
    '1. –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π backup –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏',
    '2. –ù–ï –£–î–ê–õ–Ø–¢–¨ –ø–æ–ª—è balance_uni, balance_ton –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users',
    '3. –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π',
    '4. –ù–ï –£–î–ê–õ–Ø–¢–¨ —Ç–∞–±–ª–∏—Ü—É transactions - —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π',
    '5. –ù–ï –ù–ê–†–£–®–ê–¢–¨ foreign key —Å–≤—è–∑–∏ user_id',
    '6. –°–û–•–†–ê–ù–ò–¢–¨ –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ (referred_by, parent_ref_code)',
    '7. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ALTER TABLE ADD COLUMN –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π',
    '8. –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _v2 –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏',
    '9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ–ø–∏–∏ –ë–î',
    '10. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø–æ—Å–ª–µ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
  ];
}

async function runProductionAnalysis() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Production –ë–î');
  console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!');
  console.log('================================================\n');
  
  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    for (const tableName of CRITICAL_TABLES) {
      const analysis = await analyzeTableUsage(tableName);
      if (analysis) {
        analysisResults.tables.push(analysis);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const otherTables = [
      'uni_farming_data',
      'ton_farming_data',
      'referrals',
      'missions',
      'user_sessions'
    ];
    
    for (const tableName of otherTables) {
      const analysis = await analyzeTableUsage(tableName);
      if (analysis) {
        analysisResults.tables.push(analysis);
      }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await analyzeUserBalances();
    await analyzeReferralSystem();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await generateSafetyRecommendations();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    const reportPath = path.join(
      process.cwd(), 
      'docs', 
      `production_usage_analysis_${Date.now()}.json`
    );
    
    await fs.writeFile(reportPath, JSON.stringify(analysisResults, null, 2));
    
    console.log(`\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç—á—ë—Ç: ${reportPath}`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    console.log('\n========== –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê ==========');
    console.log(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: ${analysisResults.tables.length}`);
    console.log('\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏:');
    analysisResults.criticalFindings.forEach((finding, index) => {
      console.log(`${index + 1}. ${finding}`);
    });
    
    console.log('\nüõ°Ô∏è –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
    analysisResults.safetyRecommendations.slice(0, 5).forEach(rec => {
      console.log(rec);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runProductionAnalysis().catch(console.error);