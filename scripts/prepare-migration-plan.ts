import { supabase } from '../core/supabase.js';

async function prepareMigrationPlan() {
  console.log('üìã –ü–û–î–ì–û–¢–û–í–ö–ê –ü–õ–ê–ù–ê –ú–ò–ì–†–ê–¶–ò–ò');
  console.log('='.repeat(80));
  console.log('');

  const migrationPlan = {
    uni_farming_data: [],
    ton_farming_data: [],
    sql_views: [],
    code_updates: []
  };

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ uni_farming_data
    console.log('üîç –ê–ù–ê–õ–ò–ó UNI_FARMING_DATA:\n');

    const { data: uniData } = await supabase
      .from('uni_farming_data')
      .select('*')
      .order('user_id');

    const { data: usersUni } = await supabase
      .from('users')
      .select('id, uni_deposit_amount, uni_farming_balance, uni_farming_active')
      .order('id');

    const userMap = new Map(usersUni?.map(u => [u.id, u]) || []);
    let uniToMigrate = 0;
    let uniAlreadySynced = 0;

    uniData?.forEach(farming => {
      const user = userMap.get(farming.user_id);
      
      if (!user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ users - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        migrationPlan.uni_farming_data.push({
          action: 'CREATE_USER',
          user_id: farming.user_id,
          data: farming
        });
        uniToMigrate++;
      } else if (farming.deposit_amount > 0 && user.uni_deposit_amount === 0) {
        // –ï—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –Ω–µ—Ç –≤ users
        migrationPlan.uni_farming_data.push({
          action: 'UPDATE_DEPOSIT',
          user_id: farming.user_id,
          old_value: user.uni_deposit_amount,
          new_value: farming.deposit_amount,
          farming_balance: farming.farming_balance
        });
        uniToMigrate++;
      } else if (Math.abs(farming.farming_balance - user.uni_farming_balance) > 0.01) {
        // –ë–∞–ª–∞–Ω—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        console.log(`‚ö†Ô∏è  User ${farming.user_id}: –±–∞–ª–∞–Ω—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (${farming.farming_balance} vs ${user.uni_farming_balance})`);
      } else {
        uniAlreadySynced++;
      }
    });

    console.log(`‚úÖ –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${uniAlreadySynced} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìã –¢—Ä–µ–±—É—é—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: ${uniToMigrate} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ö†Ô∏è  –ò–∑ –Ω–∏—Ö —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏: ${migrationPlan.uni_farming_data.filter(m => m.action === 'UPDATE_DEPOSIT').length}`);

    // 2. –ê–Ω–∞–ª–∏–∑ ton_farming_data
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó TON_FARMING_DATA:\n');

    const { data: tonData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .order('user_id');

    const { data: usersTon } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_farming_balance, ton_wallet_address')
      .order('id');

    const tonUserMap = new Map(usersTon?.map(u => [u.id, u]) || []);
    let tonToMigrate = 0;
    let tonAlreadySynced = 0;

    tonData?.forEach(farming => {
      const user = tonUserMap.get(farming.user_id);
      
      if (farming.boost_package_id && (!user?.ton_boost_package || user.ton_boost_package !== farming.boost_package_id)) {
        // Boost package –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        migrationPlan.ton_farming_data.push({
          action: 'UPDATE_BOOST',
          user_id: farming.user_id,
          old_boost: user?.ton_boost_package,
          new_boost: farming.boost_package_id,
          wallet: farming.wallet_address,
          farming_balance: farming.farming_balance
        });
        tonToMigrate++;
      } else {
        tonAlreadySynced++;
      }
    });

    console.log(`‚úÖ –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${tonAlreadySynced} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìã –¢—Ä–µ–±—É—é—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: ${tonToMigrate} –∑–∞–ø–∏—Å–µ–π`);

    // 3. –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è SQL Views
    console.log('\n\nüîß –ü–õ–ê–ù –°–û–ó–î–ê–ù–ò–Ø SQL VIEWS:\n');

    migrationPlan.sql_views = [
      {
        name: 'uni_farming_data',
        description: 'View –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å uni_farming_data',
        sql: `CREATE OR REPLACE VIEW uni_farming_data AS
SELECT 
  id as user_id,
  uni_deposit_amount as deposit_amount,
  uni_farming_balance as farming_balance,
  uni_farming_active as is_active,
  created_at,
  updated_at
FROM users
WHERE uni_deposit_amount > 0 OR uni_farming_balance > 0;`
      },
      {
        name: 'ton_farming_data',
        description: 'View –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ton_farming_data',
        sql: `CREATE OR REPLACE VIEW ton_farming_data AS
SELECT 
  id as user_id,
  ton_wallet_address as wallet_address,
  ton_farming_balance as farming_balance,
  ton_boost_package as boost_package_id,
  created_at,
  updated_at
FROM users
WHERE ton_wallet_address IS NOT NULL OR ton_farming_balance > 0;`
      }
    ];

    console.log('–ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã 2 SQL View –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
    console.log('- uni_farming_data ‚Üí —á–∏—Ç–∞–µ—Ç –∏–∑ users');
    console.log('- ton_farming_data ‚Üí —á–∏—Ç–∞–µ—Ç –∏–∑ users');

    // 4. –ö–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    console.log('\n\nüìù –ö–û–î –¢–†–ï–ë–£–Æ–©–ò–ô –û–ë–ù–û–í–õ–ï–ù–ò–Ø:\n');

    migrationPlan.code_updates = [
      {
        file: 'modules/boost/service.ts',
        line: 1116,
        issue: '–ß–∏—Ç–∞–µ—Ç farming_balance –∏–∑ ton_farming_data',
        fix: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ users.ton_farming_balance'
      }
    ];

    console.log('1 —Ñ–∞–π–ª —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏');

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
    console.log('\n\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê –ú–ò–ì–†–ê–¶–ò–ò:\n');
    
    const planSummary = {
      timestamp: new Date().toISOString(),
      summary: {
        uni_records_to_migrate: uniToMigrate,
        ton_records_to_migrate: tonToMigrate,
        total_records_to_migrate: uniToMigrate + tonToMigrate,
        sql_views_to_create: 2,
        code_files_to_update: 1
      },
      details: migrationPlan
    };

    const fs = await import('fs/promises');
    await fs.writeFile('MIGRATION_PLAN_2025-08-02.json', JSON.stringify(planSummary, null, 2));
    console.log('‚úÖ –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MIGRATION_PLAN_2025-08-02.json');

    // 6. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ò–ì–†–ê–¶–ò–ò:\n');
    console.log('1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å UPDATE –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π');
    console.log('2. –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ users (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)');
    console.log('3. –°–æ–∑–¥–∞—Ç—å SQL Views –ü–û–°–õ–ï –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    console.log('4. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ boost/service.ts');
    console.log('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ Views');
    console.log('6. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º _archived_)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–ª–∞–Ω–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
console.log('–ì–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏...\n');
prepareMigrationPlan();