import { supabase } from '../core/supabase';

async function checkDatabaseStatusAfterSync() {
  console.log('üîç –ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•\n');
  console.log('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toLocaleString('ru-RU'));
  console.log('=' .repeat(60) + '\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
  console.log('-'.repeat(40));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: types, error } = await supabase
      .from('transactions')
      .select('type')
      .limit(1000);

    if (error) throw error;

    const uniqueTypes = new Set<string>();
    types?.forEach(row => {
      if (row.type) uniqueTypes.add(row.type);
    });

    console.log('–ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:', uniqueTypes.size);
    console.log('–¢–∏–ø—ã:', Array.from(uniqueTypes).join(', '));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã
    const expectedTypes = [
      'FARMING_REWARD', 'BOOST_REWARD', 'MISSION_REWARD', 
      'DAILY_BONUS', 'REFERRAL_REWARD', 'WITHDRAWAL', 
      'DEPOSIT', 'FARMING_DEPOSIT', 'BOOST_PURCHASE', 'AIRDROP_CLAIM'
    ];
    
    console.log('\n–û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã (–∏–∑ –∫–æ–¥–∞):');
    expectedTypes.forEach(type => {
      const exists = uniqueTypes.has(type);
      console.log(`  ${type}: ${exists ? '‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' : '‚ö†Ô∏è  –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö'}`);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–ø–æ–≤:', error);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ users
  console.log('\nüìä 2. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –í –¢–ê–ë–õ–ò–¶–ï USERS:');
  console.log('-'.repeat(40));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .limit(1)
      .single();

    if (error) throw error;

    const criticalFields = ['last_active', 'is_guest', 'guest_id', 'referred_by_user_id'];
    const userKeys = Object.keys(user || {});
    
    criticalFields.forEach(field => {
      const exists = userKeys.includes(field);
      console.log(`  ${field}: ${exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ last_active
    if ('last_active' in (user || {})) {
      console.log(`  –ó–Ω–∞—á–µ–Ω–∏–µ last_active: ${user.last_active || 'NULL'}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–µ–π users:', error);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ transactions
  console.log('\nüìä 3. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –í –¢–ê–ë–õ–ò–¶–ï TRANSACTIONS:');
  console.log('-'.repeat(40));
  
  try {
    const { data: transaction, error } = await supabase
      .from('transactions')
      .select('*')
      .limit(1)
      .single();

    if (error && error.code !== 'PGRST116') throw error; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "no rows"

    const criticalFields = ['amount', 'currency', 'from_user_id', 'to_user_id'];
    const transactionKeys = Object.keys(transaction || {});
    
    criticalFields.forEach(field => {
      const exists = transactionKeys.includes(field);
      console.log(`  ${field}: ${exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–µ–π transactions:', error);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
  console.log('\nüìä 4. –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–ê–ë–õ–ò–¶:');
  console.log('-'.repeat(40));
  
  const newTables = [
    'user_sessions',
    'referral_commissions',
    'system_settings',
    'airdrop_claims'
  ];

  for (const table of newTables) {
    try {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        console.log(`  ${table}: ‚ùå –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
      } else {
        console.log(`  ${table}: ‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∑–∞–ø–∏—Å–µ–π: ${count || 0})`);
      }
    } catch (error) {
      console.log(`  ${table}: ‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏`);
    }
  }

  // 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò:');
  console.log('='.repeat(60));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    const { data: userCheck } = await supabase
      .from('users')
      .select('last_active')
      .limit(1)
      .single();
    
    const { data: transCheck } = await supabase
      .from('transactions')
      .select('amount, currency')
      .limit(1)
      .single();
    
    const hasLastActive = userCheck && 'last_active' in userCheck;
    const hasAmount = transCheck && 'amount' in transCheck;
    const hasCurrency = transCheck && 'currency' in transCheck;
    
    console.log('\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:');
    console.log(`1. –ü–æ–ª–µ users.last_active: ${hasLastActive ? '‚úÖ –ì–û–¢–û–í–û' : '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø'}`);
    console.log(`2. –ü–æ–ª–µ transactions.amount: ${hasAmount ? '‚úÖ –ì–û–¢–û–í–û' : '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø'}`);
    console.log(`3. –ü–æ–ª–µ transactions.currency: ${hasCurrency ? '‚úÖ –ì–û–¢–û–í–û' : '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø'}`);
    
    if (hasLastActive && hasAmount && hasCurrency) {
      console.log('\n‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
      console.log('–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.');
    } else {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê');
      console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ QUICK_FIX_INSTRUCTIONS.md');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }

  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å last_active
  console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø last_active:');
  console.log('-'.repeat(40));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 74 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    const { data: user74, error } = await supabase
      .from('users')
      .select('id, telegram_id, last_active, created_at')
      .eq('id', 74)
      .single();
    
    if (!error && user74) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 74:');
      console.log(`  - ID: ${user74.id}`);
      console.log(`  - Telegram ID: ${user74.telegram_id}`);
      console.log(`  - last_active: ${user74.last_active || 'NULL'}`);
      console.log(`  - created_at: ${user74.created_at}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ user 74:', error);
  }
}

checkDatabaseStatusAfterSync().catch(console.error);