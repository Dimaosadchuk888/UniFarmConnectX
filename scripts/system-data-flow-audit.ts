#!/usr/bin/env tsx
/**
 * System Data Flow Audit - –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î
 * –¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –∫—É–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

interface TableInfo {
  tableName: string;
  recordCount: number;
  columns: string[];
  primaryKey: string;
  foreignKeys: Array<{
    column: string;
    referencedTable: string;
    referencedColumn: string;
  }>;
  dataFlow: {
    writtenBy: string[];
    readBy: string[];
  };
}

interface DataDuplication {
  field1: string;
  field2: string;
  table1: string;
  table2: string;
  description: string;
  recommendation: string;
}

const auditReport = {
  timestamp: new Date().toISOString(),
  currentTables: [] as TableInfo[],
  dataFlowMap: {} as Record<string, any>,
  duplications: [] as DataDuplication[],
  systemDependencies: {} as Record<string, string[]>,
  recommendations: [] as string[],
  optimizationPlan: {} as Record<string, any>
};

// –ö–∞—Ä—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
const KNOWN_DATA_FLOWS = {
  users: {
    writtenBy: [
      'SupabaseUserRepository.createUser',
      'SupabaseUserRepository.updateUser',
      'BalanceManager.modifyBalance',
      'UniFarmingRepository.updateFarmingData',
      'TonFarmingRepository.updateFarmingData',
      'TonWalletService.linkWallet'
    ],
    readBy: [
      'SupabaseUserRepository.getUserByTelegramId',
      'AuthController.getCurrentUser',
      'UniFarmingRepository.getByUserId',
      'TonFarmingRepository.getByUserId',
      'ReferralService.getReferralPath',
      'WithdrawController.getBalance'
    ]
  },
  transactions: {
    writtenBy: [
      'TransactionEnforcer.logTransaction',
      'UnifiedTransactionService.recordTransaction',
      'ReferralService.processReferralRewards',
      'BalanceManager.modifyBalance'
    ],
    readBy: [
      'TransactionController.getUserTransactions',
      'StatsController.getTransactionStats',
      'AdminController.getSystemTransactions'
    ]
  },
  withdraw_requests: {
    writtenBy: [
      'WithdrawController.createWithdrawRequest',
      'AdminWithdrawService.updateStatus'
    ],
    readBy: [
      'WithdrawController.getUserWithdrawals',
      'AdminController.getPendingWithdrawals'
    ]
  }
};

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î
async function analyzeCurrentTables(): Promise<void> {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const { data: tables, error } = await supabase.rpc('get_all_tables');
    
    if (error) {
      // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      const knownTables = ['users', 'transactions', 'withdraw_requests', 
                          'uni_farming_data', 'ton_farming_data', 'referrals',
                          'missions', 'user_sessions', 'boost_packages'];
      
      for (const tableName of knownTables) {
        try {
          const { count } = await supabase
            .from(tableName)
            .select('*', { count: 'exact', head: true });
          
          if (count !== null) {
            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            const { data: sample } = await supabase
              .from(tableName)
              .select('*')
              .limit(1);
            
            const tableInfo: TableInfo = {
              tableName,
              recordCount: count,
              columns: sample && sample.length > 0 ? Object.keys(sample[0]) : [],
              primaryKey: 'id',
              foreignKeys: [],
              dataFlow: KNOWN_DATA_FLOWS[tableName] || { writtenBy: [], readBy: [] }
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º foreign keys
            if (tableName === 'transactions' && tableInfo.columns.includes('user_id')) {
              tableInfo.foreignKeys.push({
                column: 'user_id',
                referencedTable: 'users',
                referencedColumn: 'id'
              });
            }
            
            if (tableName === 'withdraw_requests' && tableInfo.columns.includes('user_id')) {
              tableInfo.foreignKeys.push({
                column: 'user_id',
                referencedTable: 'users',
                referencedColumn: 'id'
              });
            }
            
            auditReport.currentTables.push(tableInfo);
          }
        } catch (e) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü:', error);
  }
}

// –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function analyzeDuplication(): Promise<void> {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const knownDuplications: DataDuplication[] = [
    {
      field1: 'balance_uni',
      field2: 'uni_farming_balance',
      table1: 'users',
      table2: 'users',
      description: '–ë–∞–ª–∞–Ω—Å UNI —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –¥–≤—É—Ö –ø–æ–ª—è—Ö –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã',
      recommendation: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ balance_uni, uni_farming_balance –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞'
    },
    {
      field1: 'telegram_id',
      field2: 'telegram_id',
      table1: 'users',
      table2: 'withdraw_requests',
      description: 'telegram_id –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ withdraw_requests',
      recommendation: '–£–¥–∞–ª–∏—Ç—å telegram_id –∏–∑ withdraw_requests, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JOIN —Å users'
    },
    {
      field1: 'username',
      field2: 'username',
      table1: 'users',
      table2: 'withdraw_requests',
      description: 'username –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ withdraw_requests',
      recommendation: '–£–¥–∞–ª–∏—Ç—å username –∏–∑ withdraw_requests, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JOIN —Å users'
    },
    {
      field1: 'ref_code + parent_ref_code + referred_by',
      field2: '—Ç–∞–±–ª–∏—Ü–∞ referrals',
      table1: 'users',
      table2: 'referrals',
      description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö',
      recommendation: '–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ - –ª–∏–±–æ –≤ users, –ª–∏–±–æ –≤ referrals'
    },
    {
      field1: 'uni_farming_* –ø–æ–ª—è',
      field2: 'uni_farming_data —Ç–∞–±–ª–∏—Ü–∞',
      table1: 'users',
      table2: 'uni_farming_data',
      description: '–î–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ UNI –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è',
      recommendation: '–í—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é users –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã'
    },
    {
      field1: 'ton_boost_* –ø–æ–ª—è',
      field2: 'ton_farming_data —Ç–∞–±–ª–∏—Ü–∞',
      table1: 'users',
      table2: 'ton_farming_data',
      description: '–î–∞–Ω–Ω—ã–µ TON boost –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è',
      recommendation: '–í—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é users'
    },
    {
      field1: 'amount_uni + amount_ton',
      field2: 'amount + currency',
      table1: 'transactions',
      table2: 'transactions',
      description: '–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º—ã',
      recommendation: '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: amount + currency'
    }
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  for (const dup of knownDuplications) {
    const table1Exists = auditReport.currentTables.find(t => t.tableName === dup.table1);
    const table2Exists = auditReport.currentTables.find(t => t.tableName === dup.table2);
    
    if (table1Exists && table2Exists) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
      const field1Exists = dup.table1 === dup.table2 ? 
        table1Exists.columns.some(col => dup.field1.includes(col)) :
        table1Exists.columns.includes(dup.field1.split(' ')[0]);
        
      if (field1Exists) {
        auditReport.duplications.push(dup);
        console.log(`‚ö†Ô∏è  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${dup.description}`);
      }
    }
  }
}

// –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function analyzeSystemDependencies(): Promise<void> {
  console.log('\nüîó –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');
  
  // –ö–∞—Ä—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  auditReport.systemDependencies = {
    'users.balance_uni': [
      'BalanceManager.modifyBalance',
      'UniFarmingService.calculateIncome',
      'WithdrawController.validateBalance',
      'Frontend: BalanceDisplay component'
    ],
    'users.balance_ton': [
      'BalanceManager.modifyBalance',
      'TonBoostService.processIncome',
      'WithdrawController.validateTonBalance',
      'Frontend: TON balance display'
    ],
    'users.telegram_id': [
      'AuthService.authenticate',
      'UserRepository.findByTelegramId',
      '–ö–†–ò–¢–ò–ß–ù–û: Primary user identifier'
    ],
    'users.ref_code': [
      'ReferralService.processNewUser',
      'ReferralLinkGenerator',
      'Frontend: Referral link display'
    ],
    'users.referred_by': [
      'ReferralService.calculateRewards',
      'ReferralChainBuilder',
      'StatsService.getReferralStats'
    ],
    'transactions.user_id': [
      'FOREIGN KEY to users.id',
      'TransactionHistory.getUserTransactions',
      'AdminPanel.getTransactionStats'
    ],
    'transactions.type': [
      'TransactionClassifier',
      'RewardCalculator',
      'Frontend: Transaction list filter'
    ],
    'withdraw_requests.status': [
      'AdminWithdrawService.processPending',
      'UserWithdrawStatus.check',
      'NotificationService.sendStatusUpdate'
    ]
  };
  
  for (const [field, deps] of Object.entries(auditReport.systemDependencies)) {
    console.log(`üìå ${field}:`);
    deps.forEach(dep => console.log(`   - ${dep}`));
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async function generateOptimizationPlan(): Promise<void> {
  console.log('\nüí° –ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...\n');
  
  auditReport.optimizationPlan = {
    phase1_cleanup: {
      priority: 'HIGH',
      actions: [
        {
          action: '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ withdraw_requests',
          sql: `ALTER TABLE withdraw_requests 
                DROP COLUMN IF EXISTS telegram_id,
                DROP COLUMN IF EXISTS username;`,
          impact: '–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç JOIN –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        },
        {
          action: '–í—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
          decision: '–û—Å—Ç–∞–≤–∏—Ç—å –≤ users, —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É referrals –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è',
          reason: '–£–ø—Ä–æ—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ'
        }
      ]
    },
    phase2_consolidation: {
      priority: 'MEDIUM',
      actions: [
        {
          action: '–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å farming –¥–∞–Ω–Ω—ã–µ',
          recommendation: '–ï—Å–ª–∏ uni_farming_data –∏ ton_farming_data –ø—É—Å—Ç—ã–µ - —É–¥–∞–ª–∏—Ç—å',
          alternative: '–ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ - –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ users —Ç–∞–±–ª–∏—Ü—É'
        },
        {
          action: '–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É transactions',
          migration: `-- –î–æ–±–∞–≤–∏—Ç—å –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                     ALTER TABLE transactions 
                     ADD COLUMN IF NOT EXISTS unified_amount DECIMAL(20,6) 
                     GENERATED ALWAYS AS (COALESCE(amount, amount_uni + amount_ton)) STORED;`,
          longTerm: '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ amount + currency'
        }
      ]
    },
    phase3_optimization: {
      priority: 'LOW',
      actions: [
        {
          action: '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
          sql: `CREATE INDEX IF NOT EXISTS idx_transactions_user_created 
                ON transactions(user_id, created_at DESC);
                
                CREATE INDEX IF NOT EXISTS idx_users_telegram_id 
                ON users(telegram_id);
                
                CREATE INDEX IF NOT EXISTS idx_users_referred_by
                ON users(referred_by) WHERE referred_by IS NOT NULL;`
        },
        {
          action: '–°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è',
          sql: `CREATE MATERIALIZED VIEW IF NOT EXISTS user_stats AS
                SELECT 
                  u.id,
                  u.telegram_id,
                  COUNT(DISTINCT t.id) as transaction_count,
                  SUM(CASE WHEN t.currency = 'UNI' THEN t.amount ELSE 0 END) as total_uni_earned,
                  SUM(CASE WHEN t.currency = 'TON' THEN t.amount ELSE 0 END) as total_ton_earned
                FROM users u
                LEFT JOIN transactions t ON u.id = t.user_id
                GROUP BY u.id, u.telegram_id;`
        }
      ]
    }
  };
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  auditReport.recommendations = [
    '1. –ö–†–ò–¢–ò–ß–ù–û: –°–¥–µ–ª–∞—Ç—å backup –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏',
    '2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö',
    '3. –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã: user_sessions –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
    '4. –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å farming –¥–∞–Ω–Ω—ã–µ –≤ users –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ',
    '5. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É transactions –Ω–∞ amount + currency',
    '6. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ withdraw_requests',
    '7. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    '8. –°–æ–∑–¥–∞—Ç—å views –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏',
    '9. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ migration —Å–∫—Ä–∏–ø—Ç–∞—Ö',
    '10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ staging —Å—Ä–µ–¥–µ'
  ];
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞
async function runSystemDataFlowAudit(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã');
  console.log('=' .repeat(50) + '\n');
  
  try {
    await analyzeCurrentTables();
    await analyzeDuplication();
    await analyzeSystemDependencies();
    await generateOptimizationPlan();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportPath = path.join(
      process.cwd(),
      'docs',
      `SYSTEM_DATA_FLOW_AUDIT_${Date.now()}.json`
    );
    
    await fs.writeFile(reportPath, JSON.stringify(auditReport, null, 2));
    
    console.log(`\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á–µ—Ç: ${reportPath}`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    console.log('\n' + '='.repeat(50));
    console.log('üìä –°–í–û–î–ö–ê –ê–£–î–ò–¢–ê');
    console.log('='.repeat(50));
    console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${auditReport.currentTables.length}`);
    console.log(`–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: ${auditReport.duplications.length}`);
    console.log('\nüéØ –¢–û–ü-5 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:');
    auditReport.recommendations.slice(0, 5).forEach((rec, idx) => {
      console.log(rec);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
runSystemDataFlowAudit().catch(console.error);