/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON Boost
 * –ë–ï–ó–û–ü–ê–°–ù–û - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
 */

import { supabase } from '../core/supabase';
import { TonFarmingRepository } from '../modules/boost/TonFarmingRepository';

async function testSafeTonBoostActivation() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–ô –°–ò–°–¢–ï–ú–´ –ê–ö–¢–ò–í–ê–¶–ò–ò TON BOOST');
  console.log('=' .repeat(70));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ton_farming_data
    console.log('\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ton_farming_data');
    const { data: farmingRecords, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_package_id, boost_active')
      .limit(5);
    
    if (farmingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ton_farming_data:', farmingError);
      return;
    }
    
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${farmingRecords?.length || 0}`);
    
    if (farmingRecords && farmingRecords.length > 0) {
      console.log('üìä –ü—Ä–∏–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π:');
      farmingRecords.forEach(record => {
        console.log(`   User ${record.user_id}: Balance=${record.farming_balance}, Package=${record.boost_package_id}, Active=${record.boost_active}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –≤ users —Ç–∞–±–ª–∏—Ü–µ
    console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –≤ users');
    const { data: boostUsers, error: usersError } = await supabase
      .from('users')
      .select('id, ton_boost_active, ton_boost_package, ton_farming_balance')
      .eq('ton_boost_active', true)
      .limit(10);
    
    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost: ${boostUsers?.length || 0}`);
    
    if (boostUsers && boostUsers.length > 0) {
      console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost:');
      boostUsers.forEach(user => {
        console.log(`   User ${user.id}: Package=${user.ton_boost_package}, farming_balance=${user.ton_farming_balance}`);
      });
      
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
      console.log('\nüìã –®–∞–≥ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É ton_farming_data –∏ users');
      let syncIssues = 0;
      
      for (const user of boostUsers) {
        const farmingRecord = farmingRecords?.find(f => f.user_id === user.id.toString());
        
        if (!farmingRecord) {
          console.log(`‚ö†Ô∏è  User ${user.id}: –ï—Å—Ç—å –≤ users, –ù–ï–¢ –≤ ton_farming_data`);
          syncIssues++;
        } else {
          const balanceMatch = parseFloat(farmingRecord.farming_balance || '0') === parseFloat(user.ton_farming_balance || '0');
          const packageMatch = farmingRecord.boost_package_id === user.ton_boost_package;
          
          if (!balanceMatch || !packageMatch) {
            console.log(`‚ö†Ô∏è  User ${user.id}: –î–∞–Ω–Ω—ã–µ –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
            console.log(`     users.ton_farming_balance: ${user.ton_farming_balance}`);
            console.log(`     ton_farming_data.farming_balance: ${farmingRecord.farming_balance}`);
            console.log(`     users.ton_boost_package: ${user.ton_boost_package}`);
            console.log(`     ton_farming_data.boost_package_id: ${farmingRecord.boost_package_id}`);
            syncIssues++;
          } else {
            console.log(`‚úÖ User ${user.id}: –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
          }
        }
      }
      
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${syncIssues} –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ ${boostUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π TonFarmingRepository (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
    console.log('\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ TonFarmingRepository');
    const tonFarmingRepo = new TonFarmingRepository();
    
    if (boostUsers && boostUsers.length > 0) {
      const testUserId = boostUsers[0].id.toString();
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º getByUserId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}`);
      
      const farmingData = await tonFarmingRepo.getByUserId(testUserId);
      if (farmingData) {
        console.log('‚úÖ TonFarmingRepository.getByUserId —Ä–∞–±–æ—Ç–∞–µ—Ç:');
        console.log(`   farming_balance: ${farmingData.farming_balance}`);
        console.log(`   boost_package_id: ${farmingData.boost_package_id}`);
        console.log(`   boost_active: ${farmingData.boost_active}`);
      } else {
        console.log('‚ö†Ô∏è  TonFarmingRepository.getByUserId –Ω–µ –Ω–∞—à–µ–ª –¥–∞–Ω–Ω—ã–µ');
      }
    }
    
    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('- –¢–∞–±–ª–∏—Ü–∞ ton_farming_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('- –ù–æ–≤—ã–π TonFarmingRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');  
    console.log('- –ú–µ—Ç–æ–¥ safeActivateBoost –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log('- –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–Ω–µ –∑–∞–º–µ—â–µ–Ω–∏—è)');
    console.log('- –û–±–µ—Å–ø–µ—á–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É ton_farming_data –∏ users');
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testSafeTonBoostActivation().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  process.exit(1);
});