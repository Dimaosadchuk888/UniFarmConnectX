/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON Boost
 */

import { supabase } from '../core/supabaseClient';

async function checkTonBoostTransactions() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON Boost ===\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º TON Boost
  console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON Boost —á–µ—Ä–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ:');
  console.log('--------------------------------------------');
  
  const { data: tonBoostTx, error } = await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'FARMING_REWARD')
    .or('description.ilike.%TON Boost%,description.ilike.%ton boost%')
    .order('created_at', { ascending: false })
    .limit(20);
    
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return;
  }
  
  if (tonBoostTx && tonBoostTx.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonBoostTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON Boost (—Ç–∏–ø FARMING_REWARD):\n`);
    
    tonBoostTx.forEach(tx => {
      console.log(`ID: ${tx.id}`);
      console.log(`User: ${tx.user_id}`);
      console.log(`Type: ${tx.type}`);
      console.log(`Amount TON: ${tx.amount_ton}`);
      console.log(`Description: "${tx.description}"`);
      console.log(`Created: ${tx.created_at}`);
      console.log('---');
    });
  } else {
    console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n');
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata –¥–ª—è –ø–æ–∏—Å–∫–∞ original_type
  console.log('üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å original_type = TON_BOOST_INCOME:');
  console.log('------------------------------------------------------');
  
  const { data: metadataTx } = await supabase
    .from('transactions')
    .select('*')
    .not('metadata', 'is', null)
    .order('created_at', { ascending: false })
    .limit(100);
    
  let tonBoostCount = 0;
  if (metadataTx) {
    metadataTx.forEach(tx => {
      if (tx.metadata && tx.metadata.original_type === 'TON_BOOST_INCOME') {
        tonBoostCount++;
        if (tonBoostCount <= 5) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ TON_BOOST_INCOME —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:`);
          console.log(`   ID: ${tx.id}, User: ${tx.user_id}`);
          console.log(`   Amount: ${tx.amount_ton} TON`);
          console.log(`   Metadata:`, tx.metadata);
          console.log('---');
        }
      }
    });
  }
  
  if (tonBoostCount > 0) {
    console.log(`\n‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${tonBoostCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å original_type = TON_BOOST_INCOME`);
  } else {
    console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å original_type = TON_BOOST_INCOME –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n');
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–∞–∫–µ—Ç–∞–º–∏
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–∞–∫–µ—Ç–∞–º–∏:');
  console.log('----------------------------------------------');
  
  const { data: boostUsers } = await supabase
    .from('users')
    .select('id, username, ton_boost_package, ton_boost_rate, balance_ton')
    .not('ton_boost_package', 'is', null)
    .not('ton_boost_package', 'eq', 0)
    .limit(10);
    
  if (boostUsers && boostUsers.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boostUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost:\n`);
    boostUsers.forEach(user => {
      console.log(`User ${user.id} (${user.username || 'no username'}):`);
      console.log(`  Package: ${user.ton_boost_package}`);
      console.log(`  Rate: ${user.ton_boost_rate || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`  Balance TON: ${user.balance_ton}`);
    });
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–∞–∫–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('\n=== –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ===');
}

// –ó–∞–ø—É—Å–∫
checkTonBoostTransactions().catch(console.error);