import { glob } from 'glob';
import { readFile } from 'fs/promises';
import path from 'path';

async function analyzeCodeUsage() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –°–¢–ê–†–´–• –¢–ê–ë–õ–ò–¶ –í –ö–û–î–ï');
  console.log('='.repeat(80));
  console.log('');

  const patterns = [
    'uni_farming_data',
    'ton_farming_data',
    'from(\'uni_farming_data\')',
    'from("uni_farming_data")',
    'from(\'ton_farming_data\')',
    'from("ton_farming_data")'
  ];

  const results = {
    uni_farming_data: [],
    ton_farming_data: []
  };

  try {
    // –ò—â–µ–º –≤—Å–µ TypeScript –∏ JavaScript —Ñ–∞–π–ª—ã
    const files = await glob('**/*.{ts,tsx,js,jsx}', {
      ignore: [
        'node_modules/**',
        'scripts/**',
        'tests/**',
        'tmp/**',
        'backups/**',
        'archive_reports/**'
      ]
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n`);

    for (const file of files) {
      try {
        const content = await readFile(file, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for (const pattern of patterns) {
          if (content.includes(pattern)) {
            const tableName = pattern.includes('uni_farming') ? 'uni_farming_data' : 'ton_farming_data';
            
            // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
            const lines = content.split('\n');
            const lineNumbers = [];
            
            lines.forEach((line, index) => {
              if (line.includes(pattern)) {
                lineNumbers.push(index + 1);
              }
            });

            if (lineNumbers.length > 0) {
              results[tableName].push({
                file,
                pattern,
                lineNumbers,
                count: lineNumbers.length
              });
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:\n');

    console.log('1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ uni_farming_data:');
    if (results.uni_farming_data.length === 0) {
      console.log('   ‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥–µ');
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${results.uni_farming_data.length} —Ñ–∞–π–ª–æ–≤:`);
      results.uni_farming_data.forEach(r => {
        console.log(`   - ${r.file}`);
        console.log(`     –°—Ç—Ä–æ–∫–∏: ${r.lineNumbers.join(', ')}`);
      });
    }

    console.log('\n2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ton_farming_data:');
    if (results.ton_farming_data.length === 0) {
      console.log('   ‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥–µ');
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${results.ton_farming_data.length} —Ñ–∞–π–ª–æ–≤:`);
      results.ton_farming_data.forEach(r => {
        console.log(`   - ${r.file}`);
        console.log(`     –°—Ç—Ä–æ–∫–∏: ${r.lineNumbers.join(', ')}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ù–´–• –§–ê–ô–õ–û–í:\n');

    const criticalFiles = [
      'modules/boost/service.ts',
      'modules/farming/service.ts',
      'modules/wallet/service.ts',
      'server/routes.ts'
    ];

    for (const file of criticalFiles) {
      try {
        const content = await readFile(file, 'utf-8');
        const hasOldTables = patterns.some(p => content.includes(p));
        
        if (hasOldTables) {
          console.log(`‚ö†Ô∏è  ${file} - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã`);
        } else {
          console.log(`‚úÖ ${file} - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã`);
        }
      } catch (error) {
        console.log(`‚ùì ${file} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');

    const totalUsage = results.uni_farming_data.length + results.ton_farming_data.length;
    
    if (totalUsage === 0) {
      console.log('üéâ –û—Ç–ª–∏—á–Ω–æ! –ö–æ–¥ —É–∂–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é.');
      console.log('Views –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø–æ–ª–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.');
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${totalUsage} —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã.`);
      console.log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      console.log('1. –ù–∞—á–∞—Ç—å —Å —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (service.ts)');
      console.log('2. –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ—É—Ç—ã (routes.ts)');
      console.log('3. –í –∫–æ–Ω—Ü–µ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã');
      console.log('\nViews –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –±–µ–∑ —Ä–∏—Å–∫–∞.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...\n');
analyzeCodeUsage();