#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π farming
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkRecentTransactions() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ò–• FARMING –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
  console.log(new Date().toLocaleString('ru-RU'));
  console.log('');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_REWARD
    const { data: recentTransactions, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${recentTransactions?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö FARMING_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log('');

    if (recentTransactions && recentTransactions.length > 0) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
      console.log('=====================================');
      
      recentTransactions.forEach((tx, index) => {
        const isUni = parseFloat(tx.amount_uni || '0') > 0;
        const isTon = parseFloat(tx.amount_ton || '0') > 0;
        
        console.log(`\n${index + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${tx.id}`);
        console.log(`   User ID: ${tx.user_id}`);
        console.log(`   –¢–∏–ø: ${isUni ? 'UNI Farming' : isTon ? 'TON Boost' : 'Unknown'}`);
        console.log(`   –°—É–º–º–∞: ${isUni ? tx.amount_uni + ' UNI' : tx.amount_ton + ' TON'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const lastTransaction = recentTransactions[0];
      const lastTransactionTime = new Date(lastTransaction.created_at);
      const timeSinceLastTransaction = Date.now() - lastTransactionTime.getTime();
      const minutesSince = Math.floor(timeSinceLastTransaction / (1000 * 60));

      console.log('\n=====================================');
      console.log(`‚è∞ –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${minutesSince} –º–∏–Ω—É—Ç`);
      
      if (minutesSince > 10) {
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
        console.log('   Scheduler –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.');
      } else {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ');
      }

    } else {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ FARMING_REWARD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const oneHourAgo = new Date();
    oneHourAgo.setHours(oneHourAgo.getHours() - 1);

    const { data: lastHourTransactions, error: hourError } = await supabase
      .from('transactions')
      .select('user_id, amount_uni, amount_ton')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', oneHourAgo.toISOString());

    if (!hourError && lastHourTransactions) {
      const uniCount = lastHourTransactions.filter(tx => parseFloat(tx.amount_uni || '0') > 0).length;
      const tonCount = lastHourTransactions.filter(tx => parseFloat(tx.amount_ton || '0') > 0).length;
      const uniqueUsers = new Set(lastHourTransactions.map(tx => tx.user_id)).size;

      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:');
      console.log(`   UNI Farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${uniCount}`);
      console.log(`   TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonCount}`);
      console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueUsers}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkRecentTransactions().catch(console.error);