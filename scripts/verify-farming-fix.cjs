#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã farming
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function verifyFarmingFix() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ FARMING ===');
  console.log(new Date().toLocaleString('ru-RU'));
  console.log('');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    const { data: activeDeposits, error: depositsError } = await supabase
      .from('users')
      .select('id, uni_farming_active, uni_deposit_amount, uni_farming_rate, uni_farming_start_timestamp')
      .eq('uni_farming_active', true)
      .gt('uni_deposit_amount', 0);

    if (depositsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', depositsError);
      return;
    }

    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ UNI farming –¥–µ–ø–æ–∑–∏—Ç—ã: ${activeDeposits?.length || 0}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
    const tenMinutesAgo = new Date();
    tenMinutesAgo.setMinutes(tenMinutesAgo.getMinutes() - 10);

    let usersWithTransactions = 0;
    let usersWithoutTransactions = 0;
    const problemUsers = [];

    for (const user of activeDeposits || []) {
      const { data: userTransactions, error: txError } = await supabase
        .from('transactions')
        .select('id, created_at, amount_uni')
        .eq('user_id', user.id)
        .eq('type', 'FARMING_REWARD')
        .gte('created_at', tenMinutesAgo.toISOString())
        .order('created_at', { ascending: false })
        .limit(1);

      if (!txError && userTransactions && userTransactions.length > 0) {
        usersWithTransactions++;
      } else {
        usersWithoutTransactions++;
        problemUsers.push({
          userId: user.id,
          deposit: user.uni_deposit_amount,
          rate: user.uni_farming_rate,
          startDate: user.uni_farming_start_timestamp
        });
      }
    }

    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç: ${usersWithTransactions}`);
    console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç: ${usersWithoutTransactions}`);
    
    const successRate = activeDeposits?.length > 0 
      ? ((usersWithTransactions / activeDeposits.length) * 100).toFixed(1)
      : 0;
    
    console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${successRate}%`);

    if (problemUsers.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:');
      problemUsers.slice(0, 5).forEach(user => {
        console.log(`   - User ID ${user.userId}: –¥–µ–ø–æ–∑–∏—Ç ${user.deposit} UNI, —Å—Ç–∞–≤–∫–∞ ${user.rate}`);
      });
      if (problemUsers.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${problemUsers.length - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const { data: hourStats, error: statsError } = await supabase
      .from('transactions')
      .select('type, amount_uni, amount_ton')
      .eq('type', 'FARMING_REWARD')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString());

    if (!statsError && hourStats) {
      const uniTransactions = hourStats.filter(tx => parseFloat(tx.amount_uni || '0') > 0);
      const tonTransactions = hourStats.filter(tx => parseFloat(tx.amount_ton || '0') > 0);
      
      const totalUni = uniTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0);
      const totalTon = tonTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);

      console.log('\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:');
      console.log(`   UNI: ${totalUni.toFixed(6)} UNI (${uniTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
      console.log(`   TON: ${totalTon.toFixed(6)} TON (${tonTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    console.log('\n=====================================');
    if (successRate >= 90) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê FARMING –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
      console.log(`   ${successRate}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥`);
    } else if (successRate >= 50) {
      console.log('‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê FARMING –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û');
      console.log(`   –¢–æ–ª—å–∫–æ ${successRate}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥`);
    } else {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –° FARMING!');
      console.log(`   –¢–æ–ª—å–∫–æ ${successRate}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
verifyFarmingFix().catch(console.error);