import { supabase } from '../core/supabase.js';

async function checkColumnTypes() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –ö–û–õ–û–ù–û–ö');
  console.log('='.repeat(80));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data } = await supabase
      .from('users')
      .select('ton_boost_package, ton_boost_package_id')
      .limit(10);

    if (data) {
      console.log('\n–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
      data.forEach((row, i) => {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`);
        console.log(`  ton_boost_package: ${row.ton_boost_package} (${typeof row.ton_boost_package})`);
        console.log(`  ton_boost_package_id: ${row.ton_boost_package_id} (${typeof row.ton_boost_package_id})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const { data: specificData } = await supabase
      .from('users')
      .select('ton_boost_package, ton_boost_package_id')
      .not('ton_boost_package', 'is', null)
      .limit(5);

    if (specificData && specificData.length > 0) {
      console.log('\n\n–ó–∞–ø–∏—Å–∏ —Å ton_boost_package –Ω–µ NULL:');
      specificData.forEach(row => {
        console.log(`- ton_boost_package: ${row.ton_boost_package}, ton_boost_package_id: ${row.ton_boost_package_id}`);
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkColumnTypes();