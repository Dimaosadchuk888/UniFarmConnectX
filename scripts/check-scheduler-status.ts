/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { supabase } from '../core/supabase';

async function checkSchedulerStatus() {
  console.log('\n' + '='.repeat(80));
  console.log('–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í –ò FARMING –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('='.repeat(80) + '\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ farming —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('1. –ü–û–°–õ–ï–î–ù–ò–ï FARMING –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):');
    const { data: lastFarming, error: farmingError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (farmingError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', farmingError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${lastFarming?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      lastFarming?.forEach(tx => {
        const time = new Date(tx.created_at);
        const now = new Date();
        const hoursAgo = ((now.getTime() - time.getTime()) / (1000 * 60 * 60)).toFixed(1);
        console.log(`  - User ${tx.user_id}: ${tx.amount} ${tx.currency} (${time.toLocaleString()}) - ${hoursAgo} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`);
      });
      
      if (lastFarming && lastFarming.length > 0) {
        const lastTime = new Date(lastFarming[0].created_at);
        const now = new Date();
        const minutesAgo = Math.floor((now.getTime() - lastTime.getTime()) / (1000 * 60));
        
        if (minutesAgo > 10) {
          console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥!`);
          console.log('   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.');
        }
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤
    console.log('\n2. –ê–ö–¢–ò–í–ù–´–ï –§–ê–†–ú–ï–†–´:');
    const { data: activeFarmers, error: farmersError } = await supabase
      .from('users')
      .select('id, username, uni_farming_active, uni_deposit_amount, uni_farming_last_update')
      .eq('uni_farming_active', true)
      .order('uni_farming_last_update', { ascending: false })
      .limit(10);
    
    if (farmersError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞—Ä–º–µ—Ä–æ–≤:', farmersError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${activeFarmers?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤:`);
      activeFarmers?.forEach(farmer => {
        const lastUpdate = farmer.uni_farming_last_update ? new Date(farmer.uni_farming_last_update) : null;
        if (lastUpdate) {
          const now = new Date();
          const minutesAgo = Math.floor((now.getTime() - lastUpdate.getTime()) / (1000 * 60));
          console.log(`  - User ${farmer.id}: –¥–µ–ø–æ–∑–∏—Ç ${farmer.uni_deposit_amount} UNI, –æ–±–Ω–æ–≤–ª–µ–Ω ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        } else {
          console.log(`  - User ${farmer.id}: –¥–µ–ø–æ–∑–∏—Ç ${farmer.uni_deposit_amount} UNI, –ù–ò–ö–û–ì–î–ê –ù–ï –û–ë–ù–û–í–õ–Ø–õ–°–Ø`);
        }
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n3. –ü–û–°–õ–ï–î–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const { data: lastReferral } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${lastReferral?.length || 0} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
    lastReferral?.forEach(tx => {
      const time = new Date(tx.created_at);
      console.log(`  - User ${tx.user_id}: ${tx.amount} ${tx.currency} –æ—Ç User ${tx.source_user_id} (${time.toLocaleString()})`);
    });
    
    // 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\n4. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    
    if (lastFarming && lastFarming.length > 0) {
      const lastTime = new Date(lastFarming[0].created_at);
      const now = new Date();
      const hoursAgo = ((now.getTime() - lastTime.getTime()) / (1000 * 60 * 60)).toFixed(1);
      
      if (parseFloat(hoursAgo) > 1) {
        console.log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!');
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±—ã–ª–æ ${hoursAgo} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥.`);
        console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.');
        console.log('\nüí° –†–ï–®–ï–ù–ò–ï: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏.');
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ User 184 –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ñ–∞—Ä–º–∏—Ç—å
    console.log('\n5. –°–¢–ê–¢–£–° –†–ï–§–ï–†–ê–õ–û–í USER 184:');
    const referralIds = [186, 187, 188, 189, 190];
    const { data: referralStatus } = await supabase
      .from('users')
      .select('id, username, uni_farming_active, uni_deposit_amount, uni_farming_last_update')
      .in('id', referralIds)
      .order('id');
    
    referralStatus?.forEach(ref => {
      const status = ref.uni_farming_active ? '‚úì –ê–ö–¢–ò–í–ï–ù' : '‚úó –ù–ï –ê–ö–¢–ò–í–ï–ù';
      const lastUpdate = ref.uni_farming_last_update ? new Date(ref.uni_farming_last_update) : null;
      const updateInfo = lastUpdate 
        ? `–æ–±–Ω–æ–≤–ª–µ–Ω ${new Date(ref.uni_farming_last_update).toLocaleString()}`
        : '–ù–ò–ö–û–ì–î–ê –ù–ï –û–ë–ù–û–í–õ–Ø–õ–°–Ø';
      console.log(`  - User ${ref.id}: ${status}, –¥–µ–ø–æ–∑–∏—Ç ${ref.uni_deposit_amount} UNI, ${updateInfo}`);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(80) + '\n');
  
  process.exit(0);
}

checkSchedulerStatus();