#!/usr/bin/env tsx
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π TON –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users
 */

import { supabase } from '../core/supabase';

async function checkTonWalletFields() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô TON –ö–û–®–ï–õ–¨–ö–ê –í –ë–î ===\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data: sampleUser, error } = await supabase
      .from('users')
      .select('*')
      .limit(1)
      .single();
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      return;
    }
    
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π TON –∫–æ—à–µ–ª—å–∫–∞
    const tonWalletFields = [
      'ton_wallet_address',
      'ton_wallet_verified', 
      'ton_wallet_linked_at'
    ];
    
    const existingFields: string[] = [];
    const missingFields: string[] = [];
    
    tonWalletFields.forEach(field => {
      if (field in sampleUser) {
        existingFields.push(field);
        console.log(`‚úÖ ${field} - –°–£–©–ï–°–¢–í–£–ï–¢`);
      } else {
        missingFields.push(field);
        console.log(`‚ùå ${field} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      }
    });
    
    console.log('\nüìä –ò–¢–û–ì–û:');
    console.log(`- –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π: ${existingFields.length}`);
    console.log(`- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π: ${missingFields.length}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ TON –∞–¥—Ä–µ—Å–∞–º–∏
    if (existingFields.includes('ton_wallet_address')) {
      const { data: tonUsers, error: tonError } = await supabase
        .from('users')
        .select('id, username, ton_wallet_address, ton_wallet_verified')
        .not('ton_wallet_address', 'is', null)
        .limit(10);
        
      if (!tonError && tonUsers) {
        console.log(`\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –∞–¥—Ä–µ—Å–∞–º–∏: ${tonUsers.length}`);
        tonUsers.forEach(user => {
          console.log(`- User ${user.id}: ${user.ton_wallet_address} (verified: ${user.ton_wallet_verified || false})`);
        });
      }
    }
    
    // 3. SQL –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    if (missingFields.length > 0) {
      console.log('\n‚ö†Ô∏è SQL –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–û–õ–ï–ô:');
      console.log('```sql');
      missingFields.forEach(field => {
        if (field === 'ton_wallet_address') {
          console.log(`ALTER TABLE users ADD COLUMN ${field} TEXT;`);
        } else if (field === 'ton_wallet_verified') {
          console.log(`ALTER TABLE users ADD COLUMN ${field} BOOLEAN DEFAULT FALSE;`);
        } else if (field === 'ton_wallet_linked_at') {
          console.log(`ALTER TABLE users ADD COLUMN ${field} TIMESTAMP;`);
        }
      });
      console.log('```');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints:');
    console.log('- POST /api/v2/wallet/connect-ton - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞');
    console.log('- POST /api/v2/wallet/save-ton-address - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTonWalletFields()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });