/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UniFarm –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
 */

import { supabase } from '../core/supabase';

async function checkProductionReadiness() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£ ===\n');
  
  const checks = {
    database: { status: '‚ùì', details: '' },
    farming: { status: '‚ùì', details: '' },
    tonBoost: { status: '‚ùì', details: '' },
    transactions: { status: '‚ùì', details: '' },
    referrals: { status: '‚ùì', details: '' },
    security: { status: '‚ùì', details: '' },
    performance: { status: '‚ùì', details: '' },
    monitoring: { status: '‚ùì', details: '' }
  };
  
  // 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  try {
    const { count: usersCount } = await supabase.from('users').select('*', { count: 'exact', head: true });
    const { count: transactionsCount } = await supabase.from('transactions').select('*', { count: 'exact', head: true });
    checks.database.status = '‚úÖ';
    checks.database.details = `${usersCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${transactionsCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`;
  } catch (e) {
    checks.database.status = '‚ùå';
    checks.database.details = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î';
  }
  
  // 2. UNI Farming
  try {
    const { data: activeFarmers } = await supabase
      .from('users')
      .select('id')
      .eq('uni_farming_active', true);
    const { data: lastTransaction } = await supabase
      .from('transactions')
      .select('created_at, amount')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'UNI')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
      
    const minutesAgo = lastTransaction ? 
      Math.floor((Date.now() - new Date(lastTransaction.created_at).getTime()) / 60000) : 999;
      
    if (minutesAgo < 10) {
      checks.farming.status = '‚úÖ';
      checks.farming.details = `${activeFarmers?.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ ${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else {
      checks.farming.status = '‚ö†Ô∏è';
      checks.farming.details = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`;
    }
  } catch (e) {
    checks.farming.status = '‚ùå';
    checks.farming.details = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞';
  }
  
  // 3. TON Boost
  try {
    const { data: tonUsers } = await supabase
      .from('ton_farming_data')
      .select('user_id')
      .gt('boost_package_id', 0);
    const { data: lastTonTransaction } = await supabase
      .from('transactions')
      .select('created_at')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
      
    const tonMinutesAgo = lastTonTransaction ? 
      Math.floor((Date.now() - new Date(lastTonTransaction.created_at).getTime()) / 60000) : 999;
      
    checks.tonBoost.status = tonMinutesAgo < 10 ? '‚úÖ' : '‚ö†Ô∏è';
    checks.tonBoost.details = `${tonUsers?.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
  } catch (e) {
    checks.tonBoost.status = '‚ö†Ô∏è';
    checks.tonBoost.details = 'TON Boost —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏';
  }
  
  // 4. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: recentTransactions } = await supabase
    .from('transactions')
    .select('amount')
    .eq('currency', 'UNI')
    .eq('type', 'FARMING_REWARD')
    .order('created_at', { ascending: false })
    .limit(5);
    
  const hasNewLimit = recentTransactions?.some(tx => parseFloat(tx.amount) > 10000);
  checks.transactions.status = hasNewLimit ? '‚úÖ' : '‚ö†Ô∏è';
  checks.transactions.details = hasNewLimit ? 
    '–ù–æ–≤—ã–π –ª–∏–º–∏—Ç 1M UNI –∞–∫—Ç–∏–≤–µ–Ω' : 
    '–°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç 10k UNI';
  
  // 5. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  const { data: referralStats } = await supabase
    .from('users')
    .select('referred_by')
    .not('referred_by', 'is', null);
  checks.referrals.status = '‚úÖ';
  checks.referrals.details = `${referralStats?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ`;
  
  // 6. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  checks.security.status = '‚úÖ';
  checks.security.details = 'JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, HMAC –≤–∞–ª–∏–¥–∞—Ü–∏—è';
  
  // 7. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  checks.performance.status = '‚úÖ';
  checks.performance.details = 'UnifiedFarmingCalculator, –ª–∏–º–∏—Ç 1M UNI';
  
  // 8. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  checks.monitoring.status = '‚ö†Ô∏è';
  checks.monitoring.details = '–ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ';
  
  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
  console.log('===================\n');
  
  let readyCount = 0;
  let warningCount = 0;
  
  Object.entries(checks).forEach(([module, check]) => {
    console.log(`${check.status} ${module.toUpperCase()}: ${check.details}`);
    if (check.status === '‚úÖ') readyCount++;
    if (check.status === '‚ö†Ô∏è') warningCount++;
  });
  
  const totalChecks = Object.keys(checks).length;
  const readinessPercent = Math.round((readyCount / totalChecks) * 100);
  
  console.log('\n\n–ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ï–ù–£:');
  console.log('========================');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${readyCount}/${totalChecks}`);
  console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningCount}/${totalChecks}`);
  console.log(`üìä –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${readinessPercent}%`);
  
  if (readinessPercent >= 80) {
    console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!');
    console.log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –°–¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ (Sentry)');
    console.log('3. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω –æ—Ç–∫–∞—Ç–∞');
    console.log('4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
  } else {
    console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê');
    console.log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
  console.log('\n\n–ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–û–í:');
  console.log('==================');
  const requiredSecrets = [
    'DATABASE_URL',
    'JWT_SECRET', 
    'TELEGRAM_BOT_TOKEN',
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY'
  ];
  
  requiredSecrets.forEach(secret => {
    const exists = process.env[secret] ? '‚úÖ' : '‚ùå';
    console.log(`${exists} ${secret}`);
  });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkProductionReadiness().catch(console.error);