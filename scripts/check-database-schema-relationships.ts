#!/usr/bin/env tsx
/**
 * –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –ë–î –ò –°–í–Ø–ó–ï–ô - –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´ USER 287
 */

import { supabase } from '../core/supabase';

async function checkDatabaseSchemaRelationships() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –ë–î –ò –°–í–Ø–ó–ï–ô - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê USER 287');
  console.log('===================================================');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`);

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ User 287 –Ω–∞–ø—Ä—è–º—É—é
  console.log('1. üìä –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• USER 287:');
  
  const { data: user287, error: userError } = await supabase
    .from('users')
    .select('id, ton_boost_package, ton_boost_package_id, ton_boost_rate, ton_boost_start_timestamp')
    .eq('id', 287)
    .single();

  console.log('   –¢–∞–±–ª–∏—Ü–∞ users:');
  if (userError) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${userError.message}`);
  } else {
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${JSON.stringify(user287, null, 2)}`);
  }

  const { data: farming287, error: farmingError } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, boost_active, farming_balance, farming_rate, start_date, end_date')
    .eq('user_id', 287);

  console.log('\n   –¢–∞–±–ª–∏—Ü–∞ ton_farming_data:');
  if (farmingError) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${farmingError.message}`);
  } else {
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${JSON.stringify(farming287, null, 2)}`);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–≤—è–∑—É—é—â–∏—Ö –ø–æ–ª—è—Ö
  console.log('\n2. üîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í –°–í–Ø–ó–£–Æ–©–ò–• –ü–û–õ–Ø–•:');
  
  if (user287 && farming287?.length > 0) {
    const userRecord = user287;
    const farmingRecord = farming287[0];
    
    console.log('   –ü–æ–ª—è —Å–≤—è–∑–∏:');
    console.log(`   ‚Ä¢ users.id: ${userRecord.id} (—Ç–∏–ø: ${typeof userRecord.id})`);
    console.log(`   ‚Ä¢ ton_farming_data.user_id: ${farmingRecord.user_id} (—Ç–∏–ø: ${typeof farmingRecord.user_id})`);
    console.log(`   ‚Ä¢ users.ton_boost_package: ${userRecord.ton_boost_package} (—Ç–∏–ø: ${typeof userRecord.ton_boost_package})`);
    console.log(`   ‚Ä¢ users.ton_boost_package_id: ${userRecord.ton_boost_package_id} (—Ç–∏–ø: ${typeof userRecord.ton_boost_package_id})`);
    console.log(`   ‚Ä¢ ton_farming_data.boost_package_id: ${farmingRecord.boost_package_id} (—Ç–∏–ø: ${typeof farmingRecord.boost_package_id})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const userIdMatch = userRecord.id == farmingRecord.user_id;
    const packageIdMatch = userRecord.ton_boost_package == farmingRecord.boost_package_id;
    
    console.log('\n   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π:');
    console.log(`   ‚Ä¢ id = user_id: ${userIdMatch ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'} (${userRecord.id} vs ${farmingRecord.user_id})`);
    console.log(`   ‚Ä¢ ton_boost_package = boost_package_id: ${packageIdMatch ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'} (${userRecord.ton_boost_package} vs ${farmingRecord.boost_package_id})`);
    
    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    console.log('\n   –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤:');
    console.log(`   ‚Ä¢ id === user_id: ${userRecord.id === farmingRecord.user_id ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`   ‚Ä¢ ton_boost_package === boost_package_id: ${userRecord.ton_boost_package === farmingRecord.boost_package_id ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  console.log('\n3. üîç –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ê–ë–û–¢–ê–Æ–©–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú (User 25):');
  
  const { data: user25 } = await supabase
    .from('users')
    .select('id, ton_boost_package, ton_boost_package_id, ton_boost_rate')
    .eq('id', 25)
    .single();

  const { data: farming25 } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, boost_active, farming_balance')
    .eq('user_id', 25);

  if (user25 && farming25?.length > 0) {
    console.log('   User 25 - –¢–∞–±–ª–∏—Ü–∞ users:');
    console.log(`   ${JSON.stringify(user25, null, 2)}`);
    console.log('\n   User 25 - –¢–∞–±–ª–∏—Ü–∞ ton_farming_data:');
    console.log(`   ${JSON.stringify(farming25[0], null, 2)}`);
    
    console.log('\n   –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö User 25:');
    console.log(`   ‚Ä¢ id: ${user25.id} (${typeof user25.id})`);
    console.log(`   ‚Ä¢ user_id: ${farming25[0].user_id} (${typeof farming25[0].user_id})`);
    console.log(`   ‚Ä¢ ton_boost_package: ${user25.ton_boost_package} (${typeof user25.ton_boost_package})`);
    console.log(`   ‚Ä¢ boost_package_id: ${farming25[0].boost_package_id} (${typeof farming25[0].boost_package_id})`);
  }

  // 4. –†—É—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è JOIN –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  console.log('\n4. üß™ –†–£–ß–ù–ê–Ø –ò–ú–ò–¢–ê–¶–ò–Ø JOIN –õ–û–ì–ò–ö–ò:');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost
  const { data: allUsers } = await supabase
    .from('users')
    .select('id, ton_boost_package, ton_boost_package_id')
    .not('ton_boost_package', 'is', null);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ farming
  const { data: allFarming } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, boost_active, farming_balance')
    .eq('boost_active', true)
    .gt('farming_balance', 0);

  console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${allUsers?.length || 0}`);
  console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π farming: ${allFarming?.length || 0}`);

  if (allUsers && allFarming) {
    // –†—É—á–Ω–æ–π JOIN
    const manualJoin = [];
    
    allUsers.forEach(user => {
      allFarming.forEach(farming => {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã JOIN
        if (user.id == farming.user_id) {
          manualJoin.push({
            user_id: user.id,
            ton_boost_package: user.ton_boost_package,
            boost_package_id: farming.boost_package_id,
            farming_balance: farming.farming_balance,
            join_method: 'user.id = farming.user_id'
          });
        }
      });
    });

    console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É—á–Ω–æ–≥–æ JOIN: ${manualJoin.length} –∑–∞–ø–∏—Å–µ–π`);
    
    const user287InManualJoin = manualJoin.find(record => record.user_id === 287);
    console.log(`   User 287 –≤ —Ä—É—á–Ω–æ–º JOIN: ${user287InManualJoin ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    if (user287InManualJoin) {
      console.log(`   –î–∞–Ω–Ω—ã–µ User 287: ${JSON.stringify(user287InManualJoin, null, 2)}`);
    } else {
      console.log('\n   üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê User 287:');
      const user287InUsers = allUsers.find(u => u.id === 287);
      const user287InFarming = allFarming.find(f => f.user_id == 287);
      
      console.log(`   ‚Ä¢ User 287 –≤ —Å–ø–∏—Å–∫–µ users: ${user287InUsers ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      console.log(`   ‚Ä¢ User 287 –≤ —Å–ø–∏—Å–∫–µ farming: ${user287InFarming ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (user287InUsers && user287InFarming) {
        console.log('\n   –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:');
        console.log(`   ‚Ä¢ users.id: ${user287InUsers.id} (${typeof user287InUsers.id})`);
        console.log(`   ‚Ä¢ farming.user_id: ${user287InFarming.user_id} (${typeof user287InFarming.user_id})`);
        console.log(`   ‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${user287InUsers.id == user287InFarming.user_id ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        console.log(`   ‚Ä¢ –°—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${user287InUsers.id === user287InFarming.user_id ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (user287InUsers.id != user287InFarming.user_id) {
          console.log('\n   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö user_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
          console.log(`      users.id –∏–º–µ–µ—Ç —Ç–∏–ø ${typeof user287InUsers.id}`);
          console.log(`      ton_farming_data.user_id –∏–º–µ–µ—Ç —Ç–∏–ø ${typeof user287InFarming.user_id}`);
        }
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n   üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ JOIN:');
    manualJoin.forEach(record => {
      console.log(`   ‚Ä¢ User ${record.user_id}: package ${record.ton_boost_package}, farming ${record.farming_balance} TON`);
    });
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL —Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
  console.log('\n5. üóÉÔ∏è –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í –ë–î:');
  
  try {
    const { data: usersSchema, error: usersSchemaError } = await supabase.rpc('get_table_schema', { table_name: 'users' });
    const { data: farmingSchema, error: farmingSchemaError } = await supabase.rpc('get_table_schema', { table_name: 'ton_farming_data' });
    
    if (usersSchemaError || farmingSchemaError) {
      console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ RPC');
    } else {
      console.log('   ‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ RPC');
    }
  } catch (e) {
    console.log('   ‚ùå RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
  }

  // 6. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
  console.log('\n6. üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó:');
  console.log('‚ïê'.repeat(50));

  if (user287 && farming287?.length > 0) {
    const userRecord = user287;
    const farmingRecord = farming287[0];
    
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö User 287:');
    console.log(`   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ users: ‚úÖ –ï–°–¢–¨`);
    console.log(`   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ ton_farming_data: ‚úÖ –ï–°–¢–¨`);
    console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å farming: ${farmingRecord.boost_active ? '‚úÖ –ê–ö–¢–ò–í–ï–ù' : '‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
    console.log(`   ‚Ä¢ –ë–∞–ª–∞–Ω—Å farming: ${farmingRecord.farming_balance} TON`);
    
    const typeMatch = typeof userRecord.id === typeof farmingRecord.user_id;
    const valueMatch = userRecord.id == farmingRecord.user_id;
    
    console.log(`\nüîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ —Ç–∞–±–ª–∏—Ü:`);
    console.log(`   ‚Ä¢ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç: ${typeMatch ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`   ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç: ${valueMatch ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    if (!typeMatch) {
      console.log('\n‚ùå –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ù–ê–ô–î–ï–ù–ê:');
      console.log('   –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–• –≤ —Å–≤—è–∑—É—é—â–∏—Ö –ø–æ–ª—è—Ö');
      console.log(`   ‚Ä¢ users.id: —Ç–∏–ø ${typeof userRecord.id}`);
      console.log(`   ‚Ä¢ ton_farming_data.user_id: —Ç–∏–ø ${typeof farmingRecord.user_id}`);
      console.log('\n   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É:');
      console.log('   1. Supabase JOIN –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('   2. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã');
      console.log('   3. User 287 –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ');
    } else if (!valueMatch) {
      console.log('\n‚ùå –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ù–ê–ô–î–ï–ù–ê:');
      console.log('   –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô –≤ —Å–≤—è–∑—É—é—â–∏—Ö –ø–æ–ª—è—Ö');
      console.log(`   ‚Ä¢ users.id: ${userRecord.id}`);
      console.log(`   ‚Ä¢ ton_farming_data.user_id: ${farmingRecord.user_id}`);
    } else {
      console.log('\n‚ö†Ô∏è –î–ê–ù–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´, –ü–†–û–ë–õ–ï–ú–ê –í –î–†–£–ì–û–ú –ú–ï–°–¢–ï');
      console.log('   –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–ª–∏ —Å—Ö–µ–º–µ Supabase');
    }
  }

  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ö–µ–º—ã –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫
checkDatabaseSchemaRelationships()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });