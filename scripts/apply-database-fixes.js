/**
 * UniFarm Database Fix Application Script
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase API
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseKey) {
  console.error('‚ùå SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

async function applyDatabaseFixes() {
  console.log(`${colors.cyan}${colors.bright}üîß UniFarm Database Fix Application${colors.reset}`);
  console.log(`${colors.cyan}–î–∞—Ç–∞: ${new Date().toLocaleString()}${colors.reset}\n`);

  const fixes = [
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ tx_hash –≤ transactions',
      check: async () => {
        const { data } = await supabase
          .from('transactions')
          .select('tx_hash')
          .limit(1);
        return data !== null;
      },
      apply: async () => {
        console.log(`${colors.yellow}‚ö†Ô∏è  –ü–æ–ª–µ tx_hash —Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQL –º–∏–≥—Ä–∞—Ü–∏—é${colors.reset}`);
        return false;
      }
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ description –≤ transactions',
      check: async () => {
        const { data } = await supabase
          .from('transactions')
          .select('description')
          .limit(1);
        return data !== null;
      },
      apply: async () => {
        console.log(`${colors.yellow}‚ö†Ô∏è  –ü–æ–ª–µ description —Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQL –º–∏–≥—Ä–∞—Ü–∏—é${colors.reset}`);
        return false;
      }
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ status –≤ users',
      check: async () => {
        const { data } = await supabase
          .from('users')
          .select('status')
          .limit(1);
        return data !== null;
      },
      apply: async () => {
        console.log(`${colors.yellow}‚ö†Ô∏è  –ü–æ–ª–µ status —Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQL –º–∏–≥—Ä–∞—Ü–∏—é${colors.reset}`);
        return false;
      }
    }
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  console.log(`${colors.blue}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:${colors.reset}\n`);
  
  let needsSqlMigration = false;
  
  for (const fix of fixes) {
    process.stdout.write(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${fix.name}... `);
    
    try {
      const exists = await fix.check();
      
      if (exists) {
        console.log(`${colors.green}‚úÖ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${colors.reset}`);
      } else {
        console.log(`${colors.red}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ${colors.reset}`);
        needsSqlMigration = true;
      }
    } catch (error) {
      console.log(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏${colors.reset}`);
      needsSqlMigration = true;
    }
  }

  if (needsSqlMigration) {
    console.log(`\n${colors.yellow}${colors.bright}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:${colors.reset}`);
    console.log(`${colors.yellow}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.${colors.reset}`);
    console.log(`${colors.yellow}–î–ª—è –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –º–∏–≥—Ä–∞—Ü–∏—é.${colors.reset}\n`);
    
    console.log(`${colors.cyan}üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏:${colors.reset}`);
    console.log(`1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard: ${supabaseUrl}`);
    console.log(`2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor`);
    console.log(`3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: ${colors.bright}scripts/fix-database-critical-fields.sql${colors.reset}`);
    console.log(`4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π SQL –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const simpleSql = `
-- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è transactions
ALTER TABLE transactions ADD COLUMN IF NOT EXISTS tx_hash TEXT;
ALTER TABLE transactions ADD COLUMN IF NOT EXISTS description TEXT;
ALTER TABLE transactions ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

-- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è users (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
ALTER TABLE users ADD COLUMN IF NOT EXISTS status VARCHAR(50) DEFAULT 'active';
ALTER TABLE users ADD COLUMN IF NOT EXISTS processed_at TIMESTAMP;
ALTER TABLE users ADD COLUMN IF NOT EXISTS processed_by INTEGER;

-- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è boost_purchases
ALTER TABLE boost_purchases ADD COLUMN IF NOT EXISTS type VARCHAR(50) DEFAULT 'ton_boost';
ALTER TABLE boost_purchases ADD COLUMN IF NOT EXISTS currency VARCHAR(10) DEFAULT 'TON';

-- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è daily_bonus_logs
ALTER TABLE daily_bonus_logs ADD COLUMN IF NOT EXISTS bonus_type VARCHAR(50) DEFAULT 'daily_checkin';
ALTER TABLE daily_bonus_logs ADD COLUMN IF NOT EXISTS previous_balance NUMERIC(20,9) DEFAULT 0;
ALTER TABLE daily_bonus_logs ADD COLUMN IF NOT EXISTS new_balance NUMERIC(20,9) DEFAULT 0;
`;

    fs.writeFileSync(
      path.join(__dirname, 'quick-fix-sql.sql'),
      simpleSql,
      'utf8'
    );
    
    console.log(`${colors.green}‚úÖ –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π SQL —Ñ–∞–π–ª: scripts/quick-fix-sql.sql${colors.reset}`);
  } else {
    console.log(`\n${colors.green}${colors.bright}‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!${colors.reset}`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  console.log(`\n${colors.blue}üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:${colors.reset}`);
  
  const tables = ['users', 'transactions', 'boost_purchases', 'daily_bonus_logs'];
  
  for (const table of tables) {
    const { count } = await supabase
      .from(table)
      .select('*', { count: 'exact', head: true });
    
    console.log(`${table}: ${count || 0} –∑–∞–ø–∏—Å–µ–π`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
applyDatabaseFixes()
  .then(() => {
    console.log(`\n${colors.green}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${colors.reset}`);
  })
  .catch(error => {
    console.error(`\n${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:${colors.reset}`, error);
    process.exit(1);
  });