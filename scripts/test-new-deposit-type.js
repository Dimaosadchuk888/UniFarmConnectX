import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function testNewDepositType() {
  console.log('[TestNewDepositType] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π FARMING_DEPOSIT...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: recentTransactions, error } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['FARMING_DEPOSIT', 'FARMING_REWARD'])
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) {
      console.error('[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const grouped = {};
    recentTransactions.forEach(t => {
      if (!grouped[t.type]) grouped[t.type] = [];
      grouped[t.type].push(t);
    });

    console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º FARMING_DEPOSIT
    if (grouped['FARMING_DEPOSIT']) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${grouped['FARMING_DEPOSIT'].length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ FARMING_DEPOSIT:`);
      grouped['FARMING_DEPOSIT'].slice(0, 3).forEach(t => {
        console.log(`  - ${t.created_at}: User ${t.user_id}, ${t.amount_uni} UNI - ${t.description}`);
      });
    } else {
      console.log('‚ö†Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–∏–ø–∞ FARMING_DEPOSIT –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã FARMING_REWARD
    if (grouped['FARMING_REWARD']) {
      console.log(`\nüìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ FARMING_REWARD (${grouped['FARMING_REWARD'].length} —à—Ç—É–∫):`);
      
      // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)
      const deposits = grouped['FARMING_REWARD'].filter(t => parseFloat(t.amount_uni) < 0);
      if (deposits.length > 0) {
        console.log(`\n  üí∞ –°—Ç–∞—Ä—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã): ${deposits.length}`);
        deposits.slice(0, 2).forEach(t => {
          console.log(`    - ${t.created_at}: User ${t.user_id}, ${t.amount_uni} UNI`);
        });
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
      const rewards = grouped['FARMING_REWARD'].filter(t => parseFloat(t.amount_uni) > 0);
      console.log(`\n  üìä –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${rewards.length}`);
      rewards.slice(0, 2).forEach(t => {
        console.log(`    - ${t.created_at}: User ${t.user_id}, +${t.amount_uni} UNI`);
      });
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('   –ü–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ FARMING_DEPOSIT');

  } catch (error) {
    console.error('[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testNewDepositType();