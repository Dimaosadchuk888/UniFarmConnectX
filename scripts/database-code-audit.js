/**
 * –ü–æ–ª–Ω–∞—è —Å–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã UniFarm
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ –∫–æ–¥–µ
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseKey) {
  console.error('‚ùå SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞
const auditReport = {
  timestamp: new Date().toISOString(),
  database: {
    tables: {},
    missingTables: [],
    totalTables: 0
  },
  codebase: {
    entities: {},
    unmappedFields: [],
    totalEntities: 0
  },
  comparison: {
    matches: [],
    mismatches: [],
    warnings: []
  },
  criticalIssues: [],
  recommendations: []
};

// –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const expectedTables = [
  'users',
  'transactions', 
  'referrals',
  'farming_sessions',
  'user_sessions',
  'boost_purchases',
  'missions',
  'user_missions',
  'airdrops',
  'daily_bonus_logs',
  'withdraw_requests'
];

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ PostgreSQL -> JavaScript
const typeMapping = {
  'integer': ['number', 'int', 'integer'],
  'bigint': ['number', 'bigint'],
  'numeric': ['number', 'decimal', 'float'],
  'text': ['string', 'text'],
  'character varying': ['string', 'varchar'],
  'timestamp': ['Date', 'string', 'timestamp'],
  'timestamp with time zone': ['Date', 'string', 'timestamp'],
  'boolean': ['boolean', 'bool'],
  'json': ['object', 'any', 'json'],
  'jsonb': ['object', 'any', 'jsonb'],
  'uuid': ['string', 'uuid']
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Supabase
async function getTableStructure(tableName) {
  try {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (error) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      return null;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (data && data.length > 0) {
      const fields = Object.keys(data[0]);
      const structure = {};
      
      fields.forEach(field => {
        const value = data[0][field];
        structure[field] = {
          type: typeof value,
          nullable: value === null,
          sample: value
        };
      });
      
      return {
        exists: true,
        fields: structure,
        recordCount: data.length
      };
    }

    // –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–∞—è
    return {
      exists: true,
      fields: {},
      recordCount: 0,
      empty: true
    };

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ${tableName}:`, error.message);
    return null;
  }
}

// –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
function analyzeCodebaseForEntity(entityName) {
  const codeUsage = {
    files: [],
    fields: new Set(),
    types: {},
    services: [],
    controllers: []
  };

  const modulesPath = path.join(__dirname, '..', 'modules');
  const modules = fs.readdirSync(modulesPath);

  modules.forEach(module => {
    const modulePath = path.join(modulesPath, module);
    if (!fs.statSync(modulePath).isDirectory()) return;

    const files = fs.readdirSync(modulePath).filter(f => f.endsWith('.ts') || f.endsWith('.js'));
    
    files.forEach(file => {
      const filePath = path.join(modulePath, file);
      const content = fs.readFileSync(filePath, 'utf-8');

      // –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã
      const tableRegex = new RegExp(`['"\`]${entityName}['"\`]`, 'gi');
      if (tableRegex.test(content)) {
        codeUsage.files.push(`modules/${module}/${file}`);

        // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
        if (file.includes('service')) {
          codeUsage.services.push(`${module}/service`);
          
          // –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –≤ SQL –∑–∞–ø—Ä–æ—Å–∞—Ö –∏ –æ–±—ä–µ–∫—Ç–∞—Ö
          const fieldPatterns = [
            // Supabase select patterns
            /\.select\(['"`]([^'"`]+)['"`]\)/g,
            /\.select\(\s*['"`]([^'"`]+)['"`]\s*\)/g,
            // Object field access
            new RegExp(`${entityName}\\.(\\w+)`, 'g'),
            // Insert/Update patterns
            /\.insert\(\{([^}]+)\}\)/g,
            /\.update\(\{([^}]+)\}\)/g
          ];

          fieldPatterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(content)) !== null) {
              const fields = match[1].split(',').map(f => f.trim());
              fields.forEach(field => {
                // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                const cleanField = field.replace(/['"`\s]/g, '').split(':')[0];
                if (cleanField && !cleanField.includes('*')) {
                  codeUsage.fields.add(cleanField);
                }
              });
            }
          });
        }

        // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        if (file.includes('controller')) {
          codeUsage.controllers.push(`${module}/controller`);
        }

        // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤
        if (file.includes('type') || file.includes('model')) {
          const interfaceRegex = new RegExp(`interface\\s+\\w*${entityName}\\w*\\s*\\{([^}]+)\\}`, 'gis');
          const typeRegex = new RegExp(`type\\s+\\w*${entityName}\\w*\\s*=\\s*\\{([^}]+)\\}`, 'gis');
          
          [interfaceRegex, typeRegex].forEach(regex => {
            let match;
            while ((match = regex.exec(content)) !== null) {
              const typeContent = match[1];
              const fieldMatches = typeContent.match(/(\w+)\s*[?:]?\s*([^;,\n]+)/g);
              
              if (fieldMatches) {
                fieldMatches.forEach(fieldMatch => {
                  const [fieldName, fieldType] = fieldMatch.split(/[?:]/).map(s => s.trim());
                  if (fieldName && fieldType) {
                    codeUsage.fields.add(fieldName);
                    codeUsage.types[fieldName] = fieldType;
                  }
                });
              }
            }
          });
        }
      }
    });
  });

  return codeUsage;
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä
function compareStructures(dbStructure, codeUsage, tableName) {
  const comparison = {
    entity: tableName,
    status: 'unknown',
    issues: [],
    warnings: []
  };

  if (!dbStructure || !dbStructure.exists) {
    comparison.status = 'missing_in_db';
    comparison.issues.push({
      type: 'ERROR',
      message: `–¢–∞–±–ª–∏—Ü–∞ ${tableName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ`,
      files: codeUsage.files
    });
    return comparison;
  }

  if (codeUsage.files.length === 0) {
    comparison.status = 'unused';
    comparison.warnings.push({
      type: 'WARN',
      message: `–¢–∞–±–ª–∏—Ü–∞ ${tableName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ`
    });
    return comparison;
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
  const dbFields = Object.keys(dbStructure.fields);
  const codeFields = Array.from(codeUsage.fields);

  // –ü–æ–ª—è –≤ –∫–æ–¥–µ, –Ω–æ –Ω–µ –≤ –ë–î
  const missingInDb = codeFields.filter(field => !dbFields.includes(field));
  if (missingInDb.length > 0) {
    comparison.issues.push({
      type: 'ERROR',
      message: `–ü–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î`,
      fields: missingInDb,
      files: codeUsage.files
    });
  }

  // –ü–æ–ª—è –≤ –ë–î, –Ω–æ –Ω–µ –≤ –∫–æ–¥–µ
  const unusedInCode = dbFields.filter(field => !codeFields.includes(field) && !['id', 'created_at', 'updated_at'].includes(field));
  if (unusedInCode.length > 0) {
    comparison.warnings.push({
      type: 'WARN',
      message: `–ü–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ`,
      fields: unusedInCode
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
  Object.entries(codeUsage.types).forEach(([field, codeType]) => {
    if (dbStructure.fields[field]) {
      const dbType = dbStructure.fields[field].type;
      const mappedTypes = typeMapping[dbType] || [dbType];
      
      if (!mappedTypes.some(t => codeType.toLowerCase().includes(t))) {
        comparison.warnings.push({
          type: 'WARN',
          message: `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –ø–æ–ª—è ${field}`,
          dbType,
          codeType
        });
      }
    }
  });

  comparison.status = comparison.issues.length > 0 ? 'has_errors' : 'ok';
  return comparison;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞
async function runDatabaseCodeAudit() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ –∫–æ–¥–∞...\n');

  // –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('üìä –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('=' .repeat(50));

  for (const tableName of expectedTables) {
    process.stdout.write(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ${tableName}... `);
    const structure = await getTableStructure(tableName);
    
    if (structure) {
      auditReport.database.tables[tableName] = structure;
      auditReport.database.totalTables++;
      console.log('‚úÖ');
    } else {
      auditReport.database.missingTables.push(tableName);
      console.log('‚ùå');
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }

  // –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
  console.log('\nüìù –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ');
  console.log('=' .repeat(50));

  for (const tableName of expectedTables) {
    process.stdout.write(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è ${tableName}... `);
    const codeUsage = analyzeCodebaseForEntity(tableName);
    auditReport.codebase.entities[tableName] = codeUsage;
    if (codeUsage.files.length > 0) {
      auditReport.codebase.totalEntities++;
    }
    console.log(`–Ω–∞–π–¥–µ–Ω–æ ${codeUsage.files.length} —Ñ–∞–π–ª–æ–≤`);
  }

  // –≠—Ç–∞–ø 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  console.log('\nüîé –≠–¢–ê–ü 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä');
  console.log('=' .repeat(50));

  for (const tableName of expectedTables) {
    const dbStructure = auditReport.database.tables[tableName];
    const codeUsage = auditReport.codebase.entities[tableName];
    const comparison = compareStructures(dbStructure, codeUsage, tableName);
    
    if (comparison.status === 'ok') {
      auditReport.comparison.matches.push(comparison);
      console.log(`‚úÖ ${tableName}: –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ`);
    } else if (comparison.issues.length > 0) {
      auditReport.comparison.mismatches.push(comparison);
      auditReport.criticalIssues.push(...comparison.issues);
      console.log(`‚ùå ${tableName}: ${comparison.issues.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º`);
    } else if (comparison.warnings.length > 0) {
      auditReport.comparison.warnings.push(comparison);
      console.log(`‚ö†Ô∏è  ${tableName}: ${comparison.warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations();

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  printResults();

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  saveReport();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function generateRecommendations() {
  if (auditReport.database.missingTables.length > 0) {
    auditReport.recommendations.push({
      priority: 'CRITICAL',
      action: 'CREATE_MISSING_TABLES',
      description: '–°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      tables: auditReport.database.missingTables,
      sqlScript: 'scripts/supabase-create-remaining-tables.sql'
    });
  }

  auditReport.comparison.mismatches.forEach(mismatch => {
    mismatch.issues.forEach(issue => {
      if (issue.type === 'ERROR' && issue.fields) {
        auditReport.recommendations.push({
          priority: 'HIGH',
          action: 'ADD_MISSING_FIELDS',
          description: `–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É ${mismatch.entity}`,
          table: mismatch.entity,
          fields: issue.fields
        });
      }
    });
  });

  const unusedTables = auditReport.comparison.warnings
    .filter(w => w.status === 'unused')
    .map(w => w.entity);
    
  if (unusedTables.length > 0) {
    auditReport.recommendations.push({
      priority: 'LOW',
      action: 'REVIEW_UNUSED_TABLES',
      description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü',
      tables: unusedTables
    });
  }
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function printResults() {
  console.log('\n\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–í–ï–†–ö–ò –ë–î –ò –ö–û–î–ê');
  console.log('='.repeat(60));

  auditReport.comparison.matches.forEach(match => {
    console.log(`\n‚úÖ –°—É—â–Ω–æ—Å—Ç—å: ${match.entity}`);
    console.log('  - [OK] –í—Å–µ –ø–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç');
  });

  auditReport.comparison.mismatches.forEach(mismatch => {
    console.log(`\n‚ö†Ô∏è –°—É—â–Ω–æ—Å—Ç—å: ${mismatch.entity}`);
    mismatch.issues.forEach(issue => {
      console.log(`  - [ERROR] ${issue.message}`);
      if (issue.fields) {
        console.log(`    –ü–æ–ª—è: ${issue.fields.join(', ')}`);
      }
    });
    mismatch.warnings.forEach(warning => {
      console.log(`  - [WARN] ${warning.message}`);
      if (warning.fields) {
        console.log(`    –ü–æ–ª—è: ${warning.fields.join(', ')}`);
      }
    });
  });

  auditReport.comparison.warnings.forEach(warning => {
    if (warning.status !== 'unused') {
      console.log(`\n‚ö†Ô∏è –°—É—â–Ω–æ—Å—Ç—å: ${warning.entity}`);
      warning.warnings.forEach(w => {
        console.log(`  - [WARN] ${w.message}`);
        if (w.fields) {
          console.log(`    –ü–æ–ª—è: ${w.fields.join(', ')}`);
        }
      });
    }
  });

  console.log('\n\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`–¢–∞–±–ª–∏—Ü –≤ –ë–î: ${auditReport.database.totalTables}/${expectedTables.length}`);
  console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ: ${auditReport.codebase.totalEntities}/${expectedTables.length}`);
  console.log(`–ü–æ–ª–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: ${auditReport.comparison.matches.length}`);
  console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${auditReport.criticalIssues.length}`);
  console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${auditReport.comparison.warnings.length}`);

  const completeness = Math.round((auditReport.comparison.matches.length / expectedTables.length) * 100);
  console.log(`\nüéØ –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${completeness}%`);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
function saveReport() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const reportPath = path.join(__dirname, '..', 'docs', `DATABASE_CODE_AUDIT_${timestamp}.json`);
  
  fs.writeFileSync(reportPath, JSON.stringify(auditReport, null, 2));
  console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

  // –°–æ–∑–¥–∞–Ω–∏–µ markdown –≤–µ—Ä—Å–∏–∏
  const markdownReport = generateMarkdownReport();
  const mdPath = path.join(__dirname, '..', 'docs', `DATABASE_CODE_AUDIT_${timestamp}.md`);
  fs.writeFileSync(mdPath, markdownReport);
  console.log(`üìÑ Markdown –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${mdPath}`);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞
function generateMarkdownReport() {
  let md = `# –û—Ç—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ –∫–æ–¥–∞ UniFarm\n\n`;
  md += `**–î–∞—Ç–∞:** ${auditReport.timestamp}\n\n`;
  
  md += `## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
  md += `- **–¢–∞–±–ª–∏—Ü –≤ –ë–î:** ${auditReport.database.totalTables}/${expectedTables.length}\n`;
  md += `- **–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ:** ${auditReport.codebase.totalEntities}/${expectedTables.length}\n`;
  md += `- **–ü–æ–ª–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π:** ${auditReport.comparison.matches.length}\n`;
  md += `- **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:** ${auditReport.criticalIssues.length}\n`;
  md += `- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** ${auditReport.comparison.warnings.length}\n\n`;

  md += `## ‚úÖ –°—É—â–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º\n\n`;
  auditReport.comparison.matches.forEach(match => {
    md += `- **${match.entity}** - –≤—Å–µ –ø–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç\n`;
  });

  if (auditReport.comparison.mismatches.length > 0) {
    md += `\n## ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è\n\n`;
    auditReport.comparison.mismatches.forEach(mismatch => {
      md += `### ${mismatch.entity}\n\n`;
      mismatch.issues.forEach(issue => {
        md += `- **[ERROR]** ${issue.message}\n`;
        if (issue.fields) {
          md += `  - –ü–æ–ª—è: \`${issue.fields.join('`, `')}\`\n`;
        }
        if (issue.files) {
          md += `  - –§–∞–π–ª—ã: ${issue.files.join(', ')}\n`;
        }
      });
      md += '\n';
    });
  }

  if (auditReport.recommendations.length > 0) {
    md += `## üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`;
    auditReport.recommendations.forEach(rec => {
      md += `### ${rec.priority}: ${rec.action}\n`;
      md += `${rec.description}\n\n`;
      if (rec.tables) {
        md += `–¢–∞–±–ª–∏—Ü—ã: \`${rec.tables.join('`, `')}\`\n\n`;
      }
      if (rec.fields) {
        md += `–ü–æ–ª—è: \`${rec.fields.join('`, `')}\`\n\n`;
      }
    });
  }

  return md;
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
runDatabaseCodeAudit()
  .then(() => {
    console.log('\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  })
  .catch(error => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞:', error.message);
    process.exit(1);
  });