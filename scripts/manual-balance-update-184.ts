/**
 * –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184 –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –ë–î
 */

import { supabase } from '../core/supabase';

async function manualBalanceUpdate() {
  console.log('üí∞ –†–£–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 184');
  console.log('=' .repeat(50));
  
  try {
    const userId = 184;
    const addAmount = 100;
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, balance_ton')
      .eq('id', userId)
      .single();
    
    if (userError || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userError);
      return;
    }
    
    const currentBalance = parseFloat(user.balance_ton || '0');
    const newBalance = currentBalance + addAmount;
    
    console.log('üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance, 'TON');
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º:', addAmount, 'TON');
    console.log('üéØ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç:', newBalance, 'TON');
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é
    const { data: updateResult, error: updateError } = await supabase
      .from('users')
      .update({ 
        balance_ton: newBalance.toString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)
      .select('balance_ton');
    
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError);
      return;
    }
    
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', updateResult?.[0]?.balance_ton, 'TON');
    
    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const { data: transResult, error: transError } = await supabase
      .from('transactions')
      .insert({
        user_id: userId,
        type: 'FARMING_REWARD', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å
        amount: addAmount,
        currency: 'TON',
        status: 'completed',
        description: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä—É—á–Ω–æ–µ)',
        metadata: {
          admin_deposit: true,
          manual_top_up: true,
          source: 'manual_balance_update'
        },
        created_at: new Date().toISOString()
      })
      .select('id, amount');
    
    if (transError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transError);
    } else {
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ ID:', transResult?.[0]?.id);
    }
    
    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const { data: finalUser } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', userId)
      .single();
    
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
    console.log('–ë–∞–ª–∞–Ω—Å –≤ –ë–î:', finalUser?.balance_ton, 'TON');
    console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ:', (parseFloat(finalUser?.balance_ton || '0') - currentBalance), 'TON');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
manualBalanceUpdate().then(() => {
  console.log('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});