/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON Farming
 */

import { supabase } from '../core/supabase.js';

async function verifyCalculations() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô TON FARMING ===\n');

  const userId = 74;
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ton_farming_data
  const { data: farmingData, error: farmingError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId)
    .single();

  if (farmingError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∞—Ä–º–∏–Ω–≥–∞:', farmingError);
    return;
  }

  console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data:');
  console.log(`- User ID: ${farmingData.user_id}`);
  console.log(`- Farming Balance: ${farmingData.farming_balance} TON`);
  console.log(`- Farming Rate: ${farmingData.farming_rate * 100}% –≤ –¥–µ–Ω—å`);
  console.log(`- Boost Package ID: ${farmingData.boost_package_id}`);
  console.log(`- Status: ${farmingData.status}`);
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ boost_purchases
  const { data: purchases, error: purchasesError } = await supabase
    .from('boost_purchases')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false });

  if (!purchasesError && purchases) {
    console.log(`\nüì¶ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫ TON Boost: ${purchases.length}`);
    
    // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    const activeDeposits = purchases.filter(p => 
      new Date(p.end_date) > new Date() && 
      p.status === 'confirmed'
    );
    
    console.log(`- –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${activeDeposits.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    activeDeposits.forEach((deposit, index) => {
      console.log(`\n  –î–µ–ø–æ–∑–∏—Ç ${index + 1}:`);
      console.log(`  - Boost ID: ${deposit.boost_id}`);
      console.log(`  - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${deposit.start_date}`);
      console.log(`  - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${deposit.end_date}`);
      console.log(`  - –°—Ç–∞—Ç—É—Å: ${deposit.status}`);
    });
  }

  // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
  const depositAmount = parseFloat(farmingData.farming_balance || 0);
  const dailyRate = parseFloat(farmingData.farming_rate || 0);
  
  console.log('\nüí∞ –†–ê–°–ß–ï–¢ –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:');
  console.log(`- –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositAmount} TON`);
  console.log(`- –°—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å: ${dailyRate * 100}%`);
  
  const dailyIncome = depositAmount * dailyRate;
  const hourlyIncome = dailyIncome / 24;
  const incomePerMinute = hourlyIncome / 60;
  const incomePer5Minutes = incomePerMinute * 5;
  
  console.log(`\n‚úÖ –î–æ—Ö–æ–¥:`);
  console.log(`- –í –¥–µ–Ω—å: ${dailyIncome.toFixed(6)} TON`);
  console.log(`- –í —á–∞—Å: ${hourlyIncome.toFixed(6)} TON`);
  console.log(`- –ó–∞ 5 –º–∏–Ω—É—Ç: ${incomePer5Minutes.toFixed(6)} TON`);
  
  console.log(`\nüìä –ü–†–û–í–ï–†–ö–ê:`);
  console.log(`–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 0.012569 TON –∑–∞ 5 –º–∏–Ω—É—Ç`);
  console.log(`–î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å: ${incomePer5Minutes.toFixed(6)} TON –∑–∞ 5 –º–∏–Ω—É—Ç`);
  
  const difference = Math.abs(0.012569 - incomePer5Minutes);
  if (difference < 0.000001) {
    console.log(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ü–†–ê–í–ò–õ–¨–ù–´–ï!`);
  } else {
    console.log(`‚ùå –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${difference.toFixed(6)} TON`);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: lastTransactions, error: transError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', userId)
    .eq('type', 'FARMING_REWARD')
    .eq('currency', 'TON')
    .order('created_at', { ascending: false })
    .limit(5);

  if (!transError && lastTransactions) {
    console.log(`\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON:`);
    lastTransactions.forEach((tx, index) => {
      const date = new Date(tx.created_at);
      console.log(`${index + 1}. ${date.toLocaleTimeString('ru-RU')}: +${parseFloat(tx.amount).toFixed(6)} TON`);
    });
  }
}

verifyCalculations()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });