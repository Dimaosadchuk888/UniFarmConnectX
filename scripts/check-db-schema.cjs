#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function checkSchema() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ –ë–î ===\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã users
  try {
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .limit(1)
      .single();
    
    if (error && error.code !== 'PGRST116') {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users:', error.message);
    } else if (user) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('üìã –ü–æ–ª—è:', Object.keys(user).join(', '));
    }
  } catch (e) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ users:', e.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  try {
    const { data: types, error } = await supabase
      .from('transactions')
      .select('type')
      .limit(20);
    
    if (error) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ transactions:', error.message);
    } else if (types) {
      const uniqueTypes = [...new Set(types.map(t => t.type))];
      console.log('\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions –¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', uniqueTypes.join(', '));
    }
  } catch (e) {
    console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ transactions:', e.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
  const tables = ['referrals', 'daily_bonus_logs', 'withdraw_requests', 'farming_sessions', 'boost_purchases'];
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü:');
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);
      
      if (error && error.code === 'PGRST116') {
        console.log(`  ‚ùå ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else if (error) {
        console.log(`  ‚ö†Ô∏è  ${table}: ${error.message}`);
      } else {
        console.log(`  ‚úÖ ${table}: –¥–æ—Å—Ç—É–ø–Ω–∞ (${data?.length || 0} –∑–∞–ø–∏—Å–µ–π)`);
      }
    } catch (e) {
      console.log(`  ‚ùå ${table}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞`);
    }
  }
}

checkSchema().catch(console.error);