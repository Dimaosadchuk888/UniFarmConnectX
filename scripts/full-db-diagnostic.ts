/**
 * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
 */

import { supabase } from '../core/supabase';

async function fullDbDiagnostic() {
  console.log('\n' + '='.repeat(80));
  console.log('–ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• UNIFARM');
  console.log('='.repeat(80) + '\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã referrals
    console.log('1. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ referrals:');
    const { data: referralsSample, error: refError } = await supabase
      .from('referrals')
      .select('*')
      .limit(5);
    
    if (refError) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è referrals:', refError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${referralsSample?.length || 0}`);
      if (referralsSample && referralsSample.length > 0) {
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏:', Object.keys(referralsSample[0]));
        console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
        referralsSample.forEach(r => {
          console.log(`  - ID: ${r.id}, created_at: ${r.created_at}`);
          console.log(`    –ü–æ–ª—è:`, r);
        });
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ù–ê–ì–†–ê–î–´ (–Ω–µ —Å–≤—è–∑–∏)
    console.log('\n2. –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´ –í –¢–ê–ë–õ–ò–¶–ï transactions:');
    const { data: referralRewards, error: rewError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (rewError) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', rewError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${referralRewards?.length || 0}`);
      referralRewards?.forEach(tx => {
        console.log(`  - User ${tx.user_id}: ${tx.amount} ${tx.currency} –æ—Ç User ${tx.source_user_id}`);
        console.log(`    –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referral_earnings
    console.log('\n3. –¢–ê–ë–õ–ò–¶–ê referral_earnings:');
    const { data: earnings, count: earningsCount } = await supabase
      .from('referral_earnings')
      .select('*', { count: 'exact' })
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ referral_earnings: ${earningsCount || 0}`);
    if (earnings && earnings.length > 0) {
      console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
      earnings.forEach(e => {
        console.log(`  - User ${e.user_id}: ${e.amount} ${e.currency} –æ—Ç User ${e.source_user_id}`);
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º boost_purchases
    console.log('\n4. –¢–ê–ë–õ–ò–¶–ê boost_purchases:');
    const { data: boostPurchases, count: boostCount, error: boostError } = await supabase
      .from('boost_purchases')
      .select('*', { count: 'exact' })
      .limit(10);
    
    if (boostError) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è boost_purchases:', boostError);
    } else {
      console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ boost_purchases: ${boostCount || 0}`);
      if (boostPurchases && boostPurchases.length > 0) {
        console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
        boostPurchases.forEach(b => {
          console.log(`  - User ${b.user_id}: –ø–∞–∫–µ—Ç ${b.boost_package_id}, —Å—Ç–∞—Ç—É—Å ${b.status}`);
        });
      } else {
        console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ boost_purchases –ü–£–°–¢–ê–Ø!');
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ boost –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('\n5. BOOST –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ï users:');
    const { data: usersWithBoost } = await supabase
      .from('users')
      .select('id, username, ton_boost_package_id')
      .not('ton_boost_package_id', 'is', null)
      .limit(10);
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_package_id: ${usersWithBoost?.length || 0}`);
    usersWithBoost?.forEach(u => {
      console.log(`  - User ${u.id} (${u.username}): boost package ${u.ton_boost_package_id}`);
    });
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∏–ø–∞ BOOST_PURCHASE
    console.log('\n6. BOOST –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í transactions:');
    const { data: boostTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${boostTx?.length || 0}`);
    boostTx?.forEach(tx => {
      console.log(`  - User ${tx.user_id}: ${tx.amount} ${tx.currency}`);
      console.log(`    –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
    });
    
    // 7. –ò—â–µ–º boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    console.log('\n7. –ü–û–ò–°–ö BOOST –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –û–ü–ò–°–ê–ù–ò–Æ:');
    const { data: boostByDesc } = await supabase
      .from('transactions')
      .select('*')
      .like('description', '%boost%')
      .order('created_at', { ascending: false })
      .limit(10);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å "boost" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: ${boostByDesc?.length || 0}`);
    boostByDesc?.forEach(tx => {
      console.log(`  - Type: ${tx.type}, User ${tx.user_id}: ${tx.amount} ${tx.currency}`);
      console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
    });
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ TON farming
    console.log('\n8. TON FARMING –î–ê–ù–ù–´–ï:');
    const { data: tonFarmingData, error: tonError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .limit(10);
    
    if (tonError) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ton_farming_data:', tonError);
    } else {
      console.log(`–ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${tonFarmingData?.length || 0}`);
      tonFarmingData?.forEach(t => {
        console.log(`  - User ${t.user_id}: farming_balance ${t.farming_balance}, boost_package_id ${t.boost_package_id}`);
      });
    }
    
    // 9. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å referrals
    console.log('\n9. –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶–´ referrals (–¥–µ—Ç–∞–ª—å–Ω–æ):');
    const { data: allReferrals } = await supabase
      .from('referrals')
      .select('*')
      .order('created_at', { ascending: false });
    
    console.log(`\n–í–°–ï–ì–û –∑–∞–ø–∏—Å–µ–π –≤ referrals: ${allReferrals?.length || 0}`);
    if (allReferrals && allReferrals.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è reward
      const firstRecord = allReferrals[0];
      const hasRewardFields = 'reward_uni' in firstRecord || 'reward_ton' in firstRecord;
      
      if (hasRewardFields) {
        console.log('‚úì –ü–æ–ª—è reward_uni/reward_ton –°–£–©–ï–°–¢–í–£–Æ–¢ –≤ —Ç–∞–±–ª–∏—Ü–µ');
        
        // –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        const withUniRewards = allReferrals.filter(r => r.reward_uni && parseFloat(r.reward_uni) > 0);
        const withTonRewards = allReferrals.filter(r => r.reward_ton && parseFloat(r.reward_ton) > 0);
        
        console.log(`–ó–∞–ø–∏—Å–µ–π —Å UNI –Ω–∞–≥—Ä–∞–¥–∞–º–∏: ${withUniRewards.length}`);
        console.log(`–ó–∞–ø–∏—Å–µ–π —Å TON –Ω–∞–≥—Ä–∞–¥–∞–º–∏: ${withTonRewards.length}`);
        
        if (withUniRewards.length === 0 && withTonRewards.length === 0) {
          console.log('\n‚ö†Ô∏è  –í–°–ï –ø–æ–ª—è reward_uni –∏ reward_ton —Ä–∞–≤–Ω—ã 0!');
          console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥—ã –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É referrals.');
          console.log('   –ù–∞–≥—Ä–∞–¥—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions —Å —Ç–∏–ø–æ–º REFERRAL_REWARD.');
        }
      } else {
        console.log('‚ùå –ü–æ–ª—è reward_uni/reward_ton –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ —Ç–∞–±–ª–∏—Ü–µ');
      }
    }
    
    // 10. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\n' + '='.repeat(80));
    console.log('–ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log('='.repeat(80));
    
    console.log('\nüìä –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:');
    console.log('  - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –°–í–Ø–ó–ò —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ "referrals"');
    console.log('  - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ù–ê–ì–†–ê–î–´ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ "transactions" (type = REFERRAL_REWARD)');
    console.log('  - –ü–æ–ª—è reward_uni/reward_ton –≤ —Ç–∞–±–ª–∏—Ü–µ referrals –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è (–≤—Å–µ–≥–¥–∞ 0)');
    
    console.log('\nüìä BOOST –°–ò–°–¢–ï–ú–ê:');
    console.log('  - –¢–∞–±–ª–∏—Ü–∞ boost_purchases —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ü–£–°–¢–ê–Ø');
    console.log('  - –î–∞–Ω–Ω—ã–µ –æ boost —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ users (–ø–æ–ª–µ ton_boost_package_id)');
    console.log('  - –ü–æ–∫—É–ø–∫–∏ boost –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ transactions (type = BOOST_PURCHASE –∏–ª–∏ FARMING_REWARD)');
    console.log('  - –ê–∫—Ç–∏–≤–Ω—ã–µ boost —Ñ–∞—Ä–º–µ—Ä—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ ton_farming_data');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(80) + '\n');
  
  process.exit(0);
}

fullDbDiagnostic();