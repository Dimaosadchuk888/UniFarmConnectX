/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON Boost –¥–æ—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 184
 */

import { supabase } from '../core/supabase';

async function verifyTonBoostIncome() {
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –ù–ê–ß–ò–°–õ–ï–ù–ò–ô TON BOOST –î–û–•–û–î–û–í');
  console.log('=' .repeat(65));
  
  const userId = 184;
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüí∞ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    const { data: user } = await supabase
      .from('users')
      .select('balance_ton, ton_boost_active, ton_boost_rate')
      .eq('id', userId)
      .single();
    
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('farming_balance, farming_rate')
      .eq('user_id', userId.toString())
      .single();
    
    console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å TON:', user?.balance_ton);
    console.log('TON Boost –∞–∫—Ç–∏–≤–µ–Ω:', user?.ton_boost_active);
    console.log('–ö—É—Ä—Å –∏–∑ users:', user?.ton_boost_rate, 'TON/—Å–µ–∫');
    console.log('–î–µ–ø–æ–∑–∏—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞:', farmingData?.farming_balance, 'TON');
    console.log('–ö—É—Ä—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞:', farmingData?.farming_rate, 'TON/—Å–µ–∫');
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
    
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –î–û–•–û–î–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç):');
    const { data: incomeTransactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .gte('created_at', thirtyMinutesAgo)
      .in('type', ['FARMING_REWARD', 'TON_BOOST_REWARD'])
      .eq('currency', 'TON')
      .order('created_at', { ascending: false });
    
    if (incomeTransactions && incomeTransactions.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${incomeTransactions.length} –¥–æ—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);
      
      let totalIncome = 0;
      incomeTransactions.forEach((t, i) => {
        const amount = parseFloat(t.amount || '0');
        totalIncome += amount;
        console.log(`${i+1}. ${t.created_at}: +${amount} TON (${t.type})`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${t.description}`);
      });
      
      console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ 30 –º–∏–Ω—É—Ç: ${totalIncome} TON`);
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
      if (farmingData?.farming_rate) {
        const rate = parseFloat(farmingData.farming_rate);
        const timePassedSeconds = incomeTransactions.length * 300; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        const expectedIncome = rate * timePassedSeconds;
        
        console.log('\nüßÆ –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò:');
        console.log(`–ö—É—Ä—Å: ${rate} TON/—Å–µ–∫`);
        console.log(`–í—Ä–µ–º—è: ${timePassedSeconds} —Å–µ–∫—É–Ω–¥ (${timePassedSeconds/60} –º–∏–Ω—É—Ç)`);
        console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${expectedIncome} TON`);
        console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥: ${totalIncome} TON`);
        console.log(`–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${Math.abs(expectedIncome - totalIncome)} TON`);
        
        if (Math.abs(expectedIncome - totalIncome) < 0.001) {
          console.log('‚úÖ –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ö–û–†–†–ï–ö–¢–ù–´');
        } else {
          console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û –û–¢–ö–õ–û–ù–ï–ù–ò–ï –í –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø–•');
        }
      }
    } else {
      console.log('‚ùå –ù–ï–¢ –î–û–•–û–î–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 30 –ú–ò–ù–£–¢');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã –∏ –∏—Ö –∫—É—Ä—Å—ã
    console.log('\nüì¶ –ü–†–û–í–ï–†–ö–ê –ö–£–†–°–û–í –ü–ê–ö–ï–¢–û–í:');
    const { data: packages } = await supabase
      .from('boost_packages')
      .select('*')
      .order('id');
    
    if (packages) {
      packages.forEach(p => {
        const dailyRate = parseFloat(p.rate_ton_per_second) * 86400;
        const annualRate = (dailyRate / parseFloat(p.min_amount)) * 365 * 100;
        console.log(`–ü–∞–∫–µ—Ç "${p.name}": ${p.rate_ton_per_second} TON/—Å–µ–∫`);
        console.log(`  –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${dailyRate} TON/–¥–µ–Ω—å`);
        console.log(`  –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${annualRate.toFixed(0)}%`);
      });
    }
    
    // 5. –°–∏–º—É–ª—è—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    if (farmingData?.farming_rate && farmingData?.farming_balance) {
      const rate = parseFloat(farmingData.farming_rate);
      const deposit = parseFloat(farmingData.farming_balance);
      
      console.log('\nüöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–ñ–ò–î–ê–ï–ú–´–• –î–û–•–û–î–û–í:');
      console.log(`–ó–∞ 5 –º–∏–Ω—É—Ç: ${rate * 300} TON`);
      console.log(`–ó–∞ —á–∞—Å: ${rate * 3600} TON`);
      console.log(`–ó–∞ –¥–µ–Ω—å: ${rate * 86400} TON`);
      console.log(`–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${((rate * 86400) / deposit * 100).toFixed(2)}%`);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫
verifyTonBoostIncome().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});