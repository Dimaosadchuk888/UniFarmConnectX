#!/usr/bin/env tsx
/**
 * SQL –∞—É–¥–∏—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UniFarm —á–µ—Ä–µ–∑ Supabase
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RPC –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
async function executeSQL(query: string) {
  try {
    const { data, error } = await supabase.rpc('execute_sql', { query });
    if (error) throw error;
    return data;
  } catch (error) {
    // –ï—Å–ª–∏ RPC –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    return null;
  }
}

async function runDatabaseAudit() {
  const auditResults: any = {
    timestamp: new Date().toISOString(),
    database_statistics: {},
    data_patterns: {},
    issues: [],
    recommendations: []
  };

  console.log('üîç –ó–∞–ø—É—Å–∫ SQL –∞—É–¥–∏—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UniFarm');
  console.log('==========================================\n');

  // 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
  console.log('üìä 1. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º...');
  
  // –¢–∞–±–ª–∏—Ü–∞ users
  const { data: usersStats, error: usersError } = await supabase
    .from('users')
    .select('*', { count: 'exact', head: true });
  
  const { data: usersWithUni } = await supabase
    .from('users')
    .select('id', { count: 'exact', head: true })
    .gt('balance_uni', 0);
    
  const { data: usersWithTon } = await supabase
    .from('users')
    .select('id', { count: 'exact', head: true })
    .gt('balance_ton', 0);
    
  const { data: activeFarmers } = await supabase
    .from('users')
    .select('id', { count: 'exact', head: true })
    .eq('uni_farming_active', true);
    
  const { data: tonBoostUsers } = await supabase
    .from('users')
    .select('id', { count: 'exact', head: true })
    .eq('ton_boost_active', true);
    
  auditResults.database_statistics.users = {
    total_count: usersStats?.count || 0,
    with_uni_balance: usersWithUni?.count || 0,
    with_ton_balance: usersWithTon?.count || 0,
    active_farmers: activeFarmers?.count || 0,
    ton_boost_active: tonBoostUsers?.count || 0
  };
  
  // –¢–∞–±–ª–∏—Ü–∞ transactions
  const { data: txStats } = await supabase
    .from('transactions')
    .select('*', { count: 'exact', head: true });
    
  const { data: txTypes } = await supabase
    .from('transactions')
    .select('type')
    .not('type', 'is', null);
    
  const uniqueTypes = [...new Set(txTypes?.map(tx => tx.type) || [])];
  
  auditResults.database_statistics.transactions = {
    total_count: txStats?.count || 0,
    unique_types: uniqueTypes,
    types_count: uniqueTypes.length
  };
  
  // –¢–∞–±–ª–∏—Ü–∞ withdraw_requests
  const { data: withdrawStats } = await supabase
    .from('withdraw_requests')
    .select('*', { count: 'exact', head: true });
    
  const { data: pendingWithdraws } = await supabase
    .from('withdraw_requests')
    .select('id', { count: 'exact', head: true })
    .eq('status', 'pending');
    
  auditResults.database_statistics.withdraw_requests = {
    total_count: withdrawStats?.count || 0,
    pending_count: pendingWithdraws?.count || 0
  };
  
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞');
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü
  console.log('\nüîé 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
  
  const { data: uniFarmingData } = await supabase
    .from('uni_farming_data')
    .select('*', { count: 'exact', head: true });
    
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('*', { count: 'exact', head: true });
    
  const { data: referralsData } = await supabase
    .from('referrals')
    .select('*', { count: 'exact', head: true });
    
  const { data: userSessionsData } = await supabase
    .from('user_sessions')
    .select('*', { count: 'exact', head: true });
    
  auditResults.database_statistics.special_tables = {
    uni_farming_data: uniFarmingData?.count || 0,
    ton_farming_data: tonFarmingData?.count || 0,
    referrals: referralsData?.count || 0,
    user_sessions: userSessionsData?.count || 0
  };
  
  // 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüìà 3. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { data: usersWithReferrers } = await supabase
    .from('users')
    .select('id', { count: 'exact', head: true })
    .not('referred_by', 'is', null);
    
  const { data: usersWithParentRef } = await supabase
    .from('users')
    .select('id', { count: 'exact', head: true })
    .not('parent_ref_code', 'is', null);
    
  auditResults.data_patterns.referral_duplication = {
    users_with_referred_by: usersWithReferrers?.count || 0,
    users_with_parent_ref_code: usersWithParentRef?.count || 0,
    referrals_table_count: referralsData?.count || 0,
    analysis: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ users, —Ç–∞–±–ª–∏—Ü–∞ referrals –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'
  };
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω: –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: txByType } = await supabase
    .from('transactions')
    .select('type');
    
  const txTypeCounts: Record<string, number> = {};
  txByType?.forEach(tx => {
    if (tx.type) {
      txTypeCounts[tx.type] = (txTypeCounts[tx.type] || 0) + 1;
    }
  });
  
  auditResults.data_patterns.transaction_types = txTypeCounts;
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º
  console.log('\n‚ö†Ô∏è  4. –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º...');
  
  // –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const { data: sampleTx } = await supabase
    .from('transactions')
    .select('*')
    .limit(1)
    .single();
    
  if (sampleTx) {
    const hasOldFields = 'type' in sampleTx && 'amount_uni' in sampleTx;
    const hasNewFields = 'transaction_type' in sampleTx && 'amount' in sampleTx;
    
    if (hasOldFields && !hasNewFields) {
      auditResults.issues.push({
        severity: 'HIGH',
        type: 'SCHEMA_MISMATCH',
        description: '–¢–∞–±–ª–∏—Ü–∞ transactions –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (type, amount_uni, amount_ton) –≤–º–µ—Å—Ç–æ –Ω–æ–≤–æ–π –∏–∑ schema.ts',
        impact: '–ö–æ–¥ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –Ω–æ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
      });
    }
  }
  
  // –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
  if ((uniFarmingData?.count || 0) === 0 && auditResults.database_statistics.users.active_farmers > 0) {
    auditResults.issues.push({
      severity: 'MEDIUM',
      type: 'UNUSED_TABLE',
      description: '–¢–∞–±–ª–∏—Ü–∞ uni_farming_data –ø—É—Å—Ç–∞—è, —Ö–æ—Ç—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞—Ä–º–µ—Ä—ã',
      impact: '–î–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ users, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é'
    });
  }
  
  // –ü—Ä–æ–±–ª–µ–º–∞: –ë–∞–ª–∞–Ω—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
  const { data: userSample } = await supabase
    .from('users')
    .select('balance_uni, balance_ton')
    .limit(1)
    .single();
    
  if (userSample && typeof userSample.balance_uni === 'string') {
    auditResults.issues.push({
      severity: 'LOW',
      type: 'DATA_TYPE_ISSUE',
      description: '–ë–∞–ª–∞–Ω—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ —á–∏—Å–ª–∞',
      impact: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è'
    });
  }
  
  // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
  
  auditResults.recommendations = [
    {
      priority: 'HIGH',
      title: '–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      description: '–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É transactions —Å–æ–≥–ª–∞—Å–Ω–æ schema.ts –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å schema.ts –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î'
    },
    {
      priority: 'MEDIUM',
      title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞—Ä–º–∏–Ω–≥-–¥–∞–Ω–Ω—ã—Ö',
      description: '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏–∑ users –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    },
    {
      priority: 'MEDIUM', 
      title: '–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü',
      description: '–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã referrals, user_sessions, uni_farming_data, ton_farming_data –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
    },
    {
      priority: 'LOW',
      title: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫'
    }
  ];
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const reportPath = path.join(process.cwd(), 'docs', `database_sql_audit_${Date.now()}.json`);
  await fs.writeFile(reportPath, JSON.stringify(auditResults, null, 2));
  
  console.log(`\n‚úÖ SQL –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);
  
  // –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
  console.log('\n========== –°–í–û–î–ö–ê –ê–£–î–ò–¢–ê ==========');
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${auditResults.database_statistics.users.total_count}`);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${auditResults.database_statistics.users.active_farmers}`);
  console.log(`–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${auditResults.database_statistics.transactions.total_count}`);
  console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${auditResults.issues.length}`);
  console.log(`- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${auditResults.issues.filter((i: any) => i.severity === 'HIGH').length}`);
  console.log(`- –°—Ä–µ–¥–Ω–∏—Ö: ${auditResults.issues.filter((i: any) => i.severity === 'MEDIUM').length}`);
  console.log(`- –ù–∏–∑–∫–∏—Ö: ${auditResults.issues.filter((i: any) => i.severity === 'LOW').length}`);
  
  return auditResults;
}

// –ó–∞–ø—É—Å–∫
runDatabaseAudit().catch(console.error);