import { supabase } from '../core/supabase.js';

async function analyzeMigrationDetails() {
  console.log('üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–ò–ì–†–ê–¶–ò–ò');
  console.log('='.repeat(80));
  console.log('');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ users
    console.log('üîç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –í USERS:\n');

    const { data: allUsers } = await supabase
      .from('users')
      .select('id')
      .order('id');

    const userIds = new Set(allUsers?.map(u => u.id) || []);
    
    const { data: uniFarming } = await supabase
      .from('uni_farming_data')
      .select('user_id, deposit_amount, farming_balance')
      .order('user_id');

    const missingUsers = uniFarming?.filter(f => !userIds.has(f.user_id)) || [];
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${missingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –≤ uni_farming_data:`);
    missingUsers.forEach(u => {
      console.log(`- User ${u.user_id}: deposit=${u.deposit_amount}, balance=${u.farming_balance}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    console.log('\n\nüîç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò –í –°–¢–ê–†–û–ô –¢–ê–ë–õ–ò–¶–ï:\n');

    const { data: usersWithDeposits } = await supabase
      .from('uni_farming_data')
      .select('user_id, deposit_amount, farming_balance')
      .gt('deposit_amount', 0)
      .order('user_id');

    const { data: usersDepositsInMain } = await supabase
      .from('users')
      .select('id, uni_deposit_amount, uni_farming_balance')
      .in('id', usersWithDeposits?.map(u => u.user_id) || [])
      .order('id');

    const mainUserMap = new Map(usersDepositsInMain?.map(u => [u.id, u]) || []);

    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –≤ uni_farming_data:');
    usersWithDeposits?.forEach(u => {
      const mainUser = mainUserMap.get(u.user_id);
      if (!mainUser) {
        console.log(`‚ùå User ${u.user_id}: –ù–ï–¢ –≤ users (deposit=${u.deposit_amount})`);
      } else if (mainUser.uni_deposit_amount === 0) {
        console.log(`‚ö†Ô∏è  User ${u.user_id}: deposit –≤ users=0, –≤ —Å—Ç–∞—Ä–æ–π=${u.deposit_amount}`);
      } else {
        console.log(`‚úÖ User ${u.user_id}: deposit –≤ users=${mainUser.uni_deposit_amount}, –≤ —Å—Ç–∞—Ä–æ–π=${u.deposit_amount}`);
      }
    });

    // 3. –ê–Ω–∞–ª–∏–∑ TON boost packages
    console.log('\n\nüîç TON BOOST PACKAGES:\n');

    const { data: tonBoosts } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_package_id')
      .not('boost_package_id', 'is', null)
      .order('user_id');

    const { data: usersBoosts } = await supabase
      .from('users')
      .select('id, ton_boost_package')
      .in('id', tonBoosts?.map(t => t.user_id) || [])
      .order('id');

    const boostUserMap = new Map(usersBoosts?.map(u => [u.id, u]) || []);

    let boostMismatches = 0;
    console.log('TON Boost packages —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:');
    tonBoosts?.forEach(t => {
      const user = boostUserMap.get(t.user_id);
      if (!user || user.ton_boost_package !== t.boost_package_id) {
        console.log(`‚ö†Ô∏è  User ${t.user_id}: users.ton_boost_package=${user?.ton_boost_package || 'null'}, ton_farming_data.boost_package_id=${t.boost_package_id}`);
        boostMismatches++;
      }
    });

    if (boostMismatches === 0) {
      console.log('‚úÖ –í—Å–µ boost packages —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
    } else {
      console.log(`\n‚ùå –ù–∞–π–¥–µ–Ω–æ ${boostMismatches} –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π boost packages`);
    }

    // 4. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    console.log('\n\nüìä –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:\n');
    console.log('1. –ö–†–ò–¢–ò–ß–ù–û: –ï—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (id < 25) –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users');
    console.log('2. –í–ê–ñ–ù–û: –≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ 100 UNI');
    console.log('3. –ó–ê–ú–ï–ß–ï–ù–û: –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (id > 25) —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–∞–±–ª–∏—Ü–µ–π users');
    console.log('4. –í–´–í–û–î: –°–∏—Å—Ç–µ–º–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∫ –µ–¥–∏–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ users');
    console.log('');
    console.log('üéØ –ß–¢–û –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users');
    console.log('2. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏—Ö –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å—ã');
    console.log('3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å boost packages');
    console.log('4. –°–æ–∑–¥–∞—Ç—å SQL Views –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ—Ç–∞–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏...\n');
analyzeMigrationDetails();