import { supabase } from '../core/supabase.js';

async function checkMissingUsers() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ü–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (259-307)');
  console.log('='.repeat(80));
  console.log('');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const { data: maxUser } = await supabase
      .from('users')
      .select('id')
      .order('id', { ascending: false })
      .limit(1)
      .single();

    console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${maxUser?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}\n`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: allUsers } = await supabase
      .from('users')
      .select('id, telegram_id, username')
      .gte('id', 250)
      .lte('id', 310)
      .order('id');

    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 250-310:');
    allUsers?.forEach(u => {
      console.log(`- User ${u.id}: telegram_id=${u.telegram_id}, username=${u.username}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–í–ù–´–• –¢–ê–ë–õ–ò–¶:\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º uni_farming_data
    const { data: uniFarmingUsers } = await supabase
      .from('uni_farming_data')
      .select('user_id')
      .gte('user_id', 259)
      .lte('user_id', 307)
      .order('user_id');

    if (uniFarmingUsers && uniFarmingUsers.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${uniFarmingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ uni_farming_data (259-307):`);
      uniFarmingUsers.forEach(u => console.log(`- User ${u.user_id}`));
    } else {
      console.log('–í uni_farming_data –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 259-307');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    const { data: tonFarmingUsers } = await supabase
      .from('ton_farming_data')
      .select('user_id')
      .gte('user_id', 259)
      .lte('user_id', 307)
      .order('user_id');

    if (tonFarmingUsers && tonFarmingUsers.length > 0) {
      console.log(`\n–ù–∞–π–¥–µ–Ω–æ ${tonFarmingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ ton_farming_data (259-307):`);
      tonFarmingUsers.forEach(u => console.log(`- User ${u.user_id}`));
    } else {
      console.log('\n–í ton_farming_data –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 259-307');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n\nüîç –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:\n');

    const { data: transactions } = await supabase
      .from('transactions')
      .select('user_id, created_at')
      .gte('user_id', 259)
      .lte('user_id', 307)
      .order('user_id')
      .limit(20);

    if (transactions && transactions.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 259-307:`);
      const uniqueUsers = [...new Set(transactions.map(t => t.user_id))];
      console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${uniqueUsers.join(', ')}`);
    } else {
      console.log('–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 259-307');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');

    const { count: totalCount } = await supabase
      .from('users')
      .select('*', { count: 'exact', head: true });

    const { data: userIds } = await supabase
      .from('users')
      .select('id')
      .order('id');

    const ids = userIds?.map(u => u.id) || [];
    const missingIds = [];
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID
    for (let i = 1; i <= 307; i++) {
      if (!ids.includes(i)) {
        missingIds.push(i);
      }
    }

    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ users: ${totalCount}`);
    console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID (1-307): ${missingIds.length} —à—Ç—É–∫`);
    
    if (missingIds.length > 0 && missingIds.length <= 50) {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID: ${missingIds.join(', ')}`);
    } else if (missingIds.length > 50) {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID: ${missingIds.slice(0, 20).join(', ')}... –∏ –µ—â–µ ${missingIds.length - 20}`);
    }

    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\n\nüìù –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:\n');
    
    if (maxUser?.id < 259) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 259-307 –ù–ï –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users!');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. –û–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö uni_farming_data/ton_farming_data');
      console.log('2. –ú–∏–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏');
      console.log('3. –≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ');
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ID –≤—ã—à–µ 258');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–ø–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
checkMissingUsers();