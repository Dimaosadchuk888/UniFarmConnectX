import { supabase } from '../core/supabase.js';

async function analyzeMissingData() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –î–ê–ù–ù–´–•');
  console.log('='.repeat(80));
  console.log('');

  try {
    // 1. –ê–Ω–∞–ª–∏–∑ uni_farming_data
    console.log('üìä UNI_FARMING_DATA - –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ USERS:\n');

    const { data: uniFarmingOnly } = await supabase.rpc('get_uni_farming_only_data', {});
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ JavaScript
    const { data: allUniFarming } = await supabase
      .from('uni_farming_data')
      .select('*')
      .order('user_id');

    const { data: allUsers } = await supabase
      .from('users')
      .select('id, uni_deposit_amount, uni_farming_balance')
      .order('id');

    if (allUniFarming && allUsers) {
      const userMap = new Map(allUsers.map(u => [u.id, u]));
      let missingCount = 0;
      let valuableData = [];

      allUniFarming.forEach(farming => {
        const user = userMap.get(farming.user_id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ users
        if (!user || 
            (farming.deposit_amount > 0 && user.uni_deposit_amount === 0) ||
            (farming.farming_balance > 0 && user.uni_farming_balance === 0)) {
          
          missingCount++;
          if (farming.deposit_amount > 0 || farming.farming_balance > 0) {
            valuableData.push({
              user_id: farming.user_id,
              deposit_amount: farming.deposit_amount,
              farming_balance: farming.farming_balance,
              is_active: farming.is_active
            });
          }
        }
      });

      console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Ç–æ–ª—å–∫–æ –≤ uni_farming_data: ${missingCount}`);
      console.log(`–ò–∑ –Ω–∏—Ö —Å —Ü–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (deposit > 0 –∏–ª–∏ balance > 0): ${valuableData.length}`);
      
      if (valuableData.length > 0) {
        console.log('\n–¶–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:');
        valuableData.slice(0, 10).forEach(d => {
          console.log(`- User ${d.user_id}: deposit=${d.deposit_amount}, balance=${d.farming_balance}`);
        });
        if (valuableData.length > 10) {
          console.log(`... –∏ –µ—â–µ ${valuableData.length - 10} –∑–∞–ø–∏—Å–µ–π`);
        }
      }
    }

    // 2. –ê–Ω–∞–ª–∏–∑ ton_farming_data
    console.log('\n\nüìä TON_FARMING_DATA - –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ USERS:\n');

    const { data: allTonFarming } = await supabase
      .from('ton_farming_data')
      .select('*')
      .order('user_id');

    const { data: tonUsers } = await supabase
      .from('users')
      .select('id, ton_wallet_address, ton_farming_balance, ton_boost_package')
      .order('id');

    if (allTonFarming && tonUsers) {
      const tonUserMap = new Map(tonUsers.map(u => [u.id, u]));
      let tonMissingCount = 0;
      let tonValuableData = [];

      allTonFarming.forEach(farming => {
        const user = tonUserMap.get(farming.user_id);
        
        if (!user || 
            (farming.wallet_address && !user.ton_wallet_address) ||
            (farming.balance > 0 && user.ton_farming_balance === 0) ||
            (farming.boost_package_id > 0 && !user.ton_boost_package)) {
          
          tonMissingCount++;
          tonValuableData.push({
            user_id: farming.user_id,
            wallet_address: farming.wallet_address,
            balance: farming.balance,
            farming_balance: farming.farming_balance,
            boost_package_id: farming.boost_package_id
          });
        }
      });

      console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ ton_farming_data: ${allTonFarming.length}`);
      console.log(`–ò–∑ –Ω–∏—Ö —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏/–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${tonValuableData.length}`);
      
      if (tonValuableData.length > 0) {
        console.log('\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
        tonValuableData.slice(0, 10).forEach(d => {
          console.log(`- User ${d.user_id}: wallet=${d.wallet_address ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}, balance=${d.balance}, boost=${d.boost_package_id}`);
        });
      }
    }

    // 3. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    console.log('1. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ users');
    console.log('2. –°–æ–∑–¥–∞—Ç—å SQL Views –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ boost/service.ts –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å users');
    console.log('4. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...\n');
analyzeMissingData();