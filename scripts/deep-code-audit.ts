import { glob } from 'glob';
import fs from 'fs/promises';
import path from 'path';

interface FieldUsage {
  file: string;
  line: number;
  code: string;
  context: string;
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
}

interface AuditReport {
  wallet: FieldUsage[];
  uni_farming_deposit: FieldUsage[];
  ton_boost_package_id: FieldUsage[];
  summary: {
    totalIssues: number;
    criticalFiles: string[];
    recommendations: string[];
  };
}

async function analyzeFile(filePath: string, content: string): Promise<{
  wallet: FieldUsage[];
  uni_farming_deposit: FieldUsage[];
  ton_boost_package_id: FieldUsage[];
}> {
  const lines = content.split('\n');
  const result = {
    wallet: [] as FieldUsage[],
    uni_farming_deposit: [] as FieldUsage[],
    ton_boost_package_id: [] as FieldUsage[]
  };
  
  lines.forEach((line, index) => {
    // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è wallet
    if (line.match(/[^\w]wallet[^\w]/) && !line.includes('ton_wallet_address')) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      let context = 'UNKNOWN';
      let severity: FieldUsage['severity'] = 'LOW';
      
      if (line.includes('routes.ts') || line.includes('controller.ts')) {
        context = 'API_ENDPOINT';
        severity = 'CRITICAL';
      } else if (line.includes('SELECT') || line.includes('INSERT') || line.includes('UPDATE')) {
        context = 'DATABASE_QUERY';
        severity = 'CRITICAL';
      } else if (line.includes('interface') || line.includes('type') || line.includes('schema')) {
        context = 'TYPE_DEFINITION';
        severity = 'HIGH';
      } else if (line.includes('import') || line.includes('export')) {
        context = 'MODULE_INTERFACE';
        severity = 'MEDIUM';
      } else if (line.includes('//') || line.includes('/*')) {
        context = 'COMMENT';
        severity = 'LOW';
      }
      
      result.wallet.push({
        file: filePath,
        line: index + 1,
        code: line.trim(),
        context,
        severity
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ uni_farming_deposit
    if (line.includes('uni_farming_deposit')) {
      let severity: FieldUsage['severity'] = 'HIGH';
      const context = line.includes('SELECT') || line.includes('INSERT') ? 'DATABASE_QUERY' : 'CODE_REFERENCE';
      
      result.uni_farming_deposit.push({
        file: filePath,
        line: index + 1,
        code: line.trim(),
        context,
        severity
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ ton_boost_package_id
    if (line.includes('ton_boost_package_id')) {
      let severity: FieldUsage['severity'] = 'HIGH';
      const context = line.includes('SELECT') || line.includes('INSERT') ? 'DATABASE_QUERY' : 'CODE_REFERENCE';
      
      result.ton_boost_package_id.push({
        file: filePath,
        line: index + 1,
        code: line.trim(),
        context,
        severity
      });
    }
  });
  
  return result;
}

async function performDeepAudit() {
  console.log('üîç –ì–õ–£–ë–û–ö–ò–ô –ê–£–î–ò–¢ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ù–´–• –ü–û–õ–ï–ô');
  console.log('='.repeat(60));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}`);
  console.log('\n');
  
  const files = await glob([
    'client/**/*.{ts,tsx}',
    'server/**/*.{ts,js}',
    'modules/**/*.{ts,js}',
    'shared/**/*.{ts,js}'
  ]);
  
  const report: AuditReport = {
    wallet: [],
    uni_farming_deposit: [],
    ton_boost_package_id: [],
    summary: {
      totalIssues: 0,
      criticalFiles: [],
      recommendations: []
    }
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of files) {
    const content = await fs.readFile(file, 'utf-8');
    const analysis = await analyzeFile(file, content);
    
    report.wallet.push(...analysis.wallet);
    report.uni_farming_deposit.push(...analysis.uni_farming_deposit);
    report.ton_boost_package_id.push(...analysis.ton_boost_package_id);
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
  const sortBySeverity = (a: FieldUsage, b: FieldUsage) => {
    const severityOrder = { CRITICAL: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
    return severityOrder[a.severity] - severityOrder[b.severity];
  };
  
  report.wallet.sort(sortBySeverity);
  report.uni_farming_deposit.sort(sortBySeverity);
  report.ton_boost_package_id.sort(sortBySeverity);
  
  // 1. –ê–ù–ê–õ–ò–ó –ü–û–õ–Ø WALLET
  console.log('1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–û–õ–Ø "wallet"');
  console.log('-'.repeat(40));
  console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${report.wallet.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
  
  const walletBySeverity = report.wallet.reduce((acc, item) => {
    acc[item.severity] = (acc[item.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  console.log('\n–ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:');
  Object.entries(walletBySeverity).forEach(([severity, count]) => {
    console.log(`  ${severity}: ${count}`);
  });
  
  console.log('\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø (—Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):');
  const criticalWallet = report.wallet.filter(u => u.severity === 'CRITICAL');
  criticalWallet.slice(0, 10).forEach(usage => {
    console.log(`\nüìç ${usage.file}:${usage.line}`);
    console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${usage.context}`);
    console.log(`   –ö–æ–¥: ${usage.code}`);
  });
  
  // 2. –ê–ù–ê–õ–ò–ó –î–†–£–ì–ò–• –ü–û–õ–ï–ô
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –î–†–£–ì–ò–• –£–î–ê–õ–ï–ù–ù–´–• –ü–û–õ–ï–ô');
  console.log('-'.repeat(40));
  console.log(`uni_farming_deposit: ${report.uni_farming_deposit.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
  console.log(`ton_boost_package_id: ${report.ton_boost_package_id.length} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
  
  // 3. –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ù–´–• –§–ê–ô–õ–û–í
  console.log('\n3Ô∏è‚É£ –ù–ê–ò–ë–û–õ–ï–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –§–ê–ô–õ–´');
  console.log('-'.repeat(40));
  
  const fileIssueCount: Record<string, number> = {};
  [...report.wallet, ...report.uni_farming_deposit, ...report.ton_boost_package_id].forEach(usage => {
    if (usage.severity === 'CRITICAL' || usage.severity === 'HIGH') {
      fileIssueCount[usage.file] = (fileIssueCount[usage.file] || 0) + 1;
    }
  });
  
  const sortedFiles = Object.entries(fileIssueCount)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 10);
  
  sortedFiles.forEach(([file, count]) => {
    console.log(`  ${file}: ${count} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º`);
    report.summary.criticalFiles.push(file);
  });
  
  // 4. –í–õ–ò–Ø–ù–ò–ï –ù–ê –°–ò–°–¢–ï–ú–£
  console.log('\n4Ô∏è‚É£ –í–õ–ò–Ø–ù–ò–ï –ù–ê –†–ê–ë–û–¢–£ –°–ò–°–¢–ï–ú–´');
  console.log('-'.repeat(40));
  
  if (criticalWallet.length > 0) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω—ã SQL –∑–∞–ø—Ä–æ—Å—ã –∏ API endpoints –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è');
    console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ 500 –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —ç—Ç–∏–º endpoints');
  }
  
  console.log('\n‚úÖ –ü–û–ß–ï–ú–£ –°–ò–°–¢–ï–ú–ê –í–°–ï –ï–©–ï –†–ê–ë–û–¢–ê–ï–¢:');
  console.log('1. Views (uni_farming_data, ton_farming_data) –º–∞–ø–ø—è—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–æ–≤—ã–µ');
  console.log('2. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è (ton_wallet_address, uni_deposit_amount)');
  console.log('3. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö endpoints');
  
  // 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
  console.log('\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ');
  console.log('-'.repeat(40));
  
  report.summary.recommendations = [
    '1. –°–†–û–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (API endpoints –∏ SQL –∑–∞–ø—Ä–æ—Å—ã)',
    '2. –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "wallet" –Ω–∞ "ton_wallet_address"',
    '3. –ó–∞–º–µ–Ω–∏—Ç—å "uni_farming_deposit" –Ω–∞ "uni_deposit_amount"',
    '4. –ó–∞–º–µ–Ω–∏—Ç—å "ton_boost_package_id" –Ω–∞ "ton_boost_package"',
    '5. –û–±–Ω–æ–≤–∏—Ç—å TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã',
    '6. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ API endpoints –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π'
  ];
  
  report.summary.recommendations.forEach(rec => console.log(rec));
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  report.summary.totalIssues = report.wallet.length + report.uni_farming_deposit.length + report.ton_boost_package_id.length;
  
  await fs.writeFile(
    'DEEP_CODE_AUDIT_REPORT.json',
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DEEP_CODE_AUDIT_REPORT.json');
  
  // 6. –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô
  console.log('\n6Ô∏è‚É£ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô');
  console.log('-'.repeat(40));
  console.log('–®–ê–ì 1: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (API –∏ –ë–î –∑–∞–ø—Ä–æ—Å—ã)');
  console.log('–®–ê–ì 2: –û–±–Ω–æ–≤–∏—Ç—å TypeScript —Ç–∏–ø—ã');
  console.log('–®–ê–ì 3: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
  console.log('–®–ê–ì 4: –£–¥–∞–ª–∏—Ç—å views –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞');
  
  console.log('\nüéØ –ò–¢–û–ì: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞');
}

performDeepAudit().catch(console.error);