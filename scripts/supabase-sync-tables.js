/**
 * –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü Supabase –¥–ª—è UniFarm
 * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é –≤ Supabase Dashboard
 * —Ç–∞–∫ –∫–∞–∫ Supabase API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DDL –æ–ø–µ—Ä–∞—Ü–∏–∏ (CREATE TABLE, ALTER TABLE)
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function createMissingTables() {
  console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...\n');

  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_sessions
  const createUserSessions = `
    CREATE TABLE IF NOT EXISTS user_sessions (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      session_token TEXT UNIQUE NOT NULL,
      expires_at TIMESTAMP NOT NULL,
      created_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON user_sessions(session_token);
    CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
  `;

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_missions
  const createUserMissions = `
    CREATE TABLE IF NOT EXISTS user_missions (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      mission_id INTEGER NOT NULL,
      completed BOOLEAN DEFAULT FALSE,
      progress INTEGER DEFAULT 0,
      completed_at TIMESTAMP,
      created_at TIMESTAMP DEFAULT NOW(),
      UNIQUE(user_id, mission_id)
    );
    
    CREATE INDEX IF NOT EXISTS idx_user_missions_user ON user_missions(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_missions_mission ON user_missions(mission_id);
  `;

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã daily_bonus_logs
  const createDailyBonusLogs = `
    CREATE TABLE IF NOT EXISTS daily_bonus_logs (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      bonus_amount DECIMAL(20,6) NOT NULL,
      day_number INTEGER NOT NULL,
      streak_bonus DECIMAL(20,6) DEFAULT 0,
      claimed_at TIMESTAMP DEFAULT NOW()
    );
    
    CREATE INDEX IF NOT EXISTS idx_daily_bonus_user_date ON daily_bonus_logs(user_id, claimed_at);
  `;

  // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã airdrops
  const createAirdrops = `
    CREATE TABLE IF NOT EXISTS airdrops (
      id SERIAL PRIMARY KEY,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      total_amount DECIMAL(20,6) NOT NULL,
      participants_count INTEGER DEFAULT 0,
      start_date TIMESTAMP NOT NULL,
      end_date TIMESTAMP NOT NULL,
      status VARCHAR(50) DEFAULT 'pending',
      created_at TIMESTAMP DEFAULT NOW()
    );
  `;

  const tables = [
    { name: 'user_sessions', sql: createUserSessions },
    { name: 'user_missions', sql: createUserMissions },
    { name: 'daily_bonus_logs', sql: createDailyBonusLogs },
    { name: 'airdrops', sql: createAirdrops }
  ];

  for (const table of tables) {
    try {
      const { error } = await supabase.rpc('exec_sql', { sql: table.sql });
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${table.name}:`, error.message);
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table.name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${table.name}:`, err);
    }
  }
}

async function fillEmptyTables() {
  console.log('\nüì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã missions
  const missions = [
    {
      id: 1,
      title: '–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç',
      description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç UNI –≤ —Ñ–∞—Ä–º–∏–Ω–≥',
      reward_uni: 10,
      reward_ton: 0,
      type: 'one_time',
      status: 'active'
    },
    {
      id: 2,
      title: '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞',
      description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –¥—Ä—É–≥–∞ –≤ UniFarm',
      reward_uni: 5,
      reward_ton: 0,
      type: 'one_time',
      status: 'active'
    },
    {
      id: 3,
      title: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞—Ä–º–µ—Ä',
      description: '–§–∞—Ä–º–∏—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞',
      reward_uni: 20,
      reward_ton: 0,
      type: 'streak',
      status: 'active'
    },
    {
      id: 4,
      title: 'TON Boost –∞–∫—Ç–∏–≤–∞—Ü–∏—è',
      description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π TON Boost –ø–∞–∫–µ—Ç',
      reward_uni: 0,
      reward_ton: 0.1,
      type: 'one_time',
      status: 'active'
    },
    {
      id: 5,
      title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª',
      reward_uni: 2,
      reward_ton: 0,
      type: 'social',
      status: 'active'
    }
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ missions
  const { data: existingMissions, error: checkError } = await supabase
    .from('missions')
    .select('id')
    .limit(1);

  if (!checkError && (!existingMissions || existingMissions.length === 0)) {
    const { error: insertError } = await supabase
      .from('missions')
      .insert(missions);

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã missions:', insertError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ missions –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    }
  } else {
    console.log('‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ missions —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ');
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã referrals –∏–∑ users
  const migrateReferrals = `
    INSERT INTO referrals (referrer_id, referred_id, level, created_at)
    SELECT 
      referred_by::integer as referrer_id,
      id as referred_id,
      1 as level,
      created_at
    FROM users 
    WHERE referred_by IS NOT NULL 
      AND referred_by != 'null'
      AND referred_by ~ '^[0-9]+$'
    ON CONFLICT DO NOTHING;
  `;

  try {
    const { error } = await supabase.rpc('exec_sql', { sql: migrateReferrals });
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error.message);
    } else {
      console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É referrals');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
  }
}

async function fixDataTypes() {
  console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...\n');

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è referrer_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const addReferrerId = `
    ALTER TABLE users 
    ADD COLUMN IF NOT EXISTS referrer_id INTEGER REFERENCES users(id);
  `;

  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ referred_by –≤ referrer_id
  const migrateReferrerData = `
    UPDATE users 
    SET referrer_id = referred_by::integer
    WHERE referred_by IS NOT NULL 
      AND referred_by != 'null'
      AND referred_by ~ '^[0-9]+$';
  `;

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ timestamp –ø–æ–ª–µ–π
  const fixTimestamps = `
    ALTER TABLE users
    ALTER COLUMN uni_farming_start_timestamp TYPE TIMESTAMP USING 
      CASE 
        WHEN uni_farming_start_timestamp IS NOT NULL 
        THEN to_timestamp(uni_farming_start_timestamp::text, 'YYYY-MM-DD"T"HH24:MI:SS.MS')
        ELSE NULL 
      END,
    ALTER COLUMN uni_farming_last_update TYPE TIMESTAMP USING 
      CASE 
        WHEN uni_farming_last_update IS NOT NULL 
        THEN to_timestamp(uni_farming_last_update::text, 'YYYY-MM-DD"T"HH24:MI:SS.MS')
        ELSE NULL 
      END,
    ALTER COLUMN ton_farming_start_timestamp TYPE TIMESTAMP USING 
      CASE 
        WHEN ton_farming_start_timestamp IS NOT NULL 
        THEN to_timestamp(ton_farming_start_timestamp::text, 'YYYY-MM-DD"T"HH24:MI:SS.MS')
        ELSE NULL 
      END;
  `;

  const fixes = [
    { name: 'referrer_id –ø–æ–ª–µ', sql: addReferrerId },
    { name: '–º–∏–≥—Ä–∞—Ü–∏—è referrer –¥–∞–Ω–Ω—ã—Ö', sql: migrateReferrerData },
    { name: 'timestamp –ø–æ–ª—è', sql: fixTimestamps }
  ];

  for (const fix of fixes) {
    try {
      const { error } = await supabase.rpc('exec_sql', { sql: fix.sql });
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ${fix.name}:`, error.message);
      } else {
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fix.name}`);
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${fix.name}:`, err);
    }
  }
}

async function verifyTablesStructure() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...\n');

  const tablesToCheck = [
    'users',
    'user_sessions',
    'transactions',
    'referrals',
    'farming_sessions',
    'boost_purchases',
    'missions',
    'user_missions',
    'airdrops',
    'daily_bonus_logs',
    'withdraw_requests'
  ];

  const results = [];
  
  for (const tableName of tablesToCheck) {
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(0);

    if (error) {
      results.push(`‚ùå ${tableName}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞`);
    } else {
      const { count } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true });
      
      results.push(`‚úÖ ${tableName}: –°—É—â–µ—Å—Ç–≤—É–µ—Ç (${count || 0} –∑–∞–ø–∏—Å–µ–π)`);
    }
  }

  console.log(results.join('\n'));
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Supabase –¥–ª—è UniFarm...\n');
  
  try {
    await createMissingTables();
    await fillEmptyTables();
    await fixDataTypes();
    await verifyTablesStructure();
    
    console.log('\n‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();