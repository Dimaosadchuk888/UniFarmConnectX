import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// –§—É–Ω–∫—Ü–∏—è –∏–∑ middleware
async function getUserById(userId) {
  try {
    console.log(`üîé [Middleware simulation] getUserById(${userId})`);
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error.message);
      return null;
    }

    if (data) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', data.id, data.username);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return data;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return null;
  }
}

async function simulateMiddleware() {
  console.log('üîç –ó–ê–î–ê–ß–ê 3: –°–∏–º—É–ª—è—Ü–∏—è middleware –ø—Ä–æ–≤–µ—Ä–∫–∏');
  console.log('='.repeat(50));
  
  // JWT —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–æ–≤
  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYyLCJ0ZWxlZ3JhbV9pZCI6ODg4ODg4NDgsInVzZXJuYW1lIjoicHJldmlld191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MTc4MDUyMTkxOF9lMXY2MmQiLCJpYXQiOjE3NTE4Njk5NzYsImV4cCI6MTc1MjQ3NDc3Nn0.3OX9TDF5XpRW8PUHeozdIoBRIl-UWvjNJWKHbn56Fso';
  
  try {
    // –®–∞–≥ 1: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üìã –®–∞–≥ 1: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT...');
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log(`  userId: ${decoded.userId}`);
    console.log(`  telegram_id: ${decoded.telegram_id}`);
    
    // –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ userId (–∫–∞–∫ –≤ middleware)
    console.log('\nüìã –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ userId...');
    const userId = decoded.userId || decoded.user_id;
    console.log(`  userId –¥–ª—è –ø–æ–∏—Å–∫–∞: ${userId}`);
    console.log(`  –¢–∏–ø: ${typeof userId}`);
    
    // –®–∞–≥ 3: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã –®–∞–≥ 3: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    const fullUser = await getUserById(userId);
    
    if (!fullUser) {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∞ —á—Ç–æ –µ—Å–ª–∏ userId —Å—Ç—Ä–æ–∫–∞?
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π...');
      const userAsString = await getUserById(String(userId));
      if (userAsString) {
        console.log('‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö! userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö ID...');
      for (let id = 60; id <= 64; id++) {
        const user = await getUserById(id);
        console.log(`  ID ${id}: ${user ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
      }
    } else {
      console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ middleware –ª–æ–≥–∏–∫—É!');
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:', error.message);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

simulateMiddleware();