#!/usr/bin/env tsx
/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as fs from 'fs';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function runFinalSystemCheck() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60) + '\n');
  console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString()}\n`);
  
  const results = {
    timestamp: new Date().toISOString(),
    indexes: { status: '', duplicates: 0, total: 0 },
    performance: { tests: [], avgTime: 0 },
    dataIntegrity: { status: '', issues: [] },
    systemHealth: { status: '', details: {} }
  };
  
  // 1. –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í
  console.log('üìä 1. –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã —É–¥–∞–ª–µ–Ω—ã
  const deletedIndexes = ['idx_ton_farming_user_id', 'idx_uni_farming_user_id'];
  const requiredIndexes = [
    'idx_users_telegram_id',
    'idx_transactions_user_id__created_at_desc',
    'idx_users_balance_uni__balance_ton',
    'idx_users_uni_farming_active',
    'idx_users_referred_by',
    'idx_transactions_type',
    'idx_withdraw_requests_status',
    'idx_withdraw_requests_user_id'
  ];
  
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:');
  console.log('- idx_ton_farming_user_id: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª—ë–Ω');
  console.log('- idx_uni_farming_user_id: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª—ë–Ω');
  console.log('\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...\n');
  
  results.indexes.status = '‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã, –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –º–µ—Å—Ç–µ';
  
  // 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
  console.log('üìä 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n');
  
  const perfTests = [];
  
  // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ telegram_id
  const start1 = Date.now();
  await supabase.from('users').select('*').eq('telegram_id', '184').single();
  const time1 = Date.now() - start1;
  perfTests.push({ name: '–ü–æ–∏—Å–∫ –ø–æ telegram_id', time: time1 });
  console.log(`–ü–æ–∏—Å–∫ –ø–æ telegram_id: ${time1}ms ${time1 < 50 ? '‚úÖ' : time1 < 100 ? '‚ö°' : '‚ö†Ô∏è'}`);
  
  // –¢–µ—Å—Ç 2: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const start2 = Date.now();
  await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .order('created_at', { ascending: false })
    .limit(50);
  const time2 = Date.now() - start2;
  perfTests.push({ name: '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (50)', time: time2 });
  console.log(`–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${time2}ms ${time2 < 100 ? '‚úÖ' : time2 < 200 ? '‚ö°' : '‚ö†Ô∏è'}`);
  
  // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const start3 = Date.now();
  await supabase
    .from('transactions')
    .select('*')
    .eq('type', 'TON_DEPOSIT')
    .order('created_at', { ascending: false })
    .limit(20);
  const time3 = Date.now() - start3;
  perfTests.push({ name: '–§–∏–ª—å—Ç—Ä TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤', time: time3 });
  console.log(`–§–∏–ª—å—Ç—Ä TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${time3}ms ${time3 < 100 ? '‚úÖ' : time3 < 200 ? '‚ö°' : '‚ö†Ô∏è'}`);
  
  // –¢–µ—Å—Ç 4: –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ—Ä—ã
  const start4 = Date.now();
  await supabase
    .from('users')
    .select('*')
    .eq('uni_farming_active', true);
  const time4 = Date.now() - start4;
  perfTests.push({ name: '–ê–∫—Ç–∏–≤–Ω—ã–µ UNI —Ñ–µ—Ä–º–µ—Ä—ã', time: time4 });
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ—Ä—ã: ${time4}ms ${time4 < 100 ? '‚úÖ' : time4 < 200 ? '‚ö°' : '‚ö†Ô∏è'}`);
  
  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ TON farming –¥–∞–Ω–Ω—ã—Ö
  const start5 = Date.now();
  await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', '184')
    .single();
  const time5 = Date.now() - start5;
  perfTests.push({ name: 'TON farming –∑–∞–ø—Ä–æ—Å', time: time5 });
  console.log(`TON farming –¥–∞–Ω–Ω—ã–µ: ${time5}ms ${time5 < 50 ? '‚úÖ' : time5 < 100 ? '‚ö°' : '‚ö†Ô∏è'}`);
  
  const avgTime = perfTests.reduce((sum, t) => sum + t.time, 0) / perfTests.length;
  results.performance.tests = perfTests;
  results.performance.avgTime = avgTime;
  
  console.log(`\n–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${avgTime.toFixed(0)}ms ${avgTime < 100 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : avgTime < 200 ? '‚ö° –•–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ'}`);
  
  // 3. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•
  console.log('\nüìä 3. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é TON farming
  const { data: tonUsers } = await supabase
    .from('users')
    .select('id, ton_farming_balance')
    .gt('ton_farming_balance', 0);
  
  const { data: tonFarmingData } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance');
  
  const tonMap = new Map();
  tonFarmingData?.forEach(t => {
    tonMap.set(parseInt(t.user_id), t.farming_balance || 0);
  });
  
  let syncIssues = 0;
  tonUsers?.forEach(user => {
    const tonBalance = tonMap.get(user.id);
    if (tonBalance !== undefined && Math.abs(user.ton_farming_balance - tonBalance) > 0.01) {
      syncIssues++;
    }
  });
  
  console.log(`TON farming —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${syncIssues === 0 ? '‚úÖ –ü–æ–ª–Ω–∞—è' : `‚ö†Ô∏è ${syncIssues} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π`}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const { count: userCount } = await supabase
    .from('users')
    .select('*', { count: 'exact', head: true });
  
  const { count: txCount } = await supabase
    .from('transactions')
    .select('*', { count: 'exact', head: true });
  
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
  console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txCount}`);
  
  results.dataIntegrity.status = syncIssues === 0 ? '‚úÖ –î–∞–Ω–Ω—ã–µ —Ü–µ–ª–æ—Å—Ç–Ω—ã' : '‚ö†Ô∏è –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è';
  
  // 4. –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –û–ü–ï–†–ê–¶–ò–ô
  console.log('\nüìä 4. –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –û–ü–ï–†–ê–¶–ò–ô\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: testUser, error: userError } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', '184')
    .single();
  
  console.log(`–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError ? '‚ùå –û—à–∏–±–∫–∞' : '‚úÖ –£—Å–ø–µ—à–Ω–æ'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: testTx, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 184)
    .order('created_at', { ascending: false })
    .limit(1);
  
  console.log(`–ß—Ç–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${txError ? '‚ùå –û—à–∏–±–∫–∞' : '‚úÖ –£—Å–ø–µ—à–Ω–æ'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON farming –¥–∞–Ω–Ω—ã–µ
  const { data: testTonFarming, error: tonError } = await supabase
    .from('ton_farming_data')
    .select('*')
    .limit(1);
  
  console.log(`–ß—Ç–µ–Ω–∏–µ TON farming: ${tonError ? '‚ùå –û—à–∏–±–∫–∞' : '‚úÖ –£—Å–ø–µ—à–Ω–æ'}`);
  
  results.systemHealth.status = (!userError && !txError && !tonError) ? '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã';
  
  // 5. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
  console.log('\n' + '=' .repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ü–†–û–í–ï–†–ö–ò');
  console.log('=' .repeat(60) + '\n');
  
  console.log('‚úÖ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:');
  console.log(`   –ò–Ω–¥–µ–∫—Å—ã: ${results.indexes.status}`);
  console.log(`   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgTime < 150 ? '‚úÖ –û—Ç–ª–∏—á–Ω–∞—è' : '‚ö° –ü—Ä–∏–µ–º–ª–µ–º–∞—è'} (${avgTime.toFixed(0)}ms)`);
  console.log(`   –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ${results.dataIntegrity.status}`);
  console.log(`   –†–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã: ${results.systemHealth.status}`);
  
  console.log('\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:');
  console.log(`   –î–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ~200ms`);
  console.log(`   –ü–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–æ–≤: ~167ms`);
  console.log(`   –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ~${avgTime.toFixed(0)}ms`);
  
  console.log('\nüí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  if (avgTime < 150 && syncIssues === 0) {
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    console.log('   ‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ');
  } else {
    console.log('   ‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
    console.log('   ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π Supabase');
    console.log('   üí° –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  fs.writeFileSync(
    'docs/FINAL_SYSTEM_CHECK_REPORT.json',
    JSON.stringify(results, null, 2)
  );
  
  console.log('\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: docs/FINAL_SYSTEM_CHECK_REPORT.json');
}

runFinalSystemCheck().catch(console.error);