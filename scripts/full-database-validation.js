/**
 * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UniFarm
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
 */

import { supabase } from '../core/supabaseClient.js';
import { logger } from '../core/logger.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const EXPECTED_SCHEMA = {
  users: {
    required: [
      'id', 'telegram_id', 'username', 'first_name', 'last_name',
      'uni_balance', 'ton_balance', 'ref_code', 'referred_by',
      'created_at', 'is_premium', 'language_code', 'is_admin',
      'uni_farming_active', 'uni_farming_amount', 'uni_farming_start_timestamp',
      'ton_boost_package', 'ton_boost_active', 'ton_boost_start_timestamp',
      'ton_wallet_address', 'ton_wallet_verified', 'ton_wallet_linked_at'
    ],
    optional: ['photo_url']
  },
  transactions: {
    required: [
      'id', 'user_id', 'type', 'amount', 'amount_uni', 'amount_ton',
      'currency', 'status', 'description', 'created_at'
    ],
    optional: ['metadata', 'source', 'tx_hash', 'source_user_id', 'action']
  },
  referrals: {
    required: [
      'id', 'referrer_user_id', 'referred_user_id', 'level',
      'percentage', 'created_at'
    ],
    optional: []
  },
  farming_sessions: {
    required: [
      'id', 'user_id', 'type', 'amount', 'start_timestamp',
      'last_claim_timestamp', 'total_earned', 'is_active', 'created_at'
    ],
    optional: ['end_timestamp']
  },
  user_sessions: {
    required: [
      'id', 'user_id', 'session_token', 'created_at', 'expires_at'
    ],
    optional: ['last_activity', 'ip_address', 'user_agent']
  },
  boost_purchases: {
    required: [
      'id', 'user_id', 'package_id', 'amount_ton', 'daily_rate',
      'purchase_date', 'is_active'
    ],
    optional: ['expiry_date', 'total_earned']
  },
  missions: {
    required: [
      'id', 'title', 'description', 'mission_type', 'reward_type',
      'reward_amount', 'is_active', 'created_at'
    ],
    optional: ['requirements', 'icon']
  },
  user_missions: {
    required: [
      'id', 'user_id', 'mission_id', 'is_completed', 'completed_at',
      'reward_claimed', 'created_at'
    ],
    optional: ['progress']
  },
  airdrops: {
    required: [
      'id', 'title', 'description', 'total_amount', 'token_type',
      'start_date', 'end_date', 'is_active', 'created_at'
    ],
    optional: ['requirements', 'participants_count']
  },
  daily_bonus_logs: {
    required: [
      'id', 'user_id', 'day_number', 'bonus_amount', 'claimed_at'
    ],
    optional: ['streak_count']
  },
  withdraw_requests: {
    required: [
      'id', 'user_id', 'amount_ton', 'ton_wallet', 'status',
      'created_at'
    ],
    optional: ['processed_at', 'processed_by', 'tx_hash', 'notes']
  }
};

async function validateTableStructure(tableName, expectedFields) {
  try {
    console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (error) {
      if (error.message.includes('does not exist')) {
        return {
          tableName,
          status: 'MISSING',
          error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          missingFields: expectedFields.required,
          extraFields: []
        };
      }
      throw error;
    }

    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    let actualFields = [];
    if (!data || data.length === 0) {
      console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É`);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ SQL
      const { data: columns, error: columnsError } = await supabase.rpc('get_table_columns', {
        table_name: tableName
      }).catch(() => ({ data: null, error: 'RPC not available' }));
      
      if (!columns) {
        // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è —á–µ—Ä–µ–∑ –æ—à–∏–±–∫—É –≤—Å—Ç–∞–≤–∫–∏
        const testInsert = await supabase
          .from(tableName)
          .insert({})
          .select();
          
        if (testInsert.error && testInsert.error.message.includes('null value')) {
          // –ü–∞—Ä—Å–∏–º –ø–æ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
          const match = testInsert.error.message.match(/column "([^"]+)"/);
          if (match) {
            console.log(`‚ÑπÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —á–µ—Ä–µ–∑ –æ—à–∏–±–∫—É: ${match[1]}`);
          }
        }
        
        // –î–ª—è –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        return {
          tableName,
          status: 'EMPTY',
          warning: '–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ –ø–æ–ª—è',
          assumedFields: expectedFields.required,
          recordCount: 0
        };
      } else {
        actualFields = columns.map(col => col.column_name);
      }
    } else {
      actualFields = Object.keys(data[0]);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    const missingRequired = expectedFields.required.filter(field => !actualFields.includes(field));
    const missingOptional = expectedFields.optional.filter(field => !actualFields.includes(field));
    const extraFields = actualFields.filter(field => 
      !expectedFields.required.includes(field) && 
      !expectedFields.optional.includes(field)
    );

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    const status = missingRequired.length > 0 ? 'ERROR' : 
                   missingOptional.length > 0 ? 'WARNING' : 'OK';

    return {
      tableName,
      status,
      recordCount: count || 0,
      actualFields,
      missingRequired,
      missingOptional,
      extraFields,
      fieldCount: {
        expected: expectedFields.required.length + expectedFields.optional.length,
        actual: actualFields.length
      }
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${tableName}:`, error.message);
    return {
      tableName,
      status: 'ERROR',
      error: error.message
    };
  }
}

async function checkCodeUsage() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∫–æ–¥–µ...');
  
  const codeIssues = [];
  const modulesPath = path.join(path.dirname(__dirname), 'modules');
  
  // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ, –Ω–æ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ë–î
  const suspiciousFields = [
    'guest_id',
    'balance_uni', // –î—É–±–ª–∏–∫–∞—Ç uni_balance
    'balance_ton', // –î—É–±–ª–∏–∫–∞—Ç ton_balance
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
  const modules = fs.readdirSync(modulesPath);
  for (const module of modules) {
    const modulePath = path.join(modulesPath, module);
    if (!fs.statSync(modulePath).isDirectory()) continue;
    
    const files = fs.readdirSync(modulePath).filter(f => f.endsWith('.ts') || f.endsWith('.js'));
    
    for (const file of files) {
      const filePath = path.join(modulePath, file);
      const content = fs.readFileSync(filePath, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      for (const field of suspiciousFields) {
        if (content.includes(field)) {
          codeIssues.push({
            file: `modules/${module}/${file}`,
            field,
            type: 'SUSPICIOUS_FIELD'
          });
        }
      }
    }
  }
  
  return codeIssues;
}

async function generateReport(results, codeIssues) {
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      totalTables: Object.keys(EXPECTED_SCHEMA).length,
      checkedTables: results.length,
      okTables: results.filter(r => r.status === 'OK').length,
      warningTables: results.filter(r => r.status === 'WARNING').length,
      errorTables: results.filter(r => r.status === 'ERROR').length,
      missingTables: results.filter(r => r.status === 'MISSING').length,
      emptyTables: results.filter(r => r.status === 'EMPTY').length
    },
    criticalIssues: [],
    tableDetails: results,
    codeIssues,
    recommendations: []
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  for (const result of results) {
    if (result.status === 'ERROR' && result.missingRequired) {
      report.criticalIssues.push({
        table: result.tableName,
        issue: 'MISSING_REQUIRED_FIELDS',
        fields: result.missingRequired,
        impact: '–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      });
    }
    if (result.status === 'MISSING') {
      report.criticalIssues.push({
        table: result.tableName,
        issue: 'TABLE_NOT_EXISTS',
        impact: '–ú–æ–¥—É–ª–∏, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å'
      });
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (report.criticalIssues.length > 0) {
    report.recommendations.push({
      priority: 'CRITICAL',
      action: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
      details: '–°–º. —Ä–∞–∑–¥–µ–ª criticalIssues'
    });
  }

  if (codeIssues.length > 0) {
    report.recommendations.push({
      priority: 'HIGH',
      action: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π –≤ –∫–æ–¥–µ',
      details: `–ù–∞–π–¥–µ–Ω–æ ${codeIssues.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ`
    });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º
  const totalRecords = results.reduce((sum, r) => sum + (r.recordCount || 0), 0);
  report.summary.totalRecords = totalRecords;

  return report;
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UniFarm...');
  console.log('üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', new Date().toLocaleString());
  
  const results = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
  for (const [tableName, fields] of Object.entries(EXPECTED_SCHEMA)) {
    const result = await validateTableStructure(tableName, fields);
    results.push(result);
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const icon = result.status === 'OK' ? '‚úÖ' : 
                 result.status === 'WARNING' ? '‚ö†Ô∏è' : 
                 result.status === 'ERROR' ? '‚ùå' : 'üö´';
    console.log(`${icon} ${tableName}: ${result.status} (${result.recordCount || 0} –∑–∞–ø–∏—Å–µ–π)`);
    
    if (result.missingRequired?.length > 0) {
      console.log(`   ‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${result.missingRequired.join(', ')}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∫–æ–¥–µ
  const codeIssues = await checkCodeUsage();
  if (codeIssues.length > 0) {
    console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${codeIssues.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ`);
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const report = await generateReport(results, codeIssues);
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`‚úÖ –¢–∞–±–ª–∏—Ü –≤ –ø–æ—Ä—è–¥–∫–µ: ${report.summary.okTables}/${report.summary.totalTables}`);
  console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${report.summary.warningTables}`);
  console.log(`‚ùå –¢–∞–±–ª–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏: ${report.summary.errorTables}`);
  console.log(`üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: ${report.summary.missingTables}`);
  console.log(`üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${report.summary.totalRecords}`);
  
  if (report.criticalIssues.length > 0) {
    console.log(`\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: ${report.criticalIssues.length}`);
    report.criticalIssues.forEach(issue => {
      console.log(`   - ${issue.table}: ${issue.issue}`);
    });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  const reportPath = `docs/DATABASE_VALIDATION_${Date.now()}.json`;
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
  const isHealthy = report.criticalIssues.length === 0 && report.summary.errorTables === 0;
  console.log(`\n${isHealthy ? '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!' : '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º!'}`);
  
  process.exit(isHealthy ? 0 : 1);
}

// –°–æ–∑–¥–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü)
async function createRPCFunction() {
  const createFunction = `
    CREATE OR REPLACE FUNCTION get_table_columns(table_name text)
    RETURNS TABLE(column_name text, data_type text, is_nullable text)
    LANGUAGE sql
    SECURITY DEFINER
    AS $$
      SELECT 
        column_name::text,
        data_type::text,
        is_nullable::text
      FROM information_schema.columns
      WHERE table_schema = 'public' 
        AND table_name = $1
      ORDER BY ordinal_position;
    $$;
  `;
  
  try {
    await supabase.rpc('get_table_columns', { table_name: 'users' });
  } catch (error) {
    if (error.message.includes('does not exist')) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_table_columns...');
      // –§—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—ë —á–µ—Ä–µ–∑ API
      console.log('‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_table_columns');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
createRPCFunction().then(() => main()).catch(console.error);