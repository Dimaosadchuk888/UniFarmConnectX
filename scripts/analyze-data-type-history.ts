#!/usr/bin/env tsx
/**
 * –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –¢–ò–ü–û–í –î–ê–ù–ù–´–• - –ü–û–ß–ï–ú–£ –ü–û–Ø–í–ò–õ–ê–°–¨ –ü–†–û–ë–õ–ï–ú–ê
 * –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
 */

import { supabase } from '../core/supabase';

async function analyzeDataTypeHistory() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –¢–ò–ü–û–í –î–ê–ù–ù–´–•');
  console.log('==============================');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`);

  // 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost
  console.log('1. üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST:');
  
  const { data: allBoostUsers } = await supabase
    .from('users')
    .select('id, ton_boost_package, created_at')
    .not('ton_boost_package', 'is', null)
    .order('id');

  const { data: allFarmingData } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, created_at')
    .order('user_id');

  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${allBoostUsers?.length || 0}`);
  console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${allFarmingData?.length || 0}`);

  // 2. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º
  console.log('\n2. üìã –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–• –ü–û –ì–†–£–ü–ü–ê–ú:');
  
  if (allBoostUsers && allFarmingData) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º ID
    const userIdTypes = new Map();
    const farmingIdTypes = new Map();
    
    allBoostUsers.forEach(user => {
      const type = typeof user.id;
      if (!userIdTypes.has(type)) userIdTypes.set(type, []);
      userIdTypes.get(type).push(user.id);
    });
    
    allFarmingData.forEach(farming => {
      const type = typeof farming.user_id;
      if (!farmingIdTypes.has(type)) farmingIdTypes.set(type, []);
      farmingIdTypes.get(type).push(farming.user_id);
    });

    console.log('   –¢–∏–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users (id):');
    for (const [type, ids] of userIdTypes) {
      console.log(`   ‚Ä¢ ${type}: ${ids.length} –∑–∞–ø–∏—Å–µ–π (${ids.slice(0, 5).join(', ')}${ids.length > 5 ? '...' : ''})`);
    }
    
    console.log('\n   –¢–∏–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–µ ton_farming_data (user_id):');
    for (const [type, ids] of farmingIdTypes) {
      console.log(`   ‚Ä¢ ${type}: ${ids.length} –∑–∞–ø–∏—Å–µ–π (${ids.slice(0, 5).join(', ')}${ids.length > 5 ? '...' : ''})`);
    }

    // 3. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ JOIN
    console.log('\n3. üîç –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ù–ï –ü–†–û–•–û–î–Ø–©–ò–ï JOIN:');
    
    const joinFailures = [];
    allBoostUsers.forEach(user => {
      const farmingRecord = allFarmingData.find(f => f.user_id == user.id);
      const strictMatch = allFarmingData.find(f => f.user_id === user.id);
      
      if (farmingRecord && !strictMatch) {
        joinFailures.push({
          userId: user.id,
          userIdType: typeof user.id,
          farmingUserId: farmingRecord.user_id,
          farmingUserIdType: typeof farmingRecord.user_id,
          looseMatch: true,
          strictMatch: false
        });
      }
    });

    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ JOIN: ${joinFailures.length}`);
    
    if (joinFailures.length > 0) {
      console.log('\n   –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      joinFailures.forEach(failure => {
        console.log(`   ‚Ä¢ User ${failure.userId} (${failure.userIdType}) ‚Üí farming "${failure.farmingUserId}" (${failure.farmingUserIdType})`);
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\n   –ü—Ä–∏–º–µ—Ä—ã –†–ê–ë–û–¢–ê–Æ–©–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):');
      const workingUsers = allBoostUsers.filter(user => {
        const farmingRecord = allFarmingData.find(f => f.user_id === user.id);
        return farmingRecord;
      }).slice(0, 3);
      
      workingUsers.forEach(user => {
        const farming = allFarmingData.find(f => f.user_id === user.id);
        console.log(`   ‚Ä¢ User ${user.id} (${typeof user.id}) ‚Üí farming ${farming?.user_id} (${typeof farming?.user_id}) ‚úÖ`);
      });
    }

    // 4. –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    console.log('\n4. üìÖ –•–†–û–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è
    const usersByDate = new Map();
    const farmingByDate = new Map();
    
    allBoostUsers.forEach(user => {
      if (user.created_at) {
        const date = user.created_at.split('T')[0];
        if (!usersByDate.has(date)) usersByDate.set(date, []);
        usersByDate.get(date).push(user);
      }
    });
    
    allFarmingData.forEach(farming => {
      if (farming.created_at) {
        const date = farming.created_at.split('T')[0];
        if (!farmingByDate.has(date)) farmingByDate.set(date, []);
        farmingByDate.get(date).push(farming);
      }
    });

    console.log('   –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–∞–º:');
    const sortedUserDates = Array.from(usersByDate.keys()).sort().reverse().slice(0, 5);
    sortedUserDates.forEach(date => {
      const users = usersByDate.get(date);
      const sampleUser = users[0];
      console.log(`   ${date}: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä: User ${sampleUser.id}, —Ç–∏–ø: ${typeof sampleUser.id})`);
    });
    
    console.log('\n   –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π farming –ø–æ –¥–∞—Ç–∞–º:');
    const sortedFarmingDates = Array.from(farmingByDate.keys()).sort().reverse().slice(0, 5);
    sortedFarmingDates.forEach(date => {
      const records = farmingByDate.get(date);
      const sampleRecord = records[0];
      console.log(`   ${date}: ${records.length} –∑–∞–ø–∏—Å–µ–π (–ø—Ä–∏–º–µ—Ä: User ${sampleRecord.user_id}, —Ç–∏–ø: ${typeof sampleRecord.user_id})`);
    });
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –∫—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å
  console.log('\n5. üéØ –ö–¢–û –ü–û–õ–£–ß–ê–ï–¢ –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –°–ï–ô–ß–ê–°:');
  
  const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
  const { data: recentIncomes } = await supabase
    .from('transactions')
    .select('user_id, created_at, amount_ton')
    .eq('type', 'FARMING_REWARD')
    .eq('currency', 'TON')
    .gte('created_at', fiveMinutesAgo)
    .order('created_at', { ascending: false });

  if (recentIncomes && recentIncomes.length > 0) {
    const uniqueUsers = [...new Set(recentIncomes.map(tx => tx.user_id))];
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueUsers.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n   –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    for (const userId of uniqueUsers.slice(0, 5)) {
      const user = await supabase.from('users').select('id').eq('id', userId).single();
      const farming = await supabase.from('ton_farming_data').select('user_id').eq('user_id', userId).single();
      
      if (user.data && farming.data) {
        console.log(`   ‚Ä¢ User ${userId}: users.id (${typeof user.data.id}) + farming.user_id (${typeof farming.data.user_id})`);
      }
    }
  }

  // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é
  console.log('\n6. üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–®–ï–ù–ò–Æ:');
  console.log('‚ïê'.repeat(50));
  
  if (joinFailures && joinFailures.length > 0) {
    console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: ${joinFailures.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç JOIN`);
    console.log('\nüõ†Ô∏è –í–ê–†–ò–ê–ù–¢–´ –†–ï–®–ï–ù–ò–Ø:');
    console.log('\n   1Ô∏è‚É£ –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):');
    console.log('      –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤');
    console.log('      –î–æ–±–∞–≤–∏—Ç—å CAST(user_id AS INTEGER) –≤ JOIN –∑–∞–ø—Ä–æ—Å—ã');
    console.log('\n   2Ô∏è‚É£ –î–û–õ–ì–û–°–†–û–ß–ù–û–ï –†–ï–®–ï–ù–ò–ï:');
    console.log('      –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ö–µ–º—É –ë–î - –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å–µ user_id –∫ INTEGER');
    console.log('\n   3Ô∏è‚É£ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø:');
    console.log('      –í—ã—è–≤–∏—Ç—å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä–∏');
  } else {
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º —Å JOIN –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–∞ –¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞');
  }

  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ó–∞–ø—É—Å–∫
analyzeDataTypeHistory()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });