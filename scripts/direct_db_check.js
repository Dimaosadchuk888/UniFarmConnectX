/**
 * –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase API
 * –ë–µ–∑ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
 */

import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseKey) {
  console.error('‚ùå SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkTable(tableName) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const { data, error, count } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true })
      .limit(1);

    if (error) {
      return {
        table: tableName,
        exists: false,
        error: error.message,
        status: 'missing'
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    let fields = [];
    if (count > 0) {
      const { data: sampleData } = await supabase
        .from(tableName)
        .select('*')
        .limit(1);
      
      if (sampleData && sampleData[0]) {
        fields = Object.keys(sampleData[0]);
      }
    }

    return {
      table: tableName,
      exists: true,
      records: count || 0,
      fields,
      status: 'exists'
    };
  } catch (err) {
    return {
      table: tableName,
      exists: false,
      error: err.message,
      status: 'error'
    };
  }
}

async function runDatabaseCheck() {
  console.log('üóÑÔ∏è –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• UNIFARM');
  console.log('=' .repeat(50));
  console.log(`Supabase URL: ${supabaseUrl}`);
  console.log(`–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toISOString()}\n`);

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü
  const tables = [
    'users',
    'transactions', 
    'referrals',
    'farming_sessions',
    'user_sessions',
    'boost_purchases',
    'missions',
    'user_missions',
    'airdrops',
    'daily_bonus_logs',
    'withdraw_requests'
  ];

  const results = {};
  let existingTables = 0;
  let missingTables = 0;

  console.log('üìã –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶:\n');

  for (const tableName of tables) {
    const result = await checkTable(tableName);
    results[tableName] = result;

    if (result.exists) {
      existingTables++;
      console.log(`‚úÖ ${tableName}: ${result.records} –∑–∞–ø–∏—Å–µ–π, ${result.fields.length} –ø–æ–ª–µ–π`);
      if (result.fields.length > 0) {
        console.log(`   –ü–æ–ª—è: ${result.fields.slice(0, 5).join(', ')}${result.fields.length > 5 ? '...' : ''}`);
      }
    } else {
      missingTables++;
      console.log(`‚ùå ${tableName}: –û–¢–°–£–¢–°–¢–í–£–ï–¢ (${result.error})`);
    }

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }

  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${existingTables}/${tables.length}`);
  console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${missingTables}/${tables.length}`);
  
  const completeness = Math.round((existingTables / tables.length) * 100);
  console.log(`üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${completeness}%`);

  // –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü
  const criticalTables = ['users', 'transactions', 'boost_purchases', 'missions', 'user_missions'];
  const criticalMissing = criticalTables.filter(table => !results[table]?.exists);
  
  if (criticalMissing.length > 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
    criticalMissing.forEach(table => {
      console.log(`- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  if (results.users?.exists && results.users.records > 0) {
    console.log('\nüë• –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const { data: userData } = await supabase
        .from('users')
        .select('id, username, balance_uni, balance_ton, created_at')
        .limit(5);
      
      if (userData && userData.length > 0) {
        console.log(`üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.users.records}`);
        console.log('üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        userData.forEach(user => {
          console.log(`   ID: ${user.id}, Username: ${user.username || 'N/A'}, UNI: ${user.balance_uni || 0}, TON: ${user.balance_ton || 0}`);
        });
      }
    } catch (err) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err.message}`);
    }
  }

  if (results.transactions?.exists && results.transactions.records > 0) {
    console.log('\nüí∞ –î–ê–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const { data: txData } = await supabase
        .from('transactions')
        .select('transaction_type, currency, amount')
        .limit(10);
      
      if (txData && txData.length > 0) {
        console.log(`üìà –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${results.transactions.records}`);
        console.log('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
        txData.slice(0, 3).forEach(tx => {
          console.log(`   –¢–∏–ø: ${tx.transaction_type}, –í–∞–ª—é—Ç–∞: ${tx.currency}, –°—É–º–º–∞: ${tx.amount}`);
        });
      }
    } catch (err) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${err.message}`);
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  
  if (completeness < 50) {
    console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—å–µ–∑–Ω–æ –Ω–µ–ø–æ–ª–Ω–∞—è');
    console.log('üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-—Å–∫—Ä–∏–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
    console.log('üìÑ –§–∞–π–ª: docs/database_fix_script.sql');
  } else if (completeness < 80) {
    console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞');
    console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
  } else {
    console.log('‚úÖ –•–û–†–û–®–û: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞');
    console.log('üéâ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º');
  }

  return {
    timestamp: new Date().toISOString(),
    completeness,
    existing_tables: existingTables,
    missing_tables: missingTables,
    total_tables: tables.length,
    critical_missing: criticalMissing,
    results
  };
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
runDatabaseCheck()
  .then(report => {
    console.log(`\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${report.completeness}%`);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    process.exit(1);
  });