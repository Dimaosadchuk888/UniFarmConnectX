#!/usr/bin/env tsx
/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤
 * –ó–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ cron –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { supabase } from '../core/supabase';
import { logger } from '../server/logger';

interface BalanceDiscrepancy {
  user_id: number;
  telegram_id: number;
  username: string;
  sum_deposits_ton: number;
  sum_rewards_ton: number;
  sum_withdrawals_ton: number;
  calculated_balance: number;
  actual_balance: number;
  difference: number;
}

async function checkBalanceConsistency(): Promise<void> {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton')
      .gt('balance_ton', 0)
      .order('id');

    if (usersError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersError.message}`);
    }

    if (!users || users.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º TON');
      return;
    }

    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º TON > 0\n`);

    const discrepancies: BalanceDiscrepancy[] = [];

    for (const user of users) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: transactions, error: txError } = await supabase
        .from('transactions')
        .select('type, amount_ton, status')
        .eq('user_id', user.id)
        .in('status', ['completed', 'confirmed'])
        .not('amount_ton', 'is', null);

      if (txError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è user_id ${user.id}:`, txError.message);
        continue;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      let sumDeposits = 0;
      let sumRewards = 0;
      let sumWithdrawals = 0;

      if (transactions) {
        for (const tx of transactions) {
          const amount = parseFloat(tx.amount_ton || '0');
          
          if (tx.type === 'TON_DEPOSIT') {
            sumDeposits += amount;
          } else if (tx.type === 'WITHDRAWAL' || tx.type === 'TON_WITHDRAWAL') {
            sumWithdrawals += amount;
          } else if (tx.type.includes('REWARD') || tx.type.includes('BONUS')) {
            sumRewards += amount;
          }
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
      const calculatedBalance = sumDeposits + sumRewards - sumWithdrawals;
      const actualBalance = parseFloat(user.balance_ton || '0');
      const difference = Math.abs(calculatedBalance - actualBalance);

      // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.000001 TON (6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π), —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º
      if (difference > 0.000001) {
        discrepancies.push({
          user_id: user.id,
          telegram_id: user.telegram_id,
          username: user.username || 'Unknown',
          sum_deposits_ton: sumDeposits,
          sum_rewards_ton: sumRewards,
          sum_withdrawals_ton: sumWithdrawals,
          calculated_balance: calculatedBalance,
          actual_balance: actualBalance,
          difference
        });
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (discrepancies.length === 0) {
      console.log('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã! –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n');
    } else {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${discrepancies.length} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π:\n`);
      
      // –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏
      console.table(discrepancies.map(d => ({
        'User ID': d.user_id,
        'Username': d.username,
        'Deposits': d.sum_deposits_ton.toFixed(6),
        'Rewards': d.sum_rewards_ton.toFixed(6),
        'Withdrawals': d.sum_withdrawals_ton.toFixed(6),
        'Calculated': d.calculated_balance.toFixed(6),
        'Actual': d.actual_balance.toFixed(6),
        'Difference': d.difference.toFixed(6)
      })));

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      logger.warn('[BalanceConsistency] –ù–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è:', {
        count: discrepancies.length,
        total_difference: discrepancies.reduce((sum, d) => sum + d.difference, 0),
        discrepancies
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ —Ö—ç—à–∞–º–∏ (SHA256 = 64 —Å–∏–º–≤–æ–ª–∞)
    const { data: suspiciousTransactions, error: suspiciousError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, tx_hash_unique, created_at')
      .eq('type', 'TON_DEPOSIT')
      .not('tx_hash_unique', 'is', null);

    if (!suspiciousError && suspiciousTransactions) {
      const fakehashes = suspiciousTransactions.filter(tx => 
        tx.tx_hash_unique && tx.tx_hash_unique.length === 64
      );

      if (fakehashes.length > 0) {
        console.log(`\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${fakehashes.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ö—ç—à–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–æ SHA256):`);
        console.table(fakehashes.slice(0, 10).map(tx => ({
          'ID': tx.id,
          'User ID': tx.user_id,
          'Amount': tx.amount_ton,
          'Hash': tx.tx_hash_unique?.substring(0, 16) + '...',
          'Date': new Date(tx.created_at).toLocaleDateString()
        })));

        if (fakehashes.length > 10) {
          console.log(`... –∏ –µ—â–µ ${fakehashes.length - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        }
      }
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:', error);
    logger.error('[BalanceConsistency] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkBalanceConsistency()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });