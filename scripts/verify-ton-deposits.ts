#!/usr/bin/env tsx
/**
 * –°–∫—Ä–∏–ø—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

import { supabase } from '../core/supabase';
import { logger } from '../server/logger';
import { Api, HttpClient } from 'tonapi-sdk-js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TonAPI (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ)
const TONAPI_KEY = process.env.TONAPI_KEY || 'AF3VKVIYB27V32AAAANH3TJXYXPK3GY6OQXE32MFXMADBWNLYVNNPAFPPRMKUOS7X55TH3Y';
const tonApiClient = new Api(new HttpClient({
  baseUrl: 'https://tonapi.io',
  baseApiParams: {
    headers: {
      'X-API-Key': TONAPI_KEY,
      'Content-Type': 'application/json'
    }
  }
}));

interface UnverifiedDeposit {
  id: number;
  user_id: number;
  amount_ton: string;
  tx_hash_unique: string;
  created_at: string;
  metadata: any;
}

async function verifyDeposits(): Promise<void> {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { data: deposits, error: depositsError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, tx_hash_unique, created_at, metadata')
      .eq('type', 'TON_DEPOSIT')
      .not('tx_hash_unique', 'is', null)
      .order('created_at', { ascending: false })
      .limit(100);

    if (depositsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositsError.message}`);
    }

    if (!deposits || deposits.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      return;
    }

    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º ${deposits.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n`);

    const unverified: UnverifiedDeposit[] = [];
    const verified: UnverifiedDeposit[] = [];
    const suspicious: UnverifiedDeposit[] = [];
    let skipped = 0;

    for (const deposit of deposits) {
      const hash = deposit.tx_hash_unique;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö—ç—à–∏ –¥–ª–∏–Ω–æ–π 64 —Å–∏–º–≤–æ–ª–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ SHA256)
      if (hash.length === 64) {
        suspicious.push(deposit);
        continue;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
      const txDate = new Date(deposit.created_at);
      const daysSinceCreation = (Date.now() - txDate.getTime()) / (1000 * 60 * 60 * 24);
      if (daysSinceCreation > 7) {
        skipped++;
        continue;
      }

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        const response = await tonApiClient.blockchain.getBlockchainRawTransaction(hash);
        
        if (response) {
          verified.push(deposit);
        } else {
          unverified.push(deposit);
        }
      } catch (error) {
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, API –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É
        if (error instanceof Error && error.message.includes('404')) {
          unverified.push(deposit);
        } else {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${deposit.id}:`, error instanceof Error ? error.message : 'Unknown error');
        }
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò:\n');
    console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ${verified.length}`);
    console.log(`‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ${unverified.length}`);
    console.log(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ö—ç—à–∏ (SHA256): ${suspicious.length}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å—Ç–∞—Ä—ã–µ): ${skipped}`);

    if (unverified.length > 0) {
      console.log('\n‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:');
      console.table(unverified.slice(0, 10).map(d => ({
        'ID': d.id,
        'User ID': d.user_id,
        'Amount': d.amount_ton,
        'Hash': d.tx_hash_unique.substring(0, 16) + '...',
        'Date': new Date(d.created_at).toLocaleDateString(),
        'Manual Review': d.metadata?.requires_manual_review || false
      })));

      if (unverified.length > 10) {
        console.log(`... –∏ –µ—â–µ ${unverified.length - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      logger.warn('[DepositVerification] –ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã:', {
        count: unverified.length,
        total_amount: unverified.reduce((sum, d) => sum + parseFloat(d.amount_ton), 0),
        deposit_ids: unverified.map(d => d.id)
      });
    }

    if (suspicious.length > 0) {
      console.log('\n‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ SHA256 —Ö—ç—à–∞–º–∏:');
      console.table(suspicious.slice(0, 10).map(d => ({
        'ID': d.id,
        'User ID': d.user_id,
        'Amount': d.amount_ton,
        'Hash': d.tx_hash_unique.substring(0, 16) + '...',
        'Date': new Date(d.created_at).toLocaleDateString()
      })));

      if (suspicious.length > 10) {
        console.log(`... –∏ –µ—â–µ ${suspicious.length - 10} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (unverified.length > 0 || suspicious.length > 0) {
      console.log('\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      if (unverified.length > 0) {
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–æ–∑–∏—Ç—ã —Å –ø–æ–º–µ—Ç–∫–æ–π requires_manual_review');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ö—ç—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ BOC');
      }
      if (suspicious.length > 0) {
        console.log('3. SHA256 —Ö—ç—à–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback - —ç—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
        console.log('4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ö—ç—à–∏ –∏–∑ BOC –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      }
    } else {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
    }

    console.log('\n‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    logger.error('[DepositVerification] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
verifyDeposits()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });