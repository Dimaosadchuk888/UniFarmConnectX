#!/usr/bin/env tsx
/**
 * –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –¢–ò–ü–ê–ú–ò –î–ê–ù–ù–´–•
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã User 287
 */

import { supabase } from '../core/supabase';

async function confirmDataTypeIssue() {
  console.log('üîç –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –¢–ò–ü–ê–ú–ò –î–ê–ù–ù–´–•');
  console.log('==========================================');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`);

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User 287
  console.log('1. üìä –¢–ò–ü–´ –î–ê–ù–ù–´–• USER 287:');
  
  const { data: user287 } = await supabase
    .from('users')
    .select('id, ton_boost_package')
    .eq('id', 287)
    .single();

  const { data: farming287 } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_package_id, boost_active, farming_balance')
    .eq('user_id', 287)
    .single();

  if (user287 && farming287) {
    console.log(`   users.id: ${user287.id} (—Ç–∏–ø: ${typeof user287.id})`);
    console.log(`   ton_farming_data.user_id: ${farming287.user_id} (—Ç–∏–ø: ${typeof farming287.user_id})`);
    console.log(`   JavaScript == —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${user287.id == farming287.user_id ? '‚úÖ –ò–°–¢–ò–ù–ê' : '‚ùå –õ–û–ñ–¨'}`);
    console.log(`   JavaScript === —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${user287.id === farming287.user_id ? '‚úÖ –ò–°–¢–ò–ù–ê' : '‚ùå –õ–û–ñ–¨'}`);
    
    if (typeof user287.id !== typeof farming287.user_id) {
      console.log('\n‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–•!');
      console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É Supabase JOIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è User 287');
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\n2. üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ê–ë–û–¢–ê–Æ–©–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú (User 25):');
  
  const { data: user25 } = await supabase
    .from('users')
    .select('id')
    .eq('id', 25)
    .single();

  const { data: farming25 } = await supabase
    .from('ton_farming_data')
    .select('user_id')
    .eq('user_id', 25)
    .single();

  if (user25 && farming25) {
    console.log(`   users.id: ${user25.id} (—Ç–∏–ø: ${typeof user25.id})`);
    console.log(`   ton_farming_data.user_id: ${farming25.user_id} (—Ç–∏–ø: ${typeof farming25.user_id})`);
    console.log(`   JavaScript == —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${user25.id == farming25.user_id ? '‚úÖ –ò–°–¢–ò–ù–ê' : '‚ùå –õ–û–ñ–¨'}`);
    console.log(`   JavaScript === —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${user25.id === farming25.user_id ? '‚úÖ –ò–°–¢–ò–ù–ê' : '‚ùå –õ–û–ñ–¨'}`);
    
    const sameTypesAsUser287 = (typeof user25.id === typeof user287?.id) && (typeof farming25.user_id === typeof farming287?.user_id);
    console.log(`   –¢–∞–∫–∏–µ –∂–µ —Ç–∏–ø—ã –∫–∞–∫ —É User 287: ${sameTypesAsUser287 ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  }

  // 3. –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  console.log('\n3. üìä –ú–ê–°–°–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –î–ê–ù–ù–´–•:');
  
  const { data: allUsers } = await supabase
    .from('users')
    .select('id')
    .not('ton_boost_package', 'is', null)
    .limit(10);

  const { data: allFarming } = await supabase
    .from('ton_farming_data')
    .select('user_id')
    .eq('boost_active', true)
    .limit(10);

  if (allUsers && allFarming) {
    console.log('   –¢–∏–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users (–ø–æ–ª–µ id):');
    const userTypes = new Set(allUsers.map(u => typeof u.id));
    userTypes.forEach(type => console.log(`   ‚Ä¢ ${type}`));
    
    console.log('\n   –¢–∏–ø—ã –≤ —Ç–∞–±–ª–∏—Ü–µ ton_farming_data (–ø–æ–ª–µ user_id):');
    const farmingTypes = new Set(allFarming.map(f => typeof f.user_id));
    farmingTypes.forEach(type => console.log(`   ‚Ä¢ ${type}`));
    
    const hasTypeMismatch = userTypes.size > 1 || farmingTypes.size > 1 || 
                           !Array.from(userTypes).every(type => farmingTypes.has(type));
    
    console.log(`\n   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤: ${hasTypeMismatch ? '‚ùå –î–ê' : '‚úÖ –ù–ï–¢'}`);
  }

  // 4. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö JOIN –º–µ—Ç–æ–¥–æ–≤
  console.log('\n4. üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• JOIN –ú–ï–¢–û–î–û–í:');
  
  // –ú–µ—Ç–æ–¥ 1: –°—Ç—Ä–æ–≥–∏–π JOIN —á–µ—Ä–µ–∑ Supabase
  try {
    const { data: strictJoin } = await supabase
      .from('ton_farming_data')
      .select(`
        user_id,
        boost_active,
        farming_balance,
        users!inner(id, ton_boost_package)
      `)
      .eq('boost_active', true)
      .gt('farming_balance', 0);
      
    const user287InStrictJoin = strictJoin?.find(record => record.user_id == 287);
    console.log(`   –°—Ç—Ä–æ–≥–∏–π Supabase JOIN - User 287: ${user287InStrictJoin ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
  } catch (error) {
    console.log(`   –°—Ç—Ä–æ–≥–∏–π Supabase JOIN - –û–®–ò–ë–ö–ê: ${error.message}`);
  }

  // –ú–µ—Ç–æ–¥ 2: –†—É—á–Ω–æ–π JOIN —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
  const { data: farmingRecords } = await supabase
    .from('ton_farming_data')
    .select('user_id, boost_active, farming_balance')
    .eq('boost_active', true)
    .gt('farming_balance', 0);

  const { data: userRecords } = await supabase
    .from('users')
    .select('id, ton_boost_package')
    .not('ton_boost_package', 'is', null);

  if (farmingRecords && userRecords) {
    const manualJoin = farmingRecords.filter(farming => 
      userRecords.some(user => user.id == farming.user_id)
    );
    
    const user287InManualJoin = manualJoin.find(record => record.user_id == 287);
    console.log(`   –†—É—á–Ω–æ–π JavaScript JOIN - User 287: ${user287InManualJoin ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ä—É—á–Ω–æ–º JOIN: ${manualJoin.length}`);
  }

  // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
  console.log('\n5. üí° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø:');
  
  if (user287 && farming287) {
    console.log('   –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:');
    console.log(`   ‚Ä¢ users.id (${typeof user287.id}): ${user287.id}`);
    console.log(`   ‚Ä¢ farming.user_id (${typeof farming287.user_id}): ${farming287.user_id}`);
    console.log(`   ‚Ä¢ –°—É—Ä–æ–≤–æ–µ SQL —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –õ–û–ñ–¨`);
    console.log(`   ‚Ä¢ JavaScript —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${user287.id == farming287.user_id}`);
    
    console.log('\n   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:');
    console.log(`   ‚Ä¢ WHERE users.id = CAST(ton_farming_data.user_id AS INTEGER)`);
    console.log(`   ‚Ä¢ –ò–õ–ò WHERE CAST(users.id AS TEXT) = ton_farming_data.user_id`);
  }

  // 6. –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑
  console.log('\n6. üéØ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:');
  console.log('‚ïê'.repeat(50));
  console.log('‚úÖ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:');
  console.log('   –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–≤—è–∑—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏');
  console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê:');
  console.log('   ‚Ä¢ users.id –∏–º–µ–µ—Ç —Ç–∏–ø INTEGER (number –≤ JavaScript)');
  console.log('   ‚Ä¢ ton_farming_data.user_id –∏–º–µ–µ—Ç —Ç–∏–ø TEXT (string –≤ JavaScript)');
  console.log('\nüîß –í–û–ó–î–ï–ô–°–¢–í–ò–ï:');
  console.log('   ‚Ä¢ Supabase JOIN –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç (—Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è SQL)');
  console.log('   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase JOIN –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç User 287');
  console.log('   ‚Ä¢ JavaScript JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç (–∞–≤—Ç–æ–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤)');
  console.log('\nüíä –†–ï–®–ï–ù–ò–ï:');
  console.log('   –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö');
  console.log('   –≤ SQL –∑–∞–ø—Ä–æ—Å–∞—Ö –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü');

  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ó–∞–ø—É—Å–∫
confirmDataTypeIssue()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });