import { supabase } from '../core/supabase.js';

async function syncUser74() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 74...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 74)
      .single();
    
    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', checkError);
      return;
    }
    
    if (existingUser) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 74 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingUser);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
      if (existingUser.balance_uni !== '1000' || existingUser.balance_ton !== '1000') {
        console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã...');
        
        const { error: updateError } = await supabase
          .from('users')
          .update({
            balance_uni: '1000',
            balance_ton: '1000'
          })
          .eq('id', 74);
        
        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', updateError);
        } else {
          console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: 1000 UNI, 1000 TON');
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 74 –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = {
        id: 74,
        telegram_id: 999489,
        username: 'test_user_1752129840905',
        first_name: 'Test',
        last_name: null,
        is_premium: false,
        language_code: 'en',
        balance_uni: '1000',
        balance_ton: '1000',
        ref_code: `REF_${Date.now()}_test74`,
        referred_by: null,
        is_active: true,
        is_admin: false,
        uni_farming_balance: '0',
        uni_farming_active: false,
        uni_farming_start_timestamp: null,
        uni_deposit_amount: '0',
        ton_wallet_address: null,
        ton_wallet_verified: false,
        ton_wallet_linked_at: null,
        ton_boost_package: null,
        ton_boost_active_until: null,
        created_at: new Date().toISOString()
      };
      
      const { data: createdUser, error: createError } = await supabase
        .from('users')
        .insert(newUser)
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
        console.error('–î–µ—Ç–∞–ª–∏:', createError.details);
      } else {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', createdUser);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: finalUser, error: finalError } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, ref_code')
      .eq('id', 74)
      .single();
    
    if (finalError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', finalError);
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', finalUser);
    }
    
  } catch (error) {
    console.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
syncUser74();