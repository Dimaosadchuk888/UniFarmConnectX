/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü Supabase –¥–∞–Ω–Ω—ã–º–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Supabase API –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY || process.env.SUPABASE_SERVICE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function fillMissions() {
  console.log('\nüì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã missions...');

  const missions = [
    {
      id: 1,
      title: '–ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç',
      description: '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç UNI –≤ —Ñ–∞—Ä–º–∏–Ω–≥',
      reward_uni: 10,
      reward_ton: 0,
      type: 'one_time',
      status: 'active'
    },
    {
      id: 2,
      title: '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞',
      description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 –¥—Ä—É–≥–∞ –≤ UniFarm',
      reward_uni: 5,
      reward_ton: 0,
      type: 'one_time',
      status: 'active'
    },
    {
      id: 3,
      title: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞—Ä–º–µ—Ä',
      description: '–§–∞—Ä–º–∏—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞',
      reward_uni: 20,
      reward_ton: 0,
      type: 'streak',
      status: 'active'
    },
    {
      id: 4,
      title: 'TON Boost –∞–∫—Ç–∏–≤–∞—Ü–∏—è',
      description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π TON Boost –ø–∞–∫–µ—Ç',
      reward_uni: 0,
      reward_ton: 0.1,
      type: 'one_time',
      status: 'active'
    },
    {
      id: 5,
      title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª',
      reward_uni: 2,
      reward_ton: 0,
      type: 'social',
      status: 'active'
    }
  ];

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∏—Å—Å–∏–∏
    const { data: existing, error: checkError } = await supabase
      .from('missions')
      .select('id')
      .limit(1);

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã missions:', checkError.message);
      return;
    }

    if (!existing || existing.length === 0) {
      const { data, error } = await supabase
        .from('missions')
        .upsert(missions, { onConflict: 'id' });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã missions:', error.message);
      } else {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ missions –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      }
    } else {
      console.log('‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ missions —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å missions:', err);
  }
}

async function migrateReferrals() {
  console.log('\nüì• –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, referred_by, created_at')
      .not('referred_by', 'is', null);

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError.message);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const referralsToInsert = users
      .filter(user => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ referred_by —ç—Ç–æ —á–∏—Å–ª–æ
        return user.referred_by && 
               user.referred_by !== 'null' && 
               /^\d+$/.test(user.referred_by.toString());
      })
      .map(user => ({
        referrer_id: parseInt(user.referred_by),
        referred_id: user.id,
        level: 1,
        created_at: user.created_at
      }));

    if (referralsToInsert.length > 0) {
      const { error: insertError } = await supabase
        .from('referrals')
        .upsert(referralsToInsert, { 
          onConflict: 'referrer_id,referred_id',
          ignoreDuplicates: true 
        });

      if (insertError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ referrals:', insertError.message);
      } else {
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${referralsToInsert.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π`);
      }
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
  }
}

async function verifyTablesData() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...\n');

  const tables = [
    'users',
    'user_sessions',
    'transactions',
    'referrals',
    'farming_sessions',
    'boost_purchases',
    'missions',
    'user_missions',
    'airdrops',
    'daily_bonus_logs',
    'withdraw_requests'
  ];

  for (const table of tables) {
    try {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });

      if (error) {
        console.log(`‚ùå ${table}: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - ${error.message}`);
      } else {
        const status = count > 0 ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`${status} ${table}: ${count || 0} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  }
}

async function updateReferrerIds() {
  console.log('\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ referrer_id –≤ —Ç–∞–±–ª–∏—Ü–µ users...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å referred_by –Ω–æ –±–µ–∑ referrer_id
    const { data: users, error: fetchError } = await supabase
      .from('users')
      .select('id, referred_by')
      .not('referred_by', 'is', null)
      .is('referrer_id', null);

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', fetchError.message);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è  –í—Å–µ referrer_id —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      return;
    }

    let updated = 0;
    for (const user of users) {
      if (user.referred_by && /^\d+$/.test(user.referred_by.toString())) {
        const referrerId = parseInt(user.referred_by);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const { data: referrer } = await supabase
          .from('users')
          .select('id')
          .eq('id', referrerId)
          .single();

        if (referrer) {
          const { error: updateError } = await supabase
            .from('users')
            .update({ referrer_id: referrerId })
            .eq('id', user.id);

          if (!updateError) {
            updated++;
          }
        }
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∑–∞–ø–∏—Å–µ–π referrer_id`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ referrer_id:', err);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Supabase –¥–ª—è UniFarm...\n');
  
  console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω SQL —Å–∫—Ä–∏–ø—Ç');
  console.log('   scripts/supabase-create-tables.sql –≤ Supabase Dashboard!\n');
  
  try {
    await fillMissions();
    await migrateReferrals();
    await updateReferrerIds();
    await verifyTablesData();
    
    console.log('\n‚ú® –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Supabase Dashboard');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î');
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();