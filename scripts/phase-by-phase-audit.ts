#!/usr/bin/env tsx
/**
 * –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∞—É–¥–∏—Ç –∏ –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î
 * –¶–µ–ª—å: 100% —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –ë–î
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

interface DataIntegrityCheck {
  tableName: string;
  recordCount: number;
  criticalData: any[];
  checksumBefore?: string;
  checksumAfter?: string;
}

interface OptimizationPhase {
  phase: number;
  name: string;
  description: string;
  priority: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  preChecks: string[];
  actions: string[];
  postChecks: string[];
  rollbackPlan: string;
  estimatedTime: string;
  risks: string[];
}

const auditData = {
  timestamp: new Date().toISOString(),
  databaseSnapshot: {} as any,
  dataIntegrity: [] as DataIntegrityCheck[],
  systemCodeAnalysis: {} as any,
  optimizationPhases: [] as OptimizationPhase[],
  validationTests: [] as any[]
};

// 1. –ü–æ–ª–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
async function createDatabaseSnapshot() {
  console.log('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ –ë–î...\n');
  
  const tables = [
    'users', 'transactions', 'withdraw_requests', 
    'uni_farming_data', 'ton_farming_data', 'referrals', 'missions'
  ];
  
  for (const table of tables) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      const { count } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: samples } = await supabase
        .from(table)
        .select('*')
        .limit(5);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      let criticalQuery;
      switch (table) {
        case 'users':
          criticalQuery = await supabase
            .from(table)
            .select('id, telegram_id, balance_uni, balance_ton, uni_farming_balance, ton_farming_balance')
            .order('balance_uni', { ascending: false })
            .limit(20);
          break;
          
        case 'transactions':
          criticalQuery = await supabase
            .from(table)
            .select('id, user_id, type, amount_uni, amount_ton, currency, amount')
            .order('created_at', { ascending: false })
            .limit(50);
          break;
          
        default:
          criticalQuery = { data: [] };
      }
      
      auditData.databaseSnapshot[table] = {
        exists: true,
        recordCount: count || 0,
        columns: samples && samples.length > 0 ? Object.keys(samples[0]) : [],
        samples,
        criticalData: criticalQuery.data || []
      };
      
      console.log(`‚úì ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      
    } catch (error) {
      console.log(`‚úó ${table}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      auditData.databaseSnapshot[table] = { exists: false };
    }
  }
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
async function checkDataIntegrity() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { data: userBalances } = await supabase
    .from('users')
    .select('id, telegram_id, balance_uni, balance_ton, uni_farming_balance, ton_farming_balance');
  
  const balanceChecksum = userBalances?.reduce((sum, user) => {
    return sum + 
      (user.balance_uni || 0) + 
      (user.balance_ton || 0) + 
      (user.uni_farming_balance || 0) + 
      (user.ton_farming_balance || 0);
  }, 0) || 0;
  
  console.log(`–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤: ${balanceChecksum}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
  const orphanChecks = [
    {
      name: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      query: `
        SELECT COUNT(*) as count
        FROM transactions t
        LEFT JOIN users u ON t.user_id = u.id
        WHERE u.id IS NULL
      `
    },
    {
      name: '–í—ã–≤–æ–¥—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      query: `
        SELECT COUNT(*) as count
        FROM withdraw_requests wr
        LEFT JOIN users u ON wr.user_id = u.id
        WHERE u.id IS NULL
      `
    },
    {
      name: 'Farming –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      query: `
        SELECT COUNT(*) as count
        FROM uni_farming_data ufd
        LEFT JOIN users u ON ufd.user_id = u.id
        WHERE u.id IS NULL
      `
    }
  ];
  
  for (const check of orphanChecks) {
    // –ó–∞–º–µ–Ω—è–µ–º RPC –Ω–∞ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    let count = 0;
    
    if (check.name === '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
      const { data: orphanTx } = await supabase
        .from('transactions')
        .select('id')
        .is('user_id', null);
      count = orphanTx?.length || 0;
    } else if (check.name === '–í—ã–≤–æ–¥—ã –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
      const { data: orphanWr } = await supabase
        .from('withdraw_requests')
        .select('id')
        .is('user_id', null);
      count = orphanWr?.length || 0;
    } else if (check.name === 'Farming –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
      const { data: orphanUfd } = await supabase
        .from('uni_farming_data')
        .select('id')
        .is('user_id', null);
      count = orphanUfd?.length || 0;
    }
    
    console.log(`${check.name}: ${count}`);
  }
  
  auditData.dataIntegrity.push({
    tableName: 'users',
    recordCount: userBalances?.length || 0,
    criticalData: userBalances || [],
    checksumBefore: balanceChecksum.toString()
  });
}

// 3. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã
async function analyzeSystemCode() {
  console.log('\nüíª –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã...\n');
  
  const codePatterns = {
    'uni_farming_data': [
      'server/repositories/UniFarmingRepository.ts',
      'server/services/UniFarmingService.ts'
    ],
    'ton_farming_data': [
      'server/repositories/TonFarmingRepository.ts',
      'server/services/TonBoostService.ts'
    ],
    'referrals': [
      'server/services/ReferralService.ts',
      'server/controllers/ReferralController.ts'
    ],
    'withdraw_requests': [
      'server/controllers/WithdrawController.ts',
      'server/services/AdminWithdrawService.ts'
    ]
  };
  
  auditData.systemCodeAnalysis = {
    dependencies: codePatterns,
    criticalPaths: [
      'BalanceManager.modifyBalance ‚Üí transactions',
      'UniFarmingRepository.getByUserId ‚Üí users.uni_farming_*',
      'ReferralService.processRewards ‚Üí users.referred_by',
      'WithdrawController.create ‚Üí withdraw_requests + users.balance_ton'
    ]
  };
  
  console.log('–ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö: 4');
}

// 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
function createOptimizationPhases() {
  console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...\n');
  
  auditData.optimizationPhases = [
    {
      phase: 0,
      name: '–ü–û–î–ì–û–¢–û–í–ö–ê –ò –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏',
      priority: 'CRITICAL',
      preChecks: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ë–î —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
        '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (maintenance mode)',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π'
      ],
      actions: [
        'pg_dump –ø–æ–ª–Ω—ã–π –¥–∞–º–ø –ë–î –≤ —Ñ–∞–π–ª backup_YYYYMMDD_HHMMSS.sql',
        '–≠–∫—Å–ø–æ—Ä—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ CSV –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã',
        '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π',
        '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      ],
      postChecks: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å backup —Ñ–∞–π–ª–∞',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î',
        '–°—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã'
      ],
      rollbackPlan: '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —ç—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø',
      estimatedTime: '30 –º–∏–Ω—É—Ç',
      risks: ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ']
    },
    
    {
      phase: 1,
      name: '–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø FARMING –î–ê–ù–ù–´–•',
      description: '–ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö farming –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É users',
      priority: 'CRITICAL',
      preChecks: [
        'SELECT COUNT(*) FROM uni_farming_data WHERE user_id NOT IN (SELECT id FROM users)',
        'SELECT COUNT(*) FROM ton_farming_data WHERE user_id NOT IN (SELECT id FROM users)',
        '–°—Ä–∞–≤–Ω–∏—Ç—å uni_deposit_amount –≤ users –∏ deposit_amount –≤ uni_farming_data',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø–æ–ª—è farming —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ users'
      ],
      actions: [
        'BEGIN TRANSACTION',
        'UPDATE users —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ uni_farming_data (—Ç–æ–ª—å–∫–æ –≥–¥–µ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è)',
        'UPDATE users —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ton_farming_data (—Ç–æ–ª—å–∫–æ –≥–¥–µ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è)',
        '–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã archive_uni_farming_data –∏ archive_ton_farming_data',
        'INSERT INTO archive_* SELECT * FROM farming —Ç–∞–±–ª–∏—Ü',
        'COMMIT TRANSACTION'
      ],
      postChecks: [
        '–°—Ä–∞–≤–Ω–∏—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ—Ä—ã',
        'SELECT –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ñ–∞—Ä–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API'
      ],
      rollbackPlan: 'ROLLBACK TRANSACTION –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup',
      estimatedTime: '15 –º–∏–Ω—É—Ç',
      risks: [
        '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏',
        '–ü–æ—Ç–µ—Ä—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞'
      ]
    },
    
    {
      phase: 2,
      name: '–û–ß–ò–°–¢–ö–ê WITHDRAW_REQUESTS',
      description: '–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–≤–æ–¥–æ–≤',
      priority: 'HIGH',
      preChecks: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ telegram_id –∏ username –≤ withdraw_requests —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å users',
        '–ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ (pending) –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ –æ—Ç —ç—Ç–∏—Ö –ø–æ–ª–µ–π'
      ],
      actions: [
        'CREATE VIEW withdraw_requests_full —Å JOIN –Ω–∞ users',
        '–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VIEW –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
        'ALTER TABLE withdraw_requests DROP COLUMN telegram_id, username'
      ],
      postChecks: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–ø–∏—Å–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥',
        '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ VIEW –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      ],
      rollbackPlan: 'ALTER TABLE ADD COLUMN –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup',
      estimatedTime: '10 –º–∏–Ω—É—Ç',
      risks: ['–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π']
    },
    
    {
      phase: 3,
      name: '–£–ù–ò–§–ò–ö–ê–¶–ò–Ø TRANSACTIONS',
      description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞',
      priority: 'HIGH',
      preChecks: [
        '–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (amount_uni/amount_ton)',
        '–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (amount + currency)',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ–±–æ–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏'
      ],
      actions: [
        'ALTER TABLE transactions ADD COLUMN unified_amount GENERATED',
        'ALTER TABLE transactions ADD COLUMN unified_currency GENERATED',
        'CREATE INDEX –Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—è—Ö',
        '–û–±–Ω–æ–≤–∏—Ç—å TransactionService –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è unified –ø–æ–ª–µ–π'
      ],
      postChecks: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
        '–°—Ä–∞–≤–Ω–∏—Ç—å —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ –∏ –ø–æ—Å–ª–µ'
      ],
      rollbackPlan: 'DROP COLUMN –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –ø–æ–ª–µ–π',
      estimatedTime: '20 –º–∏–Ω—É—Ç',
      risks: ['–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤ GENERATED –ø–æ–ª—è—Ö']
    },
    
    {
      phase: 4,
      name: '–°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ–©–ò–• –ò–ù–î–ï–ö–°–û–í',
      description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤',
      priority: 'MEDIUM',
      preChecks: [
        '–ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª–æ–≥–æ–≤',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤',
        '–û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤'
      ],
      actions: [
        'CREATE INDEX –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª—è—Ö',
        'CREATE INDEX –¥–ª—è foreign keys',
        'CREATE INDEX –¥–ª—è WHERE —É—Å–ª–æ–≤–∏–π',
        'ANALYZE —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      ],
      postChecks: [
        'EXPLAIN ANALYZE –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤',
        '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
      ],
      rollbackPlan: 'DROP INDEX –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤',
      estimatedTime: '10 –º–∏–Ω—É—Ç',
      risks: ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ë–î', '–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ INSERT –æ–ø–µ—Ä–∞—Ü–∏–π']
    },
    
    {
      phase: 5,
      name: '–£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –¢–ê–ë–õ–ò–¶',
      description: '–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏',
      priority: 'LOW',
      preChecks: [
        '–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24+ —á–∞—Å–∞ –±–µ–∑ farming —Ç–∞–±–ª–∏—Ü',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã',
        'Grep –∫–æ–¥–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü'
      ],
      actions: [
        'DROP TABLE uni_farming_data CASCADE',
        'DROP TABLE ton_farming_data CASCADE',
        'DROP TABLE user_sessions CASCADE (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)',
        '–û–±–Ω–æ–≤–∏—Ç—å schema.ts —É–±—Ä–∞–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü'
      ],
      postChecks: [
        '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏',
        '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤'
      ],
      rollbackPlan: 'CREATE TABLE –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ archive —Ç–∞–±–ª–∏—Ü',
      estimatedTime: '5 –º–∏–Ω—É—Ç',
      risks: ['–°–∫—Ä—ã—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ']
    },
    
    {
      phase: 6,
      name: '–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–î–ê –ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò',
      description: '–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î',
      priority: 'CRITICAL',
      preChecks: [
        '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
      ],
      actions: [
        '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ Repository –∫–ª–∞—Å—Å—ã',
        '–û–±–Ω–æ–≤–∏—Ç—å Service –∫–ª–∞—Å—Å—ã',
        '–û–±–Ω–æ–≤–∏—Ç—å shared/schema.ts',
        '–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API',
        '–°–æ–∑–¥–∞—Ç—å migration guide'
      ],
      postChecks: [
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—é',
        '–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π'
      ],
      rollbackPlan: 'Git revert –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏',
      estimatedTime: '45 –º–∏–Ω—É—Ç',
      risks: ['–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', '–û—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏']
    }
  ];
  
  auditData.optimizationPhases.forEach(phase => {
    console.log(`–§–∞–∑–∞ ${phase.phase}: ${phase.name} [${phase.priority}]`);
  });
}

// 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function createValidationTests() {
  console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n');
  
  auditData.validationTests = [
    {
      name: '–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤',
      query: `
        WITH balance_check AS (
          SELECT 
            SUM(balance_uni) as total_uni,
            SUM(balance_ton) as total_ton,
            SUM(uni_farming_balance) as total_farming_uni,
            SUM(ton_farming_balance) as total_farming_ton
          FROM users
        )
        SELECT * FROM balance_check
      `,
      expected: '–°—É–º–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –¥–æ –∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏'
    },
    {
      name: '–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤',
      query: `
        SELECT COUNT(*) as active_farmers
        FROM users
        WHERE uni_farming_active = true
      `,
      expected: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å uni_farming_data'
    },
    {
      name: '–¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π',
      query: `
        SELECT COUNT(*) as referral_links
        FROM users
        WHERE referred_by IS NOT NULL
      `,
      expected: '–í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
    },
    {
      name: '–¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      query: `
        SELECT 
          COUNT(*) as total,
          SUM(COALESCE(amount, amount_uni + amount_ton)) as total_amount
        FROM transactions
      `,
      expected: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å'
    }
  ];
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runPhaseByPhaseAudit() {
  console.log('üöÄ –ü–û–≠–¢–ê–ü–ù–´–ô –ê–£–î–ò–¢ –ò –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ë–î');
  console.log('=' .repeat(50) + '\n');
  
  try {
    await createDatabaseSnapshot();
    await checkDataIntegrity();
    await analyzeSystemCode();
    createOptimizationPhases();
    createValidationTests();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
    const planPath = path.join(
      process.cwd(),
      'docs',
      'PHASE_BY_PHASE_OPTIMIZATION_PLAN.json'
    );
    
    await fs.writeFile(planPath, JSON.stringify(auditData, null, 2));
    
    console.log(`\n‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: ${planPath}`);
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò');
    console.log('='.repeat(50));
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${auditData.optimizationPhases.length}`);
    console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∑: ${auditData.optimizationPhases.filter(p => p.priority === 'CRITICAL').length}`);
    console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ~3 —á–∞—Å–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º`);
    console.log(`–¢–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${auditData.validationTests.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

runPhaseByPhaseAudit().catch(console.error);