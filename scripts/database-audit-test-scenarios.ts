#!/usr/bin/env tsx
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞—É–¥–∏—Ç–∞ –ë–î
 * –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó –∏–∑ docs/FULL_DATABASE_AUDIT_REPORT.md
 * 
 * –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { promises as fs } from 'fs';
import path from 'path';

dotenv.config();

if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_TELEGRAM_ID = 999999999;
const TEST_USERNAME = 'test_user_audit';
const TEST_REF_CODE = 'TEST_AUDIT_2025';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface TestUser {
  id: number;
  telegram_id: number;
  username: string;
  ref_code: string;
  balance_uni: number;
  balance_ton: number;
  [key: string]: any;
}

interface TestResult {
  scenario: string;
  status: 'success' | 'failed';
  details: any;
  errors?: string[];
}

const results: TestResult[] = [];

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message: string, data?: any) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
  if (data) {
    console.log(JSON.stringify(data, null, 2));
  }
}

// 1. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData() {
  log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: testUsers } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', TEST_TELEGRAM_ID);
    
    if (testUsers && testUsers.length > 0) {
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      for (const user of testUsers) {
        await supabase
          .from('transactions')
          .delete()
          .eq('user_id', user.id);
          
        await supabase
          .from('withdraw_requests')
          .delete()
          .eq('user_id', user.id);
      }
      
      // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error } = await supabase
        .from('users')
        .delete()
        .eq('telegram_id', TEST_TELEGRAM_ID);
      
      if (error && error.code !== 'PGRST116') {
        log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
    
    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await supabase
      .from('users')
      .delete()
      .eq('telegram_id', 888888888);
    
    log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}

// 2. –°—Ü–µ–Ω–∞—Ä–∏–π: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testUserRegistration(): Promise<TestUser | null> {
  log('\nüìù –°–¶–ï–ù–ê–†–ò–ô 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const result: TestResult = {
    scenario: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    status: 'failed',
    details: {}
  };
  
  try {
    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser, error } = await supabase
      .from('users')
      .insert({
        telegram_id: TEST_TELEGRAM_ID,
        username: TEST_USERNAME,
        first_name: 'Test Audit User',
        ref_code: TEST_REF_CODE,
        balance_uni: '0',
        balance_ton: '0'
      })
      .select()
      .single();
    
    if (error) {
      result.errors = [error.message];
      results.push(result);
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
    
    log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', {
      id: newUser.id,
      telegram_id: newUser.telegram_id,
      ref_code: newUser.ref_code
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ welcome —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    const { data: welcomeTx } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', newUser.id)
      .eq('type', 'DAILY_BONUS')
      .single();
    
    result.status = 'success';
    result.details = {
      user_created: true,
      user_id: newUser.id,
      ref_code_generated: newUser.ref_code,
      welcome_transaction: welcomeTx ? true : false,
      tables_affected: ['users', welcomeTx ? 'transactions' : null].filter(Boolean)
    };
    
    results.push(result);
    return newUser;
    
  } catch (error) {
    result.errors = [String(error)];
    results.push(result);
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return null;
  }
}

// 3. –°—Ü–µ–Ω–∞—Ä–∏–π: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async function testBalanceAssignment(user: TestUser) {
  log('\nüí∞ –°–¶–ï–ù–ê–†–ò–ô 2: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
  
  const result: TestResult = {
    scenario: '–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
    status: 'failed',
    details: {}
  };
  
  try {
    // –ù–∞—á–∏—Å–ª—è–µ–º 10 TON
    const { data: tonUpdate, error: tonError } = await supabase
      .from('users')
      .update({ balance_ton: '10' })
      .eq('id', user.id)
      .select()
      .single();
    
    if (tonError) {
      result.errors = ['TON update: ' + tonError.message];
      results.push(result);
      return;
    }
    
    log('‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ 10 TON');
    
    // –ù–∞—á–∏—Å–ª—è–µ–º 100 UNI
    const { data: uniUpdate, error: uniError } = await supabase
      .from('users')
      .update({ balance_uni: '100' })
      .eq('id', user.id)
      .select()
      .single();
    
    if (uniError) {
      result.errors = ['UNI update: ' + uniError.message];
      results.push(result);
      return;
    }
    
    log('‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ 100 UNI');
    
    // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactions = [
      {
        user_id: user.id,
        type: 'DEPOSIT',
        currency: 'TON',
        amount: '10',
        amount_ton: '10',
        amount_uni: '0',
        description: 'Test deposit TON',
        status: 'confirmed'
      },
      {
        user_id: user.id,
        type: 'DEPOSIT',
        currency: 'UNI',
        amount: '100',
        amount_uni: '100',
        amount_ton: '0',
        description: 'Test deposit UNI',
        status: 'confirmed'
      }
    ];
    
    const { error: txError } = await supabase
      .from('transactions')
      .insert(transactions);
    
    if (txError) {
      log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError);
    }
    
    result.status = 'success';
    result.details = {
      balances_updated: {
        ton: uniUpdate.balance_ton,
        uni: uniUpdate.balance_uni
      },
      transactions_created: !txError,
      tables_affected: ['users', 'transactions']
    };
    
    results.push(result);
    
  } catch (error) {
    result.errors = [String(error)];
    results.push(result);
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// 4. –°—Ü–µ–Ω–∞—Ä–∏–π: –§–∞—Ä–º–∏–Ω–≥
async function testFarming(user: TestUser) {
  log('\nüåæ –°–¶–ï–ù–ê–†–ò–ô 3: –§–∞—Ä–º–∏–Ω–≥ / –±—É—Å—Ç—ã / –±–æ–Ω—É—Å—ã');
  
  const result: TestResult = {
    scenario: '–§–∞—Ä–º–∏–Ω–≥ –∏ –±—É—Å—Ç—ã',
    status: 'failed',
    details: {}
  };
  
  try {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º UNI farming
    const farmingData = {
      uni_farming_active: true,
      uni_deposit_amount: '50',
      uni_farming_start_timestamp: new Date().toISOString(),
      uni_farming_rate: '0.01',
      uni_farming_balance: '0'
    };
    
    const { data: farmingUpdate, error: farmingError } = await supabase
      .from('users')
      .update(farmingData)
      .eq('id', user.id)
      .select()
      .single();
    
    if (farmingError) {
      result.errors = ['Farming activation: ' + farmingError.message];
      results.push(result);
      return;
    }
    
    log('‚úÖ UNI farming –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    
    // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
    const { error: depositTxError } = await supabase
      .from('transactions')
      .insert({
        user_id: user.id,
        type: 'FARMING_DEPOSIT',
        currency: 'UNI',
        amount: '50',
        amount_uni: '50',
        amount_ton: '0',
        description: 'UNI Farming deposit',
        status: 'confirmed'
      });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º TON boost
    const { data: boostUpdate, error: boostError } = await supabase
      .from('users')
      .update({
        ton_boost_active: true,
        ton_boost_package_id: 1,
        ton_boost_rate: '0.005'
      })
      .eq('id', user.id)
      .select()
      .single();
    
    if (boostError) {
      log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON boost:', boostError);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const { data: uniFarmingData } = await supabase
      .from('uni_farming_data')
      .select('*')
      .eq('user_id', user.id)
      .single();
    
    const { data: tonFarmingData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', user.id)
      .single();
    
    result.status = 'success';
    result.details = {
      uni_farming_activated: farmingUpdate.uni_farming_active,
      uni_deposit_amount: farmingUpdate.uni_deposit_amount,
      ton_boost_activated: boostUpdate?.ton_boost_active || false,
      farming_transaction_created: !depositTxError,
      uni_farming_table_used: !!uniFarmingData,
      ton_farming_table_used: !!tonFarmingData,
      tables_affected: ['users', 'transactions'],
      fields_updated: Object.keys(farmingData).concat(boostUpdate ? ['ton_boost_active', 'ton_boost_package_id', 'ton_boost_rate'] : [])
    };
    
    results.push(result);
    
  } catch (error) {
    result.errors = [String(error)];
    results.push(result);
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// 5. –°—Ü–µ–Ω–∞—Ä–∏–π: –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
async function testWithdrawal(user: TestUser) {
  log('\nüí∏ –°–¶–ï–ù–ê–†–ò–ô 4: –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤');
  
  const result: TestResult = {
    scenario: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
    status: 'failed',
    details: {}
  };
  
  try {
    // –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawAmount = '5';
    const walletAddress = 'UQCtest_wallet_address_' + Date.now();
    
    const { data: withdrawRequest, error: withdrawError } = await supabase
      .from('withdraw_requests')
      .insert({
        user_id: user.id,
        amount: withdrawAmount,
        wallet_address: walletAddress,
        status: 'pending',
        created_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (withdrawError) {
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const { data: altWithdraw, error: altError } = await supabase
        .from('withdraw_requests')
        .insert({
          user_id: user.id,
          telegram_id: user.telegram_id,
          username: user.username,
          amount_ton: withdrawAmount,
          ton_wallet: walletAddress,
          status: 'pending'
        })
        .select()
        .single();
      
      if (altError) {
        result.errors = ['Withdraw request: ' + withdrawError.message, 'Alt structure: ' + altError.message];
        results.push(result);
        return;
      }
      
      log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)');
    } else {
      log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
    const { data: balanceUpdate, error: balanceError } = await supabase
      .from('users')
      .update({ 
        balance_ton: (parseFloat(user.balance_ton) - parseFloat(withdrawAmount)).toString() 
      })
      .eq('id', user.id)
      .select()
      .single();
    
    if (balanceError) {
      log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceError);
    }
    
    // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
    const { error: txError } = await supabase
      .from('transactions')
      .insert({
        user_id: user.id,
        type: 'WITHDRAWAL',
        currency: 'TON',
        amount: withdrawAmount,
        amount_ton: withdrawAmount,
        amount_uni: '0',
        wallet_address: walletAddress,
        description: 'Test withdrawal',
        status: 'pending'
      });
    
    result.status = 'success';
    result.details = {
      withdraw_request_created: true,
      withdraw_id: withdrawRequest?.id || 'unknown',
      balance_updated: !balanceError,
      new_balance: balanceUpdate?.balance_ton || 'unknown',
      transaction_created: !txError,
      tables_affected: ['withdraw_requests', 'users', 'transactions']
    };
    
    results.push(result);
    
  } catch (error) {
    result.errors = [String(error)];
    results.push(result);
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
async function testReferralSystem(referrer: TestUser) {
  log('\nüë• –°–¶–ï–ù–ê–†–ò–ô 5: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');
  
  const result: TestResult = {
    scenario: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    status: 'failed',
    details: {}
  };
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ref_code –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    const referralRefCode = `REF_TEST_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
    
    // –°–æ–∑–¥–∞—ë–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    const { data: referral, error: referralError } = await supabase
      .from('users')
      .insert({
        telegram_id: 888888888,
        username: 'test_referral_user',
        first_name: 'Referral User',
        ref_code: referralRefCode,
        parent_ref_code: referrer.ref_code,
        referred_by: referrer.id,
        balance_uni: '0',
        balance_ton: '0'
      })
      .select()
      .single();
    
    if (referralError) {
      result.errors = ['Create referral: ' + referralError.message];
      results.push(result);
      return;
    }
    
    log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª —Å–æ–∑–¥–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É referrals
    const { data: referralRecord } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', referral.id)
      .eq('inviter_id', referrer.id)
      .single();
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    const { error: bonusTxError } = await supabase
      .from('transactions')
      .insert({
        user_id: referrer.id,
        type: 'REFERRAL_REWARD',
        currency: 'UNI',
        amount: '10',
        amount_uni: '10',
        amount_ton: '0',
        source_user_id: referral.id,
        description: 'Referral bonus',
        status: 'confirmed'
      });
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    await supabase
      .from('users')
      .delete()
      .eq('id', referral.id);
    
    result.status = 'success';
    result.details = {
      referral_created: true,
      parent_ref_code_set: referral.parent_ref_code === referrer.ref_code,
      referred_by_set: referral.referred_by === referrer.id,
      referrals_table_used: !!referralRecord,
      referral_bonus_created: !bonusTxError,
      tables_affected: ['users', 'transactions', referralRecord ? 'referrals' : null].filter(Boolean)
    };
    
    results.push(result);
    
  } catch (error) {
    result.errors = [String(error)];
    results.push(result);
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
async function generateReport() {
  log('\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–Å–¢–ê');
  
  const report = {
    timestamp: new Date().toISOString(),
    environment: 'development',
    scenarios_total: results.length,
    scenarios_passed: results.filter(r => r.status === 'success').length,
    scenarios_failed: results.filter(r => r.status === 'failed').length,
    results: results
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
  const reportPath = path.join(process.cwd(), 'docs', `database_audit_test_results_${Date.now()}.json`);
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
  
  log(`\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${reportPath}`);
  
  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
  console.log('\n========== –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ==========');
  console.log(`–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${report.scenarios_total}`);
  console.log(`–£—Å–ø–µ—à–Ω–æ: ${report.scenarios_passed}`);
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${report.scenarios_failed}`);
  console.log('\n–î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:');
  
  results.forEach((result, index) => {
    console.log(`\n${index + 1}. ${result.scenario}: ${result.status === 'success' ? '‚úÖ' : '‚ùå'}`);
    if (result.errors) {
      console.log('   –û—à–∏–±–∫–∏:', result.errors);
    }
    if (result.details.tables_affected) {
      console.log('   –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', result.details.tables_affected);
    }
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAuditTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞—É–¥–∏—Ç–∞ –ë–î UniFarm');
  console.log('================================================\n');
  
  try {
    // –û—á–∏—Å—Ç–∫–∞
    await cleanupTestData();
    
    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const testUser = await testUserRegistration();
    if (!testUser) {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã');
      await generateReport();
      return;
    }
    
    // –¢–µ—Å—Ç 2: –ë–∞–ª–∞–Ω—Å—ã
    await testBalanceAssignment(testUser);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: updatedUser } = await supabase
      .from('users')
      .select('*')
      .eq('id', testUser.id)
      .single();
    
    if (updatedUser) {
      Object.assign(testUser, updatedUser);
    }
    
    // –¢–µ—Å—Ç 3: –§–∞—Ä–º–∏–Ω–≥
    await testFarming(testUser);
    
    // –¢–µ—Å—Ç 4: –í—ã–≤–æ–¥
    await testWithdrawal(testUser);
    
    // –¢–µ—Å—Ç 5: –†–µ—Ñ–µ—Ä–∞–ª—ã
    await testReferralSystem(testUser);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    await generateReport();
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await cleanupTestData();
    
  } catch (error) {
    log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
    await generateReport();
  }
}

// –ó–∞–ø—É—Å–∫
runAuditTests().catch(console.error);