/**
 * CRITICAL MONITORING: Real-time scheduler activity monitoring
 * Shows exactly when and how often schedulers execute
 */

import { supabase } from '../core/supabase';
import { logger } from '../core/logger';

let transactionCount = 0;
let lastCheckTime = new Date();

async function monitorSchedulerActivity() {
  logger.info('üîç [SCHEDULER MONITOR] –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤');
  
  // Monitor every 30 seconds
  setInterval(async () => {
    try {
      const currentTime = new Date();
      const { data: recentTransactions, error } = await supabase
        .from('transactions')
        .select('id, created_at, amount_uni, user_id')
        .eq('type', 'FARMING_REWARD')
        .gte('created_at', lastCheckTime.toISOString())
        .order('created_at', { ascending: false });
      
      if (error) {
        logger.error('[SCHEDULER MONITOR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return;
      }
      
      if (recentTransactions && recentTransactions.length > 0) {
        transactionCount += recentTransactions.length;
        
        const avgAmount = recentTransactions.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0) / recentTransactions.length;
        
        logger.info(`üö® [SCHEDULER MONITOR] –ê–ö–¢–ò–í–ù–û–°–¢–¨ –û–ë–ù–ê–†–£–ñ–ï–ù–ê`, {
          newTransactions: recentTransactions.length,
          totalSinceStart: transactionCount,
          avgAmount: avgAmount.toFixed(6),
          timeWindow: `${((currentTime.getTime() - lastCheckTime.getTime()) / 1000).toFixed(0)}s`,
          rate: `${(recentTransactions.length * 120).toFixed(0)}/—á–∞—Å` // –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –Ω–∞ —á–∞—Å
        });
        
        // Log individual transactions for debugging
        recentTransactions.slice(0, 3).forEach(tx => {
          logger.info(`  üìä User ${tx.user_id}: ${parseFloat(tx.amount_uni || '0').toFixed(6)} UNI at ${tx.created_at}`);
        });
        
        if (recentTransactions.length > 2) {
          logger.error(`üö® [CRITICAL] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${recentTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 30 —Å–µ–∫—É–Ω–¥ - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ!`);
        }
      }
      
      lastCheckTime = currentTime;
    } catch (error) {
      logger.error('[SCHEDULER MONITOR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  
  logger.info('‚úÖ [SCHEDULER MONITOR] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)');
}

// Auto-start monitoring
monitorSchedulerActivity();