/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö UniFarm
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ Supabase API
 */

import { supabase } from '../core/supabase.js';
import { logger } from '../core/logger.js';

async function checkDatabaseStatus() {
  const report = {
    timestamp: new Date().toISOString(),
    existing_tables: {},
    missing_tables: [],
    table_analysis: {},
    critical_issues: [],
    recommendations: []
  };

  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü
  const expectedTables = [
    'users', 'transactions', 'referrals', 'farming_sessions', 'user_sessions',
    'boost_purchases', 'missions', 'user_missions', 'airdrops', 
    'daily_bonus_logs', 'withdraw_requests'
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
  for (const tableName of expectedTables) {
    try {
      console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
      
      const { data, error, count } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true });

      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, error.message);
        report.missing_tables.push({
          table: tableName,
          error: error.message,
          status: 'missing'
        });
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${count || 0} –∑–∞–ø–∏—Å–µ–π)`);
        report.existing_tables[tableName] = {
          status: 'exists',
          records_count: count || 0
        };

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (count > 0) {
          const { data: sampleData } = await supabase
            .from(tableName)
            .select('*')
            .limit(1);
          
          if (sampleData && sampleData[0]) {
            report.table_analysis[tableName] = {
              fields: Object.keys(sampleData[0]),
              sample_record: sampleData[0]
            };
          }
        }
      }
    } catch (err) {
      console.log(`üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${tableName}:`, err.message);
      report.missing_tables.push({
        table: tableName,
        error: err.message,
        status: 'error'
      });
    }

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
  if (report.existing_tables.users) {
    console.log('üî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã users...');
    
    const requiredFields = [
      'ton_boost_package', 'updated_at'
    ];

    const userFields = report.table_analysis.users?.fields || [];
    const missingFields = requiredFields.filter(field => !userFields.includes(field));
    
    if (missingFields.length > 0) {
      report.critical_issues.push({
        table: 'users',
        issue: 'missing_fields',
        missing_fields: missingFields,
        severity: 'high'
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
  const criticalTables = ['boost_purchases', 'missions', 'user_missions'];
  const missingCritical = report.missing_tables
    .filter(mt => criticalTables.includes(mt.table))
    .map(mt => mt.table);

  if (missingCritical.length > 0) {
    report.critical_issues.push({
      issue: 'missing_critical_tables',
      tables: missingCritical,
      severity: 'critical',
      impact: 'System modules will not function properly'
    });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  report.recommendations = generateRecommendations(report);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const existingCount = Object.keys(report.existing_tables).length;
  const missingCount = report.missing_tables.length;
  const totalExpected = expectedTables.length;
  const completeness = Math.round((existingCount / totalExpected) * 100);

  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–ö–ò:');
  console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${existingCount}/${totalExpected} (${completeness}%)`);
  console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${missingCount}`);
  console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${report.critical_issues.length}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = `docs/database_status_${Date.now()}.json`;
  await import('fs').then(fs => {
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`üìù –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  });

  return report;
}

function generateRecommendations(report) {
  const recommendations = [];

  if (report.missing_tables.length > 0) {
    recommendations.push({
      priority: 'high',
      action: 'create_missing_tables',
      description: '–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Supabase Dashboard',
      tables: report.missing_tables.map(mt => mt.table),
      sql_script: 'docs/database_fix_script.sql'
    });
  }

  if (report.critical_issues.some(ci => ci.issue === 'missing_fields')) {
    recommendations.push({
      priority: 'high',
      action: 'add_missing_fields',
      description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã',
      details: report.critical_issues.filter(ci => ci.issue === 'missing_fields')
    });
  }

  if (Object.keys(report.existing_tables).length < 8) {
    recommendations.push({
      priority: 'medium',
      action: 'system_functionality_affected',
      description: '–ú–µ–Ω–µ–µ 70% —Ç–∞–±–ª–∏—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞',
      affected_modules: ['boost', 'missions', 'airdrop', 'withdrawal']
    });
  }

  return recommendations;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDatabaseStatus()
  .then(report => {
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    if (report.critical_issues.length === 0 && report.missing_tables.length === 0) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∫–æ–¥–æ–º!');
    } else {
      console.log('‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –°–º. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Ç—á–µ—Ç–µ.');
    }
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  });