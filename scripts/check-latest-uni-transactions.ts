/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
 */

import { supabase } from '../core/supabase';

async function checkLatestTransactions() {
  console.log('=== –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• UNI –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===\n');
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: transactions } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 74)
    .eq('currency', 'UNI')
    .eq('type', 'FARMING_REWARD')
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (!transactions || transactions.length === 0) {
    console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log('üéâ –ù–û–í–´–ô –õ–ò–ú–ò–¢ 1,000,000 UNI –†–ê–ë–û–¢–ê–ï–¢!\n');
  console.log('–ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
  console.log('---------------------\n');
  
  let hasNewLimit = false;
  
  transactions.forEach((tx, index) => {
    const amount = parseFloat(tx.amount);
    const isNewLimit = amount > 10000;
    
    if (isNewLimit) hasNewLimit = true;
    
    console.log(`${index + 1}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`);
    console.log(`   –°—É–º–º–∞: ${amount.toLocaleString()} UNI ${isNewLimit ? '‚úÖ –ù–û–í–´–ô –õ–ò–ú–ò–¢!' : '‚ö†Ô∏è —Å—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç'}`);
    console.log(`   –í—Ä–µ–º—è: ${new Date(tx.created_at).toLocaleString()}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
    console.log('');
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const amounts = transactions.map(tx => parseFloat(tx.amount));
  const maxAmount = Math.max(...amounts);
  const minAmount = Math.min(...amounts);
  const avgAmount = amounts.reduce((a, b) => a + b, 0) / amounts.length;
  
  console.log('\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('-----------');
  console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${maxAmount.toLocaleString()} UNI`);
  console.log(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${minAmount.toLocaleString()} UNI`);
  console.log(`–°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${avgAmount.toFixed(2)} UNI`);
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  const { data: user } = await supabase
    .from('users')
    .select('balance_uni, uni_deposit_amount')
    .eq('id', 74)
    .single();
    
  console.log('\n\n–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
  console.log('------------------');
  console.log(`–ë–∞–ª–∞–Ω—Å UNI: ${user?.balance_uni?.toLocaleString() || 0} UNI`);
  console.log(`–î–µ–ø–æ–∑–∏—Ç: ${user?.uni_deposit_amount?.toLocaleString() || 0} UNI`);
  console.log(`–î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥ (1%): ${((user?.uni_deposit_amount || 0) * 0.01).toFixed(2)} UNI`);
  
  if (hasNewLimit) {
    console.log('\n\n‚úÖ –û–¢–õ–ò–ß–ù–´–ï –ù–û–í–û–°–¢–ò!');
    console.log('--------------------');
    console.log('–ù–æ–≤—ã–π –ª–∏–º–∏—Ç 1,000,000 UNI —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–æ 1M UNI –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.');
    console.log('–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ 10k UNI!');
  } else {
    console.log('\n\n‚è≥ –û–ñ–ò–î–ê–ù–ò–ï:');
    console.log('------------');
    console.log('–ù–æ–≤—ã–π –ª–∏–º–∏—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è.');
    console.log('–ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.');
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
checkLatestTransactions().catch(console.error);