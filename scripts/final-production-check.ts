import { supabase } from '../core/supabase.js';
import * as fs from 'fs';

console.log('=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö PRODUCTION ===');
console.log('–î–∞—Ç–∞: ' + new Date().toISOString());
console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤\n');

interface CheckResult {
  category: string;
  status: 'OK' | 'WARNING' | 'ERROR';
  details: string;
  data?: any;
}

const results: CheckResult[] = [];

async function checkIndexes() {
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í...');
  
  const { data: indexes } = await supabase.rpc('get_table_indexes');
  
  const criticalTables = ['users', 'transactions', 'referrals', 'ton_boost_purchases'];
  const tableIndexCount: any = {};
  
  criticalTables.forEach(table => {
    const tableIndexes = indexes?.filter((idx: any) => idx.table_name === table);
    tableIndexCount[table] = tableIndexes?.length || 0;
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
  const minIndexes = {
    users: 5, // telegram_id, farming_status, ton_farming, balances + primary key
    transactions: 7, // user_created, type_status, tx_hash, farming_rewards + 3 —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    referrals: 5, // inviter, user, inviter_level + 2 —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    ton_boost_purchases: 4 // user, active, package + primary key
  };
  
  let allGood = true;
  Object.entries(minIndexes).forEach(([table, minCount]) => {
    if (tableIndexCount[table] < minCount) {
      allGood = false;
      results.push({
        category: `INDEXES_${table.toUpperCase()}`,
        status: 'WARNING',
        details: `–¢–∞–±–ª–∏—Ü–∞ ${table} –∏–º–µ–µ—Ç ${tableIndexCount[table]} –∏–Ω–¥–µ–∫—Å–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${minCount}`
      });
    } else {
      results.push({
        category: `INDEXES_${table.toUpperCase()}`,
        status: 'OK',
        details: `–¢–∞–±–ª–∏—Ü–∞ ${table} –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${tableIndexCount[table]}`
      });
    }
  });
  
  results.push({
    category: 'INDEX_OPTIMIZATION',
    status: allGood ? 'OK' : 'WARNING',
    details: allGood ? '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–Ω–¥–µ–∫—Å–∞–º–∏' : '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤',
    data: tableIndexCount
  });
}

async function checkSystemHealth() {
  console.log('\nüè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { data: activeUsers } = await supabase
    .from('users')
    .select('id')
    .or('balance_uni.gt.0,balance_ton.gt.0,uni_deposit_amount.gt.0');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: recentTx } = await supabase
    .from('transactions')
    .select('created_at')
    .order('created_at', { ascending: false })
    .limit(1);
  
  const lastTxTime = recentTx?.[0]?.created_at;
  const hoursSinceLastTx = lastTxTime 
    ? (Date.now() - new Date(lastTxTime).getTime()) / (1000 * 60 * 60)
    : 999;
  
  results.push({
    category: 'SYSTEM_ACTIVITY',
    status: hoursSinceLastTx < 24 ? 'OK' : 'WARNING',
    details: hoursSinceLastTx < 24 
      ? `–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${hoursSinceLastTx.toFixed(1)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`
      : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤',
    data: {
      activeUsers: activeUsers?.length || 0,
      lastTransaction: lastTxTime
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost —Å–∏—Å—Ç–µ–º—ã
  const { data: tonBoostData } = await supabase
    .from('ton_boost_purchases')
    .select('id')
    .eq('status', 'active');
  
  results.push({
    category: 'TON_BOOST_SYSTEM',
    status: 'OK',
    details: `–ê–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤: ${tonBoostData?.length || 0}`,
    data: {
      activePackages: tonBoostData?.length || 0
    }
  });
}

async function checkPerformance() {
  console.log('\n‚ö° –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò...');
  
  // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
  const startTime = Date.now();
  
  const { data, error } = await supabase
    .from('transactions')
    .select('id, type, amount')
    .eq('user_id', 184)
    .order('created_at', { ascending: false })
    .limit(100);
  
  const queryTime = Date.now() - startTime;
  
  results.push({
    category: 'QUERY_PERFORMANCE',
    status: queryTime < 500 ? 'OK' : 'WARNING',
    details: `–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${queryTime}ms`,
    data: {
      queryTime,
      rowsReturned: data?.length || 0,
      hasError: !!error
    }
  });
}

async function generateFinalReport() {
  console.log('\nüìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê...\n');
  
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      total_checks: results.length,
      errors: results.filter(r => r.status === 'ERROR').length,
      warnings: results.filter(r => r.status === 'WARNING').length,
      ok: results.filter(r => r.status === 'OK').length
    },
    results,
    final_verdict: ''
  };
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
  if (report.summary.errors > 0) {
    report.final_verdict = '‚ùå –ï–°–¢–¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!';
  } else if (report.summary.warnings > 0) {
    report.final_verdict = '‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ï–°–¢–¨ –ó–ê–ú–ï–ß–ê–ù–ò–Ø';
  } else {
    report.final_verdict = '‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö PRODUCTION!';
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  fs.writeFileSync(
    'FINAL_PRODUCTION_CHECK_2025-08-02.json',
    JSON.stringify(report, null, 2)
  );
  
  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò ===');
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${report.summary.total_checks}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${report.summary.ok}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${report.summary.warnings}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${report.summary.errors}`);
  console.log(`\n${report.final_verdict}`);
  
  if (report.summary.warnings > 0) {
    console.log('\n‚ö†Ô∏è –î–ï–¢–ê–õ–ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô:');
    results.filter(r => r.status === 'WARNING').forEach(r => {
      console.log(`- ${r.category}: ${r.details}`);
    });
  }
  
  console.log('\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: FINAL_PRODUCTION_CHECK_2025-08-02.json');
}

async function runFinalCheck() {
  try {
    await checkIndexes();
    await checkSystemHealth();
    await checkPerformance();
    await generateFinalReport();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    results.push({
      category: 'CHECK_ERROR',
      status: 'ERROR',
      details: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`
    });
    await generateFinalReport();
  }
}

runFinalCheck();