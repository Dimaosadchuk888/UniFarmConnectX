/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –æ—Ç–≤–µ—Ç–∞
 */

import { BoostService } from '../modules/boost/service.js';

async function checkApiFormat() {
  console.log('\n=== –ü–†–û–í–ï–†–ö–ê API –û–¢–í–ï–¢–ê ===\n');

  const userId = '74';
  const boostService = new BoostService();
  
  try {
    const response = await boostService.getTonBoostFarmingStatus(userId);
    
    console.log('API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:');
    console.log(JSON.stringify(response, null, 2));
    
    console.log('\nüìä –ê–ù–ê–õ–ò–ó:');
    console.log(`- –î–æ—Ö–æ–¥ –≤ —Å—É—Ç–∫–∏ (dailyIncomeTon): ${response.dailyIncomeTon} TON`);
    console.log(`- –î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É (totalTonRatePerSecond): ${response.totalTonRatePerSecond} TON`);
    
    if (response.deposits && response.deposits[0]) {
      console.log(`- –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${response.deposits[0].amount} TON`);
      console.log(`- –°—Ç–∞–≤–∫–∞: ${response.deposits[0].rate}%`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
      const depositAmount = parseFloat(response.deposits[0].amount);
      const rate = parseFloat(response.deposits[0].rate);
      const expectedDailyIncome = (depositAmount * rate) / 100;
      
      console.log(`\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò:`);
      console.log(`  ${depositAmount} TON √ó ${rate}% = ${expectedDailyIncome} TON –≤ –¥–µ–Ω—å`);
      console.log(`  –û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedDailyIncome} TON`);
      console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: ${response.dailyIncomeTon} TON`);
      
      if (Math.abs(parseFloat(response.dailyIncomeTon) - expectedDailyIncome) < 0.01) {
        console.log(`  ‚úÖ –†–∞—Å—á–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ô!`);
      } else {
        console.log(`  ‚ùå –†–∞—Å—á–µ—Ç –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô!`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ deposits
    if (response.deposits && response.deposits[0]) {
      console.log('\nüîç –ü–û–õ–Ø –í deposits[0]:');
      Object.keys(response.deposits[0]).forEach(key => {
        console.log(`  - ${key}: ${response.deposits[0][key]}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkApiFormat()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });