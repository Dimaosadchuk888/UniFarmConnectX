/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–ú–ú –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–• USER 227
 * –ö–æ–ø–∏—Ä—É–µ–º amount_ton –≤ amount –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function fixExistingUser227Amounts() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–ú–ú –í –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–• USER 227');
  console.log('='.repeat(55));
  
  try {
    // 1. –ù–∞–π—Ç–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User 227 —Å amount = 0, –Ω–æ amount_ton > 0
    const { data: brokenTransactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 227)
      .eq('currency', 'TON')
      .eq('amount', 0)
      .gt('amount_ton', 0);
    
    if (!brokenTransactions || brokenTransactions.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç—Ä–µ–±—É—é—â–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`\nüìä –ù–ê–ô–î–ï–ù–û ${brokenTransactions.length} –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    
    let totalFixed = 0;
    let totalAmount = 0;
    
    for (const tx of brokenTransactions) {
      console.log(`\n   ID: ${tx.id}`);
      console.log(`   –¢–µ–∫—É—â–∏–π amount: ${tx.amount}`);
      console.log(`   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π amount_ton: ${tx.amount_ton}`);
      console.log(`   –î–∞—Ç–∞: ${tx.created_at}`);
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { error: updateError } = await supabase
        .from('transactions')
        .update({ amount: tx.amount_ton })
        .eq('id', tx.id);
      
      if (updateError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${updateError.message}`);
      } else {
        console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: amount = ${tx.amount_ton}`);
        totalFixed++;
        totalAmount += parseFloat(tx.amount_ton);
      }
    }
    
    console.log(`\nüìà –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalFixed}`);
    console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(6)} TON`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: fixedTransactions } = await supabase
      .from('transactions')
      .select('id, amount, amount_ton')
      .eq('user_id', 227)
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);
    
    console.log(`\n‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
    if (fixedTransactions) {
      fixedTransactions.forEach((tx, i) => {
        const status = tx.amount === tx.amount_ton ? '‚úÖ OK' : '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢';
        console.log(`   ${i + 1}. ID ${tx.id}: amount=${tx.amount}, amount_ton=${tx.amount_ton} ${status}`);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å User 227
    const { data: user227 } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', 227)
      .single();
    
    if (user227) {
      console.log(`\nüí∞ –ë–ê–õ–ê–ù–° USER 227: ${user227.balance_ton} TON`);
      console.log(`   –°—É–º–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${totalAmount.toFixed(6)} TON`);
      
      if (Math.abs(parseFloat(user227.balance_ton) - totalAmount) < 0.01) {
        console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      } else {
        console.log(`   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å`);
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

fixExistingUser227Amounts().catch(console.error);