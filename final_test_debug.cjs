// –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function finalTestDebug() {
  console.log('=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
  
  const testTelegramId = Date.now();
  const testUsername = `test_${testTelegramId}`;
  const refCode = 'REF_1752755835358_yjrusv';
  
  console.log('üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:');
  console.log(`   telegram_id: ${testTelegramId}`);
  console.log(`   username: ${testUsername}`);
  console.log(`   refBy: ${refCode}`);
  
  try {
    // –¢–µ—Å—Ç 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('\n1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');
    
    const authResponse = await fetch('http://localhost:3000/api/v2/auth/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        direct_registration: true,
        telegram_id: testTelegramId,
        username: testUsername,
        first_name: "Test User",
        refBy: refCode
      })
    });
    
    const authResult = await authResponse.json();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${authResponse.status}`);
    console.log(`   –£—Å–ø–µ—Ö: ${authResult.success}`);
    
    if (!authResult.success) {
      console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', authResult.error);
      return;
    }
    
    const newUserId = authResult.data.user.id;
    console.log(`   –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUserId}`);
    console.log(`   referred_by: ${authResult.data.user.referred_by}`);
    
    // –¢–µ—Å—Ç 2: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
    console.log('\n2. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î...');
    
    const { data: freshUser, error: freshError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .eq('id', newUserId)
      .single();
    
    if (freshError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', freshError.message);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID=${freshUser.id}, referred_by=${freshUser.referred_by}`);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ referrals
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ referrals...');
    
    const { data: referralRecords, error: referralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUserId);
    
    if (referralError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referrals:', referralError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralRecords.length} –∑–∞–ø–∏—Å–µ–π –≤ referrals`);
      
      if (referralRecords.length > 0) {
        referralRecords.forEach(record => {
          console.log(`   user_id=${record.user_id}, inviter_id=${record.inviter_id}, level=${record.level}`);
        });
      }
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã User 184
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã User 184...');
    
    const { data: team184, error: teamError } = await supabase
      .from('users')
      .select('id, username, referred_by, created_at')
      .eq('referred_by', 184)
      .order('created_at', { ascending: false });
    
    if (teamError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', teamError.message);
    } else {
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ User 184: ${team184.length} —á–µ–ª–æ–≤–µ–∫`);
      
      const recentMembers = team184.slice(0, 3);
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞:');
      recentMembers.forEach(member => {
        console.log(`   - ID=${member.id}, username=${member.username}, created_at=${member.created_at}`);
      });
    }
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    
    const isReferralWorking = freshUser.referred_by === 184 && referralRecords.length > 0;
    
    if (isReferralWorking) {
      console.log('üéâ –í–ï–õ–ò–ö–û–õ–ï–ü–ù–û! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('   - User —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º referred_by');
      console.log('   - –ó–∞–ø–∏—Å–∏ –≤ referrals —Å–æ–∑–¥–∞–Ω—ã');
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ User 184');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('   –ü—Ä–æ–±–ª–µ–º—ã:');
      
      if (freshUser.referred_by !== 184) {
        console.log(`   - referred_by –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (${freshUser.referred_by} –≤–º–µ—Å—Ç–æ 184)`);
      }
      
      if (referralRecords.length === 0) {
        console.log('   - –ó–∞–ø–∏—Å–∏ –≤ referrals –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
      }
      
      console.log('\n   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –ü–∞—Ä–∞–º–µ—Ç—Ä refBy –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   2. –õ–æ–≥–∏–∫–∞ processReferral –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      console.log('   3. –û—à–∏–±–∫–∞ –≤ ReferralService');
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    console.log('\n5. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    await supabase.from('referrals').delete().eq('user_id', newUserId);
    await supabase.from('users').delete().eq('id', newUserId);
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

finalTestDebug().catch(console.error);