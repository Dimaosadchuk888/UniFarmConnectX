#!/usr/bin/env tsx

/**
 * üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í
 * –ü–∞—Ç—á–∏–Ω–≥ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ DAILY_BONUS –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { supabase } from './core/supabaseClient';

async function emergencyGlobalProtection() {
  console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ DAILY_BONUS\n');

  try {
    // 1. –ù–∞–π—Ç–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –≥–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è DAILY_BONUS
    console.log('üîç –ü–û–ò–°–ö –í–°–ï–• –ò–°–¢–û–ß–ù–ò–ö–û–í DAILY_BONUS –í –ö–û–î–ï...');
    
    // 2. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const { data: recentDailyBonus, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'DAILY_BONUS')
      .eq('currency', 'UNI')
      .gte('created_at', new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
      .order('created_at', { ascending: false });

    if (recentDailyBonus && recentDailyBonus.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${recentDailyBonus.length} DAILY_BONUS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 2 —á–∞—Å–∞:`);
      
      const userCounts = new Map();
      recentDailyBonus.forEach(bonus => {
        const key = `User_${bonus.user_id}`;
        if (!userCounts.has(key)) {
          userCounts.set(key, []);
        }
        userCounts.get(key).push({
          time: new Date(bonus.created_at).toLocaleTimeString(),
          amount: bonus.amount,
          description: bonus.description,
          metadata: bonus.metadata
        });
      });

      userCounts.forEach((bonuses, user) => {
        if (bonuses.length > 1) {
          console.log(`\n‚ùó ${user} –ø–æ–ª—É—á–∏–ª ${bonuses.length} DAILY_BONUS:`);
          bonuses.forEach((bonus, index) => {
            console.log(`   ${index + 1}. [${bonus.time}] ${bonus.amount} UNI - ${bonus.description}`);
            if (bonus.metadata) {
              console.log(`      Metadata: ${JSON.stringify(bonus.metadata)}`);
            }
          });
        }
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ metadata –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    console.log('\nüîç –ê–ù–ê–õ–ò–ó METADATA –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    const uniqueSources = new Set();
    recentDailyBonus?.forEach(bonus => {
      if (bonus.metadata) {
        uniqueSources.add(JSON.stringify(bonus.metadata));
      }
    });

    if (uniqueSources.size > 0) {
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ metadata:');
      Array.from(uniqueSources).forEach((source, index) => {
        console.log(`${index + 1}. ${source}`);
      });
    }

    // 4. –°—Ä–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüõ°Ô∏è –°–†–û–ß–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ scheduler\'—ã –∏ cron jobs');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');  
    console.log('3. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ DAILY_BONUS');
    console.log('4. –î–æ–±–∞–≤–∏—Ç—å unique constraint –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç—ã:', error);
  }
}

emergencyGlobalProtection().catch(console.error);