/**
 * –¢–µ—Å—Ç WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞ –≤ production —Ä–µ–∂–∏–º–µ
 */

const WebSocket = require('ws');

async function testProductionWebSocket() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
    const ws = new WebSocket('ws://localhost:3000/ws');
    
    ws.on('open', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 48 (production user)
      ws.send(JSON.stringify({
        type: 'subscribe',
        userId: 48
      }));
      
      console.log('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 48 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    });
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        if (message.type === 'balance_update') {
          console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', {
            userId: message.userId,
            currency: message.currency,
            changeAmount: message.changeAmount,
            source: message.source,
            timestamp: message.timestamp
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
    
    ws.on('close', () => {
      console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    });
    
    ws.on('error', (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API
    setTimeout(async () => {
      try {
        const response = await fetch('http://localhost:3000/api/v2/test/balance-update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer production-test-token'
          },
          body: JSON.stringify({
            userId: 48,
            balanceUni: 3184185.675944,
            balanceTon: 1000.072063,
            changeAmount: 0.125,
            currency: 'TON',
            source: 'boost'
          })
        });
        
        if (response.ok) {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
          console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      }
    }, 2000);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      ws.close();
      console.log('üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }, 10000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProductionWebSocket();