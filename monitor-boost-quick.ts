import { supabase } from './core/supabaseClient';

async function quickMonitor() {
  const userId = '184';
  
  console.log('=== –ë–´–°–¢–†–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì TON BOOST ===\n');
  
  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { data: before } = await supabase
    .from('users')
    .select('balance_ton, ton_farming_balance')
    .eq('id', userId)
    .single();
    
  console.log('–î–û –ü–û–ö–£–ü–ö–ò:');
  console.log(`‚îú‚îÄ‚îÄ balance_ton: ${before.balance_ton} TON`);
  console.log(`‚îú‚îÄ‚îÄ ton_farming_balance: ${before.ton_farming_balance} TON`);
  console.log(`‚îî‚îÄ‚îÄ –ò–¢–û–ì–û: ${parseFloat(before.balance_ton) + parseFloat(before.ton_farming_balance)} TON\n`);
  
  console.log('‚ö†Ô∏è  –¢–ï–ü–ï–†–¨ –ö–£–ü–ò–¢–ï BOOST –ü–ê–ö–ï–¢ –í –ü–†–ò–õ–û–ñ–ï–ù–ò–ò!\n');
  console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  let found = false;
  for (let i = 0; i < 60; i++) {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const { data: after } = await supabase
      .from('users')
      .select('balance_ton, ton_farming_balance, ton_boost_active, ton_boost_package')
      .eq('id', userId)
      .single();
      
    if (after.balance_ton !== before.balance_ton || after.ton_farming_balance !== before.ton_farming_balance) {
      console.log(`\n‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø (—á–µ—Ä–µ–∑ ${i} —Å–µ–∫):\n`);
      
      console.log('–ü–û–°–õ–ï –ü–û–ö–£–ü–ö–ò:');
      console.log(`‚îú‚îÄ‚îÄ balance_ton: ${before.balance_ton} ‚Üí ${after.balance_ton} (${parseFloat(after.balance_ton) - parseFloat(before.balance_ton)} TON)`);
      console.log(`‚îú‚îÄ‚îÄ ton_farming_balance: ${before.ton_farming_balance} ‚Üí ${after.ton_farming_balance} (${parseFloat(after.ton_farming_balance) - parseFloat(before.ton_farming_balance)} TON)`);
      console.log(`‚îú‚îÄ‚îÄ ton_boost_active: ${after.ton_boost_active ? '‚úÖ' : '‚ùå'}`);
      console.log(`‚îú‚îÄ‚îÄ ton_boost_package: ${after.ton_boost_package || '–Ω–µ—Ç'}`);
      console.log(`‚îî‚îÄ‚îÄ –ò–¢–û–ì–û: ${parseFloat(after.balance_ton) + parseFloat(after.ton_farming_balance)} TON`);
      
      const totalDiff = (parseFloat(after.balance_ton) + parseFloat(after.ton_farming_balance)) - (parseFloat(before.balance_ton) + parseFloat(before.ton_farming_balance));
      
      console.log(`\nüìä –ê–ù–ê–õ–ò–ó:`);
      if (Math.abs(totalDiff) > 0.01) {
        console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û–±—â–∞—è —Å—É–º–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${totalDiff.toFixed(6)} TON!`);
      } else {
        console.log(`‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${totalDiff.toFixed(6)} TON)`);
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
      if (parseFloat(after.balance_ton) < 1 && parseFloat(before.balance_ton) > 50) {
        console.log(`\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –í–µ—Å—å –±–∞–ª–∞–Ω—Å (${before.balance_ton} TON) –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ farming!`);
        console.log(`–í–º–µ—Å—Ç–æ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ (1-10 TON), –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–µ—Å—å –±–∞–ª–∞–Ω—Å.`);
      }
      
      found = true;
      break;
    }
    
    if (i % 5 === 0 && i > 0) {
      process.stdout.write('.');
    }
  }
  
  if (!found) {
    console.log('\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞ 60 —Å–µ–∫—É–Ω–¥.');
  }
  
  process.exit(0);
}

quickMonitor();