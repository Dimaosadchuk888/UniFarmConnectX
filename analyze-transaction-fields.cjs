/**
 * –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–û–õ–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è amount_* –≤ –ë–î –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeTransactionFields() {
  console.log('üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–û–õ–ï–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('='.repeat(50));
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã transactions
    console.log('\nüóÉÔ∏è –°–•–ï–ú–ê –¢–ê–ë–õ–ò–¶–´ transactions:');
    const { data: sampleTx } = await supabase
      .from('transactions')
      .select('*')
      .limit(1);
    
    if (sampleTx && sampleTx.length > 0) {
      const fields = Object.keys(sampleTx[0]);
      const amountFields = fields.filter(field => field.includes('amount'));
      
      console.log('   –í—Å–µ –ø–æ–ª—è amount:');
      amountFields.forEach(field => {
        console.log(`   - ${field}: ${typeof sampleTx[0][field]}`);
      });
      
      console.log('\n   –í—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã:');
      fields.forEach(field => {
        console.log(`   - ${field}`);
      });
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüí∞ –ê–ù–ê–õ–ò–ó TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):');
    const { data: tonTxs } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (tonTxs) {
      tonTxs.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. ID: ${tx.id} (User: ${tx.user_id})`);
        console.log(`      amount: "${tx.amount}" (${typeof tx.amount})`);
        console.log(`      amount_ton: "${tx.amount_ton}" (${typeof tx.amount_ton})`);
        console.log(`      amount_uni: "${tx.amount_uni}" (${typeof tx.amount_uni})`);
        console.log(`      type: ${tx.type}`);
        console.log(`      description: ${tx.description.substring(0, 50)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        const hasAmount = tx.amount && parseFloat(tx.amount) > 0;
        const hasAmountTon = tx.amount_ton && parseFloat(tx.amount_ton) > 0;
        const hasAmountUni = tx.amount_uni && parseFloat(tx.amount_uni) > 0;
        
        console.log(`      ‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: amount=${hasAmount}, amount_ton=${hasAmountTon}, amount_uni=${hasAmountUni}`);
        
        // –í—ã—è–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if (!hasAmount && hasAmountTon) {
          console.log(`      üö® –ü–†–û–ë–õ–ï–ú–ê: amount=0, –Ω–æ amount_ton=${tx.amount_ton}`);
        }
        if (!hasAmount && !hasAmountTon) {
          console.log(`      ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –≤—Å–µ amount –ø–æ–ª—è = 0`);
        }
      });
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüåæ –ê–ù–ê–õ–ò–ó UNI –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):');
    const { data: uniTxs } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'UNI')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (uniTxs) {
      uniTxs.forEach((tx, i) => {
        console.log(`\n   ${i + 1}. ID: ${tx.id} (User: ${tx.user_id})`);
        console.log(`      amount: "${tx.amount}" (${typeof tx.amount})`);
        console.log(`      amount_ton: "${tx.amount_ton}" (${typeof tx.amount_ton})`);
        console.log(`      amount_uni: "${tx.amount_uni}" (${typeof tx.amount_uni})`);
        console.log(`      type: ${tx.type}`);
        
        const hasAmount = tx.amount && parseFloat(tx.amount) > 0;
        const hasAmountTon = tx.amount_ton && parseFloat(tx.amount_ton) > 0;
        const hasAmountUni = tx.amount_uni && parseFloat(tx.amount_uni) > 0;
        
        console.log(`      ‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: amount=${hasAmount}, amount_ton=${hasAmountTon}, amount_uni=${hasAmountUni}`);
        
        if (!hasAmount && hasAmountUni) {
          console.log(`      üö® –ü–†–û–ë–õ–ï–ú–ê: amount=0, –Ω–æ amount_uni=${tx.amount_uni}`);
        }
      });
    }
    
    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø–æ–ª–µ–π
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –ü–û–õ–ï–ô:');
    
    // TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: tonStats } = await supabase
      .from('transactions')
      .select('amount, amount_ton, amount_uni')
      .eq('currency', 'TON');
    
    if (tonStats) {
      const tonWithAmount = tonStats.filter(tx => tx.amount && parseFloat(tx.amount) > 0).length;
      const tonWithAmountTon = tonStats.filter(tx => tx.amount_ton && parseFloat(tx.amount_ton) > 0).length;
      
      console.log(`\n   TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Å–µ–≥–æ: ${tonStats.length}):`);
      console.log(`   - amount > 0: ${tonWithAmount} (${(tonWithAmount/tonStats.length*100).toFixed(1)}%)`);
      console.log(`   - amount_ton > 0: ${tonWithAmountTon} (${(tonWithAmountTon/tonStats.length*100).toFixed(1)}%)`);
      
      if (tonWithAmount !== tonWithAmountTon) {
        console.log(`   üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${Math.abs(tonWithAmount - tonWithAmountTon)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è`);
      }
    }
    
    // UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: uniStats } = await supabase
      .from('transactions')
      .select('amount, amount_ton, amount_uni')
      .eq('currency', 'UNI');
    
    if (uniStats) {
      const uniWithAmount = uniStats.filter(tx => tx.amount && parseFloat(tx.amount) > 0).length;
      const uniWithAmountUni = uniStats.filter(tx => tx.amount_uni && parseFloat(tx.amount_uni) > 0).length;
      
      console.log(`\n   UNI —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Å–µ–≥–æ: ${uniStats.length}):`);
      console.log(`   - amount > 0: ${uniWithAmount} (${(uniWithAmount/uniStats.length*100).toFixed(1)}%)`);
      console.log(`   - amount_uni > 0: ${uniWithAmountUni} (${(uniWithAmountUni/uniStats.length*100).toFixed(1)}%)`);
      
      if (uniWithAmount !== uniWithAmountUni) {
        console.log(`   üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${Math.abs(uniWithAmount - uniWithAmountUni)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è`);
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω—É–ª–µ–≤—ã–º–∏ amount
    console.log('\n‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –° amount = 0:');
    const { data: zeroAmount } = await supabase
      .from('transactions')
      .select('*')
      .eq('amount', 0)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (zeroAmount && zeroAmount.length > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${zeroAmount.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å amount = 0:`);
      zeroAmount.forEach((tx, i) => {
        const realAmount = tx.currency === 'TON' ? tx.amount_ton : tx.amount_uni;
        console.log(`   ${i + 1}. ID: ${tx.id}, currency: ${tx.currency}, real_amount: ${realAmount}`);
      });
    } else {
      console.log('   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å amount = 0 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log('\nüéØ –í–´–í–û–î–´:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Frontend –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.log('2. –í—ã—è–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É amount –∏ amount_ton/amount_uni');
    console.log('3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π');
    console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ Backend –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

analyzeTransactionFields().catch(console.error);