import { supabase } from './core/supabase';

async function checkStartupLogs() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –ó–ê–ü–£–°–ö–ê –ü–û–°–õ–ï –†–ï–°–¢–ê–†–¢–ê ===\n');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    console.log('üìã 1. –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–û–í:\n');
    const exec = require('child_process').execSync;
    try {
      const processes = exec('ps aux | grep -E "node|npm" | grep -v grep', { encoding: 'utf-8' });
      console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:');
      console.log(processes);
    } catch (e) {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Node.js\n');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    console.log('\nüìä 2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–°–õ–ï –†–ï–°–¢–ê–†–¢–ê:\n');
    
    const restartTime = new Date();
    restartTime.setMinutes(restartTime.getMinutes() - 5); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç

    const { data: recentTx, error: txError } = await supabase
      .from('transactions')
      .select('type, currency, amount, created_at, description')
      .gt('created_at', restartTime.toISOString())
      .in('type', ['FARMING_REWARD'])
      .order('created_at', { ascending: false });

    if (!txError && recentTx) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${recentTx.length}`);
      
      const uniTx = recentTx.filter(t => t.currency === 'UNI');
      const tonTx = recentTx.filter(t => t.currency === 'TON');
      
      console.log(`- UNI Farming: ${uniTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      console.log(`- TON Boost: ${tonTx.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n`);
      
      if (tonTx.length === 0) {
        console.log('‚ùå TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ù–ï–¢ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞!');
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost
    console.log('\nüë• 3. –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò TON BOOST:\n');
    
    const { data: activeUsers, error: activeError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_active, boost_package_id, updated_at')
      .eq('boost_active', true)
      .order('updated_at', { ascending: false })
      .limit(5);

    if (!activeError && activeUsers) {
      console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}`);
      console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      
      activeUsers.forEach(user => {
        const updatedAt = new Date(user.updated_at);
        const minutesAgo = (new Date().getTime() - updatedAt.getTime()) / 60000;
        
        console.log(`  User ${user.user_id}: farming_balance=${user.farming_balance}, –æ–±–Ω–æ–≤–ª–µ–Ω ${minutesAgo.toFixed(1)} –º–∏–Ω –Ω–∞–∑–∞–¥`);
      });
    }

    // 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîç 4. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:\n');
    
    console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ—á–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:');
    console.log('1. –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ TONBoostIncomeScheduler');
    console.log('2. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ processTonBoostIncome()');
    console.log('3. –ù–µ–≤–µ—Ä–Ω—ã–µ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞');
    console.log('4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    console.log('5. setInterval –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏\n');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
    console.log('üí° 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    
    console.log('–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ:');
    console.log('1. –î–æ–±–∞–≤–∏—Ç—å console.log –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ start() –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    console.log('2. –û–±–µ—Ä–Ω—É—Ç—å processTonBoostIncome() –≤ try/catch');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞');
    console.log('4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

checkStartupLogs();