/**
 * –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * –ó–∞–¥–∞—á–∞ T12: –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Webhook
 */

import https from 'https';

const WEBHOOK_URL = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app/webhook';

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
const testUpdate = {
  update_id: 123456789,
  message: {
    message_id: 1,
    from: {
      id: 123456789,
      is_bot: false,
      first_name: "Test",
      username: "testuser",
      language_code: "ru"
    },
    chat: {
      id: 123456789,
      first_name: "Test",
      username: "testuser",
      type: "private"
    },
    date: Math.floor(Date.now() / 1000),
    text: "/start"
  }
};

function makeRequest(url, method = 'POST', data = null) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot (like TwitterBot)'
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (e) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testWebhookEndpoint() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é —ç–Ω–¥–ø–æ–∏–Ω—Ç /webhook...');
  console.log(`üìç URL: ${WEBHOOK_URL}`);
  console.log('‚îÄ'.repeat(50));
  
  try {
    const response = await makeRequest(WEBHOOK_URL, 'POST', testUpdate);
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ webhook:');
    console.log(`üìå HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(JSON.stringify(response.data, null, 2));
    
    if (response.status === 200) {
      console.log('‚úÖ Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram');
    } else if (response.status === 404) {
      console.log('‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç /webhook –Ω–µ –Ω–∞–π–¥–µ–Ω - –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } else if (response.status === 500) {
      console.log('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook');
    } else {
      console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üîÑ –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (error.code === 'ENOTFOUND') {
      console.log('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS –∏–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }
  
  console.log('‚îÄ'.repeat(50));
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function testServerHealth() {
  console.log('üè• –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    const healthUrl = 'https://uni-farm-connect-x-osadchukdmitro2.replit.app/health';
    const response = await makeRequest(healthUrl, 'GET');
    
    console.log(`üìã Health check —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    if (response.status === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º');
    }
    
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  console.log('‚îÄ'.repeat(50));
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Webhook');
  console.log('üìã –ó–∞–¥–∞—á–∞ T12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook');
  console.log('‚îÄ'.repeat(50));
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  await testServerHealth();
  
  // –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç
  await testWebhookEndpoint();
  
  console.log('üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

main().catch(console.error);