/**
 * T14: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Drizzle
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ Neon
 */

import { drizzle } from 'drizzle-orm/neon-serverless';
import { Pool } from '@neondatabase/serverless';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class DatabaseStructureAnalyzer {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Neon –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    this.pool = new Pool({ connectionString: process.env.DATABASE_URL });
    this.db = drizzle(this.pool);
    this.analysisResults = {
      tables: new Map(),
      codeModels: new Map(),
      discrepancies: [],
      recommendations: []
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å—ã
   */
  async analyzeDatabaseStructure() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Neon...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
      const tablesQuery = `
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name;
      `;
      
      const tablesResult = await this.pool.query(tablesQuery);
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.rows.length}`);
      
      for (const table of tablesResult.rows) {
        const tableName = table.table_name;
        await this.analyzeTable(tableName);
      }
      
      return this.analysisResults.tables;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', error.message);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
   */
  async analyzeTable(tableName) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫
      const columnsQuery = `
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_default,
          character_maximum_length
        FROM information_schema.columns 
        WHERE table_schema = 'public' AND table_name = $1
        ORDER BY ordinal_position;
      `;
      
      const columnsResult = await this.pool.query(columnsQuery, [tableName]);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      const indexesQuery = `
        SELECT indexname, indexdef
        FROM pg_indexes 
        WHERE tablename = $1 AND schemaname = 'public';
      `;
      
      const indexesResult = await this.pool.query(indexesQuery, [tableName]);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
      const foreignKeysQuery = `
        SELECT 
          tc.constraint_name,
          kcu.column_name,
          ccu.table_name AS foreign_table_name,
          ccu.column_name AS foreign_column_name
        FROM information_schema.table_constraints AS tc 
        JOIN information_schema.key_column_usage AS kcu
          ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
          ON ccu.constraint_name = tc.constraint_name
        WHERE tc.constraint_type = 'FOREIGN KEY' 
          AND tc.table_name = $1;
      `;
      
      const foreignKeysResult = await this.pool.query(foreignKeysQuery, [tableName]);
      
      this.analysisResults.tables.set(tableName, {
        columns: columnsResult.rows,
        indexes: indexesResult.rows,
        foreignKeys: foreignKeysResult.rows,
        rowCount: await this.getTableRowCount(tableName)
      });
      
      console.log(`  ‚úÖ ${tableName}: ${columnsResult.rows.length} –∫–æ–ª–æ–Ω–æ–∫, ${indexesResult.rows.length} –∏–Ω–¥–µ–∫—Å–æ–≤`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  async getTableRowCount(tableName) {
    try {
      const countQuery = `SELECT COUNT(*) as count FROM "${tableName}";`;
      const result = await this.pool.query(countQuery);
      return parseInt(result.rows[0].count);
    } catch (error) {
      return 0;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –≤ –∫–æ–¥–µ (shared/schema.ts)
   */
  async analyzeCodeSchema() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã –≤ –∫–æ–¥–µ...');
    
    const schemaPath = path.join(__dirname, 'shared/schema.ts');
    
    try {
      if (fs.existsSync(schemaPath)) {
        const schemaContent = fs.readFileSync(schemaPath, 'utf8');
        
        // –ü–∞—Ä—Å–∏–º Drizzle —Ç–∞–±–ª–∏—Ü—ã
        const tableMatches = schemaContent.match(/export const (\w+) = pgTable\(['"`](\w+)['"`][^}]+\}\)/gs);
        
        if (tableMatches) {
          for (const match of tableMatches) {
            const lines = match.split('\n');
            const tableLine = lines[0];
            const tableNameMatch = tableLine.match(/export const (\w+) = pgTable\(['"`](\w+)['"`]/);
            
            if (tableNameMatch) {
              const [, varName, tableName] = tableNameMatch;
              const fields = this.parseTableFields(match);
              
              this.analysisResults.codeModels.set(tableName, {
                variable: varName,
                fields: fields,
                source: 'shared/schema.ts'
              });
              
              console.log(`  üìù ${tableName} (${varName}): ${fields.length} –ø–æ–ª–µ–π`);
            }
          }
        }
      } else {
        console.log('  ‚ö†Ô∏è  shared/schema.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã:', error.message);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Drizzle –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
   */
  parseTableFields(tableDefinition) {
    const fields = [];
    const lines = tableDefinition.split('\n');
    
    for (const line of lines) {
      const fieldMatch = line.trim().match(/(\w+):\s*(\w+)\(([^)]*)\)/);
      if (fieldMatch) {
        const [, fieldName, fieldType, params] = fieldMatch;
        
        fields.push({
          name: fieldName,
          type: fieldType,
          params: params,
          nullable: !line.includes('.notNull()'),
          primaryKey: line.includes('.primaryKey()'),
          unique: line.includes('.unique()'),
          default: line.includes('.default(') ? this.extractDefault(line) : null
        });
      }
    }
    
    return fields;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  extractDefault(line) {
    const defaultMatch = line.match(/\.default\(([^)]+)\)/);
    return defaultMatch ? defaultMatch[1] : null;
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–¥–æ–º
   */
  compareStructures() {
    console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –±–∞–∑—ã –∏ –∫–æ–¥–∞...');
    
    const dbTables = new Set(this.analysisResults.tables.keys());
    const codeTables = new Set(this.analysisResults.codeModels.keys());
    
    // –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ
    const dbOnlyTables = [...dbTables].filter(table => !codeTables.has(table));
    
    // –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –∫–æ–¥–µ
    const codeOnlyTables = [...codeTables].filter(table => !dbTables.has(table));
    
    // –û–±—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const commonTables = [...dbTables].filter(table => codeTables.has(table));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    this.analyzeTableDiscrepancies(dbOnlyTables, codeOnlyTables, commonTables);
    
    console.log(`  üìä –û–±—â–∏—Ö —Ç–∞–±–ª–∏—Ü: ${commonTables.length}`);
    console.log(`  üìã –¢–æ–ª—å–∫–æ –≤ –±–∞–∑–µ: ${dbOnlyTables.length}`);
    console.log(`  üìù –¢–æ–ª—å–∫–æ –≤ –∫–æ–¥–µ: ${codeOnlyTables.length}`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
   */
  analyzeTableDiscrepancies(dbOnlyTables, codeOnlyTables, commonTables) {
    // –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ
    for (const table of dbOnlyTables) {
      const tableInfo = this.analysisResults.tables.get(table);
      this.analysisResults.discrepancies.push({
        type: 'table_unused',
        table: table,
        severity: tableInfo.rowCount > 0 ? 'medium' : 'low',
        message: `–¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ`,
        details: { rowCount: tableInfo.rowCount }
      });
    }
    
    // –¢–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –≤ –∫–æ–¥–µ
    for (const table of codeOnlyTables) {
      this.analysisResults.discrepancies.push({
        type: 'table_missing',
        table: table,
        severity: 'high',
        message: `–¢–∞–±–ª–∏—Ü–∞ ${table} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ`
      });
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—è –≤ –æ–±—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    for (const table of commonTables) {
      this.compareTableFields(table);
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  compareTableFields(tableName) {
    const dbTable = this.analysisResults.tables.get(tableName);
    const codeTable = this.analysisResults.codeModels.get(tableName);
    
    const dbFields = new Map(dbTable.columns.map(col => [col.column_name, col]));
    const codeFields = new Map(codeTable.fields.map(field => [field.name, field]));
    
    // –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ
    for (const [fieldName, fieldInfo] of dbFields) {
      if (!codeFields.has(fieldName)) {
        this.analysisResults.discrepancies.push({
          type: 'field_unused',
          table: tableName,
          field: fieldName,
          severity: 'low',
          message: `–ü–æ–ª–µ ${tableName}.${fieldName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ`,
          details: { dbType: fieldInfo.data_type, nullable: fieldInfo.is_nullable }
        });
      }
    }
    
    // –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–¥–µ
    for (const [fieldName, fieldInfo] of codeFields) {
      if (!dbFields.has(fieldName)) {
        this.analysisResults.discrepancies.push({
          type: 'field_missing',
          table: tableName,
          field: fieldName,
          severity: 'high',
          message: `–ü–æ–ª–µ ${tableName}.${fieldName} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –∫–æ–¥–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ`,
          details: { codeType: fieldInfo.type, nullable: fieldInfo.nullable }
        });
      }
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    for (const [fieldName, codeField] of codeFields) {
      const dbField = dbFields.get(fieldName);
      if (dbField) {
        this.compareFieldTypes(tableName, fieldName, dbField, codeField);
      }
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–∏–ø—ã –ø–æ–ª–µ–π
   */
  compareFieldTypes(tableName, fieldName, dbField, codeField) {
    const dbType = dbField.data_type.toLowerCase();
    const codeType = codeField.type.toLowerCase();
    
    // –ú–∞–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ Drizzle -> PostgreSQL
    const typeMapping = {
      'text': ['text', 'varchar', 'character varying'],
      'varchar': ['varchar', 'character varying', 'text'],
      'integer': ['integer', 'int4'],
      'bigint': ['bigint', 'int8'],
      'serial': ['integer', 'int4'],
      'bigserial': ['bigint', 'int8'],
      'boolean': ['boolean', 'bool'],
      'timestamp': ['timestamp without time zone', 'timestamp with time zone'],
      'uuid': ['uuid'],
      'decimal': ['numeric', 'decimal'],
      'real': ['real', 'float4'],
      'jsonb': ['jsonb'],
      'json': ['json']
    };
    
    let isCompatible = false;
    for (const [drizzleType, pgTypes] of Object.entries(typeMapping)) {
      if (codeType === drizzleType && pgTypes.includes(dbType)) {
        isCompatible = true;
        break;
      }
    }
    
    if (!isCompatible && dbType !== codeType) {
      this.analysisResults.discrepancies.push({
        type: 'type_mismatch',
        table: tableName,
        field: fieldName,
        severity: 'medium',
        message: `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –≤ ${tableName}.${fieldName}`,
        details: { dbType: dbType, codeType: codeType }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º nullable
    const dbNullable = dbField.is_nullable === 'YES';
    const codeNullable = codeField.nullable;
    
    if (dbNullable !== codeNullable) {
      this.analysisResults.discrepancies.push({
        type: 'nullable_mismatch',
        table: tableName,
        field: fieldName,
        severity: 'low',
        message: `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ nullable –≤ ${tableName}.${fieldName}`,
        details: { dbNullable: dbNullable, codeNullable: codeNullable }
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—è—Ö
   */
  checkCriticalIndexes() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const criticalFields = ['telegram_id', 'user_id', 'ref_code', 'mission_id', 'type', 'parent_ref_code'];
    
    for (const [tableName, tableInfo] of this.analysisResults.tables) {
      const existingIndexes = tableInfo.indexes.map(idx => idx.indexname.toLowerCase());
      
      for (const column of tableInfo.columns) {
        const fieldName = column.column_name;
        
        if (criticalFields.includes(fieldName)) {
          const hasIndex = existingIndexes.some(idx => 
            idx.includes(fieldName) || 
            idx.includes(`${tableName}_${fieldName}`)
          );
          
          if (!hasIndex && fieldName !== 'id') {
            this.analysisResults.discrepancies.push({
              type: 'missing_index',
              table: tableName,
              field: fieldName,
              severity: 'medium',
              message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ ${tableName}.${fieldName} –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å–∞`
            });
          }
        }
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç T14
   */
  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä –û–¢–ß–ï–¢ T14: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• UniFarm');
    console.log('='.repeat(80));

    const stats = {
      tablesInDb: this.analysisResults.tables.size,
      tablesInCode: this.analysisResults.codeModels.size,
      totalDiscrepancies: this.analysisResults.discrepancies.length
    };

    console.log(`\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`  –¢–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${stats.tablesInDb}`);
    console.log(`  –¢–∞–±–ª–∏—Ü –≤ –∫–æ–¥–µ: ${stats.tablesInCode}`);
    console.log(`  –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ${stats.totalDiscrepancies}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    const grouped = this.groupDiscrepancies();
    
    this.printDiscrepanciesByType(grouped);
    this.printTableStructures();
    this.generateRecommendations();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    this.saveDetailedReport(stats);

    return stats;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
   */
  groupDiscrepancies() {
    return this.analysisResults.discrepancies.reduce((acc, disc) => {
      if (!acc[disc.type]) acc[disc.type] = [];
      acc[disc.type].push(disc);
      return acc;
    }, {});
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
   */
  printDiscrepanciesByType(grouped) {
    console.log(`\nüîç –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –ü–û –¢–ò–ü–ê–ú:`);

    if (grouped.table_missing?.length > 0) {
      console.log(`\nüö® –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–ê–ë–õ–ò–¶–´ (${grouped.table_missing.length}):`);
      grouped.table_missing.forEach(d => console.log(`  ‚Ä¢ ${d.table}`));
    }

    if (grouped.table_unused?.length > 0) {
      console.log(`\n‚ùå –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –¢–ê–ë–õ–ò–¶–´ (${grouped.table_unused.length}):`);
      grouped.table_unused.forEach(d => {
        const rowInfo = d.details?.rowCount > 0 ? ` (${d.details.rowCount} –∑–∞–ø–∏—Å–µ–π)` : ' (–ø—É—Å—Ç–∞—è)';
        console.log(`  ‚Ä¢ ${d.table}${rowInfo}`);
      });
    }

    if (grouped.field_missing?.length > 0) {
      console.log(`\nüö® –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–û–õ–Ø (${grouped.field_missing.length}):`);
      const byTable = grouped.field_missing.reduce((acc, d) => {
        if (!acc[d.table]) acc[d.table] = [];
        acc[d.table].push(`${d.field} (${d.details?.codeType})`);
        return acc;
      }, {});
      Object.entries(byTable).forEach(([table, fields]) => {
        console.log(`  ‚Ä¢ ${table}: ${fields.join(', ')}`);
      });
    }

    if (grouped.field_unused?.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ü–û–õ–Ø (${grouped.field_unused.length}):`);
      const byTable = grouped.field_unused.reduce((acc, d) => {
        if (!acc[d.table]) acc[d.table] = [];
        acc[d.table].push(`${d.field} (${d.details?.dbType})`);
        return acc;
      }, {});
      Object.entries(byTable).forEach(([table, fields]) => {
        console.log(`  ‚Ä¢ ${table}: ${fields.join(', ')}`);
      });
    }

    if (grouped.type_mismatch?.length > 0) {
      console.log(`\n‚ö° –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–ò–ü–û–í (${grouped.type_mismatch.length}):`);
      grouped.type_mismatch.forEach(d => {
        console.log(`  ‚Ä¢ ${d.table}.${d.field}: ${d.details.dbType} (–±–∞–∑–∞) ‚â† ${d.details.codeType} (–∫–æ–¥)`);
      });
    }

    if (grouped.missing_index?.length > 0) {
      console.log(`\nüìä –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ò–ù–î–ï–ö–°–´ (${grouped.missing_index.length}):`);
      const byTable = grouped.missing_index.reduce((acc, d) => {
        if (!acc[d.table]) acc[d.table] = [];
        acc[d.table].push(d.field);
        return acc;
      }, {});
      Object.entries(byTable).forEach(([table, fields]) => {
        console.log(`  ‚Ä¢ ${table}: ${fields.join(', ')}`);
      });
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
   */
  printTableStructures() {
    console.log(`\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶ –í –ë–ê–ó–ï:`);
    
    for (const [tableName, tableInfo] of this.analysisResults.tables) {
      console.log(`\n  üìÅ ${tableName.toUpperCase()} (${tableInfo.rowCount} –∑–∞–ø–∏—Å–µ–π)`);
      
      tableInfo.columns.forEach(col => {
        const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
        const defaultVal = col.column_default ? ` DEFAULT ${col.column_default}` : '';
        console.log(`    ‚Ä¢ ${col.column_name}: ${col.data_type} ${nullable}${defaultVal}`);
      });
      
      if (tableInfo.indexes.length > 0) {
        console.log(`    –ò–Ω–¥–µ–∫—Å—ã (${tableInfo.indexes.length}):`);
        tableInfo.indexes.forEach(idx => {
          console.log(`      ‚Ä¢ ${idx.indexname}`);
        });
      }
      
      if (tableInfo.foreignKeys.length > 0) {
        console.log(`    –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (${tableInfo.foreignKeys.length}):`);
        tableInfo.foreignKeys.forEach(fk => {
          console.log(`      ‚Ä¢ ${fk.column_name} ‚Üí ${fk.foreign_table_name}.${fk.foreign_column_name}`);
        });
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  generateRecommendations() {
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø T15:`);
    
    const critical = this.analysisResults.discrepancies.filter(d => d.severity === 'high');
    const medium = this.analysisResults.discrepancies.filter(d => d.severity === 'medium');
    const low = this.analysisResults.discrepancies.filter(d => d.severity === 'low');
    
    if (critical.length > 0) {
      console.log(`\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (${critical.length}):`);
      critical.forEach(d => {
        if (d.type === 'table_missing') {
          console.log(`  ‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: ${d.table}`);
          this.analysisResults.recommendations.push(`CREATE TABLE ${d.table}`);
        }
        if (d.type === 'field_missing') {
          console.log(`  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ: ${d.table}.${d.field} (${d.details?.codeType})`);
          this.analysisResults.recommendations.push(`ALTER TABLE ${d.table} ADD COLUMN ${d.field}`);
        }
      });
    }
    
    if (medium.length > 0) {
      console.log(`\n‚ö†Ô∏è  –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (${medium.length}):`);
      medium.forEach(d => {
        if (d.type === 'missing_index') {
          console.log(`  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å: ${d.table}.${d.field}`);
          this.analysisResults.recommendations.push(`CREATE INDEX idx_${d.table}_${d.field} ON ${d.table}(${d.field})`);
        }
        if (d.type === 'type_mismatch') {
          console.log(`  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø: ${d.table}.${d.field} (${d.details.dbType} ‚Üí ${d.details.codeType})`);
        }
      });
    }
    
    if (low.length > 0) {
      console.log(`\nüìù –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (${low.length}):`);
      console.log(`  ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å ${low.filter(d => d.type === 'field_unused').length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π`);
      console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ${low.filter(d => d.type === 'table_unused').length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü`);
    }

    console.log(`\nüéØ –ò–¢–û–ì–û:`);
    console.log(`  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${critical.length}`);
    console.log(`  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: ${medium.length}`);
    console.log(`  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: ${low.length}`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  saveDetailedReport(stats) {
    const report = {
      timestamp: new Date().toISOString(),
      statistics: stats,
      database_tables: Object.fromEntries(this.analysisResults.tables),
      code_models: Object.fromEntries(this.analysisResults.codeModels),
      discrepancies: this.analysisResults.discrepancies,
      recommendations: this.analysisResults.recommendations
    };
    
    fs.writeFileSync('T14_DATABASE_ANALYSIS_REPORT.json', JSON.stringify(report, null, 2));
    console.log(`\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: T14_DATABASE_ANALYSIS_REPORT.json`);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
   */
  async runAnalysis() {
    try {
      console.log('üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê T14: –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
      
      await this.analyzeDatabaseStructure();
      await this.analyzeCodeSchema();
      this.compareStructures();
      this.checkCriticalIndexes();
      
      const stats = this.generateReport();
      
      console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó T14 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û');
      return stats;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ T14:', error.message);
      throw error;
    } finally {
      await this.pool.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
  const analyzer = new DatabaseStructureAnalyzer();
  await analyzer.runAnalysis();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { DatabaseStructureAnalyzer };