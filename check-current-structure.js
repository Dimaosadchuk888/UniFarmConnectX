/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */

import { createClient } from '@supabase/supabase-js';

async function checkCurrentStructure() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ô –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´');
  console.log('='.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
  const { data: partners, error: partnersError } = await supabase
    .from('users')
    .select('id, username, telegram_id, referred_by, balance_uni, balance_ton, ref_code')
    .gte('telegram_id', 999999000)
    .order('id');
  
  if (partnersError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:', partnersError.message);
    return;
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${partners.length}`);
  console.log('\nüìã –°–¢–†–£–ö–¢–£–†–ê –ü–ê–†–¢–ù–ï–†–û–í:');
  console.log('-'.repeat(90));
  console.log('–£—Ä–æ–≤–µ–Ω—å | User ID | Username         | Telegram ID  | –†–µ—Ñ–µ—Ä–µ–Ω—Ç | –ë–∞–ª–∞–Ω—Å—ã (UNI/TON)');
  console.log('-'.repeat(90));
  
  partners.forEach((partner, idx) => {
    const level = partner.telegram_id - 999999000;
    console.log(`   ${level.toString().padStart(2)}     | ${partner.id.toString().padStart(7)} | ${partner.username.padEnd(16)} | ${partner.telegram_id} | ${partner.referred_by.toString().padStart(8)} | ${partner.balance_uni}/${partner.balance_ton}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: mainUser, error: mainError } = await supabase
    .from('users')
    .select('id, username, balance_uni, balance_ton, ref_code')
    .eq('id', 48)
    .single();
  
  if (!mainError && mainUser) {
    console.log('\nüìä –û–°–ù–û–í–ù–û–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ (ID: 48):');
    console.log(`   Username: ${mainUser.username}`);
    console.log(`   Ref Code: ${mainUser.ref_code}`);
    console.log(`   –ë–∞–ª–∞–Ω—Å—ã: ${mainUser.balance_uni} UNI, ${mainUser.balance_ton} TON`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const directReferrals = partners.filter(p => p.referred_by === 48).length;
    console.log(`   –ü—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${directReferrals}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
  console.log('\nüîó –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê:');
  console.log('-'.repeat(60));
  
  let currentReferrer = 48;
  let chainLevel = 0;
  
  while (currentReferrer && chainLevel < 21) {
    const referrer = chainLevel === 0 ? mainUser : partners.find(p => p.id === currentReferrer);
    
    if (referrer) {
      if (chainLevel === 0) {
        console.log(`   –£—Ä–æ–≤–µ–Ω—å ${chainLevel}: ID ${referrer.id} (${referrer.username}) - –û–°–ù–û–í–ù–û–ô`);
      } else {
        console.log(`   –£—Ä–æ–≤–µ–Ω—å ${chainLevel}: ID ${referrer.id} (${referrer.username}) - –ü–∞—Ä—Ç–Ω–µ—Ä`);
      }
      
      // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ —Ü–µ–ø–æ—á–∫–µ
      const nextInChain = partners.find(p => p.referred_by === currentReferrer);
      currentReferrer = nextInChain ? nextInChain.id : null;
      chainLevel++;
    } else {
      break;
    }
  }
  
  console.log(`\nüìà –î–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏: ${chainLevel - 1} —É—Ä–æ–≤–Ω–µ–π (+ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: transactions, error: txError } = await supabase
    .from('transactions')
    .select('id, user_id, type, amount_uni, amount_ton, description')
    .in('user_id', [48, ...partners.map(p => p.id)])
    .order('created_at', { ascending: false })
    .limit(20);
  
  if (!txError && transactions?.length > 0) {
    console.log('\nüí∞ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    console.log('-'.repeat(60));
    transactions.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      const isMainUser = tx.user_id === 48;
      console.log(`   ${idx + 1}. ${isMainUser ? '[MAIN]' : '[PART]'} ID: ${tx.id} | User: ${tx.user_id} | ${amount} ${currency} | ${tx.description.substring(0, 50)}...`);
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
  const { data: referralTx, error: refError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 48)
    .ilike('description', '%referral%')
    .order('created_at', { ascending: false })
    .limit(10);
  
  if (!refError && referralTx?.length > 0) {
    console.log('\nüë• –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –û–°–ù–û–í–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.log('-'.repeat(60));
    referralTx.forEach((tx, idx) => {
      const amount = tx.amount_uni || tx.amount_ton || '0';
      const currency = tx.amount_uni ? 'UNI' : 'TON';
      console.log(`   ${idx + 1}. ID: ${tx.id} | +${amount} ${currency} | ${tx.description}`);
    });
    
    const totalReferralIncome = referralTx.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || 0), 0);
    console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferralIncome.toFixed(4)} UNI`);
  } else {
    console.log('\nüìù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(60));
  
  const totalUsers = partners.length + 1; // +1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
  const totalUniBalance = partners.reduce((sum, p) => sum + parseFloat(p.balance_uni || 0), 0) + parseFloat(mainUser?.balance_uni || 0);
  const totalTonBalance = partners.reduce((sum, p) => sum + parseFloat(p.balance_ton || 0), 0) + parseFloat(mainUser?.balance_ton || 0);
  const activePartners = partners.filter(p => parseFloat(p.balance_uni) > 100 || parseFloat(p.balance_ton) > 100).length;
  
  console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
  console.log(`üí∞ –û–±—â–∏–π UNI –±–∞–ª–∞–Ω—Å —Å–µ—Ç–∏: ${totalUniBalance.toFixed(2)} UNI`);
  console.log(`üí∞ –û–±—â–∏–π TON –±–∞–ª–∞–Ω—Å —Å–µ—Ç–∏: ${totalTonBalance.toFixed(2)} TON`);
  console.log(`üîó –°–æ–∑–¥–∞–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${partners.length}/20`);
  console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${activePartners}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${((partners.length / 20) * 100).toFixed(1)}%`);
  
  if (partners.length < 20) {
    console.log('\n‚ö° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Ä–æ–≤–Ω–µ–π');
  } else {
    console.log('\n‚úÖ 20-–£–†–û–í–ù–ï–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–ó–î–ê–ù–ê');
  }
}

checkCurrentStructure().catch(console.error);