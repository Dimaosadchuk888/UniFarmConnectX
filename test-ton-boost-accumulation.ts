#!/usr/bin/env ts-node
import { supabase } from './core/supabase';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è TON Boost
 * –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

async function testTonBoostAccumulation() {
  console.log('üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ TON Boost\n');
  console.log('–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', new Date().toISOString());
  console.log('=' .repeat(70) + '\n');

  const testUserId = 74;
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –î–û –ø–æ–∫—É–ø–∫–∏
    console.log('üìä –®–ê–ì 1: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø–æ–∫—É–ø–∫–∏\n');
    
    const { data: beforeData } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', testUserId)
      .single();

    const balanceBefore = parseFloat(beforeData?.farming_balance) || 0;
    const rateBefore = parseFloat(beforeData?.farming_rate) || 0;
    const packageBefore = beforeData?.boost_package_id;
    
    console.log(`–ë–∞–ª–∞–Ω—Å –î–û: ${balanceBefore} TON`);
    console.log(`–°—Ç–∞–≤–∫–∞ –î–û: ${rateBefore} (${rateBefore * 100}% –≤ –¥–µ–Ω—å)`);
    console.log(`–ü–∞–∫–µ—Ç –î–û: ${packageBefore}`);
    
    // 2. –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\nüìà –®–ê–ì 2: –ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n');
    
    const { data: allDeposits } = await supabase
      .from('transactions')
      .select('amount, created_at')
      .eq('user_id', testUserId)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(20);
    
    let totalDeposits = 0;
    if (allDeposits) {
      allDeposits.forEach((tx, idx) => {
        const amount = parseFloat(tx.amount);
        totalDeposits += amount;
        if (idx < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
          console.log(`${idx + 1}. ${tx.created_at}: ${amount} TON`);
        }
      });
      
      console.log(`\n–í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${allDeposits.length}`);
      console.log(`–û–±—â–∞—è —Å—É–º–º–∞: ${totalDeposits} TON`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    console.log('\n‚úÖ –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è\n');
    
    console.log(`–¢–µ–∫—É—â–∏–π farming_balance: ${balanceBefore} TON`);
    console.log(`–°—É–º–º–∞ –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits} TON`);
    
    if (Math.abs(balanceBefore - totalDeposits) < 0.01) {
      console.log(`\n‚úÖ –ù–ê–ö–û–ü–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢! –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω —Å—É–º–º–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤.`);
    } else if (balanceBefore < totalDeposits) {
      const lost = totalDeposits - balanceBefore;
      const lostPercent = (lost / totalDeposits * 100).toFixed(1);
      console.log(`\n‚ùå –ù–ê–ö–û–ü–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!`);
      console.log(`   –ü–æ—Ç–µ—Ä—è–Ω–æ: ${lost.toFixed(2)} TON (${lostPercent}%)`);
      console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –∑–∞–º–µ—â–µ–Ω–∏—è.`);
    } else {
      console.log(`\n‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞ ${(balanceBefore - totalDeposits).toFixed(2)} TON`);
      console.log(`   –í–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏–ª–∏ —Ä—É—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.`);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    console.log('\nüí∞ –®–ê–ì 4: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è\n');
    
    const { data: lastRewards } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', testUserId)
      .eq('type', 'FARMING_REWARD')
      .order('created_at', { ascending: false })
      .limit(3);
    
    if (lastRewards) {
      lastRewards.forEach((reward, idx) => {
        const meta = reward.metadata ? 
          (typeof reward.metadata === 'string' ? JSON.parse(reward.metadata) : reward.metadata) : {};
        
        if (meta.original_type === 'TON_BOOST_INCOME') {
          const amount = parseFloat(reward.amount);
          const expectedAmount = (balanceBefore * rateBefore) / (24 * 12);
          
          console.log(`–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ ${idx + 1}:`);
          console.log(`   –í—Ä–µ–º—è: ${reward.created_at}`);
          console.log(`   –°—É–º–º–∞: ${amount} TON`);
          console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è: ${expectedAmount.toFixed(9)} TON`);
          console.log(`   –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –æ—Ç: ${balanceBefore} TON`);
        }
      });
    }
    
    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    
    if (balanceBefore < totalDeposits) {
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã TonFarmingRepository.ts –∏ service.ts –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      console.log('3. –°–¥–µ–ª–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
      console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç');
    } else {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('   –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTonBoostAccumulation()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });