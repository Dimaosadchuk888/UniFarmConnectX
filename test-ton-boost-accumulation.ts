#!/usr/bin/env ts-node
import { supabase } from './core/supabase';

/**
 * –¢–µ—Å—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ TON Boost
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */
async function testTonBoostAccumulation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ TON Boost...\n');
  
  // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const testUserId = 74;
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', testUserId);
    
    const { data: tonData, error: tonError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', testUserId)
      .single();
    
    if (tonError && tonError.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', tonError);
    }
    
    if (tonData) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data:');
      console.log('   - farming_balance:', tonData.farming_balance);
      console.log('   - boost_package_id:', tonData.boost_package_id);
      console.log('   - farming_rate:', tonData.farming_rate);
      console.log('   - boost_active:', tonData.boost_active);
    } else {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ ton_farming_data, –ø—Ä–æ–≤–µ—Ä—è–µ–º fallback...');
      
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('ton_farming_balance, ton_boost_package_id, ton_farming_rate, ton_boost_active')
        .eq('id', testUserId)
        .single();
      
      if (userData) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ users (fallback):');
        console.log('   - ton_farming_balance:', userData.ton_farming_balance);
        console.log('   - ton_boost_package_id:', userData.ton_boost_package_id);
        console.log('   - ton_farming_rate:', userData.ton_farming_rate);
        console.log('   - ton_boost_active:', userData.ton_boost_active);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ TON Boost:');
    
    const { data: purchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', testUserId)
      .eq('type', 'BOOST_PURCHASE')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (purchases && purchases.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${purchases.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE:`);
      
      let totalDeposited = 0;
      purchases.forEach((tx, idx) => {
        const amount = parseFloat(tx.amount);
        totalDeposited += amount;
        console.log(`   ${idx + 1}. ${tx.created_at} - ${amount} TON`);
        if (tx.metadata) {
          console.log(`      metadata:`, tx.metadata);
        }
      });
      
      console.log(`\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposited} TON`);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å farming_balance
      const currentBalance = tonData?.farming_balance || userData?.ton_farming_balance || 0;
      console.log(`üìä –¢–µ–∫—É—â–∏–π farming_balance: ${currentBalance} TON`);
      
      if (Math.abs(parseFloat(currentBalance) - totalDeposited) < 0.01) {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤!');
      } else {
        console.log('‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å—É–º–º–æ–π –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      }
    } else {
      console.log('‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BOOST_PURCHASE');
    }
    
    // 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –°–¥–µ–ª–∞–π—Ç–µ –ø–æ–∫—É–ø–∫—É TON Boost –Ω–∞ 5 TON');
    console.log('2. –ó–∞—Ç–µ–º —Å–¥–µ–ª–∞–π—Ç–µ –µ—â–µ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É –Ω–∞ 10 TON');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ farming_balance = 15 TON');
    console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–∏–¥–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTonBoostAccumulation()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });