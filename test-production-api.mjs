/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤ production-—Ä–µ–∂–∏–º–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π domain –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ—Ä—Ç–∞
 */

import fetch from 'node-fetch';

// Production URL
const PRODUCTION_URL = 'https://uni-farm-connect-2-misterxuniverse.replit.app';

// –°–ø–∏—Å–æ–∫ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const API_ENDPOINTS = [
  '/',                          // Health check
  '/api/user/check',            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  '/UniFarm',                   // Mini App URL
  '/app',                       // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π Mini App URL
  '/telegram',                  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π Mini App URL
  '/telegram-app'               // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π Mini App URL
];

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
 */
async function checkEndpoint(endpoint) {
  const url = `${PRODUCTION_URL}${endpoint}`;
  console.log(`${colors.blue}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${url}...${colors.reset}`);
  
  try {
    const startTime = Date.now();
    const response = await fetch(url);
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    let data;
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      data = await response.json();
    } else {
      data = await response.text();
    }
    
    // –î–ª—è HTML-–æ—Ç–≤–µ—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
    if (typeof data === 'string' && data.length > 100) {
      data = data.substring(0, 100) + '... (truncated)';
    }
    
    return {
      url,
      status: response.status,
      success: response.ok,
      responseTime,
      contentType,
      data
    };
  } catch (error) {
    return {
      url,
      status: 'Error',
      success: false,
      error: error.message
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
 */
function formatResult(result) {
  const statusColor = result.success ? colors.green : colors.red;
  const statusText = result.success ? 'SUCCESS' : 'FAILED';
  
  let output = `${statusColor}[${statusText}]${colors.reset} ${result.url}\n`;
  output += `  ${colors.yellow}Status:${colors.reset} ${result.status}\n`;
  
  if (result.responseTime) {
    output += `  ${colors.yellow}Time:${colors.reset} ${result.responseTime}ms\n`;
  }
  
  if (result.contentType) {
    output += `  ${colors.yellow}Content-Type:${colors.reset} ${result.contentType}\n`;
  }
  
  if (result.data) {
    output += `  ${colors.yellow}Data:${colors.reset} ${typeof result.data === 'object' ? JSON.stringify(result.data) : result.data}\n`;
  }
  
  if (result.error) {
    output += `  ${colors.red}Error:${colors.reset} ${result.error}\n`;
  }
  
  return output;
}

/**
 * –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
 */
function printSummary(results) {
  const successCount = results.filter(r => r.success).length;
  const failCount = results.length - successCount;
  
  console.log('\n===========================================================');
  console.log(`${colors.cyan}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò API${colors.reset}`);
  console.log('-----------------------------------------------------------');
  console.log(`${colors.green}‚úÖ –£—Å–ø–µ—à–Ω–æ:${colors.reset} ${successCount}/${results.length}`);
  console.log(`${colors.red}‚ùå –û—à–∏–±–æ–∫:${colors.reset} ${failCount}/${results.length}`);
  console.log('===========================================================\n');
  
  if (failCount > 0) {
    console.log(`${colors.yellow}‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:${colors.reset}`);
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —á–µ—Ä–µ–∑ Replit Deploy');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Deployments –≤ Replit (Run Command, Domain)');
    console.log('3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Replit\n');
  } else {
    console.log(`${colors.green}‚úÖ –í—Å–µ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!${colors.reset}\n`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log(`${colors.magenta}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API –≤ production-—Ä–µ–∂–∏–º–µ${colors.reset}`);
  console.log(`${colors.magenta}üìå Production URL: ${PRODUCTION_URL}${colors.reset}\n`);
  
  const results = [];
  
  for (const endpoint of API_ENDPOINTS) {
    const result = await checkEndpoint(endpoint);
    console.log(formatResult(result));
    results.push(result);
  }
  
  printSummary(results);
}

main().catch(error => {
  console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:${colors.reset}`, error);
  process.exit(1);
});