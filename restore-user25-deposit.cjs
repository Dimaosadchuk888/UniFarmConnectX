/**
 * –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–ê USER #25
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ 0.1 TON –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è BalanceManager
 */

const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function restoreUser25Deposit() {
  console.log('üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–ê USER #25');
  console.log('======================================');
  
  try {
    const USER_ID = 25;
    const DEPOSIT_AMOUNT = 0.1;
    const TX_HASH = '00a1ba3c2614f4d65cc346805feea960';
    
    console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç:`);
    console.log(`   - User ID: ${USER_ID}`);
    console.log(`   - –°—É–º–º–∞: ${DEPOSIT_AMOUNT} TON`);
    console.log(`   - TX Hash: ${TX_HASH}`);
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User #25
    const { data: userBefore, error: userError } = await supabase
      .from('users')
      .select('balance_ton, username')
      .eq('id', USER_ID)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    console.log(`üìä –ë–∞–ª–∞–Ω—Å –î–û –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${userBefore.balance_ton} TON`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    const { data: existingTx, error: txCheckError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', USER_ID)
      .ilike('description', `%${TX_HASH}%`)
      .eq('currency', 'TON')
      .eq('type', 'DEPOSIT');
    
    if (txCheckError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txCheckError.message);
      return;
    }
    
    if (existingTx && existingTx.length > 0) {
      console.log('‚ö†Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      existingTx.forEach(tx => {
        console.log(`   - ID: ${tx.id}, Amount: ${tx.amount} TON, Status: ${tx.status}`);
      });
      console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      return;
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = parseFloat(userBefore.balance_ton) + DEPOSIT_AMOUNT;
    
    const { error: balanceUpdateError } = await supabase
      .from('users')
      .update({ 
        balance_ton: newBalance
      })
      .eq('id', USER_ID);
    
    if (balanceUpdateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', balanceUpdateError.message);
      return;
    }
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${userBefore.balance_ton} ‚Üí ${newBalance} TON`);
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { data: transaction, error: txCreateError } = await supabase
      .from('transactions')
      .insert({
        user_id: USER_ID,
        amount: DEPOSIT_AMOUNT.toString(),
        type: 'DEPOSIT',
        currency: 'TON',
        status: 'completed',
        description: `TON deposit from blockchain: ${TX_HASH}`,
        metadata: {
          source: 'ton_deposit_restoration',
          wallet_address: 'unknown',
          tx_hash: TX_HASH,
          restored_at: new Date().toISOString(),
          original_issue: 'BalanceManager import missing'
        }
      })
      .select()
      .single();
    
    if (txCreateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txCreateError.message);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      await supabase
        .from('users')
        .update({ balance_ton: userBefore.balance_ton })
        .eq('id', USER_ID);
      
      return;
    }
    
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: userAfter, error: finalCheckError } = await supabase
      .from('users')
      .select('balance_ton')
      .eq('id', USER_ID)
      .single();
    
    if (finalCheckError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', finalCheckError.message);
    } else {
      console.log(`üìä –ë–∞–ª–∞–Ω—Å –ü–û–°–õ–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${userAfter.balance_ton} TON`);
    }
    
    // 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìã –û–¢–ß–ï–¢ –û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ò:');
    console.log('===========================');
    console.log(`‚úÖ User #25 (${userBefore.username}): –¥–µ–ø–æ–∑–∏—Ç 0.1 TON –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω: ${userBefore.balance_ton} ‚Üí ${newBalance} TON`);
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
    console.log(`‚úÖ –ë–ª–æ–∫—á–µ–π–Ω TX Hash: ${TX_HASH}`);
    console.log('\n–ü—Ä–æ–±–ª–µ–º–∞ —Å BalanceManager import –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, TON –¥–µ–ø–æ–∑–∏—Ç—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç!');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:', error.message);
  }
}

restoreUser25Deposit();