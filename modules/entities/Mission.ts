import { BaseEntity } from './BaseEntity';

export type MissionType = 'telegram' | 'youtube' | 'tiktok' | 'invite' | 'social' | 'check-in' | 'deposit';

/**
 * –ö–ª–∞—Å—Å –º–∏—Å—Å–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ UniFarm
 */
export class Mission extends BaseEntity {
  constructor(
    id: number,
    public type: MissionType,
    public title: string,
    public description: string,
    public rewardUNI: number,
    public isActive: boolean = true,
    public url?: string,
    public requiredCount?: number,
    createdAt: Date = new Date()
  ) {
    super(id, createdAt);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Å—Å–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π
   */
  isSocial(): boolean {
    return ['telegram', 'youtube', 'tiktok', 'social'].includes(this.type);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Å—Å–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
   */
  isReferral(): boolean {
    return this.type === 'invite';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Å—Å–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π
   */
  isDaily(): boolean {
    return this.type === 'check-in';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –º–∏—Å—Å–∏—è –¥–µ–ø–æ–∑–∏—Ç
   */
  requiresDeposit(): boolean {
    return this.type === 'deposit';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –º–∏—Å—Å–∏–∏
   */
  getIcon(): string {
    const icons: Record<MissionType, string> = {
      telegram: 'üì±',
      youtube: 'üì∫',
      tiktok: 'üéµ',
      invite: 'üë•',
      social: 'üåê',
      'check-in': 'üìÖ',
      deposit: 'üí∞'
    };
    return icons[this.type] || 'üìã';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ –º–∏—Å—Å–∏–∏
   */
  getColor(): string {
    const colors: Record<MissionType, string> = {
      telegram: '#0088cc',
      youtube: '#ff0000',
      tiktok: '#000000',
      invite: '#00c851',
      social: '#33b5e5',
      'check-in': '#ff8800',
      deposit: '#ffd700'
    };
    return colors[this.type] || '#6c757d';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∏—Å—Å–∏–∏
   */
  getDifficulty(): 'easy' | 'medium' | 'hard' {
    if (this.rewardUNI <= 10) return 'easy';
    if (this.rewardUNI <= 50) return 'medium';
    return 'hard';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  getEstimatedTime(): string {
    switch (this.type) {
      case 'telegram':
      case 'youtube':
      case 'tiktok':
        return '2-5 –º–∏–Ω—É—Ç';
      case 'invite':
        return '10-30 –º–∏–Ω—É—Ç';
      case 'check-in':
        return '1 –º–∏–Ω—É—Ç–∞';
      case 'deposit':
        return '5-15 –º–∏–Ω—É—Ç';
      default:
        return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–∏—Å—Å–∏—è –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
   */
  isRepeatable(): boolean {
    return this.type === 'check-in' || this.type === 'invite';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
   */
  getActionButtonText(): string {
    switch (this.type) {
      case 'telegram':
        return '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
      case 'youtube':
        return '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å';
      case 'tiktok':
        return '–°–º–æ—Ç—Ä–µ—Ç—å';
      case 'invite':
        return '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å';
      case 'check-in':
        return '–ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å';
      case 'deposit':
        return '–í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç';
      default:
        return '–í—ã–ø–æ–ª–Ω–∏—Ç—å';
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏—Å—Å–∏–∏
   */
  validate(): boolean {
    return (
      !!this.title &&
      !!this.description &&
      this.rewardUNI > 0 &&
      ['telegram', 'youtube', 'tiktok', 'invite', 'social', 'check-in', 'deposit'].includes(this.type)
    );
  }

  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏—Å—Å–∏–∏
   */
  toJSON(): Record<string, any> {
    return {
      id: this.id,
      type: this.type,
      title: this.title,
      description: this.description,
      rewardUNI: this.rewardUNI,
      isActive: this.isActive,
      url: this.url,
      requiredCount: this.requiredCount,
      createdAt: this.createdAt,
      icon: this.getIcon(),
      color: this.getColor(),
      difficulty: this.getDifficulty(),
      estimatedTime: this.getEstimatedTime(),
      isRepeatable: this.isRepeatable(),
      actionButtonText: this.getActionButtonText(),
      isSocial: this.isSocial(),
      isReferral: this.isReferral(),
      isDaily: this.isDaily(),
      requiresDeposit: this.requiresDeposit()
    };
  }
}