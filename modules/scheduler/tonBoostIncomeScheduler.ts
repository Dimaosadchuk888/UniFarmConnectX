/**
 * TON Boost Income Scheduler - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è T57 —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ù–∞—á–∏—Å–ª—è–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç TON Boost –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
 */

import { logger } from '../../core/logger';
import { ReferralService } from '../referral/service';
import { BalanceNotificationService } from '../../core/balanceNotificationService';
import { BalanceManager } from '../../core/BalanceManager';
import { supabase } from '../../core/supabase';

export class TONBoostIncomeScheduler {
  private intervalId: NodeJS.Timeout | null = null;
  private referralService: ReferralService;
  private static instance: TONBoostIncomeScheduler | null = null;
  private isProcessing: boolean = false;
  private lastProcessTime: Date | null = null;
  
  // Singleton pattern to prevent multiple instances
  static getInstance(): TONBoostIncomeScheduler {
    if (!TONBoostIncomeScheduler.instance) {
      TONBoostIncomeScheduler.instance = new TONBoostIncomeScheduler();
    }
    return TONBoostIncomeScheduler.instance;
  }

  constructor() {
    this.referralService = new ReferralService();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost –¥–æ—Ö–æ–¥–æ–≤
   */
  start(): void {
    if (this.intervalId) {
      logger.warn('[TON_BOOST_SCHEDULER-PROTECTED] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω', {
        hasInterval: !!this.intervalId,
        isProcessing: this.isProcessing
      });
      return;
    }

    logger.info('[TON_BOOST_SCHEDULER-PROTECTED] üöÄ [EMERGENCY FIX] –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ TON Boost');

    // CRITICAL FIX: Add protection against multiple executions
    this.intervalId = setInterval(async () => {
      const startTime = new Date();
      logger.info('[TON_BOOST_SCHEDULER-PROTECTED] ‚è∞ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost', {
        startTime: startTime.toISOString(),
        isProcessing: this.isProcessing,
        lastProcessTime: this.lastProcessTime?.toISOString()
      });
      
      // CRITICAL: Multiple level protection similar to UNI farming
      if (this.isProcessing) {
        logger.warn('[TON_BOOST_SCHEDULER-PROTECTED] üö´ SKIP: –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
        return;
      }
      
      // Additional time-based protection
      if (this.lastProcessTime) {
        const minutesSince = (Date.now() - this.lastProcessTime.getTime()) / (1000 * 60);
        if (minutesSince < 4.8) { // Same protection as UNI farming
          logger.warn('[TON_BOOST_SCHEDULER-PROTECTED] üö´ SKIP: –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞', {
            minutesSince: minutesSince.toFixed(2),
            required: 4.8
          });
          return;
        }
      }
      
      this.isProcessing = true;
      this.lastProcessTime = new Date();
      
      try {
        await this.processTonBoostIncome();
        const endTime = new Date();
        const duration = endTime.getTime() - startTime.getTime();
        logger.info('[TON_BOOST_SCHEDULER-PROTECTED] ‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', {
          duration: `${duration}ms`,
          endTime: endTime.toISOString()
        });
      } catch (error) {
        logger.error('[TON_BOOST_SCHEDULER-PROTECTED] ‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:', error);
      } finally {
        this.isProcessing = false;
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    logger.info('[TON_BOOST_SCHEDULER-PROTECTED] ‚úÖ [EMERGENCY FIX] –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost –∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç—Ä–æ–≥–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤
   */
  async processTonBoostIncome(): Promise<void> {
    try {
      logger.info('[TON_BOOST_SCHEDULER] –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON Boost –¥–æ—Ö–æ–¥–æ–≤');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ TON Boost –ø–∞–∫–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      const TonFarmingRepository = await import('../boost/TonFarmingRepository').then(m => m.TonFarmingRepository);
      const tonFarmingRepo = new TonFarmingRepository();
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å boost
      const activeBoostUsers = await tonFarmingRepo.getActiveBoostUsers();
      
      if (!activeBoostUsers || activeBoostUsers.length === 0) {
        logger.info('[TON_BOOST_SCHEDULER] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost');
        return;
      }

      logger.info(`[TON_BOOST_SCHEDULER] –ù–∞–π–¥–µ–Ω–æ ${activeBoostUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: user_id –≤ ton_farming_data —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∞ id –≤ users –∫–∞–∫ —á–∏—Å–ª–æ
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º CAST –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –≤ SQL –∑–∞–ø—Ä–æ—Å–µ
      const userIds = activeBoostUsers.map(u => {
        const numericId = parseInt(u.user_id.toString());
        if (isNaN(numericId)) {
          logger.warn(`[TON_BOOST_SCHEDULER] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: ${u.user_id}`);
          return null;
        }
        return numericId;
      }).filter(id => id !== null);
      
      if (userIds.length === 0) {
        logger.warn('[TON_BOOST_SCHEDULER] –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
      }
      
      logger.info(`[TON_BOOST_SCHEDULER] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, {
        original: activeBoostUsers.map(u => u.user_id),
        converted: userIds
      });
      
      const { data: userBalances, error: balanceError } = await supabase
        .from('users')
        .select('id, balance_ton, balance_uni')
        .in('id', userIds);
      
      if (balanceError) {
        logger.error('[TON_BOOST_SCHEDULER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', balanceError);
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å–∞–º
      const balanceMap = new Map(userBalances?.map(u => [u.id, u]) || []);

      let totalProcessed = 0;
      let totalEarned = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º TON Boost
      for (const user of activeBoostUsers) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º user_id –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–∞–ø–µ
          const userId = parseInt(user.user_id.toString());
          if (isNaN(userId)) {
            logger.warn(`[TON_BOOST_SCHEDULER] üö´ SKIP: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id: ${user.user_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }
          
          const userBalance = balanceMap.get(userId);
          if (!userBalance) {
            logger.error(`[TON_BOOST_SCHEDULER] üö´ CRITICAL: –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id} (ID: ${userId})`);
            logger.error(`[TON_BOOST_SCHEDULER] –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –≤ –º–∞–ø–µ:`, Array.from(balanceMap.keys()));
            logger.error(`[TON_BOOST_SCHEDULER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ farming_data:`, {
              user_id: user.user_id,
              type: typeof user.user_id,
              converted_id: userId,
              boost_package_id: user.boost_package_id
            });
            continue;
          }
          
          logger.info(`[TON_BOOST_SCHEDULER] ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${user.user_id}:`, {
            string_id: user.user_id,
            numeric_id: userId,
            found_balance: true,
            balance_ton: userBalance.balance_ton
          });
          
          // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          logger.info(`[TON_BOOST_SCHEDULER] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}:`, {
            boost_data: {
              farming_balance: user.farming_balance,
              farming_rate: user.farming_rate,
              boost_package_id: user.boost_package_id,
              ton_boost_rate: user.ton_boost_rate
            },
            user_balances: {
              balance_ton: userBalance.balance_ton,
              balance_uni: userBalance.balance_uni
            }
          });
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã boost –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          let dailyRate = user.ton_boost_rate || 0.01; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ton_boost_rate –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º farming_balance –∏–∑ ton_farming_data
          const userDeposit = Math.max(0, parseFloat(user.farming_balance || '0'));
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –ø–∞–∫–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          switch (parseInt(user.boost_package_id)) {
            case 1: // Starter Boost
              dailyRate = user.ton_boost_rate || 0.01;
              break;
            case 2: // Standard Boost  
              dailyRate = user.ton_boost_rate || 0.015;
              break;
            case 3: // Advanced Boost
              dailyRate = user.ton_boost_rate || 0.02;
              break;
            case 4: // Premium Boost
              dailyRate = user.ton_boost_rate || 0.025;
              break;
            case 5: // Elite Boost
              dailyRate = user.ton_boost_rate || 0.03;
              break;
          }
          
          // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
          const dailyIncome = userDeposit * dailyRate;
          const fiveMinuteIncome = dailyIncome / 288; // 288 —Ü–∏–∫–ª–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å

          // –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–∂–µ –º–µ–ª–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
          if (fiveMinuteIncome <= 0.00001) { // –ë—ã–ª–æ 0.0001, —Å—Ç–∞–ª–æ 0.00001
            logger.info(`[TON_BOOST_SCHEDULER] User ${user.user_id}: –¥–æ—Ö–æ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª (${fiveMinuteIncome.toFixed(8)} TON) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }

          logger.info(`[TON_BOOST_SCHEDULER] User ${user.user_id} (${user.boost_package_id}): +${fiveMinuteIncome.toFixed(6)} TON (–¥–µ–ø–æ–∑–∏—Ç: ${userDeposit} TON)`);

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ UnifiedTransactionService
          const { UnifiedTransactionService } = await import('../../core/TransactionService');
          const transactionService = UnifiedTransactionService.getInstance();
          
          const transactionResult = await transactionService.createTransaction({
            user_id: userId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
            type: 'FARMING_REWARD',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –∏–∑ –ë–î
            amount_uni: 0,
            amount_ton: fiveMinuteIncome,
            currency: 'TON',
            status: 'completed',
            description: `TON Boost –¥–æ—Ö–æ–¥ (–ø–∞–∫–µ—Ç ${user.boost_package_id}): ${fiveMinuteIncome.toFixed(6)} TON`,
            metadata: {
              boost_package_id: user.boost_package_id,
              daily_rate: dailyRate,
              user_deposit: userDeposit,
              original_type: 'TON_BOOST_INCOME',  // –ú–µ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
              transaction_source: 'ton_boost_scheduler'
            }
          });

          if (!transactionResult.success) {
            logger.error(`[TON_BOOST_SCHEDULER] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ User ${user.user_id}:`, transactionResult.error);
            continue;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¢–ï–ö–£–©–ò–ú–ò –±–∞–ª–∞–Ω—Å–∞–º–∏ (–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏)
          // –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç race condition - frontend –ø–æ–ª—É—á–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
          const balanceService = BalanceNotificationService.getInstance();
          balanceService.notifyBalanceUpdate({
            userId: userId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
            balanceUni: parseFloat(userBalance.balance_uni || '0'),  // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å UNI
            balanceTon: parseFloat(userBalance.balance_ton || '0'),  // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å TON (–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            changeAmount: fiveMinuteIncome,
            currency: 'TON',
            source: 'boost_income',
            timestamp: new Date().toISOString()
          });

          // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
          try {
            await this.referralService.distributeReferralRewards(
              userId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
              fiveMinuteIncome.toFixed(8),
              'TON',
              'boost'
            );
          } catch (referralError) {
            logger.error(`[TON_BOOST_SCHEDULER] –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ User ${user.user_id}:`, referralError);
          }

          totalProcessed++;
          totalEarned += fiveMinuteIncome;

        } catch (boostError) {
          logger.error(`[TON_BOOST_SCHEDULER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}:`, {
            error: boostError instanceof Error ? boostError.message : String(boostError),
            stack: boostError instanceof Error ? boostError.stack : undefined,
            userId: user.user_id,
            packageId: user.boost_package_id,
            deposit: userDeposit
          });
        }
      }

      logger.info(`[TON_BOOST_SCHEDULER] ‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: ${totalProcessed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${totalEarned.toFixed(6)} TON –Ω–∞—á–∏—Å–ª–µ–Ω–æ`);

    } catch (error) {
      logger.error('[TON_BOOST_SCHEDULER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      logger.info('[TON_BOOST_SCHEDULER] ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ TON Boost –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): { active: boolean; nextRun: Date | null } {
    return {
      active: this.intervalId !== null,
      nextRun: this.intervalId ? new Date(Date.now() + 5 * 60 * 1000) : null
    };
  }
}

export const tonBoostIncomeScheduler = new TONBoostIncomeScheduler();