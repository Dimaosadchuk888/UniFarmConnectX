import type { Request, Response, NextFunction } from 'express';
import { BaseController } from '../../core/BaseController';
import { logger } from '../../core/logger.js';
import { TelegramService } from './service';

export class TelegramController extends BaseController {
  private telegramService: TelegramService;

  constructor() {
    super();
    this.telegramService = new TelegramService();
  }

  async debugMiddleware(req: Request, res: Response, next: NextFunction) {
    try {
      await this.handleRequest(req, res, async () => {
      const telegramData = (req as any).telegram;
      const headers = {
        'x-telegram-init-data': req.headers['x-telegram-init-data'],
        'x-telegram-user-id': req.headers['x-telegram-user-id'],
        'telegram-init-data': req.headers['telegram-init-data']
      };
      
      logger.info('[TelegramDebug] –°–æ—Å—Ç–æ—è–Ω–∏–µ middleware', {
        has_telegram: !!telegramData,
        validated: telegramData?.validated,
        has_user: !!telegramData?.user,
        user_id: telegramData?.user?.id,
        telegram_id: telegramData?.user?.telegram_id
      });
      
      this.sendSuccess(res, {
        middleware_active: !!telegramData,
        validated: telegramData?.validated || false,
        user_present: !!telegramData?.user,
        user_data: telegramData?.user ? {
          id: telegramData.user.id,
          telegram_id: telegramData.user.telegram_id,
          username: telegramData.user.username,
          ref_code: telegramData.user.ref_code
        } : null,
        headers_received: headers,
        timestamp: new Date().toISOString()
      });
    }, '–æ—Ç–ª–∞–¥–∫–∏ Telegram middleware');
    } catch (error) {
      next(error);
    }
  }

  async handleWebhook(req: Request, res: Response, next: NextFunction) {
    try {
      await this.handleRequest(req, res, async () => {
      const update = req.body;
      
      logger.info('[TelegramWebhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram', {
        update_id: update.update_id,
        message: update.message ? {
          message_id: update.message.message_id,
          from: update.message.from,
          chat: update.message.chat,
          text: update.message.text
        } : null,
        callback_query: update.callback_query ? {
          id: update.callback_query.id,
          from: update.callback_query.from,
          data: update.callback_query.data
        } : null
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
      if (update.message && update.message.text) {
        const chatId = update.message.chat.id;
        const userId = update.message.from.id;
        const username = update.message.from.username;
        const text = update.message.text.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdmin = await this.telegramService.checkAdminStatus(userId, username);
        
        if (text.startsWith('/start')) {
          await this.handleStartCommand(chatId, userId, username);
        } else if (text.startsWith('/admin') && isAdmin) {
          await this.handleAdminCommand(chatId, userId);
        } else if (text.startsWith('/stats') && isAdmin) {
          await this.handleStatsCommand(chatId, userId);
        } else if (text.startsWith('/users') && isAdmin) {
          await this.handleUsersCommand(chatId, userId, text);
        } else if (text.startsWith('/user ') && isAdmin) {
          const targetUserId = text.split(' ')[1];
          await this.handleUserCommand(chatId, userId, targetUserId);
        } else if (text.startsWith('/missions') && isAdmin) {
          await this.handleMissionsCommand(chatId, userId);
        } else if (text.startsWith('/ban ') && isAdmin) {
          const targetUserId = text.split(' ')[1];
          await this.handleBanCommand(chatId, userId, targetUserId);
        } else if (isAdmin && (text.startsWith('/admin') || text.startsWith('/stats') || text.startsWith('/users') || text.startsWith('/missions') || text.startsWith('/ban'))) {
          // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
          await this.telegramService.sendMessage(chatId, 
            '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n' +
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/admin - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
            '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
            '/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
            '/user <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n' +
            '/missions - –ú–∏—Å—Å–∏–∏\n' +
            '/ban <id> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          );
        } else if (!isAdmin && (text.startsWith('/admin') || text.startsWith('/stats') || text.startsWith('/users') || text.startsWith('/missions') || text.startsWith('/ban'))) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
          await this.telegramService.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
      if (update.callback_query) {
        const chatId = update.callback_query.message.chat.id;
        const userId = update.callback_query.from.id;
        const username = update.callback_query.from.username;
        const data = update.callback_query.data;
        
        const isAdmin = await this.telegramService.checkAdminStatus(userId, username);
        
        if (isAdmin && data) {
          await this.handleAdminCallback(chatId, userId, data);
        }
        
        await this.telegramService.answerCallbackQuery(update.callback_query.id);
      }

      this.sendSuccess(res, { 
        status: 'webhook_processed',
        update_id: update.update_id 
      });
    }, '–æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook');
    } catch (error) {
      next(error);
    }
  }

  private async handleStartCommand(chatId: number, userId: number, username: string) {
    logger.info('[TelegramWebhook] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start', {
      chat_id: chatId,
      user_id: userId,
      username: username
    });

    await this.telegramService.sendMessage(chatId, 
      'üåæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UniFarm Connect!\n\n' +
      '–ù–∞—á–Ω–∏—Ç–µ —Ñ–∞—Ä–º–∏—Ç—å UNI –∏ TON —Ç–æ–∫–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!', 
      {
        reply_markup: {
          inline_keyboard: [[{
            text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å UniFarm',
            web_app: { url: 'https://uni-farm-connect-x-osadchukdmitro2.replit.app' }
          }]]
        }
      }
    );
  }

  private async handleAdminCommand(chatId: number, userId: number) {
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
          [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' }],
          [{ text: 'üéØ –ú–∏—Å—Å–∏–∏', callback_data: 'admin_missions' }],
          [{ text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'admin_manage' }]
        ]
      }
    };

    await this.telegramService.sendMessage(chatId, 
      'üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ UniFarm\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', 
      keyboard
    );
  }

  private async handleStatsCommand(chatId: number, userId: number) {
    try {
      const stats = await this.telegramService.getSystemStats();
      
      await this.telegramService.sendMessage(chatId, 
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã UniFarm\n\n` +
        `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.totalUsers}\n` +
        `üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${stats.totalTransactions}\n` +
        `üåæ –§–∞—Ä–º–∏–Ω–≥-–Ω–∞–≥—Ä–∞–¥—ã: ${stats.totalFarmingRewards}\n` +
        `‚ö° –°—Ç–∞—Ç—É—Å: ${stats.systemStatus}\n` +
        `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(stats.lastUpdated).toLocaleString('ru-RU')}`
      );
    } catch (error) {
      await this.telegramService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  private async handleUsersCommand(chatId: number, userId: number, text: string) {
    try {
      const page = parseInt(text.split(' ')[1]) || 1;
      const users = await this.telegramService.getUsersList(page, 10);
      
      let message = `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${Math.ceil(users.total / 10)})\n\n`;
      
      users.users.forEach((user: any, index: number) => {
        message += `${(page - 1) * 10 + index + 1}. ${user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        message += `   ID: ${user.telegram_id}\n`;
        message += `   UNI: ${user.balance_uni || '0'}\n`;
        message += `   TON: ${user.balance_ton || '0'}\n\n`;
      });
      
      const keyboard: any = { reply_markup: { inline_keyboard: [] } };
      
      if (page > 1) {
        keyboard.reply_markup.inline_keyboard.push([
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: `users_page_${page - 1}` }
        ]);
      }
      
      if (users.hasMore) {
        keyboard.reply_markup.inline_keyboard.push([
          { text: '–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data: `users_page_${page + 1}` }
        ]);
      }
      
      await this.telegramService.sendMessage(chatId, message, keyboard);
    } catch (error) {
      await this.telegramService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  private async handleUserCommand(chatId: number, userId: number, targetUserId: string) {
    try {
      const userInfo = await this.telegramService.getUserInfo(targetUserId);
      
      await this.telegramService.sendMessage(chatId, 
        `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n` +
        `ID: ${userInfo.telegram_id}\n` +
        `Username: ${userInfo.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `UNI –±–∞–ª–∞–Ω—Å: ${userInfo.balance_uni || '0'}\n` +
        `TON –±–∞–ª–∞–Ω—Å: ${userInfo.balance_ton || '0'}\n` +
        `–°—Ç–∞—Ç—É—Å: ${userInfo.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(userInfo.created_at).toLocaleString('ru-RU')}`
      );
    } catch (error) {
      await this.telegramService.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  private async handleMissionsCommand(chatId: number, userId: number) {
    await this.telegramService.sendMessage(chatId, 
      'üéØ –°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π\n\n' +
      '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n' +
      '–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏—è–º–∏ –∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.'
    );
  }

  private async handleBanCommand(chatId: number, userId: number, targetUserId: string) {
    try {
      const result = await this.telegramService.banUser(targetUserId);
      
      if (result) {
        await this.telegramService.sendMessage(chatId, 
          `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`
        );
      } else {
        await this.telegramService.sendMessage(chatId, 
          `‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`
        );
      }
    } catch (error) {
      await this.telegramService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  private async handleAdminCallback(chatId: number, userId: number, data: string) {
    if (data === 'admin_stats') {
      await this.handleStatsCommand(chatId, userId);
    } else if (data === 'admin_users') {
      await this.handleUsersCommand(chatId, userId, '/users 1');
    } else if (data === 'admin_missions') {
      await this.handleMissionsCommand(chatId, userId);
    } else if (data.startsWith('users_page_')) {
      const page = parseInt(data.split('_')[2]);
      await this.handleUsersCommand(chatId, userId, `/users ${page}`);
    }
  }
}