import { logger } from '../../core/logger';
import { AdminBotService } from './service';

export class AdminBotController {
  private adminBotService: AdminBotService;

  constructor() {
    this.adminBotService = new AdminBotService();
  }

  /**
   * Handle incoming update from Telegram
   */
  async handleUpdate(update: any): Promise<void> {
    try {
      // Handle message
      if (update.message) {
        await this.handleMessage(update.message);
      }
      
      // Handle callback query
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      logger.error('[AdminBot] Error handling update', { error: error instanceof Error ? error.message : String(error) });
    }
  }

  /**
   * Handle incoming message
   */
  private async handleMessage(message: any): Promise<void> {
    const chatId = message.chat.id;
    const username = message.from?.username;
    const text = message.text || '';
    
    // Check if user is authorized admin
    const isAuthorized = await this.adminBotService.isAuthorizedAdmin(username);
    if (!isAuthorized) {
      await this.adminBotService.sendMessage(
        chatId,
        '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
      );
      return;
    }
    
    // Parse command
    const command = text.split(' ')[0];
    const args = text.split(' ').slice(1);
    
    logger.info('[AdminBot] Processing command', { command, args, username });
    
    // Handle commands
    switch (command) {
      case '/start':
      case '/admin':
        await this.handleAdminCommand(chatId);
        break;
        
      case '/stats':
        await this.handleStatsCommand(chatId);
        break;
        
      case '/users':
        await this.handleUsersCommand(chatId, args);
        break;
        
      case '/user':
        await this.handleUserCommand(chatId, args);
        break;
        
      case '/missions':
        await this.handleMissionsCommand(chatId);
        break;
        
      case '/mission_complete':
        await this.handleMissionCompleteCommand(chatId, args);
        break;
        
      case '/mission_reward':
        await this.handleMissionRewardCommand(chatId, args);
        break;
        
      case '/ban':
        await this.handleBanCommand(chatId, args);
        break;
        
      case '/withdrawals':
        await this.handleWithdrawalsCommand(chatId, args);
        break;
        
      case '/approve':
        await this.handleApproveCommand(chatId, args, username);
        break;
        
      case '/reject':
        await this.handleRejectCommand(chatId, args, username);
        break;
        
      default:
        await this.adminBotService.sendMessage(
          chatId,
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        );
    }
  }

  /**
   * Handle callback query
   */
  private async handleCallbackQuery(callbackQuery: any): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const username = callbackQuery.from?.username;
    const data = callbackQuery.data;
    
    // Check if user is authorized admin
    const isAuthorized = await this.adminBotService.isAuthorizedAdmin(username);
    if (!isAuthorized) {
      await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    logger.info('[AdminBot] Processing callback', { data, username });
    
    // Parse callback data
    const [action, ...params] = data.split(':');
    
    switch (action) {
      case 'users_page':
        const page = parseInt(params[0]) || 1;
        await this.handleUsersCommand(chatId, [page.toString()]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'ban_user':
        await this.handleBanCommand(chatId, [params[0]]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        break;
        
      case 'approve_withdrawal':
        await this.handleApproveCommand(chatId, [params[0]], username);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');
        break;
        
      case 'reject_withdrawal':
        await this.handleRejectCommand(chatId, [params[0]], username);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        break;
        
      default:
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
    }
  }

  /**
   * Handle /admin command
   */
  private async handleAdminCommand(chatId: number): Promise<void> {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
          { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users_page:1' }
        ],
        [
          { text: 'üéØ –ú–∏—Å—Å–∏–∏', callback_data: 'missions' },
          { text: 'üí∏ –í—ã–ø–ª–∞—Ç—ã', callback_data: 'withdrawals' }
        ]
      ]
    };
    
    await this.adminBotService.sendMessage(
      chatId,
      `üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å UniFarm</b>\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
      `/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
      `/user <telegram_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n` +
      `/missions - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏—è–º–∏\n` +
      `/withdrawals - –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n` +
      `/approve <id> - –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É\n` +
      `/reject <id> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É\n` +
      `/ban <telegram_id> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
      { reply_markup: keyboard }
    );
  }

  /**
   * Handle /stats command
   */
  private async handleStatsCommand(chatId: number): Promise<void> {
    try {
      const stats = await this.adminBotService.getSystemStats();
      
      await this.adminBotService.sendMessage(
        chatId,
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n` +
        `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
        `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeUsers}\n` +
        `üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${stats.usersLast24h}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `UNI: ${parseFloat(stats.totalUniBalance).toFixed(2)}\n` +
        `TON: ${parseFloat(stats.totalTonBalance).toFixed(2)}\n\n` +
        `üåæ <b>–§–∞—Ä–º–∏–Ω–≥:</b>\n` +
        `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${stats.activeFarmingSessions}\n` +
        `–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${stats.totalFarmingSessions}\n\n` +
        `üìù <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n` +
        `–í—Å–µ–≥–æ: ${stats.totalTransactions}\n` +
        `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${stats.transactionsLast24h}`
      );
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  /**
   * Handle /users command
   */
  private async handleUsersCommand(chatId: number, args: string[]): Promise<void> {
    try {
      const page = parseInt(args[0]) || 1;
      const limit = 10;
      
      const result = await this.adminBotService.getUsersList(page, limit);
      
      if (!result.users || result.users.length === 0) {
        await this.adminBotService.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
      
      let message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä. ${page}/${Math.ceil(result.total / limit)})</b>\n\n`;
      
      for (const user of result.users) {
        message += `üÜî ${user.telegram_id}\n`;
        message += `üë§ ${user.username || '–ë–µ–∑ username'}\n`;
        message += `üí∞ UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)} | TON: ${parseFloat(user.balance_ton || '0').toFixed(2)}\n`;
        message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}\n`;
        message += `${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n`;
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      
      // Navigation buttons
      const keyboard: any = {
        inline_keyboard: [[]]
      };
      
      if (page > 1) {
        keyboard.inline_keyboard[0].push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: `users_page:${page - 1}`
        });
      }
      
      if (page < Math.ceil(result.total / limit)) {
        keyboard.inline_keyboard[0].push({
          text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
          callback_data: `users_page:${page + 1}`
        });
      }
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  /**
   * Handle /user command
   */
  private async handleUserCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <telegram_id>');
      return;
    }
    
    try {
      const user = await this.adminBotService.getUserInfo(args[0]);
      
      const keyboard = {
        inline_keyboard: [
          [{ text: user.is_active ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ban_user:${user.telegram_id}` }]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId,
        `üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
        `üÜî Telegram ID: ${user.telegram_id}\n` +
        `üë§ Username: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üì± –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üîë –†–µ—Ñ. –∫–æ–¥: ${user.ref_code}\n` +
        `üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${user.referred_by || '–ù–∏–∫—Ç–æ'}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)}\n` +
        `TON: ${parseFloat(user.balance_ton || '0').toFixed(2)}\n\n` +
        `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}\n` +
        `üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_active ? new Date(user.last_active).toLocaleString() : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n` +
        `${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n` +
        `${user.is_admin ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : ''}`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  /**
   * Handle /missions command
   */
  private async handleMissionsCommand(chatId: number): Promise<void> {
    try {
      const data = await this.adminBotService.getMissionsData();
      
      let message = `üéØ <b>–ú–∏—Å—Å–∏–∏</b>\n\n`;
      message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏—Å—Å–∏–π: ${data.stats.totalCompletedMissions}\n`;
      message += `üí∞ –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${data.stats.totalRewardsClaimed}\n`;
      message += `üíé –°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥ UNI: ${parseFloat(data.stats.totalRewardsUni).toFixed(2)}\n\n`;
      message += `üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏:</b>\n\n`;
      
      for (const mission of data.activeMissions) {
        message += `${mission.title}\n`;
        message += `–ù–∞–≥—Ä–∞–¥–∞: ${mission.reward} UNI\n`;
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      
      await this.adminBotService.sendMessage(chatId, message);
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∏—Å—Å–∏—è—Ö');
    }
  }

  /**
   * Handle /mission_complete command
   */
  private async handleMissionCompleteCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mission_complete <mission_id>');
      return;
    }
    
    // This would require mission completion logic
    await this.adminBotService.sendMessage(chatId, '‚úÖ –ú–∏—Å—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è');
  }

  /**
   * Handle /mission_reward command
   */
  private async handleMissionRewardCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mission_reward <mission_id>');
      return;
    }
    
    // This would require reward distribution logic
    await this.adminBotService.sendMessage(chatId, '‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é –≤—ã–¥–∞–Ω–∞');
  }

  /**
   * Handle /ban command
   */
  private async handleBanCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <telegram_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.banUser(args[0]);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  /**
   * Handle /withdrawals command
   */
  private async handleWithdrawalsCommand(chatId: number, args: string[]): Promise<void> {
    try {
      const status = args[0]; // 'pending', 'approved', 'rejected'
      const requests = await this.adminBotService.getWithdrawalRequests(status);
      
      if (requests.length === 0) {
        await this.adminBotService.sendMessage(chatId, 'üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥');
        return;
      }
      
      let message = `üí∏ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n`;
      
      for (const request of requests) {
        message += `üÜî ID: ${request.id}\n`;
        message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${request.username || 'unknown'} (${request.telegram_id || request.user_id})\n`;
        message += `üí∞ –°—É–º–º–∞: ${request.amount_ton} TON\n`;
        message += `üëõ –ö–æ—à–µ–ª–µ–∫: ${request.ton_wallet}\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(request.created_at).toLocaleString()}\n`;
        message += `üìå –°—Ç–∞—Ç—É—Å: ${request.status}\n`;
        
        if (request.processed_at) {
          message += `‚è± –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${new Date(request.processed_at).toLocaleString()}\n`;
          message += `üëÆ –û–±—Ä–∞–±–æ—Ç–∞–ª: ${request.processed_by}\n`;
        }
        
        if (request.status === 'pending') {
          const keyboard = {
            inline_keyboard: [[
              { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_withdrawal:${request.id}` },
              { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_withdrawal:${request.id}` }
            ]]
          };
          await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
        } else {
          await this.adminBotService.sendMessage(chatId, message);
        }
        
        message = ''; // Reset for next iteration
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥');
    }
  }

  /**
   * Handle /approve command
   */
  private async handleApproveCommand(chatId: number, args: string[], adminUsername?: string): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <request_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.approveWithdrawal(args[0], adminUsername);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚úÖ –í—ã–ø–ª–∞—Ç–∞ ${args[0]} –æ–¥–æ–±—Ä–µ–Ω–∞`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  /**
   * Handle /reject command
   */
  private async handleRejectCommand(chatId: number, args: string[], adminUsername?: string): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <request_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.rejectWithdrawal(args[0], adminUsername);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚ùå –í—ã–ø–ª–∞—Ç–∞ ${args[0]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }
}