import { logger } from '../../core/logger';
import { AdminBotService } from './service';
import { InlineKeyboardButton, InlineKeyboardMarkup } from './types';

export class AdminBotController {
  private adminBotService: AdminBotService;
  private tempAddresses: string[] = []; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

  constructor() {
    this.adminBotService = new AdminBotService();
  }

  /**
   * Handle incoming update from Telegram
   */
  async handleUpdate(update: any): Promise<void> {
    try {
      logger.info('[AdminBot] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram', { 
        updateId: update.update_id,
        hasMessage: !!update.message,
        hasCallbackQuery: !!update.callback_query,
        messageText: update.message?.text,
        fromUsername: update.message?.from?.username,
        fromId: update.message?.from?.id,
        chatId: update.message?.chat?.id,
        callbackData: update.callback_query?.data
      });

      // Handle message
      if (update.message) {
        logger.info('[AdminBot] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        await this.handleMessage(update.message);
        logger.info('[AdminBot] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      }
      
      // Handle callback query
      if (update.callback_query) {
        logger.info('[AdminBot] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query', {
          data: update.callback_query.data,
          fromUsername: update.callback_query.from?.username
        });
        await this.handleCallbackQuery(update.callback_query);
        logger.info('[AdminBot] Callback query –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      }

      logger.info('[AdminBot] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–ü–ï–®–ù–û', { updateId: update.update_id });
    } catch (error) {
      logger.error('[AdminBot] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', { 
        error: error instanceof Error ? error.message : String(error),
        updateId: update.update_id,
        stack: error instanceof Error ? error.stack : undefined,
        messageText: update.message?.text,
        fromUsername: update.message?.from?.username,
        callbackData: update.callback_query?.data
      });
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å 500 –≤ webhook
    }
  }

  /**
   * Handle incoming message
   */
  private async handleMessage(message: any): Promise<void> {
    const chatId = message.chat.id;
    const username = message.from?.username;
    const text = message.text || '';
    
    // Check if user is authorized admin
    const isAuthorized = await this.adminBotService.isAuthorizedAdmin(username);
    if (!isAuthorized) {
      await this.adminBotService.sendMessage(
        chatId,
        '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
      );
      return;
    }
    
    // Parse command
    const command = text.split(' ')[0];
    const args = text.split(' ').slice(1);
    
    logger.info('[AdminBot] Processing command', { command, args, username });
    
    // Handle commands
    switch (command) {
      case '/start':
      case '/admin':
        await this.handleAdminCommand(chatId);
        break;
        
      case '/stats':
        await this.handleStatsCommand(chatId);
        break;
        
      case '/users':
        await this.handleUsersCommand(chatId, args);
        break;
        
      case '/user':
        await this.handleUserCommand(chatId, args);
        break;
        
      case '/missions':
        await this.handleMissionsCommand(chatId);
        break;
        
      case '/mission_complete':
        await this.handleMissionCompleteCommand(chatId, args);
        break;
        
      case '/mission_reward':
        await this.handleMissionRewardCommand(chatId, args);
        break;
        
      case '/ban':
        await this.handleBanCommand(chatId, args);
        break;
        
      case '/withdrawals':
        await this.handleWithdrawalsCommand(chatId, args);
        break;
        
      case '/approve':
        await this.handleApproveCommand(chatId, args, username);
        break;
        
      case '/reject':
        await this.handleRejectCommand(chatId, args, username);
        break;
        
      case '/search_user':
        await this.handleSearchUserCommand(chatId, args);
        break;
        
      case '/withdrawal_stats':
        await this.handleWithdrawalStatsCommand(chatId);
        break;
        
      case '/user_info':
        await this.handleUserInfoCommand(chatId, args);
        break;
        
      default:
        await this.adminBotService.sendMessage(
          chatId,
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        );
    }
  }

  /**
   * Handle callback query
   */
  private async handleCallbackQuery(callbackQuery: any): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const username = callbackQuery.from?.username;
    const data = callbackQuery.data;
    
    // Check if user is authorized admin
    const isAuthorized = await this.adminBotService.isAuthorizedAdmin(username);
    if (!isAuthorized) {
      await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    logger.info('[AdminBot] Processing callback', { data, username });
    
    // Parse callback data
    const [action, ...params] = data.split(':');
    
    switch (action) {
      case 'stats':
        await this.handleStatsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'missions':
        await this.handleMissionsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        

        
      case 'ban_prompt':
        await this.adminBotService.sendMessage(
          chatId,
          'üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
          '<code>/ban telegram_id</code>\n\n' +
          '–ü—Ä–∏–º–µ—Ä: <code>/ban 123456789</code>'
        );
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'refresh_admin':
        await this.handleAdminCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        break;
        
      case 'copy_ton_address':
        const tonAddress = params.join(':'); // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ –∞–¥—Ä–µ—Å–µ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏—è
        await this.adminBotService.sendMessage(
          chatId,
          `üè¶ <b>TON –∞–¥—Ä–µ—Å:</b>\n<code>${tonAddress}</code>\n\n` +
          '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>'
        );
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        break;
        
      case 'copy_all_addresses':
        if (this.tempAddresses.length > 0) {
          const addressList = this.tempAddresses.map((addr, i) => `${i + 1}. <code>${addr}</code>`).join('\n');
          await this.adminBotService.sendMessage(
            chatId,
            `üè¶ <b>–í—Å–µ TON –∞–¥—Ä–µ—Å–∞ (${this.tempAddresses.length}):</b>\n\n${addressList}\n\n` +
            '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>'
          );
          await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ê–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        } else {
          await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
        break;
        
      case 'withdrawal_stats':
        await this.handleWithdrawalStatsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'withdrawal_search_prompt':
        await this.adminBotService.sendMessage(
          chatId,
          'üîç <b>–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n' +
          '<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
          '‚Ä¢ <code>/search_user telegram_id</code> - –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
          '‚Ä¢ <code>/user_info telegram_id</code> - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n' +
          '<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n' +
          '‚Ä¢ <code>/search_user 123456789</code>\n' +
          '‚Ä¢ <code>/user_info 123456789</code>\n\n' +
          '<i>üí° Tip: –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ @username</i>',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
              ]
            }
          }
        );
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'admin_tools':
        await this.handleAdminToolsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'users_page':
        const page = parseInt(params[0]) || 1;
        await this.handleUsersCommand(chatId, [page.toString()]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'ban_user':
        await this.handleBanCommand(chatId, [params[0]]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        break;
        
      case 'approve_withdrawal':
        // –£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–î–•–û–î: –æ–¥–æ–±—Ä—è–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await this.handleApproveWithdrawal(chatId, params[0], username, callbackQuery.id);
        break;
        
      case 'reject_withdrawal':
        // –£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–î–•–û–î: –æ—Ç–∫–ª–æ–Ω—è–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await this.handleRejectWithdrawal(chatId, params[0], username, callbackQuery.id);
        break;
        

        
      case 'manual_paid':
        // –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ)
        await this.handleManualPaid(chatId, params[0], username, callbackQuery.id);
        break;
        
      case 'withdrawals':
        if (params[0] === 'refresh') {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
          const requests = await this.adminBotService.getWithdrawalRequests(undefined, 50);
          await this.showSimpleWithdrawalsList(chatId, requests);
          await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
          const filterStatus = params[0] || 'menu';
          if (filterStatus === 'menu') {
            await this.displayWithdrawalsMenu(chatId);
          } else {
            await this.handleWithdrawalsCommand(chatId, [filterStatus]);
          }
          await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        }
        break;
        
      case 'confirm_approve_withdrawal':
        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await this.handleApproveCommand(chatId, [params[0]], username);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');
        break;
        
      case 'confirm_reject_withdrawal':
        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await this.handleRejectCommand(chatId, [params[0]], username);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        break;
        
      case 'cancel_withdrawal_action':
        await this.adminBotService.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–û—Ç–º–µ–Ω–µ–Ω–æ');
        break;
        
      default:
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
    }
  }

  /**
   * Handle /admin command
   */
  private async handleAdminCommand(chatId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
      const stats = await this.adminBotService.getSystemStats();
      const withdrawalStats = await this.adminBotService.getWithdrawalStats();
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
            { text: 'üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫', callback_data: 'withdrawal_search_prompt' }
          ],
          [
            { text: 'üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data: 'withdrawals' },
            { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users_page:1' }
          ],
          [
            { text: 'üéØ –ú–∏—Å—Å–∏–∏', callback_data: 'missions' },
            { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤', callback_data: 'withdrawal_stats' }
          ],
          [
            { text: '‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', callback_data: 'admin_tools' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_admin' }
          ]
        ]
      };
      
      // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      const quickSummary = 
        `üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ 24 —á–∞—Å–∞</b>\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
        `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers} (‚ÜóÔ∏è +${stats.usersLast24h})\n` +
        `üí∞ UNI: ${parseFloat(stats.totalUniBalance).toFixed(0)} | TON: ${parseFloat(stats.totalTonBalance).toFixed(2)}\n` +
        `üí∏ –ó–∞—è–≤–∫–∏: ${withdrawalStats?.pending || 0}‚è≥ | ${withdrawalStats?.approved || 0}‚úÖ | ${withdrawalStats?.rejected || 0}‚ùå\n` +
        `üåæ –§–∞—Ä–º–∏–Ω–≥: ${stats.activeFarmingSessions} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n` +
        `üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transactionsLast24h} –∑–∞ 24—á\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `<b>üìã –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n` +
        `<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</i>`;
      
      await this.adminBotService.sendMessage(chatId, quickSummary, { reply_markup: keyboard });
    } catch (error) {
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –º–µ–Ω—é –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users_page:1' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
          ],
          [
            { text: 'üéØ –ú–∏—Å—Å–∏–∏', callback_data: 'missions' },
            { text: 'üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data: 'withdrawals' }
          ],
          [
            { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'ban_prompt' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_admin' }
          ]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId,
        `üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:\n\n` +
        `<i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!</i>`,
        { reply_markup: keyboard }
      );
    }
  }

  /**
   * Handle /stats command
   */
  private async handleStatsCommand(chatId: number): Promise<void> {
    try {
      const stats = await this.adminBotService.getSystemStats();
      
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId,
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n` +
        `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
        `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeUsers}\n` +
        `üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${stats.usersLast24h}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `UNI: ${parseFloat(stats.totalUniBalance).toFixed(2)}\n` +
        `TON: ${parseFloat(stats.totalTonBalance).toFixed(2)}\n\n` +
        `üåæ <b>–§–∞—Ä–º–∏–Ω–≥:</b>\n` +
        `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${stats.activeFarmingSessions}\n` +
        `–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${stats.totalFarmingSessions}\n\n` +
        `üìù <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n` +
        `–í—Å–µ–≥–æ: ${stats.totalTransactions}\n` +
        `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${stats.transactionsLast24h}`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  /**
   * Handle /users command
   */
  private async handleUsersCommand(chatId: number, args: string[]): Promise<void> {
    try {
      const page = parseInt(args[0]) || 1;
      const limit = 10;
      
      const result = await this.adminBotService.getUsersList(page, limit);
      
      if (!result.users || result.users.length === 0) {
        await this.adminBotService.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
      
      let message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä. ${page}/${Math.ceil(result.total / limit)})</b>\n\n`;
      
      for (const user of result.users) {
        message += `üÜî ${user.telegram_id}\n`;
        message += `üë§ ${user.username || '–ë–µ–∑ username'}\n`;
        message += `üí∞ UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)} | TON: ${parseFloat(user.balance_ton || '0').toFixed(2)}\n`;
        message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}\n`;
        message += `${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n`;
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      
      // Navigation buttons
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: []
      };
      
      const navButtons: InlineKeyboardButton[] = [];
      
      if (page > 1) {
        navButtons.push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: `users_page:${page - 1}`
        });
      }
      
      if (page < Math.ceil(result.total / limit)) {
        navButtons.push({
          text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
          callback_data: `users_page:${page + 1}`
        });
      }
      
      if (navButtons.length > 0) {
        keyboard.inline_keyboard.push(navButtons);
      }
      
      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      keyboard.inline_keyboard.push([
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }
      ]);
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  /**
   * Handle /user command
   */
  private async handleUserCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <telegram_id>');
      return;
    }
    
    try {
      const user = await this.adminBotService.getUserInfo(args[0]);
      
      const keyboard = {
        inline_keyboard: [
          [{ text: user.is_active ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ban_user:${user.telegram_id}` }]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId,
        `üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
        `üÜî Telegram ID: ${user.telegram_id}\n` +
        `üë§ Username: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üì± –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üîë –†–µ—Ñ. –∫–æ–¥: ${user.ref_code}\n` +
        `üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${user.referred_by || '–ù–∏–∫—Ç–æ'}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)}\n` +
        `TON: ${parseFloat(user.balance_ton || '0').toFixed(2)}\n\n` +
        `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}\n` +
        `${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n` +
        `${user.is_admin ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : ''}`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  /**
   * Handle /missions command
   */
  private async handleMissionsCommand(chatId: number): Promise<void> {
    try {
      const data = await this.adminBotService.getMissionsData();
      
      let message = `üéØ <b>–ú–∏—Å—Å–∏–∏</b>\n\n`;
      message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏—Å—Å–∏–π: ${data.stats.totalCompletedMissions}\n`;
      message += `üí∞ –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${data.stats.totalRewardsClaimed}\n`;
      message += `üíé –°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥ UNI: ${parseFloat(data.stats.totalRewardsUni).toFixed(2)}\n\n`;
      message += `üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏:</b>\n\n`;
      
      for (const mission of data.activeMissions) {
        message += `${mission.title}\n`;
        message += `–ù–∞–≥—Ä–∞–¥–∞: ${mission.reward} UNI\n`;
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∏—Å—Å–∏—è—Ö');
    }
  }

  /**
   * Handle /mission_complete command
   */
  private async handleMissionCompleteCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mission_complete <mission_id>');
      return;
    }
    
    // This would require mission completion logic
    await this.adminBotService.sendMessage(chatId, '‚úÖ –ú–∏—Å—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è');
  }

  /**
   * Handle /mission_reward command
   */
  private async handleMissionRewardCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mission_reward <mission_id>');
      return;
    }
    
    // This would require reward distribution logic
    await this.adminBotService.sendMessage(chatId, '‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é –≤—ã–¥–∞–Ω–∞');
  }

  /**
   * Handle /ban command
   */
  private async handleBanCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <telegram_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.banUser(args[0]);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  /**
   * Handle /withdrawals command - –ü–†–û–°–¢–û–ô –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö
   */
  private async handleWithdrawalsCommand(chatId: number, args: string[]): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
      const requests = await this.adminBotService.getWithdrawalRequests(undefined, 50);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
      await this.showSimpleWithdrawalsList(chatId, requests);
      
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥');
    }
  }

  /**
   * –ü–†–û–°–¢–û–ô –°–ü–ò–°–û–ö –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  private async showSimpleWithdrawalsList(chatId: number, requests: any[]): Promise<void> {
    if (requests.length === 0) {
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId, 
        `üì≠ <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥</b>`, 
        { reply_markup: keyboard }
      );
      return;
    }
    
    // –ü–†–û–°–¢–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê: pending –ø–µ—Ä–≤—ã–º–∏, –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ
    const sortedRequests = requests.sort((a, b) => {
      if (a.status === 'pending' && b.status !== 'pending') return -1;
      if (a.status !== 'pending' && b.status === 'pending') return 1;
      return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
    });
    
    let message = `üí∏ <b>–ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î</b>\n`;
    message += `<i>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${requests.length}</i>\n\n`;
    
    // –ü–†–û–°–¢–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º 20)
    for (let i = 0; i < Math.min(sortedRequests.length, 20); i++) {
      const request = sortedRequests[i];
      const num = i + 1;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      const statusEmoji = this.getStatusEmoji(request.status);
      const statusText = this.getSimpleStatusText(request.status);
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const userDisplay = request.username ? `@${request.username}` : 
                         request.first_name || `ID${request.telegram_id}`;
      
      // –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏
      const requestDate = new Date(request.created_at).toLocaleDateString('ru-RU', { 
        day: '2-digit', 
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      message += `<b>${num}. ${statusEmoji} ${parseFloat(request.amount).toFixed(4)} TON</b>\n`;
      message += `üë§ ${userDisplay}\n`;
      message += `üìÖ ${requestDate} ‚Ä¢ ${statusText}\n`;
      
      // –ö–æ—à–µ–ª–µ–∫ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
      if (request.wallet_address) {
        const shortWallet = `${request.wallet_address.slice(0, 6)}...${request.wallet_address.slice(-4)}`;
        message += `üè¶ <code>${shortWallet}</code>\n`;
      }
      
      message += `\n`;
    }
    
    // –ü–†–û–°–¢–´–ï –ö–ù–û–ü–ö–ò: —Ç–æ–ª—å–∫–æ –¥–ª—è pending –∑–∞—è–≤–æ–∫
    const keyboard: InlineKeyboardMarkup = {
      inline_keyboard: []
    };
    
    const pendingRequests = sortedRequests.filter(r => r.status === 'pending').slice(0, 10);
    for (const request of pendingRequests) {
      const shortId = request.id.slice(-6);
      keyboard.inline_keyboard.push([
        {
          text: `‚úÖ –í—ã–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∞–Ω–∞ ${shortId}`,
          callback_data: `manual_paid:${request.id}`
        }
      ]);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.inline_keyboard.push([
      { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'withdrawals:refresh' }
    ]);
    keyboard.inline_keyboard.push([
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }
    ]);
    
    await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
  }



  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private getStatusText(status: string): string {
    switch (status) {
      case 'pending': return '–æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏';
      case 'approved': return '–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö';
      case 'rejected': return '–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö';
      case 'all': return '–≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤';
      default: return '';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'pending': return 'üîÑ';
      case 'approved': return '‚úÖ';
      case 'rejected': return '‚ùå';
      default: return '‚ùì';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
   */
  private getSimpleStatusText(status: string): string {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã';
      case 'approved': return '–í—ã–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∞–Ω–∞';
      case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
   */
  private async handleApproveCommand(chatId: number, args: string[], adminUsername?: string): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <request_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.approveWithdrawal(args[0], adminUsername || 'admin');
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ ${args[0]} –æ–¥–æ–±—Ä–µ–Ω–∞`);
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
        await this.handleWithdrawalsCommand(chatId, ['pending']);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  private async handleRejectCommand(chatId: number, args: string[], adminUsername?: string): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <request_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.rejectWithdrawal(args[0], adminUsername || 'admin');
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚ùå –ó–∞—è–≤–∫–∞ ${args[0]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫  
        await this.handleWithdrawalsCommand(chatId, ['pending']);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  private async handleWithdrawalStatsCommand(chatId: number): Promise<void> {
    try {
      const stats = await this.adminBotService.getWithdrawalStats();
      
      if (!stats) {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return;
      }
      
      const message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤</b>\n\n` +
        `üîÑ –û–∂–∏–¥–∞—é—Ç: <b>${stats.pending || 0}</b>\n` +
        `‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: <b>${stats.approved || 0}</b>\n` +
        `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>${stats.rejected || 0}</b>\n` +
        `üìã –í—Å–µ–≥–æ: <b>${stats.total || 0}</b>\n\n` +
        `üí∞ <b>–°—É–º–º—ã:</b>\n` +
        `‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${(stats.pendingAmount || 0).toFixed(4)} TON\n` +
        `‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: ${(stats.approvedAmount || 0).toFixed(4)} TON\n` +
        `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${(stats.totalAmount || 0).toFixed(4)} TON`;
      
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí∏ –ö –∑–∞—è–≤–∫–∞–º', callback_data: 'withdrawals:menu' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤');
    }
  }

  private async handleAdminToolsCommand(chatId: number): Promise<void> {
    const message = `üõ†Ô∏è <b>–ê–¥–º–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</b>\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n` +
      `‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏—è–º–∏`;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users_page:1' },
          { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'ban_prompt' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
          { text: 'üéØ –ú–∏—Å—Å–∏–∏', callback_data: 'missions' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
      ]
    };
    
    await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
  }

  private async handleSearchUserCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search_user <telegram_id>');
      return;
    }
    
    try {
      const requests = await this.adminBotService.getWithdrawalRequests();
      const userRequests = requests.filter(r => r.telegram_id?.toString() === args[0]);
      
      if (userRequests.length === 0) {
        await this.adminBotService.sendMessage(chatId, `üì≠ –ó–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return;
      }
      
      let message = `üîç <b>–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${args[0]}</b>\n\n`;
      
      for (const request of userRequests) {
        message += `üí∞ ${parseFloat(request.amount).toFixed(4)} TON\n`;
        message += `üìÖ ${new Date(request.created_at).toLocaleDateString('ru-RU')}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${request.status}\n`;
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      }
      
      await this.adminBotService.sendMessage(chatId, message);
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  private async handleUserInfoCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info <telegram_id>');
      return;
    }
    
    try {
      const telegramId = args[0];
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userInfo = await this.adminBotService.getUserInfo(telegramId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userWithdrawals = await this.adminBotService.getWithdrawalRequests();
      const userRequests = userWithdrawals.filter(r => r.telegram_id?.toString() === telegramId);
      
      const totalWithdrawals = userRequests.length;
      const totalWithdrawalAmount = userRequests.reduce((sum, r) => sum + parseFloat(r.amount || '0'), 0);
      
      const message = 
        `üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
        `üÜî <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n` +
        `‚Ä¢ Telegram ID: <code>${userInfo.telegram_id}</code>\n` +
        `‚Ä¢ Username: ${userInfo.username ? `@${userInfo.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `‚Ä¢ –ò–º—è: ${userInfo.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${userInfo.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `‚Ä¢ UNI: <b>${parseFloat(userInfo.balance_uni || '0').toFixed(2)}</b>\n` +
        `‚Ä¢ TON: <b>${parseFloat(userInfo.balance_ton || '0').toFixed(6)}</b>\n\n` +
        `üåæ <b>–§–∞—Ä–º–∏–Ω–≥:</b>\n` +
        `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${userInfo.uni_farming_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${parseFloat(userInfo.uni_deposit_amount || '0').toFixed(2)} UNI\n\n` +
        `üí∏ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${totalWithdrawals}\n` +
        `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${totalWithdrawalAmount.toFixed(4)} TON\n\n` +
        `üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n` +
        `‚Ä¢ –ö–æ–¥: <code>${userInfo.ref_code || '–ù–µ —Å–æ–∑–¥–∞–Ω'}</code>\n` +
        `‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${userInfo.referred_by ? `User ${userInfo.referred_by}` : '–ù–µ—Ç'}\n\n` +
        `üìÖ <b>–î–∞—Ç—ã:</b>\n` +
        `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(userInfo.created_at).toLocaleString('ru-RU')}\n` +
        `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${userInfo.last_active ? new Date(userInfo.last_active).toLocaleString('ru-RU') : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n\n` +
        `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${userInfo.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí∏ –ó–∞—è–≤–∫–∏', callback_data: `user_withdrawals:${telegramId}` },
            { text: 'üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', callback_data: `user_transactions:${telegramId}` }
          ],
          [
            { text: userInfo.is_active ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 
              callback_data: `toggle_user_status:${telegramId}` }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `user_info_refresh:${telegramId}` },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }
          ]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }
  }

  /**
   * –£–ü–†–û–©–ï–ù–ù–´–ï –ú–ï–¢–û–î–´: –û–¥–æ–±—Ä–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  private async handleApproveWithdrawal(chatId: number, requestId: string, adminUsername?: string, callbackQueryId?: string): Promise<void> {
    try {
      const success = await this.adminBotService.approveWithdrawal(requestId, adminUsername || 'admin');
      
      if (success) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ pending –∑–∞—è–≤–æ–∫
        await this.handleWithdrawalsCommand(chatId, ['pending']);
        
        if (callbackQueryId) {
          await this.adminBotService.answerCallbackQuery(callbackQueryId, `‚úÖ –ó–∞—è–≤–∫–∞ ${requestId.slice(-6)} –æ–¥–æ–±—Ä–µ–Ω–∞`);
        }
      } else {
        if (callbackQueryId) {
          await this.adminBotService.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è');
        }
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      if (callbackQueryId) {
        await this.adminBotService.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞');
      }
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
  }

  private async handleRejectWithdrawal(chatId: number, requestId: string, adminUsername?: string, callbackQueryId?: string): Promise<void> {
    try {
      const success = await this.adminBotService.rejectWithdrawal(requestId, adminUsername || 'admin');
      
      if (success) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ pending –∑–∞—è–≤–æ–∫
        await this.handleWithdrawalsCommand(chatId, ['pending']);
        
        if (callbackQueryId) {
          await this.adminBotService.answerCallbackQuery(callbackQueryId, `‚ùå –ó–∞—è–≤–∫–∞ ${requestId.slice(-6)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
        }
      } else {
        if (callbackQueryId) {
          await this.adminBotService.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
        }
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      if (callbackQueryId) {
        await this.adminBotService.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞');
      }
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
  }

  /**
   * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ)
   */
  private async handleManualPaid(chatId: number, requestId: string, adminUsername?: string, callbackQueryId?: string): Promise<void> {
    try {
      // –í–ê–ñ–ù–û: –¢–æ–ª—å–∫–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ, –ù–ï —Ç—Ä–æ–≥–∞–µ–º –º–µ—Ö–∞–Ω–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const success = await this.adminBotService.markAsManuallyPaid(requestId, adminUsername || 'admin');
      
      if (success) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await this.showSimpleWithdrawalsList(chatId, await this.adminBotService.getWithdrawalRequests(undefined, 50));
        
        if (callbackQueryId) {
          await this.adminBotService.answerCallbackQuery(callbackQueryId, `‚úÖ –í—ã–ø–ª–∞—Ç–∞ ${requestId.slice(-6)} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–Ω–∞—è`);
        }
      } else {
        if (callbackQueryId) {
          await this.adminBotService.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–ª–∞—Ç—ã');
        }
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      if (callbackQueryId) {
        await this.adminBotService.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞');
      }
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
  }


}
