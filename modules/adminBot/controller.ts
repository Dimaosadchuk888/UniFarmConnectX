import { logger } from '../../core/logger';
import { AdminBotService } from './service';
import { InlineKeyboardButton, InlineKeyboardMarkup } from './types';

export class AdminBotController {
  private adminBotService: AdminBotService;
  private tempAddresses: string[] = []; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

  constructor() {
    this.adminBotService = new AdminBotService();
  }

  /**
   * Handle incoming update from Telegram
   */
  async handleUpdate(update: any): Promise<void> {
    try {
      // Handle message
      if (update.message) {
        await this.handleMessage(update.message);
      }
      
      // Handle callback query
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      logger.error('[AdminBot] Error handling update', { error: error instanceof Error ? error.message : String(error) });
    }
  }

  /**
   * Handle incoming message
   */
  private async handleMessage(message: any): Promise<void> {
    const chatId = message.chat.id;
    const username = message.from?.username;
    const text = message.text || '';
    
    // Check if user is authorized admin
    const isAuthorized = await this.adminBotService.isAuthorizedAdmin(username);
    if (!isAuthorized) {
      await this.adminBotService.sendMessage(
        chatId,
        '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
      );
      return;
    }
    
    // Parse command
    const command = text.split(' ')[0];
    const args = text.split(' ').slice(1);
    
    logger.info('[AdminBot] Processing command', { command, args, username });
    
    // Handle commands
    switch (command) {
      case '/start':
      case '/admin':
        await this.handleAdminCommand(chatId);
        break;
        
      case '/stats':
        await this.handleStatsCommand(chatId);
        break;
        
      case '/users':
        await this.handleUsersCommand(chatId, args);
        break;
        
      case '/user':
        await this.handleUserCommand(chatId, args);
        break;
        
      case '/missions':
        await this.handleMissionsCommand(chatId);
        break;
        
      case '/mission_complete':
        await this.handleMissionCompleteCommand(chatId, args);
        break;
        
      case '/mission_reward':
        await this.handleMissionRewardCommand(chatId, args);
        break;
        
      case '/ban':
        await this.handleBanCommand(chatId, args);
        break;
        
      case '/withdrawals':
        await this.handleWithdrawalsCommand(chatId, args);
        break;
        
      case '/approve':
        await this.handleApproveCommand(chatId, args, username);
        break;
        
      case '/reject':
        await this.handleRejectCommand(chatId, args, username);
        break;
        
      case '/search_user':
        await this.handleSearchUserCommand(chatId, args);
        break;
        
      case '/withdrawal_stats':
        await this.handleWithdrawalStatsCommand(chatId);
        break;
        
      default:
        await this.adminBotService.sendMessage(
          chatId,
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        );
    }
  }

  /**
   * Handle callback query
   */
  private async handleCallbackQuery(callbackQuery: any): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const username = callbackQuery.from?.username;
    const data = callbackQuery.data;
    
    // Check if user is authorized admin
    const isAuthorized = await this.adminBotService.isAuthorizedAdmin(username);
    if (!isAuthorized) {
      await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    logger.info('[AdminBot] Processing callback', { data, username });
    
    // Parse callback data
    const [action, ...params] = data.split(':');
    
    switch (action) {
      case 'stats':
        await this.handleStatsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'missions':
        await this.handleMissionsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'withdrawals':
        const filterStatus = params[0] || 'all';
        await this.handleWithdrawalsCommand(chatId, [filterStatus]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'ban_prompt':
        await this.adminBotService.sendMessage(
          chatId,
          'üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
          '<code>/ban telegram_id</code>\n\n' +
          '–ü—Ä–∏–º–µ—Ä: <code>/ban 123456789</code>'
        );
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'refresh_admin':
        await this.handleAdminCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        break;
        
      case 'copy_ton_address':
        const tonAddress = params.join(':'); // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ –∞–¥—Ä–µ—Å–µ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏—è
        await this.adminBotService.sendMessage(
          chatId,
          `üè¶ <b>TON –∞–¥—Ä–µ—Å:</b>\n<code>${tonAddress}</code>\n\n` +
          '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>'
        );
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        break;
        
      case 'copy_all_addresses':
        if (this.tempAddresses.length > 0) {
          const addressList = this.tempAddresses.map((addr, i) => `${i + 1}. <code>${addr}</code>`).join('\n');
          await this.adminBotService.sendMessage(
            chatId,
            `üè¶ <b>–í—Å–µ TON –∞–¥—Ä–µ—Å–∞ (${this.tempAddresses.length}):</b>\n\n${addressList}\n\n` +
            '<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>'
          );
          await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ê–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        } else {
          await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
        break;
        
      case 'withdrawal_stats':
        await this.handleWithdrawalStatsCommand(chatId);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'withdrawal_search_prompt':
        await this.adminBotService.sendMessage(
          chatId,
          'üîç <b>–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
          '<code>/search_user telegram_id</code>\n\n' +
          '–ü—Ä–∏–º–µ—Ä: <code>/search_user 123456789</code>'
        );
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'users_page':
        const page = parseInt(params[0]) || 1;
        await this.handleUsersCommand(chatId, [page.toString()]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'ban_user':
        await this.handleBanCommand(chatId, [params[0]]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        break;
        
      case 'approve_withdrawal':
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await this.showApprovalConfirmation(chatId, params[0]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'reject_withdrawal':
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await this.showRejectionConfirmation(chatId, params[0]);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
        break;
        
      case 'confirm_approve_withdrawal':
        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await this.handleApproveCommand(chatId, [params[0]], username);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');
        break;
        
      case 'confirm_reject_withdrawal':
        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await this.handleRejectCommand(chatId, [params[0]], username);
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        break;
        
      case 'cancel_withdrawal_action':
        await this.adminBotService.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        await this.adminBotService.answerCallbackQuery(callbackQuery.id, '–û—Ç–º–µ–Ω–µ–Ω–æ');
        break;
        
      default:
        await this.adminBotService.answerCallbackQuery(callbackQuery.id);
    }
  }

  /**
   * Handle /admin command
   */
  private async handleAdminCommand(chatId: number): Promise<void> {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users_page:1' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
        ],
        [
          { text: 'üéØ –ú–∏—Å—Å–∏–∏', callback_data: 'missions' },
          { text: 'üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data: 'withdrawals' }
        ],
        [
          { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'ban_prompt' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_admin' }
        ]
      ]
    };
    
    await this.adminBotService.sendMessage(
      chatId,
      `üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:\n\n` +
      `<i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!</i>`,
      { reply_markup: keyboard }
    );
  }

  /**
   * Handle /stats command
   */
  private async handleStatsCommand(chatId: number): Promise<void> {
    try {
      const stats = await this.adminBotService.getSystemStats();
      
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId,
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n` +
        `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n` +
        `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeUsers}\n` +
        `üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${stats.usersLast24h}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `UNI: ${parseFloat(stats.totalUniBalance).toFixed(2)}\n` +
        `TON: ${parseFloat(stats.totalTonBalance).toFixed(2)}\n\n` +
        `üåæ <b>–§–∞—Ä–º–∏–Ω–≥:</b>\n` +
        `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${stats.activeFarmingSessions}\n` +
        `–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${stats.totalFarmingSessions}\n\n` +
        `üìù <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n` +
        `–í—Å–µ–≥–æ: ${stats.totalTransactions}\n` +
        `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: ${stats.transactionsLast24h}`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  /**
   * Handle /users command
   */
  private async handleUsersCommand(chatId: number, args: string[]): Promise<void> {
    try {
      const page = parseInt(args[0]) || 1;
      const limit = 10;
      
      const result = await this.adminBotService.getUsersList(page, limit);
      
      if (!result.users || result.users.length === 0) {
        await this.adminBotService.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
      
      let message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä. ${page}/${Math.ceil(result.total / limit)})</b>\n\n`;
      
      for (const user of result.users) {
        message += `üÜî ${user.telegram_id}\n`;
        message += `üë§ ${user.username || '–ë–µ–∑ username'}\n`;
        message += `üí∞ UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)} | TON: ${parseFloat(user.balance_ton || '0').toFixed(2)}\n`;
        message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}\n`;
        message += `${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n`;
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      
      // Navigation buttons
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: []
      };
      
      const navButtons: InlineKeyboardButton[] = [];
      
      if (page > 1) {
        navButtons.push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: `users_page:${page - 1}`
        });
      }
      
      if (page < Math.ceil(result.total / limit)) {
        navButtons.push({
          text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
          callback_data: `users_page:${page + 1}`
        });
      }
      
      if (navButtons.length > 0) {
        keyboard.inline_keyboard.push(navButtons);
      }
      
      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      keyboard.inline_keyboard.push([
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }
      ]);
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  /**
   * Handle /user command
   */
  private async handleUserCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <telegram_id>');
      return;
    }
    
    try {
      const user = await this.adminBotService.getUserInfo(args[0]);
      
      const keyboard = {
        inline_keyboard: [
          [{ text: user.is_active ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ban_user:${user.telegram_id}` }]
        ]
      };
      
      await this.adminBotService.sendMessage(
        chatId,
        `üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
        `üÜî Telegram ID: ${user.telegram_id}\n` +
        `üë§ Username: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üì± –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üîë –†–µ—Ñ. –∫–æ–¥: ${user.ref_code}\n` +
        `üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${user.referred_by || '–ù–∏–∫—Ç–æ'}\n\n` +
        `üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `UNI: ${parseFloat(user.balance_uni || '0').toFixed(2)}\n` +
        `TON: ${parseFloat(user.balance_ton || '0').toFixed(2)}\n\n` +
        `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString()}\n` +
        `${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n` +
        `${user.is_admin ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : ''}`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  /**
   * Handle /missions command
   */
  private async handleMissionsCommand(chatId: number): Promise<void> {
    try {
      const data = await this.adminBotService.getMissionsData();
      
      let message = `üéØ <b>–ú–∏—Å—Å–∏–∏</b>\n\n`;
      message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏—Å—Å–∏–π: ${data.stats.totalCompletedMissions}\n`;
      message += `üí∞ –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${data.stats.totalRewardsClaimed}\n`;
      message += `üíé –°—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥ UNI: ${parseFloat(data.stats.totalRewardsUni).toFixed(2)}\n\n`;
      message += `üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏:</b>\n\n`;
      
      for (const mission of data.activeMissions) {
        message += `${mission.title}\n`;
        message += `–ù–∞–≥—Ä–∞–¥–∞: ${mission.reward} UNI\n`;
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∏—Å—Å–∏—è—Ö');
    }
  }

  /**
   * Handle /mission_complete command
   */
  private async handleMissionCompleteCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mission_complete <mission_id>');
      return;
    }
    
    // This would require mission completion logic
    await this.adminBotService.sendMessage(chatId, '‚úÖ –ú–∏—Å—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è');
  }

  /**
   * Handle /mission_reward command
   */
  private async handleMissionRewardCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mission_reward <mission_id>');
      return;
    }
    
    // This would require reward distribution logic
    await this.adminBotService.sendMessage(chatId, '‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∏—Å—Å–∏—é –≤—ã–¥–∞–Ω–∞');
  }

  /**
   * Handle /ban command
   */
  private async handleBanCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <telegram_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.banUser(args[0]);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  /**
   * Handle /withdrawals command with improved UX
   */
  private async handleWithdrawalsCommand(chatId: number, args: string[]): Promise<void> {
    try {
      const status = args[0]; // 'pending', 'approved', 'rejected', 'all'
      const limit = 50; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 50 –∑–∞—è–≤–æ–∫
      
      const requests = await this.adminBotService.getWithdrawalRequests(status === 'all' ? undefined : status, limit);
      
      if (requests.length === 0) {
        const statusText = status ? `—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}"` : '';
        const keyboard: InlineKeyboardMarkup = {
          inline_keyboard: [
            [
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'withdrawal_stats' },
              { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'withdrawal_search_prompt' }
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
          ]
        };
        
        await this.adminBotService.sendMessage(
          chatId, 
          `üì≠ <b>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ ${statusText}</b>`, 
          { reply_markup: keyboard }
        );
        return;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      let message = `üí∏ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>`;
      if (status && status !== 'all') {
        const statusEmoji = status === 'pending' ? '‚è≥' : status === 'approved' ? '‚úÖ' : '‚ùå';
        message += ` ${statusEmoji} ${status.toUpperCase()}`;
      }
      message += `\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ: ${requests.length} ${requests.length >= limit ? '(–ª–∏–º–∏—Ç)' : ''}</i>\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      const allAddresses = requests.map(r => r.wallet_address).filter(Boolean);
      const uniqueAddresses = [...new Set(allAddresses)];
      
      for (let i = 0; i < requests.length; i++) {
        const request = requests[i];
        const num = i + 1;
        
        // –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
        const statusEmoji = request.status === 'pending' ? '‚è≥' : 
                           request.status === 'approved' ? '‚úÖ' : '‚ùå';
        
        message += `<b>${num}. ${statusEmoji} ID: ${request.id}</b>\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userDisplay = request.username ? `@${request.username}` : 
                           request.first_name || `User ${request.telegram_id}`;
        message += `üë§ ${userDisplay} <code>(${request.telegram_id})</code>\n`;
        
        // –°—É–º–º–∞ –∏ –∫–æ—à–µ–ª–µ–∫
        message += `üí∞ <b>${parseFloat(request.amount).toFixed(4)} TON</b>\n`;
        message += `üè¶ <code>${request.wallet_address}</code>\n`;
        
        // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        const createDate = new Date(request.created_at).toLocaleString('ru-RU');
        message += `üìÖ ${createDate}\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if (request.processed_at) {
          const processDate = new Date(request.processed_at).toLocaleString('ru-RU');
          message += `‚è± –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processDate}\n`;
          message += `üëÆ ${request.processed_by || 'admin'}\n`;
        }
        
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: []
      };
      
      // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      if (!status || status === 'all') {
        keyboard.inline_keyboard.push([
          { text: '‚è≥ Pending', callback_data: 'withdrawals:pending' },
          { text: '‚úÖ Approved', callback_data: 'withdrawals:approved' },
          { text: '‚ùå Rejected', callback_data: 'withdrawals:rejected' }
        ]);
      } else {
        keyboard.inline_keyboard.push([
          { text: 'üìã –í—Å–µ –∑–∞—è–≤–∫–∏', callback_data: 'withdrawals:all' }
        ]);
      }
      
      // –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      if (uniqueAddresses.length > 0) {
        keyboard.inline_keyboard.push([
          { text: `üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ (${uniqueAddresses.length})`, callback_data: 'copy_all_addresses' }
        ]);
      }
      
      // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è pending –∑–∞—è–≤–æ–∫
      const pendingRequests = requests.filter(r => r.status === 'pending');
      if (pendingRequests.length > 0) {
        keyboard.inline_keyboard.push([
          { text: `‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ (${pendingRequests.length})`, callback_data: 'approve_all_pending' },
          { text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ (${pendingRequests.length})`, callback_data: 'reject_all_pending' }
        ]);
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      keyboard.inline_keyboard.push([
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'withdrawal_stats' },
        { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'withdrawal_search_prompt' }
      ]);
      
      keyboard.inline_keyboard.push([
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `withdrawals:${status || 'all'}` },
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }
      ]);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      this.tempAddresses = uniqueAddresses;
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
      
    } catch (error) {
      logger.error('[AdminBot] Error in handleWithdrawalsCommand', { error: error instanceof Error ? error.message : String(error) });
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥');
    }
  }

  /**
   * Show approval confirmation dialog
   */
  private async showApprovalConfirmation(chatId: number, requestId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      const withdrawal = await this.adminBotService.getWithdrawalById(requestId);
      
      if (!withdrawal) {
        await this.adminBotService.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      const message = 
        '‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è</b>\n\n' +
        `üÜî ID –∑–∞—è–≤–∫–∏: ${withdrawal.id}\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.username ? `@${withdrawal.username}` : withdrawal.first_name || `User ${withdrawal.telegram_id}`}\n` +
        `üí∞ –°—É–º–º–∞: <b>${parseFloat(withdrawal.amount).toFixed(4)} TON</b>\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(withdrawal.created_at).toLocaleString('ru-RU')}\n` +
        `üè¶ –ö–æ—à–µ–ª–µ–∫: <code>${withdrawal.wallet_address}</code>\n\n` +
        '‚ùó <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –û–î–û–ë–†–ò–¢–¨ —ç—Ç—É –≤—ã–ø–ª–∞—Ç—É?</b>';
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, –æ–¥–æ–±—Ä–∏—Ç—å', callback_data: `confirm_approve_withdrawal:${requestId}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_withdrawal_action' }
          ]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ');
    }
  }

  /**
   * Show rejection confirmation dialog
   */
  private async showRejectionConfirmation(chatId: number, requestId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      const withdrawal = await this.adminBotService.getWithdrawalById(requestId);
      
      if (!withdrawal) {
        await this.adminBotService.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      const message = 
        '‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</b>\n\n' +
        `üÜî ID –∑–∞—è–≤–∫–∏: ${withdrawal.id}\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.username ? `@${withdrawal.username}` : withdrawal.first_name || `User ${withdrawal.telegram_id}`}\n` +
        `üí∞ –°—É–º–º–∞: <b>${parseFloat(withdrawal.amount).toFixed(4)} TON</b>\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(withdrawal.created_at).toLocaleString('ru-RU')}\n` +
        `üè¶ –ö–æ—à–µ–ª–µ–∫: <code>${withdrawal.wallet_address}</code>\n\n` +
        '‚ùó <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –û–¢–ö–õ–û–ù–ò–¢–¨ —ç—Ç—É –≤—ã–ø–ª–∞—Ç—É?</b>\n' +
        'üí° <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>';
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚ùå –î–∞, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `confirm_reject_withdrawal:${requestId}` },
            { text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_withdrawal_action' }
          ]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ');
    }
  }

  /**
   * Handle /approve command
   */
  private async handleApproveCommand(chatId: number, args: string[], adminUsername?: string): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <request_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.approveWithdrawal(args[0], adminUsername);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚úÖ –í—ã–ø–ª–∞—Ç–∞ ${args[0]} –æ–¥–æ–±—Ä–µ–Ω–∞`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  /**
   * Handle /reject command
   */
  private async handleRejectCommand(chatId: number, args: string[], adminUsername?: string): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <request_id>');
      return;
    }
    
    try {
      const success = await this.adminBotService.rejectWithdrawal(args[0], adminUsername);
      
      if (success) {
        await this.adminBotService.sendMessage(chatId, `‚ùå –í—ã–ø–ª–∞—Ç–∞ ${args[0]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
      } else {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã');
      }
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  /**
   * Handle /search_user command
   */
  private async handleSearchUserCommand(chatId: number, args: string[]): Promise<void> {
    if (!args[0]) {
      await this.adminBotService.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search_user <telegram_id>');
      return;
    }
    
    try {
      const telegramId = args[0];
      const requests = await this.adminBotService.searchWithdrawalsByUser(telegramId);
      
      if (requests.length === 0) {
        await this.adminBotService.sendMessage(
          chatId,
          `üîç <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>${telegramId}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
        );
        return;
      }
      
      let message = `üîç <b>–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}</b>\n`;
      const userDisplay = requests[0].username ? `@${requests[0].username}` : 
                         requests[0].first_name || `User ${requests[0].telegram_id}`;
      message += `üë§ ${userDisplay}\n`;
      message += `üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${requests.length}\n\n`;
      
      for (let i = 0; i < requests.length; i++) {
        const request = requests[i];
        const statusEmoji = request.status === 'pending' ? '‚è≥' : 
                           request.status === 'approved' ? '‚úÖ' : '‚ùå';
        
        message += `${i + 1}. ${statusEmoji} <b>${parseFloat(request.amount).toFixed(4)} TON</b>\n`;
        message += `üìÖ ${new Date(request.created_at).toLocaleString('ru-RU')}\n`;
        message += `üè¶ <code>${request.wallet_address}</code>\n`;
        
        if (request.processed_at) {
          message += `‚è± –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${new Date(request.processed_at).toLocaleString('ru-RU')}\n`;
        }
        
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      }
      
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: 'üîÑ –í—Å–µ –∑–∞—è–≤–∫–∏', callback_data: 'withdrawals:all' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  /**
   * Handle withdrawal statistics command
   */
  private async handleWithdrawalStatsCommand(chatId: number): Promise<void> {
    try {
      const stats = await this.adminBotService.getWithdrawalStats();
      
      if (!stats) {
        await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return;
      }
      
      const message = 
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n` +
        `üìã <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${stats.total}\n` +
        `‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${stats.pending}\n` +
        `‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: ${stats.approved}\n` +
        `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejected}\n\n` +
        `üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.totalAmount.toFixed(4)} TON\n` +
        `‚Ä¢ –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayRequests}\n\n` +
        `üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:</b>\n` +
        `‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: ${stats.total > 0 ? ((stats.approved / stats.total) * 100).toFixed(1) : 0}%\n` +
        `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.total > 0 ? ((stats.rejected / stats.total) * 100).toFixed(1) : 0}%\n` +
        `‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${stats.total > 0 ? ((stats.pending / stats.total) * 100).toFixed(1) : 0}%`;
      
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [
            { text: '‚è≥ Pending', callback_data: 'withdrawals:pending' },
            { text: '‚úÖ Approved', callback_data: 'withdrawals:approved' }
          ],
          [
            { text: '‚ùå Rejected', callback_data: 'withdrawals:rejected' },
            { text: 'üìã –í—Å–µ –∑–∞—è–≤–∫–∏', callback_data: 'withdrawals:all' }
          ],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'refresh_admin' }]
        ]
      };
      
      await this.adminBotService.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
      await this.adminBotService.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }
}