import type { Request, Response, NextFunction } from 'express';
import { BaseController } from '../../core/BaseController';
import { AuthService } from './service';
import { logger } from '../../core/logger';

export class AuthController extends BaseController {
  private authService: AuthService;

  constructor() {
    super();
    this.authService = new AuthService();
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
   */
  async authenticateTelegram(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º initData –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const initDataFromHeaders = req.headers['x-telegram-init-data'] as string;
      const { initData: initDataFromBody, refBy, ref_by, direct_registration, telegram_id } = req.body;
      
      // –ú–∞–ø–ø–∏–Ω–≥ refBy -> ref_by –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
      const referralCode = refBy || ref_by;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (direct_registration && telegram_id) {
        console.log('üîç [AuthController] –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ:', {
          telegram_id,
          username: req.body.username,
          first_name: req.body.first_name,
          refBy: req.body.refBy,
          ref_by: req.body.ref_by,
          referralCode: referralCode,
          has_ref: !!referralCode
        });
        
        logger.info('[AuthController] –ü—Ä—è–º–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { 
          telegram_id,
          has_ref: !!referralCode
        });
        
        const authParams = {
          telegram_id: parseInt(telegram_id.toString()),
          username: req.body.username || '',
          first_name: req.body.first_name || '',
          ref_by: referralCode
        };
        
        console.log('üîç [AuthController] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è registerDirectFromTelegramUser:', authParams);
        
        const result = await this.authService.registerDirectFromTelegramUser(authParams);
        
        if (result.success) {
          this.sendSuccess(res, {
            user: result.user,
            token: result.token,
            isNewUser: result.isNewUser
          });
        } else {
          this.sendError(res, result.error || 'Direct authentication failed', 400);
        }
        return;
      }
      
      const initData = initDataFromHeaders || initDataFromBody;
      
      if (!initData) {
        this.sendError(res, 'InitData is required in headers or body', 400);
        return;
      }
      
      logger.info('[AuthController] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram', { 
        has_ref: !!referralCode,
        initData_source: initDataFromHeaders ? 'headers' : 'body',
        initData_length: initData.length
      });
      console.log('‚úÖ /api/v2/auth/telegram called with initData length:', initData.length);
      
      const result = await this.authService.authenticateFromTelegram(initData, { ref_by: referralCode });
      
      if (result.success) {
        console.log('‚úÖ Authentication successful, returning token and user data');
        this.sendSuccess(res, {
          user: result.user,
          token: result.token
        });
      } else {
        console.log('‚ùå Authentication failed:', result.error);
        this.sendError(res, result.error || 'Authentication failed', 401);
      }
    }, '–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
   */
  async registerTelegram(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º initData –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const initDataFromHeaders = req.headers['x-telegram-init-data'] as string;
      const { 
        initData: initDataFromBody, 
        ref_by, 
        refBy,
        direct_registration,
        telegram_id,
        username,
        first_name,
        last_name,
        language_code
      } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä—è–º—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (direct_registration && telegram_id) {
        logger.info('[AuthController] –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { 
          telegram_id,
          username,
          has_ref: !!ref_by
        });
        
        const result = await this.authService.registerDirectFromTelegramUser({
          telegram_id: parseInt(telegram_id.toString()),
          username: username || '',
          first_name: first_name || '',
          ref_by: refBy || ref_by
        });
        
        if (result.success) {
          this.sendSuccess(res, {
            user: result.user,
            token: result.token,
            isNewUser: result.isNewUser
          });
        } else {
          this.sendError(res, result.error || 'Direct registration failed', 400);
        }
        return;
      }
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ initData
      const initData = initDataFromHeaders || initDataFromBody;
      if (!initData) {
        this.sendError(res, 'InitData is required in headers or body for standard registration', 400);
        return;
      }
      
      logger.info('[AuthController] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram', { 
        has_ref: !!(refBy || ref_by),
        initData_source: initDataFromHeaders ? 'headers' : 'body',
        initData_length: initData.length 
      });
      
      const result = await this.authService.authenticateFromTelegram(initData, { ref_by: refBy || ref_by });
      
      if (result.success) {
        this.sendSuccess(res, {
          user: result.user,
          token: result.token,
          isNewUser: result.isNewUser
        });
      } else {
        this.sendError(res, result.error || 'Registration failed', 400);
      }
    }, '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async checkToken(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
      const authHeader = req.headers.authorization;
      const token = authHeader?.startsWith('Bearer ') ? authHeader.substring(7) : null;
      
      if (!token) {
        return this.sendError(res, 'Authorization token required', 401);
      }

      const sessionInfo = await this.authService.getSessionInfo(token);
      
      if (!sessionInfo.success) {
        return this.sendError(res, sessionInfo.error || 'Invalid token', 401);
      }

      this.sendSuccess(res, {
        valid: true,
        user: sessionInfo.user,
        token: sessionInfo.token
      });
    }, '–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (legacy endpoint)
   */
  async validateToken(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
      const authHeader = req.headers.authorization;
      const token = authHeader?.startsWith('Bearer ') ? authHeader.substring(7) : null;
      
      if (!token) {
        return this.sendError(res, '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', 401);
      }

      const isValid = await this.authService.validateToken(token);
      
      this.sendSuccess(res, {
        valid: isValid,
        checked_at: new Date().toISOString()
      });
    }, '–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
   */
  async refreshToken(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
        const { token } = req.body;
        
        if (!token) {
          return this.sendError(res, '–¢–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', 400);
        }

        const result = await this.authService.refreshToken(token);
        
        if (result.success) {
          this.sendSuccess(res, {
            token: result.newToken,
            user: result.user,
            refreshed_at: new Date().toISOString()
          });
        } else {
          this.sendError(res, result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', 401);
        }
      }, '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ—á–∏—Å—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
   */
  async logout(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
      // –í JWT –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ logout –æ–±—ã—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      // –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ localStorage/sessionStorage
      this.sendSuccess(res, {
        message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        logged_out_at: new Date().toISOString()
      });
    }, '–≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  async getSessionInfo(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
      const token = req.headers.authorization?.replace('Bearer ', '');
      
      if (!token) {
        return this.sendError(res, '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', 401);
      }

      const sessionInfo = await this.authService.getSessionInfo(token);
      this.sendSuccess(res, sessionInfo);
    }, '–ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏');
    } catch (error) {
      next(error);
    }
  }

  /**
   * –ì–æ—Å—Ç–µ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async guestAuth(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      await this.handleRequest(req, res, async () => {
        // –°–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const guestUser = {
          id: 99999,
          telegram_id: 999999999,
          username: 'guest_user',
          first_name: 'Guest',
          last_name: 'User',
          ref_code: 'GUEST_REF_CODE',
          balance_uni: '0',
          balance_ton: '0'
        };

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generateJWTToken –∏–∑ utils/telegram
        const { generateJWTToken } = await import('../../utils/telegram');
        
        // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –≥–æ—Å—Ç—è
        const token = generateJWTToken(guestUser, guestUser.ref_code);
        
        this.sendSuccess(res, {
          user: guestUser,
          token: token,
          isGuest: true
        });
      }, '–≥–æ—Å—Ç–µ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } catch (error) {
      next(error);
    }
  }
}