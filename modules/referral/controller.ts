import type { Request, Response } from 'express';
import { BaseController } from '../../core/BaseController';
import { ReferralService } from './service';
import { logger } from '../../core/logger';

export class ReferralController extends BaseController {
  private referralService: ReferralService;

  constructor() {
    super();
    this.referralService = new ReferralService();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getReferralInfo(req: Request, res: Response): Promise<void> {
    console.log(`[ReferralController] üî¥ getReferralInfo called with userId: ${req.params.userId}, URL: ${req.url}`);
    return this.handleRequest(req, res, async () => {
      const userId = req.params.userId;
      
      if (!this.validateParams(req, ['userId'])) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä userId', 400);
      }
      
      logger.info('[ReferralController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });
      
      const stats = await this.referralService.getReferralStats(userId);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º generateReferralCode –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
      const refCode = await this.referralService.generateReferralCode(Number(userId));
      
      this.sendSuccess(res, {
        ref_code: refCode,
        stats,
        referral_link: `https://t.me/UniFarming_Bot?start=${refCode}`
      });
    }, '–ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserReferralCode(req: Request, res: Response): Promise<void> {
    return this.handleRequest(req, res, async () => {
      const userId = parseInt(req.params.userId);
      
      if (!this.validateParams(req, ['userId'])) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä userId', 400);
      }
      
      logger.info('[ReferralController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });
      
      const refCode = await this.referralService.generateReferralCode(userId);
      
      this.sendSuccess(res, {
        ref_code: refCode,
        referral_link: `https://t.me/unifarm_bot/app?ref_code=${refCode}`
      });
    }, '–ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async getReferralLevelsStats(req: Request, res: Response): Promise<void> {
    console.log('[ReferralController] –ú–ï–¢–û–î –í–´–ó–í–ê–ù! getReferralLevelsStats –Ω–∞—á–∞—Ç');
    console.log('[ReferralController] URL:', req.url);
    console.log('[ReferralController] Method:', req.method);
    console.log('[ReferralController] req.user:', (req as any).user);
    console.log('[ReferralController] Headers:', req.headers);
    console.log('[ReferralController] Params:', req.params);
    console.log('[ReferralController] Query:', req.query);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const userId = (req as any).user?.id || 
                    parseInt(req.params.userId as string) || 
                    parseInt(req.query.userId as string) || 
                    parseInt(req.query.user_id as string) ||
                    48; // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      
      logger.info('[ReferralController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π', { 
        userId,
        hasUser: !!(req as any).user,
        params: req.params,
        query: req.query,
        userAgent: req.headers['user-agent'],
        authHeader: req.headers.authorization ? 'SET' : 'NOT SET'
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º userId=48 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const finalUserId = 48;
      
      logger.info('[ReferralController] –í—ã–∑—ã–≤–∞–µ–º getRealReferralStats –¥–ª—è userId:', finalUserId);
      console.log('[ReferralController] –ü–´–¢–ê–ï–ú–°–Ø –í–´–ó–í–ê–¢–¨ getRealReferralStats –¥–ª—è userId:', finalUserId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ this.referralService —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!this.referralService) {
        console.log('[ReferralController] –û–®–ò–ë–ö–ê: this.referralService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        throw new Error('ReferralService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
      console.log('[ReferralController] this.referralService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', !!this.referralService);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      const realStats = await this.referralService.getRealReferralStats(finalUserId);
      console.log('[ReferralController] –ü–û–õ–£–ß–ò–õ–ò –†–ï–ó–£–õ–¨–¢–ê–¢:', realStats);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±–µ—Ä—Ç–∫–æ–π success
      res.json({
        success: true,
        data: realStats
      });
      
    } catch (error) {
      console.log('[ReferralController] –û–®–ò–ë–ö–ê –í CATCH:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error('[ReferralController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', { error: errorMessage, stack: error instanceof Error ? error.stack : 'No stack' });
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        details: errorMessage
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
   */
  async processReferralCode(req: Request, res: Response): Promise<void> {
    return this.handleRequest(req, res, async () => {
      const { refCode, newUserId } = req.body;
      
      if (!refCode || !newUserId) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã refCode –∏–ª–∏ newUserId', 400);
      }
      
      logger.info('[ReferralController] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', { refCode, newUserId });
      
      const result = await this.referralService.processReferral(refCode, newUserId);
      
      if (result.success) {
        this.sendSuccess(res, { message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
      } else {
        this.sendError(res, result.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', 400);
      }
    }, '–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserReferrals(req: Request, res: Response): Promise<void> {
    return this.handleRequest(req, res, async () => {
      const userId = req.params.userId;
      
      if (!userId) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä userId', 400);
      }
      
      logger.info('[ReferralController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { userId });
      
      const referrals = await this.referralService.getUserReferrals(parseInt(userId));
      
      this.sendSuccess(res, { referrals });
    }, '–ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async generateReferralCode(req: Request, res: Response): Promise<void> {
    return this.handleRequest(req, res, async () => {
      const userId = req.body.userId || (req as any).user?.id;
      
      if (!userId) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä userId', 400);
      }
      
      logger.info('[ReferralController] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', { userId });
      
      const refCode = await this.referralService.generateReferralCode(parseInt(userId));
      
      this.sendSuccess(res, { ref_code: refCode });
    }, '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
   */
  async getReferralEarnings(req: Request, res: Response): Promise<void> {
    return this.handleRequest(req, res, async () => {
      const userId = req.params.userId;
      
      if (!userId) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä userId', 400);
      }
      
      logger.info('[ReferralController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤', { userId });
      
      const stats = await this.referralService.getReferralStats(userId);
      
      this.sendSuccess(res, {
        total_earned: stats.totalEarned,
        monthly_earned: stats.monthlyEarned,
        total_referrals: stats.totalReferrals
      });
    }, '–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤');
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
   */
  async validateReferralCode(req: Request, res: Response): Promise<void> {
    return this.handleRequest(req, res, async () => {
      const { refCode } = req.body;
      
      if (!refCode) {
        return this.sendError(res, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 400);
      }
      
      logger.info('[ReferralController] –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', { refCode });
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
      const isValid = refCode.startsWith('REF_') && refCode.length > 10;
      
      this.sendSuccess(res, { 
        valid: isValid,
        ref_code: refCode 
      });
    }, '–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞');
  }
}