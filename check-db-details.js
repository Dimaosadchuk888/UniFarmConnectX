/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
 */

import pg from 'pg';
const { Pool } = pg;

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createDbConnection() {
  console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });
  
  return pool;
}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
async function showConnectionInfo(pool) {
  console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  
  try {
    // –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ö–µ–º—ã
    const dbInfoResult = await pool.query('SELECT current_database() as db, current_schema() as schema');
    console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbInfoResult.rows[0].db}`);
    console.log(`–°—Ö–µ–º–∞: ${dbInfoResult.rows[0].schema}`);
    
    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const serverInfoResult = await pool.query('SELECT version()');
    console.log(`–í–µ—Ä—Å–∏—è PostgreSQL: ${serverInfoResult.rows[0].version}`);
    
    // –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.log(`PGHOST: ${process.env.PGHOST || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`PGPORT: ${process.env.PGPORT || '5432 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
    console.log(`PGDATABASE: ${process.env.PGDATABASE || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`PGUSER: ${process.env.PGUSER ? '‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DATABASE_URL –±–µ–∑ –ø–æ–∫–∞–∑–∞ –ø–∞—Ä–æ–ª—è
    if (process.env.DATABASE_URL) {
      const sanitizedUrl = process.env.DATABASE_URL.replace(/:\/\/([^:]+):[^@]+@/, '://$1:***@');
      console.log(`DATABASE_URL: ${sanitizedUrl}`);
    } else {
      console.log('DATABASE_URL: –Ω–µ —É–∫–∞–∑–∞–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error.message);
  }
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ö–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function listSchemas(pool) {
  console.log('\nüìã –°—Ö–µ–º—ã –≤ —Ç–µ–∫—É—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  
  try {
    const result = await pool.query(
      "SELECT schema_name FROM information_schema.schemata WHERE schema_name NOT LIKE 'pg_%' AND schema_name != 'information_schema' ORDER BY schema_name"
    );
    
    if (result.rows.length === 0) {
      console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ö–µ–º (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)');
    } else {
      result.rows.forEach((row, i) => {
        console.log(`${i+1}. ${row.schema_name}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ö–µ–º:', error.message);
  }
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ
async function listTables(pool) {
  console.log('\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ:');
  
  try {
    const result = await pool.query(
      "SELECT table_name FROM information_schema.tables WHERE table_schema = current_schema() AND table_type = 'BASE TABLE' ORDER BY table_name"
    );
    
    if (result.rows.length === 0) {
      console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ');
    } else {
      result.rows.forEach((row, i) => {
        console.log(`${i+1}. ${row.table_name}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', error.message);
  }
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –∏–º–µ–Ω–µ–º 'users' –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö
async function findUsersTables(pool) {
  console.log('\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –∏–º–µ–Ω–µ–º "users" –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö:');
  
  try {
    const result = await pool.query(
      "SELECT table_schema, table_name FROM information_schema.tables WHERE table_name = 'users' ORDER BY table_schema"
    );
    
    if (result.rows.length === 0) {
      console.log('–¢–∞–±–ª–∏—Ü —Å –∏–º–µ–Ω–µ–º "users" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å—Ö–µ–º–µ');
    } else {
      result.rows.forEach((row, i) => {
        console.log(`${i+1}. ${row.table_schema}.${row.table_name}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü users:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users
async function countUsersInAllTables(pool) {
  console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö users:');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü users
    const tablesResult = await pool.query(
      "SELECT table_schema, table_name FROM information_schema.tables WHERE table_name = 'users' ORDER BY table_schema"
    );
    
    if (tablesResult.rows.length === 0) {
      console.log('–¢–∞–±–ª–∏—Ü —Å –∏–º–µ–Ω–µ–º "users" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
    for (const table of tablesResult.rows) {
      const schema = table.table_schema;
      const tableName = table.table_name;
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const countResult = await pool.query(
          'SELECT COUNT(*) FROM $1:name.$2:name',
          [schema, tableName]
        );
        console.log(`${schema}.${tableName}: ${countResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - —Ç–∞–∫–∂–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–µ–π
        const recordsResult = await pool.query(
          'SELECT id, username, ref_code FROM $1:name.$2:name ORDER BY id LIMIT 5',
          [schema, tableName]
        );
        
        console.log(`  –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:`);
        recordsResult.rows.forEach(row => {
          console.log(`  ID: ${row.id}, Username: ${row.username}, RefCode: ${row.ref_code}`);
        });
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ ${schema}.${tableName}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  
  let pool = null;
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await createDbConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    await showConnectionInfo(pool);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å—Ö–µ–º
    await listSchemas(pool);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    await listTables(pool);
    
    // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã users –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö
    await findUsersTables(pool);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    await countUsersInAllTables(pool);
    
    console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if (pool) {
      await pool.end();
      console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main().catch(console.error);