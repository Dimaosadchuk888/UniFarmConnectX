/**
 * –ó–ê–î–ê–ß–ê 3: –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ PostgreSQL/Neon –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */

const conflictingVars = [
  'DATABASE_URL',
  'PGHOST',
  'PGPORT', 
  'PGUSER',
  'PGPASSWORD',
  'PGDATABASE',
  'DATABASE_PROVIDER',
  'USE_NEON_DB',
  'FORCE_NEON_DB',
  'DISABLE_REPLIT_DB',
  'NEON_DATABASE_URL'
];

function checkEnvironmentConflicts() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
  
  const found = [];
  const clean = [];
  
  conflictingVars.forEach(varName => {
    if (process.env[varName]) {
      found.push(`‚ùå ${varName}=${process.env[varName].substring(0, 50)}...`);
    } else {
      clean.push(`‚úÖ ${varName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  });
  
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
  console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${found.length}`);
  console.log(`–ß–∏—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${clean.length}`);
  
  if (found.length > 0) {
    console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–û–ù–§–õ–ò–ö–¢–£–Æ–©–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:');
    found.forEach(line => console.log(line));
    
    console.log('\nüìù –ù–ï–û–ë–•–û–î–ò–ú–û –£–î–ê–õ–ò–¢–¨:');
    found.forEach(line => {
      const varName = line.split('=')[0].replace('‚ùå ', '');
      console.log(`unset ${varName}`);
    });
  }
  
  console.log('\n‚úÖ –ß–ò–°–¢–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:');
  clean.forEach(line => console.log(line));
  
  // –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  const status = found.length === 0 ? '–ì–û–¢–û–í–û' : '–¢–†–ï–ë–£–ï–¢_–û–ß–ò–°–¢–ö–ò';
  console.log(`\nüéØ –°–¢–ê–¢–£–° –ó–ê–î–ê–ß–ò 3: ${status}`);
  
  return {
    status,
    conflictsFound: found.length,
    cleanVars: clean.length,
    conflictingVariables: found
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±—É–µ–º—ã—Ö Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function checkRequiredSupabaseVars() {
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');
  
  const required = ['SUPABASE_URL', 'SUPABASE_KEY'];
  const missing = [];
  const present = [];
  
  required.forEach(varName => {
    if (process.env[varName] && process.env[varName].length > 0) {
      present.push(`‚úÖ ${varName} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    } else {
      missing.push(`‚ùå ${varName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  });
  
  present.forEach(line => console.log(line));
  missing.forEach(line => console.log(line));
  
  return missing.length === 0;
}

async function main() {
  console.log('üöÄ –ó–ê–î–ê–ß–ê 3: –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è\n');
  
  const conflictCheck = checkEnvironmentConflicts();
  const supabaseCheck = checkRequiredSupabaseVars();
  
  console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
  console.log(`- –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${conflictCheck.conflictsFound}`);
  console.log(`- –ß–∏—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${conflictCheck.cleanVars}`); 
  console.log(`- Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${supabaseCheck ? 'OK' : 'MISSING'}`);
  console.log(`- –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${conflictCheck.status}`);
  
  if (conflictCheck.status === '–ì–û–¢–û–í–û' && supabaseCheck) {
    console.log('\n‚úÖ –ó–ê–î–ê–ß–ê 3 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
    console.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
  } else {
    console.log('\n‚ö†Ô∏è –ó–ê–î–ê–ß–ê 3 –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ë–û–¢–´');
  }
}

main().catch(console.error);