/**
 * –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ JWT —Ç–æ–∫–µ–Ω–∞–º–∏
 * –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

import { config as loadEnv } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

loadEnv();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeJWTCacheProblems() {
  console.log('\n=== –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ó–ê–ö–ï–®–ò–†–û–í–ê–ù–ù–´–• JWT –¢–û–ö–ï–ù–û–í ===\n');
  console.log('–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  console.log('---------------------------------------------------\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    console.log('1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ù–ï–£–î–ê–ß–ù–´–ú–ò –î–ï–ü–û–ó–ò–¢–ê–ú–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤):\n');
    
    const { data: failedDeposits } = await supabase
      .from('transactions')
      .select('user_id, created_at, amount, status')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'failed')
      .gte('created_at', new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (failedDeposits && failedDeposits.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${failedDeposits.length} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const userFailures = new Map<number, number>();
      failedDeposits.forEach(dep => {
        userFailures.set(dep.user_id, (userFailures.get(dep.user_id) || 0) + 1);
      });
      
      console.log('–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:');
      const sorted = Array.from(userFailures.entries()).sort((a, b) => b[1] - a[1]).slice(0, 10);
      sorted.forEach(([userId, count]) => {
        console.log(`  User ID ${userId}: ${count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
      });
    } else {
      console.log('–ù–µ—É–¥–∞—á–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 2. –ê–Ω–∞–ª–∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n2. –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (>24 —á–∞—Å–∞):\n');
    
    const { data: inactiveUsers } = await supabase
      .from('users')
      .select('id, telegram_id, username, last_activity')
      .lt('last_activity', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
      .order('last_activity', { ascending: false })
      .limit(10);

    if (inactiveUsers && inactiveUsers.length > 0) {
      console.log('ID | Telegram ID | Username | –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
      console.log('---|-------------|----------|---------------------');
      inactiveUsers.forEach(user => {
        const lastActivity = user.last_activity ? new Date(user.last_activity).toISOString().slice(0, 19) : 'Never';
        console.log(`${user.id} | ${user.telegram_id} | ${user.username || 'N/A'} | ${lastActivity}`);
      });
    }

    // 3. –¢–µ–∫—É—â–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\n3. –ê–ù–ê–õ–ò–ó –ú–ï–•–ê–ù–ò–ó–ú–û–í –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–û–í:\n');
    
    console.log('‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ú–ï–•–ê–ù–ò–ó–ú–´:');
    console.log('  1. useJwtTokenWatcher - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');
    console.log('  2. tokenRecoveryService:');
    console.log('     - attemptTokenRefresh() - 3 –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ /api/auth/refresh');
    console.log('     - attemptNewTokenCreation() - 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ Telegram initData');
    console.log('  3. DepositRecoveryService - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('  4. criticalOperationGuard - –∑–∞—â–∏—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
    
    console.log('\n‚ùå –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    console.log('  1. –ò–°–ü–†–ê–í–õ–ï–ù–û: JWT refresh –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /api/v2/auth/refresh ‚Üí /api/auth/refresh ‚úÖ');
    console.log('  2. Telegram WebApp –∫–µ—à–∏—Ä—É–µ—Ç localStorage –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏');
    console.log('  3. –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ (TTL=24h) refresh –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('  4. –ù–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ Telegram');

    // 4. –¢–∏–ø–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    console.log('\n4. –¢–ò–ü–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –ü–†–û–ë–õ–ï–ú:\n');
    
    console.log('üì± –°–¶–ï–ù–ê–†–ò–ô 1: "–î–æ–ª–≥–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"');
    console.log('  –°–∏–º–ø—Ç–æ–º—ã:');
    console.log('  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ö–æ–¥–∏–ª >24 —á–∞—Å–∞');
    console.log('  - JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
    console.log('  - –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤–∏–¥–∏—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('  –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:');
    console.log('  - Telegram –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –∫–µ—à–∞');
    console.log('  - /api/auth/refresh –Ω–µ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω');
    console.log('  - attemptNewTokenCreation() –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ initData');
    
    console.log('\nüì± –°–¶–ï–ù–ê–†–ò–ô 2: "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"');
    console.log('  –°–∏–º–ø—Ç–æ–º—ã:');
    console.log('  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏');
    console.log('  - –í–∏–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—à–∏–±–∫–∏');
    console.log('  –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:');
    console.log('  - localStorage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
    console.log('  - –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ user_id');
    
    console.log('\nüì± –°–¶–ï–ù–ê–†–ò–ô 3: "Telegram –∫–µ—à"');
    console.log('  –°–∏–º–ø—Ç–æ–º—ã:');
    console.log('  - –°–ª—É—á–∞–π–Ω—ã–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('  - –î–µ–ø–æ–∑–∏—Ç—ã –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç, –∏–Ω–æ–≥–¥–∞ –Ω–µ—Ç');
    console.log('  –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:');
    console.log('  - Telegram –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –∫–µ—à–∏—Ä—É–µ—Ç WebView');
    console.log('  - localStorage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏');
    console.log('  - initData –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π');

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• ID (–µ—Å–ª–∏ –µ—Å—Ç—å –∂–∞–ª–æ–±—ã):\n');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const checkUserIds = [184, 255, 251, 248]; // –ü—Ä–∏–º–µ—Ä—ã ID
    
    for (const userId of checkUserIds) {
      const { data: user } = await supabase
        .from('users')
        .select('id, telegram_id, last_activity')
        .eq('id', userId)
        .single();
        
      if (user) {
        const { data: recentDeposits } = await supabase
          .from('transactions')
          .select('created_at, status')
          .eq('user_id', userId)
          .eq('type', 'TON_DEPOSIT')
          .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
          .order('created_at', { ascending: false });
          
        const failed = recentDeposits?.filter(d => d.status === 'failed').length || 0;
        const successful = recentDeposits?.filter(d => d.status === 'completed').length || 0;
        
        console.log(`User ${userId} (TG: ${user.telegram_id}):`);
        console.log(`  - –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.last_activity ? new Date(user.last_activity).toISOString() : 'Never'}`);
        console.log(`  - –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ 7 –¥–Ω–µ–π: ${successful} —É—Å–ø–µ—à–Ω—ã—Ö, ${failed} –Ω–µ—É–¥–∞—á–Ω—ã—Ö`);
      }
    }

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞):\n');
    
    console.log('–î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò:');
    console.log('  1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç—å Telegram (—Å–≤–∞–π–ø –≤–≤–µ—Ä—Ö –Ω–∞ iOS/Android)');
    console.log('  2. –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à Telegram:');
    console.log('     iOS: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–∞–Ω–Ω—ã–µ –∏ –ø–∞–º—è—Ç—å ‚Üí –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à');
    console.log('     Android: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–∞–Ω–Ω—ã–µ –∏ –ø–∞–º—è—Ç—å ‚Üí –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à');
    console.log('  3. –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ @UniFarming_Bot');
    
    console.log('\n–¢–ï–ö–£–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (—É–∂–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã):');
    console.log('  ‚úÖ JWT refresh endpoint –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
    console.log('  ‚úÖ DepositRecoveryService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç—ã');
    console.log('  ‚úÖ TokenRecoveryService –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ initData');
    
    console.log('\n–ß–¢–û –î–û–õ–ñ–ù–û –ü–†–û–ò–°–•–û–î–ò–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò:');
    console.log('  1. –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞');
    console.log('  2. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - 3 –ø–æ–ø—ã—Ç–∫–∏ refresh + 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ');
    console.log('  3. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ä—à–µ 25 –º–∏–Ω—É—Ç - –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    console.log('  4. –ù–µ—É–¥–∞—á–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeJWTCacheProblems()
  .then(() => {
    console.log('\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===\n');
    process.exit(0);
  })
  .catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });