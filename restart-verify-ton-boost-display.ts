#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UI
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ:
 * 1. –í–∫–ª—é—á–µ–Ω–∏—è ActiveTonBoostsCard –æ–±—Ä–∞—Ç–Ω–æ –≤ Farming.tsx
 * 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è getTonBoostFarmingStatus() - —É–±—Ä–∞–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 10 TON
 * 3. –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è getUserActiveBoosts() –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞
 * 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è activateBoost() –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
 */

import { BoostService } from './modules/boost/service';
import { TonFarmingRepository } from './modules/boost/TonFarmingRepository';
import { logger } from './core/logger';

const COLORS = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

async function testTonBoostDisplayComponents() {
  console.log(`${COLORS.cyan}${COLORS.bright}üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í TON BOOST${COLORS.reset}\n`);
  
  const boostService = new BoostService();
  const userId = '184'; // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º getUserActiveBoosts() - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log(`${COLORS.blue}1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getUserActiveBoosts()...${COLORS.reset}`);
    const activeBoosts = await boostService.getUserActiveBoosts(userId);
    
    if (activeBoosts.length > 0) {
      console.log(`${COLORS.green}‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeBoosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö boost(–æ–≤)${COLORS.reset}`);
      activeBoosts.forEach((boost, index) => {
        console.log(`${COLORS.cyan}   Boost ${index + 1}:${COLORS.reset}`);
        console.log(`     ID: ${boost.id}`);
        console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${boost.package_name || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
        console.log(`     –°—É–º–º–∞ TON: ${boost.ton_amount || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
        console.log(`     –°—Ç–∞–≤–∫–∞/—Å–µ–∫: ${boost.rate_ton_per_second || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${boost.status || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
        console.log(`     UNI –±–æ–Ω—É—Å: ${boost.bonus_uni || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
      });
    } else {
      console.log(`${COLORS.red}‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ boosts –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${COLORS.reset}`);
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º getTonBoostFarmingStatus() - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 10 TON
    console.log(`\n${COLORS.blue}2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getTonBoostFarmingStatus()...${COLORS.reset}`);
    const farmingStatus = await boostService.getTonBoostFarmingStatus(userId);
    
    console.log(`${COLORS.cyan}   –°—Ç–∞—Ç—É—Å TON —Ñ–∞—Ä–º–∏–Ω–≥–∞:${COLORS.reset}`);
    console.log(`     TON —Å—Ç–∞–≤–∫–∞ –≤ —Å–µ–∫—É–Ω–¥—É: ${farmingStatus.totalTonRatePerSecond}`);
    console.log(`     –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥ TON: ${farmingStatus.dailyIncomeTon}`);
    console.log(`     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${farmingStatus.deposits.length}`);
    
    if (farmingStatus.deposits.length > 0) {
      console.log(`${COLORS.green}‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è${COLORS.reset}`);
      farmingStatus.deposits.forEach((deposit, index) => {
        console.log(`${COLORS.cyan}     –î–µ–ø–æ–∑–∏—Ç ${index + 1}:${COLORS.reset}`);
        console.log(`       ID: ${deposit.id}`);
        console.log(`       –ù–∞–∑–≤–∞–Ω–∏–µ: ${deposit.package_name || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
        console.log(`       –°—É–º–º–∞: ${deposit.amount}`);
        console.log(`       –°—Ç–∞–≤–∫–∞: ${deposit.rate}%`);
        console.log(`       –°—Ç–∞—Ç—É—Å: ${deposit.status}`);
      });
    } else {
      console.log(`${COLORS.red}‚ùå –î–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è${COLORS.reset}`);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º TonFarmingRepository –¥–∞–Ω–Ω—ã–µ
    console.log(`\n${COLORS.blue}3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ton_farming_data...${COLORS.reset}`);
    const tonFarmingRepo = new TonFarmingRepository();
    const farmingData = await tonFarmingRepo.getByUserId(userId);
    
    if (farmingData) {
      console.log(`${COLORS.green}‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ ton_farming_data${COLORS.reset}`);
      console.log(`${COLORS.cyan}   –î–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞:${COLORS.reset}`);
      console.log(`     –ë–∞–ª–∞–Ω—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farmingData.farming_balance}`);
      console.log(`     –°—Ç–∞–≤–∫–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${farmingData.farming_rate}`);
      console.log(`     Boost –∞–∫—Ç–∏–≤–µ–Ω: ${farmingData.boost_active}`);
      console.log(`     Package ID: ${farmingData.boost_package_id}`);
      console.log(`     –ò—Å—Ç–µ–∫–∞–µ—Ç: ${farmingData.boost_expires_at || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
    } else {
      console.log(`${COLORS.yellow}‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ ton_farming_data –ù–ï –ù–ê–ô–î–ï–ù–´${COLORS.reset}`);
      console.log(`${COLORS.yellow}   –í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —á–µ—Ä–µ–∑ users —Ç–∞–±–ª–∏—Ü—É${COLORS.reset}`);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    console.log(`\n${COLORS.blue}4Ô∏è‚É£ –°—Ç–∞—Ç—É—Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${COLORS.reset}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ActiveTonBoostsCard –≤–∫–ª—é—á–µ–Ω
    const fs = await import('fs/promises');
    const farmingPageContent = await fs.readFile('client/src/pages/Farming.tsx', 'utf8');
    
    if (farmingPageContent.includes('import ActiveTonBoostsCardWithErrorBoundary')) {
      console.log(`${COLORS.green}‚úÖ ActiveTonBoostsCard –≤–∫–ª—é—á–µ–Ω –≤ –∏–º–ø–æ—Ä—Ç—ã${COLORS.reset}`);
    } else {
      console.log(`${COLORS.red}‚ùå ActiveTonBoostsCard –ù–ï –≤–∫–ª—é—á–µ–Ω –≤ –∏–º–ø–æ—Ä—Ç—ã${COLORS.reset}`);
    }
    
    if (farmingPageContent.includes('<ActiveTonBoostsCardWithErrorBoundary />')) {
      console.log(`${COLORS.green}‚úÖ ActiveTonBoostsCard –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ JSX${COLORS.reset}`);
    } else {
      console.log(`${COLORS.red}‚ùå ActiveTonBoostsCard –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ JSX${COLORS.reset}`);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log(`\n${COLORS.magenta}${COLORS.bright}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:${COLORS.reset}`);
    
    const hasActiveBoosts = activeBoosts.length > 0;
    const hasValidData = activeBoosts.some(b => b.package_name && b.ton_amount);
    const hasDeposits = farmingStatus.deposits.length > 0;
    const nonZeroIncome = parseFloat(farmingStatus.dailyIncomeTon) > 0;
    
    console.log(`${COLORS.cyan}–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:${COLORS.reset}`);
    console.log(`  üì¶ ActiveTonBoosts API: ${hasActiveBoosts ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
    console.log(`  üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–≤: ${hasValidData ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
    console.log(`  üí∞ –î–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è UI: ${hasDeposits ? '‚úÖ –ù–∞–π–¥–µ–Ω—ã' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    console.log(`  üìà –î–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥ TON: ${nonZeroIncome ? '‚úÖ –ë–æ–ª—å—à–µ 0' : '‚ùå –†–∞–≤–µ–Ω 0'}`);
    
    if (hasActiveBoosts && hasValidData && hasDeposits && nonZeroIncome) {
      console.log(`\n${COLORS.green}${COLORS.bright}üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!${COLORS.reset}`);
      console.log(`${COLORS.green}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ TON Boost –ø–∞–∫–µ—Ç—ã –≤ UI${COLORS.reset}`);
    } else {
      console.log(`\n${COLORS.yellow}${COLORS.bright}‚ö†Ô∏è –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ß–ê–°–¢–ò–ß–ù–û –ó–ê–í–ï–†–®–ï–ù–û${COLORS.reset}`);
      console.log(`${COLORS.yellow}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏${COLORS.reset}`);
    }
    
  } catch (error) {
    console.error(`${COLORS.red}‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${COLORS.reset}`, error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
testTonBoostDisplayComponents().catch(console.error);