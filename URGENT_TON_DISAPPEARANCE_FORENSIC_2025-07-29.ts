#!/usr/bin/env tsx

/**
 * üîç –°–†–û–ß–ù–ê–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê: –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï TON –î–ï–ü–û–ó–ò–¢–ê
 * 
 * –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑–≤–∞–ª–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–∞ —Å hash:
 * te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKAZFqBrbNaPH4b9vZKiI0oNeqCv7vSXsjA4bEKLPoG790eC7HcB67S2L8lOebWgglPYqaFvClm7PfZoWdKKPUUAFNTRi7REcE+AAAGcAAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKlloLwAAAAAAAAAAAAAAAAAAB9T+7Q
 * 
 * User ID: 25, –≤—Ä–µ–º—è: –æ–∫–æ–ª–æ 14:49 29.07.2025
 */

import { supabase } from './server/supabaseClient.js';

const TARGET_TX_HASH = 'te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKAZFqBrbNaPH4b9vZKiI0oNeqCv7vSXsjA4bEKLPoG790eC7HcB67S2L8lOebWgglPYqaFvClm7PfZoWdKKPUUAFNTRi7REcE+AAAGcAAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKlloLwAAAAAAAAAAAAAAAAAAB9T+7Q';
const TARGET_USER_ID = 25;
const INCIDENT_TIME = '2025-07-29 14:40:00'; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞

async function forensicAnalysis() {
  console.log('üîç –ù–ê–ß–ê–õ–û –°–†–û–ß–ù–û–ô –≠–ö–°–ü–ï–†–¢–ò–ó–´ –ü–û –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Æ TON');
  console.log('=' .repeat(80));
  console.log(`Target TX Hash: ${TARGET_TX_HASH.substring(0, 50)}...`);
  console.log(`Target User ID: ${TARGET_USER_ID}`);
  console.log(`Incident Time: ${INCIDENT_TIME}`);
  console.log('=' .repeat(80));

  // 1. –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û HASH –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
  console.log('\nüîç –≠–¢–ê–ü 1: –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –ë–î');
  console.log('-'.repeat(50));
  
  try {
    // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–ª—è–º —Å hash
    const searchQueries = [
      { table: 'transactions', field: 'metadata', desc: 'metadata —Å–æ–¥–µ—Ä–∂–∏—Ç tx_hash' },
      { table: 'transactions', field: 'tx_hash', desc: '–ø—Ä—è–º–æ–µ –ø–æ–ª–µ tx_hash' },
      { table: 'wallet_balances', field: 'metadata', desc: 'wallet_balances metadata' },
      { table: 'ton_deposits', field: 'tx_hash', desc: 'ton_deposits —Ç–∞–±–ª–∏—Ü–∞' },
      { table: 'boost_purchases', field: 'tx_hash', desc: 'boost_purchases —Ç–∞–±–ª–∏—Ü–∞' }
    ];

    let foundTransaction: any = null;

    for (const query of searchQueries) {
      console.log(`\n  –ü–æ–∏—Å–∫ –≤ ${query.table}.${query.field} (${query.desc})...`);
      
      let searchResult;
      if (query.field === 'metadata') {
        // –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ JSON –ø–æ–ª—è metadata
        searchResult = await supabase
          .from(query.table)
          .select('*')
          .like('metadata', `%${TARGET_TX_HASH}%`);
      } else {
        // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—é
        searchResult = await supabase
          .from(query.table)
          .select('*')
          .eq(query.field, TARGET_TX_HASH);
      }

      if (searchResult.error) {
        console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ ${query.table}: ${searchResult.error.message}`);
        continue;
      }

      if (searchResult.data && searchResult.data.length > 0) {
        console.log(`    ‚úÖ –ù–ê–ô–î–ï–ù–û ${searchResult.data.length} –∑–∞–ø–∏—Å–µ–π –≤ ${query.table}`);
        foundTransaction = { table: query.table, data: searchResult.data[0] };
        console.log(`    üìÑ –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(searchResult.data[0], null, 2));
        break;
      } else {
        console.log(`    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ${query.table}.${query.field}`);
      }
    }

    // 2. –ü–û–ò–°–ö –ü–û –°–û–ö–†–ê–©–ï–ù–ù–û–ú–£ HASH (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
    console.log('\nüîç –≠–¢–ê–ü 2: –ü–û–ò–°–ö –ü–û –°–û–ö–†–ê–©–ï–ù–ù–û–ú–£ HASH');
    console.log('-'.repeat(50));
    
    const shortHash = TARGET_TX_HASH.substring(TARGET_TX_HASH.length - 20); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
    console.log(`–ü–æ–∏—Å–∫ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é: ...${shortHash}`);

    const { data: metadataSearch, error: metaError } = await supabase
      .from('transactions')
      .select('*')
      .like('metadata', `%${shortHash}%`)
      .eq('user_id', TARGET_USER_ID);

    if (metaError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ metadata: ${metaError.message}`);
    } else if (metadataSearch && metadataSearch.length > 0) {
      console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º—É hash: ${metadataSearch.length} –∑–∞–ø–∏—Å–µ–π`);
      metadataSearch.forEach((tx, index) => {
        console.log(`  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`, JSON.stringify(tx, null, 2));
      });
      foundTransaction = { table: 'transactions', data: metadataSearch[0] };
    } else {
      console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º—É hash`);
    }

    // 3. –ê–ù–ê–õ–ò–ó –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 25 –û–ö–û–õ–û –í–†–ï–ú–ï–ù–ò –ò–ù–¶–ò–î–ï–ù–¢–ê
    console.log('\nüîç –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô USER 25 –í –ü–ï–†–ò–û–î –ò–ù–¶–ò–î–ï–ù–¢–ê');
    console.log('-'.repeat(50));

    const { data: userTransactions, error: userError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', TARGET_USER_ID)
      .gte('created_at', '2025-07-29 14:40:00')
      .lte('created_at', '2025-07-29 15:00:00')
      .order('created_at', { ascending: true });

    if (userError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25: ${userError.message}`);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userTransactions?.length || 0} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π User 25 –≤ –ø–µ—Ä–∏–æ–¥ 14:40-15:00`);
      
      userTransactions?.forEach((tx, index) => {
        console.log(`\n  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${index + 1}:`);
        console.log(`    ID: ${tx.id}, Type: ${tx.type}, Amount: ${tx.amount_ton} TON / ${tx.amount_uni} UNI`);
        console.log(`    Status: ${tx.status}, Created: ${tx.created_at}`);
        console.log(`    Description: ${tx.description}`);
        if (tx.metadata) {
          console.log(`    Metadata: ${JSON.stringify(tx.metadata, null, 2)}`);
        }
      });
    }

    // 4. –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• –û–ü–ï–†–ê–¶–ò–ô (–£–î–ê–õ–ï–ù–ò–Ø, ROLLBACK)
    console.log('\nüîç –≠–¢–ê–ü 4: –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• –û–ü–ï–†–ê–¶–ò–ô –ò ROLLBACK');
    console.log('-'.repeat(50));

    // –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞—Ç–∞
    const suspiciousTypes = ['ROLLBACK', 'REVERSAL', 'DELETION', 'CORRECTION'];
    
    for (const type of suspiciousTypes) {
      const { data: suspiciousOps, error: suspError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', TARGET_USER_ID)
        .like('type', `%${type}%`)
        .gte('created_at', '2025-07-29 14:40:00');

      if (suspError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ${type}: ${suspError.message}`);
      } else if (suspiciousOps && suspiciousOps.length > 0) {
        console.log(`‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ ${type} –æ–ø–µ—Ä–∞—Ü–∏–∏: ${suspiciousOps.length}`);
        suspiciousOps.forEach(op => {
          console.log(`    ${op.type}: ${op.amount_ton} TON, ${op.description}, ${op.created_at}`);
        });
      }
    }

    // 5. –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–ê USER 25 –î–û –ò –ü–û–°–õ–ï
    console.log('\nüîç –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê USER 25');
    console.log('-'.repeat(50));

    const { data: currentBalance, error: balanceError } = await supabase
      .from('users')
      .select('balance_ton, balance_uni, updated_at')
      .eq('id', TARGET_USER_ID)
      .single();

    if (balanceError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceError.message}`);
    } else {
      console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User 25:`);
      console.log(`    TON: ${currentBalance.balance_ton}`);
      console.log(`    UNI: ${currentBalance.balance_uni}`);
      console.log(`    Updated: ${currentBalance.updated_at}`);
    }

    // 6. –ü–†–û–í–ï–†–ö–ê wallet_balances –ù–ê –ù–ê–õ–ò–ß–ò–ï –ó–ê–ü–ò–°–ï–ô
    console.log('\nüîç –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê wallet_balances');
    console.log('-'.repeat(50));

    const { data: walletBalances, error: walletError } = await supabase
      .from('wallet_balances')
      .select('*')
      .eq('user_id', TARGET_USER_ID)
      .gte('created_at', '2025-07-29 14:40:00')
      .order('created_at', { ascending: true });

    if (walletError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ wallet_balances: ${walletError.message}`);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${walletBalances?.length || 0} –∑–∞–ø–∏—Å–µ–π –≤ wallet_balances`);
      walletBalances?.forEach((wb, index) => {
        console.log(`  –ó–∞–ø–∏—Å—å ${index + 1}: TON: ${wb.balance_ton}, UNI: ${wb.balance_uni}, ${wb.created_at}`);
      });
    }

    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('\n' + '='.repeat(80));
    console.log('üéØ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(80));

    if (foundTransaction) {
      console.log('‚úÖ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ù–ê–ô–î–ï–ù–ê:');
      console.log(`   –¢–∞–±–ª–∏—Ü–∞: ${foundTransaction.table}`);
      console.log(`   ID: ${foundTransaction.data.id}`);
      console.log(`   Type: ${foundTransaction.data.type}`);
      console.log(`   Amount: ${foundTransaction.data.amount_ton} TON`);
      console.log(`   Status: ${foundTransaction.data.status}`);
      console.log(`   Created: ${foundTransaction.data.created_at}`);
      
      // –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
      console.log('\nüîç –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô –° –ù–ê–ô–î–ï–ù–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ï–ô:');
      
      const { data: relatedOps, error: relatedError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', TARGET_USER_ID)
        .gte('created_at', foundTransaction.data.created_at)
        .order('created_at', { ascending: true });

      if (!relatedError && relatedOps) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω—ã ${relatedOps.length} –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞:`);
        relatedOps.forEach((op, index) => {
          const timeDiff = new Date(op.created_at).getTime() - new Date(foundTransaction.data.created_at).getTime();
          console.log(`  ${index + 1}. ${op.type}: ${op.amount_ton} TON (—á–µ—Ä–µ–∑ ${Math.round(timeDiff/1000)} —Å–µ–∫)`);
        });
      }

      console.log('\nüö® –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
      console.log('   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î');
      console.log('   - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      console.log('   - –í–æ–∑–º–æ–∂–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π rollback –∏–ª–∏ –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞');
      
    } else {
      console.log('‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê –í –ë–î:');
      console.log('   - Hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö');
      console.log('   - –í–æ–∑–º–æ–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —ç—Ç–∞–ø–µ saveTransaction()');
      
      console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
      console.log('   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –ü–û–ü–ê–õ–ê –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
      console.log('   - Frontend –ø–æ–∫–∞–∑–∞–ª –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ, –Ω–æ backend –ù–ï –°–û–•–†–ê–ù–ò–õ');
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ü–µ–ø–æ—á–∫–µ TON Connect ‚Üí API ‚Üí Database');
    }

  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–ü–ï–†–¢–ò–ó–´:', error);
    console.log('\n‚ùå –≠–ö–°–ü–ï–†–¢–ò–ó–ê –ü–†–ï–†–í–ê–ù–ê - –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê');
  }

  console.log('\n' + '='.repeat(80));
  console.log('üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ò–ú –î–ï–ô–°–¢–í–ò–Ø–ú:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç 14:40-15:00');
  console.log('2. –ù–∞–π—Ç–∏ –≤—ã–∑–æ–≤—ã /api/v2/wallet/ton-deposit –æ–∫–æ–ª–æ 14:49');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫—É UnifiedTransactionService.createTransaction');
  console.log('4. –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö rollback –ø—Ä–æ—Ü–µ–¥—É—Ä –≤ –∫–æ–¥–µ');
  console.log('5. –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∏ cron –∑–∞–¥–∞—á');
  console.log('='.repeat(80));
}

forensicAnalysis().catch(console.error);