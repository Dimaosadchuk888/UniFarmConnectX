/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø USER 25 –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏
 */

import { supabase } from './core/supabase.js';

async function fixUser25Duplication() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø USER 25');
  console.log('‚è∞ –ù–∞—á–∞–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', new Date().toISOString());
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\n=== 1. –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===');
    
    const { data: allUser25Profiles } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, created_at')
      .or('telegram_id.eq.25,id.eq.25');
    
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${allUser25Profiles?.length || 0}`);
    
    if (!allUser25Profiles || allUser25Profiles.length === 0) {
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      return;
    }
    
    let mainProfile = null;
    let duplicateProfile = null;
    
    allUser25Profiles.forEach((profile, i) => {
      console.log(`  –ü—Ä–æ—Ñ–∏–ª—å ${i+1}:`);
      console.log(`    internal_id: ${profile.id}`);
      console.log(`    telegram_id: ${profile.telegram_id}`);
      console.log(`    username: ${profile.username}`);
      console.log(`    UNI: ${profile.balance_uni}`);
      console.log(`    TON: ${profile.balance_ton}`);
      console.log(`    –°–æ–∑–¥–∞–Ω: ${profile.created_at}`);
      
      if (profile.telegram_id === 25) {
        mainProfile = profile;
        console.log(`    ‚úÖ –≠–¢–û –û–°–ù–û–í–ù–û–ô –ü–†–û–§–ò–õ–¨`);
      } else {
        duplicateProfile = profile;
        console.log(`    ‚ö†Ô∏è –≠–¢–û –î–£–ë–õ–ò–ö–ê–¢`);
      }
      console.log('    ---');
    });
    
    if (!mainProfile) {
      console.log('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (telegram_id=25) –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    // 2. –°—á–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–±–æ–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    console.log('\n=== 2. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===');
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (user_id=25, telegram_id)
    const { data: mainTransactions } = await supabase
      .from('transactions')
      .select('type, amount_uni, amount_ton, currency, status')
      .eq('user_id', 25)
      .eq('status', 'completed');
    
    console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (user_id=25): ${mainTransactions?.length || 0}`);
    
    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let duplicateTransactions = [];
    if (duplicateProfile) {
      const { data: dupTx } = await supabase
        .from('transactions')
        .select('type, amount_uni, amount_ton, currency, status')
        .eq('user_id', duplicateProfile.id)
        .eq('status', 'completed');
      
      duplicateTransactions = dupTx || [];
      console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ (user_id=${duplicateProfile.id}): ${duplicateTransactions.length}`);
    }
    
    // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    console.log('\n=== 3. –†–ê–°–ß–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê ===');
    
    let calculatedUni = 0;
    let calculatedTon = 0;
    
    // –°—á–∏—Ç–∞–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    if (mainTransactions) {
      mainTransactions.forEach(tx => {
        const amountUni = parseFloat(tx.amount_uni) || 0;
        const amountTon = parseFloat(tx.amount_ton) || 0;
        
        if (tx.type === 'WITHDRAWAL') {
          calculatedUni -= amountUni;
          calculatedTon -= amountTon;
        } else {
          calculatedUni += amountUni;
          calculatedTon += amountTon;
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (duplicateTransactions.length > 0) {
      duplicateTransactions.forEach(tx => {
        const amountUni = parseFloat(tx.amount_uni) || 0;
        const amountTon = parseFloat(tx.amount_ton) || 0;
        
        if (tx.type === 'WITHDRAWAL') {
          calculatedUni -= amountUni;
          calculatedTon -= amountTon;
        } else {
          calculatedUni += amountUni;
          calculatedTon += amountTon;
        }
      });
    }
    
    console.log(`üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:`);
    console.log(`   UNI: ${calculatedUni.toFixed(6)}`);
    console.log(`   TON: ${calculatedTon.toFixed(6)}`);
    
    console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î:`);
    console.log(`   UNI: ${mainProfile.balance_uni}`);
    console.log(`   TON: ${mainProfile.balance_ton}`);
    
    const uniDiff = calculatedUni - parseFloat(mainProfile.balance_uni);
    const tonDiff = calculatedTon - parseFloat(mainProfile.balance_ton);
    
    console.log(`üìä –†–∞–∑–Ω–∏—Ü–∞:`);
    console.log(`   UNI: ${uniDiff > 0 ? '+' : ''}${uniDiff.toFixed(6)}`);
    console.log(`   TON: ${tonDiff > 0 ? '+' : ''}${tonDiff.toFixed(6)}`);
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    if (Math.abs(uniDiff) > 0.000001 || Math.abs(tonDiff) > 0.000001) {
      console.log('\n=== 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===');
      
      const { data: updatedUser, error: updateError } = await supabase
        .from('users')
        .update({
          balance_uni: parseFloat(calculatedUni.toFixed(6)),
          balance_ton: parseFloat(calculatedTon.toFixed(6))
        })
        .eq('telegram_id', 25)
        .select('id, telegram_id, balance_uni, balance_ton')
        .single();
      
      if (updateError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError.message);
      } else {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        console.log(`   –ù–æ–≤—ã–π UNI: ${updatedUser.balance_uni}`);
        console.log(`   –ù–æ–≤—ã–π TON: ${updatedUser.balance_ton}`);
      }
    } else {
      console.log('\n‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
    
    // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (duplicateProfile && duplicateTransactions.length > 0) {
      console.log('\n=== 5. –û–ë–†–ê–ë–û–¢–ö–ê –î–£–ë–õ–ò–ö–ê–¢–ê ===');
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å ${duplicateTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏`);
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å');
      console.log('   –ò —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞');
    }
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º BalanceManager
    console.log('\n=== 6. –¢–ï–°–¢ BALANCE MANAGER ===');
    
    try {
      const { BalanceManager } = await import('./core/BalanceManager.js');
      const balanceManager = BalanceManager.getInstance();
      
      const balanceResult = await balanceManager.getUserBalance(25);
      
      if (balanceResult.success && balanceResult.balance) {
        console.log('‚úÖ BalanceManager —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å User 25:');
        console.log(`   UNI: ${balanceResult.balance.balance_uni}`);
        console.log(`   TON: ${balanceResult.balance.balance_ton}`);
      } else {
        console.log('‚ùå BalanceManager –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', balanceResult.error);
      }
      
    } catch (bmError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BalanceManager:', bmError.message);
    }
    
    // –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    console.log('\n=== üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)');
    console.log('‚úÖ BalanceManager –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω');
    
    if (Math.abs(uniDiff) > 0.000001 || Math.abs(tonDiff) > 0.000001) {
      console.log(`\nüí∞ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ë–ê–õ–ê–ù–°:`);
      console.log(`   UNI: +${uniDiff.toFixed(6)}`);
      console.log(`   TON: +${tonDiff.toFixed(6)}`);
    }
    
    console.log('\nüöÄ –î–ï–ü–û–ó–ò–¢–´ –¢–ï–ü–ï–†–¨ –î–û–õ–ñ–ù–´ –†–ê–ë–û–¢–ê–¢–¨ –ö–û–†–†–ï–ö–¢–ù–û!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    console.error('Stack:', error.stack);
  }
}

fixUser25Duplication();