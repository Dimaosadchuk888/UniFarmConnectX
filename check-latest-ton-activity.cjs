/**
 * –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ï–ô TON –ê–ö–¢–ò–í–ù–û–°–¢–ò
 * –ö–∞–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–º–µ—é—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è User 25 –∏ 227
 */

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkLatestTonActivity() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï–î–ù–ï–ô TON –ê–ö–¢–ò–í–ù–û–°–¢–ò');
  console.log('='.repeat(40));
  
  const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
  
  try {
    // 1. –í—Å–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    const { data: allTonTx, error: tonError } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .gte('created_at', fiveMinutesAgo)
      .order('created_at', { ascending: false });
    
    console.log(`üìä –í–°–ï TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ó–ê 5 –ú–ò–ù–£–¢ (${allTonTx?.length || 0}):`);
    
    if (allTonTx && allTonTx.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const userActivity = {};
      
      allTonTx.forEach(tx => {
        if (!userActivity[tx.user_id]) {
          userActivity[tx.user_id] = [];
        }
        userActivity[tx.user_id].push(tx);
      });
      
      console.log(`\nüë• –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (${Object.keys(userActivity).length}):`);
      
      Object.keys(userActivity).forEach(userId => {
        const transactions = userActivity[userId];
        const isTargetUser = userId === '25' || userId === '227';
        const marker = isTargetUser ? 'üéØ' : '  ';
        
        console.log(`\n${marker} USER ${userId} (${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):`);
        
        if (isTargetUser) {
          console.log(`   ‚≠ê –¶–ï–õ–ï–í–û–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨! ‚≠ê`);
        }
        
        transactions.forEach((tx, i) => {
          const time = new Date(tx.created_at);
          const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
          const secondsAgo = Math.floor((Date.now() - time.getTime()) / 1000) % 60;
          
          console.log(`      ${i + 1}. ID: ${tx.id}`);
          console.log(`         –¢–∏–ø: ${tx.type}`);
          console.log(`         –°—É–º–º–∞: ${tx.amount} TON`);
          console.log(`         –í—Ä–µ–º—è: ${time.toLocaleString()} (${minutesAgo}:${secondsAgo.toString().padStart(2, '0')} –Ω–∞–∑–∞–¥)`);
          console.log(`         –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log(`         –°—Ç–∞—Ç—É—Å: ${tx.status}`);
          
          if (tx.type === 'DEPOSIT' || tx.description.includes('deposit')) {
            console.log(`         üí∞ –î–ï–ü–û–ó–ò–¢ –û–ë–ù–ê–†–£–ñ–ï–ù!`);
          }
        });
      });
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ User 25 –∏ 227
      console.log('\nüéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–ï–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
      
      if (userActivity['25']) {
        console.log(`‚úÖ USER 25: ${userActivity['25'].length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ`);
        const deposits25 = userActivity['25'].filter(tx => tx.type === 'DEPOSIT');
        if (deposits25.length > 0) {
          console.log(`   üí∞ –î–ï–ü–û–ó–ò–¢–´ USER 25: ${deposits25.length} —à—Ç—É–∫`);
        }
      } else {
        console.log(`‚ùå USER 25: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      
      if (userActivity['227']) {
        console.log(`‚úÖ USER 227: ${userActivity['227'].length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ`);
        const deposits227 = userActivity['227'].filter(tx => tx.type === 'DEPOSIT');
        if (deposits227.length > 0) {
          console.log(`   üí∞ –î–ï–ü–û–ó–ò–¢–´ USER 227: ${deposits227.length} —à—Ç—É–∫`);
        }
      } else {
        console.log(`‚ùå USER 227: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      
    } else {
      console.log('   ‚ùå TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 5 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ (–ª—é–±—ã–µ)
    const { data: latestAny } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, currency, created_at, description')
      .order('created_at', { ascending: false })
      .limit(20);
    
    console.log('\nüîÑ –ü–û–°–õ–ï–î–ù–ò–ï 20 –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –°–ò–°–¢–ï–ú–ï:');
    if (latestAny) {
      latestAny.forEach((tx, i) => {
        const time = new Date(tx.created_at);
        const minutesAgo = Math.floor((Date.now() - time.getTime()) / 1000 / 60);
        const isTarget = tx.user_id === 25 || tx.user_id === 227;
        const marker = isTarget ? 'üéØ' : '  ';
        
        console.log(`${marker} ${i + 1}. User ${tx.user_id}: ${tx.type} ${tx.amount} ${tx.currency} (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        
        if (tx.currency === 'TON' && isTarget) {
          console.log(`      ‚≠ê TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${tx.description.substring(0, 60)}...`);
        }
      });
    }
    
    // 3. –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã User 25 –∏ 227
    console.log('\nüí∞ –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´ –¶–ï–õ–ï–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    
    const { data: users } = await supabase
      .from('users')
      .select('id, username, balance_ton, balance_uni, last_active')
      .in('id', [25, 227]);
    
    if (users) {
      users.forEach(user => {
        const lastActiveTime = user.last_active ? new Date(user.last_active) : null;
        const minutesAgo = lastActiveTime ? Math.floor((Date.now() - lastActiveTime.getTime()) / 1000 / 60) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        console.log(`\n   USER ${user.id} (${user.username}):`);
        console.log(`      TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
        console.log(`      UNI –±–∞–ª–∞–Ω—Å: ${user.balance_uni}`);
        console.log(`      –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`);
      });
    }
    
    console.log('\nüèÅ –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:');
    const hasUser25Activity = allTonTx && allTonTx.some(tx => tx.user_id === 25);
    const hasUser227Activity = allTonTx && allTonTx.some(tx => tx.user_id === 227);
    
    if (hasUser25Activity) {
      console.log('‚úÖ USER 25: –ù–æ–≤–∞—è TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
    } else {
      console.log('‚ùå USER 25: –ù–æ–≤–∞—è TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (hasUser227Activity) {
      console.log('‚úÖ USER 227: –ù–æ–≤–∞—è TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
    } else {
      console.log('‚ùå USER 227: –ù–æ–≤–∞—è TON –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (!hasUser25Activity && !hasUser227Activity) {
      console.log('üö® –ù–ò –û–î–ò–ù –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–º–µ–µ—Ç –Ω–æ–≤—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      console.log('   –ü—Ä–æ–±–ª–µ–º–∞ frontend-backend —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è');
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }
}

checkLatestTonActivity().catch(console.error);