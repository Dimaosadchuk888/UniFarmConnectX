#!/usr/bin/env node
/**
 * –¢–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BREAKPOINT –í –¶–ï–ü–û–ß–ö–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
 * –ü–æ—à–∞–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–≤–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

const http = require('http');

// –¢–µ—Å—Ç–æ–≤—ã–µ JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const TEST_JWT_184 = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxODQsInRlbGVncmFtX2lkIjo1MDg5NzI0NjQsInVzZXJuYW1lIjoiQWRtaW5Cb3QiLCJyZWZfY29kZSI6IjFNOEVKSyIsImlhdCI6MTczNzQ2NzE0NSwiZXhwIjoxNzM4MDcxOTQ1fQ.invalid_signature_for_testing';

const TEST_JWT_25 = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyNSwidGVsZWdyYW1faWQiOjQyNTg1NTc0NCwidXNlcm5hbWUiOiJEaW1hT3NhZGNodWsiLCJyZWZfY29kZSI6IlRFU1RfMjUiLCJpYXQiOjE3Mzc0NjcxNDUsImV4cCI6MTczODA3MTk0NX0.invalid_signature_for_testing';

async function makeRequest(path, method = 'GET', body = null, jwt = TEST_JWT_184) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${jwt}`
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(data);
          resolve({ status: res.statusCode, data: parsedData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    req.setTimeout(10000, () => reject(new Error('Timeout')));
    
    if (body) {
      req.write(JSON.stringify(body));
    }
    
    req.end();
  });
}

async function debugDisplayChainBreakpoint() {
  console.log('üîç –¢–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BREAKPOINT –¶–ï–ü–û–ß–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø');
  console.log('='.repeat(65));
  
  // –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–≤–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è User 184
  console.log('\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò –î–õ–Ø USER 184 (–ê–ö–¢–ò–í–ù–´–ô)');
  
  // –ó–≤–µ–Ω–æ 1: Health check
  try {
    const healthResponse = await makeRequest('/health');
    console.log(`‚úÖ –ó–≤–µ–Ω–æ 0 (Server Health): ${healthResponse.status === 200 ? 'OK' : 'FAIL'}`);
  } catch (error) {
    console.log(`‚ùå –ó–≤–µ–Ω–æ 0 (Server Health): FAIL - ${error.message}`);
  }
  
  // –ó–≤–µ–Ω–æ 2: Balance API
  try {
    const balanceResponse = await makeRequest('/api/v2/wallet/balance?user_id=184', 'GET', null, TEST_JWT_184);
    console.log(`üìä –ó–≤–µ–Ω–æ 1 (Balance API): ${balanceResponse.status}`);
    if (balanceResponse.status === 200 && balanceResponse.data.success) {
      console.log(`   TON Balance: ${balanceResponse.data.data.tonBalance}`);
      console.log(`   UNI Balance: ${balanceResponse.data.data.uniBalance}`);
    } else {
      console.log(`   Error: ${JSON.stringify(balanceResponse.data)}`);
    }
  } catch (error) {
    console.log(`‚ùå –ó–≤–µ–Ω–æ 1 (Balance API): FAIL - ${error.message}`);
  }
  
  // –ó–≤–µ–Ω–æ 3: TON Deposit —Å–∏–º—É–ª—è—Ü–∏—è
  try {
    console.log(`\nüß™ –ó–≤–µ–Ω–æ 2 (TON Deposit Test): –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞`);
    const testDepositData = {
      user_id: 184,
      ton_tx_hash: `test_debug_184_${Date.now()}`,
      amount: 0.1,
      wallet_address: `UQTestWallet184_${Math.random().toString(36).substring(7)}`
    };
    
    const depositResponse = await makeRequest('/api/v2/wallet/ton-deposit', 'POST', testDepositData, TEST_JWT_184);
    console.log(`   Status: ${depositResponse.status}`);
    console.log(`   Response: ${JSON.stringify(depositResponse.data, null, 2)}`);
    
    if (depositResponse.status === 200) {
      console.log('‚úÖ TON Deposit endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è User 184');
    } else if (depositResponse.status === 404) {
      console.log('üö® BREAKPOINT –ù–ê–ô–î–ï–ù: 404 "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" –¥–ª—è User 184');
    } else if (depositResponse.status === 401) {
      console.log('üö® BREAKPOINT –ù–ê–ô–î–ï–ù: 401 "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" –¥–ª—è User 184');
    } else {
      console.log(`üö® BREAKPOINT –ù–ê–ô–î–ï–ù: ${depositResponse.status} —Å—Ç–∞—Ç—É—Å –¥–ª—è User 184`);
    }
  } catch (error) {
    console.log(`‚ùå –ó–≤–µ–Ω–æ 2 (TON Deposit): EXCEPTION - ${error.message}`);
  }
  
  // –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è User 25 (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π)
  console.log('\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò –î–õ–Ø USER 25 (–ü–†–û–ë–õ–ï–ú–ù–´–ô)');
  
  // Balance API –¥–ª—è User 25
  try {
    const balanceResponse = await makeRequest('/api/v2/wallet/balance?user_id=25', 'GET', null, TEST_JWT_25);
    console.log(`üìä Balance API –¥–ª—è User 25: ${balanceResponse.status}`);
    if (balanceResponse.status === 200 && balanceResponse.data.success) {
      console.log(`   TON Balance: ${balanceResponse.data.data.tonBalance}`);
      console.log(`   UNI Balance: ${balanceResponse.data.data.uniBalance}`);
    } else {
      console.log(`   Error: ${JSON.stringify(balanceResponse.data)}`);
    }
  } catch (error) {
    console.log(`‚ùå Balance API –¥–ª—è User 25: FAIL - ${error.message}`);
  }
  
  // TON Deposit –¥–ª—è User 25
  try {
    console.log(`\nüß™ TON Deposit Test –¥–ª—è User 25:`);
    const testDepositData = {
      user_id: 25,
      ton_tx_hash: `test_debug_25_${Date.now()}`,
      amount: 0.1,
      wallet_address: `UQTestWallet25_${Math.random().toString(36).substring(7)}`
    };
    
    const depositResponse = await makeRequest('/api/v2/wallet/ton-deposit', 'POST', testDepositData, TEST_JWT_25);
    console.log(`   Status: ${depositResponse.status}`);
    console.log(`   Response: ${JSON.stringify(depositResponse.data, null, 2)}`);
    
    if (depositResponse.status === 404) {
      console.log('üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù BREAKPOINT: User 25 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!');
    }
  } catch (error) {
    console.log(`‚ùå TON Deposit –¥–ª—è User 25: EXCEPTION - ${error.message}`);
  }
  
  // –¢–ï–°–¢ 3: –ö—Ä–æ—Å—Å-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (User 184 JWT + User 25 data)
  console.log('\n3Ô∏è‚É£ –¢–ï–°–¢ –ö–†–û–°–°-–ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò (–°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´)');
  
  try {
    console.log(`üß™ User 184 JWT + User 25 deposit data:`);
    const crossTestData = {
      user_id: 25,  // –î–µ–ø–æ–∑–∏—Ç –¥–ª—è User 25
      ton_tx_hash: `cross_test_${Date.now()}`,
      amount: 0.05,
      wallet_address: `UQCrossTest_${Math.random().toString(36).substring(7)}`
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT –æ—Ç User 184, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç User 25
    const crossResponse = await makeRequest('/api/v2/wallet/ton-deposit', 'POST', crossTestData, TEST_JWT_184);
    console.log(`   Status: ${crossResponse.status}`);
    console.log(`   Response: ${JSON.stringify(crossResponse.data, null, 2)}`);
    
    if (crossResponse.status === 404) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ —Ç–æ—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã "—Ä–∞–∑–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"!');
      console.log('   JWT –æ—Ç User 184, –Ω–æ system –∏—â–µ—Ç User 25 - –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç!');
    }
  } catch (error) {
    console.log(`‚ùå Cross-auth test: EXCEPTION - ${error.message}`);
  }
  
  // –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó JWT –¢–û–ö–ï–ù–û–í');
  
  const decodeJWT = (token) => {
    try {
      const payload = token.split('.')[1];
      const decoded = JSON.parse(atob(payload));
      return decoded;
    } catch (e) {
      return null;
    }
  };
  
  const jwt184 = decodeJWT(TEST_JWT_184);
  const jwt25 = decodeJWT(TEST_JWT_25);
  
  console.log('\nüìã JWT 184 payload:', JSON.stringify(jwt184, null, 2));
  console.log('\nüìã JWT 25 payload:', JSON.stringify(jwt25, null, 2));
  
  // –¢–ï–°–¢ 5: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ controller –ª–æ–≥–∏–∫–∏
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó CONTROLLER –õ–û–ì–ò–ö–ò');
  
  console.log('\nüîç –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï CONTROLLER:');
  console.log('1. validateTelegramAuth(req) ‚Üí –∏–∑–≤–ª–µ–∫–∞–µ—Ç telegram.user.id –∏–∑ JWT');
  console.log('2. getUserByTelegramId(telegram.user.id) ‚Üí –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î');
  console.log('3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù ‚Üí return 404');
  console.log('4. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç processTonDeposit()');
  
  console.log('\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô:');
  console.log('1. Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JWT –æ—Ç User A (telegram_id: 123)');
  console.log('2. –ù–æ –≤ body —É–∫–∞–∑–∞–Ω user_id –æ—Ç User B');
  console.log('3. Controller –∏—â–µ—Ç User A –ø–æ telegram_id –∏–∑ JWT');
  console.log('4. User A –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí 404 error');
  console.log('5. processTonDeposit() –ù–ò–ö–û–ì–î–ê –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø');
  
  // –¢–ï–°–¢ 6: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\n6Ô∏è‚É£ –¢–û–ß–ö–ò BREAKPOINT –ò –†–ï–®–ï–ù–ò–Ø');
  
  console.log('\nüéØ BREAKPOINT #1: JWT vs Body Mismatch');
  console.log('   - JWT —Å–æ–¥–µ—Ä–∂–∏—Ç telegram_id –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('   - Body —Å–æ–¥–µ—Ä–∂–∏—Ç user_id –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('   - Controller –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ');
  
  console.log('\nüéØ BREAKPOINT #2: Authentication Logic');
  console.log('   - getUserByTelegramId –∏—â–µ—Ç –ø–æ JWT telegram_id');
  console.log('   - –ù–û –¥–µ–ø–æ–∑–∏—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç –¥—Ä—É–≥–æ–≥–æ telegram –∞–∫–∫–∞—É–Ω—Ç–∞');
  console.log('   - –ù–µ—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞');
  
  console.log('\nüéØ BREAKPOINT #3: Error Handling');
  console.log('   - 404 errors –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
  console.log('   - Frontend –Ω–µ –∑–Ω–∞–µ—Ç —á—Ç–æ –∑–∞–ø—Ä–æ—Å failed');
  console.log('   - –ë–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –≤–∏–¥–∏–º—ã—Ö –ø—Ä–∏—á–∏–Ω');
  
  console.log('\nüí° –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('1. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ tonDeposit controller');
  console.log('2. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ UI');
  console.log('3. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É auto-creation –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('4. –î–æ–±–∞–≤–∏—Ç—å fallback –ø–æ wallet_address –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ telegram_id');
  
  return true;
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
debugDisplayChainBreakpoint()
  .then(() => console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ breakpoint –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
  .catch(error => console.error('\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error));