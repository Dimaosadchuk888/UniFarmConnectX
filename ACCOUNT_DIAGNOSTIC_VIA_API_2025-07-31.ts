#!/usr/bin/env tsx
/**
 * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í –ß–ï–†–ï–ó API ENDPOINTS
 * –≠—Ç–∞–ª–æ–Ω: User ID 25, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API
 * –î–∞—Ç–∞: 31.07.2025
 */

import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3000';

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í –ß–ï–†–ï–ó API');
console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
console.log('='.repeat(80));

interface UserAnalysis {
  userId: number;
  status: 'SUCCESS' | 'ERROR' | 'MISSING';
  balanceData?: any;
  farmingData?: any;
  errors: string[];
  differences: string[];
}

async function testApiEndpoint(endpoint: string, description: string): Promise<any> {
  try {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${description}`);
    const response = await fetch(`${API_BASE}${endpoint}`);
    
    if (!response.ok) {
      console.log(`‚ùå ${endpoint}: ${response.status} ${response.statusText}`);
      return { error: `${response.status} ${response.statusText}` };
    }
    
    const data = await response.json();
    console.log(`‚úÖ ${endpoint}: OK`);
    return data;
    
  } catch (error) {
    console.log(`‚ùå ${endpoint}: ${error.message}`);
    return { error: error.message };
  }
}

async function analyzeSystemEndpoints(): Promise<void> {
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–´–• ENDPOINTS:');
  
  const endpoints = [
    { path: '/api/health', desc: 'Health check' },
    { path: '/api/v2/users/balance', desc: 'User balance (—Ç—Ä–µ–±—É–µ—Ç JWT)' },
    { path: '/api/v2/users/farming', desc: 'Farming data (—Ç—Ä–µ–±—É–µ—Ç JWT)' },
    { path: '/api/v2/transactions', desc: 'Transactions (—Ç—Ä–µ–±—É–µ—Ç JWT)' },
    { path: '/api/v2/wallet/balance', desc: 'Wallet balance (—Ç—Ä–µ–±—É–µ—Ç JWT)' }
  ];

  for (const endpoint of endpoints) {
    await testApiEndpoint(endpoint.path, endpoint.desc);
  }
}

async function analyzeAuthenticationRequirements(): Promise<void> {
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ï–ë–û–í–ê–ù–ò–ô –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints –±–µ–∑ JWT
  const response = await fetch(`${API_BASE}/api/v2/users/balance`);
  const data = await response.json();
  
  console.log('üìã –û—Ç–≤–µ—Ç –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞:');
  console.log(JSON.stringify(data, null, 2));
  
  if (data.need_jwt_token) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  } else {
    console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  }
}

async function analyzeClientSideStructure(): Promise<void> {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´:');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º frontend –ª–æ–≥–∏–∫—É
  const frontendFiles = [
    './client/src/contexts/UserContext.tsx',
    './client/src/services/tonConnectService.ts',
    './client/src/hooks/useJwtTokenWatcher.ts',
    './client/src/components/wallet/BalanceCard.tsx'
  ];

  console.log('üìÅ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –§–ê–ô–õ–´:');
  
  for (const filePath of frontendFiles) {
    try {
      const fs = await import('fs');
      const content = fs.readFileSync(filePath, 'utf8');
      const fileName = filePath.split('/').pop();
      
      console.log(`‚úÖ ${fileName}: –ù–ê–ô–î–ï–ù (${Math.round(content.length / 1024)}KB)`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      if (content.includes('User ID 25') || content.includes('user_id: 25')) {
        console.log(`   üéØ –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ User ID 25 (—ç—Ç–∞–ª–æ–Ω)`);
      }
      
      if (content.includes('localStorage') && filePath.includes('jwt')) {
        console.log(`   üíæ –†–∞–±–æ—Ç–∞–µ—Ç —Å localStorage –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤`);
      }
      
      if (content.includes('balance_uni') && content.includes('balance_ton')) {
        console.log(`   üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç UNI –∏ TON –±–∞–ª–∞–Ω—Å—ã`);
      }
      
      if (content.includes('telegram_id')) {
        console.log(`   üì± –†–∞–±–æ—Ç–∞–µ—Ç —Å Telegram ID`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${filePath.split('/').pop()}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  }
}

async function analyzeBackendStructure(): Promise<void> {
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ï–†–í–ï–†–ù–û–ô –°–¢–†–£–ö–¢–£–†–´:');
  
  const backendFiles = [
    './modules/auth/service.ts',
    './core/BalanceManager.ts',
    './modules/transactions/service.ts',
    './modules/boost/service.ts'
  ];

  console.log('üñ•Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ï–†–í–ï–†–ù–´–ï –§–ê–ô–õ–´:');
  
  for (const filePath of backendFiles) {
    try {
      const fs = await import('fs');
      const content = fs.readFileSync(filePath, 'utf8');
      const fileName = filePath.split('/').pop();
      
      console.log(`‚úÖ ${fileName}: –ù–ê–ô–î–ï–ù (${Math.round(content.length / 1024)}KB)`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      if (content.includes('getUserById') || content.includes('findUserById')) {
        console.log(`   üîç –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
      
      if (content.includes('updateUserBalance') || content.includes('subtractBalance')) {
        console.log(`   üí∞ –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º`);
      }
      
      if (content.includes('ANTI_ROLLBACK_PROTECTION')) {
        console.log(`   üõ°Ô∏è –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—â–∏—Ç—É –æ—Ç rollback –æ–ø–µ—Ä–∞—Ü–∏–π`);
      }
      
      if (content.includes('telegram_id') && content.includes('user_id')) {
        console.log(`   üîó –°–≤—è–∑—ã–≤–∞–µ—Ç telegram_id —Å user_id`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${filePath.split('/').pop()}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  }
}

async function identifyAccountDiscrepancies(): Promise<void> {
  console.log('\n5Ô∏è‚É£ –í–´–Ø–í–õ–ï–ù–ò–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –í –ê–ö–ö–ê–£–ù–¢–ê–•:');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const fs = await import('fs');
  
  try {
    const replitMd = fs.readFileSync('./replit.md', 'utf8');
    
    console.log('üìã –ò–ó–í–ï–°–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:');
    
    const problemPatterns = [
      { pattern: /JWT.*disappear/i, issue: 'JWT —Ç–æ–∫–µ–Ω—ã –∏—Å—á–µ–∑–∞—é—Ç' },
      { pattern: /deposit.*disappeared/i, issue: '–î–µ–ø–æ–∑–∏—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç' },
      { pattern: /balance.*discrepancy/i, issue: '–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö' },
      { pattern: /cache.*issue/i, issue: '–ü—Ä–æ–±–ª–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è' },
      { pattern: /rollback.*protection/i, issue: 'Rollback –æ–ø–µ—Ä–∞—Ü–∏–∏' },
      { pattern: /User.*25.*problem/i, issue: '–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã User 25' }
    ];

    problemPatterns.forEach(({ pattern, issue }, index) => {
      const matches = replitMd.match(pattern);
      if (matches) {
        console.log(`   ${index + 1}. ${issue}: –û–ë–ù–ê–†–£–ñ–ï–ù–û`);
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const compensationMatches = replitMd.match(/compensation|–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è|–∏—Å–ø—Ä–∞–≤–ª/gi) || [];
    console.log(`\nüí∞ –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–π: ${compensationMatches.length}`);
    
    const fixMatches = replitMd.match(/‚úÖ.*[–ò–∏]—Å–ø—Ä–∞–≤–ª–µ–Ω|‚úÖ.*–†–ï–®–ï–ù|‚úÖ.*–ì–û–¢–û–í/g) || [];
    console.log(`üîß –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixMatches.length}`);
    
  } catch (error) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é');
  }
}

async function generateUnificationStrategy(): Promise<void> {
  console.log('\n6Ô∏è‚É£ –°–¢–†–ê–¢–ï–ì–ò–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–ò –ê–ö–ö–ê–£–ù–¢–û–í:');
  console.log('='.repeat(80));

  const strategy = `
üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê

üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:
1. JWT —Ç–æ–∫–µ–Ω—ã –∏—Å—á–µ–∑–∞—é—Ç ‚Üí –°–∏—Å—Ç–µ–º–∞ JWT Token Monitor —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
2. –î–µ–ø–æ–∑–∏—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç ‚Üí TON Connect –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞  
3. Rollback –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Üí –ó–∞—â–∏—Ç–∞ ANTI_ROLLBACK_PROTECTION –¥–æ–±–∞–≤–ª–µ–Ω–∞
4. –ü—Ä–æ–±–ª–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ‚Üí –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

üìä –†–ê–ó–õ–ò–ß–ò–Ø –ú–ï–ñ–î–£ –ê–ö–ö–ê–£–ù–¢–ê–ú–ò:
‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å—Ç–∞—Ä—ã–µ vs –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
‚Ä¢ –ù–∞–ª–∏—á–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –°—Ç–∞—Ç—É—Å TON Boost (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (ton_farming_data)
‚Ä¢ –í–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–¥–∞ (–∫–µ—à –ø—Ä–æ–±–ª–µ–º—ã)

üõ†Ô∏è –ü–õ–ê–ù –£–ù–ò–§–ò–ö–ê–¶–ò–ò:

–≠–¢–ê–ü 1 - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:
‚ñ° –°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
‚ñ° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API endpoints
‚ñ° –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∞–ª–æ–Ω–æ–º (User ID 25)
‚ñ° –í—ã—è–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏ —Å–≤—è–∑–∏

–≠–¢–ê–ü 2 - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø:
‚ñ° –°–æ–∑–¥–∞—Ç—å backup –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚ñ° –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
‚ñ° –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ton_farming_data –∑–∞–ø–∏—Å–∏
‚ñ° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
‚ñ° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å referral_code –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–≠–¢–ê–ü 3 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
‚ñ° –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ñ° –°–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚ñ° –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π –≤—Ö–æ–¥
‚ñ° –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –ù–ï –∏–∑–º–µ–Ω—è—Ç—å User ID 25 (—ç—Ç–∞–ª–æ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ UnifiedTransactionService
‚Ä¢ –ü—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ —á–µ—Ä–µ–∑ backup

‚ö†Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è backup
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
`;

  console.log(strategy);
}

async function main() {
  try {
    console.log('üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ß–ï–†–ï–ó API...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ endpoints
    await analyzeSystemEndpoints();
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await analyzeAuthenticationRequirements();
    
    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    await analyzeClientSideStructure();
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É  
    await analyzeBackendStructure();
    
    // 5. –í—ã—è–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    await identifyAccountDiscrepancies();
    
    // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    await generateUnificationStrategy();
    
    console.log('\n' + '='.repeat(80));
    console.log('üèÅ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    console.log('üìä –í—ã—è–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    console.log('‚ö†Ô∏è –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ API');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

main();