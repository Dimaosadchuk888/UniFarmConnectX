#!/usr/bin/env tsx
/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 251 –∏ 255
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –º–µ—Ç–æ–¥—ã —á—Ç–æ –∏ –ø—Ä–æ–¥–∞–∫—à–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

interface UserBoostData {
  user_id: number;
  current_ton_balance: number;
  current_uni_balance: number;
  ton_boost_active: boolean;
  ton_boost_package: string | null;
  ton_boost_rate: number;
}

interface BoostPackage {
  id: number;
  name: string;
  min_amount: number;
  rate_ton_per_second: number;
  bonus_uni: number;
}

async function getUserCurrentState(userId: number): Promise<UserBoostData | null> {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  const { data: user, error } = await supabase
    .from('users')
    .select(`
      id,
      balance_ton,
      balance_uni,
      ton_boost_active,
      ton_boost_package,
      ton_boost_rate
    `)
    .eq('id', userId)
    .single();
    
  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
  
  if (!user) {
    console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
  }
  
  const userData: UserBoostData = {
    user_id: user.id,
    current_ton_balance: parseFloat(user.balance_ton) || 0,
    current_uni_balance: parseFloat(user.balance_uni) || 0,
    ton_boost_active: user.ton_boost_active || false,
    ton_boost_package: user.ton_boost_package,
    ton_boost_rate: parseFloat(user.ton_boost_rate) || 0
  };
  
  console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
    tonBalance: userData.current_ton_balance,
    uniBalance: userData.current_uni_balance,
    boostActive: userData.ton_boost_active,
    currentPackage: userData.ton_boost_package,
    currentRate: userData.ton_boost_rate
  });
  
  return userData;
}

async function getAvailableBoostPackages(): Promise<BoostPackage[]> {
  console.log('\nüì¶ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã...');
  
  const { data: packages, error } = await supabase
    .from('boost_packages')
    .select('*')
    .eq('is_active', true)
    .order('min_amount', { ascending: true });
    
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤:', error);
    return [];
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${packages?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:`);
  packages?.forEach(pkg => {
    console.log(`  - ${pkg.name}: ${pkg.min_amount} TON, —Å—Ç–∞–≤–∫–∞: ${pkg.rate_ton_per_second}, –±–æ–Ω—É—Å UNI: ${pkg.bonus_uni}`);
  });
  
  return packages || [];
}

async function selectOptimalPackage(depositAmount: number, packages: BoostPackage[]): Promise<BoostPackage | null> {
  // –ù–∞–π–¥–µ–º –ø–∞–∫–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞
  const suitablePackages = packages.filter(pkg => depositAmount >= pkg.min_amount);
  
  if (suitablePackages.length === 0) {
    console.error(`‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ ${depositAmount} TON`);
    return null;
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–∞–∫–µ—Ç (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã)
  const optimalPackage = suitablePackages.reduce((best, current) => 
    current.rate_ton_per_second > best.rate_ton_per_second ? current : best
  );
  
  console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è ${depositAmount} TON:`, {
    name: optimalPackage.name,
    minAmount: optimalPackage.min_amount,
    rate: optimalPackage.rate_ton_per_second,
    bonusUni: optimalPackage.bonus_uni
  });
  
  return optimalPackage;
}

async function createBoostPurchaseTransaction(userId: number, packageData: BoostPackage, depositAmount: number) {
  console.log(`\nüí∞ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ TON Boost –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  const transactionData = {
    user_id: userId,
    type: 'BOOST_PURCHASE',
    amount: depositAmount,
    currency: 'TON',
    status: 'completed',
    description: `TON Boost Package Purchase: ${packageData.name}`,
    metadata: {
      package_id: packageData.id,
      package_name: packageData.name,
      deposit_amount: depositAmount,
      rate_ton_per_second: packageData.rate_ton_per_second,
      bonus_uni: packageData.bonus_uni,
      manual_activation: true,
      activation_date: new Date().toISOString()
    },
    created_at: new Date().toISOString()
  };
  
  const { data: transaction, error } = await supabase
    .from('transactions')
    .insert(transactionData)
    .select()
    .single();
    
  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
  
  console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
    id: transaction.id,
    amount: transaction.amount,
    type: transaction.type,
    status: transaction.status
  });
  
  return transaction;
}

async function createTonFarmingData(userId: number, packageData: BoostPackage, depositAmount: number) {
  console.log(`\nüöú –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
  const { data: existing } = await supabase
    .from('ton_farming_data')
    .select('*')
    .eq('user_id', userId.toString())
    .single();
    
  if (existing) {
    console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å—å –≤ ton_farming_data —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
    
    const { data: updated, error } = await supabase
      .from('ton_farming_data')
      .update({
        farming_balance: depositAmount,
        farming_rate: packageData.rate_ton_per_second,
        boost_package_id: packageData.id,
        last_claim: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('user_id', userId.toString())
      .select()
      .single();
      
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return null;
    }
    
    console.log(`‚úÖ ton_farming_data –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return updated;
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const farmingData = {
      user_id: userId.toString(),
      farming_balance: depositAmount,
      farming_rate: packageData.rate_ton_per_second,
      boost_package_id: packageData.id,
      last_claim: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: created, error } = await supabase
      .from('ton_farming_data')
      .insert(farmingData)
      .select()
      .single();
      
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return null;
    }
    
    console.log(`‚úÖ ton_farming_data —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return created;
  }
}

async function updateUserBoostStatus(userId: number, packageData: BoostPackage) {
  console.log(`\nüë§ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å TON Boost –≤ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
  
  const updateData = {
    ton_boost_active: true,
    ton_boost_package: packageData.name,
    ton_boost_package_id: packageData.id,
    ton_boost_rate: packageData.rate_ton_per_second,
    updated_at: new Date().toISOString()
  };
  
  const { data: updated, error } = await supabase
    .from('users')
    .update(updateData)
    .eq('id', userId)
    .select()
    .single();
    
  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
  
  console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, {
    ton_boost_active: updated.ton_boost_active,
    ton_boost_package: updated.ton_boost_package,
    ton_boost_rate: updated.ton_boost_rate
  });
  
  return updated;
}

async function awardUniBonus(userId: number, packageData: BoostPackage) {
  console.log(`\nüéÅ –ù–∞—á–∏—Å–ª—è–µ–º UNI –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
  
  if (packageData.bonus_uni <= 0) {
    console.log(`‚ÑπÔ∏è UNI –±–æ–Ω—É—Å –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –¥–ª—è –ø–∞–∫–µ—Ç–∞ ${packageData.name}`);
    return null;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–æ–Ω—É—Å–∞
  const bonusTransaction = {
    user_id: userId,
    type: 'DAILY_BONUS',
    amount: packageData.bonus_uni,
    currency: 'UNI',
    status: 'completed',
    description: `TON Boost Package Bonus: ${packageData.bonus_uni} UNI`,
    metadata: {
      bonus_type: 'ton_boost_package',
      package_id: packageData.id,
      package_name: packageData.name,
      manual_activation: true
    },
    created_at: new Date().toISOString()
  };
  
  const { data: transaction, error } = await supabase
    .from('transactions')
    .insert(bonusTransaction)
    .select()
    .single();
    
  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UNI –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user, error: balanceError } = await supabase
    .from('users')
    .select('balance_uni')
    .eq('id', userId)
    .single();
    
  if (balanceError) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, balanceError);
    return transaction;
  }
  
  const newBalance = parseFloat(user.balance_uni || '0') + packageData.bonus_uni;
  
  const { error: updateError } = await supabase
    .from('users')
    .update({ balance_uni: newBalance })
    .eq('id', userId);
    
  if (updateError) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UNI –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, updateError);
  } else {
    console.log(`‚úÖ UNI –±–æ–Ω—É—Å ${packageData.bonus_uni} –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);
  }
  
  return transaction;
}

async function activateBoostForUser(userId: number, depositAmount: number = 2): Promise<boolean> {
  console.log(`\nüöÄ === –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId} ===`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentState = await getUserCurrentState(userId);
    if (!currentState) {
      return false;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    const packages = await getAvailableBoostPackages();
    if (packages.length === 0) {
      return false;
    }
    
    // 3. –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
    const selectedPackage = await selectOptimalPackage(depositAmount, packages);
    if (!selectedPackage) {
      return false;
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
    const purchaseTransaction = await createBoostPurchaseTransaction(userId, selectedPackage, depositAmount);
    if (!purchaseTransaction) {
      return false;
    }
    
    // 5. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞
    const farmingData = await createTonFarmingData(userId, selectedPackage, depositAmount);
    if (!farmingData) {
      return false;
    }
    
    // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await updateUserBoostStatus(userId, selectedPackage);
    if (!updatedUser) {
      return false;
    }
    
    // 7. –ù–∞—á–∏—Å–ª—è–µ–º UNI –±–æ–Ω—É—Å –µ—Å–ª–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω
    await awardUniBonus(userId, selectedPackage);
    
    console.log(`\nüéâ === –ê–ö–¢–ò–í–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId} ===`);
    console.log(`‚úÖ –ü–∞–∫–µ—Ç: ${selectedPackage.name}`);
    console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç: ${depositAmount} TON`);
    console.log(`‚úÖ –°—Ç–∞–≤–∫–∞: ${selectedPackage.rate_ton_per_second} TON/—Å–µ–∫`);
    console.log(`‚úÖ UNI –±–æ–Ω—É—Å: ${selectedPackage.bonus_uni} UNI`);
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return false;
  }
}

async function verifyActivation(userId: number): Promise<void> {
  console.log(`\nüîç === –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId} ===`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ users
  const { data: user } = await supabase
    .from('users')
    .select('ton_boost_active, ton_boost_package, ton_boost_rate')
    .eq('id', userId)
    .single();
    
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
  const { data: farming } = await supabase
    .from('ton_farming_data')
    .select('farming_balance, farming_rate, boost_package_id')
    .eq('user_id', userId.toString())
    .single();
    
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: transactions } = await supabase
    .from('transactions')
    .select('type, amount, currency, status, created_at')
    .eq('user_id', userId)
    .eq('type', 'BOOST_PURCHASE')
    .order('created_at', { ascending: false })
    .limit(1);
    
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
  console.log(`  Users table:`, {
    boost_active: user?.ton_boost_active,
    package: user?.ton_boost_package,
    rate: user?.ton_boost_rate
  });
  console.log(`  Farming data:`, {
    balance: farming?.farming_balance,
    rate: farming?.farming_rate,
    package_id: farming?.boost_package_id
  });
  console.log(`  Recent transactions:`, transactions?.length || 0);
  
  const isFullyActivated = 
    user?.ton_boost_active === true &&
    user?.ton_boost_package &&
    farming?.farming_balance > 0 &&
    transactions && transactions.length > 0;
    
  console.log(`${isFullyActivated ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${isFullyActivated ? '–£–°–ü–ï–®–ù–û' : '–ù–ï–ü–û–õ–ù–ê–Ø'}`);
}

async function main() {
  console.log('üöÄ === –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø TON BOOST –ü–ê–ö–ï–¢–û–í ===');
  console.log('üìÖ –î–∞—Ç–∞:', new Date().toISOString());
  console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 251, 255');
  console.log('üí∞ –î–µ–ø–æ–∑–∏—Ç –∫–∞–∂–¥–æ–º—É: 2 TON');
  
  const targetUsers = [251, 255];
  const depositAmount = 2;
  const results: { userId: number; success: boolean }[] = [];
  
  for (const userId of targetUsers) {
    const success = await activateBoostForUser(userId, depositAmount);
    results.push({ userId, success });
    
    if (success) {
      await verifyActivation(userId);
    }
    
    console.log('\n' + '='.repeat(80));
  }
  
  console.log('\nüìà === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
  results.forEach(({ userId, success }) => {
    console.log(`${success ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${success ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : '–û–®–ò–ë–ö–ê'}`);
  });
  
  const successCount = results.filter(r => r.success).length;
  console.log(`\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
  
  if (successCount === results.length) {
    console.log('üéâ –í–°–ï –ê–ö–¢–ò–í–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

export { activateBoostForUser, verifyActivation };