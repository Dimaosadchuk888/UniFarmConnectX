/**
 * T10: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è Telegram Mini App UniFarm
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotFather API –¥–ª—è production –∑–∞–ø—É—Å–∫–∞
 */

import dotenv from 'dotenv';
import fetch from 'node-fetch';

dotenv.config();

class TelegramMiniAppPublisher {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.productionUrl = 'https://979d1bb5-d322-410b-9bb8-41ff6d7f2cc5-00-16l4whe1y4mgv.pike.replit.dev';
    this.botUsername = '@UniFarming_Bot';
    this.apiBase = `https://api.telegram.org/bot${this.botToken}`;
    
    console.log('üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Telegram Mini App UniFarm');
    console.log(`Bot: ${this.botUsername}`);
    console.log(`Production URL: ${this.productionUrl}\n`);
  }

  /**
   * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   */
  async checkBotStatus() {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...');
    
    try {
      const response = await fetch(`${this.apiBase}/getMe`);
      const data = await response.json();
      
      if (data.ok) {
        console.log(`‚úÖ Bot –∞–∫—Ç–∏–≤–µ–Ω: @${data.result.username}`);
        console.log(`   ID: ${data.result.id}`);
        console.log(`   Name: ${data.result.first_name}`);
        return true;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', data.description);
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', error.message);
      return false;
    }
  }

  /**
   * 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è production
   */
  async setupWebhook() {
    console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production webhook...');
    
    try {
      const webhookUrl = `${this.productionUrl}/webhook`;
      const response = await fetch(`${this.apiBase}/setWebhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ["message", "callback_query", "web_app_data"]
        })
      });
      
      const data = await response.json();
      
      if (data.ok) {
        console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);
        return true;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', data.description);
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.message);
      return false;
    }
  }

  /**
   * 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  async setupBotCommands() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...');
    
    try {
      const commands = [
        {
          command: "start",
          description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å UniFarm Mini App"
        },
        {
          command: "app",
          description: "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        },
        {
          command: "help",
          description: "‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        }
      ];
      
      const response = await fetch(`${this.apiBase}/setMyCommands`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ commands })
      });
      
      const data = await response.json();
      
      if (data.ok) {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        commands.forEach(cmd => {
          console.log(`   /${cmd.command} - ${cmd.description}`);
        });
        return true;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥:', data.description);
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥:', error.message);
      return false;
    }
  }

  /**
   * 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Menu Button –¥–ª—è Mini App
   */
  async setupMenuButton() {
    console.log('üîò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Menu Button...');
    
    try {
      const response = await fetch(`${this.apiBase}/setChatMenuButton`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          menu_button: {
            type: "web_app",
            text: "üåæ UniFarm",
            web_app: {
              url: this.productionUrl
            }
          }
        })
      });
      
      const data = await response.json();
      
      if (data.ok) {
        console.log('‚úÖ Menu Button –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        console.log(`   –¢–µ–∫—Å—Ç: "üåæ UniFarm"`);
        console.log(`   URL: ${this.productionUrl}`);
        return true;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Menu Button:', data.description);
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Menu Button:', error.message);
      return false;
    }
  }

  /**
   * 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Mini App
   */
  async testMiniAppAccess() {
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Mini App...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const mainResponse = await fetch(this.productionUrl);
      const mainPageOk = mainResponse.status === 200;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json
      const manifestResponse = await fetch(`${this.productionUrl}/manifest.json`);
      const manifestOk = manifestResponse.status === 200;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
      const healthResponse = await fetch(`${this.productionUrl}/health`);
      const healthOk = healthResponse.status === 200;
      
      console.log(`   –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${mainPageOk ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Manifest.json: ${manifestOk ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Health endpoint: ${healthOk ? '‚úÖ' : '‚ùå'}`);
      
      const allOk = mainPageOk && manifestOk && healthOk;
      
      if (allOk) {
        console.log('‚úÖ Mini App –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Mini App –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }
      
      return allOk;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error.message);
      return false;
    }
  }

  /**
   * 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ manifest.json
   */
  async validateManifest() {
    console.log('üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json...');
    
    try {
      const response = await fetch(`${this.productionUrl}/manifest.json`);
      const manifestText = await response.text();
      const manifestSize = Buffer.byteLength(manifestText, 'utf8');
      
      console.log(`   –†–∞–∑–º–µ—Ä: ${manifestSize} –±–∞–π—Ç (–ª–∏–º–∏—Ç: 1MB)`);
      
      if (manifestSize > 1048576) { // 1MB
        console.log('‚ùå Manifest –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 1MB');
        return false;
      }
      
      try {
        const manifest = JSON.parse(manifestText);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${manifest.name}`);
        console.log(`   Start URL: ${manifest.start_url}`);
        console.log(`   Scope: ${manifest.scope}`);
        console.log('‚úÖ Manifest –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        return true;
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ manifest.json');
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ manifest:', error.message);
      return false;
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async publishMiniApp() {
    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é Mini App...\n');
    
    const steps = [
      { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞', method: () => this.checkBotStatus() },
      { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è manifest', method: () => this.validateManifest() },
      { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏', method: () => this.testMiniAppAccess() },
      { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook', method: () => this.setupWebhook() },
      { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥', method: () => this.setupBotCommands() },
      { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Menu Button', method: () => this.setupMenuButton() }
    ];
    
    let successCount = 0;
    
    for (const step of steps) {
      try {
        const result = await step.method();
        if (result) {
          successCount++;
        }
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      } catch (error) {
        console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ "${step.name}":`, error.message);
        console.log('');
      }
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò');
    console.log('=' .repeat(50));
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: ${successCount}/${steps.length}`);
    
    if (successCount === steps.length) {
      console.log('üéâ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
      console.log('');
      console.log('üîó Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–∞–º:');
      console.log(`   –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/UniFarming_Bot/app`);
      console.log(`   –ß–µ—Ä–µ–∑ –±–æ—Ç–∞: https://t.me/UniFarming_Bot`);
      console.log('');
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç:');
      console.log('   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å @UniFarming_Bot –≤ Telegram');
      console.log('   ‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "üåæ UniFarm" –≤ –º–µ–Ω—é');
      console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start');
      console.log('   ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ initData');
      console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Ñ–∞—Ä–º–∏–Ω–≥, –±–∞–ª–∞–Ω—Å, —Ä–µ—Ñ–µ—Ä–∞–ª—ã');
    } else {
      console.log('‚ö†Ô∏è –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–ê');
      console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫');
    }
    
    return successCount === steps.length;
  }
}

async function main() {
  const publisher = new TelegramMiniAppPublisher();
  await publisher.publishMiniApp();
}

main().catch(console.error);