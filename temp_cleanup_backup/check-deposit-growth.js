import { createClient } from '@supabase/supabase-js';

// Supabase connection
const supabaseUrl = process.env.SUPABASE_URL || 'https://wunnsvicbebssrjqedor.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1bm5zdmljYmVic3NyanFlZG9yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTkwMzA3NywiZXhwIjoyMDY1NDc5MDc3fQ.pjlz8qlmQLUa9BZb12pt9QZU5Fk9YvqxpSZGA84oqog';

async function checkDepositGrowth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ UniFarm...');
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ UNI –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    console.log('\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ UNI –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const { data: uniDeposits, error: uniError } = await supabase
      .from('users')
      .select(`
        id, 
        telegram_id, 
        username, 
        balance_uni, 
        balance_ton,
        uni_deposit_amount,
        uni_farming_start_timestamp,
        uni_farming_last_update,
        uni_farming_rate,
        created_at
      `)
      .not('uni_deposit_amount', 'is', null)
      .not('uni_deposit_amount', 'eq', '0')
      .order('uni_farming_start_timestamp', { ascending: true });
    
    if (uniError) {
      console.error('‚ùå UNI deposits query error:', uniError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniDeposits.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö UNI –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      
      uniDeposits.forEach(user => {
        const startDate = new Date(user.uni_farming_start_timestamp);
        const lastUpdate = user.uni_farming_last_update ? new Date(user.uni_farming_last_update) : null;
        const daysSinceStart = Math.floor((Date.now() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        const expectedRate = 0.01; // 1% –≤ –¥–µ–Ω—å –∏–∑ FARMING_CONFIG.DEFAULT_RATE
        const depositAmount = parseFloat(user.uni_deposit_amount || '0');
        const expectedGrowth = depositAmount * expectedRate * daysSinceStart;
        const currentBalance = parseFloat(user.balance_uni || '0');
        
        console.log(`\n  üåæ User ${user.id} (${user.username || user.telegram_id}):`);
        console.log(`    üìÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω: ${startDate.toISOString().split('T')[0]} (${daysSinceStart} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`);
        console.log(`    üí∞ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${user.uni_deposit_amount} UNI`);
        console.log(`    üìä –°—Ç–∞–≤–∫–∞: ${user.uni_farming_rate || expectedRate} –≤ –¥–µ–Ω—å`);
        console.log(`    üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance_uni} UNI`);
        console.log(`    üéØ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${expectedGrowth.toFixed(6)} UNI (–ø—Ä–∏ 1% –≤ –¥–µ–Ω—å)`);
        console.log(`    üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç: ${(currentBalance - depositAmount).toFixed(6)} UNI`);
        console.log(`    ‚öñÔ∏è  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${currentBalance >= depositAmount + expectedGrowth * 0.9 ? '‚úÖ –ù–æ—Ä–º–∞' : '‚ö†Ô∏è –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ'}`);
        
        if (lastUpdate) {
          const hoursSinceUpdate = Math.floor((Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60));
          console.log(`    üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${hoursSinceUpdate} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`);
        }
      });
    }
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–∞–∫–µ—Ç–∞–º–∏
    console.log('\n\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const { data: tonBoosts, error: tonError } = await supabase
      .from('users')
      .select(`
        id, 
        telegram_id, 
        username, 
        balance_uni, 
        balance_ton,
        ton_farming_balance,
        ton_farming_rate,
        ton_farming_start_timestamp,
        ton_farming_last_update,
        created_at
      `)
      .not('ton_farming_balance', 'is', null)
      .not('ton_farming_balance', 'eq', '0')
      .order('ton_farming_start_timestamp', { ascending: true });
    
    if (tonError) {
      console.error('‚ùå TON Boost query error:', tonError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonBoosts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      
      tonBoosts.forEach(user => {
        const startDate = new Date(user.ton_farming_start_timestamp);
        const lastUpdate = user.ton_farming_last_update ? new Date(user.ton_farming_last_update) : null;
        const daysSinceStart = Math.floor((Date.now() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        const depositAmount = parseFloat(user.ton_farming_balance || '0');
        const dailyRate = parseFloat(user.ton_farming_rate || '0.001'); // –°—Ç–∞–≤–∫–∞ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç 1% –¥–æ 3%
        const expectedGrowth = depositAmount * dailyRate * daysSinceStart;
        const currentTonBalance = parseFloat(user.balance_ton || '0');
        
        console.log(`\n  üéØ User ${user.id} (${user.username || user.telegram_id}):`);
        console.log(`    üìÖ TON Boost —Å–æ–∑–¥–∞–Ω: ${startDate.toISOString().split('T')[0]} (${daysSinceStart} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`);
        console.log(`    üí∞ –î–µ–ø–æ–∑–∏—Ç TON: ${user.ton_farming_balance} TON`);
        console.log(`    üìä –°—Ç–∞–≤–∫–∞: ${(dailyRate * 100).toFixed(1)}% –≤ –¥–µ–Ω—å`);
        console.log(`    üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å TON: ${user.balance_ton} TON`);
        console.log(`    üéØ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${expectedGrowth.toFixed(8)} TON`);
        console.log(`    üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç: ${(currentTonBalance - depositAmount).toFixed(8)} TON`);
        console.log(`    ‚öñÔ∏è  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${currentTonBalance >= expectedGrowth * 0.8 ? '‚úÖ –ù–æ—Ä–º–∞' : '‚ö†Ô∏è –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ'}`);
        
        if (lastUpdate) {
          const hoursSinceUpdate = Math.floor((Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60));
          console.log(`    üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${hoursSinceUpdate} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`);
        }
      });
    }
    
    // 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    console.log('\n\nüí∞ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π...');
    const { data: rewardTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .in('transaction_type', ['FARMING_REWARD', 'REFERRAL_REWARD'])
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (txError) {
      console.error('‚ùå Transactions query error:', txError);
    } else {
      console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${rewardTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:`);
      
      const groupedByType = rewardTransactions.reduce((acc, tx) => {
        if (!acc[tx.transaction_type]) acc[tx.transaction_type] = [];
        acc[tx.transaction_type].push(tx);
        return acc;
      }, {});
      
      Object.entries(groupedByType).forEach(([type, transactions]) => {
        console.log(`\n  üìù ${type}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        transactions.slice(0, 5).forEach(tx => {
          const date = new Date(tx.created_at).toISOString().split('T')[0];
          console.log(`    - User ${tx.user_id}: ${tx.amount_uni || tx.amount_ton || '0'} ${tx.amount_uni ? 'UNI' : 'TON'} (${date})`);
        });
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    console.log('\n\n‚öôÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π...');
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ model.ts:');
    console.log('  - UNI Farming: 1% –≤ –¥–µ–Ω—å (0.01)');
    console.log('  - TON Boost –ø–∞–∫–µ—Ç—ã: 1%-3% –≤ –¥–µ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞–∫–µ—Ç–∞');
    console.log('  - –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå Deposit growth check failed:', error);
  }
}

checkDepositGrowth();