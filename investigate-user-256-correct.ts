#!/usr/bin/env tsx
/**
 * üéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 256 (—Å TON –∫–æ—à–µ–ª—å–∫–æ–º)
 * –ò—â–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã —É –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { supabase } from './core/supabase';

async function investigateCorrectUser256() {
  console.log('üéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 256');
  console.log('='.repeat(70));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 256 (—Å –∫–æ—à–µ–ª—å–∫–æ–º)
    console.log('\n1Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ID 256 (–° TON –ö–û–®–ï–õ–¨–ö–û–ú):');
    const { data: user256, error: user256Error } = await supabase
      .from('users')
      .select('*')
      .eq('id', 256)
      .single();

    if (user256Error || !user256) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 256 –Ω–µ –Ω–∞–π–¥–µ–Ω:', user256Error?.message);
      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 256:', {
      id: user256.id,
      telegram_id: user256.telegram_id,
      username: user256.username,
      ton_wallet_address: user256.ton_wallet_address,
      ton_wallet_verified: user256.ton_wallet_verified,
      balance_ton: user256.balance_ton,
      created_at: user256.created_at
    });

    // 2. –ò—â–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 256
    console.log('\n2Ô∏è‚É£ –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 256:');
    const { data: transactions256, error: tx256Error } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 256)
      .order('created_at', { ascending: false });

    if (tx256Error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tx256Error.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions256?.length || 0}`);
      transactions256?.forEach((tx, i) => {
        console.log(`\nüìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i + 1}:`, {
          id: tx.id,
          type: tx.type,
          amount: tx.amount,
          currency: tx.currency,
          status: tx.status,
          tx_hash: tx.tx_hash || '–ù–ï–¢ –•–ï–®–ê',
          created_at: tx.created_at,
          description: tx.description
        });
      });
    }

    // 3. –ü–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 256
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –î–ï–ü–û–ó–ò–¢–û–í –ü–û –ê–î–†–ï–°–£ –ö–û–®–ï–õ–¨–ö–ê ID 256:');
    const walletAddress = user256.ton_wallet_address;
    
    if (walletAddress) {
      // –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∞–¥—Ä–µ—Å–∞ –≤ description
      const { data: walletDeposits, error: walletError } = await supabase
        .from('transactions')
        .select('*')
        .eq('type', 'TON_DEPOSIT')
        .ilike('description', `%${walletAddress}%`)
        .order('created_at', { ascending: false });

      if (!walletError && walletDeposits) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞: ${walletDeposits.length}`);
        walletDeposits.forEach((dep, i) => {
          console.log(`\nüí∞ –î–µ–ø–æ–∑–∏—Ç ${i + 1}:`, {
            user_id: dep.user_id,
            amount: dep.amount,
            status: dep.status,
            tx_hash: dep.tx_hash || '–ù–ï–¢ –•–ï–®–ê',
            created_at: dep.created_at,
            description: dep.description.substring(0, 100) + '...'
          });
        });
      }
    }

    // 4. –ü–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —Å—É–º–º–∞–º–∏ 0.65 –∏ 1.0 —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö –î–ï–ü–û–ó–ò–¢–û–í 0.65/1.0 TON –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    const { data: targetDeposits, error: targetError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .in('amount', ['0.65', '1.0', '1', '0.650000', '1.000000'])
      .gte('created_at', '2025-08-04T08:00:00.000Z')
      .order('created_at', { ascending: false });

    if (!targetError && targetDeposits) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏: ${targetDeposits.length}`);
      targetDeposits.forEach((dep, i) => {
        console.log(`\nüéØ –î–µ–ø–æ–∑–∏—Ç ${i + 1}:`, {
          user_id: dep.user_id,
          amount: dep.amount,
          status: dep.status,
          tx_hash: dep.tx_hash || '–ù–ï–¢ –•–ï–®–ê',
          created_at: dep.created_at,
          description: dep.description.substring(0, 100) + '...'
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ description –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 256
        if (walletAddress && dep.description.includes(walletAddress)) {
          console.log(`   üö® –ù–ê–ô–î–ï–ù! –≠—Ç–æ—Ç –¥–µ–ø–æ–∑–∏—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 256!`);
          console.log(`   üìù –ù–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ user_id: ${dep.user_id} –≤–º–µ—Å—Ç–æ 256`);
        }
      });
    }

    // 5. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
    console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–°–ï–• –î–ï–ü–û–ó–ò–¢–û–í –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–£–Æ –ü–†–ò–í–Ø–ó–ö–£:');
    const { data: allDeposits, error: allError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_DEPOSIT')
      .gte('created_at', '2025-08-04T08:00:00.000Z')
      .order('created_at', { ascending: false });

    if (!allError && allDeposits && walletAddress) {
      console.log(`‚úÖ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${allDeposits.length}`);
      
      const misassignedDeposits = allDeposits.filter(dep => 
        dep.description.includes(walletAddress) && dep.user_id !== 256
      );
      
      console.log(`üö® –î–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –∞–¥—Ä–µ—Å–æ–º 256 –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π: ${misassignedDeposits.length}`);
      
      misassignedDeposits.forEach((dep, i) => {
        console.log(`\n‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ${i + 1}:`);
        console.log(`   ID: ${dep.id}`);
        console.log(`   –°—É–º–º–∞: ${dep.amount} TON`);
        console.log(`   –ü—Ä–∏–≤—è–∑–∞–Ω –∫ user_id: ${dep.user_id} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 256)`);
        console.log(`   tx_hash: ${dep.tx_hash || '–ù–ï–¢ –•–ï–®–ê'}`);
        console.log(`   created_at: ${dep.created_at}`);
        console.log(`   description: ${dep.description.substring(0, 200)}...`);
      });
    }

    console.log('\n' + '='.repeat(70));
    console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    if (user256.ton_wallet_verified) {
      console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID 256 –µ—Å—Ç—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TON –∫–æ—à–µ–ª–µ–∫');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ã');
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }
    console.log('='.repeat(70));

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

investigateCorrectUser256().catch(console.error);