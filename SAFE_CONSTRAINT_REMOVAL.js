#!/usr/bin/env node

/**
 * –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ì–û CONSTRAINT
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç idx_tx_hash_unique_safe –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç rollback –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 * –ë–ï–ó–û–ü–ê–°–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–û–õ–¨–ö–û
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function safeConstraintRemoval() {
  console.log('üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ì–û CONSTRAINT');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –¢–û–õ–¨–ö–û –ë–ï–ó–û–ü–ê–°–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø - –ù–ï –¢–†–û–ì–ê–ï–ú –î–ê–ù–ù–´–ï');
  
  try {
    // 1. –°–û–ó–î–ê–ï–ú –ë–≠–ö–ê–ü –ò–ù–§–û–†–ú–ê–¶–ò–ò –û CONSTRAINT
    console.log('\n1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê CONSTRAINT –ò–ù–§–û–†–ú–ê–¶–ò–ò');
    console.log('-'.repeat(60));
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ constraint —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
    const backupQuery = `
      SELECT 
        schemaname,
        tablename, 
        indexname,
        indexdef
      FROM pg_indexes 
      WHERE indexname LIKE '%tx_hash_unique%'
      ORDER BY tablename, indexname;
    `;
    
    console.log('üìã –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ constraint –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    
    const { data: constraintInfo, error: backupError } = await supabase
      .rpc('execute_sql', { query: backupQuery });
    
    if (backupError && !backupError.message.includes('function execute_sql')) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: ${backupError.message}`);
    } else if (constraintInfo) {
      console.log('‚úÖ –ë—ç–∫–∞–ø constraint –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω');
      console.log(`   –ù–∞–π–¥–µ–Ω–æ constraints: ${constraintInfo.length}`);
    }
    
    // 2. –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï CONSTRAINT
    console.log('\n2Ô∏è‚É£ –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ì–û CONSTRAINT');
    console.log('-'.repeat(60));
    
    const dropConstraintQuery = 'DROP INDEX IF EXISTS idx_tx_hash_unique_safe;';
    
    console.log('üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è constraint...');
    console.log(`   SQL: ${dropConstraintQuery}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ RPC –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const { error: dropError } = await supabase
      .rpc('execute_sql', { query: dropConstraintQuery });
    
    if (dropError && !dropError.message.includes('function execute_sql')) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ RPC: ${dropError.message}`);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ constraint
      console.log('\nüîç –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê CONSTRAINT');
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ constraint
      const testHash = `constraint_test_${Date.now()}`;
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { data: testTx1, error: error1 } = await supabase
        .from('transactions')
        .insert({
          user_id: 184,
          type: 'FARMING_REWARD',
          amount: '0.001',
          amount_uni: '0',
          amount_ton: '0.001',
          currency: 'TON',
          status: 'completed',
          description: 'Constraint test transaction',
          tx_hash_unique: testHash
        })
        .select('id')
        .single();
      
      if (error1) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${error1.message}`);
      } else {
        console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
        const { error: error2 } = await supabase
          .from('transactions')
          .insert({
            user_id: 184,
            type: 'FARMING_REWARD',  
            amount: '0.001',
            amount_uni: '0',
            amount_ton: '0.001',
            currency: 'TON',
            status: 'completed',
            description: 'Duplicate constraint test',
            tx_hash_unique: testHash
          });
        
        if (error2 && error2.message.includes('idx_tx_hash_unique')) {
          console.log('üö® CONSTRAINT –í–°–ï –ï–©–ï –ê–ö–¢–ò–í–ï–ù!');
          console.log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏–ª–∏ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î');
          console.log(`   Constraint: ${error2.message.match(/constraint "([^"]+)"/)?.[1] || 'idx_tx_hash_unique_safe'}`);
        } else if (!error2) {
          console.log('‚úÖ CONSTRAINT –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù! –î—É–±–ª–∏–∫–∞—Ç —Å–æ–∑–¥–∞–ª—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏');
          
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥—É–±–ª–∏—Ä—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await supabase.from('transactions').delete().eq('tx_hash_unique', testHash);
        }
        
        // –û—á–∏—â–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await supabase.from('transactions').delete().eq('id', testTx1.id);
      }
    } else {
      console.log('‚úÖ CONSTRAINT –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù –ß–ï–†–ï–ó RPC!');
    }
    
    // 3. –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
    console.log('\n3Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê');
    console.log('-'.repeat(60));
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
    const finalTestHash = `final_test_${Date.now()}`;
    
    const { data: finalTx1, error: finalError1 } = await supabase
      .from('transactions')
      .insert({
        user_id: 184,
        type: 'FARMING_REWARD',
        amount: '0.001', 
        amount_uni: '0',
        amount_ton: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'Final constraint test',
        tx_hash_unique: finalTestHash
      })
      .select('id')
      .single();
    
    if (finalError1) {
      console.log(`‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: ${finalError1.message}`);
    } else {
      const { error: finalError2 } = await supabase
        .from('transactions')
        .insert({
          user_id: 184,
          type: 'FARMING_REWARD',
          amount: '0.001',
          amount_uni: '0', 
          amount_ton: '0.001',
          currency: 'TON',
          status: 'completed',
          description: 'Final duplicate test',
          tx_hash_unique: finalTestHash
        });
      
      if (finalError2 && finalError2.message.includes('idx_tx_hash_unique')) {
        console.log('‚ùå CONSTRAINT –í–°–ï –ï–©–ï –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢');
        console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ PostgreSQL');
      } else {
        console.log('üéâ CONSTRAINT –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù!');
        console.log('   –ü—Ä–æ–±–ª–µ–º–∞ "–∏—Å—á–µ–∑–∞—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞');
      }
      
      // –û—á–∏—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await supabase.from('transactions').delete().eq('tx_hash_unique', finalTestHash);
      await supabase.from('transactions').delete().eq('id', finalTx1.id);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è constraint:', error.message);
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('üìã –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï CONSTRAINT –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(80));
}

safeConstraintRemoval().catch(console.error);