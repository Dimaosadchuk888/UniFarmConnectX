/**
 * –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { config } from 'dotenv';
import pkg from 'pg';
const { Pool } = pkg;

config();

const DATABASE_URL = process.env.DATABASE_URL;

async function registerDevAccount() {
  const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const replit_user_id = `replit_dev_${Date.now()}`;
    const guest_id = 'dev-' + Math.random().toString(36).substring(2, 15);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const insertUserQuery = `
      INSERT INTO users (
        telegram_id, 
        username, 
        first_name, 
        guest_id, 
        created_at, 
        updated_at,
        balance,
        last_login,
        is_premium
      ) VALUES ($1, $2, $3, $4, NOW(), NOW(), 1000, NOW(), false)
      ON CONFLICT (telegram_id) DO UPDATE SET
        last_login = NOW(),
        updated_at = NOW()
      RETURNING *;
    `;
    
    const userResult = await pool.query(insertUserQuery, [
      replit_user_id,
      'replit_developer',
      'Replit Developer',
      guest_id
    ]);
    
    const user = userResult.rows[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', {
      id: user.id,
      telegram_id: user.telegram_id,
      username: user.username,
      guest_id: user.guest_id,
      balance: user.balance
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏—é
    const farmingQuery = `
      INSERT INTO farming_sessions (
        user_id, 
        start_time, 
        last_update, 
        uni_accumulated, 
        is_active,
        rate_per_hour
      ) VALUES ($1, NOW(), NOW(), 0, true, 100)
      ON CONFLICT (user_id) DO UPDATE SET
        last_update = NOW(),
        is_active = true
      RETURNING *;
    `;
    
    const farmingResult = await pool.query(farmingQuery, [user.id]);
    console.log('‚úÖ –§–∞—Ä–º–∏–Ω–≥ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è TON Boost
    const tonBoostQuery = `
      INSERT INTO ton_boost_sessions (
        user_id,
        boost_level,
        start_time,
        end_time,
        created_at
      ) VALUES ($1, 1, NOW(), NOW() + INTERVAL '24 hours', NOW())
      ON CONFLICT (user_id) DO UPDATE SET
        start_time = NOW(),
        end_time = NOW() + INTERVAL '24 hours'
      RETURNING *;
    `;
    
    await pool.query(tonBoostQuery, [user.id]);
    console.log('‚úÖ TON Boost –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏—Å—Å–∏–∏
    const missionsQuery = `SELECT * FROM missions LIMIT 3`;
    const missionsResult = await pool.query(missionsQuery);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–∏—Å—Å–∏–π:', missionsResult.rows.length);
    
    console.log('\nüéâ –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
    console.log(`   User ID: ${user.id}`);
    console.log(`   Telegram ID: ${replit_user_id}`);
    console.log(`   Guest ID: ${guest_id}`);
    console.log(`   Username: replit_developer`);
    console.log(`   –ë–∞–ª–∞–Ω—Å: ${user.balance} UNI`);
    
    return {
      user_id: user.id,
      telegram_id: replit_user_id,
      guest_id: guest_id,
      username: 'replit_developer',
      balance: user.balance
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫
registerDevAccount()
  .then((userData) => {
    console.log('\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ guest_id –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', userData.guest_id);
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
  });