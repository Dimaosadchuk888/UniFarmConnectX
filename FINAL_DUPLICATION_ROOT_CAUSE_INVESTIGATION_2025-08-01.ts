// –§–ò–ù–ê–õ–¨–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –¢–æ—á–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
// –ò—â–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–≤–æ–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
import { supabase } from './core/supabase';

async function findExactDuplicationSource(): Promise<void> {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –¢–û–ß–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(90));

  console.log('\nüìã –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –§–ê–ö–¢–´:');
  console.log('‚úÖ TON_DEPOSIT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ enum –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('‚úÖ –ü—Ä—è–º–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ö–µ—à–∞–º —Å–µ–≥–æ–¥–Ω—è –ù–ï–¢');
  console.log('üí• –ù–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç: 1 TON ‚Üí 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ö–µ—à–∞ ‚Üí 2 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
  console.log('üí• –°–∏—Å—Ç–µ–º–∞ —É–¥–≤–∞–∏–≤–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TON_DEPOSIT –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');

  // 1. –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –°–õ–£–ß–ê–ï–í –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
  console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –°–õ–£–ß–ê–ï–í –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –ò–°–¢–û–†–ò–ò:');
  console.log('-'.repeat(80));

  // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ö–µ—à–∞–º–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const { data: hashDuplicates } = await supabase.rpc('execute_sql', {
    query: `
      WITH hash_analysis AS (
        SELECT 
          COALESCE(metadata->>'tx_hash', metadata->>'ton_tx_hash', metadata->>'hash') as extracted_hash,
          user_id,
          amount_ton,
          type,
          created_at,
          id,
          description,
          COUNT(*) OVER (PARTITION BY COALESCE(metadata->>'tx_hash', metadata->>'ton_tx_hash', metadata->>'hash')) as hash_count
        FROM transactions 
        WHERE (metadata->>'tx_hash' IS NOT NULL 
               OR metadata->>'ton_tx_hash' IS NOT NULL 
               OR metadata->>'hash' IS NOT NULL)
          AND created_at >= '2025-07-20'
          AND CAST(amount_ton AS FLOAT) > 0
      )
      SELECT * FROM hash_analysis 
      WHERE hash_count > 1 
        AND extracted_hash IS NOT NULL
        AND extracted_hash != ''
      ORDER BY extracted_hash, created_at
    `
  });

  if (hashDuplicates && hashDuplicates.length > 0) {
    console.log(`üö® –ù–ê–ô–î–ï–ù–û ${hashDuplicates.length} –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ú–ò –•–ï–®–ê–ú–ò:`);
    
    const groupedByHash = hashDuplicates.reduce((acc, tx) => {
      const hash = tx.extracted_hash;
      if (!acc[hash]) acc[hash] = [];
      acc[hash].push(tx);
      return acc;
    }, {} as Record<string, any[]>);

    Object.entries(groupedByHash).forEach(([hash, transactions]) => {
      if (transactions.length > 1) {
        console.log(`\nüí• –î–£–ë–õ–ò–ö–ê–¢ –•–ï–®–ê: ${hash.substring(0, 20)}...`);
        transactions.forEach((tx, i) => {
          console.log(`   ${i + 1}. ID ${tx.id} | User ${tx.user_id} | ${tx.amount_ton} TON | ${tx.type}`);
          console.log(`      –î–∞—Ç–∞: ${tx.created_at}`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
        });
      }
    });
  } else {
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à–µ–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –ù–ï –ù–ê–ô–î–ï–ù–û');
  }

  // 2. –ê–ù–ê–õ–ò–ó –°–ï–ì–û–î–ù–Ø–®–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í –ù–ê –ü–û–î–û–ó–†–ï–ù–ò–Ø
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ï–ì–û–î–ù–Ø–®–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í –ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:');
  console.log('-'.repeat(80));

  const { data: todayDeposits } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        user_id,
        amount_ton,
        type,
        created_at,
        id,
        description,
        metadata
      FROM transactions 
      WHERE created_at >= '2025-08-01'
        AND CAST(amount_ton AS FLOAT) > 0
        AND type IN ('DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD')
      ORDER BY user_id, created_at
    `
  });

  if (todayDeposits && todayDeposits.length > 0) {
    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${todayDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è:`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const byUser = todayDeposits.reduce((acc, tx) => {
      if (!acc[tx.user_id]) acc[tx.user_id] = [];
      acc[tx.user_id].push(tx);
      return acc;
    }, {} as Record<string, any[]>);

    Object.entries(byUser).forEach(([userId, userTxs]) => {
      if (userTxs.length > 1) {
        console.log(`\nüë§ User ${userId} - ${userTxs.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
        userTxs.forEach((tx, i) => {
          console.log(`   ${i + 1}. ${tx.amount_ton} TON (${tx.type}) –≤ ${tx.created_at}`);
          console.log(`      ID: ${tx.id} | ${tx.description}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ö–µ—à–∏
          if (tx.metadata) {
            const hash = tx.metadata.tx_hash || tx.metadata.ton_tx_hash || tx.metadata.hash;
            if (hash) {
              console.log(`      Hash: ${hash.substring(0, 30)}...`);
            }
          }
        });
        
        // –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const samAmounts = userTxs.filter((tx1, i) => 
          userTxs.some((tx2, j) => i !== j && tx1.amount_ton === tx2.amount_ton)
        );
        
        if (samAmounts.length > 0) {
          console.log(`      üö® –ü–û–î–û–ó–†–ï–ù–ò–ï: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤!`);
        }
      }
    });
  }

  // 3. –ü–û–ò–°–ö –î–í–û–ô–ù–´–• –í–´–ó–û–í–û–í –í –õ–û–ì–ò–ö–ï –û–ë–†–ê–ë–û–¢–ö–ò
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –ù–ê –î–í–û–ô–ù–´–ï –í–´–ó–û–í–´:');
  console.log('-'.repeat(80));

  console.log('üîç –ü–†–û–í–ï–†–Ø–ï–ú FRONTEND ‚Üí BACKEND –ò–ù–¢–ï–ì–†–ê–¶–ò–Æ:');
  console.log('\nüì± FRONTEND (TonDepositCard.tsx):');
  console.log('   –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ TON:');
  console.log('   ‚Üí correctApiRequest("/api/v2/wallet/ton-deposit", "POST", {...})');
  
  console.log('\nüñ•Ô∏è BACKEND (modules/wallet/routes.ts):');
  console.log('   POST /api/v2/wallet/ton-deposit');
  console.log('   ‚Üí walletController.tonDeposit()');
  
  console.log('\n‚öôÔ∏è CONTROLLER (modules/wallet/controller.ts):');
  console.log('   walletController.tonDeposit()');
  console.log('   ‚Üí walletService.processTonDeposit()');
  
  console.log('\nüîß SERVICE (modules/wallet/service.ts):');
  console.log('   processTonDeposit()');
  console.log('   ‚Üí UnifiedTransactionService.createTransaction()');

  console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('1. üîÑ –î–í–û–ô–ù–û–ô –í–´–ó–û–í API: Frontend –≤—ã–∑—ã–≤–∞–µ—Ç /api/v2/wallet/ton-deposit –¥–≤–∞–∂–¥—ã');
  console.log('2. üîÑ RETRY –õ–û–ì–ò–ö–ê: Timeout ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º –∂–µ —Ö–µ—à–æ–º');
  console.log('3. üîÑ WEBSOCKET CONFLICT: WebSocket update ‚Üí –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
  console.log('4. üîÑ TRANSACTION RACE: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –æ–±—Ö–æ–¥—è—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é');
  console.log('5. üîÑ FALLBACK LOGIC: TON_DEPOSIT fails ‚Üí fallback –∫ DEPOSIT');

  // 4. –ü–û–ò–°–ö CONCURRENCY ISSUES
  console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö CONCURRENCY ISSUES (–±–ª–∏–∑–∫–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏):');
  console.log('-'.repeat(80));

  const { data: closeTransactions } = await supabase.rpc('execute_sql', {
    query: `
      WITH close_pairs AS (
        SELECT 
          t1.id as id1,
          t2.id as id2,
          t1.user_id,
          t1.amount_ton,
          t1.created_at as time1,
          t2.created_at as time2,
          EXTRACT(EPOCH FROM (t2.created_at - t1.created_at)) as seconds_diff,
          t1.type as type1,
          t2.type as type2
        FROM transactions t1
        JOIN transactions t2 ON (
          t1.user_id = t2.user_id 
          AND t1.id < t2.id
          AND t1.amount_ton = t2.amount_ton
          AND CAST(t1.amount_ton AS FLOAT) > 0
          AND ABS(EXTRACT(EPOCH FROM (t2.created_at - t1.created_at))) < 60
        )
        WHERE t1.created_at >= '2025-07-20'
          AND (t1.type IN ('DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD') 
               OR t2.type IN ('DEPOSIT', 'TON_DEPOSIT', 'FARMING_REWARD'))
      )
      SELECT * FROM close_pairs
      WHERE ABS(seconds_diff) < 30
      ORDER BY ABS(seconds_diff)
    `
  });

  if (closeTransactions && closeTransactions.length > 0) {
    console.log(`‚ö° –ù–ê–ô–î–ï–ù–û ${closeTransactions.length} –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –ë–õ–ò–ó–ö–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:`);
    
    closeTransactions.forEach((pair, i) => {
      console.log(`\n${i + 1}. –ë–õ–ò–ó–ö–ê–Ø –ü–ê–†–ê:`);
      console.log(`   User ${pair.user_id}: ${pair.amount_ton} TON`);
      console.log(`   ID ${pair.id1} (${pair.type1}) ‚Üí ID ${pair.id2} (${pair.type2})`);
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(pair.seconds_diff).toFixed(1)} —Å–µ–∫—É–Ω–¥`);
      
      if (Math.abs(pair.seconds_diff) < 5) {
        console.log(`   üö® –ö–†–ò–¢–ò–ß–ù–û: –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ —Ä–∞–∑–Ω–∏—Ü—ã!`);
      }
    });
  } else {
    console.log('‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–ª–∏–∑–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ù–ï –ù–ê–ô–î–ï–ù–û');
  }

  // 5. –ê–ù–ê–õ–ò–ó –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
  console.log('-'.repeat(80));

  console.log('üõ°Ô∏è –¢–ï–ö–£–©–ê–Ø –õ–û–ì–ò–ö–ê –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –≤ UnifiedTransactionService:');
  console.log('   1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç: metadata?.tx_hash || metadata?.ton_tx_hash');
  console.log('   2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: supabase.from("transactions").eq("tx_hash_unique", hash)');
  console.log('   3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Üí return { success: false, error: "already exists" }');

  console.log('\n‚ùì –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
  console.log('1. üîç tx_hash_unique –ø–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL');
  console.log('2. üîç metadata.tx_hash –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç tx_hash_unique');
  console.log('3. üîç Race condition: –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
  console.log('4. üîç –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ö–µ—à–µ–π: tx_hash vs ton_tx_hash');

  // 6. –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
  console.log('\n' + '='.repeat(90));
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó');
  console.log('='.repeat(90));

  console.log('\nüí• –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
  console.log('‚úÖ Enum –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TON_DEPOSIT');
  console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ö–µ—à–∞–º –≤ –ë–î –ù–ï–¢');
  console.log('‚ùå –ù–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ');

  console.log('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
  console.log('1. üì± FRONTEND: –î–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤ API –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏');
  console.log('2. üîÑ RETRY: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ timeout');
  console.log('3. ‚ö° RACE CONDITION: Concurrent –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ö–æ–¥—è—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é');
  console.log('4. üé≠ UI BUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–≤–∞–∂–¥—ã');
  console.log('5. üìä BALANCE UPDATE: WebSocket —É–¥–≤–∞–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ');

  console.log('\nüö® –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
  console.log('1. üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ processTonDeposit()');
  console.log('2. üîí –£—Å–∏–ª–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ database constraints');
  console.log('3. üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –≤—ã–∑–æ–≤—ã');
  console.log('4. ‚è±Ô∏è –î–æ–±–∞–≤–∏—Ç—å rate limiting –Ω–∞ deposit endpoint');
  console.log('5. üéØ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–µ–ø–æ–∑–∏—Ç–æ–º');

  console.log('\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
  console.log('1. –ù–∞–π—Ç–∏ –≥–¥–µ –ò–ú–ï–ù–ù–û –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ');
  console.log('2. –î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ constraints –≤ –ë–î');
  console.log('3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å frontend race conditions');
  console.log('4. –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
}

findExactDuplicationSource().catch(console.error);