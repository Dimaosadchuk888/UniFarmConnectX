/**
 * üß™ –¢–ï–°–¢ –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –î–∞—Ç–∞: 26 –∏—é–ª—è 2025
 * –ó–∞–¥–∞—á–∞: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–µ–π
 */

import { supabase } from './core/supabase';

async function testProgrammaticProtection(): Promise<void> {
  console.log('\nüß™ –¢–ï–°–¢ –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´ –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=' .repeat(70));
  console.log(`–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`);
  console.log('–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–æ–¥ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏');
  console.log('=' .repeat(70));

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: testUser } = await supabase
      .from('users')
      .select('id')
      .limit(1)
      .single();
      
    if (!testUser) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π User ID: ${testUser.id}`);
    
    // –≠–¢–ê–ü 1: –¢–ï–°–¢ –ß–ï–†–ï–ó API (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ TON –¥–µ–ø–æ–∑–∏—Ç–∞)
    console.log('\nüåê –≠–¢–ê–ü 1: –¢–ï–°–¢ –ß–ï–†–ï–ó API WALLET SERVICE');
    console.log('-' .repeat(50));
    
    const testHash = 'programmatic_test_' + Date.now();
    console.log(`üîë –¢–µ—Å—Ç–æ–≤—ã–π hash: ${testHash}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ API
    console.log('\nüìù –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API...');
    const firstResponse = await fetch('http://localhost:3000/api/v2/wallet/ton-deposit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: testUser.id,
        amount: 0.001,
        ton_tx_hash: testHash,
        wallet_address: 'test_wallet_address_programmatic'
      })
    });
    
    const firstResult = await firstResponse.json();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:');
    console.log(`   Status: ${firstResponse.status}`);
    console.log(`   Success: ${firstResult.success}`);
    if (firstResult.success) {
      console.log('   ‚úÖ –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞: ${firstResult.error}`);
    }
    
    // –ü–∞—É–∑–∞
    console.log('\n‚è±Ô∏è –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –¥–µ–ø–æ–∑–∏—Ç —Å —Ç–µ–º –∂–µ hash
    console.log('\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ì–û –¥–µ–ø–æ–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ API...');
    const secondResponse = await fetch('http://localhost:3000/api/v2/wallet/ton-deposit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: testUser.id,
        amount: 0.002, // –î—Ä—É–≥–∞—è —Å—É–º–º–∞
        ton_tx_hash: testHash, // –¢–û–¢ –ñ–ï HASH!
        wallet_address: 'test_wallet_address_programmatic_duplicate'
      })
    });
    
    const secondResult = await secondResponse.json();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:');
    console.log(`   Status: ${secondResponse.status}`);
    console.log(`   Success: ${secondResult.success}`);
    console.log(`   Error: ${secondResult.error || '–Ω–µ—Ç'}`);
    
    // –ê–ù–ê–õ–ò–ó API –¢–ï–°–¢–ê
    if (!secondResult.success && secondResult.error?.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      console.log('\nüéâ –û–¢–õ–ò–ß–ù–û! API –ó–ê–©–ò–¢–ê –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('   ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª—è');
    } else if (secondResult.success) {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: API –ø–æ–∑–≤–æ–ª–∏–ª —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç');
      console.log('   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ WalletService');
    } else {
      console.log('\n‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç API —Ç–µ—Å—Ç–∞');
      console.log(`   üí° –û—à–∏–±–∫–∞: ${secondResult.error}`);
    }
    
    // –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
    console.log('\nüóÑÔ∏è –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ï–ô –í –ë–î');
    console.log('-' .repeat(50));
    
    const { data: testRecords } = await supabase
      .from('transactions')
      .select('id, user_id, tx_hash_unique, amount_ton, created_at, description')
      .eq('tx_hash_unique', testHash)
      .order('created_at', { ascending: true });
      
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å hash ${testHash}: ${testRecords?.length || 0}`);
    
    if (testRecords && testRecords.length > 0) {
      console.log('\nüìã –î–ï–¢–ê–õ–ò –ó–ê–ü–ò–°–ï–ô:');
      testRecords.forEach((record, index) => {
        console.log(`   –ó–∞–ø–∏—Å—å ${index + 1}:`);
        console.log(`     ID: ${record.id}`);
        console.log(`     User: ${record.user_id}`);
        console.log(`     Amount: ${record.amount_ton} TON`);
        console.log(`     Created: ${new Date(record.created_at).toLocaleString()}`);
        console.log(`     Description: ${record.description}`);
      });
      
      if (testRecords.length === 1) {
        console.log('\n‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –°–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å');
        console.log('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ');
      } else if (testRecords.length > 1) {
        console.log(`\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û ${testRecords.length} –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º hash`);
        console.log('‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
      }
    }
    
    // –≠–¢–ê–ü 3: –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
    console.log('\nüßπ –≠–¢–ê–ü 3: –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
    console.log('-' .repeat(50));
    
    const { error: cleanupError } = await supabase
      .from('transactions')
      .delete()
      .eq('tx_hash_unique', testHash);
      
    if (cleanupError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${cleanupError.message}`);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
    
    // –≠–¢–ê–ü 4: –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\nüéØ –≠–¢–ê–ü 4: –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ó–ê–©–ò–¢–´');
    console.log('-' .repeat(50));
    
    const protectionWorking = !secondResult.success && 
                            secondResult.error?.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    if (protectionWorking) {
      console.log('üéâ –£–°–ü–ï–•! –ü–†–û–ì–†–ê–ú–ú–ù–ê–Ø –ó–ê–©–ò–¢–ê –†–ê–ë–û–¢–ê–ï–¢!');
      console.log('‚úÖ API –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ User 25 —Ä–µ—à–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ');
      
      console.log('\nüìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´:');
      console.log('   - –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É)');
      console.log('   - –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î');
      console.log('   - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('   - –õ–µ–≥–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞');
      console.log('   - –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ—Å—Ç—å');
      
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('üîß –¢–†–ï–ë–£–ï–¢–°–Ø: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–¥–∞');
      console.log('üí° –ü–†–û–í–ï–†–ò–¢–¨:');
      console.log('   1. –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
      console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã UnifiedTransactionService');
      console.log('   3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ metadata –≤ WalletService');
    }
    
    console.log('\nüíæ –¢–ï–°–¢ –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´ –ó–ê–í–ï–†–®–ï–ù');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    console.log('\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ô');
    console.log('   - –¢–µ—Å—Ç –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω');
    console.log('   - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    console.log('   - –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–∑–∂–µ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProgrammaticProtection()
  .then(() => {
    console.log('\nüèÅ –¢–ï–°–¢ –ü–†–û–ì–†–ê–ú–ú–ù–û–ô –ó–ê–©–ò–¢–´ –ó–ê–í–ï–†–®–ï–ù');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
  });