/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function finalReferralTest() {
  console.log('=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê');
    
    let serverWorking = false;
    
    try {
      const healthResponse = await fetch('http://localhost:3000/health', {
        timeout: 5000
      });
      
      if (healthResponse.ok) {
        const healthData = await healthResponse.json();
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData.status);
        serverWorking = true;
      } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', healthResponse.status);
      }
    } catch (error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüìä 2. –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø');
    
    const referrerCode = 'REF_1750079004411_nddfp2';
    const { data: referrer, error: referrerError } = await supabase
      .from('users')
      .select('id, username, ref_code')
      .eq('ref_code', referrerCode)
      .single();
    
    if (referrerError) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', referrerError.message);
      return;
    }
    
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${referrer.id}`);
    console.log(`   Username: ${referrer.username}`);
    console.log(`   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referrer.ref_code}`);
    
    // –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    const { data: currentReferrals, error: currentReferralsError } = await supabase
      .from('referrals')
      .select('*')
      .eq('inviter_id', referrer.id);
    
    if (currentReferralsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', currentReferralsError.message);
      return;
    }
    
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${currentReferrals.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log('\nüîß 3. –ü–†–û–í–ï–†–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô');
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é');
    console.log('‚úÖ processReferralInline() —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ AuthService');
    console.log('‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã');
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã referrals —Å inviter_id');
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–¥–∞
    console.log('\nüîç 4. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–î–ê');
    
    console.log('üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ AuthService:');
    console.log('   - –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ReferralService');
    console.log('   - –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ processReferralInline()');
    console.log('   - –û–±—Ä–∞–±–æ—Ç–∫–∞ referrals –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ findOrCreateFromTelegram()');
    console.log('   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î —Å inviter_id');
    
    // –¢–µ—Å—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    if (serverWorking) {
      console.log('\nüß™ 5. –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
      
      const testTelegramId = 999999228;
      const testUsername = 'FinalTestUser';
      
      const testUser = {
        id: testTelegramId,
        username: testUsername,
        first_name: testUsername,
        language_code: 'en',
        auth_date: Math.floor(Date.now() / 1000),
        hash: 'test_hash_final'
      };
      
      const initData = `user=${encodeURIComponent(JSON.stringify(testUser))}&auth_date=${testUser.auth_date}&hash=${testUser.hash}`;
      
      console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
      
      try {
        const authResponse = await fetch('http://localhost:3000/api/v2/auth/telegram', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            initData: initData,
            ref_by: referrerCode
          }),
          timeout: 10000
        });
        
        const authData = await authResponse.json();
        
        console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', authResponse.status);
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(authData, null, 2));
        
        if (authData.success && authData.user) {
          const newUserId = authData.user.id;
          
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${newUserId}`);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          const { data: createdUser, error: createdUserError } = await supabase
            .from('users')
            .select('id, telegram_id, username, referred_by')
            .eq('id', newUserId)
            .single();
          
          const { data: referralRecord, error: referralError } = await supabase
            .from('referrals')
            .select('*')
            .eq('user_id', newUserId)
            .single();
          
          console.log('\nüìä 6. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:');
          
          if (createdUser && createdUser.referred_by == referrer.id) {
            console.log('‚úÖ –ü–æ–ª–µ referred_by –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ö–û–†–†–ï–ö–¢–ù–û');
          } else {
            console.log('‚ùå –ü–æ–ª–µ referred_by –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ');
          }
          
          if (referralRecord) {
            console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals —Å–æ–∑–¥–∞–Ω–∞ –ö–û–†–†–ï–ö–¢–ù–û');
            console.log(`   Inviter ID: ${referralRecord.inviter_id}`);
            console.log(`   Level: ${referralRecord.level}`);
          } else {
            console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ referrals –ù–ï —Å–æ–∑–¥–∞–Ω–∞');
          }
          
          // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
          const systemWorking = createdUser?.referred_by == referrer.id && referralRecord;
          
          console.log('\nüéØ 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:');
          
          if (systemWorking) {
            console.log('üéâ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
            console.log('‚úÖ –í—Å–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã');
            console.log('‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
            console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          } else {
            console.log('‚ùå –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ë–û–¢–´');
          }
          
          // –û—á–∏—Å—Ç–∫–∞
          await supabase.from('users').delete().eq('id', newUserId);
          await supabase.from('referrals').delete().eq('user_id', newUserId);
          
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authData.error);
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      }
      
    } else {
      console.log('\n‚ö†Ô∏è  –°–ï–†–í–ï–† –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –ü–†–û–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
      console.log('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

finalReferralTest();