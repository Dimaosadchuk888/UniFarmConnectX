
#!/usr/bin/env node

/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –î–£–ë–õ–ò–ö–ê–¢–û–í UNIFARM
 * –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–æ–¥–∞
 */

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(message, color = 'white') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const CONFIG = {
  scanDirectories: ['./server', './client', './shared'],
  fileExtensions: ['.ts', '.tsx', '.js', '.jsx'],
  suspiciousPatterns: [
    'backup', 'bak', 'old', 'new', 'fixed', 'consolidated', 
    'original', 'temp', 'tmp', 'copy', 'duplicate', '_old', 
    '_new', '_backup', '_copy', '.backup', '.old'
  ],
  controllerPatterns: [
    'Controller', 'ControllerConsolidated', 'ControllerFixed', 
    'ControllerFallback', 'ControllerNew'
  ],
  servicePatterns: [
    'Service', 'ServiceInstance', 'ServiceFixed', 'ServiceNew',
    'ServiceOriginal'
  ]
};

class DuplicateAnalyzer {
  constructor() {
    this.results = {
      identicalFiles: [],
      suspiciousFiles: [],
      functionalDuplicates: [],
      namingInconsistencies: [],
      statistics: {
        totalFiles: 0,
        duplicatesByContent: 0,
        duplicatesByPattern: 0,
        duplicatesByFunction: 0
      }
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  getAllFiles() {
    const allFiles = [];
    
    CONFIG.scanDirectories.forEach(dir => {
      if (fs.existsSync(dir)) {
        this.scanDirectory(dir, allFiles);
      } else {
        log(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'yellow');
      }
    });
    
    return allFiles.filter(file => 
      CONFIG.fileExtensions.some(ext => file.endsWith(ext))
    );
  }

  scanDirectory(dir, fileList) {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
          this.scanDirectory(fullPath, fileList);
        } else if (stat.isFile()) {
          fileList.push(fullPath);
        }
      }
    } catch (error) {
      log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}: ${error.message}`, 'yellow');
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
  getFileHash(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      const normalized = content
        .replace(/\/\*[\s\S]*?\*\//g, '') // –±–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/\/\/.*$/gm, '') // —Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/\s+/g, ' ') // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        .trim();
      
      return crypto.createHash('md5').update(normalized).digest('hex');
    } catch (error) {
      return null;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
  analyzeFileContent(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      
      return {
        functions: this.extractFunctions(content),
        imports: this.extractImports(content),
        exports: this.extractExports(content),
        classes: this.extractClasses(content),
        lineCount: content.split('\n').length,
        size: content.length
      };
    } catch (error) {
      return null;
    }
  }

  extractFunctions(content) {
    const functionRegex = /(?:function\s+(\w+)|(\w+)\s*[:=]\s*(?:function|\([^)]*\)\s*=>)|async\s+function\s+(\w+)|static\s+async\s+(\w+)|static\s+(\w+))/g;
    const functions = [];
    let match;
    
    while ((match = functionRegex.exec(content)) !== null) {
      const funcName = match[1] || match[2] || match[3] || match[4] || match[5];
      if (funcName) {
        functions.push(funcName);
      }
    }
    
    return functions;
  }

  extractImports(content) {
    const importRegex = /import\s+.*?from\s+['"`]([^'"`]+)['"`]/g;
    const imports = [];
    let match;
    
    while ((match = importRegex.exec(content)) !== null) {
      imports.push(match[1]);
    }
    
    return imports;
  }

  extractExports(content) {
    const exportRegex = /export\s+(?:default\s+)?(?:class\s+(\w+)|function\s+(\w+)|const\s+(\w+)|let\s+(\w+)|var\s+(\w+))/g;
    const exports = [];
    let match;
    
    while ((match = exportRegex.exec(content)) !== null) {
      const exportName = match[1] || match[2] || match[3] || match[4] || match[5];
      if (exportName) {
        exports.push(exportName);
      }
    }
    
    return exports;
  }

  extractClasses(content) {
    const classRegex = /class\s+(\w+)/g;
    const classes = [];
    let match;
    
    while ((match = classRegex.exec(content)) !== null) {
      classes.push(match[1]);
    }
    
    return classes;
  }

  // –ü–æ–∏—Å–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  findIdenticalFiles(files) {
    log('\nüîç –ü–æ–∏—Å–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É...', 'cyan');
    
    const hashMap = new Map();
    
    files.forEach(file => {
      const hash = this.getFileHash(file);
      if (hash) {
        if (!hashMap.has(hash)) {
          hashMap.set(hash, []);
        }
        hashMap.get(hash).push(file);
      }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º
    hashMap.forEach((fileList, hash) => {
      if (fileList.length > 1) {
        this.results.identicalFiles.push({
          hash,
          files: fileList,
          type: 'identical_content'
        });
        this.results.statistics.duplicatesByContent += fileList.length - 1;
      }
    });
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.results.identicalFiles.length} –≥—Ä—É–ø–ø –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`, 'green');
  }

  // –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º
  findSuspiciousFiles(files) {
    log('\nüîç –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º...', 'cyan');
    
    files.forEach(file => {
      const basename = path.basename(file);
      const suspicious = CONFIG.suspiciousPatterns.some(pattern => 
        basename.toLowerCase().includes(pattern.toLowerCase())
      );
      
      if (suspicious) {
        this.results.suspiciousFiles.push({
          file,
          reason: 'suspicious_naming',
          pattern: CONFIG.suspiciousPatterns.find(p => 
            basename.toLowerCase().includes(p.toLowerCase())
          )
        });
        this.results.statistics.duplicatesByPattern++;
      }
    });
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.results.suspiciousFiles.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`, 'green');
  }

  // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  findFunctionalDuplicates(files) {
    log('\nüîç –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...', 'cyan');
    
    const contentMap = new Map();
    
    files.forEach(file => {
      const analysis = this.analyzeFileContent(file);
      if (analysis) {
        const key = JSON.stringify({
          functions: analysis.functions.sort(),
          exports: analysis.exports.sort(),
          classes: analysis.classes.sort()
        });
        
        if (!contentMap.has(key)) {
          contentMap.set(key, []);
        }
        contentMap.get(key).push({ file, analysis });
      }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    contentMap.forEach((fileList, key) => {
      if (fileList.length > 1) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å
        const similarity = this.calculateSimilarity(fileList);
        if (similarity > 0.8) {
          this.results.functionalDuplicates.push({
            files: fileList.map(item => item.file),
            similarity,
            type: 'functional_duplicate',
            functions: fileList[0].analysis.functions
          });
          this.results.statistics.duplicatesByFunction += fileList.length - 1;
        }
      }
    });
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.results.functionalDuplicates.length} –≥—Ä—É–ø–ø —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`, 'green');
  }

  calculateSimilarity(fileList) {
    if (fileList.length < 2) return 0;
    
    const first = fileList[0].analysis;
    let totalSimilarity = 0;
    
    for (let i = 1; i < fileList.length; i++) {
      const current = fileList[i].analysis;
      const similarity = this.compareFunctionSets(first.functions, current.functions);
      totalSimilarity += similarity;
    }
    
    return totalSimilarity / (fileList.length - 1);
  }

  compareFunctionSets(set1, set2) {
    const intersection = set1.filter(func => set2.includes(func));
    const union = [...new Set([...set1, ...set2])];
    
    return union.length > 0 ? intersection.length / union.length : 0;
  }

  // –ü–æ–∏—Å–∫ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
  findNamingInconsistencies(files) {
    log('\nüîç –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏...', 'cyan');
    
    const groupsByType = {
      controllers: [],
      services: [],
      components: []
    };
    
    files.forEach(file => {
      const basename = path.basename(file);
      
      if (CONFIG.controllerPatterns.some(p => basename.includes(p))) {
        groupsByType.controllers.push(file);
      } else if (CONFIG.servicePatterns.some(p => basename.includes(p))) {
        groupsByType.services.push(file);
      } else if (file.includes('/components/') && basename.endsWith('.tsx')) {
        groupsByType.components.push(file);
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    Object.keys(groupsByType).forEach(type => {
      this.analyzeNamingGroup(groupsByType[type], type);
    });
    
    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.results.namingInconsistencies.length} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏`, 'green');
  }

  analyzeNamingGroup(files, type) {
    const nameMap = new Map();
    
    files.forEach(file => {
      const basename = path.basename(file, path.extname(file));
      const baseName = this.extractBaseName(basename);
      
      if (!nameMap.has(baseName)) {
        nameMap.set(baseName, []);
      }
      nameMap.get(baseName).push(file);
    });
    
    nameMap.forEach((fileList, baseName) => {
      if (fileList.length > 1) {
        this.results.namingInconsistencies.push({
          baseName,
          type,
          files: fileList,
          reason: 'multiple_versions'
        });
      }
    });
  }

  extractBaseName(filename) {
    // –£–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ Controller, Service, Instance –∏ —Ç.–¥.
    return filename
      .replace(/Controller.*$/, '')
      .replace(/Service.*$/, '')
      .replace(/Instance$/, '')
      .replace(/Fixed$/, '')
      .replace(/Consolidated$/, '')
      .replace(/New$/, '')
      .replace(/Original$/, '');
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    log('\nüìä –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –î–£–ë–õ–ò–ö–ê–¢–û–í', 'magenta');
    log('='.repeat(50), 'magenta');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:', 'cyan');
    log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${this.results.statistics.totalFiles}`, 'white');
    log(`–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: ${this.results.statistics.duplicatesByContent}`, 'white');
    log(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${this.results.statistics.duplicatesByPattern}`, 'white');
    log(`–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${this.results.statistics.duplicatesByFunction}`, 'white');
    
    // –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (this.results.identicalFiles.length > 0) {
      log('\nüî¥ –ò–î–ï–ù–¢–ò–ß–ù–´–ï –§–ê–ô–õ–´ –ü–û –°–û–î–ï–†–ñ–ò–ú–û–ú–£:', 'red');
      this.results.identicalFiles.forEach((group, index) => {
        log(`\n${index + 1}. –ì—Ä—É–ø–ø–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:`, 'yellow');
        group.files.forEach(file => {
          log(`   - ${file}`, 'white');
        });
      });
    }
    
    // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (this.results.suspiciousFiles.length > 0) {
      log('\nüü° –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´:', 'yellow');
      this.results.suspiciousFiles.forEach((item, index) => {
        log(`${index + 1}. ${item.file}`, 'white');
        log(`   –ü–∞—Ç—Ç–µ—Ä–Ω: ${item.pattern}`, 'yellow');
      });
    }
    
    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if (this.results.functionalDuplicates.length > 0) {
      log('\nüü† –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´:', 'cyan');
      this.results.functionalDuplicates.forEach((group, index) => {
        log(`\n${index + 1}. –°—Ö–æ–∂–µ—Å—Ç—å: ${(group.similarity * 100).toFixed(1)}%`, 'yellow');
        group.files.forEach(file => {
          log(`   - ${file}`, 'white');
        });
        if (group.functions.length > 0) {
          log(`   –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${group.functions.slice(0, 5).join(', ')}${group.functions.length > 5 ? '...' : ''}`, 'cyan');
        }
      });
    }
    
    // –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
    if (this.results.namingInconsistencies.length > 0) {
      log('\nüîµ –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –í –ò–ú–ï–ù–û–í–ê–ù–ò–ò:', 'blue');
      this.results.namingInconsistencies.forEach((group, index) => {
        log(`\n${index + 1}. ${group.type}: ${group.baseName}`, 'yellow');
        group.files.forEach(file => {
          log(`   - ${file}`, 'white');
        });
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.generateRecommendations();
  }

  generateRecommendations() {
    log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –î–£–ë–õ–ò–ö–ê–¢–û–í:', 'green');
    log('='.repeat(50), 'green');
    
    let priority = 1;
    
    if (this.results.identicalFiles.length > 0) {
      log(`\n${priority}. –ö–†–ò–¢–ò–ß–ù–û - –£–¥–∞–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã:`, 'red');
      this.results.identicalFiles.forEach(group => {
        log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å: ${group.files[0]}`, 'green');
        log(`   –£–¥–∞–ª–∏—Ç—å: ${group.files.slice(1).join(', ')}`, 'red');
      });
      priority++;
    }
    
    if (this.results.suspiciousFiles.length > 0) {
      log(`\n${priority}. –í–´–°–û–ö–û - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:`, 'yellow');
      this.results.suspiciousFiles.forEach(item => {
        log(`   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: ${item.file}`, 'white');
      });
      priority++;
    }
    
    if (this.results.functionalDuplicates.length > 0) {
      log(`\n${priority}. –°–†–ï–î–ù–ï - –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã:`, 'cyan');
      this.results.functionalDuplicates.forEach(group => {
        log(`   –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ —Å —Å—Ö–æ–∂–µ—Å—Ç—å—é ${(group.similarity * 100).toFixed(1)}%`, 'white');
      });
      priority++;
    }
    
    if (this.results.namingInconsistencies.length > 0) {
      log(`\n${priority}. –ù–ò–ó–ö–û - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:`, 'blue');
      log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤`, 'white');
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
  async analyze() {
    log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –î–£–ë–õ–ò–ö–ê–¢–û–í UNIFARM', 'magenta');
    log('='.repeat(60), 'magenta');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    const files = this.getAllFiles();
    this.results.statistics.totalFiles = files.length;
    
    log(`\nüìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`, 'cyan');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã
    this.findIdenticalFiles(files);
    this.findSuspiciousFiles(files);
    this.findFunctionalDuplicates(files);
    this.findNamingInconsistencies(files);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    this.generateReport();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
    this.updateProgress();
  }

  updateProgress() {
    log('\n‚úÖ –≠–¢–ê–ü 1.1 –ó–ê–í–ï–†–®–ï–ù: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É', 'green');
    log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≠–¢–ê–ü–£ 1.2: –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤', 'yellow');
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new DuplicateAnalyzer();
analyzer.analyze().catch(error => {
  log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ${error.message}`, 'red');
  process.exit(1);
});
