/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ UniFarm
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
 * —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É { success: true/false, data/error: ... }
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';
const TEST_RESULTS = [];

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç API-–∑–∞–ø—Ä–æ—Å
 */
async function callApi(endpoint, method = 'GET', body = null) {
  try {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'UniFarm-API-Tester/1.0'
      }
    };
    
    if (body && method !== 'GET') {
      options.body = JSON.stringify(body);
    }
    
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É—é: ${method} ${endpoint}`);
    
    const response = await fetch(`${BASE_URL}${endpoint}`, options);
    const text = await response.text();
    
    let data;
    try {
      data = JSON.parse(text);
    } catch (e) {
      data = { raw: text };
    }
    
    return {
      status: response.status,
      statusText: response.statusText,
      data,
      headers: Object.fromEntries(response.headers.entries())
    };
  } catch (error) {
    return {
      status: 0,
      statusText: 'CONNECTION_ERROR',
      error: error.message,
      data: null
    };
  }
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
function recordTestResult(endpoint, method, status, isSuccess, isStandardized, notes = '') {
  TEST_RESULTS.push({
    endpoint,
    method,
    status,
    isSuccess,
    isStandardized,
    notes,
    timestamp: new Date().toISOString()
  });
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π API-—ç–Ω–¥–ø–æ–∏–Ω—Ç
 */
async function testAllEndpoints() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–Æ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í');
  console.log('='.repeat(60));
  
  // 1. –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  console.log('\nüìã 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –≠–ù–î–ü–û–ò–ù–¢–û–í');
  console.log('-'.repeat(40));
  
  const healthResult = await callApi('/health');
  recordTestResult('/health', 'GET', healthResult.status, 
    healthResult.status === 200, 
    healthResult.data && typeof healthResult.data === 'object',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞'
  );
  
  // 2. –¢–µ—Å—Ç –º–∏—Å—Å–∏–π (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è REDMAP)
  console.log('\nüéØ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ò–°–°–ò–ô');
  console.log('-'.repeat(40));
  
  const missionsResult = await callApi('/api/v2/missions/active');
  recordTestResult('/api/v2/missions/active', 'GET', missionsResult.status,
    missionsResult.status === 200,
    missionsResult.data && (missionsResult.data.success !== undefined),
    '–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π (–Ω–∞–≥—Ä–∞–¥–∞ 500 UNI)'
  );
  
  // 3. –¢–µ—Å—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è REDMAP)
  console.log('\nüåæ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UNI –§–ê–†–ú–ò–ù–ì–ê');
  console.log('-'.repeat(40));
  
  const farmingStatusResult = await callApi('/api/v2/uni-farming/status');
  recordTestResult('/api/v2/uni-farming/status', 'GET', farmingStatusResult.status,
    farmingStatusResult.status === 200,
    farmingStatusResult.data && (farmingStatusResult.data.success !== undefined),
    '–°—Ç–∞—Ç—É—Å UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞'
  );
  
  // 4. –¢–µ—Å—Ç TON –±—É—Å—Ç —Å–∏—Å—Ç–µ–º—ã (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è REDMAP)
  console.log('\nüíé 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TON –ë–£–°–¢ –°–ò–°–¢–ï–ú–´');
  console.log('-'.repeat(40));
  
  const tonBoostsResult = await callApi('/api/v2/ton-farming/boosts');
  recordTestResult('/api/v2/ton-farming/boosts', 'GET', tonBoostsResult.status,
    tonBoostsResult.status === 200,
    tonBoostsResult.data && (tonBoostsResult.data.success !== undefined),
    'TON –±—É—Å—Ç –ø–∞–∫–µ—Ç—ã (Starter/Standard/Advanced/Premium)'
  );
  
  const generalBoostsResult = await callApi('/api/v2/boosts');
  recordTestResult('/api/v2/boosts', 'GET', generalBoostsResult.status,
    generalBoostsResult.status === 200,
    generalBoostsResult.data && (generalBoostsResult.data.success !== undefined),
    '–û–±—â–∏–µ –±—É—Å—Ç –ø–∞–∫–µ—Ç—ã'
  );
  
  // 5. –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è REDMAP)
  console.log('\nüë• 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('-'.repeat(40));
  
  const referralTreeResult = await callApi('/api/v2/referral/tree');
  recordTestResult('/api/v2/referral/tree', 'GET', referralTreeResult.status,
    referralTreeResult.status === 200 || referralTreeResult.status === 401,
    referralTreeResult.data && (referralTreeResult.data.success !== undefined),
    '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–¥–æ—Ö–æ–¥ –æ—Ç —Ñ–∞—Ä–º–∏–Ω–≥–∞)'
  );
  
  // 6. –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è REDMAP)
  console.log('\nüí∞ 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–®–ï–õ–¨–ö–ê');
  console.log('-'.repeat(40));
  
  const walletBalanceResult = await callApi('/api/v2/wallet/balance');
  recordTestResult('/api/v2/wallet/balance', 'GET', walletBalanceResult.status,
    walletBalanceResult.status === 200 || walletBalanceResult.status === 401,
    walletBalanceResult.data && (walletBalanceResult.data.success !== undefined),
    '–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ (UNI –∏ TON)'
  );
  
  // 7. –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è REDMAP)
  console.log('\nüéÅ 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–´–• –ë–û–ù–£–°–û–í');
  console.log('-'.repeat(40));
  
  const dailyBonusResult = await callApi('/api/v2/daily-bonus/status');
  recordTestResult('/api/v2/daily-bonus/status', 'GET', dailyBonusResult.status,
    dailyBonusResult.status === 200 || dailyBonusResult.status === 401,
    dailyBonusResult.data && (dailyBonusResult.data.success !== undefined),
    '–°—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞'
  );
  
  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function generateReport() {
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API');
  console.log('='.repeat(60));
  
  const totalTests = TEST_RESULTS.length;
  const successfulTests = TEST_RESULTS.filter(t => t.isSuccess).length;
  const standardizedTests = TEST_RESULTS.filter(t => t.isStandardized).length;
  
  console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
  console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}/${totalTests} (${(successfulTests/totalTests*100).toFixed(1)}%)`);
  console.log(`   –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${standardizedTests}/${totalTests} (${(standardizedTests/totalTests*100).toFixed(1)}%)`);
  
  console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('-'.repeat(40));
  
  TEST_RESULTS.forEach((result, index) => {
    const statusIcon = result.isSuccess ? '‚úÖ' : '‚ùå';
    const standardIcon = result.isStandardized ? 'üìã' : '‚ö†Ô∏è';
    
    console.log(`${index + 1}. ${statusIcon} ${standardIcon} ${result.method} ${result.endpoint}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${result.status} | ${result.notes}`);
    
    if (!result.isSuccess && result.status === 0) {
      console.log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫)`);
    } else if (!result.isSuccess) {
      console.log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: HTTP ${result.status}`);
    }
    
    if (!result.isStandardized && result.isSuccess) {
      console.log(`   üìã –¢—Ä–µ–±—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ API`);
    }
  });
  
  return {
    totalTests,
    successfulTests,
    standardizedTests,
    results: TEST_RESULTS
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
 */
function provideRecommendations() {
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ');
  console.log('='.repeat(60));
  
  const failedTests = TEST_RESULTS.filter(t => !t.isSuccess);
  const nonStandardTests = TEST_RESULTS.filter(t => t.isSuccess && !t.isStandardized);
  
  if (failedTests.length === 0 && nonStandardTests.length === 0) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.');
    return;
  }
  
  if (failedTests.some(t => t.status === 0)) {
    console.log('üöÄ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π npm run dev');
    console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  
  if (failedTests.some(t => t.status >= 400)) {
    console.log('üîß –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ API');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤');
    console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  }
  
  if (nonStandardTests.length > 0) {
    console.log('üìã –ü–†–ò–û–†–ò–¢–ï–¢ 3: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ API');
    console.log('   ‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É { success: true/false, data/error: ... }');
    console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫');
  }
  
  console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è live-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
  console.log('3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
  console.log('4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Telegram');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  try {
    await testAllEndpoints();
    const report = generateReport();
    provideRecommendations();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...');
    
    return report;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
}

export { runTests, callApi };