
#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å—Ç–æ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ UniFarm
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ß–ò–°–¢–û–¢–´ –ü–†–û–ï–ö–¢–ê UniFarm');
console.log('================================================');

let issues = 0;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const duplicatePatterns = ['.bak', '.old', '.backup', '.new', '_backup', '_old'];
const checkDuplicates = (dir) => {
  try {
    const items = fs.readdirSync(dir);
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        checkDuplicates(fullPath);
      } else {
        for (const pattern of duplicatePatterns) {
          if (item.includes(pattern)) {
            console.log(`‚ùå –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: ${fullPath}`);
            issues++;
          }
        }
      }
    }
  } catch (err) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
};

checkDuplicates('./');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ export-package
if (fs.existsSync('./export-package')) {
  console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è export-package/ –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  issues++;
} else {
  console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è export-package/ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ .replit —Ñ–∞–π–ª–æ–≤
const replitFiles = fs.readdirSync('./').filter(f => f.startsWith('.replit'));
if (replitFiles.length > 1) {
  console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${replitFiles.length} .replit —Ñ–∞–π–ª–æ–≤:`, replitFiles);
  issues++;
} else {
  console.log('‚úÖ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω .replit —Ñ–∞–π–ª (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const requiredDirs = ['client', 'server', 'shared', 'docs', 'logs', 'migrations'];
const missingDirs = [];

for (const dir of requiredDirs) {
  if (!fs.existsSync(`./${dir}`)) {
    missingDirs.push(dir);
  }
}

if (missingDirs.length > 0) {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', missingDirs);
  issues++;
} else {
  console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ index.ts —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
const indexFiles = [
  './server/controllers/index.ts',
  './server/services/index.ts'
];

for (const indexFile of indexFiles) {
  if (fs.existsSync(indexFile)) {
    console.log(`‚úÖ ${indexFile} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`‚ùå ${indexFile} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    issues++;
  }
}

console.log('\n================================================');
if (issues === 0) {
  console.log('üéâ –ü–†–û–ï–ö–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–©–ï–ù!');
  console.log('‚úÖ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã');
  console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é');
} else {
  console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${issues} –ø—Ä–æ–±–ª–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞`);
}

console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É Run');
console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoints');
console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram Mini App');
console.log('4. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω');

console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:');
try {
  const serverFiles = fs.readdirSync('./server', { recursive: true }).length;
  const clientFiles = fs.readdirSync('./client', { recursive: true }).length;
  console.log(`- –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã: ${serverFiles}`);
  console.log(`- –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ–∞–π–ª—ã: ${clientFiles}`);
} catch (err) {
  console.log('- –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã');
}
