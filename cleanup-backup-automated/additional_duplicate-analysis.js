/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ UniFarm
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, API –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
 */

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
const duplicateReport = {
  files: [],
  functions: [],
  apiRoutes: [],
  dbDuplicates: [],
  configs: [],
  businessLogic: [],
  styles: [],
  summary: {}
};

/**
 * –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
 */
async function analyzeProjectStructure() {
  console.log('üîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
  
  const fileMap = new Map();
  const similarFiles = [];
  const backupFiles = [];
  
  function scanDirectory(dir, relativePath = '') {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        if (item.startsWith('.') || item === 'node_modules') continue;
        
        const fullPath = path.join(dir, item);
        const itemRelativePath = path.join(relativePath, item);
        
        if (fs.statSync(fullPath).isDirectory()) {
          scanDirectory(fullPath, itemRelativePath);
        } else {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ backup —Ñ–∞–π–ª—ã
          if (item.includes('.old') || item.includes('.backup') || item.includes('.bak')) {
            backupFiles.push(itemRelativePath);
          }
          
          // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏
          const baseName = item.replace(/\.(old|backup|bak)/, '').replace(/\.\w+$/, '');
          if (!fileMap.has(baseName)) {
            fileMap.set(baseName, []);
          }
          fileMap.get(baseName).push(itemRelativePath);
        }
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}:`, err.message);
    }
  }
  
  scanDirectory('.');
  
  // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
  for (const [baseName, files] of fileMap) {
    if (files.length > 1) {
      similarFiles.push({ baseName, files });
    }
  }
  
  duplicateReport.files = {
    similarNames: similarFiles,
    backupFiles: backupFiles,
    totalFiles: Array.from(fileMap.values()).flat().length
  };
  
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${similarFiles.length} –≥—Ä—É–ø–ø —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏`);
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${backupFiles.length} backup —Ñ–∞–π–ª–æ–≤`);
}

/**
 * –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∫–æ–¥–µ
 */
async function analyzeCodeDuplicates() {
  console.log('üîç –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∫–æ–¥–µ...');
  
  const functionHashes = new Map();
  const duplicateFunctions = [];
  const componentHashes = new Map();
  const duplicateComponents = [];
  
  function extractFunctions(content, filePath) {
    // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
    const functionRegex = /(?:function\s+(\w+)|(?:const|let|var)\s+(\w+)\s*=\s*(?:\([^)]*\)\s*=>|function))/g;
    const functions = [];
    let match;
    
    while ((match = functionRegex.exec(content)) !== null) {
      const funcName = match[1] || match[2];
      if (funcName) {
        functions.push(funcName);
      }
    }
    
    return functions;
  }
  
  function extractComponents(content, filePath) {
    // –ü–æ–∏—Å–∫ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const componentRegex = /(?:export\s+(?:default\s+)?(?:function|const)\s+(\w+)|function\s+(\w+)\s*\([^)]*\)\s*{[^}]*return\s*<)/g;
    const components = [];
    let match;
    
    while ((match = componentRegex.exec(content)) !== null) {
      const compName = match[1] || match[2];
      if (compName && compName[0].toUpperCase() === compName[0]) {
        components.push(compName);
      }
    }
    
    return components;
  }
  
  function scanCodeFiles(dir, relativePath = '') {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        if (item.startsWith('.') || item === 'node_modules' || item === 'dist') continue;
        
        const fullPath = path.join(dir, item);
        const itemRelativePath = path.join(relativePath, item);
        
        if (fs.statSync(fullPath).isDirectory()) {
          scanCodeFiles(fullPath, itemRelativePath);
        } else if (item.match(/\.(js|ts|jsx|tsx)$/)) {
          try {
            const content = fs.readFileSync(fullPath, 'utf8');
            const contentHash = crypto.createHash('md5').update(content).digest('hex');
            
            // –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
            const functions = extractFunctions(content, itemRelativePath);
            functions.forEach(funcName => {
              const key = `${funcName}:${contentHash.slice(0, 8)}`;
              if (!functionHashes.has(key)) {
                functionHashes.set(key, []);
              }
              functionHashes.get(key).push(itemRelativePath);
            });
            
            // –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            const components = extractComponents(content, itemRelativePath);
            components.forEach(compName => {
              const key = `${compName}:${contentHash.slice(0, 8)}`;
              if (!componentHashes.has(key)) {
                componentHashes.set(key, []);
              }
              componentHashes.get(key).push(itemRelativePath);
            });
            
          } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${itemRelativePath}:`, err.message);
          }
        }
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}:`, err.message);
    }
  }
  
  scanCodeFiles('.');
  
  // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
  for (const [key, files] of functionHashes) {
    if (files.length > 1) {
      duplicateFunctions.push({
        name: key.split(':')[0],
        files: [...new Set(files)]
      });
    }
  }
  
  // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  for (const [key, files] of componentHashes) {
    if (files.length > 1) {
      duplicateComponents.push({
        name: key.split(':')[0],
        files: [...new Set(files)]
      });
    }
  }
  
  duplicateReport.functions = {
    duplicateFunctions,
    duplicateComponents,
    totalFunctions: functionHashes.size,
    totalComponents: componentHashes.size
  };
  
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${duplicateFunctions.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π`);
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${duplicateComponents.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
}

/**
 * –≠–¢–ê–ü 3: –ê–Ω–∞–ª–∏–∑ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
async function analyzeAPIRoutes() {
  console.log('üîç –≠–¢–ê–ü 3: –ê–Ω–∞–ª–∏–∑ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
  
  const routes = new Map();
  const duplicateRoutes = [];
  
  function extractRoutes(content, filePath) {
    const routePatterns = [
      /app\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/g,
      /router\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/g,
      /\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/g
    ];
    
    const foundRoutes = [];
    
    routePatterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        const method = match[1].toUpperCase();
        const route = match[2];
        foundRoutes.push(`${method} ${route}`);
      }
    });
    
    return foundRoutes;
  }
  
  function scanRouteFiles(dir, relativePath = '') {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        if (item.startsWith('.') || item === 'node_modules' || item === 'dist') continue;
        
        const fullPath = path.join(dir, item);
        const itemRelativePath = path.join(relativePath, item);
        
        if (fs.statSync(fullPath).isDirectory()) {
          scanRouteFiles(fullPath, itemRelativePath);
        } else if (item.match(/\.(js|ts)$/) && (item.includes('route') || item.includes('api') || item.includes('controller'))) {
          try {
            const content = fs.readFileSync(fullPath, 'utf8');
            const fileRoutes = extractRoutes(content, itemRelativePath);
            
            fileRoutes.forEach(route => {
              if (!routes.has(route)) {
                routes.set(route, []);
              }
              routes.get(route).push(itemRelativePath);
            });
            
          } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${itemRelativePath}:`, err.message);
          }
        }
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}:`, err.message);
    }
  }
  
  scanRouteFiles('.');
  
  // –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
  for (const [route, files] of routes) {
    if (files.length > 1) {
      duplicateRoutes.push({
        route,
        files: [...new Set(files)]
      });
    }
  }
  
  duplicateReport.apiRoutes = {
    duplicateRoutes,
    totalRoutes: routes.size,
    allRoutes: Array.from(routes.keys())
  };
  
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${duplicateRoutes.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
  console.log(`‚úì –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${routes.size} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
}

/**
 * –≠–¢–ê–ü 4: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */
async function analyzeConfigurations() {
  console.log('üîç –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...');
  
  const envVars = new Map();
  const constants = new Map();
  const duplicateEnvVars = [];
  const duplicateConstants = [];
  
  function extractEnvVars(content, filePath) {
    const envRegex = /process\.env\.(\w+)|import\.meta\.env\.(\w+)/g;
    const foundVars = [];
    let match;
    
    while ((match = envRegex.exec(content)) !== null) {
      const varName = match[1] || match[2];
      if (varName) {
        foundVars.push(varName);
      }
    }
    
    return foundVars;
  }
  
  function extractConstants(content, filePath) {
    const constRegex = /(?:const|let|var)\s+([A-Z_][A-Z0-9_]*)\s*=/g;
    const foundConstants = [];
    let match;
    
    while ((match = constRegex.exec(content)) !== null) {
      foundConstants.push(match[1]);
    }
    
    return foundConstants;
  }
  
  function scanConfigFiles(dir, relativePath = '') {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        if (item.startsWith('.') || item === 'node_modules' || item === 'dist') continue;
        
        const fullPath = path.join(dir, item);
        const itemRelativePath = path.join(relativePath, item);
        
        if (fs.statSync(fullPath).isDirectory()) {
          scanConfigFiles(fullPath, itemRelativePath);
        } else if (item.match(/\.(js|ts|jsx|tsx|env)$/)) {
          try {
            const content = fs.readFileSync(fullPath, 'utf8');
            
            // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            const vars = extractEnvVars(content, itemRelativePath);
            vars.forEach(varName => {
              if (!envVars.has(varName)) {
                envVars.set(varName, []);
              }
              envVars.get(varName).push(itemRelativePath);
            });
            
            // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            const consts = extractConstants(content, itemRelativePath);
            consts.forEach(constName => {
              if (!constants.has(constName)) {
                constants.set(constName, []);
              }
              constants.get(constName).push(itemRelativePath);
            });
            
          } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${itemRelativePath}:`, err.message);
          }
        }
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}:`, err.message);
    }
  }
  
  scanConfigFiles('.');
  
  duplicateReport.configs = {
    envVarsUsage: envVars.size,
    constantsUsage: constants.size,
    mostUsedEnvVars: Array.from(envVars.entries())
      .sort((a, b) => b[1].length - a[1].length)
      .slice(0, 10),
    mostUsedConstants: Array.from(constants.entries())
      .sort((a, b) => b[1].length - a[1].length)
      .slice(0, 10)
  };
  
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${envVars.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
  console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ ${constants.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç`);
}

/**
 * –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
 */
async function generateReport() {
  console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
  
  duplicateReport.summary = {
    timestamp: new Date().toISOString(),
    filesAnalyzed: duplicateReport.files.totalFiles || 0,
    duplicateFilesFound: duplicateReport.files.similarNames.length || 0,
    duplicateFunctionsFound: duplicateReport.functions?.duplicateFunctions?.length || 0,
    duplicateRoutesFound: duplicateReport.apiRoutes?.duplicateRoutes?.length || 0,
    backupFilesFound: duplicateReport.files.backupFiles.length || 0
  };
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const reportContent = JSON.stringify(duplicateReport, null, 2);
  fs.writeFileSync('duplicate-analysis-report.json', reportContent);
  
  console.log('\nüìã –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –û –î–£–ë–õ–ò–ö–ê–¢–ê–•:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`üìÅ –§–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏: ${duplicateReport.summary.duplicateFilesFound}`);
  console.log(`üóÇÔ∏è  Backup —Ñ–∞–π–ª—ã: ${duplicateReport.summary.backupFilesFound}`);
  console.log(`‚öôÔ∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏: ${duplicateReport.summary.duplicateFunctionsFound}`);
  console.log(`üåê –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è API –º–∞—Ä—à—Ä—É—Ç—ã: ${duplicateReport.summary.duplicateRoutesFound}`);
  console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${duplicateReport.summary.filesAnalyzed}`);
  
  if (duplicateReport.files.similarNames.length > 0) {
    console.log('\nüîç –§–ê–ô–õ–´ –° –ü–û–•–û–ñ–ò–ú–ò –ò–ú–ï–ù–ê–ú–ò:');
    duplicateReport.files.similarNames.slice(0, 5).forEach(group => {
      console.log(`  ‚Ä¢ ${group.baseName}: ${group.files.join(', ')}`);
    });
  }
  
  if (duplicateReport.functions?.duplicateFunctions?.length > 0) {
    console.log('\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –§–£–ù–ö–¶–ò–ò:');
    duplicateReport.functions.duplicateFunctions.slice(0, 5).forEach(func => {
      console.log(`  ‚Ä¢ ${func.name}: ${func.files.join(', ')}`);
    });
  }
  
  if (duplicateReport.apiRoutes?.duplicateRoutes?.length > 0) {
    console.log('\nüåê –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø API –ú–ê–†–®–†–£–¢–´:');
    duplicateReport.apiRoutes.duplicateRoutes.slice(0, 5).forEach(route => {
      console.log(`  ‚Ä¢ ${route.route}: ${route.files.join(', ')}`);
    });
  }
  
  console.log('\n‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ duplicate-analysis-report.json');
  
  return duplicateReport;
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
async function runFullAnalysis() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...\n');
    
    await analyzeProjectStructure();
    await analyzeCodeDuplicates();
    await analyzeAPIRoutes();
    await analyzeConfigurations();
    await generateReport();
    
    console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runFullAnalysis().catch(console.error);