/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è API —Ä–æ—É—Ç–æ–≤ –≤ UniFarm
 */

import fs from 'fs';

function fixDuplicateRoutes() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–æ—É—Ç–æ–≤...');
  
  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª routes-new.ts
  const filePath = 'server/routes-new.ts';
  const content = fs.readFileSync(filePath, 'utf8');
  
  let fixed = content;
  let changesCount = 0;
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è GET /api/quick-db-test (—Å—Ç—Ä–æ–∫–∏ 155-170)
  const quickDbTestDuplicate = /app\.get\('\/api\/quick-db-test', safeHandler\(async \(req, res\) => \{[^}]+\}\)\);/g;
  const quickDbTestMatches = content.match(quickDbTestDuplicate);
  if (quickDbTestMatches && quickDbTestMatches.length > 1) {
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—É–±–ª–∏–∫–∞—Ç
    const lastMatch = quickDbTestMatches[quickDbTestMatches.length - 1];
    const lastIndex = content.lastIndexOf(lastMatch);
    fixed = fixed.substring(0, lastIndex) + fixed.substring(lastIndex + lastMatch.length);
    changesCount++;
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è GET /api/quick-db-test');
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ—É—Ç–æ–≤ guest
  const guestRoutePattern = /app\.get\('\/api\/v2\/users\/guest\/:guest_id'[^}]+\}\)\);/g;
  const guestMatches = fixed.match(guestRoutePattern);
  if (guestMatches && guestMatches.length > 1) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    for (let i = 1; i < guestMatches.length; i++) {
      const matchIndex = fixed.indexOf(guestMatches[i]);
      if (matchIndex !== -1) {
        fixed = fixed.replace(guestMatches[i], '');
        changesCount++;
      }
    }
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${guestMatches.length - 1} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ GET /api/v2/users/guest/:guest_id`);
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è POST /api/register/telegram
  const telegramRegisterPattern = /app\.post\('\/api\/register\/telegram'[^}]+\}\)\);/g;
  const telegramMatches = fixed.match(telegramRegisterPattern);
  if (telegramMatches && telegramMatches.length > 1) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    for (let i = 1; i < telegramMatches.length; i++) {
      const matchIndex = fixed.indexOf(telegramMatches[i]);
      if (matchIndex !== -1) {
        fixed = fixed.replace(telegramMatches[i], '');
        changesCount++;
      }
    }
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${telegramMatches.length - 1} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ POST /api/register/telegram`);
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è POST /api/register/guest
  const guestRegisterPattern = /app\.post\('\/api\/register\/guest'[^}]+\}\)\);/g;
  const guestRegMatches = fixed.match(guestRegisterPattern);
  if (guestRegMatches && guestRegMatches.length > 1) {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    for (let i = 1; i < guestRegMatches.length; i++) {
      const matchIndex = fixed.indexOf(guestRegMatches[i]);
      if (matchIndex !== -1) {
        fixed = fixed.replace(guestRegMatches[i], '');
        changesCount++;
      }
    }
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${guestRegMatches.length - 1} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ POST /api/register/guest`);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  if (changesCount > 0) {
    fs.writeFileSync(filePath, fixed);
    console.log(`\n‚úÖ –§–∞–π–ª ${filePath} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
    console.log(`üìä –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${changesCount}`);
  } else {
    console.log('‚ÑπÔ∏è  –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
  }
}

function removeConflictingRoutes() {
  console.log('\nüîß –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  const routeFiles = [
    'server/routes/simple-boosts.ts',
    'server/routes/simple-missions.ts'
  ];
  
  routeFiles.forEach(file => {
    if (fs.existsSync(file)) {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = `cleanup-backup-automated/conflicting_${file.replace('/', '_')}`;
      fs.copyFileSync(file, backupPath);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      fs.unlinkSync(file);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π —Ñ–∞–π–ª: ${file}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–æ—É—Ç–æ–≤\n');
fixDuplicateRoutes();
removeConflictingRoutes();
console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–æ—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');