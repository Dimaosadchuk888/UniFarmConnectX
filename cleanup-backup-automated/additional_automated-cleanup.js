/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ UniFarm
 */

import fs from 'fs';
import path from 'path';

const BACKUP_DIR = 'cleanup-backup-automated';

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const filesToDelete = {
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
  testScripts: [
    'SQL_db_inspection.js',
    'add-test-balance-bonus.js',
    'add-test-balance-cli.js', 
    'add-test-balance.js',
    'api-audit.js',
    'api-consolidated-test.js',
    'api-controller-db-audit.js',
    'api-endpoints-test.js',
    'check-bot-settings.js',
    'check-current-user.js',
    'check-db-connection.js',
    'check-db-details.js',
    'check-deposits.js',
    'check-mini-app-url.js',
    'check-missions.js',
    'check-neon-components.js',
    'check-neon-connection.js',
    'check-neon-db-connection.js',
    'check-neon-settings.js',
    'check-production-url.js',
    'check-replit-db.js',
    'check-table-status.js',
    'check-telegram-auth.js',
    'check-telegram-webhook.js',
    'check-ton-boosts.js',
    'check-ton-farming.js',
    'check-users.js'
  ],
  
  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
  utilityScripts: [
    'analyze-file-naming.js',
    'analyze-refcodes.js',
    'api-routes-checker.js',
    'api-validation-report.js',
    'auth-flow-diagnosis.js',
    'benchmark-referral-bonus.js',
    'browser-access.js',
    'comprehensive-api-db-audit.js',
    'comprehensive-system-audit.js',
    'cors-fix-diagnosis.js',
    'create-multiple-users.js',
    'create-test-referral.js',
    'create-test-user.js',
    'create-test-users-api.js',
    'db-connection-diagnosis.js',
    'db-health-check.js',
    'db-schema-diagnosis.js',
    'db-status.js',
    'debug-bot-commands.js',
    'debug-deposit-direct.js',
    'debug-missions.js',
    'display-env-vars.js'
  ],
  
  // –°–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  deployScripts: [
    'deploy-build.js',
    'deploy-config.js', 
    'deploy-fix.js',
    'deploy-server.js',
    'deploy-to-replit.js',
    'deploy-with-neon.js',
    'deploy.js',
    'dev-production.js',
    'final-bot-setup.js',
    'final-bot-test.js',
    'fix-api-endpoints.js',
    'fix-balance-display.js',
    'fix-controller-names.js',
    'fix-mini-app-settings.js',
    'fix-telegram-miniapp-url.js',
    'fix-webhook-final.js',
    'fix-webhook-urgent.js',
    'fix-webhook.js',
    'setup-webhook.js',
    'update-menu-button.js'
  ],
  
  // –°–∫—Ä–∏–ø—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏  
  migrationScripts: [
    'migrate-db.js',
    'migrate-guest-id.js',
    'migrate-neon-db.js',
    'migrate-replit-db.js',
    'init-neon-db.js',
    'initialize-replit-database.mjs',
    'create-neon-partitions.js',
    'create-partition-quick.cjs',
    'create-test-referral.mjs',
    'direct-neon-connection.cjs',
    'direct-neon-schema.js',
    'direct-neon-start.js',
    'neon-app-start.js',
    'neon-connection-test.js',
    'neon-start.js'
  ]
};

function ensureBackupDir() {
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }
}

function backupAndDelete(filePath, category) {
  if (!fs.existsSync(filePath)) {
    return { status: 'not_found', message: `–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}` };
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backupPath = path.join(BACKUP_DIR, `${category}_${path.basename(filePath)}`);
    fs.copyFileSync(filePath, backupPath);
    
    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    fs.unlinkSync(filePath);
    
    return { status: 'deleted', message: `–£–¥–∞–ª–µ–Ω: ${filePath}` };
  } catch (error) {
    return { status: 'error', message: `–û—à–∏–±–∫–∞: ${filePath} - ${error.message}` };
  }
}

function cleanupCategory(categoryName, files) {
  console.log(`\nüßπ –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}`);
  console.log('‚ïê'.repeat(50));
  
  let deletedCount = 0;
  let notFoundCount = 0;
  let errorCount = 0;
  
  files.forEach(file => {
    const result = backupAndDelete(file, categoryName);
    
    switch (result.status) {
      case 'deleted':
        console.log(`‚úÖ ${result.message}`);
        deletedCount++;
        break;
      case 'not_found':
        console.log(`‚ö™ ${result.message}`);
        notFoundCount++;
        break;
      case 'error':
        console.log(`‚ùå ${result.message}`);
        errorCount++;
        break;
    }
  });
  
  console.log(`\nüìä –ò—Ç–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`);
  console.log(`   –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}`);
  console.log(`   –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFoundCount}`);
  console.log(`   –û—à–∏–±–∫–∏: ${errorCount}`);
  
  return { deleted: deletedCount, notFound: notFoundCount, errors: errorCount };
}

function generateCleanupReport(results) {
  const totalDeleted = Object.values(results).reduce((sum, r) => sum + r.deleted, 0);
  const totalNotFound = Object.values(results).reduce((sum, r) => sum + r.notFound, 0);
  const totalErrors = Object.values(results).reduce((sum, r) => sum + r.errors, 0);
  
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      totalDeleted,
      totalNotFound,
      totalErrors,
      backupLocation: BACKUP_DIR
    },
    categoryResults: results,
    nextSteps: [
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è API —Ä–æ—É—Ç—ã',
      '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ä—Ç–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö',
      '–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞–ø–∫–∏'
    ]
  };
  
  fs.writeFileSync('automated-cleanup-report.json', JSON.stringify(report, null, 2));
  
  console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò');
  console.log('‚ïê'.repeat(60));
  console.log(`üóëÔ∏è  –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalDeleted}`);
  console.log(`‚ö™ –§–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${totalNotFound}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${totalErrors}`);
  console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: ${BACKUP_DIR}/`);
  console.log('\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ automated-cleanup-report.json');
}

function createRestoreScript() {
  const restoreScript = `#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ ${BACKUP_DIR}..."

if [ ! -d "${BACKUP_DIR}" ]; then
  echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
  exit 1
fi

cd ${BACKUP_DIR}
for backup_file in *; do
  if [ -f "$backup_file" ]; then
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    original_name="\${backup_file#*_}"
    cp "$backup_file" "../$original_name"
    echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $original_name"
  fi
done

echo "üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
`;

  fs.writeFileSync('restore-automated-cleanup.sh', restoreScript);
  console.log('\nüõü –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: restore-automated-cleanup.sh');
}

function runAutomatedCleanup() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ UniFarm');
  console.log('‚ö†Ô∏è  –í—Å–µ —É–¥–∞–ª—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backup\n');
  
  ensureBackupDir();
  
  const results = {};
  
  // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  for (const [categoryName, files] of Object.entries(filesToDelete)) {
    results[categoryName] = cleanupCategory(categoryName, files);
  }
  
  generateCleanupReport(results);
  createRestoreScript();
  
  console.log('\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üìÅ –ü—Ä–æ–µ–∫—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –æ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤');
  console.log('üõü –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö: bash restore-automated-cleanup.sh');
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
runAutomatedCleanup();