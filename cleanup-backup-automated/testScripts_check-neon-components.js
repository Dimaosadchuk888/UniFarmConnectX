/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å Neon DB
 */

import 'dotenv/config';
import pg from 'pg';
const { Pool } = pg;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Neon DB
process.env.DATABASE_PROVIDER = 'neon';
process.env.USE_LOCAL_DB_ONLY = 'false';

async function checkNeonComponents() {
  if (!process.env.DATABASE_URL) {
    log('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', colors.red);
    return false;
  }

  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UniFarm —Å Neon DB...\n', colors.blue);
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });

  try {
    // 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const connectionResult = await pool.query('SELECT NOW() as time');
    log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Neon DB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', colors.green);
    log(`–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${connectionResult.rows[0].time}`, colors.reset);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:', colors.blue);
    
    const coreTables = ['users', 'transactions', 'farming_deposits', 'referrals'];
    
    for (const table of coreTables) {
      try {
        const countResult = await pool.query(`SELECT COUNT(*) FROM ${table}`);
        const rowCount = parseInt(countResult.rows[0].count);
        log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: ${rowCount} –∑–∞–ø–∏—Å–µ–π`, colors.green);
        
        // –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π
        if (rowCount > 0) {
          const rowsResult = await pool.query(`SELECT * FROM ${table} LIMIT 2`);
          log(`   –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π (${Math.min(rowCount, 2)} –∏–∑ ${rowCount}):`, colors.reset);
          rowsResult.rows.forEach((row, index) => {
            // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ª—å–∫–æ id –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π
            const simplifiedRow = { id: row.id };
            if (table === 'users') {
              simplifiedRow.username = row.username;
              simplifiedRow.ref_code = row.ref_code;
              simplifiedRow.balance_uni = row.balance_uni;
            } else if (table === 'transactions') {
              simplifiedRow.user_id = row.user_id;
              simplifiedRow.type = row.type;
              simplifiedRow.amount = row.amount;
              simplifiedRow.created_at = row.created_at;
            } else if (table === 'farming_deposits') {
              simplifiedRow.user_id = row.user_id;
              simplifiedRow.amount_uni = row.amount_uni;
              simplifiedRow.created_at = row.created_at;
            } else if (table === 'referrals') {
              simplifiedRow.user_id = row.user_id;
              simplifiedRow.inviter_id = row.inviter_id;
              simplifiedRow.level = row.level;
            }
            
            log(`   ${index + 1}. ${JSON.stringify(simplifiedRow)}`, colors.reset);
          });
        }
      } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${table}: ${err.message}`, colors.red);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∏–Ω–≥–∞
    log('\nüöú –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:', colors.blue);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ
      const farmingResult = await pool.query(`
        SELECT u.id, u.username, u.uni_deposit_amount, u.uni_farming_balance, u.uni_farming_rate 
        FROM users u 
        WHERE u.uni_deposit_amount > 0
        LIMIT 3
      `);
      
      if (farmingResult.rows.length > 0) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${farmingResult.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–∏–Ω–≥–æ–º:`, colors.green);
        farmingResult.rows.forEach((row, index) => {
          log(`   ${index + 1}. ID: ${row.id}, –ò–º—è: ${row.username}, –î–µ–ø–æ–∑–∏—Ç: ${row.uni_deposit_amount}, –ë–∞–ª–∞–Ω—Å: ${row.uni_farming_balance}, –°—Ç–∞–≤–∫–∞: ${row.uni_farming_rate}`, colors.reset);
        });
      } else {
        log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞—Ä–º–∏–Ω–≥–æ–º', colors.yellow);
      }
    } catch (err) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞: ${err.message}`, colors.red);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', colors.blue);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
      const referralResult = await pool.query(`
        SELECT r.user_id, r.inviter_id, r.level, r.reward_uni,
              u1.username as user_name, u2.username as inviter_name
        FROM referrals r
        JOIN users u1 ON r.user_id = u1.id
        JOIN users u2 ON r.inviter_id = u2.id
        LIMIT 3
      `);
      
      if (referralResult.rows.length > 0) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${referralResult.rows.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π:`, colors.green);
        referralResult.rows.forEach((row, index) => {
          log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${row.user_name} (ID: ${row.user_id}), –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: ${row.inviter_name} (ID: ${row.inviter_id}), –£—Ä–æ–≤–µ–Ω—å: ${row.level}, –ù–∞–≥—Ä–∞–¥–∞: ${row.reward_uni}`, colors.reset);
        });
      } else {
        log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π', colors.yellow);
      }
    } catch (err) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ${err.message}`, colors.red);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏—Å—Å–∏–π
    log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏—Å—Å–∏–π:', colors.blue);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Å—Å–∏–∏
      const missionsResult = await pool.query(`
        SELECT id, type, title, reward_uni, is_active
        FROM missions
        LIMIT 5
      `);
      
      if (missionsResult.rows.length > 0) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${missionsResult.rows.length} –º–∏—Å—Å–∏–π:`, colors.green);
        missionsResult.rows.forEach((row, index) => {
          log(`   ${index + 1}. ${row.title} (ID: ${row.id}, –¢–∏–ø: ${row.type}, –ù–∞–≥—Ä–∞–¥–∞: ${row.reward_uni}, –ê–∫—Ç–∏–≤–Ω–∞: ${row.is_active ? '–î–∞' : '–ù–µ—Ç'})`, colors.reset);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏
        const completedMissionsResult = await pool.query(`
          SELECT um.user_id, u.username, um.mission_id, m.title, um.completed_at
          FROM user_missions um
          JOIN users u ON um.user_id = u.id
          JOIN missions m ON um.mission_id = m.id
          LIMIT 3
        `);
        
        if (completedMissionsResult.rows.length > 0) {
          log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${completedMissionsResult.rows.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:`, colors.green);
          completedMissionsResult.rows.forEach((row, index) => {
            log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${row.username}, –ú–∏—Å—Å–∏—è: ${row.title}, –í—ã–ø–æ–ª–Ω–µ–Ω–∞: ${row.completed_at}`, colors.reset);
          });
        } else {
          log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π', colors.yellow);
        }
      } else {
        log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∏—Å—Å–∏–π', colors.yellow);
      }
    } catch (err) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏—Å—Å–∏–π: ${err.message}`, colors.red);
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost
    log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost:', colors.blue);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã
      const tonBoostResult = await pool.query(`
        SELECT tbd.id, tbd.user_id, u.username, tbd.ton_amount, tbd.bonus_uni, tbd.is_active, tbd.created_at
        FROM ton_boost_deposits tbd
        JOIN users u ON tbd.user_id = u.id
        LIMIT 3
      `);
      
      if (tonBoostResult.rows.length > 0) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tonBoostResult.rows.length} TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`, colors.green);
        tonBoostResult.rows.forEach((row, index) => {
          log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${row.username}, –°—É–º–º–∞ TON: ${row.ton_amount}, –ë–æ–Ω—É—Å UNI: ${row.bonus_uni}, –ê–∫—Ç–∏–≤–µ–Ω: ${row.is_active ? '–î–∞' : '–ù–µ—Ç'}, –°–æ–∑–¥–∞–Ω: ${row.created_at}`, colors.reset);
        });
      } else {
        log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ TON Boost –¥–µ–ø–æ–∑–∏—Ç–æ–≤', colors.yellow);
      }
    } catch (err) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TON Boost: ${err.message}`, colors.red);
    }
    
    // –û–±—â–∏–π –∏—Ç–æ–≥
    log('\nüèÜ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UniFarm —Å Neon DB:', colors.magenta);
    log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', colors.green);
    log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ', colors.green);
    log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', colors.green);
    
    return true;
  } catch (err) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, colors.red);
    console.error(err.stack);
    return false;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkNeonComponents()
  .then(success => {
    if (success) {
      log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UniFarm —Å Neon DB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.green);
    } else {
      log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UniFarm —Å Neon DB –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏', colors.red);
      process.exit(1);
    }
  })
  .catch(err => {
    console.error('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });