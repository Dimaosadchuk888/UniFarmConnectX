/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram webhook –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω URL
 */

import fetch from 'node-fetch';

// –ü—Ä–æ–¥–∞–∫—à–Ω URL –¥–ª—è webhook
const PRODUCTION_URL = 'https://uni-farm-connect-xo-osadchukdmitro2.replit.app';
const WEBHOOK_URL = `${PRODUCTION_URL}/api/telegram/webhook`;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π webhook
 */
async function checkWebhook() {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return null;
    }

    const response = await fetch(`https://api.telegram.org/bot${token}/getWebhookInfo`);
    const result = await response.json();
    
    if (result.ok) {
      console.log('üîç –¢–µ–∫—É—â–∏–π webhook:', result.result.url || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
      console.log('üìä –°—Ç–∞—Ç—É—Å webhook:', {
        url: result.result.url,
        has_custom_certificate: result.result.has_custom_certificate,
        pending_update_count: result.result.pending_update_count,
        last_error_date: result.result.last_error_date,
        last_error_message: result.result.last_error_message
      });
      return result.result;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', result.description);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook:', error.message);
    return null;
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω URL
 */
async function setWebhook() {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    console.log(`üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞: ${WEBHOOK_URL}`);
    
    const response = await fetch(`https://api.telegram.org/bot${token}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        drop_pending_updates: true
      })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', result.description);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', error.message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ò –£–°–¢–ê–ù–û–í–ö–ê TELEGRAM WEBHOOK');
  console.log(`üìç –ü—Ä–æ–¥–∞–∫—à–Ω URL: ${PRODUCTION_URL}`);
  console.log(`üîó Webhook URL: ${WEBHOOK_URL}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
  const currentWebhook = await checkWebhook();
  
  if (currentWebhook && currentWebhook.url === WEBHOOK_URL) {
    console.log('‚úÖ Webhook —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω URL!');
  } else {
    console.log('üîß Webhook —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π webhook
    const success = await setWebhook();
    
    if (success) {
      console.log('üéâ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω URL!');
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      await checkWebhook();
    }
  }
  
  console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main().catch(console.error);

export { main };