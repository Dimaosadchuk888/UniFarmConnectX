/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Neon DB
 */

import 'dotenv/config';
import pg from 'pg';
const { Pool } = pg;

async function checkNeonSettings() {
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return false;
  }

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Neon DB...\n');
  console.log(`URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@')}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ URL –ø—É–ª–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const isUsingPooler = process.env.DATABASE_URL.includes('-pooler');
  console.log(`üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${isUsingPooler ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    const versionResult = await pool.query('SELECT version()');
    console.log(`üî¢ –í–µ—Ä—Å–∏—è PostgreSQL: ${versionResult.rows[0].version.split(',')[0]}`);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
    const sslResult = await pool.query('SHOW ssl');
    console.log(`üîí SSL –≤–∫–ª—é—á–µ–Ω: ${sslResult.rows[0].ssl === 'on' ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    const connectionsResult = await pool.query(`
      SELECT count(*) as active_connections 
      FROM pg_stat_activity 
      WHERE datname = current_database()
    `);
    console.log(`üîå –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${connectionsResult.rows[0].active_connections}`);

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    const maxConnectionsResult = await pool.query('SHOW max_connections');
    console.log(`üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${maxConnectionsResult.rows[0].max_connections}`);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è transactions
    try {
      const partitionResult = await pool.query(`
        SELECT count(*) as partition_count
        FROM pg_inherits
        JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
        JOIN pg_class child ON pg_inherits.inhrelid = child.oid
        WHERE parent.relname = 'transactions'
      `);
      
      const isPartitioned = partitionResult.rows[0].partition_count > 0;
      console.log(`üìã –¢–∞–±–ª–∏—Ü–∞ transactions –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞: ${isPartitioned ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      
      if (isPartitioned) {
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏—Ü–∏–π: ${partitionResult.rows[0].partition_count}`);
      }
    } catch (err) {
      console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è transactions: ‚ùå –û—à–∏–±–∫–∞ (${err.message})`);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbSizeResult = await pool.query(`
      SELECT pg_size_pretty(pg_database_size(current_database())) as db_size
    `);
    console.log(`üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbSizeResult.rows[0].db_size}`);

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const passwordEncryptionResult = await pool.query('SHOW password_encryption');
    console.log(`üîê –ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π: ${passwordEncryptionResult.rows[0].password_encryption}`);

    // 8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL:');
    
    const configParams = [
      'work_mem', 
      'maintenance_work_mem', 
      'shared_buffers', 
      'effective_cache_size',
      'max_wal_size',
      'default_statistics_target'
    ];
    
    for (const param of configParams) {
      try {
        const result = await pool.query(`SHOW ${param}`);
        console.log(`   ${param}: ${result.rows[0][param]}`);
      } catch (err) {
        console.log(`   ${param}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
      }
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Neon DB –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    if (!isUsingPooler) {
      console.log('1. –í–∫–ª—é—á–∏—Ç–µ –ø—É–ª–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ Neon Dashboard –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      console.log('   - –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "-pooler" –≤ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞');
    }
    
    try {
      const partitionCheckResult = await pool.query(`
        SELECT EXISTS (
          SELECT FROM pg_tables 
          WHERE schemaname = 'public' AND tablename = 'transactions'
        ) as exists
      `);
      
      if (partitionCheckResult.rows[0].exists) {
        const partitionResult = await pool.query(`
          SELECT EXISTS (
            SELECT FROM pg_class c
            JOIN pg_namespace n ON c.relnamespace = n.oid
            WHERE c.relname = 'transactions' AND n.nspname = 'public' AND c.relkind = 'p'
          ) as is_partitioned
        `);
        
        if (!partitionResult.rows[0].is_partitioned) {
          console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã transactions');
          console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç fix-partition-schema.cjs –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
      }
    } catch (err) {
      console.log('2. –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.');
    }

    return true;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Neon DB: ${err.message}`);
    console.error(err.stack);
    return false;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkNeonSettings()
  .then(success => {
    if (!success) {
      process.exit(1);
    }
  })
  .catch(err => {
    console.error('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });