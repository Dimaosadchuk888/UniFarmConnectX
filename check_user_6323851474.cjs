const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function checkUser() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: 6323851474');
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    const { data, error } = await supabase
      .from('users')
      .select('id, telegram_id, username, first_name, ref_code, referred_by')
      .eq('telegram_id', '6323851474');
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
      return;
    }
    
    if (!data || data.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id 6323851474 –ù–ï –ù–ê–ô–î–ï–ù');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      const { data: stringData, error: stringError } = await supabase
        .from('users')
        .select('id, telegram_id, username, first_name, ref_code, referred_by')
        .eq('telegram_id', '6323851474');
      
      if (!stringError && stringData && stringData.length > 0) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞:', stringData[0]);
      } else {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ telegram_id...');
        const { data: similarData } = await supabase
          .from('users')
          .select('id, telegram_id, username, first_name, ref_code, referred_by')
          .like('telegram_id', '%632385%');
        
        if (similarData && similarData.length > 0) {
          console.log('üìã –ü–æ—Ö–æ–∂–∏–µ telegram_id:');
          similarData.forEach(user => {
            console.log(`   ID: ${user.id}, telegram_id: ${user.telegram_id}, username: ${user.username}`);
          });
        } else {
          console.log('‚ùå –ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      }
      return;
    }
    
    const user = data[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ê–ô–î–ï–ù:');
    console.log('   ID:', user.id);
    console.log('   telegram_id:', user.telegram_id);
    console.log('   username:', user.username);
    console.log('   first_name:', user.first_name);
    console.log('   ref_code:', user.ref_code);
    console.log('   referred_by:', user.referred_by);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    const { data: referrals, error: refError } = await supabase
      .from('referrals')
      .select('referred_user_id')
      .eq('referrer_user_id', user.id);
    
    if (!refError && referrals) {
      console.log('   üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', referrals.length);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    if (user.referred_by) {
      const { data: referrer, error: referrerError } = await supabase
        .from('users')
        .select('id, username, ref_code')
        .eq('id', user.referred_by)
        .single();
      
      if (!referrerError && referrer) {
        console.log('   üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª:', referrer.username, '(ID:', referrer.id, ', ref_code:', referrer.ref_code, ')');
      }
    } else {
      console.log('   üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: –ù–ï –£–ö–ê–ó–ê–ù (—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)');
    }
    
  } catch (err) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

checkUser();