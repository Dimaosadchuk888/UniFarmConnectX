/**
 * –≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Supabase API
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config();

class FinalSupabaseConnectionTest {
  constructor() {
    this.results = [];
    this.errors = [];
    this.duplicateConnections = [];
    this.moduleTests = [];
    
    // –ü—Ä–æ–ø–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.supabaseUrl = process.env.SUPABASE_URL;
    this.supabaseKey = process.env.SUPABASE_KEY;
    
    if (!this.supabaseUrl || !this.supabaseKey) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏–ª–∏ SUPABASE_KEY');
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    this.supabase = createClient(this.supabaseUrl, this.supabaseKey);
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase API...\n');
  }

  log(category, test, status, details = null) {
    const entry = {
      category,
      test,
      status,
      details,
      timestamp: new Date().toISOString()
    };
    
    this.results.push(entry);
    const statusIcon = status === 'SUCCESS' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${statusIcon} [${category}] ${test}${details ? ': ' + JSON.stringify(details) : ''}`);
  }

  /**
   * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ core/supabase.ts
   */
  async checkSupabaseCore() {
    console.log('\nüìÑ 1. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê SUPABASE.TS\n');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
      const coreSupabasePath = join(__dirname, 'core', 'supabase.ts');
      const coreSupabaseClientPath = join(__dirname, 'core', 'supabaseClient.ts');
      
      let mainFile = null;
      let backupFile = null;
      
      if (fs.existsSync(coreSupabasePath)) {
        const content = fs.readFileSync(coreSupabasePath, 'utf8');
        mainFile = { path: coreSupabasePath, content };
        this.log('CORE', 'core/supabase.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'SUCCESS');
      }
      
      if (fs.existsSync(coreSupabaseClientPath)) {
        const content = fs.readFileSync(coreSupabaseClientPath, 'utf8');
        backupFile = { path: coreSupabaseClientPath, content };
        this.log('CORE', 'core/supabaseClient.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'WARNING', '–î—É–±–ª–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª');
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
      if (mainFile) {
        if (mainFile.content.includes('createClient')) {
          this.log('CORE', 'createClient() –Ω–∞–π–¥–µ–Ω', 'SUCCESS');
        }
        if (mainFile.content.includes('process.env.SUPABASE_URL')) {
          this.log('CORE', 'SUPABASE_URL —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ env', 'SUCCESS');
        }
        if (mainFile.content.includes('process.env.SUPABASE_KEY')) {
          this.log('CORE', 'SUPABASE_KEY —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ env', 'SUCCESS');
        }
        if (mainFile.content.includes('export const supabase')) {
          this.log('CORE', 'supabase —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è', 'SUCCESS');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const { data, error } = await this.supabase
        .from('users')
        .select('*')
        .limit(1);
        
      if (!error) {
        this.log('CORE', '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'SUCCESS', `–ü–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      } else {
        this.log('CORE', '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'ERROR', error.message);
      }
      
    } catch (error) {
      this.log('CORE', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', 'ERROR', error.message);
    }
  }

  /**
   * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
   */
  async testAllModules() {
    console.log('\nüß© 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–û–î–£–õ–ï–ô\n');
    
    const modules = [
      { name: 'users', operation: 'select by telegram_id' },
      { name: 'transactions', operation: 'insert transaction' },
      { name: 'farming_sessions', operation: 'update farming' },
      { name: 'referrals', operation: 'select by ref_code' }
    ];
    
    for (const module of modules) {
      await this.testModule(module.name, module.operation);
    }
  }

  async testModule(tableName, operation) {
    try {
      switch (operation) {
        case 'select by telegram_id':
          const { data: userData, error: userError } = await this.supabase
            .from(tableName)
            .select('*')
            .eq('telegram_id', '777777777')
            .limit(1);
            
          if (!userError) {
            this.log('MODULE', `${tableName} - ${operation}`, 'SUCCESS', `–ù–∞–π–¥–µ–Ω–æ ${userData?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
          } else {
            this.log('MODULE', `${tableName} - ${operation}`, 'ERROR', userError.message);
          }
          break;
          
        case 'insert transaction':
          const testTransaction = {
            user_id: 1,
            amount: 0.001,
            transaction_type: 'daily_bonus',
            status: 'completed',
            created_at: new Date().toISOString()
          };
          
          const { data: txData, error: txError } = await this.supabase
            .from(tableName)
            .insert([testTransaction])
            .select()
            .single();
            
          if (!txError && txData) {
            this.log('MODULE', `${tableName} - ${operation}`, 'SUCCESS', `ID: ${txData.id}`);
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await this.supabase.from(tableName).delete().eq('id', txData.id);
          } else {
            this.log('MODULE', `${tableName} - ${operation}`, 'ERROR', txError?.message || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
          }
          break;
          
        case 'update farming':
          const { error: updateError } = await this.supabase
            .from('users')
            .update({ last_active: new Date().toISOString() })
            .eq('telegram_id', '777777777');
            
          if (!updateError) {
            this.log('MODULE', `${tableName} - ${operation}`, 'SUCCESS', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ');
          } else {
            this.log('MODULE', `${tableName} - ${operation}`, 'ERROR', updateError.message);
          }
          break;
          
        case 'select by ref_code':
          const { data: refData, error: refError } = await this.supabase
            .from('users')
            .select('*')
            .like('ref_code', 'REF_%')
            .limit(5);
            
          if (!refError) {
            this.log('MODULE', `${tableName} - ${operation}`, 'SUCCESS', `–ù–∞–π–¥–µ–Ω–æ ${refData?.length || 0} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
          } else {
            this.log('MODULE', `${tableName} - ${operation}`, 'ERROR', refError.message);
          }
          break;
      }
    } catch (error) {
      this.log('MODULE', `${tableName} - ${operation}`, 'ERROR', error.message);
    }
  }

  /**
   * 3. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   */
  async checkDuplicateConnections() {
    console.log('\nüîç 3. –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô\n');
    
    const filesToCheck = [
      'core/supabase.ts',
      'core/supabaseClient.ts', 
      'core/db.ts',
      'server/db.ts',
      'config/database.ts'
    ];
    
    for (const file of filesToCheck) {
      const filePath = join(__dirname, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        if (content.includes('createClient') || content.includes('supabase')) {
          if (content.includes('DATABASE_URL') || content.includes('PGHOST')) {
            this.log('DUPLICATE', file, 'WARNING', '–ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ë–î');
            this.duplicateConnections.push(file);
          } else {
            this.log('DUPLICATE', file, 'SUCCESS', '–ß–∏—Å—Ç–æ–µ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
          }
        }
      }
    }
  }

  /**
   * 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
   */
  async testRealFunctionality() {
    console.log('\nüß™ 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê\n');
    
    // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.testUserRegistration();
    
    // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    await this.testBalanceLoading();
    
    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await this.testTransactionRecording();
    
    // –¢–µ—Å—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    await this.testBonusAwarding();
  }

  async testUserRegistration() {
    try {
      const testUser = {
        telegram_id: `test_${Date.now()}`,
        username: 'test_user',
        ref_code: `REF_TEST_${Date.now()}`,
        balance_uni: 100,
        balance_ton: 50,
        created_at: new Date().toISOString()
      };
      
      const { data, error } = await this.supabase
        .from('users')
        .insert([testUser])
        .select()
        .single();
        
      if (!error && data) {
        this.log('FUNCTIONALITY', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'SUCCESS', `ID: ${data.id}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.supabase.from('users').delete().eq('id', data.id);
      } else {
        this.log('FUNCTIONALITY', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'ERROR', error?.message);
      }
    } catch (error) {
      this.log('FUNCTIONALITY', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'ERROR', error.message);
    }
  }

  async testBalanceLoading() {
    try {
      const { data, error } = await this.supabase
        .from('users')
        .select('balance_uni, balance_ton')
        .eq('telegram_id', '777777777')
        .single();
        
      if (!error && data) {
        this.log('FUNCTIONALITY', '–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞', 'SUCCESS', {
          uni: data.balance_uni,
          ton: data.balance_ton
        });
      } else {
        this.log('FUNCTIONALITY', '–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞', 'ERROR', error?.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      this.log('FUNCTIONALITY', '–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞', 'ERROR', error.message);
    }
  }

  async testTransactionRecording() {
    try {
      const transaction = {
        user_id: 1,
        amount: 5.0,
        transaction_type: 'test_bonus',
        status: 'completed',
        created_at: new Date().toISOString()
      };
      
      const { data, error } = await this.supabase
        .from('transactions')
        .insert([transaction])
        .select()
        .single();
        
      if (!error && data) {
        this.log('FUNCTIONALITY', '–ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'SUCCESS', `Transaction ID: ${data.id}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await this.supabase.from('transactions').delete().eq('id', data.id);
      } else {
        this.log('FUNCTIONALITY', '–ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'ERROR', error?.message);
      }
    } catch (error) {
      this.log('FUNCTIONALITY', '–ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'ERROR', error.message);
    }
  }

  async testBonusAwarding() {
    try {
      const { error } = await this.supabase
        .from('users')
        .update({ 
          checkin_last_date: new Date().toISOString(),
          checkin_streak: 1
        })
        .eq('telegram_id', '777777777');
        
      if (!error) {
        this.log('FUNCTIONALITY', '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞', 'SUCCESS', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ streak –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        this.log('FUNCTIONALITY', '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞', 'ERROR', error.message);
      }
    } catch (error) {
      this.log('FUNCTIONALITY', '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞', 'ERROR', error.message);
    }
  }

  /**
   * 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateFinalReport() {
    console.log('\nüìä 5. –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n');
    
    const totalTests = this.results.length;
    const successful = this.results.filter(r => r.status === 'SUCCESS').length;
    const warnings = this.results.filter(r => r.status === 'WARNING').length;
    const errors = this.results.filter(r => r.status === 'ERROR').length;
    
    const report = {
      summary: {
        total_tests: totalTests,
        successful: successful,
        warnings: warnings,
        errors: errors,
        success_rate: Math.round((successful / totalTests) * 100)
      },
      supabase_connection: {
        url: this.supabaseUrl,
        key_present: !!this.supabaseKey,
        core_file: 'core/supabase.ts',
        backup_file: 'core/supabaseClient.ts'
      },
      duplicate_connections: this.duplicateConnections,
      data_source_status: this.duplicateConnections.length === 0 ? 'SUPABASE API ONLY' : 'HAS DUPLICATES',
      test_results: this.results
    };
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successful}/${totalTests} (${report.summary.success_rate}%)`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üîÑ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.duplicateConnections.length}`);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: ${report.data_source_status}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    fs.writeFileSync(
      join(__dirname, 'FINAL_SUPABASE_CONNECTION_REPORT.json'),
      JSON.stringify(report, null, 2)
    );
    
    return report;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
   */
  async runFullTest() {
    try {
      await this.checkSupabaseCore();
      await this.testAllModules();
      await this.checkDuplicateConnections();
      await this.testRealFunctionality();
      
      const report = this.generateFinalReport();
      
      console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n');
      
      if (report.summary.success_rate >= 90) {
        console.log('üü¢ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION - Supabase API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ');
      } else if (report.summary.success_rate >= 70) {
        console.log('üü° –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–ê - –¢—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      } else {
        console.log('üî¥ –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò - –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
      }
      
      if (this.duplicateConnections.length === 0) {
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: Supabase - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö');
      } else {
        console.log('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      return report;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
      throw error;
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  try {
    const test = new FinalSupabaseConnectionTest();
    const report = await test.runFullTest();
    
    process.exit(report.summary.success_rate >= 70 ? 0 : 1);
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();