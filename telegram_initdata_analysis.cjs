#!/usr/bin/env node
/**
 * –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò TELEGRAM INITDATA
 * –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è start_param / ref_by
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ê–ù–ê–õ–ò–ó TELEGRAM INITDATA –û–ë–†–ê–ë–û–¢–ö–ò');
console.log('====================================\n');

function analyzeTelegramUtils() {
  console.log('1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó utils/telegram.ts:');
  console.log('----------------------------');
  
  try {
    const filePath = path.join(process.cwd(), 'utils/telegram.ts');
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ start_param –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const hasStartParamInterface = content.includes('start_param?:');
    console.log(`‚úÖ start_param –≤ TelegramInitData –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: ${hasStartParamInterface ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    
    // –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É start_param –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const lines = content.split('\n');
    let startParamProcessing = [];
    let validationReturnStructure = [];
    
    lines.forEach((line, index) => {
      const trimmed = line.trim();
      if (trimmed.includes('start_param') && !trimmed.includes('interface')) {
        startParamProcessing.push({ line: index + 1, content: trimmed });
      }
      
      // –ò—â–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (trimmed.includes('return { valid: true') || trimmed.includes('return {')) {
        validationReturnStructure.push({ line: index + 1, content: trimmed });
      }
    });
    
    console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ start_param –Ω–∞–π–¥–µ–Ω–∞ –≤ ${startParamProcessing.length} –º–µ—Å—Ç–∞—Ö:`);
    startParamProcessing.forEach(item => {
      console.log(`   –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
    });
    
    console.log(`\nüìã Return —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (${validationReturnStructure.length} –º–µ—Å—Ç):`);
    validationReturnStructure.slice(0, 3).forEach(item => {
      console.log(`   –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ª–∏ start_param –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const returnsStartParam = content.includes('start_param') && (
      content.includes('start_param:') || 
      content.includes('startParam:') ||
      content.includes('ref_by')
    );
    
    console.log(`\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê:`);
    console.log(`   –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç start_param: ${returnsStartParam ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ telegram utils:', error.message);
  }
}

function analyzeAuthController() {
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó modules/auth/controller.ts:');
  console.log('-----------------------------------');
  
  try {
    const filePath = path.join(process.cwd(), 'modules/auth/controller.ts');
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º –≥–¥–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è initData
    const lines = content.split('\n');
    let initDataExtraction = [];
    let refByExtraction = [];
    
    lines.forEach((line, index) => {
      const trimmed = line.trim();
      if (trimmed.includes('initData') && !trimmed.includes('//')) {
        initDataExtraction.push({ line: index + 1, content: trimmed });
      }
      
      if (trimmed.includes('ref_by') || trimmed.includes('refBy')) {
        refByExtraction.push({ line: index + 1, content: trimmed });
      }
    });
    
    console.log(`üìã InitData –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (${initDataExtraction.length} –º–µ—Å—Ç):`);
    initDataExtraction.slice(0, 5).forEach(item => {
      console.log(`   –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
    });
    
    console.log(`\nüìã ref_by –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (${refByExtraction.length} –º–µ—Å—Ç):`);
    refByExtraction.slice(0, 5).forEach(item => {
      console.log(`   –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ telegram validation
    const callsTelegramValidation = content.includes('validateTelegramInitData') || 
                                   content.includes('telegram.validate');
    console.log(`\nüîç –í—ã–∑—ã–≤–∞–µ—Ç telegram validation: ${callsTelegramValidation ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ auth controller:', error.message);
  }
}

function analyzeAuthService() {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó modules/auth/service.ts:');
  console.log('--------------------------------');
  
  try {
    const filePath = path.join(process.cwd(), 'modules/auth/service.ts');
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º –º–µ—Ç–æ–¥ registerWithTelegram
    const hasRegisterWithTelegram = content.includes('registerWithTelegram');
    console.log(`‚úÖ registerWithTelegram –º–µ—Ç–æ–¥: ${hasRegisterWithTelegram ? '‚úÖ –ù–ê–ô–î–ï–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
    
    // –ò—â–µ–º –≥–¥–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è initData
    const lines = content.split('\n');
    let telegramProcessing = [];
    
    lines.forEach((line, index) => {
      const trimmed = line.trim();
      if (trimmed.includes('initData') || 
          (trimmed.includes('validateTelegram') && !trimmed.includes('//'))) {
        telegramProcessing.push({ line: index + 1, content: trimmed });
      }
    });
    
    console.log(`üìã Telegram –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ service (${telegramProcessing.length} –º–µ—Å—Ç):`);
    telegramProcessing.slice(0, 5).forEach(item => {
      console.log(`   –°—Ç—Ä–æ–∫–∞ ${item.line}: ${item.content}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ref_by –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const extractsRefFromValidation = content.includes('validated.ref') || 
                                     content.includes('.start_param') ||
                                     content.includes('validationResult.ref');
    console.log(`\nüîç –ò–∑–≤–ª–µ–∫–∞–µ—Ç ref_by –∏–∑ validation —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${extractsRefFromValidation ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ auth service:', error.message);
  }
}

function generateFlowDiagram() {
  console.log('\n4Ô∏è‚É£ –î–ò–ê–ì–†–ê–ú–ú–ê –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–•:');
  console.log('---------------------------');
  
  console.log('üîÑ –¢–ï–ö–£–©–ò–ô –ü–û–¢–û–ö:');
  console.log('1. üì± Telegram: t.me/bot?start=REF123');
  console.log('2. üì° Frontend: –ø–æ–ª—É—á–∞–µ—Ç initData —Å start_param=REF123');
  console.log('3. üöÄ POST /api/auth/telegram { initData: "start_param=REF123&..." }');
  console.log('4. üõ°Ô∏è  Routes: –≤–∞–ª–∏–¥–∞—Ü–∏—è schema (refBy –∏–∑ body)');
  console.log('5. üéØ Controller: –∏–∑–≤–ª–µ–∫–∞–µ—Ç refBy –∏–∑ req.body, –ù–ï –∏–∑ initData');
  console.log('6. ‚öôÔ∏è  Service: –ù–ï –ø–æ–ª—É—á–∞–µ—Ç ref_by ‚Üí –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç processReferral');
  console.log('7. üíæ Database: —Å–æ–∑–¥–∞–µ—Ç—Å—è user —Å referred_by = null');
  
  console.log('\nüî• –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–û–ß–ö–ò:');
  console.log('‚ùå utils/telegram.ts: validateTelegramInitData –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç start_param');
  console.log('‚ùå Auth Routes: –ù–ï –∏–∑–≤–ª–µ–∫–∞—é—Ç ref_by –∏–∑ initData');
  console.log('‚ùå Auth Controller: –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ req.body.refBy');
  console.log('‚ùå Frontend: –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç start_param –∫–∞–∫ refBy –≤ body');
  
  console.log('\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–¢–û–ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:');
  console.log('1. validateTelegramInitData ‚Üí return { user, start_param }');
  console.log('2. Controller: ref_by = start_param || req.body.refBy');
  console.log('3. Service: –ø–æ–ª—É—á–∞–µ—Ç ref_by ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç processReferral');
  console.log('4. Database: —Å–æ–∑–¥–∞–µ—Ç—Å—è user + referral –∑–∞–ø–∏—Å—å');
}

function generateTestPlan() {
  console.log('\n5Ô∏è‚É£ –ü–õ–ê–ù –ü–†–û–í–ï–†–ö–ò:');
  console.log('-----------------');
  
  console.log('üß™ –¢–ï–°–¢–´ –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Telegram initData - –µ—Å—Ç—å –ª–∏ start_param');
  console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å validateTelegramInitData —Å start_param');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ Controller –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç validation');
  console.log('4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ processReferral –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
  console.log('5. –ù–∞–π—Ç–∏ –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ä—è–µ—Ç—Å—è start_param');
  
  console.log('\nüìã –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  console.log('1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å validateTelegramInitData –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ start_param');
  console.log('2. –û–±–Ω–æ–≤–∏—Ç—å Controller –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ref_by –∏–∑ validation result');
  console.log('3. –î–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ req.body.refBy –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É');
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
console.log('üöÄ –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê INITDATA...\n');

analyzeTelegramUtils();
analyzeAuthController();
analyzeAuthService();
generateFlowDiagram();
generateTestPlan();

console.log('\nüìã –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
console.log('–ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è start_param!');