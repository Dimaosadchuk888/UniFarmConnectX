#!/usr/bin/env node
/**
 * üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–î–ê–ö–®–ï–ù –°–ò–°–¢–ï–ú–´ TON BOOST
 * 
 * –ì–ê–†–ê–ù–¢–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
 * - –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
 * - –ù–ò –û–î–ù–û–ô –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
 * - –ù–ò –û–î–ù–û–ì–û –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * 
 * –¶–µ–ª—å: 100% –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const AFFECTED_USER_ID = 25;
const ANALYSIS_DATE = new Date().toISOString();

async function runProductionDiagnostic() {
  console.log('üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–î–ê–ö–®–ï–ù –°–ò–°–¢–ï–ú–´ TON BOOST');
  console.log('=' * 70);
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
  console.log('üõ°Ô∏è  –†–µ–∂–∏–º: –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï - –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç');
  console.log('');

  const diagnosticResults = {
    timestamp: ANALYSIS_DATE,
    criticalIssues: [],
    databaseIntegrity: {},
    affectedUsers: [],
    codeAnalysis: {},
    recommendations: []
  };

  try {
    // 1. –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•
    console.log('1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('-'.repeat(50));
    
    await analyzeDatabaseSchema(diagnosticResults);

    // 2. –ê–ù–ê–õ–ò–ó –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('-'.repeat(50));
    
    await analyzeAffectedUsers(diagnosticResults);

    // 3. –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
    console.log('\\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    console.log('-'.repeat(50));
    
    await analyzeSystemTransactions(diagnosticResults);

    // 4. –ê–ù–ê–õ–ò–ó TON FARMING DATA
    console.log('\\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON FARMING DATA');
    console.log('-'.repeat(50));
    
    await analyzeTonFarmingData(diagnosticResults);

    // 5. –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´
    console.log('\\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´');
    console.log('-'.repeat(50));
    
    await checkSystemIntegrity(diagnosticResults);

    // 6. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–Å–¢–ê
    console.log('\\n6Ô∏è‚É£ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–Å–¢–ê');
    console.log('-'.repeat(50));
    
    await generateDetailedReport(diagnosticResults);

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:', error.message);
    diagnosticResults.criticalIssues.push({
      severity: '–ö–†–ò–¢–ò–ß–ù–û',
      component: 'DIAGNOSTIC_SYSTEM',
      issue: error.message,
      impact: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'
    });
  }

  return diagnosticResults;
}

async function analyzeDatabaseSchema(results) {
  const requiredTables = ['users', 'transactions', 'ton_farming_data', 'boost_purchases'];
  
  for (const tableName of requiredTables) {
    try {
      const { data, error, count } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true });

      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${error.message}`);
        results.criticalIssues.push({
          severity: '–í–´–°–û–ö–ê–Ø',
          component: 'DATABASE_SCHEMA',
          issue: `–¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`,
          impact: '–ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã'
        });
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
        results.databaseIntegrity[tableName] = { 
          accessible: true, 
          recordCount: count 
        };
      }
    } catch (e) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, e.message);
    }
  }
}

async function analyzeAffectedUsers(results) {
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ boost
  try {
    const { data: problematicUsers, error } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_ton, balance_uni, ton_boost_package, ton_boost_rate')
      .or('ton_boost_package.is.null,ton_boost_rate.is.null')
      .lt('balance_ton', 0.1); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∏–∑–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏

    if (!error && problematicUsers) {
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${problematicUsers.length}`);
      
      for (const user of problematicUsers.slice(0, 5)) { // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        console.log(`   User #${user.id}: TON=${user.balance_ton}, Package=${user.ton_boost_package || '–ù–ï–¢'}`);
        
        // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ boost
        const { data: suspiciousTransactions } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', user.id)
          .eq('currency', 'TON')
          .lt('amount', 0) // –°–ø–∏—Å–∞–Ω–∏—è
          .order('created_at', { ascending: false })
          .limit(3);

        if (suspiciousTransactions && suspiciousTransactions.length > 0) {
          results.affectedUsers.push({
            userId: user.id,
            telegramId: user.telegram_id,
            username: user.username,
            currentBalance: user.balance_ton,
            boostPackage: user.ton_boost_package,
            suspiciousTransactions: suspiciousTransactions.length
          });
        }
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  }
}

async function analyzeSystemTransactions(results) {
  try {
    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);

    const { data: recentTransactions, error } = await supabase
      .from('transactions')
      .select('*')
      .or('type.eq.BOOST_PURCHASE,description.ilike.%boost%')
      .gte('created_at', weekAgo.toISOString())
      .order('created_at', { ascending: false });

    if (!error && recentTransactions) {
      console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π boost –∑–∞ –Ω–µ–¥–µ–ª—é: ${recentTransactions.length}`);
      
      const successfulPurchases = recentTransactions.filter(tx => tx.status === 'completed').length;
      const failedPurchases = recentTransactions.filter(tx => tx.status === 'failed').length;
      const pendingPurchases = recentTransactions.filter(tx => tx.status === 'pending').length;

      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulPurchases}`);
      console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedPurchases}`);
      console.log(`   ‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: ${pendingPurchases}`);

      results.databaseIntegrity.recentBoostTransactions = {
        total: recentTransactions.length,
        successful: successfulPurchases,
        failed: failedPurchases,
        pending: pendingPurchases
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
      if (failedPurchases > successfulPurchases * 0.1) { // –ë–æ–ª—å—à–µ 10% –Ω–µ—É–¥–∞—á
        results.criticalIssues.push({
          severity: '–°–†–ï–î–ù–Ø–Ø',
          component: 'TRANSACTION_PROCESSING',
          issue: `–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: ${failedPurchases}/${recentTransactions.length}`,
          impact: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ boost'
        });
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
  }
}

async function analyzeTonFarmingData(results) {
  try {
    const { data: farmingData, error } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true);

    if (!error && farmingData) {
      console.log(`üöú –ê–∫—Ç–∏–≤–Ω—ã—Ö TON farming –∑–∞–ø–∏—Å–µ–π: ${farmingData.length}`);
      
      let totalFarmingBalance = 0;
      let zeorBalanceCount = 0;
      
      farmingData.forEach(farming => {
        const balance = parseFloat(farming.farming_balance || '0');
        totalFarmingBalance += balance;
        if (balance === 0) zeorBalanceCount++;
      });

      console.log(`   üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${totalFarmingBalance.toFixed(2)} TON`);
      console.log(`   ‚ö†Ô∏è  –ó–∞–ø–∏—Å–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${zeorBalanceCount}`);

      results.databaseIntegrity.tonFarmingData = {
        activeRecords: farmingData.length,
        totalBalance: totalFarmingBalance,
        zeroBalanceRecords: zeorBalanceCount
      };

      if (zeorBalanceCount > farmingData.length * 0.3) { // –ë–æ–ª—å—à–µ 30% —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        results.criticalIssues.push({
          severity: '–°–†–ï–î–ù–Ø–Ø',
          component: 'TON_FARMING_SYSTEM',
          issue: `–ú–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω—É–ª–µ–≤—ã–º farming_balance: ${zeorBalanceCount}/${farmingData.length}`,
          impact: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç boost'
        });
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ farming –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

async function checkSystemIntegrity(results) {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º consistency –º–µ–∂–¥—É users –∏ ton_farming_data
    const { data: usersWithBoost } = await supabase
      .from('users')
      .select('id, ton_boost_package')
      .not('ton_boost_package', 'is', null);

    if (usersWithBoost) {
      for (const user of usersWithBoost.slice(0, 10)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 10
        const { data: farmingRecord } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id)
          .eq('boost_active', true);

        if (!farmingRecord || farmingRecord.length === 0) {
          console.log(`   ‚ö†Ô∏è  User #${user.id}: boost_package=${user.ton_boost_package}, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π farming –∑–∞–ø–∏—Å–∏`);
          
          results.criticalIssues.push({
            severity: '–í–´–°–û–ö–ê–Ø',
            component: 'DATA_CONSISTENCY',
            issue: `User #${user.id} –∏–º–µ–µ—Ç boost_package, –Ω–æ –Ω–µ—Ç farming –∑–∞–ø–∏—Å–∏`,
            impact: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Ö–æ–¥, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø–æ–∫—É–ø–∫—É boost'
          });
        }
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error.message);
  }
}

async function generateDetailedReport(results) {
  console.log('\\n' + '='.repeat(70));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢');
  console.log('='.repeat(70));
  
  console.log(`\\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: ${results.criticalIssues.length}`);
  
  results.criticalIssues.forEach((issue, index) => {
    console.log(`\\n   ${index + 1}. [${issue.severity}] ${issue.component}`);
    console.log(`      üî∏ –ü—Ä–æ–±–ª–µ–º–∞: ${issue.issue}`);
    console.log(`      üìä –í–ª–∏—è–Ω–∏–µ: ${issue.impact}`);
  });

  console.log(`\\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:`);
  console.log(`   - –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.affectedUsers.length}`);
  console.log(`   - –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: ${results.criticalIssues.length > 0 ? 'üî• –¢–†–ï–ë–£–ï–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –í–ù–ò–ú–ê–ù–ò–Ø' : '‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–û'}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
  const reportFileName = `PRODUCTION_DIAGNOSTIC_REPORT_${new Date().toISOString().split('T')[0]}.json`;
  
  console.log(`\\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${reportFileName}`);
  console.log(`\\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –ë–ï–ó–û–ü–ê–°–ù–û - –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ`);
  
  return results;
}

// –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
runProductionDiagnostic()
  .then(results => {
    console.log('\\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('   –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  });