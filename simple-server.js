import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { registerCleanRoutes } from './server/routes-clean.ts';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

// –ë–∞–∑–æ–≤—ã–µ middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    success: true,
    status: 'healthy',
    timestamp: new Date().toISOString(),
    message: 'UniFarm —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç'
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã
registerCleanRoutes(app);

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(express.static(path.join(__dirname, 'client', 'src')));
app.use('/node_modules', express.static(path.join(__dirname, 'node_modules')));

// SPA –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–¥—É—Ç –∫ index.html
app.get('*', (req, res) => {
  if (!req.path.startsWith('/api')) {
    res.sendFile(path.join(__dirname, 'client', 'index.html'));
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üéØ [SYSTEM] UniFarm —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω`);
  console.log(`[INFO] üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`[INFO] üì± Mini App URL: https://uni-farm-connect-xo-osadchukdmitro2.replit.app`);
  console.log(`[INFO] üîó Health check: http://localhost:${PORT}/health`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
});

process.on('unhandledRejection', (reason) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', reason);
});