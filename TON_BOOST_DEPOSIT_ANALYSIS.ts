#!/usr/bin/env tsx

/**
 * üö® –ê–ù–ê–õ–ò–ó TON BOOST –î–ï–ü–û–ó–ò–¢–û–í - –ü–†–û–°–¢–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function analyzeBoostDeposits() {
  console.log('üö® –ê–ù–ê–õ–ò–ó TON BOOST –î–ï–ü–û–ó–ò–¢–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°');
  console.log('=' .repeat(50));
  
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  
  try {
    // 1. –ù–û–í–´–ï BOOST_PURCHASE –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö BOOST_PURCHASE —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    const { data: boostPurchases } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'BOOST_PURCHASE')
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });

    console.log(`üí∞ BOOST_PURCHASE –∑–∞ —á–∞—Å: ${boostPurchases?.length || 0}`);
    
    boostPurchases?.forEach(tx => {
      console.log(`User ${tx.user_id}: ${tx.amount} TON (${tx.created_at})`);
    });

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –ê–ö–¢–ò–í–ê–¶–ò–Æ –í USERS
    if (boostPurchases && boostPurchases.length > 0) {
      console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users...');
      
      const userIds = boostPurchases.map(tx => parseInt(tx.user_id));
      
      const { data: users } = await supabase
        .from('users')
        .select('id, username, ton_boost_active, ton_boost_package, ton_boost_rate')
        .in('id', userIds);

      console.log('\nüë• –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ê–¶–ò–ò:');
      users?.forEach(user => {
        console.log(`User ${user.id}: Active=${user.ton_boost_active}, Package=${user.ton_boost_package}, Rate=${user.ton_boost_rate}`);
      });

      // 3. –ü–†–û–í–ï–†–Ø–ï–ú TON_FARMING_DATA
      console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ton_farming_data...');
      
      const { data: farmingData } = await supabase
        .from('ton_farming_data')
        .select('*')
        .in('user_id', userIds.map(id => id.toString()));

      console.log(`üåæ –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${farmingData?.length || 0}`);
      
      const farmingUserIds = farmingData?.map(d => parseInt(d.user_id)) || [];
      const missingUsers = userIds.filter(id => !farmingUserIds.includes(id));
      
      if (missingUsers.length > 0) {
        console.log(`\n‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í TON_FARMING_DATA: ${missingUsers.join(', ')}`);
        console.log('   üëÜ –≠–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ù–ï –ü–û–õ–£–ß–ê–Æ–¢ –î–û–•–û–î–´!');
      }

      // 4. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú
      console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:');
      
      for (const userId of userIds) {
        const user = users?.find(u => u.id === userId);
        const hasFarmingData = farmingUserIds.includes(userId);
        
        console.log(`\nUser ${userId}:`);
        console.log(`   ‚úÖ –ü–æ–∫—É–ø–∫–∞ BOOST_PURCHASE: –î–ê`);
        console.log(`   ${user?.ton_boost_active ? '‚úÖ' : '‚ùå'} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ users: ${user?.ton_boost_active ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`   ${hasFarmingData ? '‚úÖ' : '‚ùå'} –ó–∞–ø–∏—Å—å –≤ ton_farming_data: ${hasFarmingData ? '–î–ê' : '–ù–ï–¢'}`);
        
        if (!user?.ton_boost_active || !hasFarmingData) {
          console.log(`   üö® –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ë–£–î–ï–¢ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥—ã –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞!`);
        }
      }
    }

    // 5. –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
    console.log('\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∫—Ç–æ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω)...');
    
    const { data: activeInScheduler } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_package_id');

    console.log(`üìà –í–°–ï–ì–û –ê–ö–¢–ò–í–ù–´–• –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ï: ${activeInScheduler?.length || 0}`);
    
    return {
      new_purchases: boostPurchases?.length || 0,
      users_with_purchases: boostPurchases?.map(tx => tx.user_id) || [],
      active_in_scheduler: activeInScheduler?.length || 0,
      problems_detected: missingUsers?.length || 0
    };

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await analyzeBoostDeposits();
    
    console.log('\nüìã –°–í–û–î–ö–ê:');
    console.log(`- –ù–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∑–∞ —á–∞—Å: ${result.new_purchases}`);
    console.log(`- –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: ${result.active_in_scheduler}`);
    console.log(`- –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${result.problems_detected}`);
    
    if (result.problems_detected > 0) {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ');
    }
    
  } catch (error) {
    console.error('\n‚ùå –ê–ù–ê–õ–ò–ó –ü–†–û–í–ê–õ–ï–ù:', error);
  }
}

main();