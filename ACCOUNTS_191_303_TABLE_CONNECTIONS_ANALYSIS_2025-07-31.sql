-- üîç –ê–ù–ê–õ–ò–ó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ê–ö–ö–ê–£–ù–¢–û–í 191-303 –í –¢–ê–ë–õ–ò–¶–ê–•
-- –î–∞—Ç–∞: 31.07.2025
-- –¶–µ–ª—å: –ù–∞–π—Ç–∏ —á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø REF_CODE)
-- –ü—Ä–∏–Ω—Ü–∏–ø: 99% –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

-- ===== –≠–¢–ê–ü 1: –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í 191-303 =====
SELECT 
    '=== –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–û–í 191-303 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è ref_code) ===' as section;

SELECT 
    id,
    telegram_id,
    username,
    first_name,
    ref_code,
    balance_uni,
    balance_ton,
    ton_farming_balance,
    ton_farming_rate,
    ton_boost_active,
    ton_boost_package,
    uni_farming_active,
    created_at,
    
    -- –°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    CASE WHEN telegram_id IS NOT NULL AND telegram_id != 0 THEN '‚úÖ' ELSE '‚ùå' END as telegram_connected,
    CASE WHEN balance_uni IS NOT NULL THEN '‚úÖ' ELSE '‚ùå' END as has_uni_balance,
    CASE WHEN balance_ton IS NOT NULL THEN '‚úÖ' ELSE '‚ùå' END as has_ton_balance
    
FROM users 
WHERE id BETWEEN 191 AND 303
ORDER BY id;

-- ===== –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï TRANSACTIONS =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï TRANSACTIONS ===' as section;

SELECT 
    u.id,
    u.username,
    COUNT(t.id) as transaction_count,
    MIN(t.created_at) as first_transaction,
    MAX(t.created_at) as last_transaction,
    STRING_AGG(DISTINCT t.transaction_type, ', ') as transaction_types,
    STRING_AGG(DISTINCT t.currency, ', ') as currencies,
    SUM(CASE WHEN t.currency = 'UNI' AND t.status = 'confirmed' THEN t.amount::numeric ELSE 0 END) as total_uni_confirmed,
    SUM(CASE WHEN t.currency = 'TON' AND t.status = 'confirmed' THEN t.amount::numeric ELSE 0 END) as total_ton_confirmed,
    CASE 
        WHEN COUNT(t.id) = 0 THEN '‚ùå –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô'
        WHEN COUNT(t.id) < 5 THEN '‚ö†Ô∏è –ú–ê–õ–û –¢–†–ê–ù–ó–ê–ö–¶–ò–ô'
        ELSE '‚úÖ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ï–°–¢–¨'
    END as transaction_status
FROM users u
LEFT JOIN transactions t ON u.id = t.user_id
WHERE u.id BETWEEN 191 AND 303
GROUP BY u.id, u.username
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï USER_SESSIONS =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï USER_SESSIONS ===' as section;

SELECT 
    u.id,
    u.username,
    u.telegram_id,
    COUNT(s.id) as session_count,
    MAX(s.created_at) as last_session_created,
    MAX(s.last_activity) as last_activity,
    COUNT(CASE WHEN s.expires_at > NOW() THEN 1 END) as active_sessions,
    STRING_AGG(DISTINCT s.session_token, ', ') as session_tokens,
    CASE 
        WHEN u.telegram_id IS NULL THEN '‚ö†Ô∏è –ù–ï–¢ TELEGRAM_ID'
        WHEN COUNT(s.id) = 0 THEN '‚ùå –ù–ï–¢ –°–ï–°–°–ò–ô'
        WHEN COUNT(CASE WHEN s.expires_at > NOW() THEN 1 END) = 0 THEN '‚ö†Ô∏è –°–ï–°–°–ò–ò –ò–°–¢–ï–ö–õ–ò'
        ELSE '‚úÖ –°–ï–°–°–ò–ò –ê–ö–¢–ò–í–ù–´'
    END as session_status
FROM users u
LEFT JOIN user_sessions s ON u.id = s.user_id
WHERE u.id BETWEEN 191 AND 303
GROUP BY u.id, u.username, u.telegram_id
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï TON_FARMING_DATA =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï TON_FARMING_DATA ===' as section;

SELECT 
    u.id,
    u.username,
    u.ton_boost_active as boost_in_users,
    u.ton_farming_balance as farming_balance_users,
    u.ton_farming_rate as farming_rate_users,
    tfd.user_id as farming_data_user_id,
    tfd.boost_active as boost_in_farming_data,
    tfd.farming_balance as farming_balance_data,
    tfd.farming_rate as farming_rate_data,
    tfd.last_update as farming_last_update,
    
    CASE 
        WHEN u.ton_boost_active = false AND tfd.user_id IS NULL THEN '‚úÖ –ù–ï–¢ BOOST - –û–ö'
        WHEN u.ton_boost_active = true AND tfd.user_id IS NOT NULL THEN '‚úÖ BOOST –ü–û–î–ö–õ–Æ–ß–ï–ù'
        WHEN u.ton_boost_active = true AND tfd.user_id IS NULL THEN '‚ùå BOOST –ë–ï–ó –î–ê–ù–ù–´–•'
        WHEN u.ton_boost_active = false AND tfd.user_id IS NOT NULL THEN '‚ö†Ô∏è –î–ê–ù–ù–´–ï –ë–ï–ó BOOST'
        ELSE 'ü§î –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï'
    END as farming_connection_status
    
FROM users u
LEFT JOIN ton_farming_data tfd ON u.id::text = tfd.user_id
WHERE u.id BETWEEN 191 AND 303
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï USER_BALANCES =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï USER_BALANCES (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ) ===' as section;

SELECT 
    u.id,
    u.username,
    u.balance_uni as uni_in_users,
    u.balance_ton as ton_in_users,
    ub.user_id as has_user_balances_record,
    ub.balance_uni as uni_in_user_balances,
    ub.balance_ton as ton_in_user_balances,
    ub.updated_at as balances_updated_at,
    
    CASE 
        WHEN u.balance_uni IS NOT NULL AND u.balance_uni != '0' AND ub.user_id IS NULL THEN '‚úÖ –í USERS (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)'
        WHEN u.balance_uni = '0' AND ub.balance_uni IS NOT NULL AND ub.balance_uni != '0' THEN '‚ö†Ô∏è –í USER_BALANCES'
        WHEN u.balance_uni IS NOT NULL AND ub.balance_uni IS NOT NULL THEN 'üîÑ –í –û–ë–ï–ò–• –¢–ê–ë–õ–ò–¶–ê–•'
        WHEN u.balance_uni = '0' AND (ub.balance_uni IS NULL OR ub.balance_uni = '0') THEN '‚ö™ –ù–£–õ–ï–í–´–ï –ë–ê–õ–ê–ù–°–´'
        ELSE '‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ë–ê–õ–ê–ù–°–ê–ú–ò'
    END as balance_location_status
    
FROM users u
LEFT JOIN user_balances ub ON u.id = ub.user_id
WHERE u.id BETWEEN 191 AND 303
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï TON_DEPOSITS =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï TON_DEPOSITS ===' as section;

SELECT 
    u.id,
    u.username,
    COUNT(td.id) as deposit_count,
    SUM(CASE WHEN td.status = 'confirmed' THEN td.amount::numeric ELSE 0 END) as total_confirmed_deposits,
    SUM(CASE WHEN td.status = 'pending' THEN td.amount::numeric ELSE 0 END) as total_pending_deposits,
    MAX(td.created_at) as last_deposit_date,
    STRING_AGG(DISTINCT td.status, ', ') as deposit_statuses,
    STRING_AGG(DISTINCT td.transaction_hash, ', ') as transaction_hashes,
    CASE 
        WHEN COUNT(td.id) = 0 THEN '‚ö™ –ù–ï–¢ –î–ï–ü–û–ó–ò–¢–û–í'
        WHEN SUM(CASE WHEN td.status = 'confirmed' THEN 1 ELSE 0 END) > 0 THEN '‚úÖ –ï–°–¢–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï'
        ELSE '‚ö†Ô∏è –¢–û–õ–¨–ö–û –ù–ï–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï'
    END as deposit_status
FROM users u
LEFT JOIN ton_deposits td ON u.id = td.user_id
WHERE u.id BETWEEN 191 AND 303
GROUP BY u.id, u.username
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 7: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï WITHDRAWALS =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï WITHDRAWALS ===' as section;

SELECT 
    u.id,
    u.username,
    COUNT(w.id) as withdrawal_count,
    SUM(CASE WHEN w.status = 'completed' THEN w.amount::numeric ELSE 0 END) as total_completed_withdrawals,
    SUM(CASE WHEN w.status = 'pending' THEN w.amount::numeric ELSE 0 END) as total_pending_withdrawals,
    MAX(w.created_at) as last_withdrawal_date,
    STRING_AGG(DISTINCT w.status, ', ') as withdrawal_statuses,
    CASE 
        WHEN COUNT(w.id) = 0 THEN '‚ö™ –ù–ï–¢ –í–´–í–û–î–û–í'
        WHEN SUM(CASE WHEN w.status = 'completed' THEN 1 ELSE 0 END) > 0 THEN '‚úÖ –ï–°–¢–¨ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï'
        ELSE '‚ö†Ô∏è –¢–û–õ–¨–ö–û –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï'
    END as withdrawal_status
FROM users u
LEFT JOIN withdrawals w ON u.id = w.user_id
WHERE u.id BETWEEN 191 AND 303
GROUP BY u.id, u.username
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 8: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –¢–ê–ë–õ–ò–¶–ï REFERRALS =====
SELECT 
    '=== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –¢–ê–ë–õ–ò–¶–ï REFERRALS ===' as section;

-- –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–≥–æ –æ–Ω–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏)
SELECT 
    u.id as user_id,
    u.username,
    u.ref_code as user_ref_code,
    COUNT(r.id) as referral_count,
    STRING_AGG(r.referred_user_id::text, ', ') as referred_users,
    SUM(r.commission_earned::numeric) as total_commission_earned,
    MAX(r.created_at) as last_referral_date,
    CASE 
        WHEN COUNT(r.id) = 0 THEN '‚ö™ –ù–ï–¢ –†–ï–§–ï–†–ê–õ–û–í'
        ELSE '‚úÖ –ï–°–¢–¨ –†–ï–§–ï–†–ê–õ–´'
    END as referral_status
FROM users u
LEFT JOIN referrals r ON u.id = r.referrer_user_id
WHERE u.id BETWEEN 191 AND 303
GROUP BY u.id, u.username, u.ref_code
ORDER BY u.id;

-- ===== –≠–¢–ê–ü 9: –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô =====
SELECT 
    '=== –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –í–°–ï–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===' as section;

WITH connection_analysis AS (
    SELECT 
        u.id,
        u.username,
        u.ref_code,
        
        -- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º
        CASE WHEN EXISTS(SELECT 1 FROM transactions WHERE user_id = u.id) THEN 1 ELSE 0 END as has_transactions,
        CASE WHEN EXISTS(SELECT 1 FROM user_sessions WHERE user_id = u.id) THEN 1 ELSE 0 END as has_sessions,
        CASE WHEN u.ton_boost_active = false OR EXISTS(SELECT 1 FROM ton_farming_data WHERE user_id = u.id::text) THEN 1 ELSE 0 END as farming_connected,
        CASE WHEN EXISTS(SELECT 1 FROM user_balances WHERE user_id = u.id) THEN 1 ELSE 0 END as has_alt_balances,
        CASE WHEN EXISTS(SELECT 1 FROM ton_deposits WHERE user_id = u.id) THEN 1 ELSE 0 END as has_deposits,
        CASE WHEN EXISTS(SELECT 1 FROM withdrawals WHERE user_id = u.id) THEN 1 ELSE 0 END as has_withdrawals,
        CASE WHEN EXISTS(SELECT 1 FROM referrals WHERE referrer_user_id = u.id) THEN 1 ELSE 0 END as has_referrals,
        
        -- –°—Ç–∞—Ç—É—Å—ã –¥–∞–Ω–Ω—ã—Ö
        CASE WHEN u.telegram_id IS NOT NULL AND u.telegram_id != 0 THEN 1 ELSE 0 END as has_telegram_id,
        CASE WHEN u.balance_uni IS NOT NULL AND u.balance_uni != '0' THEN 1 ELSE 0 END as has_uni_balance,
        CASE WHEN u.balance_ton IS NOT NULL AND u.balance_ton != '0' THEN 1 ELSE 0 END as has_ton_balance
        
    FROM users u
    WHERE u.id BETWEEN 191 AND 303
)
SELECT 
    id,
    username,
    ref_code,
    
    -- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    CASE WHEN has_transactions = 1 THEN '‚úÖ' ELSE '‚ùå' END as transactions,
    CASE WHEN has_sessions = 1 THEN '‚úÖ' ELSE '‚ùå' END as sessions,
    CASE WHEN farming_connected = 1 THEN '‚úÖ' ELSE '‚ùå' END as farming_data,
    CASE WHEN has_alt_balances = 1 THEN '‚ö†Ô∏è' ELSE '‚ö™' END as alt_balances,
    CASE WHEN has_deposits = 1 THEN '‚úÖ' ELSE '‚ö™' END as deposits,
    CASE WHEN has_withdrawals = 1 THEN '‚úÖ' ELSE '‚ö™' END as withdrawals,
    CASE WHEN has_referrals = 1 THEN '‚úÖ' ELSE '‚ö™' END as referrals,
    
    -- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    CASE WHEN has_telegram_id = 1 THEN '‚úÖ' ELSE '‚ùå' END as telegram_id,
    CASE WHEN has_uni_balance = 1 THEN '‚úÖ' ELSE '‚ö™' END as uni_balance,
    CASE WHEN has_ton_balance = 1 THEN '‚úÖ' ELSE '‚ö™' END as ton_balance,
    
    -- –°—á–µ—Ç –ø—Ä–æ–±–ª–µ–º (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    (3 - (has_transactions + has_sessions + farming_connected)) as connection_issues,
    
    -- –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    CASE 
        WHEN (has_transactions + has_sessions + farming_connected) = 3 THEN '‚úÖ –í–°–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–û'
        WHEN (has_transactions + has_sessions + farming_connected) = 2 THEN '‚ö†Ô∏è 1 –ü–†–û–ë–õ–ï–ú–ê'
        WHEN (has_transactions + has_sessions + farming_connected) = 1 THEN '‚ùå 2 –ü–†–û–ë–õ–ï–ú–´'
        ELSE 'üî¥ –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú'
    END as connection_status
    
FROM connection_analysis
ORDER BY connection_issues DESC, id;

-- ===== –≠–¢–ê–ü 10: –¢–û–õ–¨–ö–û –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ =====
SELECT 
    '=== –¢–û–õ–¨–ö–û –ê–ö–ö–ê–£–ù–¢–´ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===' as section;

WITH problem_accounts AS (
    SELECT 
        u.id,
        u.username,
        u.ref_code,
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        CASE WHEN EXISTS(SELECT 1 FROM transactions WHERE user_id = u.id) THEN 0 ELSE 1 END as missing_transactions,
        CASE WHEN EXISTS(SELECT 1 FROM user_sessions WHERE user_id = u.id) THEN 0 ELSE 1 END as missing_sessions,
        CASE WHEN u.ton_boost_active = true AND NOT EXISTS(SELECT 1 FROM ton_farming_data WHERE user_id = u.id::text) THEN 1 ELSE 0 END as farming_disconnected,
        CASE WHEN u.telegram_id IS NULL OR u.telegram_id = 0 THEN 1 ELSE 0 END as missing_telegram_id
        
    FROM users u
    WHERE u.id BETWEEN 191 AND 303
)
SELECT 
    id,
    username,
    ref_code,
    CASE WHEN missing_transactions = 1 THEN '‚ùå –ù–ï–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô' ELSE '‚úÖ' END as transactions_status,
    CASE WHEN missing_sessions = 1 THEN '‚ùå –ù–ï–¢ –°–ï–°–°–ò–ô' ELSE '‚úÖ' END as sessions_status,
    CASE WHEN farming_disconnected = 1 THEN '‚ùå FARMING –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù' ELSE '‚úÖ' END as farming_status,
    CASE WHEN missing_telegram_id = 1 THEN '‚ùå –ù–ï–¢ TELEGRAM_ID' ELSE '‚úÖ' END as telegram_status,
    (missing_transactions + missing_sessions + farming_disconnected + missing_telegram_id) as total_issues
FROM problem_accounts
WHERE (missing_transactions + missing_sessions + farming_disconnected + missing_telegram_id) > 0
ORDER BY total_issues DESC, id;