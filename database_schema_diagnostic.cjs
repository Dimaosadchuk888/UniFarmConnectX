#!/usr/bin/env node
/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–•–ï–ú–´ –ë–î - Supabase vs PostgreSQL enum
 * –í—ã—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –¥–ª—è transaction_type
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

async function investigateSchema() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–•–ï–ú–´ –ë–î - TRANSACTION_TYPE');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É transactions
    const { data: transactions, error } = await supabase
      .from('transactions')
      .select('id, type, currency')
      .limit(5);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è transactions:', error);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã
    const uniqueTypes = [...new Set(transactions.map(t => t.type))];
    console.log('\nüìä –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ò–ü–´ –í –ë–î:');
    uniqueTypes.forEach(type => {
      const count = transactions.filter(t => t.type === type).length;
      console.log(`   ${type}: ${count} —à—Ç.`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ TON_DEPOSIT
    const tonDeposits = transactions.filter(t => t.type === 'TON_DEPOSIT');
    console.log(`\nüíé TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonDeposits.length}`);
    
    if (tonDeposits.length === 0) {
      console.log('üö® –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: TON_DEPOSIT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // 4. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å TON_DEPOSIT
      console.log('\nüß™ –¢–ï–°–¢: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
      
      const testTransaction = {
        user_id: 999999, // –¢–µ—Å—Ç–æ–≤—ã–π ID
        type: 'TON_DEPOSIT',
        amount: '0.001',
        currency: 'TON',
        status: 'completed',
        description: 'TEST: Database schema test'
      };
      
      const { data: testResult, error: testError } = await supabase
        .from('transactions')
        .insert([testTransaction])
        .select();
      
      if (testError) {
        console.log('‚ùå –¢–ï–°–¢ –ù–ï–£–î–ê–ß–ï–ù:', testError.message);
        console.log('üìã –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å enum schema');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        if (testError.message.includes('invalid input value for enum')) {
          console.log('‚úÖ –î–ò–ê–ì–ù–û–ó: PostgreSQL enum –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç TON_DEPOSIT');
          console.log('üí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ enum –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥');
        }
      } else {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ:', testResult);
        console.log('ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ - TON_DEPOSIT —Ä–∞–±–æ—Ç–∞–µ—Ç');
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await supabase.from('transactions').delete().eq('user_id', 999999);
      }
    }
    
    // 5. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º DEPOSIT —Ç–∏–ø
    const regularDeposits = transactions.filter(t => t.type === 'DEPOSIT');
    console.log(`\nüì• DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${regularDeposits.length}`);
    
    if (regularDeposits.length > 0) {
      console.log('üí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å type="DEPOSIT" + currency="TON"');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
  
  console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–•–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–ê');
}

investigateSchema();