/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON DEPOSIT 
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ routes configuration –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */

import fs from 'fs';

async function finalDiagnosis() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON DEPOSIT –ü–†–û–ë–õ–ï–ú–´');
  console.log('===============================================');
  
  try {
    // 1. –ê–ù–ê–õ–ò–ó WALLET ROUTES 
    console.log('\n1. üìã –ê–ù–ê–õ–ò–ó WALLET/ROUTES.TS:');
    
    const walletRoutesContent = fs.readFileSync('modules/wallet/routes.ts', 'utf8');
    
    const hasTonDepositRoute = walletRoutesContent.includes('ton-deposit');
    const hasTonDepositPost = walletRoutesContent.includes('POST') && walletRoutesContent.includes('ton-deposit');
    const hasTonDepositController = walletRoutesContent.includes('tonDeposit');
    
    console.log(`   - –†–æ—É—Ç 'ton-deposit' –Ω–∞–π–¥–µ–Ω: ${hasTonDepositRoute ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - POST –º–µ—Ç–æ–¥ –¥–ª—è ton-deposit: ${hasTonDepositPost ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - –°–≤—è–∑—å —Å tonDeposit controller: ${hasTonDepositController ? '–î–ê' : '–ù–ï–¢'}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ routes –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('\n   üìÑ –°–û–î–ï–†–ñ–ò–ú–û–ï WALLET ROUTES:');
    const routeLines = walletRoutesContent.split('\n');
    routeLines.forEach((line, index) => {
      if (line.includes('router.') || line.includes('deposit') || line.includes('POST') || line.includes('GET')) {
        console.log(`     ${index + 1}: ${line.trim()}`);
      }
    });
    
    // 2. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –í ROUTES
    console.log('\n2. üì¶ –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í:');
    
    const hasWalletControllerImport = walletRoutesContent.includes('WalletController');
    const hasExpressImport = walletRoutesContent.includes('express');
    const hasRouterInit = walletRoutesContent.includes('Router()');
    
    console.log(`   - WalletController –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${hasWalletControllerImport ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - Express Router –∏–º–ø–æ—Ä—Ç: ${hasExpressImport ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   - Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${hasRouterInit ? '–î–ê' : '–ù–ï–¢'}`);
    
    // 3. –°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò WORKING ROUTES
    console.log('\n3. üîç –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ê–ë–û–ß–ò–ú–ò –†–û–£–¢–ê–ú–ò:');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º auth routes –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    try {
      const authRoutesContent = fs.readFileSync('modules/auth/routes.ts', 'utf8');
      const authHasPost = authRoutesContent.includes('router.post');
      const authHasController = authRoutesContent.includes('Controller');
      
      console.log(`   - Auth routes –∏—Å–ø–æ–ª—å–∑—É–µ—Ç router.post: ${authHasPost ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   - Auth routes –ø–æ–¥–∫–ª—é—á–∞–µ—Ç controller: ${authHasController ? '–î–ê' : '–ù–ï–¢'}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ POST —Ä–æ—É—Ç–∞
      const authLines = authRoutesContent.split('\n');
      authLines.forEach((line, index) => {
        if (line.includes('router.post')) {
          console.log(`   - –ü—Ä–∏–º–µ—Ä POST —Ä–æ—É—Ç–∞: ${line.trim()}`);
        }
      });
      
    } catch (authError) {
      console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å auth routes –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
    }
    
    // 4. –ê–ù–ê–õ–ò–ó –≠–ö–°–ü–û–†–¢–ê WALLET ROUTES
    console.log('\n4. üì§ –ê–ù–ê–õ–ò–ó –≠–ö–°–ü–û–†–¢–ê:');
    
    const hasExport = walletRoutesContent.includes('export') && 
                     (walletRoutesContent.includes('default') || walletRoutesContent.includes('router'));
    
    console.log(`   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç router: ${hasExport ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (hasExport) {
      const exportLines = walletRoutesContent.split('\n').filter(line => line.includes('export'));
      exportLines.forEach(line => {
        console.log(`   - –≠–∫—Å–ø–æ—Ä—Ç: ${line.trim()}`);
      });
    }
    
    // 5. –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ë–õ–ï–ú–ï
    console.log('\n5. üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–†–û–ë–õ–ï–ú–´:');
    console.log('=====================================');
    
    console.log('–°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:');
    console.log(`‚úÖ Frontend tonConnectService.ts: –ò–°–ü–†–ê–í–ï–ù (–≤—ã–∑—ã–≤–∞–µ—Ç /api/v2/wallet/ton-deposit)`);
    console.log(`‚úÖ Controller tonDeposit: –ò–°–ü–†–ê–í–ï–ù (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã)`);
    console.log(`‚úÖ Service processTonDeposit: –ò–°–ü–†–ê–í–ï–ù (—Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã)`);
    console.log(`‚úÖ Database: –†–ê–ë–û–¢–ê–ï–¢ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)`);
    console.log(`‚ùå Routes configuration: –ù–ï–ò–°–ü–†–ê–í–ï–ù (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç)`);
    
    console.log('\n–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
    if (!hasTonDepositRoute) {
      console.log('‚ùå POST /api/v2/wallet/ton-deposit —Ä–æ—É—Ç –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù –≤ modules/wallet/routes.ts');
      console.log('‚ùå Frontend –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint');
      console.log('‚ùå 404 Not Found –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è instead of controller execution');
    }
    
    console.log('\n–í–õ–ò–Ø–ù–ò–ï –ù–ê USER #25:');
    console.log('- TON –¥–µ–ø–æ–∑–∏—Ç 0.1 TON –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
    console.log('- Frontend –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å backend');
    console.log('- Backend –≤–µ—Ä–Ω—É–ª 404 Not Found (—Ä–æ—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)');
    console.log('- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –°–û–ó–î–ê–ù–ê –≤ –ë–î');
    console.log('- –ë–∞–ª–∞–Ω—Å –ù–ï –û–ë–ù–û–í–õ–ï–ù');
    console.log('- UI –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–¢ –¥–µ–ø–æ–∑–∏—Ç');
    
    console.log('\n–†–ï–®–ï–ù–ò–ï:');
    console.log('–î–æ–±–∞–≤–∏—Ç—å –≤ modules/wallet/routes.ts:');
    console.log('router.post(\'/ton-deposit\', walletController.tonDeposit);');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error.message);
  }
}

finalDiagnosis();