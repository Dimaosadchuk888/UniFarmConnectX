import { createClient } from '@supabase/supabase-js';
import jwt from 'jsonwebtoken';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const jwtSecret = process.env.JWT_SECRET || 'unifarm_jwt_secret_key_2025_production';
const supabase = createClient(supabaseUrl, supabaseKey);

async function fixAuthSystem() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò');
  console.log('–ü—Ä–æ–±–ª–µ–º–∞: –í localStorage —Å–æ—Ö—Ä–∞–Ω—ë–Ω JWT —Ç–æ–∫–µ–Ω —Å userId: 48');
  console.log('–†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º telegram_id\n');
  
  // 1. –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ guest_id
  const guestId = 'guest_1751644443385_l5fujk';
  const newTelegramId = 123456789; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π telegram_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const { data: newUser, error: createError } = await supabase
    .from('users')
    .insert({
      telegram_id: newTelegramId,
      username: 'test_new_auth_user',
      first_name: 'New Auth User',
      ref_code: `REF_${Date.now()}_new_auth`,
      balance_uni: 500,
      balance_ton: 25,
      created_at: new Date().toISOString()
    })
    .select()
    .single();
    
  if (createError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError.message);
    return;
  }
  
  console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', {
    id: newUser.id,
    telegram_id: newUser.telegram_id,
    username: newUser.username,
    ref_code: newUser.ref_code
  });
  
  // 2. –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newJwtPayload = {
    userId: newUser.id,
    telegram_id: newUser.telegram_id,
    username: newUser.username,
    ref_code: newUser.ref_code
  };
  
  const newToken = jwt.sign(newJwtPayload, jwtSecret, { expiresIn: '7d' });
  console.log('\nüé´ –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
  console.log('Payload:', newJwtPayload);
  
  // 3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º API —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞ (–ø—É—Å—Ç–æ–π localStorage)
  try {
    const response1 = await fetch('http://localhost:3000/api/v2/users/profile', {
      headers: {
        'X-Guest-ID': guestId,
        'Content-Type': 'application/json'
      }
    });
    
    const result1 = await response1.json();
    console.log('üìä API –±–µ–∑ JWT (–¥–æ–ª–∂–µ–Ω fallback):', {
      success: result1.success,
      user_id: result1.data?.user?.id
    });
    
    // –¢–µ–ø–µ—Ä—å —Å –Ω–æ–≤—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º
    const response2 = await fetch('http://localhost:3000/api/v2/users/profile', {
      headers: {
        'Authorization': `Bearer ${newToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const result2 = await response2.json();
    console.log('üìä API —Å –Ω–æ–≤—ã–º JWT:', {
      success: result2.success,
      user_id: result2.data?.user?.id,
      telegram_id: result2.data?.user?.telegram_id
    });
    
    if (result2.data?.user?.id === newUser.id) {
      console.log('\nüéâ SUCCESS! –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      console.log('üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12)');
      console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Application > Local Storage');
      console.log('3. –ù–∞–π–¥–∏—Ç–µ –∫–ª—é—á —Å JWT —Ç–æ–∫–µ–Ω–æ–º –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞:');
      console.log(`   ${newToken}`);
      console.log('4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      console.log(`\n–¢–µ–ø–µ—Ä—å API –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å user_id=${newUser.id} –≤–º–µ—Å—Ç–æ 48`);
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å middleware - JWT —Ç–æ–∫–µ–Ω –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
  }
}

fixAuthSystem().catch(console.error);