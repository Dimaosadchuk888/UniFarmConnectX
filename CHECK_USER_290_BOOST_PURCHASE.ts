/**
 * üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê TON BOOST –ü–û–ö–£–ü–ö–ò USER 290
 * 
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
 */

import { supabase } from './core/supabase';

async function checkUser290BoostPurchase() {
  console.log('\nüîç === –ê–ù–ê–õ–ò–ó TON BOOST –ü–û–ö–£–ü–ö–ò USER 290 ===\n');
  
  const userId = 290;
  
  try {
    console.log('1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° User 290:');
    console.log('===========================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º users —Ç–∞–±–ª–∏—Ü—É
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (userData) {
      console.log('üìã –î–ê–ù–ù–´–ï –í users:');
      console.log(`   ID: ${userData.id}`);
      console.log(`   TON Boost Package: ${userData.ton_boost_package}`);
      console.log(`   TON Boost Active: ${userData.ton_boost_active}`);
      console.log(`   TON Boost Rate: ${userData.ton_boost_rate}`);
      console.log(`   Balance TON: ${userData.balance_ton}`);
      console.log(`   TON Farming Balance: ${userData.ton_farming_balance}`);
      console.log(`   TON Farming Rate: ${userData.ton_farming_rate}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data —Ç–∞–±–ª–∏—Ü—É
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', userId.toString());

    console.log('\nüìã –î–ê–ù–ù–´–ï –í ton_farming_data:');
    if (farmingData && farmingData.length > 0) {
      console.log('   ‚úÖ –ù–ê–ô–î–ï–ù–û:');
      farmingData.forEach((record, index) => {
        console.log(`     –ó–∞–ø–∏—Å—å ${index + 1}:`);
        console.log(`       user_id: "${record.user_id}"`);
        console.log(`       boost_active: ${record.boost_active}`);
        console.log(`       farming_balance: ${record.farming_balance}`);
        console.log(`       farming_rate: ${record.farming_rate}`);
      });
    } else {
      console.log('   ‚ùå –ù–ï–¢ –ó–ê–ü–ò–°–ï–ô');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    if (transactions && transactions.length > 0) {
      transactions.forEach((tx, index) => {
        console.log(`   ${index + 1}. ${tx.type}: ${tx.amount} ${tx.currency}`);
        console.log(`      ${tx.description}`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${tx.status}`);
        console.log(`      –î–∞—Ç–∞: ${tx.created_at}`);
        console.log('      ---');
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    console.log('\n2Ô∏è‚É£ –î–ò–ê–ì–ù–û–ó:');
    console.log('============');
    
    const hasBoostPackage = userData?.ton_boost_package && userData.ton_boost_package !== 0;
    const isBoostActive = userData?.ton_boost_active === true;
    const hasFarmingData = farmingData && farmingData.length > 0;
    const hasTransactions = transactions && transactions.length > 0;

    console.log(`üìä –°–¢–ê–¢–£–° –ü–û–ö–£–ü–ö–ò:`);
    console.log(`   –ü–∞–∫–µ—Ç –∑–∞–ø–∏—Å–∞–Ω: ${hasBoostPackage ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${isBoostActive ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Farming –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: ${hasFarmingData ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã: ${hasTransactions ? '‚úÖ' : '‚ùå'}`);

    if (hasBoostPackage && !isBoostActive && !hasFarmingData && hasTransactions) {
      console.log('\nüö® –î–ò–ê–ì–ù–û–ó: –ê–ö–¢–ò–í–ê–¶–ò–Ø –ó–ê–°–¢–†–Ø–õ–ê –ù–ê –ü–û–õ–û–í–ò–ù–ï!');
      console.log('   –ü—Ä–∏—á–∏–Ω–∞: TonFarmingRepository.activateBoost() –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å');
      console.log('   –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤ user_id (INTEGER vs STRING)');
      console.log('');
      console.log('üîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
      console.log('   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø user_id –≤ TonFarmingRepository.ts (—Å—Ç—Ä–æ–∫–∞ ~286)');
      console.log('   2. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∑–∞–ø–∏—Å—å –≤ ton_farming_data –≤—Ä—É—á–Ω—É—é');
      console.log('   3. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ton_boost_active = true –≤ users');
      console.log('   4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ—Ö–æ–∂–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö –î–†–£–ì–ò–• –ü–û–°–¢–†–ê–î–ê–í–®–ò–•:');
    console.log('=============================');
    
    const { data: similarUsers, error: similarError } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_active, created_at')
      .not('ton_boost_package', 'is', null)
      .neq('ton_boost_package', 0)
      .eq('ton_boost_active', false)
      .order('created_at', { ascending: false });

    if (similarUsers && similarUsers.length > 0) {
      console.log(`üîç –ù–ê–ô–î–ï–ù–û ${similarUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π:`);
      
      for (const user of similarUsers) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –∑–∞–ø–∏—Å—å –≤ ton_farming_data
        const { data: checkFarming } = await supabase
          .from('ton_farming_data')
          .select('user_id')
          .eq('user_id', user.id.toString())
          .single();
        
        const hasData = !!checkFarming;
        console.log(`   User ${user.id}: Package ${user.ton_boost_package}, Active: ${user.ton_boost_active}, Has Data: ${hasData ? '‚úÖ' : '‚ùå'}`);
      }
      
      const affectedUsers = similarUsers.filter(async (user) => {
        const { data } = await supabase
          .from('ton_farming_data')
          .select('user_id')
          .eq('user_id', user.id.toString())
          .single();
        return !data;
      });
      
      console.log(`\nüö® –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${similarUsers.length}`);
      console.log('   –í—Å–µ –æ–Ω–∏ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('\n4Ô∏è‚É£ –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('====================');
    console.log('');
    console.log('üéØ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –î–ï–ô–°–¢–í–ò–ô:');
    console.log('   1. –ò–°–ü–†–ê–í–ò–¢–¨ modules/boost/TonFarmingRepository.ts:');
    console.log('      –°—Ç—Ä–æ–∫–∞ ~286: user_id: parseInt(userId) ‚Üí user_id: userId.toString()');
    console.log('');
    console.log('   2. –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('      - –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
    console.log('      - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ton_boost_active = true');
    console.log('');
    console.log('   3. –ü–†–û–í–ï–†–ò–¢–¨ –†–ê–ë–û–¢–£:');
    console.log('      - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–Ω–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('      - –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É');

    console.log('\n‚úÖ === –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
checkUser290BoostPurchase();