/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
 */

import fetch from 'node-fetch';

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = 'https://93cb0060-75d7-4281-ac65-b204cda864a4-00-1j7bpbfst9vfx.pike.replit.dev';

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const API_HEADERS = {
  'Content-Type': 'application/json',
  'X-Development-Mode': 'true',
  'X-Development-User-Id': '1'
};

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getTonFarmingInfo() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/ton-farming/info?user_id=1`, {
      method: 'GET',
      headers: API_HEADERS
    });
    
    const data = await response.json();
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ:');
    console.log(`- –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON: ${data.data.totalTonRatePerSecond} TON/—Å–µ–∫`);
    console.log(`- –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è UNI: ${data.data.totalUniRatePerSecond} UNI/—Å–µ–∫`);
    console.log(`- –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å TON: ${data.data.dailyIncomeTon} TON`);
    console.log(`- –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å UNI: ${data.data.dailyIncomeUni} UNI`);
    console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç-–¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${data.data.deposits.length}`);
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –±—É—Å—Ç-–¥–µ–ø–æ–∑–∏—Ç–µ
    if (data.data.deposits.length > 0) {
      console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É—Å—Ç-–¥–µ–ø–æ–∑–∏—Ç–∞—Ö:');
      
      for (const deposit of data.data.deposits) {
        const now = new Date();
        const createdAt = new Date(deposit.created_at);
        const lastUpdatedAt = new Date(deposit.last_updated_at);
        
        const ageInSeconds = Math.floor((now - createdAt) / 1000);
        const timeSinceLastUpdateInSeconds = Math.floor((now - lastUpdatedAt) / 1000);
        
        const estimatedAccumulatedTon = parseFloat(deposit.rate_ton_per_second) * timeSinceLastUpdateInSeconds;
        
        console.log(`\n- –î–µ–ø–æ–∑–∏—Ç ID: ${deposit.id}`);
        console.log(`  –°—É–º–º–∞: ${deposit.ton_amount} TON`);
        console.log(`  –°–∫–æ—Ä–æ—Å—Ç—å TON: ${deposit.rate_ton_per_second} TON/—Å–µ–∫`);
        console.log(`  –°–∫–æ—Ä–æ—Å—Ç—å UNI: ${deposit.rate_uni_per_second} UNI/—Å–µ–∫`);
        console.log(`  –ù–∞–∫–æ–ø–ª–µ–Ω–æ TON: ${deposit.accumulated_ton}`);
        console.log(`  –í–æ–∑—Ä–∞—Å—Ç –¥–µ–ø–æ–∑–∏—Ç–∞: ${ageInSeconds} —Å–µ–∫ (${Math.floor(ageInSeconds / 60)} –º–∏–Ω)`);
        console.log(`  –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${timeSinceLastUpdateInSeconds} —Å–µ–∫ (${Math.floor(timeSinceLastUpdateInSeconds / 60)} –º–∏–Ω)`);
        console.log(`  –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ~${estimatedAccumulatedTon.toFixed(10)} TON`);
      }
    }
    
    return data.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TON —Ñ–∞—Ä–º–∏–Ω–≥–µ:', error);
    return {};
  }
}

// –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
async function harvestTonFarming() {
  console.log('\nüí∞ –°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥ —Å TON —Ñ–∞—Ä–º–∏–Ω–≥–∞...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/ton-farming/harvest`, {
      method: 'POST',
      headers: API_HEADERS,
      body: JSON.stringify({ user_id: 1 })
    });
    
    const data = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∞:');
    console.log(`- –£—Å–ø–µ—Ö: ${data.success}`);
    console.log(`- –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`);
    
    if (data.data) {
      console.log(`- –°–æ–±—Ä–∞–Ω–æ TON: ${data.data.harvestedTon}`);
      if (data.data.harvestedUni) {
        console.log(`- –°–æ–±—Ä–∞–Ω–æ UNI: ${data.data.harvestedUni}`);
      }
      if (data.data.transactionId) {
        console.log(`- ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${data.data.transactionId}`);
      }
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥ —Å TON —Ñ–∞—Ä–º–∏–Ω–≥–∞:', error);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
async function checkTonFarming() {
  try {
    console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TON —Ñ–∞—Ä–º–∏–Ω–≥–∞\n');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TON —Ñ–∞—Ä–º–∏–Ω–≥–∞
    await getTonFarmingInfo();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è...\n');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –°–º–æ—Ç—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è TON —Ñ–∞—Ä–º–∏–Ω–≥–∞:');
    await getTonFarmingInfo();
    
    // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    await harvestTonFarming();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã:');
    await getTonFarmingInfo();
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ TON —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TON —Ñ–∞—Ä–º–∏–Ω–≥–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTonFarming();