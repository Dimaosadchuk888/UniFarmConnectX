/**
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ TON Boost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { createClient } from '@supabase/supabase-js';

async function testSchedulerManual() {
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_KEY;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  console.log('‚ö° –†–£–ß–ù–û–ô –¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê TON BOOST');
  console.log('='.repeat(50));
  
  console.log('\nüìä 1. –°–û–°–¢–û–Ø–ù–ò–ï –î–û –ó–ê–ü–£–°–ö–ê:');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 48
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('*')
    .eq('id', 48)
    .single();
  
  if (userError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
    return;
  }
  
  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (ID: ${user.id})`);
  console.log(`   TON –±–∞–ª–∞–Ω—Å: ${user.balance_ton}`);
  console.log(`   TON Boost –ø–∞–∫–µ—Ç: ${user.ton_boost_package}`);
  console.log(`   TON Boost —Å—Ç–∞–≤–∫–∞: ${user.ton_boost_rate}`);
  
  if (!user.ton_boost_package || !user.ton_boost_rate) {
    console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ TON Boost –ø–∞–∫–µ—Ç–∞');
    return;
  }
  
  // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è TON Boost
  const { data: lastTx, error: txError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 48)
    .not('amount_ton', 'is', null)
    .ilike('description', '%boost%')
    .order('created_at', { ascending: false })
    .limit(1);
  
  let lastTxId = 0;
  if (!txError && lastTx?.length > 0) {
    lastTxId = lastTx[0].id;
    const lastTime = new Date(lastTx[0].created_at);
    const minutesAgo = (new Date() - lastTime) / (1000 * 60);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ID ${lastTxId} (${minutesAgo.toFixed(1)} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
    console.log(`   –°—É–º–º–∞: ${lastTx[0].amount_ton} TON`);
  } else {
    console.log('   –ü–æ—Å–ª–µ–¥–Ω—è—è TON Boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –ù–ï–¢');
  }
  
  console.log('\n‚ö° 2. –ò–ú–ò–¢–ê–¶–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥
  const currentBalance = parseFloat(user.balance_ton);
  const deposit = Math.max(0, currentBalance - 10); // –†–µ–∑–µ—Ä–≤ 10 TON
  const dailyRate = user.ton_boost_rate;
  const fiveMinIncome = (deposit * dailyRate) / 288; // 288 = 24*60/5 (–ø—è—Ç–∏–º–∏–Ω—É—Ç–æ–∫ –≤ —Å—É—Ç–∫–∞—Ö)
  
  console.log(`   –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞:`);
  console.log(`   ‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${deposit.toFixed(6)} TON`);
  console.log(`   ‚Ä¢ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${(dailyRate * 100).toFixed(1)}%`);
  console.log(`   ‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${fiveMinIncome.toFixed(8)} TON`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
  const newBalance = currentBalance + fiveMinIncome;
  
  console.log('\nüí∞ 3. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê:');
  
  const { data: updatedUser, error: updateError } = await supabase
    .from('users')
    .update({ balance_ton: newBalance.toString() })
    .eq('id', 48)
    .select()
    .single();
  
  if (updateError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError.message);
    return;
  }
  
  console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${newBalance} TON`);
  console.log(`   üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${fiveMinIncome.toFixed(8)} TON`);
  
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  console.log('\nüìù 4. –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
  
  const { data: transaction, error: createTxError } = await supabase
    .from('transactions')
    .insert([{
      user_id: 48,
      type: 'FARMING_REWARD',
      amount_ton: fiveMinIncome.toFixed(8),
      description: `TON Boost –¥–æ—Ö–æ–¥ (–ø–∞–∫–µ—Ç ${user.ton_boost_package}): ${fiveMinIncome.toFixed(6)} TON`,
      status: 'completed'
    }])
    .select()
    .single();
  
  if (createTxError) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', createTxError.message);
    return;
  }
  
  console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID ${transaction.id}`);
  console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${transaction.description}`);
  console.log(`   üí∞ –°—É–º–º–∞: ${transaction.amount_ton} TON`);
  
  console.log('\nüìä 5. –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const { data: finalUser, error: finalError } = await supabase
    .from('users')
    .select('balance_ton')
    .eq('id', 48)
    .single();
  
  if (!finalError) {
    console.log(`   –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${finalUser.balance_ton} TON`);
    console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +${fiveMinIncome.toFixed(8)} TON`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { data: newTransactions, error: newTxError } = await supabase
    .from('transactions')
    .select('*')
    .eq('user_id', 48)
    .gt('id', lastTxId)
    .order('created_at', { ascending: false });
  
  if (!newTxError && newTransactions?.length > 0) {
    console.log(`   –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${newTransactions.length}`);
    newTransactions.forEach((tx, idx) => {
      console.log(`     ${idx + 1}. ID: ${tx.id} | ${tx.amount_ton} TON | ${tx.description}`);
    });
  }
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('   ‚úÖ –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞: –†–ê–ë–û–¢–ê–ï–¢');
  console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: –†–ê–ë–û–¢–ê–ï–¢');
  console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –†–ê–ë–û–¢–ê–ï–¢');
  console.log('   ‚úÖ –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –ö–û–†–†–ï–ö–¢–ù–ê');
  
  console.log('\n' + '='.repeat(50));
  console.log('‚ö° –†–£–ß–ù–û–ô –¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù');
}

testSchedulerManual();