/**
 * –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
 * –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã
 */

import { supabase } from './core/supabase.js';

async function analyzeSystemWideDuplication() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø');
  console.log('‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n=== 1. –ü–û–ò–°–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===');
    
    const { data: allUsers } = await supabase
      .from('users')
      .select('id, telegram_id, username, balance_uni, balance_ton, created_at')
      .order('id', { ascending: true });
    
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${allUsers?.length || 0}`);
    
    if (!allUsers || allUsers.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      return;
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    console.log('\n=== 2. –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===');
    
    const withTelegramId = allUsers.filter(u => u.telegram_id && u.telegram_id > 0);
    const withoutTelegramId = allUsers.filter(u => !u.telegram_id || u.telegram_id === 0);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å telegram_id: ${withTelegramId.length}`);
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ telegram_id: ${withoutTelegramId.length}`);
    
    // 3. –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ internal_id
    console.log('\n=== 3. –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í ===');
    
    const duplicatePairs = [];
    const processedTelegramIds = new Set();
    
    withTelegramId.forEach(userWithTelegram => {
      if (processedTelegramIds.has(userWithTelegram.telegram_id)) return;
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å internal_id = telegram_id —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const possibleDuplicate = withoutTelegramId.find(u => u.id === userWithTelegram.telegram_id);
      
      if (possibleDuplicate) {
        duplicatePairs.push({
          main: userWithTelegram,
          duplicate: possibleDuplicate
        });
        processedTelegramIds.add(userWithTelegram.telegram_id);
      }
    });
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatePairs.length}`);
    
    if (duplicatePairs.length > 0) {
      console.log('\nüìã –î–ï–¢–ê–õ–ò –î–£–ë–õ–ò–ö–ê–¢–û–í:');
      
      duplicatePairs.forEach((pair, i) => {
        console.log(`\n  –ü–∞—Ä–∞ ${i+1}:`);
        console.log(`    –û–°–ù–û–í–ù–û–ô: internal_id=${pair.main.id}, telegram_id=${pair.main.telegram_id}, username=${pair.main.username}`);
        console.log(`              UNI=${pair.main.balance_uni}, TON=${pair.main.balance_ton}`);
        console.log(`    –î–£–ë–õ–ò–ö–ê–¢: internal_id=${pair.duplicate.id}, telegram_id=${pair.duplicate.telegram_id || 'NULL'}, username=${pair.duplicate.username}`);
        console.log(`              UNI=${pair.duplicate.balance_uni}, TON=${pair.duplicate.balance_ton}`);
      });
    }
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\n=== 4. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –î–£–ë–õ–ò–ö–ê–¢–û–í ===');
    
    let totalDuplicateTransactions = 0;
    let totalLostUni = 0;
    let totalLostTon = 0;
    
    for (const pair of duplicatePairs) {
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞
      const { data: duplicateTransactions } = await supabase
        .from('transactions')
        .select('type, amount_uni, amount_ton, currency, status')
        .eq('user_id', pair.duplicate.id)
        .eq('status', 'completed');
      
      if (duplicateTransactions && duplicateTransactions.length > 0) {
        totalDuplicateTransactions += duplicateTransactions.length;
        
        let pairUni = 0;
        let pairTon = 0;
        
        duplicateTransactions.forEach(tx => {
          const amountUni = parseFloat(tx.amount_uni) || 0;
          const amountTon = parseFloat(tx.amount_ton) || 0;
          
          if (tx.type !== 'WITHDRAWAL') {
            pairUni += amountUni;
            pairTon += amountTon;
          }
        });
        
        totalLostUni += pairUni;
        totalLostTon += pairTon;
        
        console.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${pair.main.telegram_id}: ${duplicateTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É –¥—É–±–ª–∏–∫–∞—Ç–∞`);
        console.log(`    –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: ${pairUni.toFixed(6)} UNI, ${pairTon.toFixed(6)} TON`);
      }
    }
    
    console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    console.log(`   –° telegram_id: ${withTelegramId.length}`);
    console.log(`   –ë–µ–∑ telegram_id: ${withoutTelegramId.length}`);
    console.log(`   –ü–∞—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatePairs.length}`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicateTransactions}`);
    console.log(`   –ü–û–¢–ï–†–Ø–ù–ù–´–ï –°–†–ï–î–°–¢–í–ê:`);
    console.log(`     UNI: ${totalLostUni.toFixed(6)}`);
    console.log(`     TON: ${totalLostTon.toFixed(6)}`);
    
    // 5. –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\n=== 5. –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===');
    
    if (duplicatePairs.length > 0) {
      console.log('üîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
      console.log('   1. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏');
      console.log('   2. –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π');
      console.log('   3. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞');
      console.log('   4. –û–±–Ω–æ–≤–∏—Ç—å BalanceManager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞');
      
      console.log('\nüìù –î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù:');
      duplicatePairs.forEach((pair, i) => {
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${pair.main.telegram_id}:`);
        console.log(`     - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å user_id=${pair.duplicate.id} –Ω–∞ user_id=${pair.main.telegram_id}`);
        console.log(`     - –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å`);
        console.log(`     - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å internal_id=${pair.duplicate.id}`);
      });
      
      return {
        duplicatePairs,
        totalDuplicateTransactions,
        totalLostUni,
        totalLostTon,
        needsFix: true
      };
    } else {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return {
        duplicatePairs: [],
        totalDuplicateTransactions: 0,
        totalLostUni: 0,
        totalLostTon: 0,
        needsFix: false
      };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    console.error('Stack:', error.stack);
    return null;
  }
}

analyzeSystemWideDuplication();