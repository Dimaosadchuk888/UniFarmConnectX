/**
 * T25: –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ initData –ø—É—Å—Ç–æ–π
 */

const fetch = require('node-fetch');

class TelegramRegistrationFixTest {
  constructor() {
    this.baseUrl = 'http://localhost:3000';
    this.results = {
      directRegistration: false,
      standardRegistration: false,
      userInDatabase: false,
      jwtToken: null,
      refCode: null,
      errors: []
    };
  }

  log(status, message, details = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${status}: ${message}`);
    if (details) {
      console.log('Details:', JSON.stringify(details, null, 2));
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ initData)
   */
  async testDirectRegistration() {
    this.log('INFO', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ initData');
    
    try {
      const testUser = {
        telegram_id: Math.floor(Math.random() * 1000000) + 100000,
        username: `testuser_${Date.now()}`,
        first_name: 'Test',
        last_name: 'User',
        language_code: 'en',
        direct_registration: true
      };

      const response = await fetch(`${this.baseUrl}/api/v2/register/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testUser)
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        this.log('SUCCESS', '–ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        this.results.directRegistration = true;
        this.results.jwtToken = data.token;
        this.results.refCode = data.user?.ref_code;
        
        this.log('INFO', '–î–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          id: data.user?.id,
          telegram_id: data.user?.telegram_id,
          username: data.user?.username,
          ref_code: data.user?.ref_code,
          token_length: data.token?.length
        });
      } else {
        this.log('ERROR', '–ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å', data);
        this.results.errors.push({
          test: 'directRegistration',
          error: data.error || 'Unknown error',
          status: response.status
        });
      }
    } catch (error) {
      this.log('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error.message);
      this.results.errors.push({
        test: 'directRegistration',
        error: error.message
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async testUserInDatabase() {
    if (!this.results.jwtToken) {
      this.log('SKIP', '–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞');
      return;
    }

    this.log('INFO', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    try {
      const response = await fetch(`${this.baseUrl}/api/v2/users/profile`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.results.jwtToken}`,
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        this.log('SUCCESS', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        this.results.userInDatabase = true;
        
        this.log('INFO', '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã', {
          id: data.user?.id,
          telegram_id: data.user?.telegram_id,
          username: data.user?.username,
          ref_code: data.user?.ref_code,
          balance: data.user?.balance
        });
      } else {
        this.log('ERROR', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', data);
        this.results.errors.push({
          test: 'userInDatabase',
          error: data.error || 'User not found',
          status: response.status
        });
      }
    } catch (error) {
      this.log('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', error.message);
      this.results.errors.push({
        test: 'userInDatabase',
        error: error.message
      });
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
   */
  async testReferralLink() {
    if (!this.results.refCode) {
      this.log('SKIP', '–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ - –Ω–µ—Ç ref_code');
      return;
    }

    this.log('INFO', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    
    try {
      const response = await fetch(`${this.baseUrl}/api/v2/referral/info`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.results.jwtToken}`,
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        this.log('SUCCESS', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
        
        this.log('INFO', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
          ref_code: data.ref_code,
          referral_count: data.referral_count,
          referral_link: data.referral_link
        });
      } else {
        this.log('ERROR', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', data);
        this.results.errors.push({
          test: 'referralLink',
          error: data.error || 'Referral info not available',
          status: response.status
        });
      }
    } catch (error) {
      this.log('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏', error.message);
      this.results.errors.push({
        test: 'referralLink',
        error: error.message
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    console.log('\n' + '='.repeat(60));
    console.log('–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò TELEGRAM –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
    console.log('='.repeat(60));
    
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:');
    console.log(`‚úÖ –ü—Ä—è–º–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${this.results.directRegistration ? '–ü–†–û–ô–î–ï–ù' : '–ù–ï –ü–†–û–ô–î–ï–ù'}`);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: ${this.results.userInDatabase ? '–ü–†–û–ô–î–ï–ù' : '–ù–ï –ü–†–û–ô–î–ï–ù'}`);
    console.log(`‚úÖ JWT —Ç–æ–∫–µ–Ω: ${this.results.jwtToken ? '–ü–û–õ–£–ß–ï–ù' : '–ù–ï –ü–û–õ–£–ß–ï–ù'}`);
    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${this.results.refCode ? '–ü–û–õ–£–ß–ï–ù' : '–ù–ï –ü–û–õ–£–ß–ï–ù'}`);
    
    if (this.results.errors.length > 0) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
      this.results.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error.test}: ${error.error}`);
        if (error.status) {
          console.log(`   HTTP Status: ${error.status}`);
        }
      });
    }
    
    const allTestsPassed = this.results.directRegistration && 
                          this.results.userInDatabase && 
                          this.results.jwtToken && 
                          this.results.refCode;
    
    console.log('\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    if (allTestsPassed) {
      console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ - –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û');
      console.log('üöÄ Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
    } else {
      console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´ - –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
      console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ª–æ–≥–∏–∫—É');
    }
    
    console.log('='.repeat(60));
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runTest() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ initData\n');
    
    await this.testDirectRegistration();
    await this.testUserInDatabase();
    await this.testReferralLink();
    
    this.generateReport();
  }
}

async function main() {
  const tester = new TelegramRegistrationFixTest();
  await tester.runTest();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { TelegramRegistrationFixTest };