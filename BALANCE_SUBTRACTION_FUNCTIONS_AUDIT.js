#!/usr/bin/env node

/**
 * –ê–£–î–ò–¢ –§–£–ù–ö–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function auditBalanceSubtractionFunctions() {
  console.log('üîç –ê–£–î–ò–¢ –§–£–ù–ö–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê');
  console.log('='.repeat(80));
  console.log(`üìÖ ${new Date().toLocaleString('ru-RU')}`);
  console.log('‚ö†Ô∏è  –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê - —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑');
  
  const currentUserId = 184;
  
  // 1. –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å');
  console.log('-'.repeat(60));
  
  const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
  
  const { data: recentTransactions, error: txError } = await supabase
    .from('transactions')
    .select('id, type, amount_ton, amount_uni, description, source, metadata, created_at')
    .eq('user_id', currentUserId)
    .gte('created_at', oneHourAgo)
    .order('created_at', { ascending: false });

  if (txError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    return;
  }

  console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å: ${recentTransactions.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
  const sourceStats = {};
  recentTransactions.forEach(tx => {
    const source = tx.source || 'unknown';
    if (!sourceStats[source]) {
      sourceStats[source] = { count: 0, totalTon: 0, totalUni: 0, types: new Set() };
    }
    sourceStats[source].count++;
    sourceStats[source].totalTon += parseFloat(tx.amount_ton || 0);
    sourceStats[source].totalUni += parseFloat(tx.amount_uni || 0);
    sourceStats[source].types.add(tx.type);
  });
  
  console.log('\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:');
  Object.entries(sourceStats).forEach(([source, stats]) => {
    console.log(`üîß ${source}:`);
    console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.count}`);
    console.log(`   TON: ${stats.totalTon.toFixed(6)} | UNI: ${stats.totalUni.toFixed(6)}`);
    console.log(`   –¢–∏–ø—ã: ${Array.from(stats.types).join(', ')}`);
    console.log('');
  });

  // 2. –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í
  console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í –°–ü–ò–°–ê–ù–ò–Ø');
  console.log('-'.repeat(60));
  
  const suspiciousSources = [
    'subtractBalance',
    'batch_subtract',
    'BalanceManager',
    'BatchBalanceProcessor',
    'rollback',
    'validation',
    'correction'
  ];
  
  const suspiciousTransactions = recentTransactions.filter(tx => {
    const source = (tx.source || '').toLowerCase();
    const desc = (tx.description || '').toLowerCase();
    const type = (tx.type || '').toLowerCase();
    
    return suspiciousSources.some(suspicious => 
      source.includes(suspicious.toLowerCase()) ||
      desc.includes(suspicious.toLowerCase()) ||
      type.includes(suspicious.toLowerCase())
    );
  });
  
  console.log(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${suspiciousTransactions.length}`);
  
  if (suspiciousTransactions.length > 0) {
    console.log('\nüìã –î–ï–¢–ê–õ–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    suspiciousTransactions.forEach(tx => {
      console.log(`‚Ä¢ ID:${tx.id} | ${tx.created_at.split('T')[1].substring(0, 8)}`);
      console.log(`  –¢–∏–ø: ${tx.type} | –ò—Å—Ç–æ—á–Ω–∏–∫: ${tx.source}`);
      console.log(`  TON: ${tx.amount_ton} | UNI: ${tx.amount_uni}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
      if (tx.metadata) {
        console.log(`  Metadata: ${JSON.stringify(tx.metadata)}`);
      }
      console.log('  ---');
    });
  }

  // 3. –ê–ù–ê–õ–ò–ó HISTORY –ë–ê–õ–ê–ù–°–û–í
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê');
  console.log('-'.repeat(60));
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ snapshots —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const balanceHistory = [];
  let runningTon = 0;
  let runningUni = 0;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
  const sortedTx = [...recentTransactions].reverse();
  
  sortedTx.forEach(tx => {
    const tonAmount = parseFloat(tx.amount_ton || 0);
    const uniAmount = parseFloat(tx.amount_uni || 0);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    if (tx.type === 'REFERRAL_REWARD' || tx.type === 'FARMING_REWARD') {
      runningTon += tonAmount;
      runningUni += uniAmount;
    }
    
    balanceHistory.push({
      time: tx.created_at.split('T')[1].substring(0, 8),
      type: tx.type,
      tonChange: tonAmount,
      uniChange: uniAmount,
      tonBalance: runningTon,
      uniBalance: runningUni,
      source: tx.source
    });
  });
  
  console.log('\nüìä –•–†–û–ù–û–õ–û–ì–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):');
  console.log('–í—Ä–µ–º—è    | –¢–∏–ø           | TON Œî    | UNI Œî     | TON –ë–∞–ª–∞–Ω—Å | –ò—Å—Ç–æ—á–Ω–∏–∫');
  console.log('-'.repeat(85));
  
  balanceHistory.slice(-10).forEach(entry => {
    const tonDelta = entry.tonChange > 0 ? `+${entry.tonChange}` : `${entry.tonChange}`;
    const uniDelta = entry.uniChange > 0 ? `+${entry.uniChange}` : `${entry.uniChange}`;
    
    console.log(`${entry.time} | ${String(entry.type).padEnd(13)} | ${String(tonDelta).padEnd(8)} | ${String(uniDelta).padEnd(9)} | ${String(entry.tonBalance.toFixed(6))} | ${entry.source || 'N/A'}`);
  });

  // 4. –¢–ï–ö–£–©–ò–ô –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–° VS –†–ê–°–ß–ï–¢–ù–´–ô
  console.log('\n4Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–°–ß–ï–¢–ù–û–ì–û –ò –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ë–ê–õ–ê–ù–°–ê');
  console.log('-'.repeat(60));
  
  const { data: currentUser } = await supabase
    .from('users')
    .select('balance_ton, balance_uni')
    .eq('id', currentUserId)
    .single();
  
  if (currentUser && balanceHistory.length > 0) {
    const lastEntry = balanceHistory[balanceHistory.length - 1];
    const actualTon = parseFloat(currentUser.balance_ton);
    const actualUni = parseFloat(currentUser.balance_uni);
    
    console.log(`üí∞ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–õ–ê–ù–°:`);
    console.log(`   TON: ${actualTon}`);
    console.log(`   UNI: ${actualUni}`);
    
    console.log(`üìä –†–ê–°–ß–ï–¢–ù–´–ô –ë–ê–õ–ê–ù–° (–ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∑–∞ —á–∞—Å):`);
    console.log(`   TON: ${lastEntry.tonBalance.toFixed(6)}`);
    console.log(`   UNI: ${lastEntry.uniBalance.toFixed(6)}`);
    
    const tonDiscrepancy = actualTon - lastEntry.tonBalance;
    const uniDiscrepancy = actualUni - lastEntry.uniBalance;
    
    console.log(`‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï:`);
    console.log(`   TON: ${tonDiscrepancy.toFixed(6)} (${tonDiscrepancy > 0 ? '–∏–∑–±—ã—Ç–æ–∫' : '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'})`);
    console.log(`   UNI: ${uniDiscrepancy.toFixed(6)} (${uniDiscrepancy > 0 ? '–∏–∑–±—ã—Ç–æ–∫' : '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫'})`);
    
    if (Math.abs(tonDiscrepancy) > 0.001 || Math.abs(uniDiscrepancy) > 0.001) {
      console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï!');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ BalanceManager.subtractBalance()');
      console.log('   ‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ BatchBalanceProcessor.processBulkSubtract()');
      console.log('   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É');
      console.log('   ‚Ä¢ –ü—Ä—è–º—ã–µ UPDATE –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ users');
    }
  }

  // 5. –ü–û–ò–°–ö –ü–†–Ø–ú–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê
  console.log('\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ï–ú–£ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Æ');
  console.log('-'.repeat(60));
  
  console.log('üìã –ü–†–û–í–ï–†–ò–¢–¨ –°–õ–ï–î–£–Æ–©–ò–ï –ü–†–û–¶–ï–°–°–´:');
  console.log('1. –õ–æ–≥–∏ –≤—ã–∑–æ–≤–æ–≤ BalanceManager.subtractBalance() –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å');
  console.log('2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å BatchBalanceProcessor.processBulkSubtract()');
  console.log('3. –ü—Ä—è–º—ã–µ UPDATE –∑–∞–ø—Ä–æ—Å—ã –∫ —Ç–∞–±–ª–∏—Ü–µ users –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
  console.log('4. WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è');
  console.log('5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏/–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤');
  
  if (suspiciousTransactions.length === 0) {
    console.log('\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–ê–Ø –ù–ê–•–û–î–ö–ê:');
    console.log('   –ù–ï –ù–ê–ô–î–ï–ù–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏!');
    console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–∞–ª–∞–Ω—Å —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä—è–º—ã–µ UPDATE –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î');
  }
  
  console.log('\n' + '='.repeat(80));
  console.log('üìã –ê–£–î–ò–¢ –§–£–ù–ö–¶–ò–ô –°–ü–ò–°–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(80));
}

auditBalanceSubtractionFunctions().catch(console.error);