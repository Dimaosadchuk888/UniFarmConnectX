/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø TON –î–ï–ü–û–ó–ò–¢–û–í
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É: Frontend -> Backend -> Database -> Deduplication
 */

import { supabase } from './core/supabase';
import { UnifiedTransactionService } from './core/TransactionService';

const TARGET_BOC = 'te6cckECAgEAAKoAAeGIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKABZpFBvrrFJAWiokVZF0jaVpS4WogHhGrlhtGT3Nx2c+u4VTiWDwFKqA5bFP1f+FcnGm3mCx5TtEYlGNh1ccWBFNTRi7RHrhaAAAG8AAHAEAaEIAMtaj5JhEoDmTGdtuWKu2Ndd7Q45BQhTz1ozLYdEVqaKh3NZQAAAAAAAAAAAAAAAAAABGzPzj';

async function testFinalDuplicationFix() {
  console.log('\nüîß === –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ===\n');

  const userId = 184;
  const transactionService = UnifiedTransactionService.getInstance();

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è frontend)
    console.log('1Ô∏è‚É£ –¢–ï–°–¢ –£–î–ê–õ–ï–ù–ò–Ø –°–£–§–§–ò–ö–°–û–í (—Å–∏–º—É–ª—è—Ü–∏—è frontend):');
    
    const bocWithSuffix1 = `${TARGET_BOC}_1754225900000_abc123def`;
    const bocWithSuffix2 = `${TARGET_BOC}_1754225901000_xyz789ghi`;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend
    const cleanBoc1 = bocWithSuffix1.replace(/_\d{13}_[a-z0-9]+$/, '');
    const cleanBoc2 = bocWithSuffix2.replace(/_\d{13}_[a-z0-9]+$/, '');
    
    console.log(`   Original BOC 1: ${bocWithSuffix1.substring(0, 60)}...`);
    console.log(`   Clean BOC 1:    ${cleanBoc1.substring(0, 60)}...`);
    console.log(`   Original BOC 2: ${bocWithSuffix2.substring(0, 60)}...`);
    console.log(`   Clean BOC 2:    ${cleanBoc2.substring(0, 60)}...`);
    console.log(`   ‚úÖ Clean BOCs identical: ${cleanBoc1 === cleanBoc2}`);
    console.log(`   ‚úÖ Clean BOC matches target: ${cleanBoc1 === TARGET_BOC}`);

    // 2. –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n2Ô∏è‚É£ –û–ß–ò–°–¢–ö–ê –ü–†–ï–î–´–î–£–©–ò–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:');
    const { data: oldTests, error: cleanupError } = await supabase
      .from('transactions')
      .delete()
      .eq('user_id', userId)
      .like('description', '%DUPLICATION_TEST%');

    console.log(`   –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤: ${cleanupError ? '–æ—à–∏–±–∫–∞' : oldTests?.length || 0}`);

    // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ UnifiedTransactionService
    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('   –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const result1 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 1.5,
      description: 'DUPLICATION_TEST - First transaction',
      metadata: {
        tx_hash: TARGET_BOC, // –ß–∏—Å—Ç—ã–π BOC –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
        original_type: 'TON_DEPOSIT',
        test_run: true
      }
    });

    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç 1: ${result1.success ? 'SUCCESS' : 'FAILED'}`);
    if (!result1.success) {
      console.log(`   –û—à–∏–±–∫–∞ 1: ${result1.error}`);
    }

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
    console.log('   –°–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const result2 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 1.5,
      description: 'DUPLICATION_TEST - Duplicate transaction (should be blocked)',
      metadata: {
        tx_hash: TARGET_BOC, // –¢–æ—Ç –∂–µ —á–∏—Å—Ç—ã–π BOC
        original_type: 'TON_DEPOSIT',
        test_run: true
      }
    });

    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç 2: ${result2.success ? 'SUCCESS (BAD!)' : 'BLOCKED (GOOD!)'}`);
    if (!result2.success) {
      console.log(`   ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${result2.error}`);
    } else {
      console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!`);
    }

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ extractBaseBoc)
    console.log('   –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º...');
    const result3 = await transactionService.createTransaction({
      user_id: userId,
      type: 'TON_DEPOSIT',
      amount_uni: 0,
      amount_ton: 1.5,
      description: 'DUPLICATION_TEST - Transaction with suffix (should be blocked)',
      metadata: {
        tx_hash: `${TARGET_BOC}_1754225902000_test123`, // BOC —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        original_type: 'TON_DEPOSIT',
        test_run: true
      }
    });

    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç 3: ${result3.success ? 'SUCCESS (BAD!)' : 'BLOCKED (GOOD!)'}`);
    if (!result3.success) {
      console.log(`   ‚úÖ extractBaseBoc() —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${result3.error}`);
    } else {
      console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: extractBaseBoc() –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª–∞!`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
    const { data: testTransactions, error: dbError } = await supabase
      .from('transactions')
      .select('id, tx_hash_unique, description, created_at')
      .eq('user_id', userId)
      .like('description', '%DUPLICATION_TEST%')
      .order('created_at', { ascending: false });

    if (dbError) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${dbError.message}`);
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î: ${testTransactions?.length || 0}`);
      testTransactions?.forEach((tx, index) => {
        console.log(`   ${index + 1}. ID: ${tx.id}, Hash: ${tx.tx_hash_unique?.substring(0, 30)}..., Desc: ${tx.description?.substring(0, 50)}...`);
      });

      if (testTransactions && testTransactions.length === 1) {
        console.log('   ‚úÖ –û–¢–õ–ò–ß–ù–û: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î - –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      } else if (testTransactions && testTransactions.length > 1) {
        console.log('   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —Å–æ–∑–¥–∞—é—Ç—Å—è!');
      }
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê:');
    const { error: finalCleanupError } = await supabase
      .from('transactions')
      .delete()
      .eq('user_id', userId)
      .like('description', '%DUPLICATION_TEST%');

    console.log(`   –û—á–∏—Å—Ç–∫–∞: ${finalCleanupError ? '–æ—à–∏–±–∫–∞' : '—É—Å–ø–µ—à–Ω–æ'}`);

    console.log('\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ê:');
    console.log(`   ‚úÖ Frontend —É–¥–∞–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã: ${cleanBoc1 === TARGET_BOC}`);
    console.log(`   ‚úÖ Backend –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏: ${!result2.success}`);
    console.log(`   ‚úÖ Backend –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—É–±–ª–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏: ${!result3.success}`);
    console.log(`   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–∏—Å—Ç–∞—è: ${testTransactions?.length === 1}`);

    const allTestsPassed = cleanBoc1 === TARGET_BOC && !result2.success && !result3.success && testTransactions?.length === 1;
    
    if (allTestsPassed) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testFinalDuplicationFix().then(() => {
  console.log('\nüèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});