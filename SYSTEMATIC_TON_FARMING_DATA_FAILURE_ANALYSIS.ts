/**
 * üö® –°–ò–°–¢–ï–ú–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–û–ß–ï–ú–£ –ù–ï –°–û–ó–î–ê–Æ–¢–°–Ø ton_farming_data –ó–ê–ü–ò–°–ò
 * 
 * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ vs —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 */

import { supabase } from './core/supabase';

async function analyzeSystematicTonFarmingDataFailure() {
  console.log('\nüö® === –°–ò–°–¢–ï–ú–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø ton_farming_data ===\n');
  
  try {
    // 1. –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON BOOST –ë–ï–ó –ó–ê–ü–ò–°–ï–ô –í ton_farming_data
    console.log('1Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• –ü–û–°–¢–†–ê–î–ê–í–®–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    console.log('=========================================');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ton_boost_package
    const { data: usersWithBoosts, error: usersError } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_active, ton_boost_rate, balance_ton, created_at')
      .not('ton_boost_package', 'is', null)
      .neq('ton_boost_package', 0)
      .order('id', { ascending: true });

    if (usersError || !usersWithBoosts?.length) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON boost –ø–∞–∫–µ—Ç–∞–º–∏');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${usersWithBoosts.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON boost –ø–∞–∫–µ—Ç–∞–º–∏`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ton_farming_data
    const { data: farmingDataRecords, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_active, farming_balance, boost_package_id')
      .order('user_id', { ascending: true });

    const farmingDataUserIds = new Set(farmingDataRecords?.map(r => parseInt(r.user_id)) || []);
    
    console.log(`‚úÖ –í ton_farming_data –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è ${farmingDataUserIds.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üìã User IDs –≤ ton_farming_data: [${Array.from(farmingDataUserIds).join(', ')}]`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data
    const usersWithoutFarmingData = usersWithBoosts.filter(user => !farmingDataUserIds.has(user.id));
    
    console.log('\nüö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–ï–ó ton_farming_data –ó–ê–ü–ò–°–ï–ô:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö: ${usersWithoutFarmingData.length}`);
    
    if (usersWithoutFarmingData.length > 0) {
      console.log('   –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      usersWithoutFarmingData.forEach(user => {
        console.log(`     User ${user.id}: package=${user.ton_boost_package}, active=${user.ton_boost_active}, rate=${user.ton_boost_rate}`);
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const recentUsers = usersWithoutFarmingData.filter(user => 
        new Date(user.created_at) > new Date('2025-07-20')
      );
      
      console.log(`\nüîç –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò:`);
      console.log(`   –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ 20.07.2025): ${recentUsers.length}`);
      console.log(`   –°—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersWithoutFarmingData.length - recentUsers.length}`);
      
      if (recentUsers.length === usersWithoutFarmingData.length) {
        console.log('üö® –í–°–ï –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ - –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!');
        console.log('   –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –°–õ–û–ú–ê–õ–ê–°–¨');
      }
    }

    // 2. –ê–ù–ê–õ–ò–ó –ö–û–î–ê: –ö–ê–ö–ò–ï –ü–û–õ–Ø –ù–£–ñ–ù–´ –î–õ–Ø ton_farming_data
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ï–ë–û–í–ê–ù–ò–ô –ö –ü–û–õ–Ø–ú ton_farming_data:');
    console.log('===============================================');
    
    if (farmingDataRecords && farmingDataRecords.length > 0) {
      const sampleRecord = farmingDataRecords[0];
      console.log('‚úÖ –°–¢–†–£–ö–¢–£–†–ê ton_farming_data (–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏):');
      console.log(`   –ü–æ–ª—è: ${Object.keys(sampleRecord).join(', ')}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
      const { data: fullRecord, error: fullError } = await supabase
        .from('ton_farming_data')
        .select('*')
        .limit(1)
        .single();
        
      if (!fullError && fullRecord) {
        console.log('\nüìã –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê ton_farming_data:');
        Object.entries(fullRecord).forEach(([key, value]) => {
          console.log(`     ${key}: ${value} (${typeof value})`);
        });
      }
    }

    // 3. –ê–ù–ê–õ–ò–ó TonFarmingRepository.activateBoost() –ú–ï–¢–û–î–ê
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TonFarmingRepository.activateBoost():');
    console.log('==============================================');
    
    console.log('üîç –ü–û–ò–°–ö –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–î–ï –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ï–ô...');
    console.log('   TonFarmingRepository –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data');
    console.log('   –ø—Ä–∏ –≤—ã–∑–æ–≤–µ activateBoost(userId, packageData)');
    console.log('   –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫–∏–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ');

    // 4. –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê: –ö–ê–ö–ò–ï –ü–û–õ–Ø –û–ù –ò–©–ï–¢
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ï–ë–û–í–ê–ù–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
    console.log('==================================');
    
    console.log('üîç –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò–©–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:');
    console.log('   –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ–∫–∞–∂–µ—Ç:');
    console.log('   - –ö–∞–∫–∏–µ JOIN –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–µ–∂–¥—É users –∏ ton_farming_data');
    console.log('   - –ö–∞–∫–∏–µ –ø–æ–ª—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    console.log('   - –ü–æ—á–µ–º—É –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≤—ã–±–æ—Ä–∫—É');

    // 5. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–ò–°–ò (–°–ò–ú–£–õ–Ø–¶–ò–Ø)
    console.log('\n5Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø ton_farming_data:');
    console.log('======================================');
    
    // –ë–µ—Ä–µ–º User 290 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    const testUserId = 290;
    const testUser = usersWithBoosts.find(u => u.id === testUserId);
    
    if (testUser) {
      console.log(`üß™ –¢–ï–°–¢: –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ User ${testUserId}:`);
      console.log(`   user_id: ${testUserId} (INTEGER –∏–ª–∏ STRING?)`);
      console.log(`   boost_package_id: ${testUser.ton_boost_package}`);
      console.log(`   farming_balance: ??? (–∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏–ª–∏ users.balance_ton?)`);
      console.log(`   boost_active: true`);
      console.log(`   farming_rate: ${testUser.ton_boost_rate}`);
      console.log(`   created_at: NOW()`);
      console.log(`   updated_at: NOW()`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: depositTx, error: depositError } = await supabase
        .from('transactions')
        .select('amount, created_at')
        .eq('user_id', testUserId)
        .eq('type', 'TON_DEPOSIT')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
        
      if (!depositError && depositTx) {
        console.log(`   üí∞ –î–ï–ü–û–ó–ò–¢ –ù–ê–ô–î–ï–ù: ${depositTx.amount} TON (${depositTx.created_at})`);
        console.log(`   farming_balance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: ${depositTx.amount}`);
      } else {
        console.log(`   ‚ùå –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!`);
      }
    }

    // 6. –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\n6Ô∏è‚É£ –ü–õ–ê–ù –£–°–¢–†–ê–ù–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´:');
    console.log('============================');
    console.log('');
    console.log('üîß –®–ê–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   1. –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å TonFarmingRepository.activateBoost()');
    console.log('   2. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ton_farming_data –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('');
    console.log(`üö® –°–†–û–ß–ù–û: ${usersWithoutFarmingData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∂–¥—É—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!`);

    console.log('\n‚úÖ === –°–ò–°–¢–ï–ú–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
analyzeSystematicTonFarmingDataFailure();