import { supabase } from './core/supabaseClient';

async function findRootCauseMissingTransactions() {
  console.log('üîç –ü–û–ò–°–ö –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –ü–†–û–ü–ê–î–ê–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('='.repeat(70));

  try {
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω - –∫–æ–≥–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–ê: –ö–û–ì–î–ê –°–û–ó–î–ê–Æ–¢–°–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò?');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏ –±–µ–∑
    const { data: usersWithTx, error: withTxError } = await supabase
      .from('transactions')
      .select('user_id, type, created_at, amount_ton')
      .gte('user_id', 191)
      .lte('user_id', 303)
      .in('type', ['TON_DEPOSIT', 'BOOST_PURCHASE', 'FARMING_REWARD'])
      .order('created_at', { ascending: true });

    const { data: allUsers191_303, error: allUsersError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active, created_at')
      .gte('id', 191)
      .lte('id', 303)
      .gt('balance_ton', 0);

    if (!withTxError && !allUsersError && usersWithTx && allUsers191_303) {
      const usersWithTransactions = new Set(usersWithTx.map(tx => tx.user_id));
      const usersWithoutTransactions = allUsers191_303.filter(u => !usersWithTransactions.has(u.id));
      
      console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º: ${allUsers191_303.length}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${usersWithTransactions.size}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${usersWithoutTransactions.length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      console.log('\n‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:');
      
      const txByDate: { [key: string]: number } = {};
      const usersByDate: { [key: string]: number } = {};
      
      usersWithTx.forEach(tx => {
        const date = tx.created_at.split('T')[0];
        txByDate[date] = (txByDate[date] || 0) + 1;
      });
      
      allUsers191_303.forEach(user => {
        const date = user.created_at.split('T')[0];
        usersByDate[date] = (usersByDate[date] || 0) + 1;
      });
      
      const allDates = [...new Set([...Object.keys(txByDate), ...Object.keys(usersByDate)])].sort();
      
      console.log('   –î–∞—Ç–∞       | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ | –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ | % —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
      console.log('   -----------|--------------|------------|----------------');
      
      allDates.forEach(date => {
        const users = usersByDate[date] || 0;
        const txs = txByDate[date] || 0;
        const percentage = users > 0 ? Math.round((txs / users) * 100) : 0;
        console.log(`   ${date} |     ${users.toString().padStart(2)}       |     ${txs.toString().padStart(2)}     |      ${percentage}%`);
      });
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–ü–û–°–õ–ï–î–ù–ò–ï 7 –î–ù–ï–ô):');
    
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
    
    const { data: recentUsers, error: recentError } = await supabase
      .from('users')
      .select('id, balance_ton, ton_boost_active, created_at')
      .gte('created_at', sevenDaysAgo)
      .order('id', { ascending: false })
      .limit(20);

    if (!recentError && recentUsers && recentUsers.length > 0) {
      console.log(`üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7 –¥–Ω–µ–π: ${recentUsers.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const recentUserIds = recentUsers.map(u => u.id);
      
      const { data: recentTransactions, error: recentTxError } = await supabase
        .from('transactions')
        .select('user_id, type, amount_ton, created_at')
        .in('user_id', recentUserIds)
        .order('created_at', { ascending: false });

      if (!recentTxError) {
        const recentUsersWithTx = new Set(recentTransactions?.map(tx => tx.user_id) || []);
        const recentUsersWithoutTx = recentUsers.filter(u => !recentUsersWithTx.has(u.id));
        
        console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
        console.log(`   –° —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: ${recentUsersWithTx.size}`);
        console.log(`   –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${recentUsersWithoutTx.length}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${Math.round((recentUsersWithoutTx.length / recentUsers.length) * 100)}%`);
        
        if (recentUsersWithoutTx.length > 0) {
          console.log('\n‚ùå –ù–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
          recentUsersWithoutTx.slice(0, 5).forEach(user => {
            console.log(`   User ${user.id}: TON=${user.balance_ton}, Boost=${user.ton_boost_active}, —Å–æ–∑–¥–∞–Ω=${user.created_at.split('T')[0]}`);
          });
          
          console.log('\nüö® –ü–†–û–ë–õ–ï–ú–ê –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø! –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ —Ç–µ—Ä—è—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
        } else {
          console.log('\n‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞ –≤ –∫–æ–¥–µ');
        }
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–í–ï–ñ–ò–• –î–ï–ü–û–ó–ò–¢–ù–´–• –û–ü–ï–†–ê–¶–ò–ô:');
    
    const { data: recentDeposits, error: depositError } = await supabase
      .from('transactions')
      .select('user_id, type, amount_ton, created_at, description')
      .in('type', ['TON_DEPOSIT', 'BOOST_PURCHASE'])
      .gte('created_at', sevenDaysAgo)
      .order('created_at', { ascending: false })
      .limit(10);

    if (!depositError && recentDeposits && recentDeposits.length > 0) {
      console.log(`üí∞ –î–µ–ø–æ–∑–∏—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ 7 –¥–Ω–µ–π: ${recentDeposits.length}`);
      
      recentDeposits.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. User ${tx.user_id}: ${tx.type} ${tx.amount_ton} TON [${tx.created_at.split('T')[0]}]`);
      });
    } else {
      console.log('‚ùå –ù–ò –û–î–ù–û–ô –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π!');
      console.log('üö® –≠–¢–û –û–ó–ù–ê–ß–ê–ï–¢: –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!');
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ API –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (—ç–º—É–ª—è—Ü–∏—è)
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø API:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    const { data: recentBalanceUpdates, error: balanceError } = await supabase
      .from('users')
      .select('id, balance_ton, updated_at, created_at')
      .gte('updated_at', sevenDaysAgo)
      .gt('balance_ton', 0)
      .order('updated_at', { ascending: false })
      .limit(10);

    if (!balanceError && recentBalanceUpdates && recentBalanceUpdates.length > 0) {
      console.log(`‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–π TON –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: ${recentBalanceUpdates.length}`);
      
      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
      for (const update of recentBalanceUpdates.slice(0, 5)) {
        const { data: userTransactions } = await supabase
          .from('transactions')
          .select('type, amount_ton, created_at')
          .eq('user_id', update.id)
          .gte('created_at', update.updated_at)
          .in('type', ['TON_DEPOSIT', 'BOOST_PURCHASE']);

        const hasMatchingTx = userTransactions && userTransactions.length > 0;
        
        console.log(`   User ${update.id}: –±–∞–ª–∞–Ω—Å=${update.balance_ton} TON, –æ–±–Ω–æ–≤–ª–µ–Ω=${update.updated_at.split('T')[0]}`);
        console.log(`     –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${hasMatchingTx ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      }
    }

    // 5. –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó –ò –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô
    console.log('\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:');
    
    console.log('\nüéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:');
    console.log('   API –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:');
    console.log('   1. –ü–û–õ–ù–´–ô —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å + —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    console.log('   2. –ë–´–°–¢–†–´–ô —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å (–ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)');
    console.log('   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ');

    console.log('\nüîß –ì–î–ï –ò–°–ö–ê–¢–¨ –ü–†–û–ë–õ–ï–ú–£:');
    console.log('   1. modules/wallet/service.ts - –º–µ—Ç–æ–¥ processTonDeposit()');
    console.log('   2. core/TransactionService.ts - —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   3. modules/boost/service.ts - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ TON Boost');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å try-catch –±–ª–æ–∫–∏ —Å silent fail');

    console.log('\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
    if (recentDeposits && recentDeposits.length === 0) {
      console.log('   –ù–ò –û–î–ù–û–ô –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 7 –¥–Ω–µ–π!');
      console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –í–°–ï –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã "–Ω–µ–≤–∏–¥–∏–º—ã"');
      console.log('   –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï —Ä–µ—à–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è!');
    }

    console.log('\nüìã –ü–õ–ê–ù –ù–ï–ú–ï–î–õ–ï–ù–ù–´–• –î–ï–ô–°–¢–í–ò–ô:');
    console.log('   1. –°–ù–ê–ß–ê–õ–ê: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ API –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   2. –ü–û–¢–û–ú: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('   3. –¢–ï–°–¢–ò–†–û–í–ê–¢–¨: –ù–∞ –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö –ø–µ—Ä–µ–¥ –º–∞—Å—Å–æ–≤—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º');
    console.log('   4. –ú–û–ù–ò–¢–û–†–ò–¢–¨: –ß—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');

    console.log('\nüö® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
    console.log('   –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥!');
    console.log('   –ò–Ω–∞—á–µ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–ò–°–ö–ê –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´:', error);
  }
}

findRootCauseMissingTransactions().catch(console.error);