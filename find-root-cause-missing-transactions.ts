import { supabase } from './core/supabaseClient';
import * as fs from 'fs';
import * as path from 'path';

async function findRootCauseMissingTransactions() {
  console.log('üîç –ü–û–ò–°–ö –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('='.repeat(80));

  try {
    // 1. –ü–û–ò–°–ö –í–°–ï–• –°–ü–û–°–û–ë–û–í –û–ë–ù–û–í–õ–ï–ù–ò–Ø balance_ton
    console.log('\n1Ô∏è‚É£ –ü–û–ò–°–ö –í–°–ï–• –ü–£–¢–ï–ô –û–ë–ù–û–í–õ–ï–ù–ò–Ø balance_ton:');
    
    const searchDirs = ['./modules', './core', './server', './scripts'];
    const balanceUpdatePaths: string[] = [];
    
    searchDirs.forEach(dir => {
      if (fs.existsSync(dir)) {
        const files = fs.readdirSync(dir, { recursive: true });
        
        files.forEach(file => {
          if (typeof file === 'string' && file.endsWith('.ts')) {
            const filePath = path.join(dir, file);
            if (fs.existsSync(filePath)) {
              const content = fs.readFileSync(filePath, 'utf8');
              
              // –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton
              const lines = content.split('\n');
              lines.forEach((line, idx) => {
                if (line.includes('balance_ton') && 
                    (line.includes('+=') || line.includes('UPDATE') || 
                     line.includes('update') || line.includes('SET') ||
                     line.includes('increment') || line.includes('add'))) {
                  balanceUpdatePaths.push(`${file}:${idx + 1} - ${line.trim()}`);
                }
              });
            }
          }
        });
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—É—Ç–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton: ${balanceUpdatePaths.length}`);
    balanceUpdatePaths.slice(0, 15).forEach(path => {
      console.log(`   üîç ${path}`);
    });

    // 2. –ü–û–ò–°–ö SCHEDULER –û–ü–ï–†–ê–¶–ò–ô
    console.log('\n2Ô∏è‚É£ –ü–û–ò–°–ö SCHEDULER/CRON –ó–ê–î–ê–ß:');
    
    const schedulerFiles = [
      './core/scheduler.ts',
      './modules/farming/scheduler.ts', 
      './server/scheduler.ts',
      './core/cronJobs.ts',
      './modules/blockchain/scheduler.ts'
    ];
    
    schedulerFiles.forEach(filePath => {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        console.log(`   ‚úÖ ${filePath}: –ù–ê–ô–î–ï–ù`);
        
        // –ò—â–µ–º TON-—Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const lines = content.split('\n');
        lines.forEach((line, idx) => {
          if (line.includes('TON') || line.includes('balance_ton') || line.includes('blockchain')) {
            console.log(`     Line ${idx + 1}: ${line.trim()}`);
          }
        });
      } else {
        console.log(`   ‚ùå ${filePath}: –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    });

    // 3. –ü–û–ò–°–ö WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
    console.log('\n3Ô∏è‚É£ –ü–û–ò–°–ö WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:');
    
    const webhookPaths = [
      './server/webhooks',
      './modules/blockchain/webhooks',
      './core/webhooks.ts',
      './server/index.ts'
    ];
    
    webhookPaths.forEach(webhookPath => {
      if (fs.existsSync(webhookPath)) {
        console.log(`   ‚úÖ ${webhookPath}: –ù–ê–ô–î–ï–ù`);
        
        if (fs.statSync(webhookPath).isFile()) {
          const content = fs.readFileSync(webhookPath, 'utf8');
          
          // –ò—â–µ–º webhook –º–∞—Ä—à—Ä—É—Ç—ã
          const lines = content.split('\n');
          lines.forEach((line, idx) => {
            if (line.includes('/webhook') || line.includes('webhook') || 
                line.includes('TON') || line.includes('blockchain')) {
              console.log(`     Line ${idx + 1}: ${line.trim()}`);
            }
          });
        } else {
          // –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
          const files = fs.readdirSync(webhookPath);
          console.log(`     –§–∞–π–ª—ã: ${files.join(', ')}`);
        }
      } else {
        console.log(`   ‚ùå ${webhookPath}: –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    });

    // 4. –ê–ù–ê–õ–ò–ó BATCH PROCESSOR
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó BatchBalanceProcessor:');
    
    const batchProcessorPath = './core/BatchBalanceProcessor.ts';
    if (fs.existsSync(batchProcessorPath)) {
      const content = fs.readFileSync(batchProcessorPath, 'utf8');
      
      console.log('   ‚úÖ BatchBalanceProcessor –ù–ê–ô–î–ï–ù');
      
      // –ò—â–µ–º TON –æ–ø–µ—Ä–∞—Ü–∏–∏
      const lines = content.split('\n');
      let tonOperations = 0;
      
      lines.forEach((line, idx) => {
        if (line.includes('ton_increment') || line.includes('balance_ton')) {
          tonOperations++;
          console.log(`     Line ${idx + 1}: ${line.trim()}`);
        }
      });
      
      console.log(`   üìä TON –æ–ø–µ—Ä–∞—Ü–∏–π –≤ BatchProcessor: ${tonOperations}`);
    } else {
      console.log('   ‚ùå BatchBalanceProcessor –ù–ï –ù–ê–ô–î–ï–ù');
    }

    // 5. –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• API –≠–ù–î–ü–û–ò–ù–¢–û–í
    console.log('\n5Ô∏è‚É£ –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• API –î–õ–Ø –î–ï–ü–û–ó–ò–¢–û–í:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º server/index.ts –Ω–∞ –ø—Ä—è–º—ã–µ API
    const serverIndexPath = './server/index.ts';
    if (fs.existsSync(serverIndexPath)) {
      const content = fs.readFileSync(serverIndexPath, 'utf8');
      
      console.log('   üìÅ –ê–Ω–∞–ª–∏–∑ server/index.ts:');
      
      const lines = content.split('\n');
      lines.forEach((line, idx) => {
        if ((line.includes('app.post') || line.includes('router.post')) && 
            (line.includes('deposit') || line.includes('ton') || line.includes('TON'))) {
          console.log(`     Line ${idx + 1}: ${line.trim()}`);
        }
      });
    }

    // 6. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –ù–ê –†–ï–ê–õ–¨–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
    console.log('\n6Ô∏è‚É£ –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–ê –í –õ–û–ì–ê–•:');
    
    // –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –±–∞–ª–∞–Ω—Å–æ–º
    const { data: recentUpdates, error: updatesError } = await supabase
      .from('users')
      .select('id, balance_ton, updated_at')
      .gt('balance_ton', 0)
      .gte('id', 191)
      .lte('id', 303)
      .order('updated_at', { ascending: false })
      .limit(10);

    if (!updatesError && recentUpdates) {
      console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è balance_ton: ${recentUpdates.length}`);
      
      recentUpdates.forEach(user => {
        console.log(`   User ${user.id}: ${user.balance_ton} TON [${user.updated_at.split('T')[0]}]`);
      });
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—â–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–∞–ª–∞–Ω—Å
      if (recentUpdates.length > 0) {
        const latestUpdate = recentUpdates[0];
        const updateDate = new Date(latestUpdate.updated_at);
        const daysSinceUpdate = Math.floor((Date.now() - updateDate.getTime()) / (1000 * 60 * 60 * 24));
        
        console.log(`\n   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${daysSinceUpdate} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
        
        if (daysSinceUpdate < 7) {
          console.log('   ‚úÖ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ê–ö–¢–ò–í–ù–û');
        } else {
          console.log('   ‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å—ã –ù–ï –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –¥–æ–ª–≥–æ');
        }
      }
    }

    // 7. –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - –û–¢–ö–£–î–ê –ë–ï–†–£–¢–°–Ø –ë–ê–õ–ê–ù–°–´
    console.log('\n7Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –ë–ê–õ–ê–ù–°–û–í:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä—è–º—ã–µ SQL –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ
    const directSqlPaths: string[] = [];
    
    searchDirs.forEach(dir => {
      if (fs.existsSync(dir)) {
        const files = fs.readdirSync(dir, { recursive: true });
        
        files.forEach(file => {
          if (typeof file === 'string' && file.endsWith('.ts')) {
            const filePath = path.join(dir, file);
            if (fs.existsSync(filePath)) {
              const content = fs.readFileSync(filePath, 'utf8');
              
              if (content.includes('supabase') && content.includes('update') && 
                  content.includes('balance_ton')) {
                directSqlPaths.push(file);
              }
            }
          }
        });
      }
    });
    
    console.log(`üìä –§–∞–π–ª—ã —Å –ø—Ä—è–º—ã–º–∏ SQL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ balance_ton: ${directSqlPaths.length}`);
    directSqlPaths.slice(0, 10).forEach(file => {
      console.log(`   üîç ${file}`);
    });

    // 8. –í–´–í–û–î–´ –ò –ì–ò–ü–û–¢–ï–ó–´
    console.log('\n8Ô∏è‚É£ –í–´–í–û–î–´ –ò –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    
    console.log('\nüéØ –í–û–ó–ú–û–ñ–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò TON –ë–ê–õ–ê–ù–°–û–í:');
    console.log('   1. BatchBalanceProcessor - –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
    console.log('   2. Scheduler - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞');
    console.log('   3. Webhook - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞');
    console.log('   4. –ü—Ä—è–º—ã–µ SQL –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ');
    console.log('   5. –°—Ç–∞—Ä—ã–π API –≤ server/index.ts');
    
    console.log('\nüîç –ß–¢–û –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –î–ê–õ–¨–®–ï:');
    console.log('   1. –†–∞–±–æ—Ç—É BatchBalanceProcessor');
    console.log('   2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å scheduler –∑–∞–¥–∞—á');
    console.log('   3. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤');
    console.log('   4. –°—Ç–∞—Ä—ã–µ API –≤ server/index.ts');
    console.log('   5. –õ–æ–≥–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞');

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:', error);
  }
}

findRootCauseMissingTransactions().catch(console.error);