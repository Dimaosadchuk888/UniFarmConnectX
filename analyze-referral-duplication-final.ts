import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

async function analyzeReferralDuplication() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò REFERRAL_REWARD - –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó');
  console.log('=' .repeat(80));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º REFERRAL_REWARD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –¥–µ—Ç–∞–ª—å–Ω–æ
    console.log('\n1Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó REFERRAL_REWARD –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 2 –ß–ê–°–ê:');
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
    
    const { data: referralRewards, error } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'REFERRAL_REWARD')
      .gte('created_at', twoHoursAgo)
      .order('created_at', { ascending: true });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è REFERRAL_REWARD:', error);
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${referralRewards?.length || 0} REFERRAL_REWARD —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ user_id + amount –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const duplicateGroups: { [key: string]: any[] } = {};
    
    referralRewards?.forEach(tx => {
      const key = `${tx.user_id}_${tx.amount || tx.amount_ton}_${tx.metadata?.level}_${tx.metadata?.source_user_id}`;
      if (!duplicateGroups[key]) duplicateGroups[key] = [];
      duplicateGroups[key].push(tx);
    });

    // –ò—â–µ–º –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    let duplicateCount = 0;
    Object.entries(duplicateGroups).forEach(([key, transactions]) => {
      if (transactions.length > 1) {
        duplicateCount++;
        console.log(`\nüö® –î–£–ë–õ–ò–ö–ê–¢ #${duplicateCount}:`);
        console.log(`   –ö–ª—é—á: ${key}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        
        transactions.forEach((tx, i) => {
          const timeDiff = i > 0 ? 
            Math.abs(new Date(tx.created_at).getTime() - new Date(transactions[i-1].created_at).getTime()) / 1000 
            : 0;
          
          console.log(`   ${i + 1}. ID: ${tx.id} | ${tx.created_at} | –†–∞–∑–Ω–∏—Ü–∞: ${timeDiff}s`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${tx.description}`);
          console.log(`      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(tx.metadata)}`);
          console.log(`      TX Hash: ${tx.tx_hash_unique || 'NULL'} | BOC: ${tx.boc || 'NULL'}`);
        });
      }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤ metadata
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
    
    const metadataKeys = new Set<string>();
    const txHashUniqueCount = { withHash: 0, withoutHash: 0 };
    
    referralRewards?.forEach(tx => {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      if (tx.metadata && typeof tx.metadata === 'object') {
        Object.keys(tx.metadata).forEach(key => metadataKeys.add(key));
      }
      
      // –°—á–∏—Ç–∞–µ–º tx_hash_unique
      if (tx.tx_hash_unique) {
        txHashUniqueCount.withHash++;
      } else {
        txHashUniqueCount.withoutHash++;
      }
    });

    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö REFERRAL_REWARD:');
    Array.from(metadataKeys).forEach(key => {
      console.log(`  - ${key}`);
    });
    
    console.log(`\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å tx_hash_unique: ${txHashUniqueCount.withHash}`);
    console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–ï–ó tx_hash_unique: ${txHashUniqueCount.withoutHash}`);

    // 3. –ü—Ä–µ–¥–ª–æ–∂–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –°–¢–†–ê–¢–ï–ì–ò–Ø –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:');
    
    if (txHashUniqueCount.withoutHash > 0) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ REFERRAL_REWARD –ù–ï –∏–º–µ—é—Ç tx_hash_unique!');
      console.log('üìã –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:');
      
      console.log('\n   –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      console.log('   - –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑: user_id + source_user_id + level + timestamp (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –¥–æ –º–∏–Ω—É—Ç—ã)');
      console.log('   - –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç');
      
      console.log('\n   –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –î–æ–±–∞–≤–∏—Ç—å dedup_key –≤ metadata');
      console.log('   - –°–æ–∑–¥–∞—Ç—å dedup_key = `referral_${source_user_id}_${user_id}_${level}_${Math.floor(Date.now()/60000)}`');
      console.log('   - –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–∞–∫–∏–º dedup_key');
      
      console.log('\n   –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª–µ–π');
      console.log('   - –ò—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ REFERRAL_REWARD —Å —Ç–µ–º–∏ –∂–µ user_id, source_user_id, level, amount –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    console.log('\n4Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –î–£–ë–õ–ò–ö–ê–¢–û–í:');
    
    const timeGaps: number[] = [];
    Object.values(duplicateGroups).forEach(transactions => {
      if (transactions.length > 1) {
        for (let i = 1; i < transactions.length; i++) {
          const gap = Math.abs(
            new Date(transactions[i].created_at).getTime() - 
            new Date(transactions[i-1].created_at).getTime()
          ) / 1000;
          timeGaps.push(gap);
        }
      }
    });

    if (timeGaps.length > 0) {
      const avgGap = timeGaps.reduce((a, b) => a + b, 0) / timeGaps.length;
      const minGap = Math.min(...timeGaps);
      const maxGap = Math.max(...timeGaps);
      
      console.log(`–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:`);
      console.log(`  –°—Ä–µ–¥–Ω–µ–µ: ${avgGap.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      console.log(`  –ú–∏–Ω–∏–º—É–º: ${minGap.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      console.log(`  –ú–∞–∫—Å–∏–º—É–º: ${maxGap.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
      
      console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ ${Math.max(300, maxGap * 2).toFixed(0)} —Å–µ–∫—É–Ω–¥`);
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateCount}`);
    console.log(`‚úÖ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–∏–ø–∞ REFERRAL_REWARD`);
    console.log(`‚úÖ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ë–ï–ó tx_hash_unique`);
    console.log(`‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤ TransactionService –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è REFERRAL_REWARD`);
    console.log(`‚úÖ –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–∏–ø–∞ REFERRAL_REWARD`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeReferralDuplication().catch(console.error);