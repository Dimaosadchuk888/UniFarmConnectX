/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π balanceUpdate
 */

import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';
const JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ0ZWxlZ3JhbV9pZCI6NDgsInVzZXJuYW1lIjoiZGVtb191c2VyIiwicmVmX2NvZGUiOiJSRUZfMTc1MDk1MjU3NjYxNF90OTM4dnMiLCJpYXQiOjE3NTE1Njc2OTQsImV4cCI6MTc1MjE3MjQ5NH0.bPym5CivrrxUYvwghEkKvFcNmwqQ3qUWXQ85S-7A-wc';

async function makeRequest(url, options) {
  console.log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${url}`);
  console.log(`üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(options.body, null, 2));
  
  const response = await fetch(url, options);
  
  console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
  
  const responseText = await response.text();
  console.log(`üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (raw):`, responseText);
  
  try {
    const responseJson = JSON.parse(responseText);
    console.log(`üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (parsed):`, JSON.stringify(responseJson, null, 2));
    return responseJson;
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, error.message);
    return { error: 'Invalid JSON', raw: responseText };
  }
}

async function debugBalanceUpdate() {
  console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BALANCE UPDATE ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π...');
    const balanceBefore = await makeRequest(`${BASE_URL}/api/v2/wallet/balance`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –î–û: UNI=${balanceBefore.data?.uniBalance}, TON=${balanceBefore.data?.tonBalance}\n`);

    // 2. –ü–æ–ª—É—á–∏–º –ø–∞–∫–µ—Ç—ã
    console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...');
    const packages = await makeRequest(`${BASE_URL}/api/v2/boost/packages`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    const firstPackage = packages.data?.[0];
    console.log(`üì¶ –ü–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç:`, JSON.stringify(firstPackage, null, 2));
    console.log('');

    // 3. –°–¥–µ–ª–∞–µ–º –ø–æ–∫—É–ø–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log('3. –ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º...');
    const purchaseData = {
      user_id: "48",
      boost_id: "1", 
      payment_method: "wallet"
    };
    
    const purchaseResult = await makeRequest(`${BASE_URL}/api/v2/boost/purchase`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(purchaseData)
    });

    // 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
    console.log('\n4. –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–û–ö–£–ü–ö–ò:');
    console.log(`‚úÖ –£—Å–ø–µ—Ö: ${purchaseResult.success}`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${purchaseResult.data?.message}`);
    console.log(`üîç –ï—Å—Ç—å purchase: ${!!purchaseResult.data?.purchase}`);
    console.log(`üîç –ï—Å—Ç—å balanceUpdate: ${!!purchaseResult.data?.balanceUpdate}`);
    
    if (purchaseResult.data?.balanceUpdate) {
      console.log(`üíé balanceUpdate:`, JSON.stringify(purchaseResult.data.balanceUpdate, null, 2));
    } else {
      console.log(`‚ùå balanceUpdate –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏...');
    const balanceAfter = await makeRequest(`${BASE_URL}/api/v2/wallet/balance`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ü–û–°–õ–ï: UNI=${balanceAfter.data?.uniBalance}, TON=${balanceAfter.data?.tonBalance}`);

    // 6. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (balanceBefore.data && balanceAfter.data) {
      const tonChange = balanceAfter.data.tonBalance - balanceBefore.data.tonBalance;
      const uniChange = balanceAfter.data.uniBalance - balanceBefore.data.uniBalance;
      
      console.log('\n6. –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:');
      console.log(`üíé TON –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${tonChange > 0 ? '+' : ''}${tonChange}`);
      console.log(`üåæ UNI –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${uniChange > 0 ? '+' : ''}${uniChange}`);
      
      if (tonChange === -1) {
        console.log(`‚úÖ TON —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ`);
      } else {
        console.log(`‚ùå TON —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (–æ–∂–∏–¥–∞–ª–æ—Å—å -1, –ø–æ–ª—É—á–µ–Ω–æ ${tonChange})`);
      }
      
      if (uniChange === 10000) {
        console.log(`‚úÖ UNI –±–æ–Ω—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`);
      } else {
        console.log(`‚ùå UNI –±–æ–Ω—É—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–æ–∂–∏–¥–∞–ª–æ—Å—å +10000, –ø–æ–ª—É—á–µ–Ω–æ ${uniChange})`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

debugBalanceUpdate();