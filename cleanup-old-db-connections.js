/**
 * –°–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–π –∑–∞—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–ª–µ–¥—ã Neon, Replit DB –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */

import { promises as fs } from 'fs';
import path from 'path';

class DatabaseCleanup {
  constructor() {
    this.foundFiles = [];
    this.cleanedFiles = [];
    this.deletedFiles = [];
  }

  async scanForOldConnections() {
    console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
    
    const patterns = [
      '@neondatabase',
      'neon.tech',
      'replit.db',
      'PGHOST',
      'PGDATABASE', 
      'PGUSER',
      'PGPASSWORD',
      'ep-rough',
      'ep-lucky',
      'neondb',
      'railway'
    ];

    await this.searchInDirectory('.', patterns);
    return this.foundFiles;
  }

  async searchInDirectory(dir, patterns) {
    try {
      const items = await fs.readdir(dir);
      
      for (const item of items) {
        if (item.startsWith('.') || item === 'node_modules' || item === 'dist') continue;
        
        const fullPath = path.join(dir, item);
        const stats = await fs.stat(fullPath);
        
        if (stats.isDirectory()) {
          await this.searchInDirectory(fullPath, patterns);
        } else if (item.endsWith('.ts') || item.endsWith('.js') || item.endsWith('.md') || item.endsWith('.json')) {
          await this.checkFile(fullPath, patterns);
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }

  async checkFile(filePath, patterns) {
    try {
      const content = await fs.readFile(filePath, 'utf8');
      const foundPatterns = patterns.filter(pattern => content.includes(pattern));
      
      if (foundPatterns.length > 0) {
        this.foundFiles.push({
          file: filePath,
          patterns: foundPatterns,
          size: content.length
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
    }
  }

  async cleanDocumentationFiles() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const docsToClean = [
      'docs/DATABASE_MONITORING.md',
      'DB_CONNECTION_CLEANUP_REPORT.md'
    ];

    for (const docPath of docsToClean) {
      try {
        const exists = await fs.access(docPath).then(() => true).catch(() => false);
        if (exists) {
          await fs.unlink(docPath);
          this.deletedFiles.push(docPath);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${docPath}`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${docPath}`);
      }
    }
  }

  async updateReplicMd() {
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ replit.md...');
    
    try {
      const content = await fs.readFile('replit.md', 'utf8');
      
      // –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
      const cleanedContent = content
        .replace(/@neondatabase/g, 'database')
        .replace(/neon\.tech/g, 'database provider')
        .replace(/ep-rough-boat/g, 'database')
        .replace(/ep-lucky-boat/g, 'database');
      
      await fs.writeFile('replit.md', cleanedContent);
      this.cleanedFiles.push('replit.md');
      console.log('‚úÖ replit.md –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å replit.md');
    }
  }

  async createCleanDbConnection() {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const cleanDbCode = `/**
 * Database connection module - Clean PostgreSQL connection
 * Unified database connection for production deployment
 */
import { Pool } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from "../shared/schema";

// Validate database URL
if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL environment variable is required");
}

// Create connection pool
export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? {
    rejectUnauthorized: false
  } : false,
  max: 10,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Create Drizzle instance
export const db = drizzle(pool, { schema });

// Connection health check
export async function checkDatabaseConnection() {
  try {
    const result = await pool.query('SELECT 1 as test');
    return { connected: true, test: result.rows[0]?.test === 1 };
  } catch (error) {
    return { connected: false, error: error.message };
  }
}

// Graceful shutdown
process.on('SIGTERM', () => {
  pool.end();
});

process.on('SIGINT', () => {
  pool.end();
});
`;

    await fs.writeFile('core/db.ts', cleanDbCode);
    console.log('‚úÖ core/db.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å —á–∏—Å—Ç—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
  }

  async generateCleanupReport() {
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        filesScanned: this.foundFiles.length,
        filesCleaned: this.cleanedFiles.length,
        filesDeleted: this.deletedFiles.length
      },
      foundIssues: this.foundFiles,
      cleanedFiles: this.cleanedFiles,
      deletedFiles: this.deletedFiles,
      status: 'completed'
    };

    await fs.writeFile('FINAL_CLEANUP_REPORT.json', JSON.stringify(report, null, 2));
    console.log('üìä –û—Ç—á–µ—Ç –æ –∑–∞—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FINAL_CLEANUP_REPORT.json');
    
    return report;
  }

  async runFullCleanup() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∑–∞—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    await this.scanForOldConnections();
    
    // 2. –û—á–∏—Å—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    await this.cleanDocumentationFiles();
    
    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ replit.md
    await this.updateReplicMd();
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await this.createCleanDbConnection();
    
    // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    const report = await this.generateCleanupReport();
    
    console.log('\n‚úÖ –ó–ê–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${report.summary.filesScanned}`);
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${report.summary.filesCleaned}`);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${report.summary.filesDeleted}`);
    
    return report;
  }
}

// –ó–∞–ø—É—Å–∫ –∑–∞—á–∏—Å—Ç–∫–∏
const cleanup = new DatabaseCleanup();
cleanup.runFullCleanup().catch(console.error);