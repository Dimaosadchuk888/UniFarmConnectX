const fs = require('fs');
const path = require('path');

function schedulerArchitectureAnalysis() {
  console.log('=== –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í ===\n');
  
  const analysisResults = {
    schedulerFiles: [],
    cronJobs: [],
    intervals: [],
    configurations: [],
    inconsistencies: []
  };
  
  try {
    // 1. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    console.log('üîç 1. –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤...');
    
    const searchDirs = ['modules/scheduler', 'server', 'scripts', 'core'];
    const schedulerPatterns = [
      /scheduler/i,
      /cron/i,
      /interval/i,
      /farming.*schedule/i,
      /boost.*schedule/i
    ];
    
    function findSchedulerFiles(dir) {
      if (!fs.existsSync(dir)) return [];
      
      const files = [];
      const items = fs.readdirSync(dir);
      
      items.forEach(item => {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
          files.push(...findSchedulerFiles(fullPath));
        } else if (item.endsWith('.ts') || item.endsWith('.js')) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
          const content = fs.readFileSync(fullPath, 'utf8');
          const matchesPattern = schedulerPatterns.some(pattern => pattern.test(item)) ||
                               schedulerPatterns.some(pattern => pattern.test(content));
          
          if (matchesPattern) {
            files.push({
              path: fullPath,
              name: item,
              size: stat.size,
              content: content
            });
          }
        }
      });
      
      return files;
    }
    
    searchDirs.forEach(dir => {
      const found = findSchedulerFiles(dir);
      analysisResults.schedulerFiles.push(...found);
    });
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤: ${analysisResults.schedulerFiles.length}`);
    analysisResults.schedulerFiles.forEach(file => {
      console.log(`   ${file.path} (${file.size} –±–∞–π—Ç)`);
    });
    
    // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    console.log('\nüîç 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    
    const intervalPatterns = [
      /setInterval\s*\(\s*[^,]+,\s*(\d+)/g,
      /setTimeout\s*\(\s*[^,]+,\s*(\d+)/g,
      /cron\.schedule\s*\(\s*['"`]([^'"`]+)['"`]/g,
      /every\s*\(\s*(\d+)/g,
      /'(\*\/\d+\s+\*\s+\*\s+\*\s+\*)'/g,
      /FARMING_INTERVAL[^=]*=\s*(\d+)/g,
      /TON_BOOST_INTERVAL[^=]*=\s*(\d+)/g
    ];
    
    analysisResults.schedulerFiles.forEach(file => {
      intervalPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(file.content)) !== null) {
          const intervalValue = match[1];
          let intervalMs;
          
          // –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
          if (/^\d+$/.test(intervalValue)) {
            intervalMs = parseInt(intervalValue);
          } else if (intervalValue.includes('*/')) {
            // Cron expression
            const minutes = intervalValue.split(' ')[0].replace('*/', '');
            intervalMs = parseInt(minutes) * 60 * 1000;
          }
          
          analysisResults.intervals.push({
            file: file.name,
            pattern: pattern.source,
            value: intervalValue,
            intervalMs: intervalMs,
            intervalMinutes: intervalMs ? (intervalMs / (1000 * 60)).toFixed(2) : 'unknown',
            line: file.content.split('\n').findIndex(line => line.includes(match[0])) + 1
          });
        }
      });
    });
    
    console.log(`‚è∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:`);
    analysisResults.intervals.forEach(interval => {
      console.log(`   ${interval.file}:${interval.line} - ${interval.intervalMinutes} –º–∏–Ω—É—Ç (${interval.value})`);
    });
    
    // 3. –ü–æ–∏—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    console.log('\nüîç 3. –ü–æ–∏—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤...');
    
    const farmingSchedulers = [];
    const tonSchedulers = [];
    const referralSchedulers = [];
    
    analysisResults.schedulerFiles.forEach(file => {
      if (/farming/i.test(file.name) || /farming/i.test(file.content)) {
        farmingSchedulers.push(file.name);
      }
      if (/ton.*boost|boost.*ton/i.test(file.name) || /ton.*boost|boost.*ton/i.test(file.content)) {
        tonSchedulers.push(file.name);
      }
      if (/referral/i.test(file.name) || /referral/i.test(file.content)) {
        referralSchedulers.push(file.name);
      }
    });
    
    console.log(`üåæ UNI Farming –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: ${farmingSchedulers.join(', ') || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    console.log(`üíé TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: ${tonSchedulers.join(', ') || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    console.log(`üîó Referral –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: ${referralSchedulers.join(', ') || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    
    // 4. –ê–Ω–∞–ª–∏–∑ server/index.ts –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    console.log('\nüîç 4. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ server/index.ts...');
    
    const serverIndexPath = 'server/index.ts';
    if (fs.existsSync(serverIndexPath)) {
      const serverContent = fs.readFileSync(serverIndexPath, 'utf8');
      
      const importPatterns = [
        /import.*scheduler.*from/gi,
        /require.*scheduler/gi,
        /\.start\(\)/gi,
        /setInterval/gi,
        /cron\.schedule/gi
      ];
      
      importPatterns.forEach(pattern => {
        const matches = serverContent.match(pattern);
        if (matches) {
          console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${pattern.source} - ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
          matches.forEach(match => {
            const lineNumber = serverContent.substring(0, serverContent.indexOf(match)).split('\n').length;
            console.log(`     –°—Ç—Ä–æ–∫–∞ ${lineNumber}: ${match}`);
          });
        }
      });
    } else {
      console.log('   ‚ùå server/index.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // 5. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    console.log('\nüîç 5. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    
    const uniqueIntervals = [...new Set(analysisResults.intervals.map(i => i.intervalMinutes))];
    const intervalConflicts = {};
    
    analysisResults.intervals.forEach(interval => {
      const key = interval.intervalMinutes;
      if (!intervalConflicts[key]) {
        intervalConflicts[key] = [];
      }
      intervalConflicts[key].push(interval.file);
    });
    
    Object.entries(intervalConflicts).forEach(([interval, files]) => {
      if (files.length > 1) {
        analysisResults.inconsistencies.push({
          type: 'MULTIPLE_SCHEDULERS_SAME_INTERVAL',
          interval: interval,
          files: files,
          severity: 'HIGH'
        });
        console.log(`   ‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç: ${interval} –º–∏–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${files.length} —Ñ–∞–π–ª–∞—Ö: ${files.join(', ')}`);
      }
    });
    
    // 6. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω 2-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    console.log('\nüîç 6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω 2-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...');
    
    const potentialCauses = [];
    
    // –ü–æ–∏—Å–∫ –∫–æ–¥–∞ —Å 2-–º–∏–Ω—É—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    analysisResults.schedulerFiles.forEach(file => {
      const twoMinutePatterns = [
        /120000/g, // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        /2\s*\*\s*60\s*\*\s*1000/g, // 2 * 60 * 1000
        /'?\*\/2\s+\*\s+\*\s+\*\s+\*'?/g // cron –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
      ];
      
      twoMinutePatterns.forEach(pattern => {
        const matches = file.content.match(pattern);
        if (matches) {
          potentialCauses.push({
            file: file.name,
            pattern: pattern.source,
            matches: matches.length,
            type: '2_MINUTE_INTERVAL'
          });
        }
      });
    });
    
    // –ü–æ–∏—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    analysisResults.schedulerFiles.forEach(file => {
      const startCalls = (file.content.match(/\.start\(\)/g) || []).length;
      const scheduleCalls = (file.content.match(/schedule\(/g) || []).length;
      const intervalCalls = (file.content.match(/setInterval/g) || []).length;
      
      if (startCalls > 1 || scheduleCalls > 1 || intervalCalls > 1) {
        potentialCauses.push({
          file: file.name,
          type: 'MULTIPLE_STARTS',
          startCalls,
          scheduleCalls,
          intervalCalls
        });
      }
    });
    
    console.log(`üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã 2-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:`);
    if (potentialCauses.length === 0) {
      console.log('   ‚úÖ –ü—Ä—è–º—ã—Ö –ø—Ä–∏—á–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤');
      console.log('   ü§î –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('     - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
      console.log('     - –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏');
      console.log('     - –†—É—á–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤');
      console.log('     - –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É node-cron –∏ setInterval');
    } else {
      potentialCauses.forEach(cause => {
        console.log(`   ‚ö†Ô∏è ${cause.file}: ${cause.type}`);
        if (cause.matches) console.log(`     –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${cause.matches}`);
        if (cause.startCalls) console.log(`     –í—ã–∑–æ–≤–æ–≤ start(): ${cause.startCalls}`);
        if (cause.scheduleCalls) console.log(`     –í—ã–∑–æ–≤–æ–≤ schedule(): ${cause.scheduleCalls}`);
        if (cause.intervalCalls) console.log(`     –í—ã–∑–æ–≤–æ–≤ setInterval(): ${cause.intervalCalls}`);
      });
    }
    
    // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.log('\nüìã 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é...');
    
    console.log('üîß –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:');
    
    if (analysisResults.intervals.length === 0) {
      console.log('   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤');
    }
    
    if (farmingSchedulers.length > 1) {
      console.log(`   ‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ UNI –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: ${farmingSchedulers.join(', ')}`);
    }
    
    if (tonSchedulers.length > 1) {
      console.log(`   ‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ TON –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: ${tonSchedulers.join(', ')}`);
    }
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ');
    console.log('   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤');
    console.log('   3. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—É—Å–∫–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤');
    console.log('   5. –í–Ω–µ–¥—Ä–∏—Ç—å mutex/lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤');
    
    console.log('\n=== –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–í –ó–ê–í–ï–†–®–ï–ù ===');
    
    return analysisResults;
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:', error);
    return null;
  }
}

schedulerArchitectureAnalysis();