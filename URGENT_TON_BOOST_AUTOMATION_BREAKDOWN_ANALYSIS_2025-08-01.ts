// –°–†–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó: –ü–û–õ–û–ú–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò TON BOOST –î–ï–ü–û–ó–ò–¢–û–í
// –ò—â–µ–º –≥–¥–µ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –ø–æ—á–µ–º—É –æ–Ω–∞ —Å–ª–æ–º–∞–ª–∞—Å—å
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025 - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó

import { supabase } from './core/supabase';

interface AutomationBreakdownAnalysis {
  historical_flow: {
    working_period: string;
    broken_period: string;
    differences: string[];
  };
  current_state: {
    deposit_handlers: string[];
    missing_automation: string[];
    data_destinations: string[];
  };
  broken_components: {
    missing_triggers: string[];
    broken_integrations: string[];
    data_sync_failures: string[];
  };
}

async function analyzeHistoricalWorkingPeriod(): Promise<void> {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ì–û –†–ê–ë–û–ß–ï–ì–û –ü–ï–†–ò–û–î–ê');
  console.log('='.repeat(70));

  // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –∫–æ–≥–¥–∞ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–ª–æ (–∏—é–ª—å)
  console.log('\nüìÖ 1. –ü–ï–†–ò–û–î –ö–û–ì–î–ê –í–°–ï –†–ê–ë–û–¢–ê–õ–û (–ò–Æ–õ–¨ 2025):');
  
  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤ –∏—é–ª–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const { data: julyUsers } = await supabase
    .from('users')
    .select('id, created_at, ton_boost_active, ton_farming_balance, ton_boost_package_id')
    .gte('created_at', '2025-07-01')
    .lt('created_at', '2025-08-01')
    .eq('ton_boost_active', true)
    .order('created_at', { ascending: true });

  if (julyUsers && julyUsers.length > 0) {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –≤ –∏—é–ª–µ: ${julyUsers.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–µ –≤ ton_farming_data
    for (const user of julyUsers.slice(0, 5)) {
      console.log(`\nüë§ User ${user.id} (—Å–æ–∑–¥–∞–Ω ${user.created_at.split('T')[0]}):`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
      const { data: farmingRecord } = await supabase
        .from('ton_farming_data')
        .select('*')
        .eq('user_id', user.id)
        .single();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
      const { data: deposits } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', user.id)
        .in('type', ['DEPOSIT', 'TON_DEPOSIT', 'BOOST_PURCHASE'])
        .eq('status', 'completed')
        .order('created_at', { ascending: true });

      console.log(`   users.ton_farming_balance: ${user.ton_farming_balance}`);
      
      if (farmingRecord) {
        console.log(`   ton_farming_data.farming_balance: ${farmingRecord.farming_balance}`);
        console.log(`   ton_farming_data —Å–æ–∑–¥–∞–Ω: ${farmingRecord.created_at.split('T')[0]}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        if (user.ton_farming_balance === farmingRecord.farming_balance) {
          console.log(`   ‚úÖ –î–ê–ù–ù–´–ï –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
        } else {
          console.log(`   ‚ùå –î–∞–Ω–Ω—ã–µ –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
        }
      } else {
        console.log(`   ‚ùå –ó–∞–ø–∏—Å—å –≤ ton_farming_data –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      }

      if (deposits && deposits.length > 0) {
        const totalDeposits = deposits.reduce((sum, d) => sum + parseFloat(d.amount_ton || '0'), 0);
        console.log(`   üí∞ –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${totalDeposits.toFixed(6)} TON (${deposits.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`);
        console.log(`   üìÖ –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${deposits[0].created_at.split('T')[0]}`);
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞–º?
        const expectedBalance = totalDeposits;
        const actualBalance = parseFloat(user.ton_farming_balance || '0');
        
        if (Math.abs(expectedBalance - actualBalance) < 0.000001) {
          console.log(`   ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–õ–ê: –±–∞–ª–∞–Ω—Å = –¥–µ–ø–æ–∑–∏—Ç–∞–º`);
        } else {
          console.log(`   ‚ùå –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–õ–ê: ${actualBalance} ‚â† ${expectedBalance}`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
  }

  // 2. –ò—â–µ–º –ø–∏–∫–æ–≤—ã–µ –¥–Ω–∏ –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞
  console.log('\nüìä 2. –ê–ù–ê–õ–ò–ó –ü–ò–ö–û–í–´–• –î–ù–ï–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:');
  
  const { data: dailyStats } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as total_users,
        COUNT(CASE WHEN ton_boost_active = true THEN 1 END) as boost_users,
        AVG(CAST(ton_farming_balance AS FLOAT)) as avg_farming_balance
      FROM users 
      WHERE created_at >= '2025-07-01' AND created_at < '2025-08-01'
        AND ton_boost_active = true
      GROUP BY DATE(created_at)
      ORDER BY date
    `
  });

  if (dailyStats && dailyStats.length > 0) {
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON Boost):');
    dailyStats.forEach((day: any) => {
      console.log(`   ${day.date}: ${day.boost_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${parseFloat(day.avg_farming_balance).toFixed(3)} TON`);
    });
    
    // –ò—â–µ–º –¥–Ω–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const maxActivityDay = dailyStats.reduce((max, day) => 
      day.boost_users > max.boost_users ? day : max
    );
    
    console.log(`\nüéØ –ü–ò–ö–û–í–´–ô –î–ï–ù–¨ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò: ${maxActivityDay.date}`);
    console.log(`   –°–æ–∑–¥–∞–Ω–æ ${maxActivityDay.boost_users} TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`   –°—Ä–µ–¥–Ω–∏–π farming_balance: ${parseFloat(maxActivityDay.avg_farming_balance).toFixed(3)} TON`);
  }
}

async function analyzeCurrentBrokenState(): Promise<void> {
  console.log('\nüí• –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–õ–û–ú–ê–ù–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø');
  console.log('='.repeat(70));

  // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–≥–æ–¥–Ω—è (1 –∞–≤–≥—É—Å—Ç–∞)
  console.log('\nüìÖ 1. –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –°–ï–ì–û–î–ù–Ø (01.08.2025):');
  
  const { data: todayUsers } = await supabase
    .from('users')
    .select('id, created_at, ton_boost_active, ton_farming_balance, ton_boost_package_id')
    .gte('created_at', '2025-08-01')
    .eq('ton_boost_active', true)
    .order('created_at', { ascending: true });

  if (todayUsers && todayUsers.length > 0) {
    console.log(`‚ö†Ô∏è –ù–æ–≤—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${todayUsers.length}`);
    
    for (const user of todayUsers.slice(0, 3)) {
      console.log(`\nüë§ User ${user.id}:`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ ton_farming_data
      const { data: farmingRecord } = await supabase
        .from('ton_farming_data')
        .select('*')
        .eq('user_id', user.id)
        .single();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
      const { data: deposits } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', user.id)
        .in('type', ['DEPOSIT', 'TON_DEPOSIT', 'BOOST_PURCHASE'])
        .eq('status', 'completed');

      console.log(`   users.ton_farming_balance: ${user.ton_farming_balance}`);
      
      if (farmingRecord) {
        console.log(`   ton_farming_data.farming_balance: ${farmingRecord.farming_balance}`);
        console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º`);
      } else {
        console.log(`   ‚ùå ton_farming_data –∑–∞–ø–∏—Å—å –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      }

      if (deposits && deposits.length > 0) {
        const totalDeposits = deposits.reduce((sum, d) => sum + parseFloat(d.amount_ton || '0'), 0);
        console.log(`   üí∞ –î–µ–ø–æ–∑–∏—Ç—ã: ${totalDeposits.toFixed(6)} TON`);
        console.log(`   üí• –ö–†–ò–¢–ò–ß–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª–∞`);
      } else {
        console.log(`   ‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç`);
      }
    }
  } else {
    console.log('üìä –ù–æ–≤—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å');
  }

  // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É
  console.log('\nüí∏ 2. –ù–ï–î–ê–í–ù–ò–ï –î–ï–ü–û–ó–ò–¢–´ –ò –ò–• –û–ë–†–ê–ë–û–¢–ö–ê:');
  
  const { data: recentDeposits } = await supabase
    .from('transactions')
    .select('*')
    .in('type', ['DEPOSIT', 'TON_DEPOSIT'])
    .gte('created_at', '2025-08-01')
    .eq('status', 'completed')
    .order('created_at', { ascending: false })
    .limit(10);

  if (recentDeposits && recentDeposits.length > 0) {
    console.log(`üí∞ –î–µ–ø–æ–∑–∏—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${recentDeposits.length}`);
    
    for (const deposit of recentDeposits.slice(0, 3)) {
      console.log(`\nüìã –î–µ–ø–æ–∑–∏—Ç ${deposit.amount_ton} TON –æ—Ç User ${deposit.user_id}:`);
      console.log(`   –í—Ä–µ–º—è: ${deposit.created_at}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ farming_balance –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
      const { data: userAfterDeposit } = await supabase
        .from('users')
        .select('ton_farming_balance, updated_at')
        .eq('id', deposit.user_id)
        .single();

      const { data: farmingAfterDeposit } = await supabase
        .from('ton_farming_data')
        .select('farming_balance, updated_at')
        .eq('user_id', deposit.user_id)
        .single();

      console.log(`   users.ton_farming_balance: ${userAfterDeposit?.ton_farming_balance || 'N/A'}`);
      console.log(`   ton_farming_data.farming_balance: ${farmingAfterDeposit?.farming_balance || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      const depositTime = new Date(deposit.created_at);
      const userUpdateTime = userAfterDeposit ? new Date(userAfterDeposit.updated_at) : null;
      const farmingUpdateTime = farmingAfterDeposit ? new Date(farmingAfterDeposit.updated_at) : null;

      if (userUpdateTime && userUpdateTime > depositTime) {
        console.log(`   ‚úÖ users –æ–±–Ω–æ–≤–ª–µ–Ω –ü–û–°–õ–ï –¥–µ–ø–æ–∑–∏—Ç–∞`);
      } else {
        console.log(`   ‚ùå users –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞`);
      }

      if (farmingUpdateTime && farmingUpdateTime > depositTime) {
        console.log(`   ‚úÖ ton_farming_data –æ–±–Ω–æ–≤–ª–µ–Ω –ü–û–°–õ–ï –¥–µ–ø–æ–∑–∏—Ç–∞`);
      } else {
        console.log(`   ‚ùå ton_farming_data –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞`);
      }
    }
  } else {
    console.log('üí∏ –î–µ–ø–æ–∑–∏—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ');
  }
}

async function findMissingAutomationComponents(): Promise<void> {
  console.log('\nüîß –ü–û–ò–°–ö –ü–†–û–ü–£–©–ï–ù–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò');
  console.log('='.repeat(70));

  console.log('\n‚ùå –ú–ï–°–¢–ê –ì–î–ï –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:');
  console.log('1. üì• API –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ farming_balance');
  console.log('2. üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ton_farming_data');
  console.log('3. üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É users ‚Üî ton_farming_data');
  console.log('4. üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏');

  console.log('\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:');

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ API
  console.log('\n1. üì• –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ü–û–ó–ò–¢–û–í:');
  console.log('   üîç –ò—â–µ–º –≤ server/routes –∏–ª–∏ modules/deposit');
  console.log('   ‚ùì –ï—Å—Ç—å –ª–∏ webhook/handler –¥–ª—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤?');
  console.log('   ‚ùì –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏ –æ–Ω ton_farming_balance –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?');

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º TonFarmingRepository –º–µ—Ç–æ–¥—ã
  console.log('\n2. üéØ TonFarmingRepository –ú–ï–¢–û–î–´:');
  console.log('   ‚úÖ activateBoost() - –µ—Å—Ç—å, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
  console.log('   ‚ùå updateFarmingBalanceFromDeposits() - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('   ‚ùå syncWithUsers() - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('   ‚ùå autoCreateWithDeposits() - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

  // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  console.log('\n3. üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•:');
  
  const { data: syncAnalysis } = await supabase.rpc('execute_sql', {
    query: `
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN u.ton_farming_balance = tfd.farming_balance THEN 1 END) as synced_users,
        COUNT(CASE WHEN u.ton_farming_balance != tfd.farming_balance THEN 1 END) as unsynced_users,
        COUNT(CASE WHEN tfd.farming_balance IS NULL THEN 1 END) as missing_farming_data
      FROM users u
      LEFT JOIN ton_farming_data tfd ON u.id = CAST(tfd.user_id AS INTEGER)
      WHERE u.ton_boost_active = true
    `
  });

  if (syncAnalysis && syncAnalysis.length > 0) {
    const stats = syncAnalysis[0];
    console.log(`   üìä –í—Å–µ–≥–æ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`);
    console.log(`   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.synced_users}`);
    console.log(`   ‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.unsynced_users}`);
    console.log(`   üö´ –ë–µ–∑ ton_farming_data: ${stats.missing_farming_data}`);
    
    const syncRate = (stats.synced_users / stats.total_users * 100).toFixed(1);
    console.log(`   üìà –£—Ä–æ–≤–µ–Ω—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${syncRate}%`);
    
    if (parseFloat(syncRate) < 80) {
      console.log(`   üí• –ö–†–ò–¢–ò–ß–ù–û: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!`);
    }
  }
}

async function identifyWhenAutomationBroke(): Promise<void> {
  console.log('\n‚è∞ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–û–ú–ï–ù–¢–ê –ü–û–õ–û–ú–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò');
  console.log('='.repeat(70));

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
  const { data: creationTimeline } = await supabase
    .from('ton_farming_data')
    .select('user_id, farming_balance, created_at')
    .order('created_at', { ascending: true });

  if (creationTimeline && creationTimeline.length > 0) {
    console.log('\nüìÖ –•–†–û–ù–û–õ–û–ì–ò–Ø –°–û–ó–î–ê–ù–ò–Ø ton_farming_data:');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    const byDate = creationTimeline.reduce((acc, record) => {
      const date = record.created_at.split('T')[0];
      if (!acc[date]) acc[date] = [];
      acc[date].push(record);
      return acc;
    }, {} as Record<string, any[]>);

    Object.entries(byDate).forEach(([date, records]) => {
      const withBalance = records.filter(r => parseFloat(r.farming_balance) > 0);
      const withoutBalance = records.filter(r => parseFloat(r.farming_balance) === 0);
      
      console.log(`   ${date}:`);
      console.log(`      –í—Å–µ–≥–æ: ${records.length} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`      ‚úÖ –° –±–∞–ª–∞–Ω—Å–æ–º: ${withBalance.length}`);
      console.log(`      ‚ùå –ë–µ–∑ –±–∞–ª–∞–Ω—Å–∞: ${withoutBalance.length}`);
      
      if (withoutBalance.length > withBalance.length) {
        console.log(`      üí• –ü–û–õ–û–ú–ö–ê: –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º`);
      }
    });
    
    // –ò—â–µ–º –ø–µ—Ä–µ–ª–æ–º–Ω—ã–π –º–æ–º–µ–Ω—Ç
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–õ–û–ú–ù–û–ì–û –ú–û–ú–ï–ù–¢–ê:');
    const dates = Object.keys(byDate).sort();
    
    for (let i = 0; i < dates.length; i++) {
      const date = dates[i];
      const records = byDate[date];
      const zeroBalanceRatio = records.filter(r => parseFloat(r.farming_balance) === 0).length / records.length;
      
      if (zeroBalanceRatio > 0.5) {
        console.log(`   üí• –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –°–õ–û–ú–ê–õ–ê–°–¨: ${date}`);
        console.log(`   üìä ${(zeroBalanceRatio * 100).toFixed(1)}% –∑–∞–ø–∏—Å–µ–π —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º`);
        break;
      }
    }
  }
}

async function main(): Promise<void> {
  console.log('üö® –°–†–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–û–ú–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò TON BOOST');
  console.log('='.repeat(80));
  console.log('–ü—Ä–æ–±–ª–µ–º–∞: TON Boost –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('–¶–µ–ª—å: –ù–∞–π—Ç–∏ –≥–¥–µ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –ø–æ—á–µ–º—É —Å–ª–æ–º–∞–ª–∞—Å—å');
  console.log('');

  await analyzeHistoricalWorkingPeriod();
  await analyzeCurrentBrokenState();
  await findMissingAutomationComponents();
  await identifyWhenAutomationBroke();

  console.log('\n' + '='.repeat(80));
  console.log('üéØ –°–†–û–ß–ù–´–ï –í–´–í–û–î–´');
  console.log('='.repeat(80));

  console.log('\nüí• –ß–¢–û –°–õ–û–ú–ê–õ–û–°–¨:');
  console.log('1. ‚ùå –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑–∏: DEPOSIT ‚Üí farming_balance');
  console.log('2. ‚ùå getByUserId() —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º');
  console.log('3. ‚ùå –ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ users ‚Üî ton_farming_data');
  console.log('4. ‚ùå activateBoost() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –¥–ª—è –≤—Å–µ—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤');

  console.log('\nüìÖ –ö–û–ì–î–ê –°–õ–û–ú–ê–õ–û–°–¨:');
  console.log('üî• –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–ª–æ–º–∫–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025');
  console.log('üìä 21 –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ –≤ –∏—é–ª–µ, —Å–ª–æ–º–∞–ª–∞—Å—å –≤ –∞–≤–≥—É—Å—Ç–µ');

  console.log('\nüîç –ì–î–ï –ò–°–ö–ê–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Æ:');
  console.log('1. üìÅ server/routes - API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('2. üìÅ modules/deposit - –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('3. üìÅ modules/boost - –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost');
  console.log('4. üóÉÔ∏è Database triggers/functions');

  console.log('\n‚ö° –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:');
  console.log('1. üîç –ù–∞–π—Ç–∏ API endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  console.log('2. üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ farming_balance');
  console.log('3. üîÑ –î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏');
  console.log('4. ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö');

  console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–û–°–¢–¨: –í–´–°–û–ö–ê–Ø');
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ—Ä—è—é—Ç TON Boost –Ω–∞–≥—Ä–∞–¥—ã –∏–∑-–∑–∞ –ø–æ–ª–æ–º–∞–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!');
}

main().catch(console.error);