/**
 * –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –ü–†–û–ë–õ–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–û–í
 * –ù–∞—Ö–æ–¥–∏–º –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –∫—Ç–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª –æ—Ç —Å—Ç–∞—Ä—ã—Ö –±–∞–≥–æ–≤
 */

import { supabase } from './core/supabaseClient';

async function analyzeHistoricalTonDepositProblem() {
  console.log('üìä –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ô –ü–†–û–ë–õ–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('–ò—â–µ–º –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∫—Ç–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª');
  console.log('='.repeat(80));

  try {
    // 1. –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON –î–ï–ü–û–ó–ò–¢–ê–ú–ò
    console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° TON –î–ï–ü–û–ó–ò–¢–ê–ú–ò:');
    
    const { data: allUsers, error: usersError } = await supabase
      .from('transactions')
      .select('user_id')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'completed');

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const uniqueUsers = [...new Set(allUsers.map(t => t.user_id))];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${uniqueUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏`);

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú:');
    
    const problematicUsers = [];
    
    for (const userId of uniqueUsers.slice(0, 10)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 10
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('balance_ton')
        .eq('id', userId)
        .single();

      if (userError) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`);
        continue;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      const { data: deposits, error: depositsError } = await supabase
        .from('transactions')
        .select('amount_ton, created_at')
        .eq('user_id', userId)
        .eq('type', 'TON_DEPOSIT')
        .eq('status', 'completed')
        .order('created_at', { ascending: true });

      if (depositsError) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
        continue;
      }

      const totalDeposits = deposits.reduce((sum, d) => sum + d.amount_ton, 0);
      const currentBalance = user.balance_ton;
      const difference = currentBalance - totalDeposits;

      if (Math.abs(difference) > 0.1) { // –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.1 TON
        problematicUsers.push({
          userId,
          currentBalance,
          totalDeposits,
          difference,
          depositsCount: deposits.length,
          firstDeposit: deposits[0]?.created_at,
          lastDeposit: deposits[deposits.length - 1]?.created_at
        });

        console.log(`üö® User ${userId}: ${difference.toFixed(6)} TON —Ä–∞–∑–Ω–∏—Ü–∞`);
        console.log(`   –ë–∞–ª–∞–Ω—Å: ${currentBalance} | –î–µ–ø–æ–∑–∏—Ç—ã: ${totalDeposits} | –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
      } else {
        console.log(`‚úÖ User ${userId}: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç (${difference.toFixed(6)} TON)`);
      }
    }

    if (problematicUsers.length > 0) {
      console.log(`\nüö® –ù–ê–ô–î–ï–ù–û ${problematicUsers.length} –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò:`);
      
      problematicUsers.forEach((user, index) => {
        console.log(`\n${index + 1}. User ${user.userId}:`);
        console.log(`   –ü–æ—Ç–µ—Ä—è: ${user.difference.toFixed(6)} TON`);
        console.log(`   –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${user.depositsCount}`);
        console.log(`   –ü–µ—Ä–∏–æ–¥: ${user.firstDeposit} ‚Üí ${user.lastDeposit}`);
      });
    }

    // 3. –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò - –ö–û–ì–î–ê –ü–†–û–ë–õ–ï–ú–ê –ë–´–õ–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò - –ü–û–ò–°–ö –ú–û–ú–ï–ù–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    
    const { data: recentDeposits, error: recentError } = await supabase
      .from('transactions')
      .select('id, user_id, amount_ton, created_at')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'completed')
      .order('created_at', { ascending: false })
      .limit(20);

    if (recentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', recentError);
    } else {
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      
      for (const deposit of recentDeposits) {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('balance_ton')
          .eq('id', deposit.user_id)
          .single();

        if (userError) continue;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: allUserDeposits, error: allUserDepositsError } = await supabase
          .from('transactions')
          .select('amount_ton')
          .eq('user_id', deposit.user_id)
          .eq('type', 'TON_DEPOSIT')
          .eq('status', 'completed');

        if (allUserDepositsError) continue;

        const expectedBalance = allUserDeposits.reduce((sum, d) => sum + d.amount_ton, 0);
        const actualBalance = user.balance_ton;
        const isWorking = Math.abs(actualBalance - expectedBalance) < 1; // –¢–µ—Ä–ø–∏–º–æ—Å—Ç—å 1 TON

        console.log(`${isWorking ? '‚úÖ' : '‚ùå'} –î–µ–ø–æ–∑–∏—Ç ${deposit.id} (${deposit.created_at}): User ${deposit.user_id} - ${deposit.amount_ton} TON`);
        console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π/–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${expectedBalance.toFixed(2)}/${actualBalance.toFixed(2)}`);
      }
    }

    // 4. –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –†–ï–®–ï–ù–ò–Ø
    console.log('\n' + '='.repeat(80));
    console.log('4Ô∏è‚É£ –ü–õ–ê–ù –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´:');
    
    console.log('\nüîß –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –°–∏—Å—Ç–µ–º–∞ –°–ï–ô–ß–ê–° —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ç–µ—Å—Ç–∞–º–∏)');
    console.log('2. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –¥–µ–ø–æ–∑–∏—Ç–∞—Ö');
    console.log('3. –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
    
    console.log('\nüìã –≠–¢–ê–ü–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∞—É–¥–∏—Ç–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏');
    console.log('2. –í—ã—á–∏—Å–ª–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ');
    console.log('3. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    console.log('4. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º');
    
    if (problematicUsers.length > 0) {
      const totalLoss = problematicUsers.reduce((sum, user) => sum + Math.abs(user.difference), 0);
      console.log(`\nüí∞ –û–ë–©–ê–Ø –°–£–ú–ú–ê –ü–û–¢–ï–†–¨: ${totalLoss.toFixed(6)} TON`);
      console.log(`üìä –ó–ê–¢–†–û–ù–£–¢–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${problematicUsers.length}`);
      
      console.log('\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –î–õ–Ø –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò:');
      const sortedUsers = problematicUsers.sort((a, b) => Math.abs(b.difference) - Math.abs(a.difference));
      sortedUsers.slice(0, 5).forEach((user, index) => {
        console.log(`${index + 1}. User ${user.userId}: ${Math.abs(user.difference).toFixed(6)} TON`);
      });
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeHistoricalTonDepositProblem().then(() => {
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});