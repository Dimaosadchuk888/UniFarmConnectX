// –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê TON BOOST –ü–ê–ö–ï–¢–û–í –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô 304-307
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –∏—Ö –ø–∞–∫–µ—Ç—ã –∏ –Ω–∞—á–∞–ª–∏ –ª–∏ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
// –î–∞—Ç–∞: 01 –∞–≤–≥—É—Å—Ç–∞ 2025

import { supabase } from './core/supabase';
import { logger } from './core/logger';

interface TonBoostStatus {
  userId: number;
  username: string;
  tonBoostActive: boolean;
  tonBalance: string;
  uniBalance: string;
  totalTonDeposits: number;
  totalTonSpent: number;
  expectedTonBalance: number;
  actualTonBalance: number;
  balanceDiscrepancy: number;
  boostPackages: any[];
  recentTransactions: any[];
  farmingStatus: {
    isActive: boolean;
    depositAmount: string;
    boostMultiplier: number;
  };
}

async function checkUserTonBoostStatus(userId: number): Promise<TonBoostStatus | null> {
  try {
    // 1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (userError || !user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (txError) {
      console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${userId}:`, txError.message);
    }

    // 3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å TON Boost –ø–∞–∫–µ—Ç—ã (—Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
    let boostPackages = [];
    try {
      const { data: packages, error: boostError } = await supabase
        .from('ton_boost_purchases')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (!boostError && packages) {
        boostPackages = packages;
      }
    } catch (error) {
      console.log(`–¢–∞–±–ª–∏—Ü–∞ ton_boost_purchases –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }

    // 4. –ê–Ω–∞–ª–∏–∑ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const allTransactions = transactions || [];
    const tonDeposits = allTransactions.filter(tx => 
      tx.type === 'TON_DEPOSIT' || (tx.type === 'DEPOSIT' && tx.amount_ton > 0)
    );
    const tonWithdrawals = allTransactions.filter(tx => tx.type === 'TON_WITHDRAWAL');
    const tonBoostPurchases = allTransactions.filter(tx => 
      tx.type === 'TON_BOOST_PURCHASE' || tx.type === 'BOOST_PAYMENT'
    );

    const totalTonDeposits = tonDeposits.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
    const totalTonWithdrawals = tonWithdrawals.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
    const totalTonSpent = tonBoostPurchases.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);

    const expectedTonBalance = totalTonDeposits - totalTonWithdrawals - totalTonSpent;
    const actualTonBalance = parseFloat(user.balance_ton || '0');
    const balanceDiscrepancy = Math.abs(actualTonBalance - expectedTonBalance);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞ (UNI —Ñ–∞—Ä–º–∏–Ω–≥)
    const farmingDeposits = allTransactions.filter(tx => tx.type === 'FARMING_DEPOSIT');
    const totalFarmingDeposit = farmingDeposits.reduce((sum, tx) => sum + parseFloat(tx.amount_uni || '0'), 0);
    const boostMultiplier = user.ton_boost_active ? (user.ton_boost_multiplier || 2) : 1;

    return {
      userId: user.id,
      username: user.username || 'N/A',
      tonBoostActive: user.ton_boost_active || false,
      tonBalance: user.balance_ton || '0',
      uniBalance: user.balance_uni || '0',
      totalTonDeposits,
      totalTonSpent,
      expectedTonBalance,
      actualTonBalance,
      balanceDiscrepancy,
      boostPackages,
      recentTransactions: allTransactions.slice(0, 10),
      farmingStatus: {
        isActive: user.uni_farming_active || false,
        depositAmount: totalFarmingDeposit.toString(),
        boostMultiplier
      }
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    return null;
  }
}

async function displayTonBoostAnalysis(status: TonBoostStatus): Promise<void> {
  console.log(`\nüöÄ TON BOOST –ê–ù–ê–õ–ò–ó - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${status.userId} (@${status.username})`);
  console.log('‚ïê'.repeat(70));

  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log(`üìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:`);
  console.log(`   TON Boost –∞–∫—Ç–∏–≤–µ–Ω: ${status.tonBoostActive ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`   UNI —Ñ–∞—Ä–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: ${status.farmingStatus.isActive ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`   Boost –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${status.farmingStatus.boostMultiplier}x`);

  // –ë–∞–ª–∞–Ω—Å—ã
  console.log(`\nüí∞ –ë–ê–õ–ê–ù–°–´:`);
  console.log(`   TON –±–∞–ª–∞–Ω—Å: ${status.tonBalance} TON`);
  console.log(`   UNI –±–∞–ª–∞–Ω—Å: ${status.uniBalance} UNI`);
  console.log(`   UNI –≤ —Ñ–∞—Ä–º–∏–Ω–≥–µ: ${status.farmingStatus.depositAmount} UNI`);

  // TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑
  console.log(`\nüíé TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:`);
  console.log(`   –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${status.totalTonDeposits} TON`);
  console.log(`   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ Boost: ${status.totalTonSpent} TON`);
  console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: ${status.expectedTonBalance} TON`);
  console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: ${status.actualTonBalance} TON`);
  console.log(`   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${status.balanceDiscrepancy} TON ${status.balanceDiscrepancy > 0.001 ? '‚ö†Ô∏è' : '‚úÖ'}`);

  // TON Boost –ø–∞–∫–µ—Ç—ã
  console.log(`\nüì¶ TON BOOST –ü–ê–ö–ï–¢–´:`);
  if (status.boostPackages.length === 0) {
    console.log(`   –ù–µ—Ç TON Boost –ø–∞–∫–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
  } else {
    status.boostPackages.forEach((pkg, index) => {
      console.log(`   –ü–∞–∫–µ—Ç ${index + 1}: ${pkg.package_type} - ${pkg.amount_ton} TON (${pkg.status})`);
      console.log(`      –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${pkg.created_at}`);
    });
  }

  // –ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  console.log(`\nüìú –ù–ï–î–ê–í–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):`);
  status.recentTransactions.slice(0, 5).forEach(tx => {
    const amount = tx.amount_ton || tx.amount_uni || '0';
    const currency = tx.amount_ton ? 'TON' : 'UNI';
    console.log(`   ${tx.type}: ${amount} ${currency} - ${tx.created_at.substring(0, 19)}`);
  });

  // –í—ã–≤–æ–¥—ã –æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ TON Boost
  console.log(`\nüéØ –ê–ù–ê–õ–ò–ó TON BOOST:`);
  if (status.tonBoostActive && status.farmingStatus.isActive) {
    console.log(`   ‚úÖ TON Boost –∞–∫—Ç–∏–≤–µ–Ω –∏ UNI —Ñ–∞—Ä–º–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
    console.log(`   ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ ${status.farmingStatus.boostMultiplier}x —Ä–∞–∑`);
    console.log(`   üìà –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
  } else if (status.tonBoostActive && !status.farmingStatus.isActive) {
    console.log(`   ‚ö†Ô∏è TON Boost –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ UNI —Ñ–∞—Ä–º–∏–Ω–≥ –ù–ï –∑–∞–ø—É—â–µ–Ω`);
    console.log(`   üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è boost`);
  } else if (!status.tonBoostActive && status.totalTonSpent > 0) {
    console.log(`   ‚ùå TON –ø–æ—Ç—Ä–∞—á–µ–Ω –Ω–∞ Boost, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –ù–ï –∞–∫—Ç–∏–≤–Ω–∞`);
    console.log(`   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON Boost –ø–∞–∫–µ—Ç–æ–≤`);
  } else {
    console.log(`   üìù TON Boost –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∫—É–ø–∞–ª –ø–∞–∫–µ—Ç—ã)`);
  }
}

async function main(): Promise<void> {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê TON BOOST –ü–ê–ö–ï–¢–û–í');
  console.log('='.repeat(80));
  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 304-307 –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã');
  console.log('–î–∞—Ç–∞:', new Date().toISOString());
  console.log('');

  const userIds = [304, 305, 306, 307];
  const results: TonBoostStatus[] = [];

  for (const userId of userIds) {
    const status = await checkUserTonBoostStatus(userId);
    if (status) {
      results.push(status);
      await displayTonBoostAnalysis(status);
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  }

  // –û–±—â–∏–π –≤—ã–≤–æ–¥
  console.log('\n' + '‚ïê'.repeat(80));
  console.log('üéØ –û–ë–©–ò–ï –í–´–í–û–î–´ –ü–û TON BOOST –°–ò–°–¢–ï–ú–ï');
  console.log('‚ïê'.repeat(80));

  const activeBoostUsers = results.filter(r => r.tonBoostActive);
  const farmingUsers = results.filter(r => r.farmingStatus.isActive);
  const usersWithTonSpent = results.filter(r => r.totalTonSpent > 0);

  console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.length}`);
  console.log(`   TON Boost –∞–∫—Ç–∏–≤–µ–Ω: ${activeBoostUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`   UNI —Ñ–∞—Ä–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: ${farmingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`   –ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ TON: ${usersWithTonSpent.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  if (activeBoostUsers.length > 0) {
    console.log(`\n‚úÖ TON BOOST –†–ê–ë–û–¢–ê–ï–¢ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeBoostUsers.map(u => u.userId).join(', ')}`);
  }

  if (usersWithTonSpent.length > activeBoostUsers.length) {
    const problematicUsers = usersWithTonSpent.filter(u => !u.tonBoostActive);
    console.log(`\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø (–ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ TON, –Ω–æ Boost –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω): ${problematicUsers.map(u => u.userId).join(', ')}`);
  }

  console.log(`\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
  if (activeBoostUsers.length === 0 && usersWithTonSpent.length > 0) {
    console.log(`   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é TON Boost –ø–∞–∫–µ—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é`);
    console.log(`   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ ton_boost_purchases —Å–æ–∑–¥–∞–Ω–∞`);
  }
  if (farmingUsers.length < activeBoostUsers.length) {
    console.log(`   - –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø—É—Å—Ç–∏—Ç—å UNI —Ñ–∞—Ä–º–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è boost`);
  }
  console.log(`   - –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã TON Boost`);
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
main().catch(console.error);