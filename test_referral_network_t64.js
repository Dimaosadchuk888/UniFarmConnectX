/**
 * T64 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–µ—Ç–∏
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
 */
async function getReferralChainStructure() {
  console.log('=== –ê–ù–ê–õ–ò–ó –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ ===');
  
  const { data: chainUsers, error } = await supabase
    .from('users')
    .select('id, telegram_id, username, balance_uni, balance_ton, referred_by, uni_farming_rate, uni_deposit_amount')
    .gte('telegram_id', 20000000001)
    .lte('telegram_id', 20000000020)
    .order('telegram_id');
    
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏:', error.message);
    return [];
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${chainUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ø–æ—á–∫–µ`);
  console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ø–æ—á–∫–∏:');
  
  chainUsers.forEach((user, index) => {
    const level = index + 1;
    const hasDeposit = user.uni_farming_rate > 0 ? 'UNI_FARMING' : 'NO_DEPOSIT';
    console.log(`Level ${level}: User ID ${user.id} ‚Üí Referrer: ${user.referred_by || 'TOP'} | ${hasDeposit}`);
  });
  
  return chainUsers;
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª UNI farming —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏
 */
async function simulateUniFarmingCycle(chainUsers) {
  console.log('\n=== –°–ò–ú–£–õ–Ø–¶–ò–Ø UNI FARMING –¶–ò–ö–õ–ê ===');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º UNI farming
  const activeFarmers = chainUsers.filter(user => user.uni_farming_rate > 0);
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${activeFarmers.length}`);
  
  const farmingResults = [];
  
  for (const farmer of activeFarmers) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç
    const farmingRate = parseFloat(farmer.uni_farming_rate);
    const income = farmingRate * (5 / 60); // 5 –º–∏–Ω—É—Ç –∏–∑ 60 –≤ —á–∞—Å–µ
    const currentBalance = parseFloat(farmer.balance_uni);
    const newBalance = currentBalance + income;
    
    console.log(`User ID ${farmer.id}: +${income.toFixed(6)} UNI (${currentBalance} ‚Üí ${newBalance.toFixed(6)})`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
      .from('users')
      .update({ balance_uni: newBalance.toFixed(6) })
      .eq('id', farmer.id);
      
    if (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ User ID ${farmer.id}:`, error.message);
      continue;
    }
    
    farmingResults.push({
      userId: farmer.id,
      income: income,
      newBalance: newBalance,
      referrerId: farmer.referred_by
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é farming –¥–æ—Ö–æ–¥–∞
    await supabase
      .from('transactions')
      .insert({
        user_id: farmer.id,
        type: 'FARMING_REWARD',
        status: 'completed',
        description: `UNI farming income: ${income.toFixed(6)} UNI (rate: ${farmingRate})`
      });
  }
  
  return farmingResults;
}

/**
 * –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function buildReferrerChain(userId, chainUsers) {
  const referrerChain = [];
  let currentUserId = userId;
  let level = 0;
  
  while (level < 20) {
    const user = chainUsers.find(u => u.id === parseInt(currentUserId));
    if (!user || !user.referred_by) {
      break;
    }
    
    referrerChain.push(user.referred_by);
    currentUserId = user.referred_by;
    level++;
  }
  
  return referrerChain;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ 20-—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
 */
function calculateReferralCommissions(amount, referrerChain) {
  const commissions = [];
  const baseReward = amount * 0.01; // 1% –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
  
  for (let i = 0; i < referrerChain.length && i < 20; i++) {
    const level = i + 1;
    const userId = referrerChain[i];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
    let percentage;
    if (level === 1) {
      percentage = 100; // 1-–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—É—á–∞–µ—Ç 100% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    } else {
      percentage = Math.max(2, 22 - level); // 2-20 —É—Ä–æ–≤–Ω–∏: —É–±—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 20% –¥–æ 2%
    }
    
    const commissionAmount = (baseReward * percentage) / 100;
    
    commissions.push({
      userId: userId,
      level: level,
      percentage: percentage,
      amount: commissionAmount,
      formattedAmount: commissionAmount.toFixed(8)
    });
  }
  
  return commissions;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö farming —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
async function processReferralRewards(farmingResults, chainUsers) {
  console.log('\n=== –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô ===');
  
  const allReferralRewards = [];
  
  for (const farmingResult of farmingResults) {
    if (!farmingResult.referrerId) {
      console.log(`User ID ${farmingResult.userId}: –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞`);
      continue;
    }
    
    console.log(`\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è User ID ${farmingResult.userId} (–¥–æ—Ö–æ–¥: ${farmingResult.income.toFixed(6)} UNI)`);
    
    // –°—Ç—Ä–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    const referrerChain = await buildReferrerChain(farmingResult.userId, chainUsers);
    console.log(`–¶–µ–ø–æ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${referrerChain.length} —É—Ä–æ–≤–Ω–µ–π`);
    
    if (referrerChain.length === 0) {
      continue;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
    const commissions = calculateReferralCommissions(farmingResult.income, referrerChain);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    for (const commission of commissions) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        const { data: referrer, error } = await supabase
          .from('users')
          .select('id, username, balance_uni')
          .eq('id', commission.userId)
          .single();
          
        if (error || !referrer) {
          console.log(`  Level ${commission.level}: Referrer ID ${commission.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }
        
        const currentBalance = parseFloat(referrer.balance_uni);
        const newBalance = currentBalance + commission.amount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        await supabase
          .from('users')
          .update({ balance_uni: newBalance.toFixed(8) })
          .eq('id', commission.userId);
          
        console.log(`  Level ${commission.level}: ${referrer.username} (ID ${commission.userId}) +${commission.formattedAmount} UNI (${commission.percentage}%)`);
        console.log(`    –ë–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(6)} ‚Üí ${newBalance.toFixed(6)} UNI`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        await supabase
          .from('transactions')
          .insert({
            user_id: commission.userId,
            type: 'REFERRAL_REWARD',
            status: 'completed',
            description: `Referral reward L${commission.level} from User ID ${farmingResult.userId}: ${commission.formattedAmount} UNI (${commission.percentage}%)`
          });
          
        allReferralRewards.push({
          sourceUserId: farmingResult.userId,
          referrerId: commission.userId,
          level: commission.level,
          percentage: commission.percentage,
          amount: commission.amount,
          sourceIncome: farmingResult.income
        });
        
      } catch (error) {
        console.error(`  Level ${commission.level}: –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:`, error.message);
      }
    }
  }
  
  return allReferralRewards;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö
 */
function generateReferralReport(farmingResults, referralRewards) {
  console.log('\n=== T64 –û–¢–ß–ï–¢ –û –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø–• ===');
  
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê FARMING:');
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞—Ä–º–µ—Ä–æ–≤: ${farmingResults.length}`);
  const totalFarmingIncome = farmingResults.reduce((sum, r) => sum + r.income, 0);
  console.log(`–û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç UNI farming: ${totalFarmingIncome.toFixed(6)} UNI`);
  
  console.log('\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ù–ê–ß–ò–°–õ–ï–ù–ò–ô:');
  console.log(`–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: ${referralRewards.length}`);
  
  const totalReferralRewards = referralRewards.reduce((sum, r) => sum + r.amount, 0);
  console.log(`–û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${totalReferralRewards.toFixed(8)} UNI`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
  const rewardsByLevel = {};
  referralRewards.forEach(reward => {
    if (!rewardsByLevel[reward.level]) {
      rewardsByLevel[reward.level] = { count: 0, total: 0 };
    }
    rewardsByLevel[reward.level].count++;
    rewardsByLevel[reward.level].total += reward.amount;
  });
  
  console.log('\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –£–†–û–í–ù–Ø–ú:');
  Object.keys(rewardsByLevel).sort((a, b) => parseInt(a) - parseInt(b)).forEach(level => {
    const stats = rewardsByLevel[level];
    console.log(`Level ${level}: ${stats.count} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, ${stats.total.toFixed(8)} UNI`);
  });
  
  return {
    farmingIncome: totalFarmingIncome,
    referralRewards: totalReferralRewards,
    rewardsByLevel
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è T64
 */
async function testReferralNetwork() {
  try {
    console.log('T64 - –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–ô –ü–û –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –°–ï–¢–ò');
    console.log('='.repeat(70));
    
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
    const chainUsers = await getReferralChainStructure();
    
    if (chainUsers.length === 0) {
      console.log('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º UNI farming —Ü–∏–∫–ª
    const farmingResults = await simulateUniFarmingCycle(chainUsers);
    
    if (farmingResults.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö UNI —Ñ–∞—Ä–º–µ—Ä–æ–≤');
      return;
    }
    
    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    const referralRewards = await processReferralRewards(farmingResults, chainUsers);
    
    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = generateReferralReport(farmingResults, referralRewards);
    
    console.log('\n‚úÖ T64 COMPLETED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${farmingResults.length} —Ñ–∞—Ä–º–µ—Ä–æ–≤ ‚Üí ${referralRewards.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π`);
    
    return {
      chainUsers,
      farmingResults,
      referralRewards,
      report
    };
    
  } catch (error) {
    console.error('‚ùå T64 CRITICAL ERROR:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testReferralNetwork();