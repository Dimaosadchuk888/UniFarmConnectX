#!/usr/bin/env node

/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –î–ï–ü–û–ó–ò–¢–û–í
 * –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤
 */

import fs from 'fs';
import path from 'path';

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –î–ï–ü–û–ó–ò–¢–û–í');
console.log('='.repeat(80));

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
  console.log('\n1Ô∏è‚É£ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø');
  console.log('-'.repeat(50));
  
  const criticalVars = [
    'SUPABASE_URL',
    'SUPABASE_KEY', 
    'TELEGRAM_BOT_TOKEN',
    'TELEGRAM_ADMIN_BOT_TOKEN',
    'JWT_SECRET',
    'TELEGRAM_WEBAPP_URL',
    'APP_DOMAIN',
    'DATABASE_URL'
  ];
  
  criticalVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      const masked = value.length > 20 ? value.substring(0, 10) + '...' + value.substring(value.length - 5) : value;
      console.log(`‚úÖ ${varName}: ${masked}`);
    } else {
      console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
    }
  });
}

// 2. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
function analyzeDepositLogic() {
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('-'.repeat(50));
  
  const filesToCheck = [
    'client/src/services/tonConnectService.ts',
    'client/src/components/wallet/TonDepositCard.tsx',
    'modules/wallet/service.ts',
    'modules/wallet/controller.ts',
    'core/TransactionService.ts'
  ];
  
  filesToCheck.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${filePath}...`);
      
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const depositMethods = [
        'sendTonTransaction',
        'ton-deposit',
        'processDeposit',
        'createTransaction',
        'TON_DEPOSIT',
        'FARMING_REWARD'
      ];
      
      depositMethods.forEach(method => {
        if (content.includes(method)) {
          const lines = content.split('\n');
          const matchingLines = lines
            .map((line, index) => ({ line: line.trim(), number: index + 1 }))
            .filter(item => item.line.includes(method))
            .slice(0, 3); // –ü–µ—Ä–≤—ã–µ 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            
          console.log(`   üîç ${method}:`);
          matchingLines.forEach(item => {
            console.log(`     L${item.number}: ${item.line.substring(0, 80)}...`);
          });
        }
      });
    } else {
      console.log(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –ª–æ–≥–∏–∫–∏
function analyzeTonBoostLogic() {
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó TON BOOST –õ–û–ì–ò–ö–ò');
  console.log('-'.repeat(50));
  
  const boostFiles = [
    'modules/boost/service.ts',
    'modules/boost/TonFarmingRepository.ts',
    'client/src/components/ton-boost/BoostPackagesCard.tsx'
  ];
  
  boostFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${filePath}...`);
      
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const patterns = [
        'purchaseWithInternalWallet',
        'purchaseWithExternalWallet', 
        'activateBoost',
        'createPendingTransaction',
        'verifyTonPayment',
        'BOOST_PURCHASE',
        'FARMING_REWARD'
      ];
      
      patterns.forEach(pattern => {
        if (content.includes(pattern)) {
          const regex = new RegExp(`.*${pattern}.*`, 'gi');
          const matches = content.match(regex);
          if (matches && matches.length > 0) {
            console.log(`   üîç ${pattern}: ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
            matches.slice(0, 2).forEach(match => {
              console.log(`     ${match.trim().substring(0, 80)}...`);
            });
          }
        }
      });
    } else {
      console.log(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
function analyzeTransactionMapping() {
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ú–ê–ü–ü–ò–ù–ì–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
  console.log('-'.repeat(50));
  
  const transactionFiles = [
    'core/TransactionService.ts',
    'modules/transactions/types.ts'
  ];
  
  transactionFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${filePath}...`);
      
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ò—â–µ–º TRANSACTION_TYPE_MAPPING
      if (content.includes('TRANSACTION_TYPE_MAPPING')) {
        const mappingStart = content.indexOf('TRANSACTION_TYPE_MAPPING');
        const mappingSection = content.substring(mappingStart, mappingStart + 1000);
        
        console.log('   üó∫Ô∏è TRANSACTION_TYPE_MAPPING:');
        const lines = mappingSection.split('\n').slice(0, 15);
        lines.forEach(line => {
          if (line.trim() && !line.includes('//')) {
            console.log(`     ${line.trim()}`);
          }
        });
      }
      
      // –ò—â–µ–º shouldUpdateBalance
      if (content.includes('shouldUpdateBalance')) {
        console.log('   ‚öñÔ∏è shouldUpdateBalance –Ω–∞–π–¥–µ–Ω');
        const balanceStart = content.indexOf('shouldUpdateBalance');
        const balanceSection = content.substring(balanceStart, balanceStart + 300);
        const relevantLines = balanceSection.split('\n').slice(0, 8);
        relevantLines.forEach(line => {
          if (line.trim()) {
            console.log(`     ${line.trim()}`);
          }
        });
      }
    }
  });
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function analyzeDatabaseSchema() {
  console.log('\n5Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('-'.repeat(50));
  
  const schemaFile = 'shared/schema.ts';
  
  if (fs.existsSync(schemaFile)) {
    console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${schemaFile}...`);
    
    const content = fs.readFileSync(schemaFile, 'utf8');
    
    // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã users –∏ transactions
    const tables = ['users', 'transactions', 'ton_farming_data'];
    
    tables.forEach(tableName => {
      if (content.includes(`export const ${tableName}`)) {
        console.log(`   üìä –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–∞–π–¥–µ–Ω–∞`);
        
        const tableStart = content.indexOf(`export const ${tableName}`);
        const tableSection = content.substring(tableStart, tableStart + 500);
        const lines = tableSection.split('\n').slice(0, 10);
        
        lines.forEach(line => {
          if (line.includes('balance') || line.includes('TON') || line.includes('amount')) {
            console.log(`     ${line.trim()}`);
          }
        });
      } else {
        console.log(`   ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ`);
      }
    });
  } else {
    console.log(`‚ùå –§–∞–π–ª —Å—Ö–µ–º—ã ${schemaFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function analyzeConfigFiles() {
  console.log('\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í');
  console.log('-'.repeat(50));
  
  const configFiles = [
    '.env',
    '.env.example',
    'server/index.ts',
    'client/src/App.tsx'
  ];
  
  configFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`üìÑ ${filePath}:`);
      
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n');
      
      // –ò—â–µ–º –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const importantLines = lines.filter(line => {
        return line.includes('TON') || 
               line.includes('SUPABASE') || 
               line.includes('WEBHOOK') ||
               line.includes('API') ||
               line.includes('manifest');
      }).slice(0, 5);
      
      importantLines.forEach(line => {
        console.log(`   ${line.trim()}`);
      });
    } else {
      console.log(`‚ùå ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
function runComprehensiveAnalysis() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...\n');
  
  checkEnvironmentVariables();
  analyzeDepositLogic();
  analyzeTonBoostLogic();
  analyzeTransactionMapping();
  analyzeDatabaseSchema();
  analyzeConfigFiles();
  
  console.log('\n' + '='.repeat(80));
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log('='.repeat(80));
  console.log('1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
  console.log('2. –õ–æ–≥–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  console.log('3. TON Boost —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞');
  console.log('4. –ú–∞–ø–ø–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑—É—á–µ–Ω');
  console.log('5. –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
  console.log('6. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  console.log('='.repeat(80));
}

// –ó–∞–ø—É—Å–∫
runComprehensiveAnalysis();