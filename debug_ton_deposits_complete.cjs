#!/usr/bin/env node
/**
 * –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ TON –î–ï–ü–û–ó–ò–¢–û–í
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –ø–æ—Ç–æ–∫ –æ—Ç frontend –¥–æ database
 */

const http = require('http');
const fs = require('fs');

// Simulated JWT token –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (base64 encoded)
const TEST_JWT = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxODQsInRlbGVncmFtX2lkIjo1MDg5NzI0NjQsInVzZXJuYW1lIjoiQWRtaW5Cb3QiLCJyZWZfY29kZSI6IjFNOEVKSyIsImlhdCI6MTczNzQ2NzE0NSwiZXhwIjoxNzM4MDcxOTQ1fQ.invalid_signature_for_testing';

async function makeAuthenticatedRequest(path, method = 'GET', body = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${TEST_JWT}`
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(data);
          resolve({ status: res.statusCode, data: parsedData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    req.setTimeout(10000, () => reject(new Error('Timeout')));
    
    if (body) {
      req.write(JSON.stringify(body));
    }
    
    req.end();
  });
}

async function debugTonDepositsComplete() {
  console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON –î–ï–ü–û–ó–ò–¢–û–í');
  console.log('='.repeat(50));
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–û–î–ê processTonDeposit');
  
  try {
    const serviceCode = fs.readFileSync('modules/wallet/service.ts', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    const hasCorrectFix = serviceCode.includes("eq('metadata->tx_hash', ton_tx_hash)");
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${hasCorrectFix}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É metadata
    const hasMetadataStructure = serviceCode.includes('tx_hash: ton_tx_hash');
    console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ metadata: ${hasMetadataStructure}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    const hasLogging = serviceCode.includes('logger.info') && serviceCode.includes('TON –¥–µ–ø–æ–∑–∏—Ç');
    console.log(`‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${hasLogging}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const lines = serviceCode.split('\n');
    console.log('\nüìã –ö–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    lines.forEach((line, index) => {
      if (line.includes('metadata:') || line.includes('tx_hash:') || line.includes('amount_ton:')) {
        console.log(`  ${index + 1}: ${line.trim()}`);
      }
    });
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è service.ts: ${error.message}`);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê ENDPOINT –î–û–°–¢–£–ü–ù–û–°–¢–ò');
  
  try {
    // –¢–µ—Å—Ç health endpoint
    const healthResponse = await makeAuthenticatedRequest('/health');
    console.log(`‚úÖ Health check: ${healthResponse.status} - ${JSON.stringify(healthResponse.data).substring(0, 100)}`);
    
    // –¢–µ—Å—Ç wallet balance endpoint  
    const balanceResponse = await makeAuthenticatedRequest('/api/v2/wallet/balance?user_id=184');
    console.log(`üìä Balance endpoint: ${balanceResponse.status}`);
    if (balanceResponse.data.success) {
      console.log(`   TON Balance: ${balanceResponse.data.data.tonBalance}`);
      console.log(`   UNI Balance: ${balanceResponse.data.data.uniBalance}`);
    } else {
      console.log(`   Error: ${JSON.stringify(balanceResponse.data)}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoints: ${error.message}`);
  }
  
  // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º TON deposit –∑–∞–ø—Ä–æ—Å  
  console.log('\n3Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø TON DEPOSIT –ó–ê–ü–†–û–°–ê');
  
  try {
    const testDepositData = {
      user_id: 184,
      ton_tx_hash: `test_debug_${Date.now()}`,
      amount: 0.5,
      wallet_address: "UQTestWallet_Debug_" + Math.random().toString(36).substring(7)
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', testDepositData);
    
    const depositResponse = await makeAuthenticatedRequest('/api/v2/wallet/ton-deposit', 'POST', testDepositData);
    console.log(`üì® TON Deposit Response: ${depositResponse.status}`);
    console.log(`üìã Response Data: ${JSON.stringify(depositResponse.data, null, 2)}`);
    
    if (depositResponse.status === 401) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
    } else if (depositResponse.status === 400) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } else if (depositResponse.status === 500) {
      console.log('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ processTonDeposit');
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ${error.message}`);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º controller
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó WALLET CONTROLLER');
  
  try {
    const controllerCode = fs.readFileSync('modules/wallet/controller.ts', 'utf8');
    
    const hasValidation = controllerCode.includes('ton_tx_hash') && controllerCode.includes('amount') && controllerCode.includes('wallet_address');
    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${hasValidation}`);
    
    const hasUserLookup = controllerCode.includes('getUserByTelegramId');
    console.log(`‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id: ${hasUserLookup}`);
    
    const callsProcessTonDeposit = controllerCode.includes('processTonDeposit');
    console.log(`‚úÖ –í—ã–∑–æ–≤ processTonDeposit: ${callsProcessTonDeposit}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ controller: ${error.message}`);
  }
  
  // 5. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã
  console.log('\n5Ô∏è‚É£ –í–û–ó–ú–û–ñ–ù–´–ï –ö–û–†–ù–ï–í–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´');
  
  console.log('\nüéØ –ü–†–ò–ß–ò–ù–ê A: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø');
  console.log('- –†–∞–∑–Ω—ã–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã = —Ä–∞–∑–Ω—ã–µ telegram_id');
  console.log('- JWT —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω telegram_id, –∞ –¥–µ–ø–æ–∑–∏—Ç –æ—Ç –¥—Ä—É–≥–æ–≥–æ');
  console.log('- getUserByTelegramId –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('- –†–µ–∑—É–ª—å—Ç–∞—Ç: 404 "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"');
  
  console.log('\nüéØ –ü–†–ò–ß–ò–ù–ê B: –°–£PABASE –û–®–ò–ë–ö–ò');
  console.log('- Supabase –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç fail silently');
  console.log('- RLS (Row Level Security) –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã');
  console.log('- Timeout –∏–ª–∏ connection issues');
  console.log('- –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è');
  
  console.log('\nüéØ –ü–†–ò–ß–ò–ù–ê C: VALIDATION ERRORS');
  console.log('- ton_tx_hash –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞');
  console.log('- amount –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ NaN');
  console.log('- wallet_address –º–æ–∂–µ—Ç –±—ã—Ç—å invalid');
  console.log('- –†–µ–∑—É–ª—å—Ç–∞—Ç: 400 "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"');
  
  console.log('\nüéØ –ü–†–ò–ß–ò–ù–ê D: FRONTEND –ü–†–û–ë–õ–ï–ú–´');
  console.log('- TonDepositCard –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã');
  console.log('- TON Connect integration —Å–ª–æ–º–∞–Ω–∞');
  console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage');
  console.log('- –†–µ–∑—É–ª—å—Ç–∞—Ç: API calls –≤–æ–æ–±—â–µ –Ω–µ –¥–µ–ª–∞—é—Ç—Å—è');
  
  console.log('\nüéØ –ü–†–ò–ß–ò–ù–ê E: RACE CONDITIONS');
  console.log('- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
  console.log('- D–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ');
  console.log('- Supabase conflicts –ø—Ä–∏ parallel inserts');
  console.log('- –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç');
  
  // 6. –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log('\n6Ô∏è‚É£ –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
  
  console.log('\nüîß –®–ê–ì 1: –£–°–ò–õ–ï–ù–ò–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø');
  console.log('- –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ processTonDeposit');
  console.log('- –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø: auth, validation, db operations');
  console.log('- –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É failure');
  
  console.log('\nüîß –®–ê–ì 2: –£–õ–£–ß–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö');
  console.log('- Catch –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö Supabase errors');
  console.log('- Proper error messages –¥–ª—è frontend');
  console.log('- Rollback mechanisms –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö failures');
  
  console.log('\nüîß –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('- –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ telegram_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ');
  console.log('- –õ—É—á—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JWT token issues');
  console.log('- Fallback mechanisms –¥–ª—è auth problems');
  
  console.log('\nüîß –®–ê–ì 4: FRONTEND DEBUGGING');
  console.log('- –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏ –≤ TonDepositCard');
  console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ POST requests –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è');
  console.log('- Validate response handling');
  
  return true;
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
debugTonDepositsComplete()
  .then(() => console.log('\n‚úÖ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
  .catch(error => console.error('\n‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error));