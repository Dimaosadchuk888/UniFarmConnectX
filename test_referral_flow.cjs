// –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

async function testReferralFlow() {
  console.log('=== –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–û–¢–û–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testTelegramId = Math.floor(Math.random() * 1000000000);
  const testUsername = `test_${Date.now()}`;
  const refCode = 'REF_1752755835358_yjrusv'; // –ö–æ–¥ User 184
  
  console.log('üöÄ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(`   telegram_id: ${testTelegramId}`);
  console.log(`   username: ${testUsername}`);
  console.log(`   ref_code: ${refCode}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const healthResponse = await fetch('http://localhost:3000/health');
    if (!healthResponse.ok) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth endpoint
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ auth endpoint...');
    
    const authData = {
      initData: `user=${encodeURIComponent(JSON.stringify({
        id: testTelegramId,
        first_name: "Test",
        username: testUsername
      }))}&chat_instance=-1&chat_type=private&auth_date=${Math.floor(Date.now() / 1000)}&hash=test_hash`,
      ref_by: refCode
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏:');
    console.log(`   initData: ${authData.initData.substring(0, 100)}...`);
    console.log(`   ref_by: ${authData.ref_by}`);
    
    const authResponse = await fetch('http://localhost:3000/api/v2/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(authData)
    });
    
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${authResponse.status} ${authResponse.statusText}`);
    
    if (!authResponse.ok) {
      const errorText = await authResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ auth endpoint:', errorText);
      return;
    }
    
    const authResult = await authResponse.json();
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    console.log(JSON.stringify(authResult, null, 2));
    
    if (!authResult.success) {
      console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î...');
    
    const { data: newUser, error: userError } = await supabase
      .from('users')
      .select('id, telegram_id, username, referred_by, created_at')
      .eq('telegram_id', testTelegramId)
      .single();
    
    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    if (!newUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${newUser.id}`);
    console.log(`   telegram_id: ${newUser.telegram_id}`);
    console.log(`   username: ${newUser.username}`);
    console.log(`   referred_by: ${newUser.referred_by}`);
    console.log(`   created_at: ${newUser.created_at}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º referred_by
    if (newUser.referred_by === 184) {
      console.log('\n‚úÖ –£–°–ü–ï–•: referred_by —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (184)');
    } else if (newUser.referred_by === null) {
      console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: referred_by –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (null)');
    } else {
      console.log(`\n‚ö†Ô∏è  –ù–ï–û–ñ–ò–î–ê–ù–ù–û: referred_by = ${newUser.referred_by}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ referrals
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ referrals...');
    
    const { data: referralRecord, error: referralError } = await supabase
      .from('referrals')
      .select('*')
      .eq('user_id', newUser.id)
      .single();
    
    if (referralError && referralError.code !== 'PGRST116') {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ referral:', referralError.message);
    } else if (!referralRecord) {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ referrals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals –Ω–∞–π–¥–µ–Ω–∞:');
      console.log(`   ID: ${referralRecord.id}`);
      console.log(`   user_id: ${referralRecord.user_id}`);
      console.log(`   inviter_id: ${referralRecord.inviter_id}`);
      console.log(`   created_at: ${referralRecord.created_at}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const userTime = new Date(newUser.created_at);
      const referralTime = new Date(referralRecord.created_at);
      const timeDiff = Math.abs(referralTime - userTime);
      
      console.log(`   ‚è±Ô∏è  –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiff}ms`);
      
      if (timeDiff < 5000) {
        console.log('   ‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ');
      } else {
        console.log('   ‚ùå –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n5. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    if (referralRecord) {
      await supabase.from('referrals').delete().eq('id', referralRecord.id);
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ referrals —É–¥–∞–ª–µ–Ω–∞');
    }
    
    await supabase.from('users').delete().eq('id', newUser.id);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    
    console.log('\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    
    if (newUser.referred_by === 184 && referralRecord) {
      console.log('üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!');
    } else if (newUser.referred_by === 184) {
      console.log('‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: referred_by —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ referrals –Ω–µ —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: referred_by –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testReferralFlow().catch(console.error);