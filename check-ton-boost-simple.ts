import { supabase } from './core/supabase.js';

async function checkTonBoostSimple() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON_BOOST_INCOME –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
    
    const { data: recentTonBoostTx, error: tonBoostError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'TON_BOOST_INCOME')
      .gte('created_at', thirtyMinutesAgo)
      .order('created_at', { ascending: false });

    if (tonBoostError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonBoostError);
    } else {
      console.log(`üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON_BOOST_INCOME –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç: ${recentTonBoostTx?.length || 0}`);
      
      if (recentTonBoostTx && recentTonBoostTx.length > 0) {
        console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON_BOOST_INCOME:');
        recentTonBoostTx.forEach(tx => {
          console.log(`- ${tx.created_at}: User ${tx.user_id}, –°—É–º–º–∞: ${tx.amount_ton} TON`);
        });
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
    
    const { data: allRecentTx, error: allError } = await supabase
      .from('transactions')
      .select('type, created_at, user_id, amount_ton, amount_uni')
      .gte('created_at', tenMinutesAgo)
      .order('created_at', { ascending: false });

    if (!allError && allRecentTx) {
      console.log(`\nüìã –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç: ${allRecentTx.length}`);
      const types = allRecentTx.reduce((acc, tx) => {
        acc[tx.type] = (acc[tx.type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      console.log('\n–¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      Object.entries(types).forEach(([type, count]) => {
        console.log(`- ${type}: ${count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost
    const { data: activeUsers, error: activeError } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_package_id, farming_rate')
      .not('boost_package_id', 'is', null);

    if (!activeError && activeUsers) {
      console.log(`\nüë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π TON Boost: ${activeUsers.length}`);
      if (activeUsers.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        activeUsers.slice(0, 5).forEach(u => {
          console.log(`- User ${u.user_id}: package ${u.boost_package_id}, rate ${u.farming_rate}`);
        });
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
    console.log('\n‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
    console.log('- UNI Farming Scheduler: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –æ—Ç UNI —Ñ–∞—Ä–º–∏–Ω–≥–∞');
    console.log('- TON Boost Income Scheduler: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥—ã –æ—Ç TON Boost');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkTonBoostSimple().catch(console.error);