#!/usr/bin/env tsx

/**
 * ‚úÖ –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TON BOOST –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

config();

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

async function verifyFix() {
  console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TON BOOST SYSTEM');
  console.log('=' .repeat(45));
  
  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ê–ö–¢–ò–í–ù–´
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏...');
    
    const { data: boostUsers } = await supabase
      .from('users')
      .select('id, username, ton_boost_active, ton_boost_package, ton_boost_rate')
      .not('ton_boost_package', 'is', null)
      .order('id');

    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –ø–∞–∫–µ—Ç–∞–º–∏: ${boostUsers?.length || 0}`);
    
    const activeUsers = boostUsers?.filter(u => u.ton_boost_active) || [];
    const inactiveUsers = boostUsers?.filter(u => !u.ton_boost_active) || [];
    
    console.log(`‚úÖ –ê–ö–¢–ò–í–ù–´–•: ${activeUsers.length}`);
    console.log(`‚ùå –ù–ï–ê–ö–¢–ò–í–ù–´–•: ${inactiveUsers.length}`);
    
    if (inactiveUsers.length > 0) {
      console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
      inactiveUsers.forEach(user => {
        console.log(`   User ${user.id} (@${user.username}): –ù–ï–ê–ö–¢–ò–í–ï–ù`);
      });
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú TON_FARMING_DATA
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data...');
    
    const { data: farmingData } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_package_id')
      .order('user_id');

    console.log(`üåæ –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${farmingData?.length || 0}`);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const farmingUserIds = farmingData?.map(d => parseInt(d.user_id)) || [];
    const boostUserIds = boostUsers?.map(u => u.id) || [];
    const missingInFarming = boostUserIds.filter(id => !farmingUserIds.includes(id));
    
    if (missingInFarming.length > 0) {
      console.log(`\n‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í TON_FARMING_DATA: ${missingInFarming.join(', ')}`);
    } else {
      console.log('\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ ton_farming_data');
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ì–û–¢–û–í–ù–û–°–¢–¨ –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    
    const readyForScheduler = boostUsers?.filter(u => 
      u.ton_boost_active && 
      u.ton_boost_package && 
      u.ton_boost_rate &&
      farmingUserIds.includes(u.id)
    ) || [];
    
    console.log(`üìà –ì–û–¢–û–í–û –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê: ${readyForScheduler.length} –∏–∑ ${boostUsers?.length || 0}`);
    
    readyForScheduler.forEach(user => {
      const farmingInfo = farmingData?.find(f => parseInt(f.user_id) === user.id);
      console.log(`   User ${user.id}: Package ${user.ton_boost_package}, Rate ${user.ton_boost_rate}, Balance ${farmingInfo?.farming_balance}`);
    });

    // 4. –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ï –î–û–•–û–î–´
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    
    const { data: recentIncomes } = await supabase
      .from('transactions')
      .select('user_id, amount, created_at')
      .eq('type', 'FARMING_REWARD')
      .contains('metadata', { transaction_source: 'ton_boost_scheduler' })
      .gte('created_at', new Date(Date.now() - 10 * 60 * 1000).toISOString()) // 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      .order('created_at', { ascending: false });

    const usersWithRecentIncome = [...new Set(recentIncomes?.map(tx => parseInt(tx.user_id)) || [])];
    console.log(`üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Ö–æ–¥–∞–º–∏ –∑–∞ 10 –º–∏–Ω—É—Ç: ${usersWithRecentIncome.length}`);
    
    if (usersWithRecentIncome.length > 0) {
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Ö–æ–¥—ã:');
      usersWithRecentIncome.forEach(userId => {
        const latestIncome = recentIncomes?.find(tx => parseInt(tx.user_id) === userId);
        console.log(`   - User ${userId}: ${latestIncome?.amount} TON (${latestIncome?.created_at})`);
      });
    }

    // 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    console.log('\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø...');
    
    const successRate = readyForScheduler.length / (boostUsers?.length || 1) * 100;
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏: ${boostUsers?.length || 0}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: ${activeUsers.length}`);
    console.log(`   - –ì–æ—Ç–æ–≤—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${readyForScheduler.length}`);
    console.log(`   - –ü–æ–ª—É—á–∏–ª–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ 10 –º–∏–Ω: ${usersWithRecentIncome.length}`);
    console.log(`   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate.toFixed(1)}%`);
    
    if (successRate === 100 && inactiveUsers.length === 0 && missingInFarming.length === 0) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
      console.log('   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
      console.log('   ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ ton_farming_data –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      console.log('   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   ‚úÖ –ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    } else {
      console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
    }

    return {
      total_users: boostUsers?.length || 0,
      active_users: activeUsers.length,
      ready_for_scheduler: readyForScheduler.length,
      recent_income_users: usersWithRecentIncome.length,
      success_rate: successRate,
      fully_fixed: successRate === 100 && inactiveUsers.length === 0 && missingInFarming.length === 0
    };

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:', error);
    throw error;
  }
}

async function main() {
  try {
    const result = await verifyFix();
    
    if (result.fully_fixed) {
      console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê TON BOOST –ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!');
      process.exit(0);
    } else {
      console.log('\n‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
      process.exit(1);
    }
    
  } catch (error) {
    console.error('\n‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

main();