/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
 */

import { supabase } from './core/supabaseClient';
import { logger } from './core/logger';

async function checkSystemStatus() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: recentTON, error: tonError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount, description, created_at')
      .eq('currency', 'TON')
      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .order('created_at', { ascending: false })
      .limit(10);

    if (tonError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonError);
      return;
    }

    console.log(`\nüìä TON –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–°–õ–ï–î–ù–ï–ì–û –ß–ê–°–ê: ${recentTON?.length || 0}`);
    recentTON?.forEach((tx, i) => {
      console.log(`${i+1}. User ${tx.user_id}: ${tx.type} ${tx.amount} TON - ${tx.description}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º pending boost —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: pendingBoosts, error: pendingError } = await supabase
      .from('transactions')
      .select('id, user_id, amount, metadata, created_at')
      .eq('type', 'TON_DEPOSIT')
      .eq('status', 'pending')
      .not('metadata', 'is', null)
      .order('created_at', { ascending: false })
      .limit(5);

    if (!pendingError && pendingBoosts) {
      console.log(`\n‚è≥ PENDING BOOST –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${pendingBoosts.length}`);
      pendingBoosts.forEach((tx, i) => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata;
        if (metadata?.transaction_type === 'ton_boost_purchase') {
          console.log(`${i+1}. User ${tx.user_id}: ${tx.amount} TON (boost purchase pending)`);
        }
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ boost –ø–∞–∫–µ—Ç—ã
    const { data: activeBoosts, error: boostError } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_package_id, balance_ton')
      .not('ton_boost_package', 'is', null)
      .limit(10);

    if (!boostError && activeBoosts) {
      console.log(`\nüöÄ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ê–ö–¢–ò–í–ù–´–ú–ò BOOST: ${activeBoosts.length}`);
      activeBoosts.forEach((user, i) => {
        console.log(`${i+1}. User ${user.id}: Package ${user.ton_boost_package_id} (${user.balance_ton} TON)`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ (through recent boost income)
    const { data: recentIncome, error: incomeError } = await supabase
      .from('transactions')
      .select('id, user_id, amount, description, created_at')
      .eq('type', 'FARMING_REWARD')
      .ilike('description', '%TON Boost –¥–æ—Ö–æ–¥%')
      .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString()) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false })
      .limit(5);

    if (!incomeError && recentIncome) {
      console.log(`\nüí∞ BOOST –î–û–•–û–î–´ –ó–ê 30 –ú–ò–ù–£–¢: ${recentIncome.length}`);
      recentIncome.forEach((tx, i) => {
        console.log(`${i+1}. User ${tx.user_id}: ${tx.amount} TON - ${tx.description}`);
      });
      
      if (recentIncome.length > 0) {
        console.log('‚úÖ TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else {
        console.log('‚ö†Ô∏è TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }
    }

    console.log('\nüéØ === –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° ===');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('‚úÖ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç'); 
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
  }
}

checkSystemStatus().catch(console.error);