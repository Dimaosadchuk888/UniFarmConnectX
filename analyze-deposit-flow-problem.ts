/**
 * –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–ü–û–õ–ù–ï–ù–ò–Ø–ú–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

import { supabase } from './core/supabase.js';

async function analyzeDepositFlow() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–ü–û–õ–ù–ï–ù–ò–Ø–ú–ò USER 25');
  console.log('üìã –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:', new Date().toISOString());
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å User 25 –≤ –ë–î
    console.log('\n=== 1. –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° –í –ë–î ===');
    
    const { data: currentUser, error } = await supabase
      .from('users')
      .select('id, telegram_id, balance_uni, balance_ton, updated_at')
      .eq('telegram_id', 25)
      .single();
    
    if (currentUser) {
      console.log('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å User 25:', {
        internal_id: currentUser.id,
        telegram_id: currentUser.telegram_id,
        balance_uni: currentUser.balance_uni,
        balance_ton: currentUser.balance_ton,
        updated_at: currentUser.updated_at
      });
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('\n=== 2. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –î–ï–ü–û–ó–ò–¢–û–í ===');
    
    const now = new Date();
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000).toISOString();
    
    const { data: recentDeposits } = await supabase
      .from('transactions')
      .select('*')
      .in('type', ['TON_DEPOSIT', 'FARMING_DEPOSIT'])
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false });
    
    console.log(`üì• –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: ${recentDeposits?.length || 0}`);
    
    if (recentDeposits && recentDeposits.length > 0) {
      recentDeposits.forEach((dep, i) => {
        console.log(`  ${i+1}. User ${dep.user_id}: ${dep.type}`);
        console.log(`     –°—É–º–º–∞: ${dep.amount_uni || dep.amount_ton} ${dep.currency}`);
        console.log(`     –°—Ç–∞—Ç—É—Å: ${dep.status}`);
        console.log(`     –í—Ä–µ–º—è: ${dep.created_at}`);
        console.log(`     Hash: ${dep.tx_hash || '–Ω–µ—Ç'}`);
        console.log('     ---');
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç User 25
    console.log('\n=== 3. –î–ï–ü–û–ó–ò–¢ USER 25 ===');
    
    const { data: user25Deposits } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 25)
      .in('type', ['TON_DEPOSIT', 'FARMING_DEPOSIT'])
      .gte('created_at', oneHourAgo)
      .order('created_at', { ascending: false});
    
    console.log(`üí≥ –î–µ–ø–æ–∑–∏—Ç—ã User 25 –∑–∞ —á–∞—Å: ${user25Deposits?.length || 0}`);
    
    if (user25Deposits && user25Deposits.length > 0) {
      user25Deposits.forEach((dep, i) => {
        console.log(`  –î–ï–ü–û–ó–ò–¢ ${i+1}:`);
        console.log(`    ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${dep.id}`);
        console.log(`    –¢–∏–ø: ${dep.type}`);
        console.log(`    –°—É–º–º–∞: ${dep.amount_uni || dep.amount_ton} ${dep.currency}`);
        console.log(`    –°—Ç–∞—Ç—É—Å: ${dep.status}`);
        console.log(`    –û–ø–∏—Å–∞–Ω–∏–µ: ${dep.description}`);
        console.log(`    –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${dep.created_at}`);
        console.log(`    –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${dep.updated_at}`);
        console.log(`    TX Hash: ${dep.tx_hash || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log('    ---');
      });
    } else {
      console.log('  ‚ùå –î–µ–ø–æ–∑–∏—Ç–æ–≤ User 25 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –∏ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\n=== 4. –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê ===');
    
    // –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ User 25 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const { data: balanceChanges } = await supabase
      .from('users')
      .select('balance_uni, balance_ton, updated_at')
      .eq('telegram_id', 25)
      .single();
    
    if (balanceChanges) {
      console.log('üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î:', {
        uni: balanceChanges.balance_uni,
        ton: balanceChanges.balance_ton,
        updated_at: balanceChanges.updated_at
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É BalanceManager
    console.log('\n=== 5. –¢–ï–°–¢ BALANCE MANAGER ===');
    
    try {
      const { BalanceManager } = await import('./core/BalanceManager.js');
      const balanceManager = BalanceManager.getInstance();
      
      const balanceResult = await balanceManager.getUserBalance(25);
      
      if (balanceResult.success) {
        const balance = balanceResult.balance!;
        console.log('üîß BalanceManager —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
          uni: balance.balance_uni,
          ton: balance.balance_ton,
          source: 'BalanceManager'
        });
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ë–î
        if (currentUser) {
          const uniDiff = Math.abs(parseFloat(currentUser.balance_uni) - balance.balance_uni);
          const tonDiff = Math.abs(parseFloat(currentUser.balance_ton) - balance.balance_ton);
          
          console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ë–î vs BalanceManager:', {
            uni_diff: uniDiff,
            ton_diff: tonDiff,
            synced: uniDiff < 0.001 && tonDiff < 0.001
          });
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ BalanceManager:', balanceResult.error);
      }
      
    } catch (bmError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BalanceManager:', bmError.message);
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\n=== 6. –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò –î–ï–ü–û–ó–ò–¢–û–í ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ stuck —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: stuckTransactions } = await supabase
      .from('transactions')
      .select('*')
      .in('status', ['pending', 'processing'])
      .lt('created_at', new Date(now.getTime() - 30 * 60 * 1000).toISOString()) // —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
      .order('created_at', { ascending: false });
    
    console.log(`‚ö†Ô∏è –ó–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (>30–º–∏–Ω): ${stuckTransactions?.length || 0}`);
    
    if (stuckTransactions && stuckTransactions.length > 0) {
      stuckTransactions.forEach((tx, i) => {
        console.log(`  ${i+1}. User ${tx.user_id}: ${tx.type} | ${tx.status} | –≤–æ–∑—Ä–∞—Å—Ç: ${Math.round((now.getTime() - new Date(tx.created_at).getTime()) / (60 * 1000))}–º–∏–Ω`);
      });
    }
    
    // –í–´–í–û–î–´
    console.log('\n=== üéØ –í–´–í–û–î–´ –ê–ù–ê–õ–ò–ó–ê ===');
    
    console.log('1. User 25 –≤ —Å–∏—Å—Ç–µ–º–µ:', currentUser ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log('2. –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ —á–∞—Å:', recentDeposits?.length || 0);
    console.log('3. –î–µ–ø–æ–∑–∏—Ç—ã User 25 –∑–∞ —á–∞—Å:', user25Deposits?.length || 0);
    console.log('4. –ó–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', stuckTransactions?.length || 0);
    
    if (currentUser) {
      console.log('\nüìã –°–û–°–¢–û–Ø–ù–ò–ï USER 25:');
      console.log(`   –ë–∞–ª–∞–Ω—Å UNI: ${currentUser.balance_uni}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å TON: ${currentUser.balance_ton}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${currentUser.updated_at || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (user25Deposits && user25Deposits.length === 0) {
      console.log('- –î–µ–ø–æ–∑–∏—Ç –º–æ–∂–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö');
      console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoint –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
      console.log('- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å middleware –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    }
    
    if (user25Deposits && user25Deposits.some(d => d.status === 'pending')) {
      console.log('- –ï—Å—Ç—å pending –¥–µ–ø–æ–∑–∏—Ç—ã - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ');
    }
    
    if (stuckTransactions && stuckTransactions.length > 0) {
      console.log('- –í —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å –∑–∞–≤–∏—Å—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –Ω—É–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeDepositFlow();