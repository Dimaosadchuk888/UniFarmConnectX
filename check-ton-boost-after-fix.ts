import { supabase } from './core/supabase';

async function checkTonBoostAfterFix() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê TON BOOST –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===\n');
  console.log(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n`);
  
  // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (30 —Å–µ–∫—É–Ω–¥)...\n');
  await new Promise(resolve => setTimeout(resolve, 30000));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost
    console.log('üìä 1. –ù–û–í–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò TON BOOST:\n');
    
    const fiveMinutesAgo = new Date();
    fiveMinutesAgo.setMinutes(fiveMinutesAgo.getMinutes() - 5);

    const { data: tonTransactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('currency', 'TON')
      .eq('type', 'FARMING_REWARD')
      .gt('created_at', fiveMinutesAgo.toISOString())
      .order('created_at', { ascending: false });

    if (!txError && tonTransactions) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${tonTransactions.length}`);
      
      if (tonTransactions.length > 0) {
        console.log('‚úÖ TON BOOST –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('\n–ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
        tonTransactions.slice(0, 3).forEach(tx => {
          console.log(`  User ${tx.user_id}: +${tx.amount} TON –≤ ${new Date(tx.created_at).toLocaleTimeString()}`);
        });
      } else {
        console.log('‚ùå –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º farming_balance
    console.log('\nüí∞ 2. –ü–†–û–í–ï–†–ö–ê farming_balance:\n');
    
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, boost_package_id')
      .eq('boost_active', true)
      .order('farming_balance', { ascending: false })
      .limit(5);

    if (!farmingError && farmingData) {
      console.log('–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ farming_balance:');
      farmingData.forEach(user => {
        const balance = parseFloat(user.farming_balance);
        console.log(`  User ${user.user_id}: ${balance} TON (–ø–∞–∫–µ—Ç #${user.boost_package_id}) ${balance > 0 ? '‚úÖ' : '‚ùå'}`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('\n‚öôÔ∏è 3. –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:\n');
    
    const { data: recentActivity, error: actError } = await supabase
      .from('ton_farming_data')
      .select('user_id, updated_at')
      .eq('boost_active', true)
      .order('updated_at', { ascending: false })
      .limit(5);

    if (!actError && recentActivity) {
      console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      recentActivity.forEach(user => {
        const updatedAt = new Date(user.updated_at);
        const minutesAgo = (new Date().getTime() - updatedAt.getTime()) / 60000;
        console.log(`  User ${user.user_id}: –æ–±–Ω–æ–≤–ª–µ–Ω ${minutesAgo.toFixed(1)} –º–∏–Ω –Ω–∞–∑–∞–¥ ${minutesAgo < 10 ? '‚úÖ' : '‚ö†Ô∏è'}`);
      });
    }

    // 4. –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\nüìà 4. –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:\n');
    
    const hasNewTransactions = tonTransactions && tonTransactions.length > 0;
    const hasPositiveBalances = farmingData && farmingData.some(u => parseFloat(u.farming_balance) > 0);
    
    if (hasNewTransactions) {
      console.log('üéâ –£–°–ü–ï–•! TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Ö–æ–¥.');
    } else if (hasPositiveBalances) {
      console.log('‚è≥ –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö: farming_balance –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
      console.log('   –ñ–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
    } else {
      console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

checkTonBoostAfterFix();