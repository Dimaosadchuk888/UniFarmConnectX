import { supabase } from './core/supabase';

async function checkTonBoostAfterFix() {
  console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ TON Boost –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ton_farming_data
    const { data: tonFarmingUsers, error: tfError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('boost_active', true);

    if (tfError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ton_farming_data:', tfError.message);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –Ω–∞ users
      const { data: usersData, error: usersError } = await supabase
        .from('users')
        .select('id, telegram_id, balance_ton, ton_boost_active, ton_boost_package_id, ton_farming_rate, ton_farming_balance')
        .eq('ton_boost_active', true);

      if (usersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ users:', usersError.message);
        return;
      }

      console.log(`\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã users):`);
      console.log(`–ù–∞–π–¥–µ–Ω–æ: ${usersData?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);

      if (usersData && usersData.length > 0) {
        for (const user of usersData) {
          console.log(`User ID: ${user.id}`);
          console.log(`  Balance TON: ${user.balance_ton}`);
          console.log(`  TON Farming Balance: ${user.ton_farming_balance || '0'} ‚ö†Ô∏è`);
          console.log(`  Package ID: ${user.ton_boost_package_id}`);
          console.log(`  Rate: ${user.ton_farming_rate}%`);
          
          const depositAmount = parseFloat(user.ton_farming_balance || '0');
          const rate = parseFloat(user.ton_farming_rate || '0');
          const dailyIncome = depositAmount * rate;
          
          console.log(`  üìà –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${dailyIncome.toFixed(6)} TON/–¥–µ–Ω—å`);
          console.log(`  ${depositAmount === 0 ? '‚ùå –í–ù–ò–ú–ê–ù–ò–ï: farming_balance = 0, –¥–æ—Ö–æ–¥ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω!' : '‚úÖ farming_balance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
          console.log('---');
        }
      }
    } else {
      console.log(`\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã ton_farming_data):`);
      console.log(`–ù–∞–π–¥–µ–Ω–æ: ${tonFarmingUsers?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);

      if (tonFarmingUsers && tonFarmingUsers.length > 0) {
        for (const user of tonFarmingUsers) {
          console.log(`User ID: ${user.user_id}`);
          console.log(`  Farming Balance: ${user.farming_balance || '0'} TON`);
          console.log(`  Package ID: ${user.boost_package_id}`);
          console.log(`  Rate: ${user.farming_rate}%`);
          
          const depositAmount = parseFloat(user.farming_balance || '0');
          const rate = parseFloat(user.farming_rate || '0');
          const dailyIncome = depositAmount * rate;
          
          console.log(`  üìà –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${dailyIncome.toFixed(6)} TON/–¥–µ–Ω—å`);
          console.log(`  ${depositAmount === 0 ? '‚ùå –í–ù–ò–ú–ê–ù–ò–ï: farming_balance = 0, –¥–æ—Ö–æ–¥ –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω!' : '‚úÖ farming_balance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
          console.log('---');
        }
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost
    console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON Boost:');
    const { data: transactions, error: txError } = await supabase
      .from('transactions')
      .select('*')
      .eq('type', 'FARMING_REWARD')
      .eq('currency', 'TON')
      .order('created_at', { ascending: false })
      .limit(5);

    if (txError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', txError.message);
    } else if (transactions && transactions.length > 0) {
      for (const tx of transactions) {
        const metadata = tx.metadata ? (typeof tx.metadata === 'string' ? JSON.parse(tx.metadata) : tx.metadata) : {};
        console.log(`  ${new Date(tx.created_at).toLocaleString()}: User ${tx.user_id} +${tx.amount} TON`);
        if (metadata.deposit_amount) {
          console.log(`    –î–µ–ø–æ–∑–∏—Ç: ${metadata.deposit_amount} TON`);
        }
      }
    } else {
      console.log('  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    console.log('\n‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏–º–µ—é—Ç farming_balance = 0');
    console.log('2. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –¥–æ—Ö–æ–¥ –¥–æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏');
    console.log('3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ farming_balance');
    console.log('4. –ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

checkTonBoostAfterFix();