/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TON Boost –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∞—é—Ç—Å—è –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
 */

import { supabase } from './core/supabase';
import { TonFarmingRepository } from './modules/boost/TonFarmingRepository';
import { logger } from './core/logger';

async function testTonBoostFix() {
  console.log('=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TON Boost ===\n');
  
  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    const tonFarmingRepo = new TonFarmingRepository();
    const activeBoostUsers = await tonFarmingRepo.getActiveBoostUsers();
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeBoostUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
    
    if (activeBoostUsers.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)
    // –í–∞–∂–Ω–æ: user_id –≤ ton_farming_data —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
    const userIds = activeBoostUsers.map(u => parseInt(u.user_id.toString()));
    const { data: userBalances, error: balanceError } = await supabase
      .from('users')
      .select('id, balance_ton, balance_uni')
      .in('id', userIds);
      
    if (balanceError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', balanceError);
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è ${userBalances?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const balanceMap = new Map(userBalances?.map(u => [u.id, u]) || []);
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('=== –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===\n');
    
    for (const user of activeBoostUsers.slice(0, 3)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã—Ö 3
      const userId = parseInt(user.user_id.toString());
      const userBalance = balanceMap.get(userId);
      
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.user_id}:`);
      console.log(`  TON Farming –¥–∞–Ω–Ω—ã–µ:`);
      console.log(`    - farming_balance: ${user.farming_balance}`);
      console.log(`    - farming_rate: ${user.farming_rate || user.ton_boost_rate}`);
      console.log(`    - boost_package_id: ${user.boost_package_id}`);
      
      if (userBalance) {
        console.log(`  –ë–∞–ª–∞–Ω—Å—ã –∏–∑ users:`);
        console.log(`    - balance_ton: ${userBalance.balance_ton} ‚úÖ`);
        console.log(`    - balance_uni: ${userBalance.balance_uni}`);
        
        // –†–∞—Å—á–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ (–∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
        const userDeposit = Math.max(0, parseFloat(userBalance.balance_ton || '0') - 10);
        const dailyRate = user.farming_rate || user.ton_boost_rate || 0.01;
        const dailyIncome = userDeposit * dailyRate;
        const fiveMinuteIncome = dailyIncome / 288;
        
        console.log(`  –†–∞—Å—á–µ—Ç—ã:`);
        console.log(`    - –î–µ–ø–æ–∑–∏—Ç: ${userDeposit.toFixed(2)} TON (balance_ton - 10)`);
        console.log(`    - –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${(dailyRate * 100).toFixed(1)}%`);
        console.log(`    - –î–æ—Ö–æ–¥ –∑–∞ 5 –º–∏–Ω—É—Ç: ${fiveMinuteIncome.toFixed(6)} TON`);
        
        if (fiveMinuteIncome > 0.0001) {
          console.log(`    - –°—Ç–∞—Ç—É—Å: ‚úÖ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º`);
        } else {
          console.log(`    - –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ—Ö–æ–¥, –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω`);
        }
      } else {
        console.log(`  ‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users!`);
      }
      
      console.log('');
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('=== –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===\n');
    let processableCount = 0;
    let totalExpectedIncome = 0;
    
    for (const user of activeBoostUsers) {
      const userId = parseInt(user.user_id.toString());
      const userBalance = balanceMap.get(userId);
      if (userBalance) {
        const userDeposit = Math.max(0, parseFloat(userBalance.balance_ton || '0') - 10);
        const dailyRate = user.farming_rate || user.ton_boost_rate || 0.01;
        const dailyIncome = userDeposit * dailyRate;
        const fiveMinuteIncome = dailyIncome / 288;
        
        if (fiveMinuteIncome > 0.0001) {
          processableCount++;
          totalExpectedIncome += fiveMinuteIncome;
        }
      }
    }
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞–º–∏: ${balanceMap.size}/${activeBoostUsers.length}`);
    console.log(`‚úÖ –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${processableCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –æ–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalExpectedIncome.toFixed(6)} TON –∑–∞ 5 –º–∏–Ω—É—Ç`);
    console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: ${(totalExpectedIncome * 288).toFixed(2)} TON`);
    
    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! TON Boost —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTonBoostFix()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });