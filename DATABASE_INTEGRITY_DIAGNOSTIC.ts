/**
 * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
 * 
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ users –∏ ton_farming_data
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 */

import { supabase } from './core/supabase';

async function analyzeDatabaseIntegrity() {
  console.log('\nüîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===\n');
  
  try {
    // 1. –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í –û–ë–ï–ò–• –¢–ê–ë–õ–ò–¶–ê–•
    console.log('1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –î–ê–ù–ù–´–•:');
    console.log('=======================');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ users
    const { data: usersData, error: usersError } = await supabase
      .from('users')
      .select('id, ton_boost_package, ton_boost_active, ton_boost_rate, balance_ton, created_at')
      .not('ton_boost_package', 'is', null)
      .neq('ton_boost_package', 0)
      .limit(3);

    console.log('üìã –¢–ê–ë–õ–ò–¶–ê users (TON Boost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):');
    if (usersData && usersData.length > 0) {
      usersData.forEach((user, index) => {
        console.log(`   User ${index + 1}:`);
        console.log(`     id: ${user.id} (${typeof user.id})`);
        console.log(`     ton_boost_package: ${user.ton_boost_package} (${typeof user.ton_boost_package})`);
        console.log(`     ton_boost_active: ${user.ton_boost_active} (${typeof user.ton_boost_active})`);
        console.log(`     balance_ton: ${user.balance_ton} (${typeof user.balance_ton})`);
        console.log('     ---');
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ton_farming_data
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('user_id, boost_active, boost_package_id, farming_balance, farming_rate')
      .limit(3);

    console.log('\nüìã –¢–ê–ë–õ–ò–¶–ê ton_farming_data:');
    if (farmingData && farmingData.length > 0) {
      farmingData.forEach((farming, index) => {
        console.log(`   Record ${index + 1}:`);
        console.log(`     user_id: "${farming.user_id}" (${typeof farming.user_id})`);
        console.log(`     boost_active: ${farming.boost_active} (${typeof farming.boost_active})`);
        console.log(`     boost_package_id: ${farming.boost_package_id} (${typeof farming.boost_package_id})`);
        console.log(`     farming_balance: ${farming.farming_balance} (${typeof farming.farming_balance})`);
        console.log('     ---');
      });
    }

    // 2. –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–û–õ–ï–ô 
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:');
    console.log('========================');
    
    console.log('üîç –°–†–ê–í–ù–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –ü–û–õ–ï–ô:');
    console.log(`   users.id vs ton_farming_data.user_id:`);
    if (usersData && farmingData) {
      const userIdType = typeof usersData[0]?.id;
      const farmingUserIdType = typeof farmingData[0]?.user_id;
      console.log(`     users.id: ${userIdType}`);
      console.log(`     ton_farming_data.user_id: ${farmingUserIdType}`);
      
      if (userIdType !== farmingUserIdType) {
        console.log('     ‚ùå –ù–ï–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –¢–ò–ü–û–í!');
        console.log(`     –ù—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Ç–∏–ø—É: ${farmingUserIdType}`);
      } else {
        console.log('     ‚úÖ –¢–∏–ø—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã');
      }
    }

    // 3. –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ó–ê–ü–ò–°–ï–ô:');
    console.log('=================================');
    
    if (usersData && farmingData) {
      const userIds = usersData.map(u => u.id);
      const farmingUserIds = farmingData.map(f => parseInt(f.user_id));
      
      console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON Boost: ${userIds.length}`);
      console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ ton_farming_data: ${farmingUserIds.length}`);
      
      const missingUsers = userIds.filter(id => !farmingUserIds.includes(id));
      console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${missingUsers.length}`);
      
      if (missingUsers.length > 0) {
        console.log(`   üö® –ü–†–û–ü–£–©–ï–ù–ù–´–ï USER IDs: [${missingUsers.join(', ')}]`);
      }
    }

    // 4. –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê - –ö–ê–ö–ò–ï –ü–û–õ–Ø –û–ù –û–ñ–ò–î–ê–ï–¢
    console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –¢–†–ï–ë–û–í–ê–ù–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:');
    console.log('==================================');
    
    console.log('üîç –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –û–ñ–ò–î–ê–ï–¢ –û–¢ getActiveBoostUsers():');
    console.log('   –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:');
    console.log('     - user_id (–¥–ª—è JOIN —Å users)');
    console.log('     - balance_ton (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞) ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢');
    console.log('     - farming_rate (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞)');
    console.log('     - boost_active (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)');
    console.log('');
    console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:');
    console.log('   ton_farming_data –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç balance_ton');
    console.log('   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç undefined ‚Üí –¥–µ–ø–æ–∑–∏—Ç = 0 ‚Üí –¥–æ—Ö–æ–¥ = 0');

    // 5. –¢–ï–°–¢ JOIN –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    console.log('\n5Ô∏è‚É£ –¢–ï–°–¢ JOIN –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:');
    console.log('============================');
    
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º JOIN users ‚Üî ton_farming_data...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º JOIN —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–∞—Å—Ç–∏–Ω–≥–∞
    const { data: joinTest, error: joinError } = await supabase
      .from('users')
      .select(`
        id,
        balance_ton,
        ton_boost_package,
        ton_farming_data:ton_farming_data!inner(
          user_id,
          boost_active,
          farming_balance
        )
      `)
      .eq('ton_farming_data.boost_active', true)
      .limit(3);

    if (joinError) {
      console.log(`‚ùå JOIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${joinError.message}`);
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã user_id');
      console.log('   2. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç foreign key —Å–≤—è–∑—å');
      console.log('   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ö–µ–º—ã');
    } else if (joinTest) {
      console.log('‚úÖ JOIN —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${joinTest.length}`);
      
      if (joinTest.length > 0) {
        console.log('   –ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
        const sample = joinTest[0];
        console.log(`     users.id: ${sample.id}`);
        console.log(`     users.balance_ton: ${sample.balance_ton}`);
        console.log(`     farming_data.user_id: ${sample.ton_farming_data?.[0]?.user_id}`);
        console.log(`     farming_data.farming_balance: ${sample.ton_farming_data?.[0]?.farming_balance}`);
      }
    }

    // 6. –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log('\n6Ô∏è‚É£ –ü–õ–ê–ù –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('=======================');
    console.log('');
    console.log('üîß –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–ù–´–ï:');
    console.log('   1. TonFarmingRepository.activateBoost() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø user_id');
    console.log('   2. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å balance_ton –∏–∑ ton_farming_data');
    console.log('   3. 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ ton_farming_data');
    console.log('   4. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤');
    console.log('');
    console.log('üöÄ –°–¢–†–ê–¢–ï–ì–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   –í–ê–†–ò–ê–ù–¢ 1 (–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π):');
    console.log('     - –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø user_id –≤ TonFarmingRepository');
    console.log('     - –î–æ–±–∞–≤–∏—Ç—å JOIN –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è balance_ton');
    console.log('     - –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('');
    console.log('   –í–ê–†–ò–ê–ù–¢ 2 (–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π):');
    console.log('     - –†–∞—Å—à–∏—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å TonFarmingData –ø–æ–ª–µ–º balance_ton');
    console.log('     - –ò–∑–º–µ–Ω–∏—Ç—å getActiveBoostUsers() –Ω–∞ JOIN –∑–∞–ø—Ä–æ—Å');
    console.log('     - –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã');
    console.log('');
    console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–∞—á–∞—Ç—å —Å –í–∞—Ä–∏–∞–Ω—Ç–∞ 1 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

    console.log('\n‚úÖ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
analyzeDatabaseIntegrity();