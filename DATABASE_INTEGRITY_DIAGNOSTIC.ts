#!/usr/bin/env npx tsx

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ TON Boost –ø–∞–∫–µ—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 * 
 * –¶–ï–õ–ò:
 * 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏—é TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –ë–î
 * 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å TON Boost –ø–∞–∫–µ—Ç—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
 * 3. –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –∏—Å—á–µ–∑–∞—é—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 */

import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL!;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || process.env.SUPABASE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
console.log('='.repeat(60));
console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ TON Boost –ø–∞–∫–µ—Ç—ã –≤ –ë–î\n');

async function checkDatabaseIntegrity() {
  try {
    // ==========================================
    // –ë–õ–û–ö 1: –ü–†–û–í–ï–†–ö–ê TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô –í –ë–î
    // ==========================================
    console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê TON –ü–û–ü–û–õ–ù–ï–ù–ò–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('-'.repeat(50));

    // 1.1 –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { data: tonDeposits, error: depositError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, metadata, status, created_at, updated_at')
      .eq('type', 'TON_DEPOSIT')
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      .order('created_at', { ascending: false })
      .limit(20);

    if (!depositError && tonDeposits && tonDeposits.length > 0) {
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${tonDeposits.length} TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:`);
      
      tonDeposits.forEach(tx => {
        const metadata = typeof tx.metadata === 'string' ? JSON.parse(tx.metadata || '{}') : (tx.metadata || {});
        const txHash = metadata.tx_hash ? metadata.tx_hash.substring(0, 20) + '...' : '–ù–ï–¢';
        console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON, Status: ${tx.status}, TX_Hash: ${txHash}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if (tx.created_at !== tx.updated_at) {
          console.log(`      ‚ö†Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å: ${new Date(tx.updated_at).toLocaleString('ru-RU')}`);
        }
      });
    } else {
      console.log('‚ùå TON_DEPOSIT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log(`   –û—à–∏–±–∫–∞: ${depositError?.message || '–ù–ï–¢'}`);
    }

    // 1.2 –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø TON –î–ï–ü–û–ó–ò–¢–û–í –ò –ë–ê–õ–ê–ù–°–û–í:');
    
    if (tonDeposits && tonDeposits.length > 0) {
      const userIds = [...new Set(tonDeposits.map(tx => tx.user_id))];
      
      console.log(`üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏:`);
      
      for (const userId of userIds.slice(0, 5)) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('id, username, balance_ton, ton_boost_package, updated_at')
          .eq('id', userId)
          .single();

        if (!userError && user) {
          // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userDeposits = tonDeposits.filter(tx => tx.user_id === userId && tx.status === 'completed');
          const totalDeposited = userDeposits.reduce((sum, tx) => sum + parseFloat(tx.amount_ton || '0'), 0);
          
          console.log(`   User ${userId} (@${user.username}):`);
          console.log(`      –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance_ton} TON`);
          console.log(`      –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposited} TON`);
          console.log(`      TON Boost –ø–∞–∫–µ—Ç: ${user.ton_boost_package || '–ù–ï–¢'}`);
          console.log(`      –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(user.updated_at).toLocaleString('ru-RU')}`);
          
          if (totalDeposited > 0 && parseFloat(user.balance_ton || '0') < totalDeposited) {
            console.log(`      üö® –ü–†–û–ë–õ–ï–ú–ê: –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤!`);
          }
        } else {
          console.log(`   User ${userId}: ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤ –ë–î`);
        }
      }
    }

    // 1.3 –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö/–æ—Ç–∫–∞—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüîÑ –ü–†–û–í–ï–†–ö–ê –û–¢–ú–ï–ù–ï–ù–ù–´–•/–£–î–ê–õ–ï–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    
    const { data: failedDeposits, error: failedError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, status, created_at')
      .eq('type', 'TON_DEPOSIT')
      .neq('status', 'completed')
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false })
      .limit(10);

    if (!failedError && failedDeposits && failedDeposits.length > 0) {
      console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${failedDeposits.length} –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:`);
      failedDeposits.forEach(tx => {
        console.log(`   ID: ${tx.id}, User: ${tx.user_id}, Amount: ${tx.amount_ton} TON, Status: ${tx.status}, Time: ${new Date(tx.created_at).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚úÖ –ù–µ—É—Å–ø–µ—à–Ω—ã–µ TON –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // ==========================================
    // –ë–õ–û–ö 2: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –ü–ê–ö–ï–¢–û–í
    // ==========================================
    console.log('\n\n2Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TON BOOST –ü–ê–ö–ï–¢–û–í');
    console.log('-'.repeat(50));

    // 2.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ton_farming_data
    console.log('üåæ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ TON_FARMING_DATA:');
    
    const { data: farmingStructure, error: structureError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .limit(1);

    if (!structureError && farmingStructure) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –¥–æ—Å—Ç—É–ø–Ω–∞');
      if (farmingStructure.length > 0) {
        const fields = Object.keys(farmingStructure[0]);
        console.log(`   –ü–æ–ª—è: ${fields.join(', ')}`);
      }
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ ton_farming_data –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log(`   –û—à–∏–±–∫–∞: ${structureError?.message || '–ù–ï–¢'}`);
    }

    // 2.2 –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤
    const { data: allBoostData, error: boostDataError } = await supabase
      .from('ton_farming_data')
      .select('user_id, farming_balance, farming_rate, boost_active, boost_package_id, boost_expires_at, created_at, updated_at')
      .eq('boost_active', true)
      .order('updated_at', { ascending: false });

    if (!boostDataError && allBoostData) {
      console.log(`\nüéØ –ê–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã: ${allBoostData.length}`);
      
      allBoostData.forEach(data => {
        console.log(`   User ${data.user_id}:`);
        console.log(`      Farming Balance: ${data.farming_balance}`);
        console.log(`      Farming Rate: ${data.farming_rate}`);
        console.log(`      Package ID: ${data.boost_package_id}`);
        console.log(`      Expires: ${data.boost_expires_at ? new Date(data.boost_expires_at).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
        console.log(`      Created: ${new Date(data.created_at).toLocaleString('ru-RU')}`);
        console.log(`      Updated: ${new Date(data.updated_at).toLocaleString('ru-RU')}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ TON Boost –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 2.3 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É users –∏ ton_farming_data
    console.log('üîó –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø USERS ‚Üî TON_FARMING_DATA:');
    
    const { data: usersWithBoost, error: usersBoostError } = await supabase
      .from('users')
      .select('id, username, ton_boost_package, ton_boost_rate, balance_ton')
      .not('ton_boost_package', 'is', null);

    if (!usersBoostError && usersWithBoost) {
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ton_boost_package –≤ users: ${usersWithBoost.length}`);
      
      for (const user of usersWithBoost) {
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ ton_farming_data
        const { data: farmingRecord, error: farmingRecordError } = await supabase
          .from('ton_farming_data')
          .select('*')
          .eq('user_id', user.id)
          .single();

        console.log(`   User ${user.id} (@${user.username}):`);
        console.log(`      users.ton_boost_package: ${user.ton_boost_package}`);
        console.log(`      users.ton_boost_rate: ${user.ton_boost_rate}`);
        console.log(`      users.balance_ton: ${user.balance_ton}`);
        
        if (!farmingRecordError && farmingRecord) {
          console.log(`      ‚úÖ farming_data –Ω–∞–π–¥–µ–Ω–∞:`);
          console.log(`         boost_package_id: ${farmingRecord.boost_package_id}`);
          console.log(`         farming_rate: ${farmingRecord.farming_rate}`);
          console.log(`         farming_balance: ${farmingRecord.farming_balance}`);
          console.log(`         boost_active: ${farmingRecord.boost_active}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
          if (user.ton_boost_package !== farmingRecord.boost_package_id) {
            console.log(`      üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: Package ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
          }
          if (parseFloat(user.ton_boost_rate || '0') !== parseFloat(farmingRecord.farming_rate || '0')) {
            console.log(`      üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: Rate –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
          }
        } else {
          console.log(`      ‚ùå farming_data –ù–ï –ù–ê–ô–î–ï–ù–ê`);
          console.log(`         –û—à–∏–±–∫–∞: ${farmingRecordError?.message || '–ù–ï–¢'}`);
        }
        console.log('');
      }
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å TON Boost –≤ users –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // ==========================================  
    // –ë–õ–û–ö 3: –ê–ù–ê–õ–ò–ó RECENT BOOST PURCHASES
    // ==========================================
    console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ù–ï–î–ê–í–ù–ò–• –ü–û–ö–£–ü–û–ö BOOST –ü–ê–ö–ï–¢–û–í');
    console.log('-'.repeat(50));

    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ boost –ø–∞–∫–µ—Ç–æ–≤ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)
    const { data: boostPurchases, error: purchaseError } = await supabase
      .from('transactions')
      .select('id, user_id, type, amount_ton, description, metadata, status, created_at')
      .lt('amount_ton', 0) // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ (—Å–ø–∏—Å–∞–Ω–∏—è)
      .or('description.ilike.%boost%,description.ilike.%–ø–∞–∫–µ—Ç%,type.ilike.%boost%')
      .gt('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
      .order('created_at', { ascending: false });

    if (!purchaseError && boostPurchases && boostPurchases.length > 0) {
      console.log(`üí≥ –ù–∞–π–¥–µ–Ω–æ ${boostPurchases.length} –ø–æ–∫—É–ø–æ–∫ boost –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ 7 –¥–Ω–µ–π:`);
      
      for (const purchase of boostPurchases) {
        const metadata = typeof purchase.metadata === 'string' ? JSON.parse(purchase.metadata || '{}') : (purchase.metadata || {});
        
        console.log(`   –ü–æ–∫—É–ø–∫–∞ ID: ${purchase.id}`);
        console.log(`      User: ${purchase.user_id}`);
        console.log(`      Amount: ${purchase.amount_ton} TON`);
        console.log(`      Type: ${purchase.type}`);
        console.log(`      Description: ${purchase.description}`);
        console.log(`      Status: ${purchase.status}`);
        console.log(`      Time: ${new Date(purchase.created_at).toLocaleString('ru-RU')}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        const { data: farmingAfterPurchase, error: farmingAfterError } = await supabase
          .from('ton_farming_data')
          .select('boost_active, boost_package_id, farming_balance, updated_at')
          .eq('user_id', purchase.user_id)
          .single();

        if (!farmingAfterError && farmingAfterPurchase) {
          console.log(`      ‚úÖ Farming –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:`);
          console.log(`         boost_active: ${farmingAfterPurchase.boost_active}`);
          console.log(`         boost_package_id: ${farmingAfterPurchase.boost_package_id}`);
          console.log(`         farming_balance: ${farmingAfterPurchase.farming_balance}`);
          console.log(`         updated: ${new Date(farmingAfterPurchase.updated_at).toLocaleString('ru-RU')}`);
        } else {
          console.log(`      ‚ùå Farming –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ù–ï –ù–ê–ô–î–ï–ù–´`);
        }
        console.log('');
      }
    } else {
      console.log('üì¶ –ü–æ–∫—É–ø–∫–∏ boost –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // ==========================================
    // –ë–õ–û–ö 4: –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´
    // ==========================================
    console.log('\n4Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
    console.log('-'.repeat(50));

    console.log('üìã –†–ï–ó–Æ–ú–ï –ü–†–û–í–ï–†–ö–ò:');
    console.log(`   ‚Ä¢ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: ${tonDeposits?.length || 0}`);
    console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö TON Boost –ø–∞–∫–µ—Ç–æ–≤: ${allBoostData?.length || 0}`);
    console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å boost –≤ users: ${usersWithBoost?.length || 0}`);
    console.log(`   ‚Ä¢ –ü–æ–∫—É–ø–æ–∫ boost –∑–∞ 7 –¥–Ω–µ–π: ${boostPurchases?.length || 0}`);
    
    console.log('\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò:');
    if (tonDeposits && tonDeposits.length === 0) {
      console.log('   üö® –ù–ï–¢ TON –î–ï–ü–û–ó–ò–¢–û–í –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π - –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!');
    }
    if (allBoostData && allBoostData.length > 0 && (!usersWithBoost || usersWithBoost.length === 0)) {
      console.log('   üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ï—Å—Ç—å farming_data, –Ω–æ –Ω–µ—Ç boost –≤ users!');
    }
    if (usersWithBoost && usersWithBoost.length > 0 && (!allBoostData || allBoostData.length === 0)) {
      console.log('   üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ï—Å—Ç—å boost –≤ users, –Ω–æ –Ω–µ—Ç farming_data!');
    }

  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
  }
}

checkDatabaseIntegrity();