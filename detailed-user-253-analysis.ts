import { supabase } from './core/supabaseClient';

async function detailedAnalysisUser253() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID 253');
  console.log('='.repeat(60));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 253 –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    console.log('\n1Ô∏è‚É£ –í–°–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 253 –ó–ê –í–°–ï –í–†–ï–ú–Ø:');
    const { data: allTransactions, error: allTxError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', 253)
      .order('created_at', { ascending: false });

    if (allTxError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTxError.message);
    } else {
      console.log(`üìã –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${allTransactions?.length || 0}`);
      
      if (allTransactions && allTransactions.length > 0) {
        allTransactions.forEach((tx, idx) => {
          console.log(`   ${idx + 1}. [${tx.created_at}] ${tx.type || tx.transaction_type}`);
          console.log(`      Amount: ${tx.amount || tx.amount_ton || tx.amount_uni || '0'}`);
          console.log(`      Description: ${tx.description || '–Ω–µ—Ç'}`);
          console.log('      ---');
        });
      } else {
        console.log('‚ùå –ù–ò –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–û –ó–ê –í–°–ï –í–†–ï–ú–Ø');
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ TRANSACTIONS:');
    const { data: sampleTx, error: sampleError } = await supabase
      .from('transactions')
      .select('*')
      .limit(1);

    if (!sampleError && sampleTx && sampleTx.length > 0) {
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã transactions:');
      console.log(Object.keys(sampleTx[0]).join(', '));
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\n3Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    const { data: recentTx, error: recentError } = await supabase
      .from('transactions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (!recentError && recentTx) {
      console.log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ:`);
      recentTx.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. User ${tx.user_id}: [${tx.created_at}] ${tx.type || tx.transaction_type}`);
        console.log(`      Amount: ${tx.amount || tx.amount_ton || tx.amount_uni || '0'}`);
        console.log(`      Description: ${(tx.description || '').substring(0, 50)}...`);
      });
    }

    // 4. –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –≤ —Ü–µ–ª–æ–º
    console.log('\n4Ô∏è‚É£ –ü–û–ò–°–ö TON –î–ï–ü–û–ó–ò–¢–û–í –í –°–ò–°–¢–ï–ú–ï:');
    const { data: tonDeposits, error: tonDepositError } = await supabase
      .from('transactions')
      .select('*')
      .or('type.ilike.%DEPOSIT%,description.ilike.%deposit%,description.ilike.%–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ%')
      .order('created_at', { ascending: false })
      .limit(20);

    if (!tonDepositError && tonDeposits) {
      console.log(`üíé –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${tonDeposits.length}`);
      tonDeposits.forEach((tx, idx) => {
        console.log(`   ${idx + 1}. User ${tx.user_id}: [${tx.created_at}]`);
        console.log(`      Type: ${tx.type || tx.transaction_type}`);
        console.log(`      Amount: ${tx.amount || tx.amount_ton || tx.amount_uni || '0'}`);
        console.log(`      Description: ${(tx.description || '').substring(0, 50)}...`);
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º user_balances
    const { data: userBalance, error: balanceError } = await supabase
      .from('user_balances')
      .select('*')
      .eq('user_id', 253);

    if (!balanceError && userBalance) {
      console.log(`üí∞ –ó–∞–ø–∏—Å–∏ –≤ user_balances –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 253: ${userBalance.length}`);
      userBalance.forEach(balance => {
        console.log(`   UNI: ${balance.balance_uni}, TON: ${balance.balance_ton}, Updated: ${balance.updated_at}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ton_farming_data
    const { data: farmingData, error: farmingError } = await supabase
      .from('ton_farming_data')
      .select('*')
      .eq('user_id', '253');

    if (!farmingError && farmingData) {
      console.log(`üåæ –ó–∞–ø–∏—Å–∏ –≤ ton_farming_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 253: ${farmingData.length}`);
      farmingData.forEach(farming => {
        console.log(`   Farming Balance: ${farming.farming_balance}, Rate: ${farming.farming_rate}`);
        console.log(`   Boost Active: ${farming.boost_active}, Last Update: ${farming.last_update}`);
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    console.log('\n6Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–û–ó–ú–û–ñ–ù–´–• –ü–†–û–ë–õ–ï–ú:');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 253 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚ùì –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
    console.log('   - API endpoint –¥–ª—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, –Ω–æ –æ—Ç–∫–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫');
    console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   - Constraint violations –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ë–î');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
detailedAnalysisUser253().catch(console.error);